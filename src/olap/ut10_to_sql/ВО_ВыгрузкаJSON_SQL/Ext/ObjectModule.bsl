


Функция СтруктураВjson(Значение)  ЭКСПОРТ
	
	Если Значение = неопределено Тогда
		возврат "";
	КонецЕсли;
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	СтрJSON = ЗаписьJSON.Закрыть();
	
	возврат СтрJSON;
	
КонецФункции




Функция ВыгрузитьПродажи(датаН, датаК)ЭКСПОРТ
	_датаН = датаН;
	_датаК = датаН;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.Склады";
	мСклады = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	шагВДнях = 1;
	Пока _датаН < датаК Цикл
		
		Для Каждого склад из мСклады Цикл
			ВыгрузитьПродажи_(_датаН, _датаК, склад);
		КонецЦикла;
		
		_датаН = КонецДня(_датаК)+1;	
		_датаК = КонецДня(_датаК + 60*60*24*шагВДнях);
		Если _датаК > датаК Тогда
			_датаК = датаК;
		КонецЕсли;
	КонецЦИкла;
КонецФУнкции

Функция ВыгрузитьПродажи_(датаН, датаК,склад)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",склад);
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(датаН));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(датаК));
	Запрос.Текст = "ВЫБРАТЬ
	               |	продажи.Ссылка,
	               |	ПРЕДСТАВЛЕНИЕ(продажи.Ссылка) КАК СсылкаПредставление,
	               |	продажи.НомерСтроки,
	               |	продажи.Ссылка.Номер КАК Номер,
	               |	продажи.Ссылка.Дата КАК Дата,
	               |	продажи.Ссылка.Склад КАК Магазин,
	               |	ЕСТЬNULL(нБК.Ссылка, продажи.Номенклатура) КАК Номенклатура,
	               |	продажи.Цена,
	               |	продажи.Количество * ВЫБОР
	               |		КОГДА ЕСТЬNULL(продажи.Коэффициент, 0) = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ продажи.Коэффициент
	               |	КОНЕЦ КАК Количество,
	               |	продажи.Сумма,
	               |	продажи.ХарактеристикаНоменклатуры,
	               |	продажи.Ссылка.Организация КАК Организация
	               |ИЗ
	               |	Документ.ОтчетОРозничныхПродажах.Товары КАК продажи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК нБК
	               |		ПО (нБК.Ссылка = продажи.Номенклатура.РеальнаяНоменклатураДляБК)
	               |ГДЕ
	               |	продажи.Ссылка.Дата >= &ДатаН
	               |	И продажи.Ссылка.Дата <= &ДатаК
	               |	И продажи.Ссылка.Проведен = ИСТИНА
	               |	И продажи.Ссылка.Склад = &Склад";
	
	тз = Запрос.Выполнить().Выгрузить();
	массивДанных = ТаблицаЗначенийВМассивДанных(тз);
	
	Если ЛОЖЬ Тогда склад = Справочники.Склады.ПустаяСсылка(); КонецЕсли;
	складУИ = Строка(склад.УникальныйИдентификатор());
	
	суфиксТмп = ""+ДатуВСтрокуСКЛ(НачалоДня(датаН))+"_"+ДатуВСтрокуСКЛ(КонецДня(датаК));
	ДанныеВСиквел(
		массивДанных,
		"ОтчетОРозничныхПродажах", 
		" [Магазин] ='"+складУИ+"' AND [Дата] >= '"+ДатуВСтрокуСКЛ(НачалоДня(датаН))+"' AND [Дата] <= '"+ДатуВСтрокуСКЛ(КонецДня(датаК))+"' ",
		ложь,
		суфиксТмп		
	);
КонецФункции




Функция ВыгрузитьВозвраты(датаН, датаК)ЭКСПОРТ
	_датаН = датаН;
	_датаК = датаН;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.Склады";
	мСклады = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	шагВДнях = 1;
	Пока _датаН < датаК Цикл
		
		Для Каждого склад из мСклады Цикл
			ВыгрузитьВозвраты_(_датаН, _датаК, склад);
		КонецЦикла;
		
		_датаН = КонецДня(_датаК)+1;	
		_датаК = КонецДня(_датаК + 60*60*24*шагВДнях);
		Если _датаК > датаК Тогда
			_датаК = датаК;
		КонецЕсли;
	КонецЦИкла;
КонецФУнкции

Функция ВыгрузитьВозвраты_(датаН, датаК,склад)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",склад);
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(датаН));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(датаК));
	Запрос.Текст = "ВЫБРАТЬ
	               |	возвраты.Ссылка,
	               |	ПРЕДСТАВЛЕНИЕ(возвраты.Ссылка) КАК СсылкаПредставление,
	               |	возвраты.НомерСтроки,
	               |	возвраты.Ссылка.Номер КАК Номер,
	               |	возвраты.Ссылка.Дата КАК Дата,
	               |	возвраты.Ссылка.Склад КАК Магазин,
	               |	возвраты.Номенклатура,
	               |	возвраты.Цена,
	               |	возвраты.Количество * ВЫБОР
	               |		КОГДА ЕСТЬNULL(возвраты.Коэффициент, 0) = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ возвраты.Коэффициент
	               |	КОНЕЦ КАК Количество,
	               |	возвраты.Сумма,
	               |	возвраты.ХарактеристикаНоменклатуры,
	               |	возвраты.Ссылка.Организация КАК Организация
	               |ИЗ
	               |	Документ.ВозвратТоваровОтПокупателя.Товары КАК возвраты
	               |ГДЕ
	               |	возвраты.Ссылка.Дата >= &ДатаН
	               |	И возвраты.Ссылка.Дата <= &ДатаК
	               |	И возвраты.Ссылка.Проведен = ИСТИНА
	               |	И возвраты.Ссылка.Склад = &Склад";
	
	тз = Запрос.Выполнить().Выгрузить();
	массивДанных = ТаблицаЗначенийВМассивДанных(тз);
	
	Если ЛОЖЬ Тогда склад = Справочники.Склады.ПустаяСсылка(); КонецЕсли;
	складУИ = Строка(склад.УникальныйИдентификатор());
	
	суфиксТмп = ""+ДатуВСтрокуСКЛ(НачалоДня(датаН))+"_"+ДатуВСтрокуСКЛ(КонецДня(датаК));
	ДанныеВСиквел(
		массивДанных,
		"ВозвратТоваровОтПокупателя", 
		" [Магазин] ='"+складУИ+"' AND [Дата] >= '"+ДатуВСтрокуСКЛ(НачалоДня(датаН))+"' AND [Дата] <= '"+ДатуВСтрокуСКЛ(КонецДня(датаК))+"' ",
		ложь,
		суфиксТмп		
	);

КонецФункции




Функция ВыгиузкаЗакупку(датаН, датаК)ЭКСПОРТ
	_датаН = датаН;
	_датаК = датаН;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.Склады";
	мСклады = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	шагВДнях = 1;
	Пока _датаН < датаК Цикл
		Для Каждого склад из мСклады Цикл
			ВыгиузкаЗакупку_(_датаН, _датаК, склад);
		КонецЦикла;
		_датаН = КонецДня(_датаК)+1;	
		_датаК = КонецДня(_датаК + 60*60*24*шагВДнях);
		Если _датаК > датаК Тогда
			_датаК = датаК;
		КонецЕсли;
	КонецЦИкла;

КонецФункции

Функция ВыгиузкаЗакупку_(датаН, датаК, склад)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",склад);
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(датаН));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(датаК));
	Запрос.Текст = "ВЫБРАТЬ
	               |	закупка.Ссылка,
	               |	закупка.НомерСтроки,
	               |	закупка.Ссылка.Номер КАК Номер,
	               |	закупка.Ссылка.Дата КАК Дата,
	               |	закупка.Ссылка.СкладОрдер КАК Склад,
	               |	закупка.Номенклатура,
	               |	закупка.Цена,
	               |	закупка.Количество * ВЫБОР
	               |		КОГДА ЕСТЬNULL(закупка.Коэффициент, 0) = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ закупка.Коэффициент
	               |	КОНЕЦ КАК Количество,
	               |	закупка.Сумма,
	               |	закупка.ХарактеристикаНоменклатуры,
	               |	закупка.Ссылка.Организация КАК Организация
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Товары КАК закупка
	               |ГДЕ
	               |	закупка.Ссылка.Дата >= &ДатаН
	               |	И закупка.Ссылка.Дата <= &ДатаК
	               |	И закупка.Ссылка.Проведен = ИСТИНА
	               |	И закупка.Ссылка.СкладОрдер = &Склад";
	
	тз = Запрос.Выполнить().Выгрузить();
	массивДанных = ТаблицаЗначенийВМассивДанных(тз);	
	
	Если ЛОЖЬ Тогда склад = Справочники.Склады.ПустаяСсылка(); КонецЕсли;
	складУИ = Строка(склад.УникальныйИдентификатор());
	
	суфиксТмп = ""+ДатуВСтрокуСКЛ(НачалоДня(датаН))+"_"+ДатуВСтрокуСКЛ(КонецДня(датаК));
	ДанныеВСиквел(
		массивДанных,
		"ПоступлениеТоваровУслуг", 
		" [Склад] ='"+складУИ+"' AND [Дата] >= '"+ДатуВСтрокуСКЛ(НачалоДня(датаН))+"' AND [Дата] <= '"+ДатуВСтрокуСКЛ(КонецДня(датаК))+"' ",
		ложь,
		суфиксТмп		
	);                                                                                                                                                                                        
КонецФункции




Функция ВыгрузитьТоварыОбороты(датаН, датаК)ЭКСПОРТ
	_датаН = датаН;
	_датаК = датаН;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.Склады";
	мСклады = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	шагВДнях = 1;
	Пока _датаН < датаК Цикл
		Для Каждого склад из мСклады Цикл
			ВыгрузитьТоварыОбороты_(_датаН, _датаК, склад);
		КонецЦикла;
		
		_датаН = КонецДня(_датаК)+1;	
		_датаК = КонецДня(_датаК + 60*60*24*шагВДнях);
		Если _датаК > датаК Тогда
			_датаК = датаК;
		КонецЕсли;
	КонецЦИкла;

КонецФункции

Функция ВыгрузитьТоварыОбороты_(датаН, датаК, склад)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",склад);
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(датаН));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(датаК));
	Запрос.Текст = "ВЫБРАТЬ
	               |	Т.Период,
	               |	Т.ТипДвижения,
	               |	Т.Склад,
	               |	Т.Номенклатура,
	               |	СУММА(Т.КоличествоОборот) КАК КоличествоОборот,
	               |	СУММА(Т.КоличествоПриход) КАК КоличествоПриход,
	               |	СУММА(Т.КоличествоРасход) КАК КоличествоРасход
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		&датаН КАК Период,
	               |		ТИПЗНАЧЕНИЯ(оборотыРозница.Регистратор) КАК ТипДвижения,
	               |		оборотыРозница.Склад КАК Склад,
	               |		оборотыРозница.Номенклатура КАК Номенклатура,
	               |		оборотыРозница.КоличествоОборот КАК КоличествоОборот,
	               |		оборотыРозница.КоличествоПриход КАК КоличествоПриход,
	               |		оборотыРозница.КоличествоРасход КАК КоличествоРасход
	               |	ИЗ
	               |		РегистрНакопления.ТоварыВРознице.Обороты(&датаН, &датаК, Регистратор, Склад = &Склад) КАК оборотыРозница
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		&датаН,
	               |		ТИПЗНАЧЕНИЯ(товарыНаСкладах.Регистратор),
	               |		товарыНаСкладах.Склад,
	               |		товарыНаСкладах.Номенклатура,
	               |		товарыНаСкладах.КоличествоОборот,
	               |		товарыНаСкладах.КоличествоПриход,
	               |		товарыНаСкладах.КоличествоРасход
	               |	ИЗ
	               |		РегистрНакопления.ТоварыНаСкладах.Обороты(&датаН, &датаК, Регистратор, Склад = &Склад) КАК товарыНаСкладах) КАК Т
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Т.ТипДвижения,
	               |	Т.Номенклатура,
	               |	Т.Период,
	               |	Т.Склад";
	
	тз = Запрос.Выполнить().Выгрузить();
	массивДанных = ТаблицаЗначенийВМассивДанных(тз);
	
	Если ЛОЖЬ Тогда склад = Справочники.Склады.ПустаяСсылка(); КонецЕсли;
	складУИ = Строка(склад.УникальныйИдентификатор());
	
	суфиксТмп = ""+ДатуВСтрокуСКЛ(НачалоДня(датаН))+"_"+ДатуВСтрокуСКЛ(КонецДня(датаК));
	ДанныеВСиквел(
		массивДанных,
		"ТоварыОбороты", 
		" [Склад] ='"+складУИ+"' AND [Период] >= '"+ДатуВСтрокуСКЛ(НачалоДня(датаН))+"' AND [Период] <= '"+ДатуВСтрокуСКЛ(КонецДня(датаК))+"' ",
		ложь,
		суфиксТмп		
	);                                                                                                                                                                                   
КонецФункции




Функция ВыгрузитьТоварыОстатки(датаН, датаК)ЭКСПОРТ
	_датаН = датаН;
	_датаК = датаН;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.Склады";
	мСклады = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	шагВДнях = 1;
	Пока _датаН < датаК Цикл
		Для Каждого склад из мСклады Цикл
			ВыгрузитьТоварыОстатки_(_датаН, _датаК, склад);
		КонецЦикла;
		
		_датаН = КонецДня(_датаК)+1;	
		_датаК = КонецДня(_датаК + 60*60*24*шагВДнях);
		Если _датаК > датаК Тогда
			_датаК = датаК;
		КонецЕсли;
	КонецЦИкла;

КонецФункции

Функция ВыгрузитьТоварыОстатки_(датаН, датаК, склад)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад",склад);
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(датаН));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(датаК));
	Запрос.Текст =  "ВЫБРАТЬ
	                |	&датаН КАК Период,
	                |	оборотыРозница.Склад,
	                |	оборотыРозница.Номенклатура,
	                |	оборотыРозница.КоличествоНачальныйОстаток,
	                |	оборотыРозница.КоличествоОборот,
	                |	оборотыРозница.КоличествоКонечныйОстаток,
	                |	оборотыРозница.КоличествоПриход,
	                |	оборотыРозница.КоличествоРасход
	                |ИЗ
	                |	РегистрНакопления.ТоварыВРознице.ОстаткиИОбороты(&датаН, &датаК, Период, ДвиженияИГраницыПериода, Склад = &Склад) КАК оборотыРозница
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	&датаН,
	                |	товарыНаСкладах.Склад,
	                |	товарыНаСкладах.Номенклатура, 
					|	товарыНаСкладах.КоличествоНачальныйОстаток,
	                |	товарыНаСкладах.КоличествоОборот,
	                |	товарыНаСкладах.КоличествоКонечныйОстаток,
	                |	товарыНаСкладах.КоличествоПриход,
	                |	товарыНаСкладах.КоличествоРасход
	                |ИЗ
	                |	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&датаН, &датаК, Период, ДвиженияИГраницыПериода, Склад = &Склад) КАК товарыНаСкладах";
	
	тз = Запрос.Выполнить().Выгрузить();
	массивДанных = ТаблицаЗначенийВМассивДанных(тз);
	
	Если ЛОЖЬ Тогда склад = Справочники.Склады.ПустаяСсылка(); КонецЕсли;
	складУИ = Строка(склад.УникальныйИдентификатор());
	
	суфиксТмп = ""+ДатуВСтрокуСКЛ(НачалоДня(датаН))+"_"+ДатуВСтрокуСКЛ(КонецДня(датаК));
	ДанныеВСиквел(
		массивДанных,
		"ТоварыОстатки", 
		" [Склад] ='"+складУИ+"' AND [Период] >= '"+ДатуВСтрокуСКЛ(НачалоДня(датаН))+"' AND [Период] <= '"+ДатуВСтрокуСКЛ(КонецДня(датаК))+"' ",
		ложь,
		суфиксТмп		
	);
КонецФункции




Функция СправочникНоменклатурыИерархия(датаН,датаК) ЭКСПОРТ	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(датаН));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(датаК));
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номен.Ссылка,
	               |	Номен.Родитель,
	               |	Номен.ЭтоГруппа,
	               |	Номен.Код,
	               |	Номен.Наименование
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номен
	               |ГДЕ
	               |	Номен.ЭтоГруппа";
	
	
	тз = Запрос.Выполнить().Выгрузить();
	массивДанных = ТаблицаЗначенийВМассивДанных(тз);	
	ДанныеВСиквел(массивДанных,"НоменклатураИерархия",,ИСТИНА);
КонецФункции

Функция СправочникНоменклатуры(датаН, датаК) ЭКСПОРТ	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(датаН));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(датаК));
	Запрос.Текст = "ВЫБРАТЬ
	               |	Номен.Ссылка,
	               |	Номен.Родитель,
	               |	Номен.ЭтоГруппа,
	               |	Номен.Код,
	               |	Номен.Наименование,
	               |	Номен.Артикул,
	               |	Номен.БазоваяЕдиницаИзмерения.Наименование,
	               |	Номен.ЕдиницаХраненияОстатков.Наименование,
	               |	Номен.ЕдиницаДляОтчетов.Наименование,
	               |	Номен.ВестиУчетПоХарактеристикам,
	               |	Номен.НаименованиеПолное,
	               |	Номен.Услуга КАК Услуга,
	               |	ПРЕДСТАВЛЕНИЕ(Номен.Статус) КАК Статус,
	               |	Номен.Представление,
	               |	Номен.Родитель.Наименование,
	               |	ПРЕДСТАВЛЕНИЕ(Номен.ОсновнойПоставщик) КАК ОсновнойПоставщик
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номен
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	               |	NULL,
	               |	ИСТИНА,
	               |	NULL,
	               |	""Номенклатура"",
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL";
	
	
	тз = Запрос.Выполнить().Выгрузить();
	массивДанных = ТаблицаЗначенийВМассивДанных(тз);	
	ДанныеВСиквел(массивДанных,"Номенклатура",,ИСТИНА);
КонецФункции

Функция СправочникНоменклатуры_ДопСвойства(датаН, датаК) ЭКСПОРТ
	
	массивСвойств = Новый Массив;
	массивСвойств.Добавить("Бренд");
	массивСвойств.Добавить("Класс");
	массивСвойств.Добавить("Формат");
	массивСвойств.Добавить("Рейтинг продаж");
	
	стрСелектор = "";
	Для Каждого свойство ИЗ массивСвойств Цикл
		альяс = СтрокаВАльяс(свойство);
		
		стрСелектор = стрСелектор + Символы.ПС+
			" , MAX(CASE WHEN Свойства.Свойство.Наименование = """+свойство+""" THEN (Свойства.Значение.Наименование) ELSE """" END) AS "+альяс+"";
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(датаН));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(датаК));
	Запрос.УстановитьПараметр("НаименованиеСвойств",массивСвойств);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Свойства.Объект КАК Номенклатура "+стрСелектор+"
	               |ИЗ
	               |	РегистрСведений.ЗначенияСвойствОбъектов КАК Свойства
	               |ГДЕ
	               |	Свойства.Объект ССЫЛКА Справочник.Номенклатура
	               |	И Свойства.Свойство.Наименование В(&НаименованиеСвойств)
				   |GROUP BY Свойства.Объект";
	
	
	тз = Запрос.Выполнить().Выгрузить();
	массивДанных = ТаблицаЗначенийВМассивДанных(тз);	
	ДанныеВСиквел(массивДанных,"НоменклатураСвойства",,ИСТИНА);
КонецФункции

Функция СправочникНоменклатуры_ЦеныПоследние(датаН, датаК) ЭКСПОРТ
	мВидыЦен = Новый Массив;
	мВидыЦен.Добавить(Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001"));//закупочная
	мВидыЦен.Добавить(Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000074"));//Расчетная-Базовая
	
	стрСелектор = "";
	Для Каждого видЦены ИЗ мВидыЦен Цикл
		альяс = СтрокаВАльяс(видЦены);
		
		стрСелектор = стрСелектор + Символы.ПС+
			" , MAX(CASE WHEN Т.ТипЦенКод = """+видЦены.Код+""" THEN (Т.Цена) ELSE 0 END) AS "+альяс+"";
	КонецЦикла;

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мВидыЦен",мВидыЦен);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Т.Номенклатура  "+стрСелектор+"

	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Номен.Ссылка КАК Номенклатура,
	               |		цены.ТипЦен.Код КАК ТипЦенКод,
	               |		МАКСИМУМ(цены.Цена) КАК Цена
	               |	ИЗ
	               |		Справочник.Номенклатура КАК Номен
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ТипЦен В (&мВидыЦен)) КАК цены
	               |			ПО (цены.Номенклатура = Номен.Ссылка)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		цены.ТипЦен.Код,
	               |		Номен.Ссылка) КАК Т
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Т.Номенклатура";
	
	тз = Запрос.Выполнить().Выгрузить();
	массивДанных = ТаблицаЗначенийВМассивДанных(тз);	
	ДанныеВСиквел(массивДанных,"НоменклатураЦеныПоследние",,ИСТИНА);
КонецФункции

Функция СправочникНоменклатуры_ОстаткиПоследние(датаН, датаК) ЭКСПОРТ
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	оборотыРозница.Склад,
	                |	оборотыРозница.Номенклатура,
	                |	оборотыРозница.КоличествоОстаток
	                |ИЗ
	                |	РегистрНакопления.ТоварыВРознице.Остатки(, ) КАК оборотыРозница
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	товарыНаСкладах.Склад,
	                |	товарыНаСкладах.Номенклатура,
	                |	товарыНаСкладах.КоличествоОстаток
	                |ИЗ
	                |	РегистрНакопления.ТоварыНаСкладах.Остатки(, ) КАК товарыНаСкладах";
	
	тз = Запрос.Выполнить().Выгрузить();
	массивДанных = ТаблицаЗначенийВМассивДанных(тз);	
	ДанныеВСиквел(массивДанных,"НоменклатураОстаткиПоследние",,ИСТИНА);

КонецФункции

Функция СправочникМагазины(датаН, датаК) ЭКСПОРТ	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(датаН));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(датаК));
	Запрос.Текст = "ВЫБРАТЬ
	               |	склады.Ссылка,
	               |	склады.ЭтоГруппа КАК ЭтоГруппа,
	               |	склады.Код,
	               |	склады.Наименование,
	               |	ПРЕДСТАВЛЕНИЕ(склады.ВидСклада) КАК ВидСклада,
	               |	ПРЕДСТАВЛЕНИЕ(склады.ПочтовыйЯщик) КАК ПочтовыйЯщик,
	               |	склады.Адрес,
	               |	ВЫБОР
	               |		КОГДА склады.Адрес ПОДОБНО ""%г. Москва%""
	               |			ТОГДА ""МСК""
	               |		ИНАЧЕ ""СПб""
	               |	КОНЕЦ КАК Город
	               |ИЗ
	               |	Справочник.Склады КАК склады
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЭтоГруппа";
	
	
	тз = Запрос.Выполнить().Выгрузить();
	массивДанных = ТаблицаЗначенийВМассивДанных(тз);	
	ДанныеВСиквел(массивДанных,"Склады",,ИСТИНА);
КонецФункции

Функция СправочникОрганизации(датаН, датаК) ЭКСПОРТ	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	организации.Ссылка,
	               |	организации.Код,
	               |	организации.Наименование,
	               |	организации.НаименованиеПолное,
	               |	организации.ИНН
	               |ИЗ
	               |	Справочник.Организации КАК организации";
	
	тз = Запрос.Выполнить().Выгрузить();
	массивДанных = ТаблицаЗначенийВМассивДанных(тз);	
	ДанныеВСиквел(массивДанных,"Организации",,ИСТИНА);
КонецФункции

//// 

Функция ДатуВСтрокуСКЛ(дата)
	Возврат ФОРМАТ((дата),"ДФ=""ггггММдд ЧЧ:мм:сс""");	
КонецФункции

Функция СтрокаВАльяс(стр)
	альяс = стр; 
	альяс = СтрЗаменить(альяс," ","_");
	альяс = СтрЗаменить(альяс,"-","_");
	Возврат альяс;
КонецФУнкции

Функция ТаблицаЗначенийВМассивДанных(тз)
	Если ЛОЖЬ Тогда тз = новый ТаблицаЗначений; КонецЕсли;
	
	мИсключениеИменаКолонокКакСтрока = новый Массив;
	мИсключениеИменаКолонокКакСтрока.Добавить("Регистратор");
	результ = новый Массив;
	Для Каждого стр из тз Цикл
		запись = новый Структура;
		
		Для Каждого колонка из тз.Колонки Цикл
			ключ = колонка.Имя;
			значение = стр[колонка.Имя];
			Если (значение = неопределено) ИЛИ (значение = Null) Тогда
				Если мИсключениеИменаКолонокКакСтрока.Найти(колонка.Имя) <> неопределено Тогда
					Если(колонка.ТипЗначения.Типы().Найти(Тип("Строка")))Тогда
						значение = "";
					ИначеЕсли(колонка.ТипЗначения.Типы().Найти(Тип("Число")))Тогда
						Значение = 0;
					ИначеЕсли(колонка.ТипЗначения.Типы().Найти(Тип("Булево")))Тогда
						Значение = ЛОЖЬ;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТипЗнч(значение) = тип("Булево") Тогда
				Если значение = Истина Тогда
					Значение = 1;
				Иначе
					Значение = 0;
				КонецЕсли;
			ИначеЕсли ТипЗнч(значение) = тип("Дата") Тогда
			ИначеЕсли ТипЗнч(значение) = тип("Строка") Тогда
			ИначеЕсли ТипЗнч(значение) = тип("Число") Тогда
			ИначеЕсли ТипЗнч(значение) = тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
				значение = Строка(значение);
			Иначе
				Попытка
					значение = Строка(значение.УникальныйИдентификатор());
				Исключение
					значение = Строка(значение);
				Конецпопытки;
				
			КонецЕсли;
			
			запись.Вставить(ключ,значение);
		КонецЦикла;
		
		результ.Добавить(запись);
	КонецЦикла;
	
	Возврат результ;
КонецФункции

Процедура ДанныеВСиквел(массивДанных, имяТаблицы, where = "", replace = false, суфиксТмп = "")
	
	папка = "\\192.168.0.154\Volume_1\deploy\jsonToSql\";
	рандом = новый УникальныйИдентификатор();
	имяФайла = "" + рандом + ".json";	
	полныйПуть = папка + имяФайла; 
	
	табДокумент = новый ТекстовыйДокумент;
	табДокумент.УстановитьТекст(СтруктураВjson(массивДанных));
	табДокумент.Записать(полныйПуть, КодировкаТекста.ANSI);
	
	
	балк = ГенерацияSQL_BULK(массивДанных, полныйПуть, имяТаблицы, суфиксТмп); 
	
	
	
	Если балк <> неопределено Тогда
		ВыполниттьSQL(балк, ИСТИНА);	
		Попытка
			ВыполниттьSQL(ГенерацияSQL_INSERT_TRY(имяТаблицы), ЛОЖЬ);	
		Исключение	                                       
			
			sqlMerge = ГенерацияSQL_MERGE(имяТаблицы, where, replace, суфиксТмп);
			//Сообщить(sqlMerge);
			ВыполниттьSQL(sqlMerge, ИСТИНА);
		Конецпопытки;
		
		ВыполниттьSQL(ГенерацияSQL_DROP_Артефактов(имяТаблицы, суфиксТмп), ИСТИНА);
	КонецЕсли;
	УдалитьФайлы(папка,имяФайла);
	
КонецПроцедуры

Процедура ВыполниттьSQL(запросSQL, выводитьЗапросПриОшибке = ЛОЖЬ)
	//Инициализация переменных
    ИмяСервераSQL = "DBSERV4";
    ПользовательSQL = "sa";
    ПарольSQL = "Pdv4753!";
    БазаДанныхSQL = "OLAP";	
	
	/////////////////////////////////////////
    //Подключение к SQL-серверу
	Соединение  = Новый COMОбъект("ADODB.Connection");
    Команда     = Новый COMОбъект("ADODB.Command");
    Выборка     = Новый COMОбъект("ADODB.RecordSet");
    Соединение.ConnectionString =
        "driver={SQL Server};" +
        "server="+ИмяСервераSQL+";"+
        "uid="+ПользовательSQL+";"+
        "pwd="+ПарольSQL+";"+
        "database="+БазаДанныхSQL+";";
    Соединение.ConnectionTimeout = 30;
    Соединение.CommandTimeout = 60000;
    //Открытие соединение
    Соединение.Open();
    Команда.ActiveConnection   = Соединение;
    //Сообщить("Успешное подключение!")
	Попытка
		Соединение.Execute(запросSQL,,128);
	Исключение
		Если выводитьЗапросПриОшибке Тогда
			Сообщить(запросSQL);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	
	Соединение.Close();

	
КонецПроцедуры

Функция ГенерацияSQL_INSERT_TRY(имяТаблицы, суфиксТмп = "")
	Возврат "SELECT * INTO ["+имяТаблицы+"] FROM ["+ГенерацияИмениВременноТаблици(имяТаблицы, суфиксТмп)+"]";
КонецФункции

Функция ГенерацияSQL_MERGE(имяТаблицы, where = неопределено,replace=false, суфиксТмп = "")
	
	Если replace Тогда
		Возврат "
		|BEGIN TRAN
		|DELETE FROM ["+имяТаблицы+"]  
		|INSERT INTO ["+имяТаблицы+"] SELECT * FROM ["+ГенерацияИмениВременноТаблици(имяТаблицы, суфиксТмп)+"]
		|COMMIT TRAN";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(where) Тогда
		Возврат "
		|BEGIN TRAN
		|DELETE FROM ["+имяТаблицы+"] WHERE "+where+" 
		|INSERT INTO ["+имяТаблицы+"] SELECT * FROM ["+ГенерацияИмениВременноТаблици(имяТаблицы, суфиксТмп)+"]
		|COMMIT TRAN";
	КонецЕсли;
	
	
	//
	//Возврат "DECLARE @output nvarchar(max) 
	//		|EXEC sp_generate_merge 
	//		|	@table_name = '"+имяТаблицы+"_tmp', 
	//		|	@target_table = '"+имяТаблицы+"',
	//		|	@cols_to_join_on = """+имяПолейКлючей+""",
	//		|	@batch_separator = null,
	//		|	@results_to_text = 1,
	//		|	@include_use_db = 0,
	//		|	@output = @output output
	//		|EXEC(@output)";
КонецФункции

Функция ГенерацияИмениВременноТаблици(имяТаблицы, суфиксТмп="")
	Возврат ""+имяТаблицы+  "_"+суфиксТмп+"_tmp";
КонецФункции

Функция ГенерацияSQL_DROP_Артефактов(имяТаблицы, суфиксТмп)
	Возврат "DROP TABLE ["+ГенерацияИмениВременноТаблици(имяТаблицы, суфиксТмп)+"]"
КонецФункции

Функция ГенерацияSQL_BULK(массивДанных, имяФайла, имяТаблицы, суфиксТмп)
	Если ЛОЖЬ Тогда массивДанных = Новый Массив; КонецЕсли;
	Если массивДанных.Количество() = 0 Тогда
		Возврат неопределено;
	КонецЕсли;
	
	запись = массивДанных[0];
	Если ЛОЖЬ Тогда запись = новый Структура; КонецЕсли;
	
	строкаWITH = "";
	
	Для Каждого эл из запись Цикл
		имяПоля = эл.Ключ;
		имяТипа = "nvarchar(255)";
		Если ТипЗнч(эл.Значение)=Тип("Строка") Тогда
			имяТипа = "nvarchar(255)";
		ИначеЕсли ТипЗнч(эл.Значение)=Тип("Число") Тогда
			имяТипа = "decimal(15,5)";
		ИначеЕсли ТипЗнч(эл.Значение)=Тип("Дата") Тогда
			имяТипа = "datetime2";
		ИначеЕсли ТипЗнч(эл.Значение)=Тип("Булево") Тогда
			имяТипа = "bit";
		Иначе
			имяТипа = "nvarchar(255)";
		КонецЕсли;;
		
		строкаWITH = строкаWITH + "["+имяПоля+"] "+имяТипа + ",";		
	КонецЦикла;
	строкаWITH = Лев(строкаWITH,СтрДлина(строкаWITH) - 1);
	
	Возврат "
	|SELECT 
	|	T.*
	|INTO ["+ГенерацияИмениВременноТаблици(имяТаблицы, суфиксТмп)+"]
	|FROM OPENROWSET (BULK '"+имяФайла+"', SINGLE_CLOB) as j
	|	CROSS APPLY OPENJSON(BulkColumn)
	|	WITH(
	|		"+строкаWITH+"
	|	) AS T";

КонецФункции

Функция ТабличныйДокументИзТаблицы(массивДанных) ЭКСПОРТ
	табДокумент = Новый ТабличныйДокумент;
	Если ЛОЖЬ Тогда массивДанных = Новый Массив; КонецЕсли;
	
	номерКолонки = 1;
	номерСтроки = 1;
	
	Для Каждого стр из массивДанных Цикл
		Если ЛОЖЬ Тогда стр = новый Структура; КонецЕсли;
		Если номерСтроки = 1 Тогда
			Для Каждого эл из стр Цикл
				табДокумент.Область(номерСтроки,номерКолонки,номерСтроки,номерКолонки).Текст = эл.Ключ;
				номерКолонки = номерКолонки + 1;
			КонецЦикла;
		КонецЕсли;
		
		номерКолонки = 1;
		номерСтроки = номерСтроки + 1;
		Для Каждого эл из стр Цикл
			табДокумент.Область(номерСтроки,номерКолонки,номерСтроки,номерКолонки).Текст = эл.Значение;
			номерКолонки = номерКолонки + 1;
		КонецЦикла;
		
	КонецЦикла;
	Возврат табДокумент;    
КонецФУнкции


////////////////////
Функция ВыполнитьВсе(датаН, датаК) ЭКСПОРТ
	СправочникНоменклатуры_ДопСвойства(датаН,датаК);
	СправочникНоменклатуры(датаН,датаК);
	СправочникНоменклатурыИерархия(датаН,датаК);
	//СправочникЗначенияСвойствОбъектов(датаН,датаК);
	СправочникМагазины(датаН,датаК);
	СправочникОрганизации(датаН,датаК);
	
	СправочникНоменклатуры_ЦеныПоследние(датаН,датаК);
	СправочникНоменклатуры_ОстаткиПоследние(датаН,датаК);
	ВыгрузитьТоварыОстатки(датаН,датаК);	
	ВыгрузитьВозвраты(датаН,датаК);
	ВыгрузитьПродажи(датаН,датаК);
	ВыгиузкаЗакупку(датаН,датаК);
	ВыгрузитьТоварыОбороты(датаН,датаК);
КонецФункции

Функция AUTORUN(дней)
	ДатаН = НачалоДня(ТекущаяДата() - (дней+1) * 24 * 60 * 60);
	ДатаК = КонецДня(ТекущаяДата());
	
	ВыполнитьВсе(ДатаН, ДатаК);
КонецФункции

Функция Параметр_AUTOCLOSE()	
	Возврат ОбщегоНазначения.СтрНайти_Общая(ПараметрЗапуска, "AUTOCLOSE") > 0;	
КонецФункции

Функция Параметр_AUTORUN7()	
	Возврат ОбщегоНазначения.СтрНайти_Общая(ПараметрЗапуска, "AUTORUN7") > 0;	
КонецФункции

Функция РаспределитьПараметрыЗапуска()
	стрЗапуск = ПараметрЗапуска;
	резалт = новый Соответствие(); 
	м = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(стрЗапуск, " ");
	
	Если ЛОЖЬ Тогда м = новый Массив; КонецЕсли;
	
	
	
	последнийКлюч = "";
	резалт.Вставить(последнийКлюч,"");
	
	Для Каждого э из м Цикл
		Если Лев(э,1) = "-" Тогда 
			последнийКлюч = Прав(э, СтрДлина(э)-1);
			Если резалт.Получить(последнийКлюч) = неопределено Тогда
				резалт.Вставить(последнийКлюч,"");	
			КонецЕсли;
		Иначе
			резалт[последнийКлюч] = э;	
			
			Попытка 
				резалт[последнийКлюч] = Дата(резалт[последнийКлюч]);
			Исключение 
				Попытка 
					резалт[последнийКлюч] = Число(резалт[последнийКлюч]);
				Исключение 
				КонеЦпопытки;
			КонеЦпопытки;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого эл из резалт Цикл
		Сообщить(""+эл.Ключ + "=" + эл.Значение + ";"+ТипЗнч(эл.Значение));
	КонецЦикла;
	
	Возврат резалт;
	
КонецФункции

if(Параметр_AUTORUN7()) then 
	AUTORUN(7);	
endif;

if(Параметр_AUTOCLOSE()) then ЗавершитьРаботуСистемы(Ложь); endif;