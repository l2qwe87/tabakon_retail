
&Вместо("ДобавитьПКО_Справочник_Номенклатура_Получение")
Процедура TBK_BP_ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)
	// Вставить содержимое метода.
	//ПродолжитьВызов(ПравилаКонвертации);
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Номенклатура";
	//ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Артикул",                           "Артикул");
	ДобавитьПКС(СвойстваШапки, "ВидНоменклатуры",                   "ВидНоменклатуры", , "Справочник_ВидыНоменклатуры_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидСтавкиНДС",                      "", 1);
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",                  "ЕдиницаИзмерения", , "Справочник_ЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "Импортер",                          "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Код",                               "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "КодНоменклатурнойКлассификацииККТ", "", 1);
	ДобавитьПКС(СвойстваШапки, "КодОКВЭД",                          "КодОКВЭД", , "Справочник_ОКВЭД");
	ДобавитьПКС(СвойстваШапки, "КодОКП",                            "КодОКП", , "Справочник_ОКП");
	ДобавитьПКС(СвойстваШапки, "КодТНВЭД",                          "КодТНВЭД", , "Справочник_КлассификаторТНВЭД");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                       "Описание");
	ДобавитьПКС(СвойстваШапки, "Наименование",                      "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НоменклатурнаяГруппа",              "ГруппаАналитическогоУчета", , "Справочник_НоменклатурнаяГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "ОсновнаяСпецификацияНоменклатуры",  "ОсновнаяСпецификацияНоменклатуры", , "Справочник_СпецификацииНоменклатуры_Получение");
	ДобавитьПКС(СвойстваШапки, "Производитель",                     "", 1, "Справочник_Контрагенты_Получение");
	ДобавитьПКС(СвойстваШапки, "Родитель",                          "Группа", , "Справочник_НоменклатураГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "СтранаПроисхождения",               "СтранаПроисхождения", , "Справочник_СтраныМира");
	ДобавитьПКС(СвойстваШапки, "Услуга",                            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");

	//ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа,Родитель");
	//ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,ЭтоГруппа,Родитель");
	//ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

&После("ДобавитьПКО_Документ_ОтчетОРозничныхПродажах")
Процедура TBK_BP_ДобавитьПКО_Документ_ОтчетОРозничныхПродажах(ПравилаКонвертации)
	
	ПравилоКонвертации = ПравилаКонвертации.Найти("Документ_ОтчетОРозничныхПродажах","ИмяПКО");
	
	ДобавитьПКС(
		ПравилоКонвертации.СвойстваТабличныхЧастей.Найти("Товары").Свойства,
		"Себестоимость",
		"",
		1
	);
КонецПроцедуры

&После("ПКО_Документ_ОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO")
Процедура TBK_BP_ПКО_Документ_ОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Вставить содержимое метода.
	ИмяТабличнойЧастиТовары = ?(ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.6"),	
		"ТоварыПродажа", "Товары");
	ПрочитьСебестоимостьИзДопСвойств(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, ИмяТабличнойЧастиТовары);
КонецПроцедуры

Функция ПрочитьСебестоимостьИзДопСвойств(ДанныеXDTO,ПолученныеДанные,КомпонентыОбмена, ИмяТабличнойЧастиТовары)
	ТабличнаяЧастьТовары = Неопределено;
	Если ДанныеXDTO.Свойство(ИмяТабличнойЧастиТовары, ТабличнаяЧастьТовары)
		И ЗначениеЗаполнено(ТабличнаяЧастьТовары) Тогда
		
		инд = 0;
		Для Каждого Строка Из ТабличнаяЧастьТовары Цикл
			нСтр = ПолученныеДанные.ДополнительныеСвойства.Товары.Получить(инд);
			
			Если НЕ нСтр.Свойство("Себестоимость") Тогда
				нСтр.Вставить("Себестоимость")
			КонецЕсли;
			Если ДанныеXDTO.Свойство("AdditionalInfo") И ДанныеXDTO.AdditionalInfo.Свойство("Товары_Себестоимость") Тогда
				 нСтр.Себестоимость = ДанныеXDTO.AdditionalInfo.Товары_Себестоимость.Получить(инд);
			Иначе
				нСтр.Себестоимость = Строка.Себестоимость;
			КонецЕсли;
			
			инд = инд + 1;
		КонецЦикла;
	КонецЕсли;
Конецфункции

&После("ДобавитьПКО_Документ_РеализацияТоваровУслуг")
Процедура TBK_BP_ДобавитьПКО_Документ_РеализацияТоваровУслуг(ПравилаКонвертации)
	ПравилоКонвертации = ПравилаКонвертации.Найти("Документ_РеализацияТоваровУслуг","ИмяПКО");
	
	ДобавитьПКС(
		ПравилоКонвертации.СвойстваТабличныхЧастей.Найти("Товары").Свойства,
		"Себестоимость",
		"",
		1
	);

КонецПроцедуры

&После("ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO")
Процедура TBK_BP_ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ИмяТабличнойЧастиТовары = "Товары";
	ПрочитьСебестоимостьИзДопСвойств(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, ИмяТабличнойЧастиТовары);
КонецПроцедуры

&После("ДобавитьПКО_Документ_ПеремещениеТоваров_Получение")
Процедура TBK_BP_ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ПравилаКонвертации.Найти("Документ_ПеремещениеТоваров_Получение","ИмяПКО");
	
	ДобавитьПКС(
		ПравилоКонвертации.СвойстваТабличныхЧастей.Найти("Товары").Свойства,
		"Себестоимость",
		"",
		1
	);
КонецПроцедуры

&После("ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO")
Процедура TBK_BP_ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Вставить содержимое метода.
	ИмяТабличнойЧастиТовары = "Товары";
	ПрочитьСебестоимостьИзДопСвойств(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, ИмяТабличнойЧастиТовары);
	
	Для Каждого нСтр из ПолученныеДанные.ДополнительныеСвойства.Товары Цикл
		Если НЕ нСтр.Свойство("ЦенаВРознице") Тогда
			нСтр.Вставить("ЦенаВРознице")
		КонецЕсли;
		Если НЕ нСтр.Свойство("СуммаВРознице") Тогда
			нСтр.Вставить("СуммаВРознице")
		КонецЕсли; 
		нСтр.СуммаВРознице = нСтр.Себестоимость;
		нСтр.ЦенаВРознице = 0;
		Если ЗначениеЗаполнено(нСтр.Себестоимость) И ЗначениеЗаполнено(нСтр.Количество) Тогда
			нСтр.ЦенаВРознице = Окр(нСтр.Себестоимость / нСтр.Количество,2);
		КонецЕсли;
		//
		//Если ДанныеXDTO.СкладПолучатель.ТипСклада.Значение = "Розничный" Тогда
		//	Если НЕ нСтр.Свойство("НовыйСчетУчета") Тогда
		//		нСтр.Вставить("НовыйСчетУчета")
		//	КонецЕсли;
		//	нСтр.НовыйСчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		//КонецЕсли;
		//
		//Если ДанныеXDTO.СкладОтправитель.ТипСклада.Значение = "Розничный" Тогда
		//	Если НЕ нСтр.Свойство("СчетУчета") Тогда
		//		нСтр.Вставить("СчетУчета")
		//	КонецЕсли;
		//	нСтр.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		//КонецЕсли;

	КонецЦикла;
КонецПроцедуры

&После("ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных")
Процедура TBK_BP_ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если ДанныеДляЗаписиВИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	


	
	Для каждого стр из ДанныеДляЗаписиВИБ.Товары Цикл
		
		Если ЗначениеЗаполнено(стр.ЦенаВРознице)Тогда
			Стр.Цена = стр.ЦенаВРознице;
		КонецЕсли;	
		
		Если ДанныеДляЗаписиВИБ.СкладПолучатель.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
			Стр.НовыйСчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		КонецЕсли;
		
		Если ДанныеДляЗаписиВИБ.СкладОтправитель.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
			Стр.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&После("ДобавитьПКО_Документ_ВозвратТоваровПоставщику")
Процедура TBK_BP_ДобавитьПКО_Документ_ВозвратТоваровПоставщику(ПравилаКонвертации)
	// Вставить содержимое метода.
	ПравилоКонвертации = ПравилаКонвертации.Найти("Документ_ВозвратТоваровПоставщику","ИмяПКО");
	
	ДобавитьПКС(
		ПравилоКонвертации.СвойстваТабличныхЧастей.Найти("Товары").Свойства,
		"Себестоимость",
		"",
		1
	);
	
КонецПроцедуры

&После("ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO")
Процедура TBK_BP_ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Вставить содержимое метода.
	ИмяТабличнойЧастиТовары = "Товары";
	ПрочитьСебестоимостьИзДопСвойств(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, ИмяТабличнойЧастиТовары);
КонецПроцедуры

&После("ПКО_Документ_ОтчетОРозничныхПродажах_ПередЗаписьюПолученныхДанных")
Процедура TBK_BP_ПКО_Документ_ОтчетОРозничныхПродажах_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Вставить содержимое метода.
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если ДанныеДляЗаписиВИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого стр из ДанныеДляЗаписиВИБ.Товары Цикл
		Стр.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
	КонецЦикла;
КонецПроцедуры

&После("ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных")
Процедура TBK_BP_ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Вставить содержимое метода.
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если ДанныеДляЗаписиВИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	счет004 = планыСчетов.Хозрасчетный.НайтиПоКоду("004.01");
	счет4101 = планыСчетов.Хозрасчетный.НайтиПоКоду("41.01");
	Для каждого стр из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Стр.СчетУчета = счет004 Тогда 
			Стр.СчетУчета = счет4101;
		КонецЕсли;;
	КонецЦикла;
	
	Если ДанныеДляЗаписиВИБ.Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
		Для каждого стр из ДанныеДляЗаписиВИБ.Товары Цикл
			Стр.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//Вик 
&После("ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных")
Процедура TBK_BP_ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);

	Если ДанныеДляЗаписиВИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	Если ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.СуммаУслуг) тогда
		Возврат;	
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.НазначениеПлатежа) тогда
		Возврат;
	КонецЕсли; 
		
	//Вик 2021_03_15 проставляем сумма банковской комиссии. Скопировано из УТ
	СтрокаРазбора	=	ДанныеДляЗаписиВИБ.НазначениеПлатежа;
	
	СимволыКомиссия = Найти(НРег(СтрокаРазбора),"комиссия");
	СимволыВозврат  = Найти(НРег(СтрокаРазбора),"возврат");
	
	ПозицияМерчанта	=	Найти(НРег(СтрокаРазбора),"мерчант");	
	Если  ПозицияМерчанта <> 0 тогда
		ДлинаКомиссии	 = СимволыВозврат - СимволыКомиссия - 11;
	иначе
		ДлинаКомиссии	 = СимволыВозврат - СимволыКомиссия - 12;
	КонецЕсли;

	Если СимволыКомиссия > 0 и ДлинаКомиссии > 0 тогда

		Попытка
			СуммаКомиссии	=	Число(СтрЗаменить(Сред(СтрокаРазбора,СимволыКомиссия + 9,ДлинаКомиссии),",",""));	
			ДанныеДляЗаписиВИБ.СуммаУслуг		=	СуммаКомиссии;
			Если ДанныеДляЗаписиВИБ.РасшифровкаПлатежа.Количество() = 1 тогда
				ДанныеДляЗаписиВИБ.РасшифровкаПлатежа[0].СуммаУслуг	=	СуммаКомиссии;	
			КонецЕсли;
			
			//это может еще пригодится
			//Если  ПозицияМерчанта = 0 тогда
			//	СтрокаДокумента.Мерчант	=	Число(Сред(СтрокаРазбора,19,12));
			//иначе
			//	СтрокаДокумента.Мерчант	=	Число(Сред(СтрокаРазбора,ПозицияМерчанта+9,12));
			//КонецЕсли;
			//
			//Если Найти(БанковскийСчет.Наименование,"ИНТЕЗА")>0 тогда
			//	Если  ПозицияМерчанта = 0 тогда
			//		НужнаяПозиция						= Найти(НРег(СтрокаРазбора),"эквайринг за");
			//		СтрокаДата							= Сред(СтрокаРазбора,НужнаяПозиция + 13,10);
			//		ДатаИзСтроки						= Дата(Число(Прав(СтрокаДата,4)),Сред(СтрокаДата,4,2),Лев(СтрокаДата,2),0,0,0);
			//		СтрокаДокумента.ФактДатаЭквайринга	= ДатаИзСтроки;

			//	иначе
			//		НужнаяПозиция						= Найти(НРег(СтрокаРазбора),"дата реестра");
			//		СтрокаДата							= Сред(СтрокаРазбора,НужнаяПозиция + 13,10);
			//		ДатаИзСтроки						= Дата(Число(Прав(СтрокаДата,4)),Сред(СтрокаДата,4,2),Лев(СтрокаДата,2),0,0,0);
			//		СтрокаДокумента.ФактДатаЭквайринга	= ДатаИзСтроки - 24*60*60;
			//		
			//	КонецЕсли;
			//иначе
			//	СтрокаДата							= СтрокаДокумента.Дата;
			//	ДатаИзСтроки						= Дата(Число(Прав(СтрокаДата,4)),Сред(СтрокаДата,4,2),Лев(СтрокаДата,2),0,0,0);
			//	СтрокаДокумента.ФактДатаЭквайринга	= ДатаИзСтроки - 24*60*60;
			//КонецЕсли; 
		Исключение
			Сообщить(ОписаниеОшибки());							
		КонецПопытки;
	КонецЕсли;	
	
	Если не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.СчетУчетаРасчетовСКонтрагентом) тогда
		ДанныеДляЗаписиВИБ.СчетУчетаРасчетовСКонтрагентом	=	ПланыСчетов.Хозрасчетный.НайтипоКоду("91.2");		

		Если ДанныеДляЗаписиВИБ.РасшифровкаПлатежа.Количество() > 0 тогда   		
			ДанныеДляЗаписиВИБ.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом	=	ДанныеДляЗаписиВИБ.СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
	КонецЕсли;
	//КонецВик	

КонецПроцедуры

&После("ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных")
Процедура TBK_BP_ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	//Вик 2021_03_22
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если ДанныеДляЗаписиВИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.СтатьяДвиженияДенежныхСредств) тогда 
		Если ДанныеДляЗаписиВИБ.СтатьяДвиженияДенежныхСредств.Код = "000000320" тогда  //7.2.2 Выдача-поступление ДС от ИП
			ДанныеДляЗаписиВИБ.ВидОперации	=	Перечисления.ВидыОперацийПКО.ЛичныеСредстваПредпринимателя;
		КонецЕсли;
	КонецЕсли;
	//КонецВик
КонецПроцедуры

&После("ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных")
Процедура TBK_BP_ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	//Вик 2021_03_22
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если ДанныеДляЗаписиВИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДанныеДляЗаписиВИБ <> Неопределено тогда
		Если ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.СтатьяДвиженияДенежныхСредств) тогда
			Если ДанныеДляЗаписиВИБ.СтатьяДвиженияДенежныхСредств.Код = "000000318" тогда //7.2.1 Перевод  на др. РС РАСХОД
				ДанныеДляЗаписиВИБ.ВидОперации		=	Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
				ДанныеДляЗаписиВИБ.СчетКонтрагента	=	ДанныеДляЗаписиВИБ.СчетОрганизации;
			КонецЕсли;
			
			Если ДанныеДляЗаписиВИБ.СтатьяДвиженияДенежныхСредств.Код = "000000295" тогда //3.14 РКО
				ДанныеДляЗаписиВИБ.ВидОперации		=	Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//КонецВик 
КонецПроцедуры

&После("ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных")
Процедура TBK_BP_ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если ДанныеДляЗаписиВИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//Вик 2021_03_22
	Если ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.СтатьяДвиженияДенежныхСредств) тогда
		Если ДанныеДляЗаписиВИБ.СтатьяДвиженияДенежныхСредств.Код = "000000300" тогда //6.2 Инкассация на РС ПРИХОД
			ДанныеДляЗаписиВИБ.ВидОперации		=	Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация;	
		КонецЕсли;
		
		Если ДанныеДляЗаписиВИБ.СтатьяДвиженияДенежныхСредств.Код = "000000319" тогда //6.2.1 Перевод на др. РС ПРИХОД
			ДанныеДляЗаписиВИБ.ВидОперации		=	Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета;	
			ДанныеДляЗаписиВИБ.СчетКонтрагента	=	ДанныеДляЗаписиВИБ.СчетОрганизации;
		КонецЕсли;
		
		Если ДанныеДляЗаписиВИБ.СтатьяДвиженияДенежныхСредств.Код = "000000320" тогда //7.2.2 Выдача-поступление ДС от ИП 
			ДанныеДляЗаписиВИБ.ВидОперации		=	Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя;	
		КонецЕсли; 
	КонецЕсли;
	
	
	//Проверка расшифровки
	Если ДанныеДляЗаписиВИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
			ИЛИ ДанныеДляЗаписиВИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
			ИЛИ ДанныеДляЗаписиВИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
			ИЛИ ДанныеДляЗаписиВИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом
			ИЛИ ДанныеДляЗаписиВИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма
			ИЛИ ДанныеДляЗаписиВИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита
			ИЛИ ДанныеДляЗаписиВИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
			ИЛИ ДанныеДляЗаписиВИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании
			ИЛИ ДанныеДляЗаписиВИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация
			ИЛИ ДанныеДляЗаписиВИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда


		Если ДанныеДляЗаписиВИБ.РасшифровкаПлатежа.Количество() = 0 тогда
            ДанныеДляЗаписиВИБ.РасшифровкаПлатежа.Очистить();
			НоваяСтрокаРасш = ДанныеДляЗаписиВИБ.РасшифровкаПлатежа.Добавить();
			НоваяСтрокаРасш.СуммаПлатежа	=	ДанныеДляЗаписиВИБ.СуммаДокумента;
			
			//счет для инкасации
			Если ДанныеДляЗаписиВИБ.ВидОперации		=	Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация тогда
				НоваяСтрокаРасш.СчетУчетаРасчетовСКонтрагентом	=	ПланыСчетов.Хозрасчетный.НайтипоКоду("57.01");
				НоваяСтрокаРасш.СтатьяДвиженияДенежныхСредств	=	ДанныеДляЗаписиВИБ.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
		КонецЕсли; 
		
		Если ДанныеДляЗаписиВИБ.РасшифровкаПлатежа.Количество() > 0 тогда
			Если ДанныеДляЗаписиВИБ.РасшифровкаПлатежа[0].СуммаПлатежа <> ДанныеДляЗаписиВИБ.СуммаДокумента тогда
				ДанныеДляЗаписиВИБ.РасшифровкаПлатежа[0].СуммаПлатежа	=	ДанныеДляЗаписиВИБ.СуммаДокумента;
				ДанныеДляЗаписиВИБ.РасшифровкаПлатежа[0].СуммаПлатежа			=	ДанныеДляЗаписиВИБ.СуммаДокумента;
			КонецЕсли; 			
		КонецЕсли; 	
	КонецЕсли;
	//КонецВик 	
КонецПроцедуры

&После("ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных")
Процедура TBK_BP_ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если ДанныеДляЗаписиВИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя тогда
		Если ДанныеДляЗаписиВИБ.РасшифровкаПлатежа.Количество()>0 тогда   		
			Если не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом) тогда
				
				ДанныеДляЗаписиВИБ.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом	=	ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
				ДанныеДляЗаписиВИБ.РасшифровкаПлатежа[0].СчетУчетаРасчетовПоАвансам		=	ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;  
КонецПроцедуры
//КонецВик


