
&Вместо("ОбработкаПроверкиЗаполнения")
Процедура TBK_BP_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Вставить содержимое метода.
	//ПродолжитьВызов(Отказ, ПроверяемыеРеквизиты);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	УчетВПродажныхЦенах	= (УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Дата) =
		Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата);	
	
	// Проверка заполнения шапки документа
	
	РаздельныйУчетНДСДо2014Года = УчетнаяПолитика.РаздельныйУчетНДСДо2014Года(Организация, Дата);
	
	Если НЕ РаздельныйУчетНДСДо2014Года Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НДСвСтоимостиТоваров");
	КонецЕсли;
	
	// Проверка табличной части "Товары"
	
	Если РаздельныйУчетНДСНаСчете19 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НДСвСтоимостиТоваров");
	КонецЕсли;
	
	Если УчетВПродажныхЦенах Тогда
		
		РеквизитыСкладаОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СкладОтправитель,
			"ТипСклада, ТипЦенРозничнойТорговли");
		ТипСкладаОтправителя		= РеквизитыСкладаОтправителя.ТипСклада;
		ТипЦенСкладаОтправителя	= РеквизитыСкладаОтправителя.ТипЦенРозничнойТорговли;
		
		РеквизитыСкладаПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СкладПолучатель,
			"ТипСклада, ТипЦенРозничнойТорговли");
		ТипСкладаПолучателя		= РеквизитыСкладаПолучателя.ТипСклада;
		ТипЦенСкладаПолучателя	= РеквизитыСкладаПолучателя.ТипЦенРозничнойТорговли;
		
		Если ТипСкладаОтправителя = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка
			И ТипСкладаПолучателя = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Количество");
		КонецЕсли;
		
		//Если ТипСкладаОтправителя = Перечисления.ТипыСкладов.РозничныйМагазин
		//	ИЛИ ТипСкладаПолучателя = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
		//	
		//	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		//	
		//	ПорядокСубконто = Новый Массив();
		//	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		//	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		//	
		//	ПодразделениеОстатков	= ?(ТипСкладаОтправителя = Перечисления.ТипыСкладов.РозничныйМагазин,
		//		ПодразделениеОтправитель, ПодразделениеПолучатель);
		//	
		//	Склад			= ?(ТипСкладаОтправителя = Перечисления.ТипыСкладов.РозничныйМагазин,
		//		СкладОтправитель, СкладПолучатель);
		//	ТипЦенСклада	= ?(ТипСкладаОтправителя = Перечисления.ТипыСкладов.РозничныйМагазин,
		//		ТипЦенСкладаОтправителя, ТипЦенСкладаПолучателя);
		//	
		//	МассивНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Товары, "Номенклатура", Истина);

		//	Запрос = Новый Запрос;
		//	Запрос.УстановитьПараметр("КонецПериода",		Дата);
		//	Запрос.УстановитьПараметр("Организация",		Организация);
		//	Запрос.УстановитьПараметр("Подразделение",		ПодразделениеОстатков);
		//	Запрос.УстановитьПараметр("Склад",				Склад);
		//	Запрос.УстановитьПараметр("Счет",				ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		//	Запрос.УстановитьПараметр("ПорядокСубконто",	ПорядокСубконто);
		//	Запрос.УстановитьПараметр("Номенклатура",		МассивНоменклатуры);

		//	Запрос.Текст =
		//	"ВЫБРАТЬ
		//	|	Остатки.Субконто1 КАК Номенклатура,
		//	|	Остатки.СуммаОстатокДт КАК СуммаОстаток,
		//	|	Остатки.КоличествоОстатокДт КАК КоличествоОстаток
		//	|ИЗ
		//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		//	|			&КонецПериода,
		//	|			Счет = &Счет,
		//	|			&ПорядокСубконто,
		//	|			Организация = &Организация
		//	|				И (Подразделение = &Подразделение
		//	|					ИЛИ Подразделение ЕСТЬ NULL )
		//	|				И Субконто1 В (&Номенклатура)
		//	|				И Субконто2 = &Склад) КАК Остатки
		//	|ГДЕ
		//	|	Остатки.КоличествоОстаток > 0";
		//	
		//	ТаблицаУчетныхЦен = Запрос.Выполнить().Выгрузить();
		//	ТаблицаУчетныхЦен.Индексы.Добавить("Номенклатура");
		//	
		//	ТаблицаРозничныхЦен	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
		//		МассивНоменклатуры, ТипЦенСклада, Дата);
		//	
		//	Для каждого СтрокаТаблицы Из Товары Цикл
		//		
		//		Префикс		= "Товары[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
		//		ИмяСписка	= НСтр("ru = 'Товары'");
		//		
		//		РозничнаяЦена	= 0;
		//		УчетнаяЦена	= 0;
		//		
		//		СтрокаТаблицыРозничныхЦен = ТаблицаРозничныхЦен.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
		//		Если СтрокаТаблицыРозничныхЦен <> Неопределено Тогда
		//			РозничнаяЦена	= РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
		//				СтрокаТаблицыРозничныхЦен.Цена, СтрокаТаблицыРозничныхЦен.Валюта, ВалютаРегламентированногоУчета, СтрокаТаблицыРозничныхЦен.Курс,
		//				1, СтрокаТаблицыРозничныхЦен.Кратность, 1);
		//		Иначе
		//			РозничнаяЦена	= 0;
		//		КонецЕсли;
		//		
		//		Если РозничнаяЦена = 0 Тогда
		//			ТекстСообщения	= НСтр("ru = 'Не установлена розничная цена.'");
		//			ТекстСообщения	= ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
		//				НСтр("ru = 'Номенклатура'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
		//			Поле = Префикс + "Номенклатура";
		//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		//			Продолжить;
		//		КонецЕсли;
		//		
		//		СтрокаТаблицыУчетныхЦен = ТаблицаУчетныхЦен.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
		//		Если СтрокаТаблицыУчетныхЦен <> Неопределено Тогда
		//			Если СтрокаТаблицыУчетныхЦен.КоличествоОстаток <> 0 Тогда
		//				УчетнаяЦена = Окр(СтрокаТаблицыУчетныхЦен.СуммаОстаток / СтрокаТаблицыУчетныхЦен.КоличествоОстаток, 2, 1);
		//			КонецЕсли;
		//		Иначе
		//			УчетнаяЦена	= 0;
		//		КонецЕсли;
		//		
		//		//Допустимое отклонение цены составляет цену минимальной единицы количества (0.001)
		//		ДопустимоеОтклонение = УчетнаяЦена * 0.001;
		//		
		//		Если УчетнаяЦена <> 0 
		//			И (РозничнаяЦена - УчетнаяЦена > ДопустимоеОтклонение
		//				ИЛИ РозничнаяЦена - УчетнаяЦена < - ДопустимоеОтклонение) Тогда
		//			ТекстСообщения	= НСтр("ru = 'Розничная цена (%1) не равна учетной цене (%2).
		//				|Измените розничную цену или проведите переоценку.'");
		//			ТекстСообщения	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РозничнаяЦена, УчетнаяЦена);
		//			ТекстСообщения	= ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность",
		//				НСтр("ru = 'Номенклатура'"), СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщения);
		//			Поле = Префикс + "Номенклатура";
		//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		//		КонецЕсли;
		//		
		//	КонецЦикла;
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
	// Проверка табличной части "Возвратная тара"
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.Количество");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.СчетУчета");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвратнаяТара.НовыйСчетУчета");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
КонецПроцедуры
