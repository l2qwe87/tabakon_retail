#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

// Процедура установки начальных настроек отчета по метаданным регистра накопления
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	УниверсальныйОтчет.ИмяРегистра = "Продажи";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Истина;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	УниверсальныйОтчет.ДобавитьПолеГруппировка("НоменклатураБазоваяЕдиницаИзмерения", "Номенклатура", "БазоваяЕдиницаИзмерения", "Базовая единица измерения");
	
	УниверсальныйОтчет.ДобавитьПолеРесурс("КоличествоЕдиницОтчетов", "КоличествоОборот * Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / Номенклатура.ЕдиницаДляОтчетов.Коэффициент", "Количество (в ед. отчетов)");
	УниверсальныйОтчет.ДобавитьПолеРесурс("КоличествоБазовыхЕд",     "КоличествоОборот * Номенклатура.ЕдиницаХраненияОстатков.Коэффициент", "Количество (в базовых единицах)");
	УниверсальныйОтчет.ДобавитьПолеРесурс("ПроцентСкидки",           "ВЫБОР КОГДА СтоимостьБезСкидокОборот = 0 ТОГДА 0 ИНАЧЕ (СтоимостьБезСкидокОборот - СтоимостьОборот) / СтоимостьБезСкидокОборот * 100 КОНЕЦ", "% скидки",
		"ВЫБОР КОГДА СУММА(СтоимостьБезСкидокОборот) = 0 ТОГДА 0 ИНАЧЕ (СУММА(СтоимостьБезСкидокОборот) - СУММА(СтоимостьОборот)) / СУММА(СтоимостьБезСкидокОборот) * 100 КОНЕЦ"); // Чтобы не суммировались проценты
	УниверсальныйОтчет.ДобавитьПолеРесурс("СуммаСкидки",             "СтоимостьБезСкидокОборот - СтоимостьОборот", "Сумма скидки");
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	ВалютаУпр = глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование;
	
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоОборот",, Ложь);
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоЕдиницОтчетов", "Количество (в ед. отчетов)",        Ложь, "ЧЦ=15; ЧДЦ=3");
	УниверсальныйОтчет.ДобавитьПоказатель("КоличествоБазовыхЕд",     "Количество (в базовых единицах)", Истина, "ЧЦ=15; ЧДЦ=3");
	УниверсальныйОтчет.ДобавитьПоказатель("НДСОборот",               "НДС",                               Ложь);
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаСкидки",             "Сумма скидки в " + ВалютаУпр,     Истина, "ЧЦ=15; ЧДЦ=2");
	УниверсальныйОтчет.ДобавитьПоказатель("ПроцентСкидки",           "% скидки",                        Истина, "ЧЦ=15; ЧДЦ=2");
	
	УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьОборот",          "Сумма продажи в " + ВалютаУпр);
	УниверсальныйОтчет.ДобавитьПоказатель("СтоимостьБезСкидокОборот", "Сумма продажи без скидок в " + ВалютаУпр);
	
	// НЧАН
	УниверсальныйОтчет.ДобавитьПоказатель("МинОст", "Мин. остаток", Ложь, "ЧЦ=15", "МинОст", "МинОст");
	
	ТаблицаПолейП = Неопределено;
	ТекстЗапроса = ПолучитьТекстЗапроса(ТаблицаПолейП);
	Если УниверсальныйОтчет.ИспользоватьСвойстваИКатегории Тогда
		УниверсальныйОтчет.ДобавитьВТекстЗапросаСвойстваИКатегории(ТекстЗапроса, ТаблицаПолейП);		
	КонецЕсли;
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля.Добавить("МинОст", "МинОст"); 
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("МинОст","Мин. остаток");
	// КЧАН

	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Покупатель");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Номенклатура");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("Контрагент");
	УниверсальныйОтчет.ДобавитьОтбор("Номенклатура");
	УниверсальныйОтчет.ДобавитьОтбор("Проект");
	УниверсальныйОтчет.ДобавитьОтбор("Подразделение");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	// УниверсальныйОтчет.ДобавитьПорядок(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьПорядок("Контрагент.Наименование");
	УниверсальныйОтчет.ДобавитьПорядок("Номенклатура.Наименование");
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("НоменклатураБазоваяЕдиницаИзмерения");
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	
	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент);

КонецПроцедуры // СформироватьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;

// НЧАН
Функция ПолучитьТекстЗапроса(мТаблицаПолей)
	
	мТаблицаПолей = Новый ТаблицаЗначений;
	мТаблицаПолей.Колонки.Добавить("ПутьКДанным");   
	мТаблицаПолей.Колонки.Добавить("ИмяИзмерения");  
	мТаблицаПолей.Колонки.Добавить("Представление"); 
	мТаблицаПолей.Колонки.Добавить("Назначение");    
	мТаблицаПолей.Колонки.Добавить("НетКатегорий");


	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.Номенклатура";  
	НовКат.ИмяИзмерения = "Номенклатура";  
	НовКат.Представление = "Номенклатура";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000102");   // Справочник "Номенклатура"
	НовКат.НетКатегорий = "Ложь"; 

	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.Номенклатура";  
	НовКат.ИмяИзмерения = "Номенклатура";  
	НовКат.Представление = "Номенклатура";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000107");   // Справочник "Магазины"
	НовКат.НетКатегорий = "Ложь"; 

	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.ХарактеристикаНоменклатуры";  
	НовКат.ИмяИзмерения = "ХарактеристикаНоменклатуры";  
	НовКат.Представление = "Характеристика номенклатуры";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000103");   // Справочник  "Характеристики номенклатуры"
	НовКат.НетКатегорий = "Ложь";
//
	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.ЗаказПокупателя";  
	НовКат.ИмяИзмерения = "ЗаказПокупателя";  
	НовКат.Представление = "Заказ покупателя";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000002");   // Документы
	НовКат.НетКатегорий = "Ложь";

	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.ЗаказПокупателя";  
	НовКат.ИмяИзмерения = "ЗаказПокупателя";  
	НовКат.Представление = "ЗаказПокупателя";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000107");   
	НовКат.НетКатегорий = "Ложь";

	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.ЗаказПокупателя";  
	НовКат.ИмяИзмерения = "ЗаказПокупателя";  
	НовКат.Представление = "ЗаказПокупателя";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000108");   
	НовКат.НетКатегорий = "Ложь";
//
	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.ДоговорКонтрагента";  
	НовКат.ИмяИзмерения = "ДоговорКонтрагента";  
	НовКат.Представление = "ДоговорКонтрагента"; 
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000003");   
	НовКат.НетКатегорий = "Ложь";

	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.ДоговорКонтрагента";  
	НовКат.ИмяИзмерения = "ДоговорКонтрагента";  
	НовКат.Представление = "ДоговорКонтрагента";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000107");   
	НовКат.НетКатегорий = "Ложь";

	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.ДокументПродажи";  
	НовКат.ИмяИзмерения = "ДокументПродажи";  
	НовКат.Представление = "ДокументПродажи";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000002");   
	НовКат.НетКатегорий = "Ложь";

	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.ДокументПродажи";  
	НовКат.ИмяИзмерения = "ДокументПродажи";  
	НовКат.Представление = "ДокументПродажи";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000107");   
	НовКат.НетКатегорий = "Ложь";
//
	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.Организация";  
	НовКат.ИмяИзмерения = "Организация";  
	НовКат.Представление = "Организация";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000106");   
	НовКат.НетКатегорий = "Ложь";

	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.Организация";  
	НовКат.ИмяИзмерения = "Организация";  
	НовКат.Представление = "Организация";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000107");   
	НовКат.НетКатегорий = "Ложь";

	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.Контрагент";  
	НовКат.ИмяИзмерения = "Контрагент";  
	НовКат.Представление = "Контрагент";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000101");   
	НовКат.НетКатегорий = "Ложь";

	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.Контрагент";  
	НовКат.ИмяИзмерения = "Контрагент";  
	НовКат.Представление = "Контрагент";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000107");   
	НовКат.НетКатегорий = "Ложь";

	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.Регистратор";  
	НовКат.ИмяИзмерения = "Регистратор";  
	НовКат.Представление = "Документ движения (регистратор)";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000002");   
	НовКат.НетКатегорий = "Ложь";

	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.Регистратор";  
	НовКат.ИмяИзмерения = "Регистратор";  
	НовКат.Представление = "Документ движения (регистратор)";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000107");   
	НовКат.НетКатегорий = "Ложь";
	
	НовКат = мТаблицаПолей.Добавить();
	НовКат.ПутьКДанным = "ИсточникДанных.ДокументПродажи.Склад";  
	НовКат.ИмяИзмерения = "Склад";  
	НовКат.Представление = "Склад (ЛК)";   
	НовКат.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.НайтиПоКоду("000000105");   
	НовКат.НетКатегорий = "Ложь";

	
	Возврат "ВЫБРАТЬ
	        |	МинимальныйОстаток.Склад,
	        |	МинимальныйОстаток.Номенклатура,
	        |	МАКСИМУМ(МинимальныйОстаток.МинОстаток) КАК МинОстаток
	        |ПОМЕСТИТЬ МО
	        |ИЗ
	        |	РегистрСведений.МинимальныйОстаток КАК МинимальныйОстаток
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	МинимальныйОстаток.Склад,
	        |	МинимальныйОстаток.Номенклатура
	        |;

	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ИсточникДанных.Номенклатура КАК Номенклатура,
	        |	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.Номенклатура) КАК НоменклатураПредставление,
	        |	ИсточникДанных.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	        |	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатурыПредставление,
	        |	ИсточникДанных.ЗаказПокупателя КАК ЗаказПокупателя,
	        |	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.ЗаказПокупателя) КАК ЗаказПокупателяПредставление,
	        |	ИсточникДанных.ДоговорКонтрагента КАК ДоговорКонтрагента,
	        |	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.ДоговорКонтрагента) КАК ДоговорКонтрагентаПредставление,
	        |	ИсточникДанных.ДокументПродажи КАК ДокументПродажи,
	        |	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.ДокументПродажи) КАК ДокументПродажиПредставление,
	        |	ИсточникДанных.Подразделение КАК Подразделение,
	        |	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.Подразделение) КАК ПодразделениеПредставление,
	        |	ИсточникДанных.Проект КАК Проект,
	        |	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.Проект) КАК ПроектПредставление,
	        |	ИсточникДанных.Организация КАК Организация,
	        |	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.Организация) КАК ОрганизацияПредставление,
	        |	ИсточникДанных.Контрагент КАК Контрагент,
	        |	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.Контрагент) КАК КонтрагентПредставление,
	        |	ИсточникДанных.Номенклатура.БазоваяЕдиницаИзмерения КАК НоменклатураБазоваяЕдиницаИзмерения,
	        |	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.Номенклатура.БазоваяЕдиницаИзмерения) КАК НоменклатураБазоваяЕдиницаИзмеренияПредставление,
	        |	ИсточникДанных.КоличествоОборот КАК КоличествоОборот,
	        |	ИсточникДанных.СтоимостьОборот КАК СтоимостьОборот,
	        |	ИсточникДанных.СтоимостьБезСкидокОборот КАК СтоимостьБезСкидокОборот,
	        |	ИсточникДанных.НДСОборот КАК НДСОборот,
	        |	ИсточникДанных.КоличествоОборот * ИсточникДанных.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсточникДанных.Номенклатура.ЕдиницаДляОтчетов.Коэффициент КАК КоличествоЕдиницОтчетов,
	        |	ИсточникДанных.КоличествоОборот * ИсточникДанных.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоличествоБазовыхЕд,
	        |	ВЫБОР
	        |		КОГДА ИсточникДанных.СтоимостьБезСкидокОборот = 0
	        |			ТОГДА 0
	        |		ИНАЧЕ (ИсточникДанных.СтоимостьБезСкидокОборот - ИсточникДанных.СтоимостьОборот) / ИсточникДанных.СтоимостьБезСкидокОборот * 100
	        |	КОНЕЦ КАК ПроцентСкидки,
	        |	ИсточникДанных.СтоимостьБезСкидокОборот - ИсточникДанных.СтоимостьОборот КАК СуммаСкидки,
	        |	ИсточникДанных.Регистратор КАК Регистратор,
	        |	ПРЕДСТАВЛЕНИЕ(ИсточникДанных.Регистратор) КАК РегистраторПредставление,
	        |	ИсточникДанных.Период КАК Период,
	        |	НАЧАЛОПЕРИОДА(ИсточникДанных.Период, ДЕНЬ) КАК ПериодДень,
	        |	НАЧАЛОПЕРИОДА(ИсточникДанных.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	        |	НАЧАЛОПЕРИОДА(ИсточникДанных.Период, ДЕКАДА) КАК ПериодДекада,
	        |	НАЧАЛОПЕРИОДА(ИсточникДанных.Период, МЕСЯЦ) КАК ПериодМесяц,
	        |	НАЧАЛОПЕРИОДА(ИсточникДанных.Период, КВАРТАЛ) КАК ПериодКвартал,
	        |	НАЧАЛОПЕРИОДА(ИсточникДанных.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	        |	НАЧАЛОПЕРИОДА(ИсточникДанных.Период, ГОД) КАК ПериодГод,
	        |	МО.МинОстаток КАК МинОст,
			|	 1 как Склад
								|   //ПОЛЯ_СВОЙСТВА
		|   //ПОЛЯ_КАТЕГОРИИ
	        |{ВЫБРАТЬ
	        |	Номенклатура.*,
	        |	ХарактеристикаНоменклатуры.*,
	        |	ЗаказПокупателя.*,
	        |	ДоговорКонтрагента.*,
	        |	ДокументПродажи.*,
	        |	Подразделение.*,
	        |	Проект.*,
	        |	Организация.*,
	        |	Контрагент.*,
	        |	НоменклатураБазоваяЕдиницаИзмерения.*,
	        |	КоличествоОборот,
	        |	СтоимостьОборот,
	        |	СтоимостьБезСкидокОборот,
	        |	НДСОборот,
	        |	КоличествоЕдиницОтчетов,
	        |	КоличествоБазовыхЕд,
	        |	ПроцентСкидки,
	        |	СуммаСкидки,
	        |	Регистратор.* КАК Регистратор,
	        |	Период КАК Период,
	        |	ПериодДень,
	        |	ПериодНеделя,
	        |	ПериодДекада,
	        |	ПериодМесяц,
	        |	ПериодКвартал,
	        |	ПериодПолугодие,
	        |	ПериодГод,
	        |	МинОст,  Склад 
													|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|//ПСЕВДОНИМЫ_КАТЕГОРИИ
|}
	        |ИЗ
	        |	РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, Регистратор {(&Периодичность)}, {(Номенклатура).* КАК Номенклатура, (ХарактеристикаНоменклатуры).* КАК ХарактеристикаНоменклатуры, (ЗаказПокупателя).* КАК ЗаказПокупателя, (ДоговорКонтрагента).* КАК ДоговорКонтрагента, (ДокументПродажи).* КАК ДокументПродажи, (Подразделение).* КАК Подразделение, (Проект).* КАК Проект, (Организация).* КАК Организация, (Контрагент).* КАК Контрагент, (Номенклатура.БазоваяЕдиницаИзмерения).* КАК НоменклатураБазоваяЕдиницаИзмерения}) КАК ИсточникДанных
	        |		ЛЕВОЕ СОЕДИНЕНИЕ МО КАК МО
	        |		ПО ИсточникДанных.Номенклатура = МО.Номенклатура
	        |			И ИсточникДанных.ДокументПродажи.Склад = МО.Склад
	        					|//СОЕДИНЕНИЯ	
	        |{ГДЕ
	        |	ИсточникДанных.КоличествоОборот КАК КоличествоОборот,
	        |	ИсточникДанных.СтоимостьОборот КАК СтоимостьОборот,
	        |	ИсточникДанных.СтоимостьБезСкидокОборот КАК СтоимостьБезСкидокОборот,
	        |	ИсточникДанных.НДСОборот КАК НДСОборот,
	        |	(ИсточникДанных.КоличествоОборот * ИсточникДанных.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсточникДанных.Номенклатура.ЕдиницаДляОтчетов.Коэффициент) КАК КоличествоЕдиницОтчетов,
	        |	(ИсточникДанных.КоличествоОборот * ИсточникДанных.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК КоличествоБазовыхЕд,
	        |	(ВЫБОР
	        |			КОГДА ИсточникДанных.СтоимостьБезСкидокОборот = 0
	        |				ТОГДА 0
	        |			ИНАЧЕ (ИсточникДанных.СтоимостьБезСкидокОборот - ИсточникДанных.СтоимостьОборот) / ИсточникДанных.СтоимостьБезСкидокОборот * 100
	        |		КОНЕЦ) КАК ПроцентСкидки,
	        |	(ИсточникДанных.СтоимостьБезСкидокОборот - ИсточникДанных.СтоимостьОборот) КАК СуммаСкидки,
	        |	ИсточникДанных.Регистратор.* КАК Регистратор,
	        |	ИсточникДанных.Период КАК Период,
	        |	(НАЧАЛОПЕРИОДА(ИсточникДанных.Период, ДЕНЬ)) КАК ПериодДень,
	        |	(НАЧАЛОПЕРИОДА(ИсточникДанных.Период, НЕДЕЛЯ)) КАК ПериодНеделя,
	        |	(НАЧАЛОПЕРИОДА(ИсточникДанных.Период, ДЕКАДА)) КАК ПериодДекада,
	        |	(НАЧАЛОПЕРИОДА(ИсточникДанных.Период, МЕСЯЦ)) КАК ПериодМесяц,
	        |	(НАЧАЛОПЕРИОДА(ИсточникДанных.Период, КВАРТАЛ)) КАК ПериодКвартал,
	        |	(НАЧАЛОПЕРИОДА(ИсточникДанных.Период, ПОЛУГОДИЕ)) КАК ПериодПолугодие,
	        |	(НАЧАЛОПЕРИОДА(ИсточникДанных.Период, ГОД)) КАК ПериодГод,
	        |	МО.МинОстаток,  (1) КАК Склад
													| //УСЛОВИЯ_СВОЙСТВА
	| //УСЛОВИЯ_КАТЕГОРИИ
		|}
	        |{УПОРЯДОЧИТЬ ПО
	        |	Номенклатура.*,
	        |	ХарактеристикаНоменклатуры.*,
	        |	ЗаказПокупателя.*,
	        |	ДоговорКонтрагента.*,
	        |	ДокументПродажи.*,
	        |	Подразделение.*,
	        |	Проект.*,
	        |	Организация.*,
	        |	Контрагент.*,
	        |	НоменклатураБазоваяЕдиницаИзмерения.*,
	        |	КоличествоОборот,
	        |	СтоимостьОборот,
	        |	СтоимостьБезСкидокОборот,
	        |	НДСОборот,
	        |	КоличествоЕдиницОтчетов,
	        |	КоличествоБазовыхЕд,
	        |	ПроцентСкидки,
	        |	СуммаСкидки,
	        |	Регистратор.*,
	        |	Период,
	        |	ПериодДень,
	        |	ПериодНеделя,
	        |	ПериодДекада,
	        |	ПериодМесяц,
	        |	ПериодКвартал,
	        |	ПериодПолугодие,
	        |	ПериодГод,
	        |	МинОст, Склад
													|	//ПСЕВДОНИМЫ_СВОЙСТВА
	| //ПСЕВДОНИМЫ_КАТЕГОРИИ
		|}
	        |ИТОГИ
	        |	СУММА(КоличествоОборот),
	        |	СУММА(СтоимостьОборот),
	        |	СУММА(СтоимостьБезСкидокОборот),
	        |	СУММА(НДСОборот),
	        |	СУММА(КоличествоЕдиницОтчетов),
	        |	СУММА(КоличествоБазовыхЕд),
	        |	ВЫБОР
	        |		КОГДА СУММА(СтоимостьБезСкидокОборот) = 0
	        |			ТОГДА 0
	        |		ИНАЧЕ (СУММА(СтоимостьБезСкидокОборот) - СУММА(СтоимостьОборот)) / СУММА(СтоимостьБезСкидокОборот) * 100
	        |	КОНЕЦ КАК ПроцентСкидки,
	        |	СУММА(СуммаСкидки), МАКСИМУМ(МинОст)
			|	//ИТОГИ_СВОЙСТВА
	|//ИТОГИ_КАТЕГОРИИ	
	        |ПО
	        |	ОБЩИЕ
	        |{ИТОГИ ПО
	        |	Номенклатура.*,
	        |	ХарактеристикаНоменклатуры.*,
	        |	ЗаказПокупателя.*,
	        |	ДоговорКонтрагента.*,
	        |	ДокументПродажи.*,
	        |	Подразделение.*,
	        |	Проект.*,
	        |	Организация.*,
	        |	Контрагент.*,
	        |	НоменклатураБазоваяЕдиницаИзмерения.*,
	        |	Регистратор.*,
	        |	Период,
	        |	ПериодДень,
	        |	ПериодНеделя,
	        |	ПериодДекада,
	        |	ПериодМесяц,
	        |	ПериодКвартал,
	        |	ПериодПолугодие,
	        |	ПериодГод,
	        |	МинОст, Склад							
			|	//ПСЕВДОНИМЫ_СВОЙСТВА
	|//ПСЕВДОНИМЫ_КАТЕГОРИИ
		|}";
		
КонецФункции	
// КЧАН

#КонецЕсли