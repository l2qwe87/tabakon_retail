Функция ПолучитьСсылкуИзКэша(КэшСсылок, СтрокаСсылка, МенеджерОбъекта)
	Если ПустаяСтрока(СтрокаСсылка) Тогда Возврат МенеджерОбъекта.ПустаяСсылка(); КонецЕсли;
	
	СсылкаНаОбъект = КэшСсылок.Получить(СтрокаСсылка);
	
	// Если ключ строкового представления ссылки не найден в кэше, ищем ссылку в базе
	Если СсылкаНаОбъект = Неопределено Тогда
		СсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаСсылка));
		
		// Если <Объект не найден>, то возвращаем пустую ссылку соответствующего типа. Новые объекты на сервере не создаем!
		Если ПустаяСтрока(СсылкаНаОбъект.ВерсияДанных) Тогда Возврат МенеджерОбъекта.ПустаяСсылка(); КонецЕсли;

		КэшСсылок.Вставить(СтрокаСсылка, СсылкаНаОбъект.Ссылка);
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
КонецФункции

// Функция возвращает список розничных торговых точек
Функция GetStoresList(ViDSklada)
	СписокМагазинов = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.tabakon-inventory-exchange.org", "СписокМагазинов"));
	ТипОбъектаМагазин = ФабрикаXDTO.Тип("http://www.tabakon-inventory-exchange.org", "Магазин");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК СкладСсылка,
		|	Склады.Код,
		|	Склады.Наименование,
		|	Склады.ЮрЛицо КАК ОрганизацияСсылка,
		|	ЕСТЬNULL(Организации.Код, """") КАК КодОрганизации,
		|	ЕСТЬNULL(Организации.Наименование, """") КАК НаименованиеОрганизации
		|ИЗ
		|	Справочник.Склады КАК Склады
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО Склады.ЮрЛицо = Организации.Ссылка
		|ГДЕ
		|	НЕ Склады.ПометкаУдаления	
		|	И Склады.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Розничный)
		|	И НЕ Склады.ЭтоГруппа";
		
	// НЧАН
	Если ViDSklada = "Опт" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВидыСкладов.Розничный", "ВидыСкладов.Оптовый");
	КонецЕсли;
	// КЧАН
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Магазин = ФабрикаXDTO.Создать(ТипОбъектаМагазин);
		ЗаполнитьЗначенияСвойств(Магазин, ВыборкаДетальныеЗаписи);
		
		Магазин.ИдентификаторСсылки = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СкладСсылка), XMLСтрока(ВыборкаДетальныеЗаписи.СкладСсылка), "");
		Магазин.ИдентификаторСсылкиОрганизации = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОрганизацияСсылка), XMLСтрока(ВыборкаДетальныеЗаписи.ОрганизацияСсылка), "");
		
		СписокМагазинов.Список.Добавить(Магазин);
	КонецЦикла;

	Возврат СписокМагазинов;
КонецФункции

// Возвращает остатки товаров по переданному в параметре коду склада (магазина)
Функция GetProductBalances(StoreId, DataOstatkov)
	
	Товары = Новый ТаблицаЗначений;
	
	ТабличныеДанные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.tabakon-inventory-exchange.org", "ТабличныеДанные"));
	ТабличныеДанные.ТаблицаЗначений = СериализаторXDTO.ЗаписатьXDTO(Товары);
	
	Склад = Справочники.Склады.НайтиПоКоду(StoreId);
	
	// НЧАН
	Попытка
		ОстаткиНаДату = Дата(DataOstatkov);
	Исключение
		ОстаткиНаДату = ТекущаяДата();
	КонецПопытки;
	// КЧАН
	 
	Если Склад.Пустая() Тогда Возврат (новый ХранилищеЗначения(ТабличныеДанные, новый СжатиеДанных(9))); КонецЕсли;
	
	Если РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее().ВестиПартионныйУчетПоСкладам Тогда
		ВремСклад = Склад;
	Иначе
		ВремСклад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура");
	Товары.Колонки.Добавить("КодНоменклатуры");
	Товары.Колонки.Добавить("НаименованиеНоменклатуры");
	Товары.Колонки.Добавить("ХарактеристикаНоменклатурыНаименование");
	Товары.Колонки.Добавить("Артикул");
	Товары.Колонки.Добавить("ЕдиницаХраненияОстатков");  
	Товары.Колонки.Добавить("НаименованиеЕдиницыХранения");   
	Товары.Колонки.Добавить("КоэффициентЕдиницыХранения");   
	Товары.Колонки.Добавить("Качество");  
	Товары.Колонки.Добавить("НаименованиеКачества");
	Товары.Колонки.Добавить("Количество");  
	Товары.Колонки.Добавить("Сумма");  
	Товары.Колонки.Добавить("Цена"); 
	Товары.Колонки.Добавить("ЦенаАТТ");
	Товары.Колонки.Добавить("НоменклатураРодительНаименование");  
	Товары.Колонки.Добавить("НоменклатураРодительС");  
	Товары.Колонки.Добавить("ШКТЗ");
	Товары.Колонки.Добавить("ЕдИзТЗ");
	Товары.Колонки.Добавить("ХарактеристикаНоменклатурыС");
	Товары.Колонки.Добавить("ТоварМРЦ");
	Товары.Колонки.Добавить("ЗагрузкаДопХарактеристик");

	
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	//	|	ОстаткиТоваров.Номенклатура.Код КАК КодНоменклатуры,
	//	|	ОстаткиТоваров.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	//	|	ОстаткиТоваров.Номенклатура.Артикул КАК Артикул,
	//	|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	//	|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Наименование КАК НаименованиеЕдиницыХранения,
	//	|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	//	|	ОстаткиТоваров.Качество КАК Качество,
	//	|	ОстаткиТоваров.Качество.Наименование КАК НаименованиеКачества,
	//	|	ВЫРАЗИТЬ((СУММА(ОстаткиТоваров.КоличествоОстаток)) КАК ЧИСЛО(15,3)) КАК Количество,
	//	|	ВЫРАЗИТЬ((ВЫБОР
	//	|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
	//	|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
	//	|			0 
	//	|		ИНАЧЕ
	//	|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
	//	|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
	//	|	КОНЕЦ) КАК ЧИСЛО(15,2)) КАК Сумма
	//	|ИЗ
	//	|	РегистрНакопления.ТоварыВРознице.Остатки(, Склад = &Склад) КАК ОстаткиТоваров
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ
	//	|			РегистрНакопления.ПартииТоваровНаСкладах.Остатки(, Склад = &ПартионныйСклад) КАК ОстаткиПартий
	//	|		ПО
	//	|			ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
	//	|			И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры
	//	|			И ОстаткиТоваров.Качество                   = ОстаткиПартий.Качество
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ОстаткиТоваров.Номенклатура,
	//	|   ОстаткиТоваров.ХарактеристикаНоменклатуры,
	//	|	ОстаткиТоваров.Качество
	//	|
	//	|ИМЕЮЩИЕ
	//	|   СУММА(ОстаткиТоваров.КоличествоОстаток) <> 0
	//	|";

// НЧАН	

	СЕИ = Новый Соответствие;
	СШК = Новый Соответствие;
	
	З = Новый Запрос ;
	З.Текст = "ВЫБРАТЬ
	          |	ТоварыВРозницеОстатки.Номенклатура
	          |ПОМЕСТИТЬ ВТ
	          |ИЗ
	          |	РегистрНакопления.ТоварыВРознице.Остатки(&ОстаткиНаДату, ) КАК ТоварыВРозницеОстатки
	          |ГДЕ
	          |	ТоварыВРозницеОстатки.КоличествоОстаток > 0
	          |	И ТоварыВРозницеОстатки.Номенклатура.ЭтоГруппа = ЛОЖЬ
	          |	И ТоварыВРозницеОстатки.Склад = &Склад
	          |
	          |СГРУППИРОВАТЬ ПО
	          |	ТоварыВРозницеОстатки.Номенклатура
	          |;
	          |
	          |////////////////////////////////////////////////////////////////////////////////
	          |ВЫБРАТЬ
	          |	ВТ.Номенклатура КАК Номенклатура,
	          |	Штрихкоды.Штрихкод КАК ШКЗначение,
	          |	Штрихкоды.Владелец КАК ШКВладелецС,
	          |	Штрихкоды.ТипШтрихкода.Наименование КАК ШКТип,
	          |	Штрихкоды.ЕдиницаИзмерения.Наименование КАК ШКЕдИз,
	          |	ЕдиницыИзмерения.Ссылка КАК ЕдИзС,
	          |	ЕдиницыИзмерения.Владелец КАК ЕдИзВладелецС,
	          |	ЕдиницыИзмерения.Код КАК ЕдИзКод,
	          |	ЕдиницыИзмерения.Наименование КАК ЕдИзНаименование,
	          |	ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Наименование КАК ЕдИзЕдиницаПоКлассификаторуНаименование,
	          |	ЕдиницыИзмерения.Коэффициент КАК ЕдИзКоэффициент
	          |ИЗ
	          |	ВТ КАК ВТ
	          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	          |		ПО ВТ.Номенклатура = Штрихкоды.Владелец
	          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	          |		ПО ВТ.Номенклатура = ЕдиницыИзмерения.Владелец
	          |ИТОГИ ПО
	          |	Номенклатура" ;
			  
	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
		З.Текст = СтрЗаменить(З.Текст, "РегистрНакопления.ТоварыВРознице", "РегистрНакопления.ТоварыНаСкладах");
	КонецЕсли;
		  		  
	З.УстановитьПараметр("Склад", Склад);
	З.УстановитьПараметр("ОстаткиНаДату", ОстаткиНаДату); // НЧАН
	В = З.Выполнить();
	
	ВН = В.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если НЕ ВН.Следующий() Тогда 
		
		ЗаписьХМЛ= новый ЗаписьXML;
	    ЗаписьХМЛ.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(ЗаписьХМЛ, Товары); 
		стр = ЗаписьХМЛ.Закрыть();
		ТабличныеДанные = стр;
	
		Возврат (новый ХранилищеЗначения(ТабличныеДанные, новый СжатиеДанных(9))); 
	КонецЕсли;
	
	Пока ВН.Следующий() Цикл 	
		
	 			ШКТЗ = Новый ТаблицаЗначений;
		//		ШКТЗ.Колонки.Добавить("ШКВладелецС");
		//		ШКТЗ.Колонки.Добавить("ШКВладелецСНаименование");
				ШКТЗ.Колонки.Добавить("ШКЗначение");
				ШКТЗ.Колонки.Добавить("ШКТип");
				ШКТЗ.Колонки.Добавить("ШКЕдИз");
									
				ЕдИзм = Новый ТаблицаЗначений;
				ЕдИзм.Колонки.Добавить("ЕдИзС"); 		
				ЕдИзм.Колонки.Добавить("ЕдИзВладелецС");  
				ЕдИзм.Колонки.Добавить("ЕдИзКод");  
				ЕдИзм.Колонки.Добавить("ЕдИзНаименование");  
				ЕдИзм.Колонки.Добавить("ЕдИзЕдиницаПоКлассификаторуНаименование"); 
				ЕдИзм.Колонки.Добавить("ЕдИзКоэффициент");
				
				ВыборкаДетальныеЗаписи = ВН.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ПрШ = ?(ВыборкаДетальныеЗаписи.ШКЗначение = NULL ИЛИ ВыборкаДетальныеЗаписи.ШКЗначение = Неопределено, Неопределено, ВыборкаДетальныеЗаписи.ШКЗначение) ;
					ПрЕ = ?(ВыборкаДетальныеЗаписи.ЕдИзС = NULL ИЛИ ВыборкаДетальныеЗаписи.ЕдИзС = Неопределено, Неопределено, ВыборкаДетальныеЗаписи.ЕдИзС) ;
					
					Если ПрШ <> Неопределено Тогда
						СтрН = ШКТЗ.Добавить();
						СтрН.ШКЗначение = ВыборкаДетальныеЗаписи.ШКЗначение; 
					//	СтрН.ШКВладелецС = ВыборкаДетальныеЗаписи.ШКВладелецС;
					//	СтрН.ШКВладелецСНаименование = ВыборкаДетальныеЗаписи.ШКВладелецС.Наименование;
						СтрН.ШКТип = ВыборкаДетальныеЗаписи.ШКТип;  
						СтрН.ШКЕдИз = ВыборкаДетальныеЗаписи.ШКЕдИз; 
					КонецЕсли;	
					
					Если ПрЕ <> Неопределено Тогда
						СтрП = ЕдИзм.Добавить();
						СтрП.ЕдИзС = XMLСтрока(ВыборкаДетальныеЗаписи.ЕдИзС);		
						СтрП.ЕдИзВладелецС = XMLСтрока(ВыборкаДетальныеЗаписи.ЕдИзВладелецС); 
						СтрП.ЕдИзКод = (ВыборкаДетальныеЗаписи.ЕдИзКод); 
						СтрП.ЕдИзНаименование =  (ВыборкаДетальныеЗаписи.ЕдИзНаименование);
						СтрП.ЕдИзЕдиницаПоКлассификаторуНаименование = (ВыборкаДетальныеЗаписи.ЕдИзЕдиницаПоКлассификаторуНаименование);
						СтрП.ЕдИзКоэффициент =	(ВыборкаДетальныеЗаписи.ЕдИзКоэффициент);		
					КонецЕсли;

				КонецЦикла;
				
		СЕИ.Вставить(ВН.Номенклатура, ЕдИзм);
		СШК.Вставить(ВН.Номенклатура, ШКТЗ);
		
	КонецЦикла;
	
		СДОПХАР = СоответствиеДополнительнаяЗагрузкаХарактеристик(Склад, ОстаткиНаДату);

			
	Запрос = Новый Запрос;
	//Изменил Вик 2021_01_25
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
		|	ОстаткиТоваров.Номенклатура.Код КАК КодНоменклатуры,
		|	ОстаткиТоваров.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
		|	ОстаткиТоваров.Номенклатура.Артикул КАК Артикул,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Наименование КАК НаименованиеЕдиницыХранения,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	СУММА(ВЫРАЗИТЬ(ОстаткиТоваров.КоличествоОстаток КАК ЧИСЛО(15, 3))) КАК Количество,
		|	СУММА(ВЫРАЗИТЬ(ОстаткиТоваров.СуммаПродажнаяОстаток КАК ЧИСЛО(15, 2))) КАК Сумма,
		|	ЦеныАТТСрезПоследних.Цена КАК ЦенаАТТ,
		|	ОстаткиТоваров.Номенклатура.Родитель.Наименование,
		|	ОстаткиТоваров.Номенклатура.Родитель КАК НоменклатураРодительС,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры.Наименование КАК ХарактеристикаНоменклатурыНаименование,
		|	ОстаткиТоваров.Номенклатура.ТоварМРЦ КАК ТоварМРЦ
		|ИЗ
		|	РегистрНакопления.ТоварыВРознице.Остатки(&ОстаткиНаДату, Склад = &Склад) КАК ОстаткиТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАТТ.СрезПоследних(&ОстаткиНаДату, Склад = &Склад) КАК ЦеныАТТСрезПоследних
		|		ПО ОстаткиТоваров.Номенклатура = ЦеныАТТСрезПоследних.Номенклатура
		|			И ОстаткиТоваров.ХарактеристикаНоменклатуры = ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры
		|ГДЕ
		|	ОстаткиТоваров.Номенклатура.ЭтоГруппа = ЛОЖЬ
		|	И ОстаткиТоваров.КоличествоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,
		|	ОстаткиТоваров.Номенклатура.Код,
		|	ОстаткиТоваров.Номенклатура.Наименование,
		|	ОстаткиТоваров.Номенклатура.Артикул,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Наименование,
		|	ОстаткиТоваров.Номенклатура.Родитель.Наименование,
		|	ОстаткиТоваров.Номенклатура.Родитель,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры.Наименование,
		|	ОстаткиТоваров.Номенклатура.ТоварМРЦ,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
		|	ЦеныАТТСрезПоследних.Цена";

	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	//	|	ОстаткиТоваров.Номенклатура.Код КАК КодНоменклатуры,
	//	|	ОстаткиТоваров.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
	//	|	ОстаткиТоваров.Номенклатура.Артикул КАК Артикул,
	//	|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	//	|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Наименование КАК НаименованиеЕдиницыХранения,
	//	|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	//	|	СУММА(ВЫРАЗИТЬ(ОстаткиТоваров.КоличествоОстаток КАК ЧИСЛО(15, 3))) КАК Количество,
	//	|	СУММА(ВЫРАЗИТЬ(ОстаткиТоваров.СуммаПродажнаяОстаток КАК ЧИСЛО(15, 2))) КАК Сумма,
	//	|	ЦеныАТТСрезПоследних.Цена КАК Цена,
	//	|	ОстаткиТоваров.Номенклатура.Родитель.Наименование,
	//	|	ОстаткиТоваров.Номенклатура.Родитель КАК НоменклатураРодительС,
	//	|	ОстаткиТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//	|	ОстаткиТоваров.ХарактеристикаНоменклатуры.Наименование КАК ХарактеристикаНоменклатурыНаименование,
	//	|	ОстаткиТоваров.Номенклатура.ТоварМРЦ КАК ТоварМРЦ
	//	|ПОМЕСТИТЬ ВТ
	//	|ИЗ
	//	|	РегистрНакопления.ТоварыВРознице.Остатки(&ОстаткиНаДату, Склад = &Склад) КАК ОстаткиТоваров
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАТТ.СрезПоследних(&ОстаткиНаДату, Склад = &Склад) КАК ЦеныАТТСрезПоследних
	//	|		ПО ОстаткиТоваров.Номенклатура = ЦеныАТТСрезПоследних.Номенклатура
	//	|			И ОстаткиТоваров.ХарактеристикаНоменклатуры = ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры
	//	|ГДЕ
	//	|	ОстаткиТоваров.Номенклатура.ЭтоГруппа = ЛОЖЬ
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ОстаткиТоваров.Номенклатура,
	//	|	ОстаткиТоваров.ХарактеристикаНоменклатуры,
	//	|	ОстаткиТоваров.Номенклатура.Код,
	//	|	ОстаткиТоваров.Номенклатура.Наименование,
	//	|	ОстаткиТоваров.Номенклатура.Артикул,
	//	|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков,
	//	|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Наименование,
	//	|	ОстаткиТоваров.Номенклатура.Родитель.Наименование,
	//	|	ОстаткиТоваров.Номенклатура.Родитель,
	//	|	ОстаткиТоваров.ХарактеристикаНоменклатуры.Наименование,
	//	|	ОстаткиТоваров.Номенклатура.ТоварМРЦ,
	//	|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
	//	|	ЦеныАТТСрезПоследних.Цена
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ.Номенклатура,
	//	|	ВТ.КодНоменклатуры,
	//	|	ВТ.НаименованиеНоменклатуры,
	//	|	ВТ.Артикул,
	//	|	ВТ.ЕдиницаХраненияОстатков,
	//	|	ВТ.НаименованиеЕдиницыХранения,
	//	|	ВТ.КоэффициентЕдиницыХранения,
	//	|	ВТ.Количество,
	//	|	ВТ.Сумма,
	//	|	ВТ.Цена КАК ЦенаАТТ,
	//	|	ВТ.НоменклатураРодительНаименование,
	//	|	ВТ.НоменклатураРодительС,
	//	|	ВТ.ХарактеристикаНоменклатуры,
	//	|	ВТ.ХарактеристикаНоменклатурыНаименование,
	//	|	ВТ.ТоварМРЦ,
	//	|	ЦеныНоменклатурыСрезПоследних.Цена
	//	|ИЗ
	//	|	ВТ КАК ВТ
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ОстаткиНаДату, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	//	|		ПО ВТ.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	//	|			И ВТ.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	//	|ГДЕ
	//	|	ВТ.Количество > 0";
		
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "	РегистрНакопления.ТоварыВРознице.Остатки(&ОстаткиНаДату, Склад = &Склад) КАК ОстаткиТоваров
											|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАТТ.СрезПоследних(, Склад = &Склад) КАК ЦеныАТТСрезПоследних
											|		ПО ОстаткиТоваров.Номенклатура = ЦеныАТТСрезПоследних.Номенклатура
											|			И ОстаткиТоваров.ХарактеристикаНоменклатуры = ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры
											|ГДЕ
											|	ОстаткиТоваров.Номенклатура.ЭтоГруппа = ЛОЖЬ
											|" ,
										   "	РегистрНакопления.ТоварыНаСкладах.Остатки(&ОстаткиНаДату, Склад = &Склад) КАК ОстаткиТоваров
											|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,) КАК ЦеныАТТСрезПоследних
											|		ПО ОстаткиТоваров.Номенклатура = ЦеныАТТСрезПоследних.Номенклатура
											|			И ОстаткиТоваров.ХарактеристикаНоменклатуры = ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры
											|ГДЕ
											|	ОстаткиТоваров.Номенклатура.ЭтоГруппа = ЛОЖЬ
											|	И ЦеныАТТСрезПоследних.ТипЦен = &ТипЦен
											|" );
											
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА(ВЫРАЗИТЬ(ОстаткиТоваров.СуммаПродажнаяОстаток КАК ЧИСЛО(15, 2)))", "11111"); 								
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.ТоварыВРознице.Остатки", "РегистрНакопления.ТоварыНаСкладах.Остатки");  // Изм 1302
			
		КонецЕсли;
	НужныйТипЦен	= Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");		
	Запрос.УстановитьПараметр("ТипЦен",  НужныйТипЦен);
	
	Запрос.УстановитьПараметр("Склад",           Склад);
//	Запрос.УстановитьПараметр("ПартионныйСклад", Склад);

	Запрос.УстановитьПараметр("ОстаткиНаДату", ОстаткиНаДату); // НЧАН
////// 999		
	РезЗапроса = Запрос.Выполнить();
	
//	Если РезЗапроса.Пустой() Тогда Возврат ТабличныеДанные; КонецЕсли;
		
	ВыборкаНоменклатура = РезЗапроса.Выбрать();
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
												
				Стр = Товары.Добавить();
				Стр.Номенклатура = ВыборкаНоменклатура.Номенклатура;      
				Стр.КодНоменклатуры = ВыборкаНоменклатура.КодНоменклатуры;
				Стр.НаименованиеНоменклатуры = ВыборкаНоменклатура.НаименованиеНоменклатуры;
				Стр.ХарактеристикаНоменклатурыНаименование = ВыборкаНоменклатура.ХарактеристикаНоменклатурыНаименование ; 
				Стр.Артикул = ВыборкаНоменклатура.Артикул;
				Стр.ЕдиницаХраненияОстатков = ВыборкаНоменклатура.ЕдиницаХраненияОстатков ; 
				Стр.НаименованиеЕдиницыХранения = ВыборкаНоменклатура.НаименованиеЕдиницыХранения   ;
				Стр.КоэффициентЕдиницыХранения = ВыборкаНоменклатура.КоэффициентЕдиницыХранения      ;
				//Стр.Качество = ВыборкаНоменклатура.Качество;  
				//Стр.НаименованиеКачества = ВыборкаНоменклатура.НаименованиеКачества;
				Стр.Количество = ВыборкаНоменклатура.Количество;  
				Стр.Сумма = ВыборкаНоменклатура.Сумма;
				//Изменил Вик 2021_01_25
				//Стр.Цена = ВыборкаНоменклатура.Цена; 
				Стр.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаНоменклатура.Номенклатура,ВыборкаНоменклатура.ХарактеристикаНоменклатуры,
																	НужныйТипЦен,ОстаткиНаДату); 
				//КонецВик

				Стр.ЦенаАТТ = ВыборкаНоменклатура.ЦенаАТТ;	
				
				Стр.НоменклатураРодительНаименование = ВыборкаНоменклатура.НоменклатураРодительНаименование;  
				Стр.НоменклатураРодительС = ВыборкаНоменклатура.НоменклатураРодительС;      				
				Стр.ХарактеристикаНоменклатурыС = ВыборкаНоменклатура.ХарактеристикаНоменклатуры;
				Стр.ТоварМРЦ = ВыборкаНоменклатура.ТоварМРЦ;
				Стр.ШКТЗ = СШК[ВыборкаНоменклатура.Номенклатура]; 
				Стр.ЕдИзТЗ = СЕИ[ВыборкаНоменклатура.Номенклатура];
				Стр.ЗагрузкаДопХарактеристик = СДОПХАР[ВыборкаНоменклатура.Номенклатура];
				
	КонецЦикла;
	//Товары = РезЗапроса.Выгрузить(); 
	
// КЧАН	
	ТипУникальногоИдентификатора = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36));
	
	Товары.Колонки.Добавить("СсылкаНоменклатура", ТипУникальногоИдентификатора);
	Товары.Колонки.Добавить("СсылкаЕдиницаХранения", ТипУникальногоИдентификатора);
	Товары.Колонки.Добавить("СсылкаКачество", ТипУникальногоИдентификатора);
	Товары.Колонки.Добавить("СсылкаРодитель", ТипУникальногоИдентификатора); // НЧАН
	Товары.Колонки.Добавить("СсылкаХарактеристикаНоменклатуры", ТипУникальногоИдентификатора); // НЧАН
	
	Для Каждого СтрокаТЗ ИЗ Товары Цикл
		СтрокаТЗ.СсылкаНоменклатура = ?(ЗначениеЗаполнено(СтрокаТЗ.Номенклатура), XMLСтрока(СтрокаТЗ.Номенклатура), "");
		СтрокаТЗ.СсылкаЕдиницаХранения = ?(ЗначениеЗаполнено(СтрокаТЗ.ЕдиницаХраненияОстатков), XMLСтрока(СтрокаТЗ.ЕдиницаХраненияОстатков), "");
		//СтрокаТЗ.СсылкаКачество = ?(ЗначениеЗаполнено(СтрокаТЗ.Качество), XMLСтрока(СтрокаТЗ.Качество), "");
		СтрокаТЗ.СсылкаРодитель = ?(ЗначениеЗаполнено(СтрокаТЗ.НоменклатураРодительС), XMLСтрока(СтрокаТЗ.НоменклатураРодительС), ""); // НЧАН
		СтрокаТЗ.СсылкаХарактеристикаНоменклатуры = ?(ЗначениеЗаполнено(СтрокаТЗ.ХарактеристикаНоменклатурыС), XMLСтрока(СтрокаТЗ.ХарактеристикаНоменклатурыС), ""); // НЧАН

	КонецЦикла;
	
	Товары.Колонки.Удалить("Номенклатура");
	Товары.Колонки.Удалить("ЕдиницаХраненияОстатков");
	Товары.Колонки.Удалить("Качество");
	Товары.Колонки.Удалить("НоменклатураРодительС"); // НЧАН
	Товары.Колонки.Удалить("ХарактеристикаНоменклатурыС"); // НЧАН
	
	//ТабличныеДанные.ТаблицаЗначений = СериализаторXDTO.ЗаписатьXDTO(Товары);
	
	//++новое сжатие
	ЗаписьХМЛ= новый ЗаписьXML;
    ЗаписьХМЛ.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьХМЛ, Товары); 
	стр = ЗаписьХМЛ.Закрыть();
	ТабличныеДанные = стр; //++
	
	
	ТабличныеДанные = (новый ХранилищеЗначения(ТабличныеДанные, новый СжатиеДанных(9)));
	
	Возврат ТабличныеДанные;   //9 макс
	
КонецФункции


// Загружает документ инвентаризации на сервер
Функция UploadDocument(DocumentDate, ShopData, DocItemsTable, ItDoc)
	
	//DocItemsTable = DocItemsTable.Получить();	
	
	КэшСсылок = Новый Соответствие;
	
	ТаблицаТоваров = СериализаторXDTO.ПрочитатьXDTO(DocItemsTable.ТаблицаЗначений); // НЧАН
	Если ТаблицаТоваров.количество() = 0 Тогда Возврат Истина; КонецЕсли;
	
	СущОб = документы.ИнвентаризацияТоваровНаСкладе.ПолучитьСсылку(новый УникальныйИдентификатор(ТаблицаТоваров[0].СсылкаУИДДокумента)); //++
	Если Сущоб.ПолучитьОбъект() = Неопределено Тогда	
		ДокументИнвентаризации = Документы.ИнвентаризацияТоваровНаСкладе.СоздатьДокумент();
		ДокументИнвентаризации.УстановитьСсылкуНового(СущОб); //++
	Иначе
		ДокументИнвентаризации = СущОб;
		ДокументИнвентаризации = ДокументИнвентаризации.ПолучитьОбъект(); // НЧАН	
	КонецЕсли;
	ДокументИнвентаризации.Дата = DocumentDate;
	ДокументИнвентаризации.ИнициализироватьНовыйДокумент(Неопределено, Неопределено);
	// НЧАН
	НиаимМоб = ShopData.Наименование;
	НКод = Найти(НиаимМоб, "]");
	Если НКод = 11 Тогда
		НКодП = Сред(НиаимМоб, 2, 9);
		НаимП = СокрЛП(Сред(НиаимМоб, 12));
		НСклад = Справочники.Склады.НайтиПоКоду(НКодП);
		Если ЗначениеЗаполнено(НСклад) Тогда
			ДокументИнвентаризации.Склад = НСклад;
		Иначе
			ДокументИнвентаризации.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		ДокументИнвентаризации.Организация = Справочники.Организации.ПустаяСсылка();
		ДокументИнвентаризации.Комментарий = ShopData.НаименованиеОрганизации;
	Иначе
	// КЧАН
		ДокументИнвентаризации.Склад = ПолучитьСсылкуИзКэша(КэшСсылок, ShopData.ИдентификаторСсылки, Справочники.Склады);	
		
		Если НЕ ЗначениеЗаполнено(ДокументИнвентаризации.Организация) Тогда
			ДокументИнвентаризации.Организация = ПолучитьСсылкуИзКэша(КэшСсылок, ShopData.ИдентификаторСсылкиОрганизации, Справочники.Организации);	
		КонецЕсли;
	КонецЕсли;	
	
	Если ItDoc = Истина Тогда     // НЧАН
		ДокументИнвентаризации.ИтоговыйДокумент = Истина; 
		Если ДокументИнвентаризации.ПометкаУдаления Тогда
			 ДокументИнвентаризации.ПометкаУдаления = Ложь;
		КонецЕсли;	 
	КонецЕсли;	
	
	ТаблицаТоваров = СериализаторXDTO.ПрочитатьXDTO(DocItemsTable.ТаблицаЗначений);
	
	ДокументИнвентаризации.Товары.Очистить(); //++   
	
	Для Каждого СтрокаТЗ ИЗ ТаблицаТоваров Цикл
		НоваяСтрока = ДокументИнвентаризации.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		
// НЧАН			
		//СВ = ТипЗнч(СтрокаТЗ.СсылкаНоменклатура);
		//Возврат СВ;
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТЗ.СсылкаНоменклатура)) ; // ПолучитьСсылкуИзКэша(КэшСсылок, СтрокаТЗ.СсылкаНоменклатура, Справочники.Номенклатура);	
		НоваяСтрока.Качество = ПолучитьСсылкуИзКэша(КэшСсылок, СтрокаТЗ.СсылкаКачество, Справочники.Качество);

		ЕдИзм = ПолучитьСсылкуИзКэша(КэшСсылок, СтрокаТЗ.СсылкаЕдиницаИзмерения, Справочники.ЕдиницыИзмерения);	
		НоваяСтрока.ЕдиницаИзмерения = ?(ЕдИзм = Справочники.ЕдиницыИзмерения.ПустаяСсылка(), НайтиЕдИзПоОбъекту(НоваяСтрока.Номенклатура, СтрокаТЗ.ЕдинИзмНаименование ), ЕдИзм); 	                     
		НоваяСтрока.ЕдиницаИзмеренияМест = ПолучитьСсылкуИзКэша(КэшСсылок, СтрокаТЗ.СсылкаЕдиницаИзмеренияМест, Справочники.ЕдиницыИзмерения);
		НоваяСтрока.ХарактеристикаНоменклатуры = ПолучитьХарактеристикуДляМРЦ (НоваяСтрока.Номенклатура, СтрокаТЗ.ХарактеристикаНоменклатурыС);		
		
	КонецЦикла;
	
	ДокументИнвентаризации.Организация = Справочники.Организации.НайтиПоКоду("000000100"); // НЧАН
	Попытка
		ДокументИнвентаризации.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ТекстСообщения = "Ошибка записи/проведения документа: [" + Строка(ДокументИнвентаризации) + "] - " + ОписаниеОшибки();
		
		#Если Клиент Тогда
	        Сообщить(ТекстСообщения);
		#Иначе
			ВызватьИсключение ТекстСообщения;
		#КонецЕсли	
		
		Возврат Ложь;                                                  		
	КонецПопытки;
	
	Возврат Истина;                                                  		
КонецФункции

// Возвращает таблицу документов инвентаризации на дату по выбранному складу
Функция GetInventoriesList(DocumentDate, StoreId)
	ТабличныеДанные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.tabakon-inventory-exchange.org", "ТабличныеДанные"));

	СкладСсылка = Справочники.Склады.НайтиПоКоду(StoreId);

	Если СкладСсылка.Пустая() Тогда 
		ТабличныеДанные.ТаблицаЗначений = СериализаторXDTO.ЗаписатьXDTO(Новый ТаблицаЗначений);
		
		Возврат ТабличныеДанные; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	ИСТИНА КАК Объединять,
	               	|	ИнвентаризацияТоваровНаСкладе.Номер,
	               	|	ИнвентаризацияТоваровНаСкладе.Дата,
	               	|	ИнвентаризацияТоваровНаСкладе.Ссылка,
	               	|	ПРЕДСТАВЛЕНИЕ(ИнвентаризацияТоваровНаСкладе.Организация) КАК Организация,
	               	|	ПРЕДСТАВЛЕНИЕ(ИнвентаризацияТоваровНаСкладе.Ответственный) КАК Ответственный
	               	|ИЗ
	               	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	               	|ГДЕ
	               	|	НАЧАЛОПЕРИОДА(ИнвентаризацияТоваровНаСкладе.Дата, ДЕНЬ) = &ДатаДокументов
					|   И ИнвентаризацияТоваровНаСкладе.Склад = &Склад
	               	|	И НЕ ИнвентаризацияТоваровНаСкладе.ПометкаУдаления";
					
	Запрос.УстановитьПараметр("ДатаДокументов", DocumentDate);					
	Запрос.УстановитьПараметр("Склад", СкладСсылка);					
	РезЗапроса = Запрос.Выполнить();
	
	Если НЕ РезЗапроса.Пустой() Тогда
		ТаблицаДокументов = РезЗапроса.Выгрузить();
		
		ТаблицаДокументов.Колонки.Добавить("СсылкаИнвентаризация", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		
		Для Каждого СтрокаТЗ ИЗ ТаблицаДокументов Цикл
			СтрокаТЗ.СсылкаИнвентаризация = XMLСтрока(СтрокаТЗ.Ссылка)
		КонецЦикла;
		
		ТаблицаДокументов.Колонки.Удалить("Ссылка");
		
		ТабличныеДанные.ТаблицаЗначений = СериализаторXDTO.ЗаписатьXDTO(ТаблицаДокументов);
	Иначе
		ТабличныеДанные.ТаблицаЗначений = СериализаторXDTO.ЗаписатьXDTO(Новый ТаблицаЗначений);
	КонецЕсли;
	
	Возврат ТабличныеДанные;

КонецФункции

Функция CombineDocuments(StrDocGUIDs)
	// Получение массива строковых представлений ссылок
	СтрокиСсылок = Новый Массив;
	
	Поз = Найти(StrDocGUIDs, ";");
	
	Пока Поз > 0 Цикл
		СтрокиСсылок.Добавить(Лев(StrDocGUIDs, Поз-1));
		StrDocGUIDs = Сред(StrDocGUIDs, Поз+1);
		
		Поз = Найти(StrDocGUIDs, ";");
	КонецЦикла;
	
	//Получение списка самий ссылок на документы
	МассивДокументов = Новый Массив;
	
	Для Каждого Элем ИЗ СтрокиСсылок Цикл
		СсылкаНаДокумент = Документы.ИнвентаризацияТоваровНаСкладе.ПолучитьСсылку(Новый УникальныйИдентификатор(Элем));
		
		Если НЕ СсылкаНаДокумент.Пустая() Тогда
			МассивДокументов.Добавить(СсылкаНаДокумент);
		КонецЕсли;
	КонецЦикла;
// НЧАН	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ИнвентаризацияТоваровНаСкладе.Ссылка,
	                      |	ИнвентаризацияТоваровНаСкладе.Дата,
	                      |	ИнвентаризацияТоваровНаСкладе.Организация,
	                      |	ИнвентаризацияТоваровНаСкладе.Склад,
	                      |	ИнвентаризацияТоваровНаСкладе.Ответственный,
	                      |	ИнвентаризацияТоваровНаСкладе.УчитыватьСерии,
	                      |	ИнвентаризацияТоваровНаСкладе.УсловияПроведенияИнвентаризации
	                      |ИЗ
	                      |	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	                      |ГДЕ
	                      |	ИнвентаризацияТоваровНаСкладе.Ссылка В(&МассивДокументов)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(ИнвентаризацияТоваровНаСкладеТовары.ЕдиницаИзмеренияМест) КАК ЕдиницаИзмеренияМест,
	                      |	СУММА(ИнвентаризацияТоваровНаСкладеТовары.Количество) КАК Количество,
	                      |	МАКСИМУМ(ИнвентаризацияТоваровНаСкладеТовары.КоличествоМест) КАК КоличествоМест,
	                      |	МАКСИМУМ(ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет) КАК КоличествоУчет,
	                      |	МАКСИМУМ(ИнвентаризацияТоваровНаСкладеТовары.Коэффициент) КАК Коэффициент,
	                      |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура,
	                      |	СУММА(ИнвентаризацияТоваровНаСкладеТовары.Сумма) КАК Сумма,
	                      |	СУММА(ИнвентаризацияТоваровНаСкладеТовары.СуммаУчет / &КолВоДокументов) КАК СуммаУчет,
	                      |	ИнвентаризацияТоваровНаСкладеТовары.ХарактеристикаНоменклатуры,
	                      |	МИНИМУМ(ИнвентаризацияТоваровНаСкладеТовары.Цена) КАК Цена,
	                      |	МАКСИМУМ(ИнвентаризацияТоваровНаСкладеТовары.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	                      |	СУММА(0) КАК Отклонение,
	                      |	МАКСИМУМ(ИнвентаризацияТоваровНаСкладеТовары.ШКприСканировании) КАК ШКприСканировании,
	                      |	ИнвентаризацияТоваровНаСкладеТовары.ЦенаВРознице,
	                      |	МАКСИМУМ(ИнвентаризацияТоваровНаСкладеТовары.ООРП) КАК ООРП,
	                      |	СУММА(ИнвентаризацияТоваровНаСкладеТовары.Итого) КАК Итого
	                      |ИЗ
	                      |	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	                      |ГДЕ
	                      |	ИнвентаризацияТоваровНаСкладеТовары.Ссылка В(&МассивДокументов)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура,
	                      |	ИнвентаризацияТоваровНаСкладеТовары.ХарактеристикаНоменклатуры,
	                      |	ИнвентаризацияТоваровНаСкладеТовары.ЦенаВРознице");
							
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
 	Запрос.УстановитьПараметр("КолВоДокументов", МассивДокументов.Количество());
	
	Попытка   
	 	масРезультатов = Запрос.ВыполнитьПакет();
	Исключение	
	   	Возврат Ложь;
	КонецПопытки;	
// КЧАН
	 
	Выборка = масРезультатов[0].Выбрать();
	
	НачатьТранзакцию();
	
	НовыйДокумент = Документы.ИнвентаризацияТоваровНаСкладе.СоздатьДокумент();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка);
	
	тзДокумента = масРезультатов[1].Выгрузить();
	
	Товары = НовыйДокумент.Товары;
	Товары.Загрузить(тзДокумента);
	
	Для Каждого Стр Из Товары Цикл
		Стр.Отклонение = Стр.Количество - Стр.КоличествоУчет;
		Стр.Итого = Стр.Количество - Стр.КоличествоУчет + Стр.ООРП; 
		Стр.Сумма = Стр.Цена * (Стр.Количество + Стр.ООРП);
	КонецЦикла;	
		
	// Запись нового (объединенного документа)
	Попытка
		НовыйДокумент.Записать();
		ЛК_РаботаСДокументами.УстановитьСвойствоВажности(НовыйДокумент.Ссылка, истина);
		
	Исключение  
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
// КЧАН
	
	// Пометка на удаление исходных документов
	Для Каждого СсылкаНаДокумент ИЗ МассивДокументов Цикл
		Попытка
			СсылкаНаДокумент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		Исключение
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
// КЧАН
	
	ЗафиксироватьТранзакцию();
	
	//РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.
	
	Возврат Истина;

КонецФункции

// НЧАН

Функция DownloadDocument(Ssilka) 	
	СсылкаНаДокумент = Документы.ИнвентаризацияТоваровНаСкладе.ПолучитьСсылку(Новый УникальныйИдентификатор(Ssilka));
		
	ТаблицаХМЛ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.tabakon-inventory-exchange.org", "ТабличныеДанные"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИнвентаризацияТоваровНаСкладе.Ссылка,
		|	ИнвентаризацияТоваровНаСкладе.Дата,
		|	ИнвентаризацияТоваровНаСкладе.Организация КАК ОрганизацияС,
		|	ИнвентаризацияТоваровНаСкладе.Склад КАК СкладС,
		|	ИнвентаризацияТоваровНаСкладе.Ответственный КАК ОтветственныйС,
		|	ИнвентаризацияТоваровНаСкладе.УчитыватьСерии,
		|	ИнвентаризацияТоваровНаСкладе.УсловияПроведенияИнвентаризации
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладе.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.НомерСтроки,
		|	Товары.ЕдиницаИзмеренияМест,
		|	Товары.Качество,
		|	Товары.Количество,
		|	Товары.КоличествоМест,
		|	Товары.КоличествоУчет,
		|	Товары.Коэффициент,
		|	Товары.Номенклатура,
		|	Товары.Сумма,
		|	Товары.СуммаУчет,
		|	Товары.ХарактеристикаНоменклатуры,
		|	Товары.Цена,
		|	Товары.ЦенаВРознице,
		|	Товары.СуммаРегл,
		|	Товары.ЕдиницаИзмерения,
		|	Товары.СерияНоменклатуры,
		|	Товары.ЭтоНедостача,
		|	Товары.Номенклатура.Код КАК КодНоменклатуры,
		|	Товары.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
		|	Товары.Отклонение,
		|	Товары.ШКприСканировании,
		|	Товары.ООРП,
		|	Товары.Итого
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка";
			
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаДокумента = Новый ТаблицаЗначений;	
	ТаблицаДокумента = РезультатЗапроса[0].Выгрузить(); 
	
	Таблица = СериализованнаяТаблица(ТаблицаДокумента);
	Таблица.Колонки.Добавить("Товары");
	
	Товары = Новый ТаблицаЗначений;	
	Товары = РезультатЗапроса[1].Выгрузить();
	Товары = СериализованнаяТаблица(Товары);	
	
	Стр = Таблица[0];
	Стр.Товары = Товары;
	
	
	//++ТаблицаХМЛ.ТаблицаЗначений = СериализаторXDTO.ЗаписатьXDTO(Таблица);
	//Возврат новый ХранилищеЗначения(ТаблицаХМЛ, новый СжатиеДанных(9));
	
	
	//++новое сжатие
	ЗаписьХМЛ= новый ЗаписьXML;
    ЗаписьХМЛ.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьХМЛ, Таблица); 
	стр = ЗаписьХМЛ.Закрыть();
	ТабличныеДанные = стр; //++
	
	
	ТабличныеДанные = (новый ХранилищеЗначения(ТабличныеДанные, новый СжатиеДанных(9)));
	
	Возврат ТабличныеДанные;   //9 макс

	
	
	
КонецФункции	
	
Функция СериализованнаяТаблица(ТаблицаДокумента) 
	
	Таблица = Новый ТаблицаЗначений;
	Для Каждого Кол Из ТаблицаДокумента.Колонки Цикл
		Таблица.Колонки.Добавить(Кол.Имя);
	КонецЦикла;
	Для Каждого Стр Из  ТаблицаДокумента Цикл
		Ст =  Таблица.Добавить();
		Для Каждого Кол Из ТаблицаДокумента.Колонки Цикл
			Эл = Стр[Кол.Имя];
			Проверка = (ТипЗнч(Эл) = Тип("Строка")) ИЛИ Ложь;
			Проверка = (ТипЗнч(Эл) = Тип("Дата")) ИЛИ Проверка;
			Проверка = (ТипЗнч(Эл) = Тип("Число")) ИЛИ Проверка;
			Если НЕ Проверка Тогда
				 Ст[Кол.Имя] = ?(ЗначениеЗаполнено(Стр[Кол.Имя]), XMLСтрока(Стр[Кол.Имя]), "");
			 Иначе
				 Ст[Кол.Имя] = Стр[Кол.Имя];
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция НайтиЕдИзПоОбъекту(Номенк, ЕдИзмНаименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕдиницыИзмерения.Ссылка
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец = &Владелец
		|	И ЕдиницыИзмерения.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Владелец", Номенк);
	Запрос.УстановитьПараметр("Наименование", ЕдИзмНаименование);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции

Функция PometitDokiNaUdolenie(StrokaUID)
	
	МассивИзРазбитойСтроки = РазбитьСтроку(StrokaUID);
	
	НачатьТранзакцию();
	
	Для Каждого Эл Из МассивИзРазбитойСтроки Цикл
		
		Попытка
  			СсылкаНаДокумент = Документы.ИнвентаризацияТоваровНаСкладе.ПолучитьСсылку(Новый УникальныйИдентификатор(Эл));
			СсылкаНаДокумент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = "Не удалось удалить объект " + Строка(Эл);
			Возврат ТекстОшибки;
		КонецПопытки;
		
	КонецЦикла;

	ЗафиксироватьТранзакцию();

	Возврат "Истина"
			
КонецФункции	

Функция РазбитьСтроку(СтрокаТекстовая)
	
	МассивИзРазбитойСтрокиД = Новый Массив;
	
	Поз = Найти(СтрокаТекстовая, ";");
	
	Если Поз = 0 Тогда
		 МассивИзРазбитойСтрокиД.Добавить(СтрокаТекстовая);
	Иначе
		Пока Поз > 0 Цикл
			МассивИзРазбитойСтрокиД.Добавить(Лев(СтрокаТекстовая, Поз-1));
			СтрокаТекстовая = Сред(СтрокаТекстовая, Поз+1);
			
			Поз = Найти(СтрокаТекстовая, ";");
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивИзРазбитойСтрокиД 	
КонецФункции

Функция ПолучитьХарактеристикуДляМРЦ (Номенклатура, УИДСереЛ)
	
	МН = Справочники.ХарактеристикиНоменклатуры;
			
	//Если Номенклатура.ТоварМРЦ Тогда  // Корректировка 31.07.17
		Попытка
			ПСО = МН.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДСереЛ));
			СсылкаНаОбъект = ?(ПСО.ПолучитьОбъект() = Неопределено, СсылкаНаОбъект, ПСО);
		Исключение 
			СсылкаНаОбъект = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецПопытки;	
	//КонецЕсли;			
		
	Возврат СсылкаНаОбъект
	
КонецФункции

Функция СоответствиеДополнительнаяЗагрузкаХарактеристик (Склад, ОстаткиНаДату)
	
	СДОПХАР = Новый Соответствие;
	
	З = Новый Запрос ;
	З.Текст = "ВЫБРАТЬ
	          |	ТоварыВРозницеОстатки.Номенклатура
	          |ПОМЕСТИТЬ ВТ
	          |ИЗ
	          |	РегистрНакопления.ТоварыВРознице.Остатки(&ОстаткиНаДату,) КАК ТоварыВРозницеОстатки
	          |ГДЕ
	          |	ТоварыВРозницеОстатки.КоличествоОстаток > 0
	          |	И ТоварыВРозницеОстатки.Номенклатура.ЭтоГруппа = ЛОЖЬ
	          |	И ТоварыВРозницеОстатки.Склад = &Склад
	          |
	          |СГРУППИРОВАТЬ ПО
	          |	ТоварыВРозницеОстатки.Номенклатура
	          |;
	          |
	          |////////////////////////////////////////////////////////////////////////////////
	          |ВЫБРАТЬ
	          |	ВТ.Номенклатура КАК Номенклатура,
	          |	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаС,
	          |	ХарактеристикиНоменклатуры.Наименование КАК Наименование,
	          |	ХарактеристикиНоменклатуры.ДатаЗаписи КАК ДатаЗаписи,
	          |	ХарактеристикиНоменклатуры.Представление КАК Представление,
	          |	ХарактеристикиНоменклатуры.Владелец КАК ВладелецС 
	          |ИЗ
	          |	ВТ КАК ВТ
	          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	          |		ПО ВТ.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	          |ИТОГИ ПО
	          |	Номенклатура" ;
			  
	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
		З.Текст = СтрЗаменить(З.Текст, "РегистрНакопления.ТоварыВРознице", "РегистрНакопления.ТоварыНаСкладах");
	КонецЕсли;
			  
	З.УстановитьПараметр("Склад", Склад);
	З.УстановитьПараметр("ОстаткиНаДату", ОстаткиНаДату); // НЧАН
	В = З.Выполнить();
				
	ВН = В.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВН.Следующий() Цикл 	
		
	 			ДОПХАР = Новый ТаблицаЗначений;
				ДОПХАР.Колонки.Добавить("ХарактеристикаС");
				ДОПХАР.Колонки.Добавить("Наименование");
				ДОПХАР.Колонки.Добавить("ДатаЗаписи");
				ДОПХАР.Колонки.Добавить("Представление");
				ДОПХАР.Колонки.Добавить("ВладелецС");
				
				ВыборкаДетальныеЗаписи = ВН.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
						СтрН = ДОПХАР.Добавить();
						СтрН.ХарактеристикаС = XMLСтрока(ВыборкаДетальныеЗаписи.ХарактеристикаС); 
						СтрН.Наименование = ВыборкаДетальныеЗаписи.Наименование;  
						СтрН.ДатаЗаписи = ВыборкаДетальныеЗаписи.ДатаЗаписи;
						СтрН.Представление = ВыборкаДетальныеЗаписи.Представление;
						СтрН.ВладелецС = XMLСтрока(ВыборкаДетальныеЗаписи.ВладелецС);
					
				КонецЦикла;
				
		СДОПХАР.Вставить(ВН.Номенклатура, ДОПХАР);

	КонецЦикла;
	
	Возврат СДОПХАР	
	
КонецФункции	

Функция GetNomenklature(Nomenklatura)   // 26.06.2017
	
	мУниверсальнаяВыгрузкаДанных = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	
	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";

	МакетПравилОбмена = ПолучитьОбщийМакет("ЛК_ВС_GetNomenklatura");
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);

	мУниверсальнаяВыгрузкаДанных.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	мУниверсальнаяВыгрузкаДанных.ЗагрузитьПравилаОбмена();

	ТаблицаПравилВыгрузки = мУниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки.Скопировать();
		
	//ФайлВыгрузки = "C:\Users\SanyaCh\Desktop\001.xml";
	ФайлВыгрузки = ПолучитьИмяВременногоФайла("xml");
	
	мУниверсальнаяВыгрузкаДанных.ИмяФайлаОбмена = ФайлВыгрузки;
	мУниверсальнаяВыгрузкаДанных.РежимОбмена    = "Выгрузка";
		
	СН = Новый Массив;
	СН.Добавить(Nomenklatura);
	
	мУниверсальнаяВыгрузкаДанных.Параметры.Вставить("НоменклатураСписок", СН);

	мУниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки = ТаблицаПравилВыгрузки.Скопировать();
		
	мУниверсальнаяВыгрузкаДанных.ВыполнитьВыгрузку();
		
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(ФайлВыгрузки, КодировкаТекста.UTF8);
	Результат = ЧтениеТекста.Прочитать();	
	ЧтениеТекста.Закрыть();
	
	Попытка
		УдалитьФайлы(ФайлВыгрузки);
		УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);
	Исключение КонецПопытки;
	
	ХранилищеДанных = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат ХранилищеДанных;
	
КонецФункции

Функция GetGroupNomenklature()   
	
	мУниверсальнаяВыгрузкаДанных = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	
	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";

	МакетПравилОбмена = ПолучитьОбщийМакет("ЛК_ВС_GetGroupNomenklatura");
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);

	мУниверсальнаяВыгрузкаДанных.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	мУниверсальнаяВыгрузкаДанных.ЗагрузитьПравилаОбмена();

	ТаблицаПравилВыгрузки = мУниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки.Скопировать();
		
	//ФайлВыгрузки = "C:\Users\SanyaCh\Desktop\001.xml";
	ФайлВыгрузки = ПолучитьИмяВременногоФайла("xml");
	
	мУниверсальнаяВыгрузкаДанных.ИмяФайлаОбмена = ФайлВыгрузки;
	мУниверсальнаяВыгрузкаДанных.РежимОбмена    = "Выгрузка";
		
	мУниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки = ТаблицаПравилВыгрузки.Скопировать();
		
	мУниверсальнаяВыгрузкаДанных.ВыполнитьВыгрузку();
		
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(ФайлВыгрузки, КодировкаТекста.UTF8);
	Результат = ЧтениеТекста.Прочитать();	
	ЧтениеТекста.Закрыть();
	
	Попытка
		УдалитьФайлы(ФайлВыгрузки);
		УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);
	Исключение КонецПопытки;
	
	ХранилищеДанных = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат ХранилищеДанных;
	
КонецФункции

Функция GetGroupMobile() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК СН,
		|	Номенклатура.Родитель.Ссылка Как СР,
		|	Номенклатура.Наименование,
		|	Номенклатура.Родитель.Наименование,
		|	Номенклатура.Код,
		|	Номенклатура.Родитель.Код
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа";

	ТЗ = Запрос.Выполнить().Выгрузить();	
	ТЗ.Колонки.Добавить("УИДНом");
	ТЗ.Колонки.Добавить("УИДРод");
	Для Каждого Стр Из ТЗ Цикл
		Стр.УИДНом = ?(ЗначениеЗаполнено(Стр.СН), XMLСтрока(Стр.СН), "");
		Стр.УИДРод = ?(ЗначениеЗаполнено(Стр.СР), XMLСтрока(Стр.СР), "");
	КонецЦикла;
	ТЗ.Колонки.Удалить("СН");
	ТЗ.Колонки.Удалить("СР");

	ХранилищеДанных = Новый ХранилищеЗначения(ТЗ, Новый СжатиеДанных(9));
	
	Возврат ХранилищеДанных;
	
КонецФункции	


///  Выгружает движение по регистру ТоварыВРознице.  Добавлено 10.101.19 Костин
Функция GetMovementRegisterGoodsAtRetail(StoreId, DataOstatkov, Nomenklatura, Characteristica, DataNachala)
	
	Товары = Новый ТаблицаЗначений;
	
	ТабличныеДанные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.tabakon-inventory-exchange.org", "ТабличныеДанные"));
	ТабличныеДанные.ТаблицаЗначений = СериализаторXDTO.ЗаписатьXDTO(Товары);
	
	Склад = Справочники.Склады.НайтиПоКоду(StoreId);
	Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Nomenklatura));   
	Если ЗначениеЗаполнено(Characteristica) Тогда
		
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(Characteristica));   
	Иначе
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	// НЧАН
	Попытка
		ОстаткиНаДату = Дата(DataOstatkov);
	Исключение
		ОстаткиНаДату = ТекущаяДата();
	КонецПопытки;
	// КЧАН
	
	Попытка
		ДатаНачала = Дата(DataNachala);
	Исключение
		ДатаНачала = Дата(2018, 08, 30);
	КонецПопытки;
	
	//ДатаНачала = Дата(2018, 08, 30);
		
	Если Склад.Пустая() Тогда Возврат ТабличныеДанные; КонецЕсли;
	
	//Если РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее().ВестиПартионныйУчетПоСкладам Тогда
	//	ВремСклад = Склад;
	//Иначе
	//	ВремСклад = Справочники.Склады.ПустаяСсылка();
	//КонецЕсли;
	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =    "ВЫБРАТЬ
	                  |	ТоварыВРознице.Номенклатура,
	                  |	ТоварыВРознице.ХарактеристикаНоменклатуры,
	                  |	ТоварыВРознице.Номенклатура.Наименование КАК НоменклатураНаименование,
	                  |	ТоварыВРознице.ХарактеристикаНоменклатуры.Наименование КАК ХарактеристикаНоменклатурыНаименование,
	                  |	ТоварыВРознице.Период,
	                  |	ТоварыВРознице.Регистратор,
	                  |	ТоварыВРознице.НомерСтроки,
	                  |	ПРЕДСТАВЛЕНИЕ(ТоварыВРознице.Регистратор) КАК РегистраторНаименование,
	                  |	ТоварыВРознице.Количество,
	                  |	ТоварыВРознице.ВидДвижения
	                  |ИЗ
	                  |	РегистрНакопления.ТоварыВРознице КАК ТоварыВРознице
	                  |ГДЕ
	                  |	ТоварыВРознице.Склад = &Склад
	                  |	И ТоварыВРознице.Период МЕЖДУ &ДатаНачала И &Период
	                  |	И ТоварыВРознице.Номенклатура = &Номенклатура
	                  |	И ТоварыВРознице.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры"   ;
	
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("Период", ОстаткиНаДату);
	
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	
	ТипУникальногоИдентификатора = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36));
	
	Товары.Колонки.Добавить("СсылкаНоменклатура", ТипУникальногоИдентификатора);
	//Товары.Колонки.Добавить("СсылкаЕдиницаХранения", ТипУникальногоИдентификатора);
	//Товары.Колонки.Добавить("СсылкаКачество", ТипУникальногоИдентификатора);
	//Товары.Колонки.Добавить("СсылкаРодитель", ТипУникальногоИдентификатора); // НЧАН
	Товары.Колонки.Добавить("СсылкаХарактеристикаНоменклатуры", ТипУникальногоИдентификатора); 
	Товары.Колонки.Добавить("СсылкаРегистратор", ТипУникальногоИдентификатора); 
	
	
	Для Каждого СтрокаТЗ ИЗ Товары Цикл
		СтрокаТЗ.СсылкаНоменклатура = ?(ЗначениеЗаполнено(СтрокаТЗ.Номенклатура), XMLСтрока(СтрокаТЗ.Номенклатура), "");
		//СтрокаТЗ.СсылкаЕдиницаХранения = ?(ЗначениеЗаполнено(СтрокаТЗ.ЕдиницаХраненияОстатков), XMLСтрока(СтрокаТЗ.ЕдиницаХраненияОстатков), "");
		////СтрокаТЗ.СсылкаКачество = ?(ЗначениеЗаполнено(СтрокаТЗ.Качество), XMLСтрока(СтрокаТЗ.Качество), "");
		//СтрокаТЗ.СсылкаРодитель = ?(ЗначениеЗаполнено(СтрокаТЗ.НоменклатураРодительС), XMLСтрока(СтрокаТЗ.НоменклатураРодительС), ""); // НЧАН
		СтрокаТЗ.СсылкаХарактеристикаНоменклатуры = ?(ЗначениеЗаполнено(СтрокаТЗ.ХарактеристикаНоменклатуры), XMLСтрока(СтрокаТЗ.ХарактеристикаНоменклатуры), ""); // НЧАН
		СтрокаТЗ.СсылкаРегистратор = ?(ЗначениеЗаполнено(СтрокаТЗ.Регистратор), XMLСтрока(СтрокаТЗ.Регистратор), "");
		
	КонецЦикла;
	
	Товары.Колонки.Удалить("Номенклатура");
	//Товары.Колонки.Удалить("ЕдиницаХраненияОстатков");
	//Товары.Колонки.Удалить("Качество");
	//Товары.Колонки.Удалить("НоменклатураРодительС"); // НЧАН
	Товары.Колонки.Удалить("ХарактеристикаНоменклатуры"); // НЧАН
	Товары.Колонки.Удалить("Регистратор");
	
	
	//ТабличныеДанные.ТаблицаЗначений = СериализаторXDTO.ЗаписатьXDTO(Товары);
	
	//++новое сжатие
	ЗаписьХМЛ= новый ЗаписьXML;
	ЗаписьХМЛ.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьХМЛ, Товары); 
	стр = ЗаписьХМЛ.Закрыть();
	ТабличныеДанные = стр; //++
	 	
	ТабличныеДанные = (новый ХранилищеЗначения(ТабличныеДанные, новый СжатиеДанных(9)));
	
	Возврат ТабличныеДанные;   //9 макс
	
КонецФункции

Функция GetProductBalancesRetail(StoreId, DataOstatkov)
	
				
		Товары = Новый ТаблицаЗначений;
		ТоварыИзРозницы = Новый ТаблицаЗначений;

	
	ТабличныеДанные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.tabakon-inventory-exchange.org", "ТабличныеДанные"));
	ТабличныеДанные.ТаблицаЗначений = СериализаторXDTO.ЗаписатьXDTO(Товары);	
		
		Склад = Справочники.Склады.НайтиПоКоду(StoreId);
	
	Попытка
		ОстаткиНаДату = Дата(DataOstatkov);
	Исключение
		ОстаткиНаДату = ТекущаяДата();
	КонецПопытки;
		 
	Если Склад.Пустая() Тогда Возврат ТабличныеДанные; КонецЕсли;
	
	База = "Розница";
	
	//Товары = Новый ТаблицаЗначений;
	//ТабличныеДанные = Новый ТаблицаЗначений;
	
	СОМСоединение = ПодключениеКСервернойБД();

	
	ТоварыИзРозницы = СОМСоединение.ЛК_общегоНазначения.GetProductBalancesRetail(StoreId, DataOstatkov, База);
	
	Товары.Колонки.Добавить("НаименованиеНоменклатуры");
	Товары.Колонки.Добавить("ХарактеристикаНоменклатурыНаименование");
	Товары.Колонки.Добавить("Артикул");
	Товары.Колонки.Добавить("КодНоменклатуры");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("НаименованиеЕдиницыХранения");
	Товары.Колонки.Добавить("НоменклатураРодительНаименование");
	Товары.Колонки.Добавить("СсылкаНоменклатура");
	Товары.Колонки.Добавить("СсылкаХарактеристикаНоменклатуры"); 
	Товары.Колонки.Добавить("СсылкаРодитель");
	Товары.Колонки.Добавить("СсылкаЕдиницаХранения");
	
	
	Для каждого Строка Из ТоварыИзРозницы Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Артикул = Строка.Артикул;
		НоваяСтрока.КодНоменклатуры = Строка.КодНоменклатуры;
		НоваяСтрока.Количество = Строка.Количество;
		НоваяСтрока.НаименованиеЕдиницыХранения = Строка.НаименованиеЕдиницыХранения;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.НаименованиеНоменклатуры;
		НоваяСтрока.НоменклатураРодительНаименование = Строка.НоменклатураРодительНаименование;
		НоваяСтрока.СсылкаЕдиницаХранения = Строка.СсылкаЕдиницаХранения;
		НоваяСтрока.СсылкаНоменклатура = Строка.СсылкаНоменклатура;
		НоваяСтрока.СсылкаРодитель = Строка.СсылкаРодитель;
		НоваяСтрока.СсылкаХарактеристикаНоменклатуры = Строка.СсылкаХарактеристикаНоменклатуры;
		НоваяСтрока.ХарактеристикаНоменклатурыНаименование = Строка.ХарактеристикаНоменклатурыНаименование;
		
	КонецЦикла;
	
		//++новое сжатие
	ЗаписьХМЛ= Новый ЗаписьXML;
    ЗаписьХМЛ.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьХМЛ, Товары); 
	стр = ЗаписьХМЛ.Закрыть();
	ТабличныеДанные = стр; //++
	
	
	ТабличныеДанные = (Новый ХранилищеЗначения(ТабличныеДанные, новый СжатиеДанных(9)));

	
	
	
	Возврат ТабличныеДанные;	  
		  
		  
КонецФункции


Функция СоответствиеДополнительнаяЗагрузкаХарактеристикДляСОМ (Склад, ОстаткиНаДату, База, СОМСоединение )
	
	СДОПХАР = Новый Соответствие;
	
	//З = Новый Запрос ;
	З =  СОМСоединение.NewObject("Запрос");

	З.Текст = "ВЫБРАТЬ
	          |	ТоварыВРозницеОстатки.Номенклатура
	          |ПОМЕСТИТЬ ВТ
	          |ИЗ
	          |	РегистрНакопления.ТоварыВРознице.Остатки(&ОстаткиНаДату,) КАК ТоварыВРозницеОстатки
	          |ГДЕ
	          |	ТоварыВРозницеОстатки.КоличествоОстаток > 0
	          |	И ТоварыВРозницеОстатки.Номенклатура.ЭтоГруппа = ЛОЖЬ
	          |	И ТоварыВРозницеОстатки.Склад = &Склад
	          |
	          |СГРУППИРОВАТЬ ПО
	          |	ТоварыВРозницеОстатки.Номенклатура
	          |;
	          |
	          |////////////////////////////////////////////////////////////////////////////////
	          |ВЫБРАТЬ
	          |	ВТ.Номенклатура КАК Номенклатура,
	          |	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаС,
	          |	ХарактеристикиНоменклатуры.Наименование КАК Наименование,
	          |	ХарактеристикиНоменклатуры.ДатаЗаписи КАК ДатаЗаписи,
	          |	ХарактеристикиНоменклатуры.Представление КАК Представление,
	          |	ХарактеристикиНоменклатуры.Владелец КАК ВладелецС 
	          |ИЗ
	          |	ВТ КАК ВТ
	          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	          |		ПО ВТ.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	          |ИТОГИ ПО
	          |	Номенклатура" ;
			  
	//Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
	Если База = "Розница" Тогда				  
		З.Текст = СтрЗаменить(З.Текст, "РегистрНакопления.ТоварыВРознице", "РегистрНакопления.ТоварыНаСкладах");
		З.Текст = СтрЗаменить(З.Текст, "ХарактеристикиНоменклатуры.ДатаЗаписи КАК ДатаЗаписи,", "");

		
	КонецЕсли;
			  
	З.УстановитьПараметр("Склад", Склад);
	З.УстановитьПараметр("ОстаткиНаДату", ОстаткиНаДату); // НЧАН
	В = З.Выполнить();
				
	ВН = В.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВН.Следующий() Цикл 	
		
	 			ДОПХАР = Новый ТаблицаЗначений;
				ДОПХАР.Колонки.Добавить("ХарактеристикаС");
				ДОПХАР.Колонки.Добавить("Наименование");
				ДОПХАР.Колонки.Добавить("ДатаЗаписи");
				ДОПХАР.Колонки.Добавить("Представление");
				ДОПХАР.Колонки.Добавить("ВладелецС");
				
				ВыборкаДетальныеЗаписи = ВН.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
						СтрН = ДОПХАР.Добавить();
						СтрН.ХарактеристикаС = XMLСтрока(ВыборкаДетальныеЗаписи.ХарактеристикаС); 
						СтрН.Наименование = ВыборкаДетальныеЗаписи.Наименование; 
						Если База = "Розница" Тогда	
						Иначе
							СтрН.ДатаЗаписи = ВыборкаДетальныеЗаписи.ДатаЗаписи;
						КонецЕсли;
						СтрН.Представление = ВыборкаДетальныеЗаписи.Представление;
						СтрН.ВладелецС = XMLСтрока(ВыборкаДетальныеЗаписи.ВладелецС);
					
				КонецЦикла;
				
		СДОПХАР.Вставить(ВН.Номенклатура, ДОПХАР);

	КонецЦикла;
	
	Возврат СДОПХАР	
	
КонецФункции	


Функция ПодключениеКСервернойБД()
		
//v8 = CreateObject("V8.COMConnector");
//Строку подключения можно получить так:
//Если ФайловаяБазаДанных Тогда

//КаталогБазыДанных = "M:\Костин Владимир\1С Базы\УТ11";
//Пользователь = "Администратор (ОрловАВ)";
//Пароль = "";

//Usr = "Администратор (ОрловАВ)";
//Pwd = "";


//V83COMConnector= Новый COMОбъект("V83.COMConnector");

COMConnector =  ПолучитьCOMОбъектПоВерсииПлатформы();

		//Параметры1 = "file='" + КаталогБазыДанных + "'; usr='" + Пользователь + "'; pwd='" + Пароль + "';";
		
		
		Параметры = "Srvr='localhost';Ref='roznica_gu';Usr='ЛегкийКод';Pwd='16722188'";
		
		//Параметры = "Srvr=""localhost"";Ref=""roznica_gu"";Usr=""ЛегкийКод"";Pwd=""16722188"";";
		//Параметры1 = "File='E:\ЛК\Костин\УТ11 Меркурий'; usr='Администратор'; pwd=''";
		
		//Параметры2 = "File=""M:\Костин Владимир\1С Базы\УТ11""";Usr=""login"";Pwd=""password"";";
//Иначе
//        СтрокаПодключения =  "srvr='" + Сервер + "'; ref='" + БазаДанных + "'; usr='" + Пользователь + "'; pwd='" + Пароль + "';";
//КонецЕсли;
Попытка
        //Соединение = V8.Connect("Usr=""admin"";Pwd="""";File=""\\srvr\1C\V8\UPP""");
		 //Возврат V83COMConnector.Connect(Параметры1);
		 Возврат COMConnector.Connect(Параметры);


Исключение
        Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

		
КонецФункции


Функция ПолучитьCOMОбъектПоВерсииПлатформы() Экспорт

   // Определяем имя COM-объекта по версии платформы
   ИмяComОбъекта = "";
   Инфо = Новый СистемнаяИнформация;
   Если Найти(Инфо.ВерсияПриложения, "8.3") > 0 Тогда
      ИмяComОбъекта = "V83.COMConnector";
   ИначеЕсли Найти(Инфо.ВерсияПриложения, "8.2") > 0 Тогда
       ИмяComОбъекта = "V82.COMConnector";
   Иначе
       ВызватьИсключение "Не удалось определить версию платформы";
   КонецЕсли;

   // Инициализируем COM-объект и соединение
   COMConnector = Новый COMОбъект(ИмяComОбъекта);

   Возврат COMConnector;

КонецФункции

Функция GetMovementRegisterRetail(StoreId, DataOstatkov, Nomenklatura, Characteristica, DataNachala, DataOkonchanya)
	
	Товары = Новый ТаблицаЗначений;
	ТаблицаДвижения = Новый ТаблицаЗначений;

	
	ТабличныеДанные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.tabakon-inventory-exchange.org", "ТабличныеДанные"));
	ТабличныеДанные.ТаблицаЗначений = СериализаторXDTO.ЗаписатьXDTO(Товары);
	
	Склад = Справочники.Склады.НайтиПоКоду(StoreId);
	Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Nomenklatura));   
	Если ЗначениеЗаполнено(Characteristica) Тогда
		
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(Characteristica));   
	Иначе
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	// НЧАН
	Попытка
		ОстаткиНаДату = Дата(DataOstatkov);
	Исключение
		ОстаткиНаДату = ТекущаяДата();
	КонецПопытки;
	// КЧАН
	
	Попытка
		ДатаНачала = Дата(DataNachala);
	Исключение
		ДатаНачала = Дата(2018, 08, 30);
	КонецПопытки;
	       
	Попытка
		ДатаОкончания = Дата(DataOkonchanya);
	Исключение
		ДатаОкончания = ТекущаяДата();
	КонецПопытки;
	
			
	Если Склад.Пустая() Тогда Возврат ТабличныеДанные; КонецЕсли;
	
	 СОМСоединение = ПодключениеКСервернойБД();

	
	 ТаблицаДвижения = СОМСоединение.ЛК_общегоНазначения.ПолучитьТаблицуДвиженийПоРознице(StoreId, Nomenklatura, Characteristica, ОстаткиНаДату, ДатаНачала, ДатаОкончания);
	
	 Товары.Колонки.Добавить("НаименованиеНоменклатуры"); 
	 Товары.Колонки.Добавить("ХарактеристикаНоменклатурыНаименование");
	 Товары.Колонки.Добавить("Период");
	 Товары.Колонки.Добавить("НомерСтроки");
	 Товары.Колонки.Добавить("РегистраторНаименование");
	 Товары.Колонки.Добавить("Количество");
	 Товары.Колонки.Добавить("ВидДвиженияНаименование");
	 Товары.Колонки.Добавить("СсылкаНоменклатура");
	 Товары.Колонки.Добавить("СсылкаХарактеристикаНоменклатуры");
	 Товары.Колонки.Добавить("СсылкаРегистратор");
	
	
	Для каждого Строка Из ТаблицаДвижения Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Период = Строка.Период;
		НоваяСтрока.ВидДвиженияНаименование = Строка.ВидДвиженияНаименование;
		НоваяСтрока.Количество = Строка.Количество;
		НоваяСтрока.РегистраторНаименование = Строка.РегистраторНаименование;
		НоваяСтрока.НаименованиеНоменклатуры = Строка.НаименованиеНоменклатуры;
		НоваяСтрока.НомерСтроки = Строка.НомерСтроки;
		НоваяСтрока.СсылкаНоменклатура = Строка.СсылкаНоменклатура;
		НоваяСтрока.СсылкаХарактеристикаНоменклатуры = Строка.СсылкаХарактеристикаНоменклатуры;
		НоваяСтрока.ХарактеристикаНоменклатурыНаименование = Строка.ХарактеристикаНоменклатурыНаименование;
		НоваяСтрока.СсылкаРегистратор = Строка.СсылкаРегистратор;

	КонецЦикла;

		
	//++новое сжатие
	ЗаписьХМЛ= новый ЗаписьXML;
	ЗаписьХМЛ.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьХМЛ, Товары); 
	стр = ЗаписьХМЛ.Закрыть();
	ТабличныеДанные = стр; //++
	 	
	ТабличныеДанные = (новый ХранилищеЗначения(ТабличныеДанные, новый СжатиеДанных(9)));
	
	Возврат ТабличныеДанные;   //9 макс

КонецФункции

Функция GetDeviation(StoreId, Nomenklatura, Characteristica, DataNachala, DataOkonchanya)
	
	Товары = Новый ТаблицаЗначений;
	
	ТабличныеДанные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.tabakon-inventory-exchange.org", "ТабличныеДанные"));
	ТабличныеДанные.ТаблицаЗначений = СериализаторXDTO.ЗаписатьXDTO(Товары);
	
	Склад = Справочники.Склады.НайтиПоКоду(StoreId);
	Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Nomenklatura));   
	Если ЗначениеЗаполнено(Characteristica) Тогда
		
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(Characteristica));   
	Иначе
		ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	// НЧАН
	Попытка
		ДатаОкончания = Дата(DataOkonchanya);
	Исключение
		ДатаОкончания = КонецДня(ТекущаяДата());
	КонецПопытки;
	// КЧАН
	
	Попытка
		ДатаНачала = Дата(DataNachala);
	Исключение
		ДатаНачала = Дата(2018, 08, 30);
	КонецПопытки;
	
	//ДатаНачала = Дата(2018, 08, 30);
		
	Если Склад.Пустая() Тогда Возврат ТабличныеДанные; КонецЕсли;
	
	//Если РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее().ВестиПартионныйУчетПоСкладам Тогда
	//	ВремСклад = Склад;
	//Иначе
	//	ВремСклад = Справочники.Склады.ПустаяСсылка();
	//КонецЕсли;
	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =    "ВЫБРАТЬ
	                  |	ТоварыВРознице.Номенклатура,
	                  |	ТоварыВРознице.ХарактеристикаНоменклатуры,
	                  |	ТоварыВРознице.Номенклатура.Наименование КАК НоменклатураНаименование,
	                  |	ТоварыВРознице.ХарактеристикаНоменклатуры.Наименование КАК ХарактеристикаНоменклатурыНаименование,
	                  |	ТоварыВРознице.Период,
	                  |	ТоварыВРознице.Регистратор,
	                  |	ПРЕДСТАВЛЕНИЕ(ТоварыВРознице.Регистратор) КАК РегистраторНаименование,
	                  |	ТоварыВРознице.Количество,
	                  |	ТоварыВРознице.ВидДвижения
	                  |ИЗ
	                  |	РегистрНакопления.ТоварыВРознице КАК ТоварыВРознице
	                  |ГДЕ
	                  |	ТоварыВРознице.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	                  |	И ТоварыВРознице.Регистратор.Дата > &ДатаОкончания
	                  |	И ТоварыВРознице.Склад = &Склад
	                  |	И ТоварыВРознице.Номенклатура = &Номенклатура
	                  |	И ТоварыВРознице.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры" ;
	
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	
	ТипУникальногоИдентификатора = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36));
	
	Товары.Колонки.Добавить("СсылкаНоменклатура", ТипУникальногоИдентификатора);
	//Товары.Колонки.Добавить("СсылкаЕдиницаХранения", ТипУникальногоИдентификатора);
	//Товары.Колонки.Добавить("СсылкаКачество", ТипУникальногоИдентификатора);
	//Товары.Колонки.Добавить("СсылкаРодитель", ТипУникальногоИдентификатора); // НЧАН
	Товары.Колонки.Добавить("СсылкаХарактеристикаНоменклатуры", ТипУникальногоИдентификатора); 
	Товары.Колонки.Добавить("СсылкаРегистратор", ТипУникальногоИдентификатора); 
	
	
	Для Каждого СтрокаТЗ ИЗ Товары Цикл
		СтрокаТЗ.СсылкаНоменклатура = ?(ЗначениеЗаполнено(СтрокаТЗ.Номенклатура), XMLСтрока(СтрокаТЗ.Номенклатура), "");
		//СтрокаТЗ.СсылкаЕдиницаХранения = ?(ЗначениеЗаполнено(СтрокаТЗ.ЕдиницаХраненияОстатков), XMLСтрока(СтрокаТЗ.ЕдиницаХраненияОстатков), "");
		////СтрокаТЗ.СсылкаКачество = ?(ЗначениеЗаполнено(СтрокаТЗ.Качество), XMLСтрока(СтрокаТЗ.Качество), "");
		//СтрокаТЗ.СсылкаРодитель = ?(ЗначениеЗаполнено(СтрокаТЗ.НоменклатураРодительС), XMLСтрока(СтрокаТЗ.НоменклатураРодительС), ""); // НЧАН
		СтрокаТЗ.СсылкаХарактеристикаНоменклатуры = ?(ЗначениеЗаполнено(СтрокаТЗ.ХарактеристикаНоменклатуры), XMLСтрока(СтрокаТЗ.ХарактеристикаНоменклатуры), ""); // НЧАН
		СтрокаТЗ.СсылкаРегистратор = ?(ЗначениеЗаполнено(СтрокаТЗ.Регистратор), XMLСтрока(СтрокаТЗ.Регистратор), "");
		
	КонецЦикла;
	
	Товары.Колонки.Удалить("Номенклатура");
	//Товары.Колонки.Удалить("ЕдиницаХраненияОстатков");
	//Товары.Колонки.Удалить("Качество");
	//Товары.Колонки.Удалить("НоменклатураРодительС"); // НЧАН
	Товары.Колонки.Удалить("ХарактеристикаНоменклатуры"); // НЧАН
	Товары.Колонки.Удалить("Регистратор");
	
	
	//ТабличныеДанные.ТаблицаЗначений = СериализаторXDTO.ЗаписатьXDTO(Товары);
	
	//++новое сжатие
	ЗаписьХМЛ= новый ЗаписьXML;
	ЗаписьХМЛ.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьХМЛ, Товары); 
	стр = ЗаписьХМЛ.Закрыть();
	ТабличныеДанные = стр; //++
	 	
	ТабличныеДанные = (новый ХранилищеЗначения(ТабличныеДанные, новый СжатиеДанных(9)));
	
	Возврат ТабличныеДанные;   //9 макс

КонецФункции




//Функция ПолучитьСсылкиИзМассиваУИД (МассивУИД)
//	
//	МассивДокументов = Новый Массив;
//	
//	Для Каждого Эл ИЗ МассивУИД Цикл
//		
//		СсылкаНаДокумент = Документы.ИнвентаризацияТоваровНаСкладе.ПолучитьСсылку(Новый УникальныйИдентификатор(Элем));
//		
//		Если НЕ СсылкаНаДокумент.Пустая() Тогда
//			МассивДокументов.Добавить(СсылкаНаДокумент);
//		КонецЕсли;
//	КонецЦикла;	
//	
//КонецФункции	

// КЧАН