// Заполняет реквизиты значениями по умолчанию
//
// Параметры: 
//  ПараметрОбъектКопирования	- содержкит ссылку на документ копирования в случае, 
//								  если новый документ создается копированием.
//  ПараметрОснование			- содержкит ссылку на документ-основание в случае, 
//								  если новый документ создается на основании другого.
//
Процедура ИнициализироватьНовыйДокумент(ПараметрОбъектКопирования, ПараметрОснование) Экспорт

	#Если Клиент Или ВнешнееСоединение Тогда
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , , ПараметрОбъектКопирования, ПараметрОснование);
	#КонецЕсли

КонецПроцедуры // ИнициализироватьНовыйДокумент()	

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриемНаСтажировку") Тогда
		// Заполнение шапки
		Организация = ДанныеЗаполнения.Организация;
		Подразделение = ДанныеЗаполнения.Подразделение;
		Сотрудник = ДанныеЗаполнения.Стажер;
		
		ЗаполнитьОсновныеНачисления();
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет ТЧ "ОсновныеНачисления" всеми имеющимися в соответствующем справочнике видами расчетов,
// отмеченными как основные
Процедура ЗаполнитьОсновныеНачисления() Экспорт
	ОсновныеНачисления.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыРасчетовССотрудниками.Ссылка
		|ИЗ
		|	Справочник.ВидыРасчетовССотрудниками КАК ВидыРасчетовССотрудниками
		|ГДЕ
		|	ВидыРасчетовССотрудниками.ХарактерРасчета = ЗНАЧЕНИЕ(Перечисление.ХарактерРасчета.Начисление)
		|	И ВидыРасчетовССотрудниками.Основной = ИСТИНА
		|	И ВидыРасчетовССотрудниками.Ссылка <> ЗНАЧЕНИЕ(Справочник.ВидыРасчетовССотрудниками.ОкладСменыСтажера)
		|	И НЕ ВидыРасчетовССотрудниками.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = ОсновныеНачисления.Добавить();
			НоваяСтрока.ВидРасчета = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	// Проверяем наличие кадровых событий по сотруднику в указанную дату документа (созданных другими документами)
	// Если таковые имеются, отменяем проведение документа с сообщением пользователю об ошибке.
	Если РегистрыСведений.КадровыйУчетСотрудников.НаличиеКадровыхСобытийНаДату(Ссылка, Дата, Новый Структура("Организация,Сотрудник", Организация, Сотрудник)) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// регистр КадровыйУчетСотрудников
	Движения.КадровыйУчетСотрудников.Записывать = Истина;
	Движения.КадровыйУчетСотрудников.Очистить();
	Движение = Движения.КадровыйУчетСотрудников.Добавить();
	Движение.Период = НачалоДня(Дата);
	Движение.Организация = Организация;	
	Движение.Сотрудник = Сотрудник;
	Движение.Состояние = Состояние;
	Движение.Должность = Должность;
	Движение.Подразделение = Подразделение;
	
	// регистр СтавкиОсновныхВидовРасчетовСотрудников
	Движения.СтавкиОсновныхВидовРасчетовСотрудников.Записывать = Истина;
	Движения.СтавкиОсновныхВидовРасчетовСотрудников.Очистить();
	
	Для Каждого ТекСтрокаОсновныеНачисления Из ОсновныеНачисления Цикл
		// Добавляем данные только по тем видам расчетов, которым задана величина ставки
		Если ТекСтрокаОсновныеНачисления.Сумма <> 0 Тогда
			Движение = Движения.СтавкиОсновныхВидовРасчетовСотрудников.Добавить();
			Движение.Период = Дата;
			Движение.Сотрудник = Сотрудник;
			Движение.ВидРасчета = ТекСтрокаОсновныеНачисления.ВидРасчета;
			Движение.Сумма = ТекСтрокаОсновныеНачисления.Сумма;
		КонецЕсли;
	КонецЦикла;

	// Проверяем наличие действующей ставки смены стажера и обнуляем ее
	ВидРасчетаСтавкаСтажера = Справочники.ВидыРасчетовССотрудниками.ОкладСменыСтажера;
	
	Если РегистрыСведений.СтавкиОсновныхВидовРасчетовСотрудников.ПолучитьПоследнее(Дата, Новый Структура("Сотрудник, ВидРасчета", Сотрудник, ВидРасчетаСтавкаСтажера)).Сумма <> 0 Тогда
		Движение = Движения.СтавкиОсновныхВидовРасчетовСотрудников.Добавить();
		Движение.Период = Дата;
		Движение.Сотрудник = Сотрудник;
		Движение.ВидРасчета = ВидРасчетаСтавкаСтажера;
		Движение.Сумма = 0;
	КонецЕсли;
	
	// Перемещаем сотрудника в группу работающих сотрудников
	СпрОбъект = Сотрудник.ПолучитьОбъект();
	СпрОбъект.Отдел = ЭтотОбъект.Отдел;
	СпрОбъект.Родитель = Справочники.ФизическиеЛица.Работают;
	СпрОбъект.Записать();
КонецПроцедуры
