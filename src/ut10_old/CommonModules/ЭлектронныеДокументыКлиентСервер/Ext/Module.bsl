////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыКлиентСервер: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить.
//
Функция ПолучитьТекстСостоянияЭД(СсылкаНаВладельца, Форма = Неопределено) Экспорт
	
	Гиперссылка = Ложь;
	ТекстСостоянияЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка);
	
	Если НЕ Форма = Неопределено Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ТекстСостоянияЭДО", ТекстСостоянияЭД);
		СтруктураПараметров.Вставить("ВидОперации", "УстановкаГиперссылки");
		СтруктураПараметров.Вставить("ЗначениеПараметра", Гиперссылка);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ЭлектронныеДокументыПереопределяемый.ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров);
		#Иначе
			ЭлектронныеДокументыСлужебныйВызовСервера.ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров);
		#КонецЕсли
	КонецЕсли;
	
	Возврат ТекстСостоянияЭД;
	
КонецФункции

// Формирует текст сообщения, подставляя значения
// параметров в шаблоны сообщений.
//
// Параметры
//  ВидПоля       - Строка - может принимать значения:
//                  Поле, Колонка, Список
//  ВидСообщения  - Строка - может принимать значения:
//                  Заполнение, Корректность
//  Параметр1     - Строка - имя поля
//  Параметр2     - Строка - номер строки
//  Параметр3     - Строка - имя списка
//  Параметр4     - Строка - текст сообщения о некорректности заполнения
//
// Возвращаемое значение:
//   Строка - текст сообщения
//
Функция ПолучитьТекстСообщения(ВидПоля = "Поле", ВидСообщения = "Заполнение",
	Параметр1 = "", Параметр2 = "",	Параметр3 = "", Параметр4 = "") Экспорт

	ТекстСообщения = "";

	Если ВРег(ВидПоля) = "ПОЛЕ" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" не заполнено.'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" заполнено некорректно.
                           |
                           |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "КОЛОНКА" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3"".'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнена колонка ""%1"" в строке %2 списка ""%3"".
                           |
                           |%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "СПИСОК" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не введено ни одной строки в список ""%3"".'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнен список ""%3"".
                           |
                           |%4'");
		КонецЕсли;
	КонецЕсли;

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Параметр1, Параметр2, Параметр3, Параметр4);

КонецФункции

// Определяет отбор динамического списка в зависимости от наличия режима совместимости
//
// Параметры:
//  Список  - ДинамическийСписок - список, для которого надо определить отбор
//
// Возвращаемое значение:
//   Отбор   - требуемый отбор
//
Функция ОтборДинамическогоСписка(Список) Экспорт

	Если ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости() Тогда
		Возврат Список.КомпоновщикНастроек.Настройки.Отбор;
	Иначе
		Возврат Список.Отбор;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Определяет необходимость конкретного действия из перечня действий.
//
// Параметры:
//  ПереченьДействий - Строка, перечень действий, которые должны быть совершены с объектом
//  Действие - Строка, конкретное действие, которое нужно найти в перечне действий
// 
// Возвращаемое значение:
//  Булево - Если действие найдено - возвращается Истина, иначе Ложь
//
Функция ЕстьДействие(ПереченьДействий, Действие) Экспорт
	
	Если Найти(ПереченьДействий, Действие) > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает текущую версию формата для синхронного обмена
// 
// Возвращаемое значение:
//  Строка - версия формата
//
Функция ВерсияФорматаСинхронногоОбмена() Экспорт
	
	Возврат "1.08";
	
КонецФункции

// Вызывается из ЭлектронныеДокументыВнутренний.СтруктураДанныхПодписи(...) и ЭлектронныеДокументыСлужебныйКлиент.РаспаковатьПакетЭДНаКлиенте(...).
// По двоичным данным подписи формируется структура данных сертификата.
//
// Параметры:
//   ДвоичныеДанныеПодписи - ДвоичныеДанные - данные электронной подписи.
//   МенеджерКриптографии  - МенеджерКриптографии.
//
// Возвращаемое значение:
//   Структура:
//      ДанныеСертификатаПолучены - Булево - Истина - данные сертификата получены.
//      ДвоичныеДанныеСертификата - ДвоичныеДанные - двоичные данные сертификата.
//      КомуВыданСертификат       - Строка - владелец сертификата.
//      Отпечаток                 - СтрокаBase64 - отпечаток сертификата в Base64.
//
Функция СтруктураДанныхСертификата(ДвоичныеДанныеПодписи, МенеджерКриптографии) Экспорт
	
	Структура = Новый Структура;
	ДанныеСертификатаПолучены = Ложь;
	ДатаПодписи = "";
	КомуВыданСертификат = "";
	Отпечаток = "";
	ДвоичныеДанныеСертификата = "";
	Если МенеджерКриптографии <> Неопределено Тогда
		СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
		Если СертификатыПодписи.Количество() <> 0 Тогда
			Сертификат = СертификатыПодписи[0];
			КомуВыданСертификат = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
			Отпечаток = Base64Строка(Сертификат.Отпечаток);
			ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
			ДанныеСертификатаПолучены = Истина;
		КонецЕсли;
	КонецЕсли;
	Структура.Вставить("ДанныеСертификатаПолучены", ДанныеСертификатаПолучены);
	Структура.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);
	Структура.Вставить("КомуВыданСертификат",       КомуВыданСертификат);
	Структура.Вставить("Отпечаток",                 Отпечаток);
	
	Возврат Структура;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа со служебными ЭД

// В функции выполняются действия по служебным ЭД (извещение о получении, уведомление об уточнении):
// формирование, утверждение, подписание, отправка.
//
// Параметры:
//  МассивЭД - массив - содержит ссылки на ЭД, по которым требуется сформировать служебные ЭД (электронные
//    документы, владельцы обрабатываемых служебных ЭД).
//  ВидЭД - перечисление - вид ЭД, которые надо обработать (может принимать значения: Извещение о получении
//    и уведомление об уточнении).
//  ТекстУведомления - строка - текст уведомления, введенный пользователем, отклонившим ЭД (имеет смысл,
//    только для ВидЭД = УведомлениеОбУточнении).
//
// Возвращаемое значение:
//  Булево - Истина - действия со служебными ЭД выполнены, иначе - Ложь.
//
Функция СформироватьПодписатьИОтправитьСлужебныеЭД(МассивЭД, ВидЭД, ТекстУведомления = "") Экспорт
	
	КолСформированных = 0;
	КолУтвержденных   = 0;
	КолПодписанных    = 0;
	КолПодготовленных = 0;
	КолОтправленных   = 0;
	// Структура соответствий содержит соответствия: соглашений и сертификатов подписи, соглашений и сертификатов авторизации,
	// сертификатов и структур параметров этих сертификатов (структура параметров сертификатов содержит: ссылку на сертификат,
	// признак "запомнить пароль к сертификату", пароль к сертификату, признак "отозван", отпечаток, файл сертификата, а так же
	// если этот сертификат используется для авторизации, то либо расшифрованный маркер, либо зашифрованный маркер или и то и другое).
	НемедленнаяОтправкаЭД = Неопределено;
	ВыполнятьАвторизациюНаСервере = Неопределено;
	ВыполнятьКриптооперацииНаСервере = Неопределено;
	ЭлектронныеДокументыСлужебныйВызовСервера.ИнициализироватьПеременные(ВыполнятьКриптооперацииНаСервере,
		ВыполнятьАвторизациюНаСервере, НемедленнаяОтправкаЭД);
	Если МассивЭД.Количество() > 0 И ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении") Тогда
		ЭлектронныеДокументыСлужебныйВызовСервера.УдалитьИзМассиваНеОбрабатываемыеЭД(МассивЭД);
		ВыполнятьКриптооперацииНаСервере = ВыполнятьАвторизациюНаСервере;
	КонецЕсли;
	Если МассивЭД.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	МассивСлужебныхЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СформироватьСлужебныеЭД(МассивЭД, ВидЭД, ТекстУведомления);

	ЕстьОбработанныеЭД = Ложь;
	Если ЗначениеЗаполнено(МассивСлужебныхЭД) Тогда
		СтМассивовСтруктурСертификатов = Новый Структура;
		Действия = "ПодписатьОтправить";
		ДопПараметры = Новый Структура;
		#Если Клиент Тогда
			ЭлектронныеДокументыСлужебныйКлиент.ОбработатьЭД(Новый Массив, Действия, ДопПараметры, МассивСлужебныхЭД);
		#Иначе
			СтруктураСоответствий = Неопределено;
			СтСоотвСоглашенийИМассивовЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнитьДействияПоЭД(Новый Массив,
				Новый Массив, Действия, ДопПараметры, МассивСлужебныхЭД, СтруктураСоответствий, Истина);
		#КонецЕсли
		
		Если НЕ (ДопПараметры.Свойство("ЕстьОбработанныеЭД", ЕстьОбработанныеЭД) И ЕстьОбработанныеЭД = Истина) Тогда
			ЕстьОбработанныеЭД = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьОбработанныеЭД;
	
КонецФункции
