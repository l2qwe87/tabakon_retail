
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Загружает список документов, полученных из УТМ.
//
// Параметры:
//  МассивДокументов        - Массив - полученные документы из ТМ ЕГАИС,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
// Возвращаемое значение:
//   Соответствие  - загруженные документы.
//
Функция ОбработатьВходящиеДокументы(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	
	СправкиБ = Новый ТаблицаЗначений;
	СправкиБ.Колонки.Добавить("Обработана"            , Новый ОписаниеТипов("Булево"));
	СправкиБ.Колонки.Добавить("Идентификатор"         , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СправкиБ.Колонки.Добавить("НомерТТН"              , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СправкиБ.Колонки.Добавить("ДатаТТН"               , Новый ОписаниеТипов("Дата"));
	СправкиБ.Колонки.Добавить("Грузоотправитель"      , Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	СправкиБ.Колонки.Добавить("ИдентификаторТТН"      , Новый ОписаниеТипов("Строка"));
	СправкиБ.Колонки.Добавить("ИдентификаторСтрокиТТН", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СправкиБ.Колонки.Добавить("НомерСправкиБ"         , Новый ОписаниеТипов("Строка"));
	СправкиБ.Колонки.Добавить("АдресЗапроса"          , Новый ОписаниеТипов("Строка"));
	
	МассивТТН = Новый Массив;
	
	Для каждого СтруктураДокумента Из МассивДокументов Цикл
		
		РезультатОбработкиДокумента = РезультатОбработкиВходящегоДокумента();
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтруктураДокумента.ТекстXML);
		
		Попытка
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип(Справочники.ВидыОбъектовЕГАИС.ДокументыЕГАИС.ПространствоИмен, "Документы"));
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать входящий документ %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", СтруктураДокумента.АдресЗапроса);
			РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			Продолжить;
		КонецПопытки;
		
		Если ОбъектXDTO.Документ.РегистрацияСправокПоТТН <> Неопределено Тогда
			
			ШапкаСправкиБ = ОбъектXDTO.Документ.РегистрацияСправокПоТТН.Шапка;
			
			Для каждого ЭлементСодержимого Из ОбъектXDTO.Документ.РегистрацияСправокПоТТН.Содержимое.Элементы Цикл
				СтрокаСправокБ = СправкиБ.Добавить();
				СтрокаСправокБ.Идентификатор          = ШапкаСправкиБ.Идентификатор;
				СтрокаСправокБ.НомерТТН               = ШапкаСправкиБ.НомерТТН;
				СтрокаСправокБ.ДатаТТН                = ШапкаСправкиБ.ДатаТТН;
				СтрокаСправокБ.Грузоотправитель       = ЗагрузитьОрганизацию(ШапкаСправкиБ.Грузоотправитель, ДополнительныеПараметры);
				СтрокаСправокБ.ИдентификаторТТН       = ШапкаСправкиБ.ИдентификаторТТН;
				СтрокаСправокБ.ИдентификаторСтрокиТТН = ЭлементСодержимого.ИдентификаторСтрокиТТН;
				СтрокаСправокБ.НомерСправкиБ          = ЭлементСодержимого.РегистрационныйНомер;
				СтрокаСправокБ.АдресЗапроса           = СтруктураДокумента.АдресЗапроса;
			КонецЦикла;
			
		ИначеЕсли ОбъектXDTO.Документ.ТТН <> Неопределено Тогда
			
			ДанныеТТН = ПолучитьДанныеТТН(ОбъектXDTO.Документ.ТТН, ДополнительныеПараметры);
			ДанныеТТН.Вставить("АдресЗапроса", СтруктураДокумента.АдресЗапроса);
			
			МассивТТН.Добавить(ДанныеТТН);
			
		ИначеЕсли ОбъектXDTO.Документ.Квитанция <> Неопределено Тогда
			
			Если ОбъектXDTO.Документ.Квитанция.Результат <> Неопределено Тогда
				
				РезультатXDTO = ОбъектXDTO.Документ.Квитанция.Результат;
				
				Если РезультатXDTO.Статус = "Rejected" Тогда
					РегистрыСведений.ЗапросыЕГАИС.ЗаписатьОтветИзЕГАИС(СтруктураДокумента.Идентификатор, РезультатXDTO.ДатаОтвета, РезультатXDTO.Комментарий);
					
					Запись = РегистрыСведений.ЗапросыЕГАИС.СоздатьМенеджерЗаписи();
					Запись.Идентификатор = СтруктураДокумента.Идентификатор;
					Запись.Прочитать();
					
					Если Запись.Выбран() И Запись.ТипЗапроса = Справочники.ВидыОбъектовЕГАИС.АктПодтвержденияТТН Тогда
						ИзменитьСтатусТТНПриОшибке(СтруктураДокумента.Идентификатор, ДополнительныеПараметры);
					КонецЕсли;
				Иначе
					РегистрыСведений.ЗапросыЕГАИС.УдалитьЗапрос(СтруктураДокумента.Идентификатор);
				КонецЕсли;
				
			ИначеЕсли ОбъектXDTO.Документ.Квитанция.РезультатОперации <> Неопределено Тогда
				
				РезультатXDTO = ОбъектXDTO.Документ.Квитанция.РезультатОперации;
				
				Если РезультатXDTO.Статус = "Rejected" Тогда
					РегистрыСведений.ЗапросыЕГАИС.ЗаписатьОтветИзЕГАИС(СтруктураДокумента.Идентификатор, РезультатXDTO.ДатаОперации, РезультатXDTO.Комментарий);
					
					Запись = РегистрыСведений.ЗапросыЕГАИС.СоздатьМенеджерЗаписи();
					Запись.Идентификатор = СтруктураДокумента.Идентификатор;
					Запись.Прочитать();
					
					Если Запись.Выбран() И Запись.ТипЗапроса = Справочники.ВидыОбъектовЕГАИС.АктПодтвержденияТТН Тогда
						ИзменитьСтатусТТНПриОшибке(СтруктураДокумента.Идентификатор, ДополнительныеПараметры);
					КонецЕсли;
				Иначе
					РегистрыСведений.ЗапросыЕГАИС.УдалитьЗапрос(СтруктураДокумента.Идентификатор);
				КонецЕсли;
				
			Иначе
				РезультатОбработкиДокумента.ОписаниеОшибки = НСтр("ru = 'Не удалось определить формат ответа на запрос %1'");
				РезультатОбработкиДокумента.ОписаниеОшибки = СтрЗаменить(РезультатОбработкиДокумента.ОписаниеОшибки, "%1", СтруктураДокумента.АдресЗапроса);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					РезультатОбработкиДокумента.ОписаниеОшибки);
				
				РегистрыСведений.ЗапросыЕГАИС.ЗаписатьОтветИзЕГАИС(СтруктураДокумента.Идентификатор, ТекущаяДатаСеанса(), РезультатОбработкиДокумента.ОписаниеОшибки);
			КонецЕсли;
			
			РезультатОбработкиДокумента.Результат  = ПустаяСтрока(РезультатОбработкиДокумента.ОписаниеОшибки);
			РезультатОбработкиДокумента.ВидОбъекта = Справочники.ВидыОбъектовЕГАИС.Квитанция;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
		ИначеЕсли ОбъектXDTO.Документ.ОтветОрганизации <> Неопределено Тогда
		
			СписокОрганизаций = ОбъектXDTO.Документ.ОтветОрганизации.СписокОрганизаций.Элементы;
			
			Для каждого ДанныеОрганизации Из СписокОрганизаций Цикл
				ЗагрузитьОрганизацию(ДанныеОрганизации, ДополнительныеПараметры);
			КонецЦикла;
			
			РезультатОбработкиДокумента.Результат  = Истина;
			РезультатОбработкиДокумента.ВидОбъекта = Справочники.ВидыОбъектовЕГАИС.ОтветОрганизации;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
			РегистрыСведений.ЗапросыЕГАИС.УдалитьЗапрос(СтруктураДокумента.Идентификатор);
			
		ИначеЕсли ОбъектXDTO.Документ.ОтветАлкогольнаяПродукция <> Неопределено Тогда
		
			ЗагрузитьАлкогольнуюПродукцию(ОбъектXDTO.Документ.ОтветАлкогольнаяПродукция.СписокАлкогольнойПродукции.Элементы, ДополнительныеПараметры);
			
			РезультатОбработкиДокумента.Результат  = Истина;
			РезультатОбработкиДокумента.ВидОбъекта = Справочники.ВидыОбъектовЕГАИС.ОтветАлкогольнаяПродукция;
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
			
			РегистрыСведений.ЗапросыЕГАИС.УдалитьЗапрос(СтруктураДокумента.Идентификатор);
			
		Иначе
			РезультатОбработкиДокумента.ОписаниеОшибки = НСтр("ru = 'Не удалось определить формат входящего документа %1'");
			РезультатОбработкиДокумента.ОписаниеОшибки = СтрЗаменить(РезультатОбработкиДокумента.ОписаниеОшибки, "%1", СтруктураДокумента.АдресЗапроса);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				РезультатОбработкиДокумента.ОписаниеОшибки);
			
			Результат.Вставить(СтруктураДокумента.АдресЗапроса, РезультатОбработкиДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ДанныеТТН Из МассивТТН Цикл
		
		АдресСправкиБ = "";
		
		Для каждого СтрокаТовары Из ДанныеТТН.ТаблицаТоваров Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Идентификатор"         , ДанныеТТН.Идентификатор);
			ПараметрыОтбора.Вставить("НомерТТН"              , ДанныеТТН.Номер);
			ПараметрыОтбора.Вставить("ДатаТТН"               , ДанныеТТН.Дата);
			ПараметрыОтбора.Вставить("Грузоотправитель"      , ДанныеТТН.Грузоотправитель);
			ПараметрыОтбора.Вставить("ИдентификаторСтрокиТТН", СтрокаТовары.ИдентификаторСтроки);
			
			МассивСтрок = СправкиБ.НайтиСтроки(ПараметрыОтбора);
			
			Если МассивСтрок.Количество() <> 0 Тогда
				ДанныеТТН.ИдентификаторТТН = МассивСтрок[0].ИдентификаторТТН;
				СтрокаТовары.НомерСправкиБ = МассивСтрок[0].НомерСправкиБ;
				
				АдресСправкиБ = МассивСтрок[0].АдресЗапроса;
				Для Индекс = 0 По МассивСтрок.ВГраница() Цикл
					МассивСтрок[Индекс].Обработана = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		РезультатЗагрузкиТТН = РезультатОбработкиВходящегоДокумента();
		
		СоздатьТТН(ДанныеТТН, РезультатЗагрузкиТТН, ДополнительныеПараметры);
		
		Если РезультатЗагрузкиТТН.Результат Тогда
			
			РезультатЗагрузкиТТН.ВидОбъекта = Справочники.ВидыОбъектовЕГАИС.ТТН;
			
			Если Результат[ДанныеТТН.АдресЗапроса] = Неопределено Тогда
				Результат.Вставить(ДанныеТТН.АдресЗапроса, РезультатЗагрузкиТТН);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(АдресСправкиБ) И Результат[АдресСправкиБ] = Неопределено Тогда
				РезультатЗагрузкиСправкиБ = РезультатОбработкиВходящегоДокумента();
				ЗаполнитьЗначенияСвойств(РезультатЗагрузкиСправкиБ, РезультатЗагрузкиТТН,, "ВидОбъекта");
				РезультатЗагрузкиСправкиБ.ВидОбъекта = Справочники.ВидыОбъектовЕГАИС.РегистрацияСправокПоТТН;
				
				Результат.Вставить(АдресСправкиБ, РезультатЗагрузкиСправкиБ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СправкиБ.Количество() <> 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СправкиБ", СправкиБ);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СправкиБ.Идентификатор КАК Идентификатор,
		|	СправкиБ.НомерТТН КАК НомерТТН,
		|	СправкиБ.ДатаТТН КАК ДатаТТН,
		|	СправкиБ.Грузоотправитель КАК Грузоотправитель,
		|	СправкиБ.ИдентификаторТТН КАК ИдентификаторТТН,
		|	СправкиБ.ИдентификаторСтрокиТТН КАК ИдентификаторСтрокиТТН,
		|	СправкиБ.НомерСправкиБ КАК НомерСправкиБ,
		|	СправкиБ.АдресЗапроса КАК АдресЗапроса
		|ПОМЕСТИТЬ СправкиБ
		|ИЗ
		|	&СправкиБ КАК СправкиБ
		|ГДЕ
		|	НЕ СправкиБ.Обработана
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СправкиБ.ИдентификаторТТН,
		|	СправкиБ.НомерСправкиБ,
		|	СправкиБ.АдресЗапроса,
		|	ТоварноТранспортнаяНакладнаяЕГАИСТовары.Ссылка КАК Ссылка,
		|	ТоварноТранспортнаяНакладнаяЕГАИСТовары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.ТоварноТранспортнаяНакладнаяЕГАИС.Товары КАК ТоварноТранспортнаяНакладнаяЕГАИСТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СправкиБ КАК СправкиБ
		|		ПО ТоварноТранспортнаяНакладнаяЕГАИСТовары.Ссылка.Идентификатор = СправкиБ.Идентификатор
		|			И ТоварноТранспортнаяНакладнаяЕГАИСТовары.Ссылка.НомерВходящий = СправкиБ.НомерТТН
		|			И (НАЧАЛОПЕРИОДА(ТоварноТранспортнаяНакладнаяЕГАИСТовары.Ссылка.ДатаВходящая, ДЕНЬ) = НАЧАЛОПЕРИОДА(СправкиБ.ДатаТТН, ДЕНЬ))
		|			И ТоварноТранспортнаяНакладнаяЕГАИСТовары.Ссылка.Грузоотправитель = СправкиБ.Грузоотправитель
		|			И ТоварноТранспортнаяНакладнаяЕГАИСТовары.ИдентификаторСтроки = СправкиБ.ИдентификаторСтрокиТТН
		|ГДЕ
		|	ТоварноТранспортнаяНакладнаяЕГАИСТовары.Ссылка.ИдентификаторТТН = """"
		|	И ТоварноТранспортнаяНакладнаяЕГАИСТовары.НомерСправкиБ = """"";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТТН = Выборка.Ссылка.ПолучитьОбъект();
			ТТН.ИдентификаторТТН = Выборка.ИдентификаторТТН;
			ТТН.Товары[Выборка.НомерСтроки - 1].НомерСправкиБ = Выборка.НомерСправкиБ;
			
			РезультатОбработкиДокумента = РезультатОбработкиВходящегоДокумента();
			
			Попытка
				ТТН.Записать();
				
				РезультатОбработкиДокумента.Результат = Истина;
				РезультатОбработкиДокумента.ДокументСсылка = ТТН.Ссылка;
			Исключение
				ТекстОшибки = НСтр("ru = 'Ошибка записи ТТН, полученной из ЕГАИС.'");
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				РезультатОбработкиДокумента.ОписаниеОшибки = ТекстОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			
			Если Результат[Выборка.АдресЗапроса] = Неопределено Тогда
				РезультатОбработкиДокумента.ВидОбъекта = Справочники.ВидыОбъектовЕГАИС.РегистрацияСправокПоТТН;
				Результат.Вставить(Выборка.АдресЗапроса, РезультатОбработкиДокумента);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОбработатьВходящиеДокументы()

// Функция возвращает текст XML, который нужно выгрузить в ЕГАИС.
//
// Параметры:
//  ТранспортныйМодуль  - Структура - ТМ ЕГАИС, в который требуется осуществить выгрузку,
//  ВидДокумента        - СправочникСсылка.ВидыОбъектовЕГАИС - вид выгружаемого документа,
//  ДанныеДляВыгрузки   - Структура - необходимые данные для выгрузки конкретного объекта.
//
// Возвращаемое значение:
//   Строка   - текст XML-сообщения, выгружаемого в ЕГАИС.
//
Функция ТекстXMLВыгрузкиДокумента(ТранспортныйМодуль, ВидДокумента, ДанныеДляВыгрузки) Экспорт

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ns:Documents");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(Справочники.ВидыОбъектовЕГАИС.ДокументыЕГАИС.ПрефиксПространстваИмен,
		Справочники.ВидыОбъектовЕГАИС.ДокументыЕГАИС.ПространствоИмен);
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(Справочники.ВидыОбъектовЕГАИС.Организации.ПрефиксПространстваИмен,
		Справочники.ВидыОбъектовЕГАИС.Организации.ПространствоИмен);
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(Справочники.ВидыОбъектовЕГАИС.АлкогольнаяПродукция.ПрефиксПространстваИмен,
		Справочники.ВидыОбъектовЕГАИС.АлкогольнаяПродукция.ПространствоИмен);
	
	Если НЕ ПустаяСтрока(ВидДокумента.ПрефиксПространстваИмен) Тогда
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(ВидДокумента.ПрефиксПространстваИмен, ВидДокумента.ПространствоИмен);
	КонецЕсли;
	
	Владелец = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(Справочники.ВидыОбъектовЕГАИС.ДокументыЕГАИС.ПространствоИмен, "Владелец"));
	Владелец.ИдентификаторФСРАР = ТранспортныйМодуль.ИдентификаторФСРАР;
	
	Документ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(Справочники.ВидыОбъектовЕГАИС.ДокументыЕГАИС.ПространствоИмен, "Документ"));
	
	Если ВидДокумента = Справочники.ВидыОбъектовЕГАИС.ЗапросАлкогольнойПродукции Тогда
		Документ.ЗапросАлкогольнойПродукции = ПреобразоватьВXDTOЗапросКлассификатора(ВидДокумента, ДанныеДляВыгрузки);
		
	ИначеЕсли ВидДокумента = Справочники.ВидыОбъектовЕГАИС.ЗапросОрганизаций Тогда
		Документ.ЗапросОрганизаций = ПреобразоватьВXDTOЗапросКлассификатора(ВидДокумента, ДанныеДляВыгрузки);
		
	ИначеЕсли ВидДокумента = Справочники.ВидыОбъектовЕГАИС.ЗапросОстатков Тогда
		Документ.ЗапросОстатков = "";
		
	ИначеЕсли ВидДокумента = Справочники.ВидыОбъектовЕГАИС.АктПодтвержденияТТН Тогда
		Документ.АктПодтвержденияТТН = ПреобразоватьВXDTOАктПодтвержденияТТН(ВидДокумента, ДанныеДляВыгрузки);
		
	КонецЕсли;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Владелец, "Owner");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Документ, "Document");
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();

КонецФункции // ТекстXMLВыгрузкиДокумента()

// Функция возвращает текст XML, который нужно выгрузить в ЕГАИС.
//
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыОбъектовЕГАИС - вид объекта Чек,
//  ШапкаЧека    - Структура - общие данные чека,
//  СтрокиЧека   - Массив - состав чека, элемент массива - Структура,
//  ТекстОшибки  - Строка - если при формировании текста XML произошла ошибка, в переменную вернется текст ошибки.
//
// Возвращаемое значение:
//   Строка - текст XML-сообщения, выгружаемого в ЕГАИС.
//
Функция ТекстXMLВыгрузкиЧека(ВидДокумента, ШапкаЧека, СтрокиЧека, ТекстОшибки = "") Экспорт

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЧекДляПередачи = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ВидДокумента.ПространствоИмен, "Чек"));
	
	Попытка
		ЗаполнитьЗначенияСвойств(ЧекДляПередачи, ШапкаЧека,, "ДатаВремяЧека, КПП");
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка формирования файла чека.'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			НСтр("ru = 'Ошибка формирования файла чека.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат "";
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ШапкаЧека.КПП) Тогда
		ЧекДляПередачи.КПП = ШапкаЧека.КПП;
	КонецЕсли;
	
	ЧекДляПередачи.ДатаВремяЧека = Формат(ШапкаЧека.ДатаВремяЧека, "ДФ=ddMMyyHHmm");
	
	Для каждого СтрокаЧека Из СтрокиЧека Цикл
		
		Если ПустаяСтрока(СтрокаЧека.ШтрихкодМарки) Тогда
			ЭлементЧека = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ВидДокумента.ПространствоИмен, "ЧекЭлементБезМарки"));
			ИсключаемыеСвойства = "Цена, Объем, Количество, Крепость";
		Иначе
			ЭлементЧека = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ВидДокумента.ПространствоИмен, "ЧекЭлемент"));
			ИсключаемыеСвойства = "Цена, Объем";
		КонецЕсли;
		
		Попытка
			ЗаполнитьЗначенияСвойств(ЭлементЧека, СтрокаЧека,, ИсключаемыеСвойства);
		Исключение
			ТекстОшибки = НСтр("ru = 'Ошибка формирования файла чека.'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				НСтр("ru = 'Ошибка формирования файла чека.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат "";
		КонецПопытки;
		
		ЭлементЧека.Цена = Формат(?(ШапкаЧека.Свойство("Возврат") И ШапкаЧека.Возврат, -1, 1) * СтрокаЧека.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0");
		ЭлементЧека.Объем = Формат(СтрокаЧека.Объем, "ЧДЦ=4; ЧРД=.; ЧГ=0");
		
		Если ПустаяСтрока(СтрокаЧека.ШтрихкодМарки) Тогда
			ЭлементЧека.Количество = Формат(СтрокаЧека.Количество, "ЧГ=0");
			ЭлементЧека.Крепость = Формат(СтрокаЧека.Крепость, "ЧДЦ=4; ЧРД=.; ЧГ=0");
			
			ЧекДляПередачи.ЭлементыБезМарки.Добавить(ЭлементЧека);
		Иначе
			ЧекДляПередачи.Элементы.Добавить(ЭлементЧека);
		КонецЕсли;
		
	КонецЦикла;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ЧекДляПередачи, "Cheque");
	
	ТекстXML = ЗаписьXML.Закрыть();
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns=""" + ВидДокумента.ПространствоИмен + """ ", "");
	
	Возврат ТекстXML;

КонецФункции // ТекстXMLВыгрузкиЧека()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает объект XDTO, соответствующий переданному типу запроса.
//
// Параметры:
//  ВидЗапроса        - СправочникСсылка.ВидыОбъектовЕГАИС - вид объекта запроса классификатора,
//  ДанныеДляВыгрузки - Структура - необходимые данные ИБ для получения объекта XDTO.
//
// Возвращаемое значение:
//   ОбъектXDTO   - преобразованный объект XDTO.
//
Функция ПреобразоватьВXDTOЗапросКлассификатора(ВидЗапроса, ДанныеДляВыгрузки)

	ЗапросСправочникаXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ВидЗапроса.ПространствоИмен, "Запрос"));
	
	ПараметрыЗапросаXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ВидЗапроса.ПространствоИмен, "Параметры"));
	
	ПараметрXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ВидЗапроса.ПространствоИмен, "ПараметрыЭлемент"));
	ПараметрXDTO.Имя = "ИНН";
	ПараметрXDTO.Значение = ДанныеДляВыгрузки.ИНН;
	
	ПараметрыЗапросаXDTO.Элементы.Добавить(ПараметрXDTO);
	ЗапросСправочникаXDTO.Параметры.Добавить(ПараметрыЗапросаXDTO);
	
	Возврат ЗапросСправочникаXDTO;

КонецФункции // ПреобразоватьВXDTOЗапросКлассификатора()

// Функция возвращает объект XDTO, соответствующий акту подтверждения ТТН.
//
// Параметры:
//  ВидДокумента      - СправочникСсылка.ВидыОбъектовЕГАИС - вид объекта Акт подтверждения ТТН,
//  ДанныеДляВыгрузки - Структура - необходимые данные ИБ для получения объекта XDTO:
//       ТТН                  - ДокументСсылка.ТоварноТранспортнаяНакладнаяЕГАИС - ссылка на загруженную ранее ТТН,
//       Отказ                - Булево - признак отказа от ТТН,
//       ТаблицаТоваров       - Массив - массив строк с фактическим количеством.
//                                       При отсутствии расхождений или при отказе от ТТН, не содержит элементов.
//                                       Элемент массива - структура с ключами:
//             ИдентификаторСтроки - Строка - идентификатор строки ТТН,
//             НомерСправкиБ       - Строка - регистрационный номер справки "Б",
//             КоличествоФакт      - Число  - фактически принятое количество.
//       Номер                - Строка - номер акта подтверждения,
//       Дата                 - Дата   - дата акта подтверждения,
//       Комментарий          - Строка - произвольный комментарий к акту.
//
// Возвращаемое значение:
//   ОбъектXDTO   - преобразованный объект XDTO.
//
Функция ПреобразоватьВXDTOАктПодтвержденияТТН(ВидДокумента, ДанныеДляВыгрузки)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварноТранспортнаяНакладнаяЕГАИС.Дата КАК Дата,
	|	ТоварноТранспортнаяНакладнаяЕГАИС.Номер КАК Номер,
	|	ТоварноТранспортнаяНакладнаяЕГАИС.ИдентификаторТТН КАК ИдентификаторТТН
	|ИЗ
	|	Документ.ТоварноТранспортнаяНакладнаяЕГАИС КАК ТоварноТранспортнаяНакладнаяЕГАИС
	|ГДЕ
	|	ТоварноТранспортнаяНакладнаяЕГАИС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеДляВыгрузки.ТТН);
	
	ДанныеТТН = Запрос.Выполнить().Выбрать();
	ДанныеТТН.Следующий();
	
	АктXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ВидДокумента.ПространствоИмен, "АктПодтвержденияТТН"));
	
	ШапкаАктаXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ВидДокумента.ПространствоИмен, "Шапка"));
	СодержимоеАктаXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ВидДокумента.ПространствоИмен, "Содержимое"));
	
	Если ДанныеДляВыгрузки.Свойство("Отказ") И ДанныеДляВыгрузки.Отказ = Истина Тогда
		ШапкаАктаXDTO.Статус = "Rejected";
	Иначе
		ШапкаАктаXDTO.Статус = "Accepted";
	КонецЕсли;
	
	ШапкаАктаXDTO.Номер = ?(ПустаяСтрока(ДанныеДляВыгрузки.Номер), ДанныеТТН.Номер, ДанныеДляВыгрузки.Номер);
	ШапкаАктаXDTO.Дата = ?(ЗначениеЗаполнено(ДанныеДляВыгрузки.Дата), ДанныеДляВыгрузки.Дата, ДанныеТТН.Дата);
	ШапкаАктаXDTO.ИдентификаторТТН = ДанныеТТН.ИдентификаторТТН;
	
	Если НЕ ПустаяСтрока(ДанныеДляВыгрузки.Комментарий) Тогда
		ШапкаАктаXDTO.Комментарий = Лев(ДанныеДляВыгрузки.Комментарий, 500);
	КонецЕсли;
	
	Для каждого СтрокаТовары Из ДанныеДляВыгрузки.ТаблицаТоваров Цикл
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ВидДокумента.ПространствоИмен, "СодержимоеЭлемент"));
		ЭлементСодержимогоXDTO.ИдентификаторСтроки = СтрокаТовары.ИдентификаторСтроки;
		ЭлементСодержимогоXDTO.НомерСправкиБ       = СтрокаТовары.НомерСправкиБ;
		ЭлементСодержимогоXDTO.КоличествоФакт      = СтрокаТовары.КоличествоФакт;
		
		СодержимоеАктаXDTO.Элементы.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
	
	АктXDTO.Идентификатор = Строка(ДанныеДляВыгрузки.ТТН.УникальныйИдентификатор());
	АктXDTO.Шапка = ШапкаАктаXDTO;
	АктXDTO.Содержимое = СодержимоеАктаXDTO;
	
	Возврат АктXDTO;
	
КонецФункции // ПреобразоватьВXDTOАктПодтвержденияТТН()

// Функция возвращает таблицу значений классификатора видов алкогольной продукции.
//
Функция КлассификаторВидовАлкогольнойПродукции()
	
	ТаблицаВидовПродукции = Новый ТаблицаЗначений;
	
	Макет = ПолучитьОбщийМакет("КлассификаторВидовАлкогольнойПродукции");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Макет.ПолучитьТекст());
	
	Если Не ЧтениеXML.Прочитать() Тогда
		ВызватьИсключение НСтр("ru = 'Пустой XML'");
	ИначеЕсли ЧтениеXML.Имя <> "Items" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
	КонецЕсли;
	
	ИменаКолонок = СтрЗаменить(ЧтениеXML.ПолучитьАтрибут("Columns"), ",", Символы.ПС);
	КоличествоКолонок = СтрЧислоСтрок(ИменаКолонок);
	
	Для Сч = 1 По КоличествоКолонок Цикл
		ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
		
		Если ИмяКолонки = "Маркируемый" Тогда
			ТаблицаВидовПродукции.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Булево"));
		Иначе
			ТаблицаВидовПродукции.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка"));
		КонецЕсли;
	КонецЦикла;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Items" Тогда
			Прервать;
		ИначеЕсли ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли ЧтениеXML.Имя <> "Item" Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
		КонецЕсли;
		
		новСтр = ТаблицаВидовПродукции.Добавить();
		Для Сч = 1 По КоличествоКолонок Цикл
			ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
			
			Если ИмяКолонки = "Маркируемый" Тогда
				новСтр[Сч-1] = Булево(Число(ЧтениеXML.ПолучитьАтрибут(ИмяКолонки)));
			Иначе
				новСтр[Сч-1] = ЧтениеXML.ПолучитьАтрибут(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаВидовПродукции.Сортировать(ТаблицаВидовПродукции.Колонки[0].Имя + " Возр");
	
	Возврат ТаблицаВидовПродукции;
	
КонецФункции // КлассификаторВидовАлкогольнойПродукции()

// Загружает организацию в базу.
//
// Параметры:
//  ДанныеОрганизации       - ОбъектXDTO - полученные данные по организации из ТМ ЕГАИС,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
// Возвращаемое значение:
//   СправочникСсылка.КлассификаторОрганизацийЕГАИС - созданная (найденная) организация.
//
Функция ЗагрузитьОрганизацию(ДанныеОрганизации, ДополнительныеПараметры)
	
	// Соответствие между реквизитами классификатора организаций (Ключ) и свойствами объекта XDTO (Значение)
	СоответствияРеквизитов = Новый Соответствие;
	СоответствияРеквизитов.Вставить("Наименование"       , "Наименование");
	СоответствияРеквизитов.Вставить("НаименованиеПолное" , "НаименованиеПолное");
	СоответствияРеквизитов.Вставить("ИНН"                , "ИНН");
	СоответствияРеквизитов.Вставить("КПП"                , "КПП");
	СоответствияРеквизитов.Вставить("КодСтраны"          , "Адрес/КодСтраны");
	СоответствияРеквизитов.Вставить("КодРегиона"         , "Адрес/КодРегиона");
	СоответствияРеквизитов.Вставить("ПочтовыйИндекс"     , "Адрес/ПочтовыйИндекс");
	СоответствияРеквизитов.Вставить("ПредставлениеАдреса", "Адрес/Представление");
	
	НайденнаяОрганизация = Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоКоду(ДанныеОрганизации.Код);
	
	Если НЕ ЗначениеЗаполнено(НайденнаяОрганизация) Тогда
		Организация = Справочники.КлассификаторОрганизацийЕГАИС.СоздатьЭлемент();
		Организация.Код = ДанныеОрганизации.Код;
	Иначе
		Организация = НайденнаяОрганизация.ПолучитьОбъект();
	КонецЕсли;
	
	Для каждого КлючЗначение Из СоответствияРеквизитов Цикл
		
		ЗначениеСвойстваНовое = ДанныеОрганизации.Получить(КлючЗначение.Значение);
		Если НЕ ЗначениеЗаполнено(ЗначениеСвойстваНовое) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеСвойстваТекущее = Организация[КлючЗначение.Ключ];
		Если ТипЗнч(ЗначениеСвойстваТекущее) = Тип("Число") Тогда
			Если КлючЗначение.Ключ = "КодСтраны" Тогда
				ЗначениеСвойстваТекущее = Формат(ЗначениеСвойстваТекущее, "ЧЦ=3; ЧВН=; ЧГ=0");
			ИначеЕсли КлючЗначение.Ключ = "КодРегиона" Тогда
				ЗначениеСвойстваТекущее = Формат(ЗначениеСвойстваТекущее, "ЧЦ=2; ЧВН=; ЧГ=0");
			ИначеЕсли КлючЗначение.Ключ = "ПочтовыйИндекс" Тогда
				ЗначениеСвойстваТекущее = Формат(ЗначениеСвойстваТекущее, "ЧЦ=6; ЧВН=; ЧГ=0");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеСвойстваТекущее = ЗначениеСвойстваНовое Тогда
			Организация[КлючЗначение.Ключ] = ЗначениеСвойстваНовое;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Организация.Модифицированность() Тогда
		ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеОрганизации(Организация, ДополнительныеПараметры);
		Организация.Записать();
	КонецЕсли;
	
	Возврат Организация.Ссылка;
	
КонецФункции // ЗагрузитьОрганизацию()

// Загружает алкогольную продукцию в базу.
//
// Параметры:
//  СписокАлкогольнойПродукции  - СписокXDTO, Массив - полученные данные по алкогольной продукции из ТМ ЕГАИС,
//  ДополнительныеПараметры     - Произвольный - параметры прикладной конфигурации.
//
// Возвращаемое значение:
//   Соответствие - созданная (найденная) алкогольная продукция.
//
Функция ЗагрузитьАлкогольнуюПродукцию(СписокАлкогольнойПродукции, ДополнительныеПараметры)

	КлассификаторВидовПродукции = КлассификаторВидовАлкогольнойПродукции();
	
	ИмяКлассификатора = ИнтеграцияЕГАИСПереопределяемый.СправочникВидовАлкогольнойПродукции();
	ИмяКодаВида       = ИнтеграцияЕГАИСПереопределяемый.ИмяКодаВидаПродукции();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлассификаторВидовПродукции", КлассификаторВидовПродукции);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(КлассификаторВидовПродукции.Код КАК Строка(3)) КАК Код,
	|	КлассификаторВидовПродукции.Наименование КАК Наименование,
	|	КлассификаторВидовПродукции.Маркируемый КАК Маркируемый
	|ПОМЕСТИТЬ КлассификаторВидовПродукции
	|ИЗ
	|	&КлассификаторВидовПродукции КАК КлассификаторВидовПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассификаторВидовПродукции.Код,
	|	КлассификаторВидовПродукции.Наименование,
	|	КлассификаторВидовПродукции.Маркируемый,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукцииЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник." + ИмяКлассификатора + ".ПустаяСсылка)) КАК Ссылка
	|ИЗ
	|	КлассификаторВидовПродукции КАК КлассификаторВидовПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяКлассификатора + " КАК ВидыАлкогольнойПродукцииЕГАИС
	|		ПО КлассификаторВидовПродукции.Код = ВидыАлкогольнойПродукцииЕГАИС."+ИмяКодаВида;
	
	КлассификаторВидовПродукции = Запрос.Выполнить().Выгрузить();
	КлассификаторВидовПродукции.Индексы.Добавить("Код");
	
	ТаблицаАлкогольнойПродукции = Новый ТаблицаЗначений;
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Код"               , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Наименование"      , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000)));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Объем"             , Новый ОписаниеТипов("Число"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Крепость"          , Новый ОписаниеТипов("Число"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Производитель"     , Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Импортер"          , Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("ВидПродукции"      , Новый ОписаниеТипов("СправочникСсылка." + ИмяКлассификатора));
	
	ВидыЛицензий = Новый Соответствие;
	ВидыЛицензий.Вставить("АП", Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция);
	ВидыЛицензий.Вставить("ССП", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция);
	ВидыЛицензий.Вставить("ССНП", Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция);
	ВидыЛицензий.Вставить("Спирт", Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт);
	
	МассивКодов = Новый Массив;
	
	Для Каждого ДанныеАлкогольнойПродукции Из СписокАлкогольнойПродукции Цикл
		
		Если МассивКодов.Найти(ДанныеАлкогольнойПродукции.Код) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивКодов.Добавить(ДанныеАлкогольнойПродукции.Код);
		
		СтрокаТаблицы = ТаблицаАлкогольнойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеАлкогольнойПродукции, "Код, Наименование, НаименованиеПолное, Объем, Крепость");
		
		Если ПустаяСтрока(СтрокаТаблицы.Наименование) И НЕ ПустаяСтрока(СтрокаТаблицы.НаименованиеПолное) Тогда
			СтрокаТаблицы.Наименование = СтрокаТаблицы.НаименованиеПолное;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаТаблицы.НаименованиеПолное) И НЕ ПустаяСтрока(СтрокаТаблицы.Наименование) Тогда
			СтрокаТаблицы.НаименованиеПолное = СтрокаТаблицы.Наименование;
		КонецЕсли;
		
		Если ДанныеАлкогольнойПродукции.Производитель <> Неопределено Тогда
			СтрокаТаблицы.Производитель = ЗагрузитьОрганизацию(ДанныеАлкогольнойПродукции.Производитель, ДополнительныеПараметры);
		КонецЕсли;
		
		Если ДанныеАлкогольнойПродукции.Импортер <> Неопределено Тогда
			СтрокаТаблицы.Импортер = ЗагрузитьОрганизацию(ДанныеАлкогольнойПродукции.Импортер, ДополнительныеПараметры);
		КонецЕсли;
		
		СтрокаКлассификатора = КлассификаторВидовПродукции.Найти(ДанныеАлкогольнойПродукции.КодВидаПродукции, "Код");
		Если СтрокаКлассификатора <> Неопределено Тогда
			Если СтрокаКлассификатора.Ссылка.Пустая() Тогда
				ВидПродукции = Справочники[ИмяКлассификатора].СоздатьЭлемент();
				ВидПродукции.КодВидаПродукции = СтрокаКлассификатора.Код;
				ВидПродукции.Наименование = СтрокаКлассификатора.Наименование;
				ВидПродукции.ВидЛицензии = ВидыЛицензий[ДанныеАлкогольнойПродукции.Тип];
				ВидПродукции.Маркируемый = СтрокаКлассификатора.Маркируемый;
				ВидПродукции.Записать();
				
				СтрокаКлассификатора.Ссылка = ВидПродукции.Ссылка;
			Иначе
				РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКлассификатора.Ссылка, "ВидЛицензии,Маркируемый");
				Если РеквизитыВида.ВидЛицензии <> ВидыЛицензий[ДанныеАлкогольнойПродукции.Тип]
					ИЛИ РеквизитыВида.Маркируемый <> СтрокаКлассификатора.Маркируемый Тогда
					
					ВидПродукции = СтрокаКлассификатора.Ссылка.ПолучитьОбъект();
					ВидПродукции.ВидЛицензии = ВидыЛицензий[ДанныеАлкогольнойПродукции.Тип];
					ВидПродукции.Маркируемый = СтрокаКлассификатора.Маркируемый;
					ВидПродукции.Записать();
					
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицы.ВидПродукции = СтрокаКлассификатора.Ссылка;
		КонецЕсли;
	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаАлкогольнойПродукции.Код КАК Код,
	|	ТаблицаАлкогольнойПродукции.Наименование КАК Наименование,
	|	ТаблицаАлкогольнойПродукции.НаименованиеПолное КАК НаименованиеПолное,
	|	ТаблицаАлкогольнойПродукции.Объем КАК Объем,
	|	ТаблицаАлкогольнойПродукции.Крепость КАК Крепость,
	|	ТаблицаАлкогольнойПродукции.Производитель КАК Производитель,
	|	ТаблицаАлкогольнойПродукции.Импортер КАК Импортер,
	|	ТаблицаАлкогольнойПродукции.ВидПродукции КАК ВидПродукции
	|ПОМЕСТИТЬ ТаблицаАлкогольнойПродукции
	|ИЗ
	|	&ТаблицаАлкогольнойПродукции КАК ТаблицаАлкогольнойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАлкогольнойПродукции.Код,
	|	ТаблицаАлкогольнойПродукции.Наименование,
	|	ТаблицаАлкогольнойПродукции.НаименованиеПолное,
	|	ТаблицаАлкогольнойПродукции.Объем,
	|	ТаблицаАлкогольнойПродукции.Крепость,
	|	ТаблицаАлкогольнойПродукции.Производитель,
	|	ТаблицаАлкогольнойПродукции.Импортер,
	|	ТаблицаАлкогольнойПродукции.ВидПродукции,
	|	ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК Ссылка,
	|	ВЫБОР
	|		КОГДА КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка ЕСТЬ NULL 
	|				ИЛИ НЕ (ВЫРАЗИТЬ(ТаблицаАлкогольнойПродукции.Наименование КАК СТРОКА(100))) = (ВЫРАЗИТЬ(КлассификаторАлкогольнойПродукцииЕГАИС.Наименование КАК СТРОКА(100)))
	|					И НЕ ТаблицаАлкогольнойПродукции.Наименование = """"
	|				ИЛИ НЕ (ВЫРАЗИТЬ(ТаблицаАлкогольнойПродукции.НаименованиеПолное КАК СТРОКА(1000))) = (ВЫРАЗИТЬ(КлассификаторАлкогольнойПродукцииЕГАИС.НаименованиеПолное КАК СТРОКА(1000)))
	|					И НЕ ТаблицаАлкогольнойПродукции.НаименованиеПолное = """"
	|				ИЛИ НЕ ТаблицаАлкогольнойПродукции.Объем = КлассификаторАлкогольнойПродукцииЕГАИС.Объем
	|					И НЕ ТаблицаАлкогольнойПродукции.Объем = 0
	|				ИЛИ НЕ ТаблицаАлкогольнойПродукции.Крепость = КлассификаторАлкогольнойПродукцииЕГАИС.Крепость
	|					И НЕ ТаблицаАлкогольнойПродукции.Крепость = 0
	|				ИЛИ НЕ ТаблицаАлкогольнойПродукции.Производитель = КлассификаторАлкогольнойПродукцииЕГАИС.Производитель
	|					И НЕ ТаблицаАлкогольнойПродукции.Производитель = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|				ИЛИ НЕ ТаблицаАлкогольнойПродукции.Импортер = КлассификаторАлкогольнойПродукцииЕГАИС.Импортер
	|					И НЕ ТаблицаАлкогольнойПродукции.Импортер = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|				ИЛИ НЕ ТаблицаАлкогольнойПродукции.ВидПродукции = КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции
	|					И НЕ ТаблицаАлкогольнойПродукции.ВидПродукции = ЗНАЧЕНИЕ(Справочник." + ИмяКлассификатора + ".ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьИзменения
	|ИЗ
	|	ТаблицаАлкогольнойПродукции КАК ТаблицаАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТаблицаАлкогольнойПродукции.Код = КлассификаторАлкогольнойПродукцииЕГАИС.Код";
	
	Запрос.УстановитьПараметр("ТаблицаАлкогольнойПродукции", ТаблицаАлкогольнойПродукции);
	
	СозданныеЭлементы = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ЕстьИзменения Тогда
			СозданныеЭлементы.Вставить(Выборка.Код, Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Ссылка.Пустая() Тогда
			АлкогольнаяПродукция = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.СоздатьЭлемент();
		Иначе
			АлкогольнаяПродукция = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		Для каждого Колонка Из ТаблицаАлкогольнойПродукции.Колонки Цикл
			Если ЗначениеЗаполнено(Выборка[Колонка.Имя]) Тогда
				АлкогольнаяПродукция[Колонка.Имя] = Выборка[Колонка.Имя];
			КонецЕсли;
		КонецЦикла;
		
		ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеАлкогольнойПродукции(АлкогольнаяПродукция, ДополнительныеПараметры);
		
		АлкогольнаяПродукция.Записать();
		
		СозданныеЭлементы.Вставить(Выборка.Код, АлкогольнаяПродукция.Ссылка);
	КонецЦикла;
	
	Возврат СозданныеЭлементы;
	
КонецФункции // ЗагрузитьАлкогольнуюПродукцию()

// Формирует уникальный идентификатор из переданной строки добавлением лидирующих нулей.
//
Функция СформироватьУникальныйИдентификатор(ИсходнаяСтрока, ИмяСправочника)
	
	СтрокаЧисел = "";
	Для Сч = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекСимвол = Сред(ИсходнаяСтрока, Сч, 1);
		Если НЕ Найти("0123456789", ТекСимвол) = 0 Тогда
			СтрокаЧисел = СтрокаЧисел + ТекСимвол;
		КонецЕсли;
	КонецЦикла;
	
	ИмяКлассификатора = ИнтеграцияЕГАИСПереопределяемый.СправочникВидовАлкогольнойПродукции();
	
	Префиксы = Новый Соответствие;
	Префиксы.Вставить("КлассификаторАлкогольнойПродукцииЕГАИС", "00");
	Префиксы.Вставить("КлассификаторОрганизацийЕГАИС"         , "01");
	Префиксы.Вставить(ИмяКлассификатора                       , "02");
	
	Попытка
		Строка32 = Префиксы[ИмяСправочника] + Формат(Число(СтрокаЧисел), "ЧЦ=30; ЧВН=; ЧГ=0");
	Исключение
		Возврат Новый УникальныйИдентификатор;
	КонецПопытки;
	
	СтрокаGUID = Лев(Строка32, 8) + "-" + Сред(Строка32, 9, 4) + "-" + Сред(Строка32, 13, 4) + "-" + Сред(Строка32, 17, 4) + "-" + Сред(Строка32, 21, 12);
	
	Возврат Новый УникальныйИдентификатор(СтрокаGUID);
	
КонецФункции // СформироватьУникальныйИдентификатор()

// Получает данные ТТН в виде структуры для последующей загрузки в базу.
//
// Параметры:
//  ТТН                     - ОбъектXDTO - загружаемая ТТН {http://fsrar.ru/WEGAIS/TTNSingle}ТТН,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
// Возвращаемое значение:
//   Структура   - данные ТТН, передаваемый в переопределяемый модуль для загрузки.
//
Функция ПолучитьДанныеТТН(ТТН, ДополнительныеПараметры)

	ДанныеТТН = Новый Структура;
	ДанныеТТН.Вставить("Идентификатор"   , "");                                                       // Идентификатор накладной (клиентский, к заполнению необязательный)
	ДанныеТТН.Вставить("ИдентификаторТТН", "");                                                       // Идентификатор накладной в системе (присвоенный). Требуется для подтверждения ТТН
	ДанныеТТН.Вставить("Возврат"         , Ложь);                                                     // Признак накладной на возврат
	ДанныеТТН.Вставить("Упакована"       , Истина);                                                   // Признак упаковки товаров ТТН
	ДанныеТТН.Вставить("Номер"           , "");                                                       // Номер документа
	ДанныеТТН.Вставить("Дата"            , '00010101');                                               // Дата составления документа
	ДанныеТТН.Вставить("ДатаОтгрузки"    , '00010101');                                               // Дата отгрузки продукции
	ДанныеТТН.Вставить("Грузоотправитель", Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка()); // Организация-грузоотправитель
	ДанныеТТН.Вставить("Грузополучатель" , Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка()); // Организация-грузополучатель
	ДанныеТТН.Вставить("Поставщик"       , Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка()); // Организация-поставщик
	ДанныеТТН.Вставить("Основание"       , "");                                                       // Основание накладной
	ДанныеТТН.Вставить("Комментарий"     , "");                                                       // Комментарий к накладной
	ДанныеТТН.Вставить("ТаблицаТоваров"  , Новый Массив);                                             // Массив строк ТТН
	
	// Параметры доставки
	ДанныеТТН.Вставить("ТипДоставки"     , "");                                                       // Тип перевозки
	ДанныеТТН.Вставить("Перевозчик"      , "");                                                       // Название компании перевозчика
	ДанныеТТН.Вставить("Автомобиль"      , "");                                                       // Название транспортного средства
	ДанныеТТН.Вставить("Прицеп"          , "");                                                       // Прицеп транспортного средства
	ДанныеТТН.Вставить("Заказчик"        , "");                                                       // Название компании заказчика
	ДанныеТТН.Вставить("Водитель"        , "");                                                       // Водитель
	ДанныеТТН.Вставить("ПунктПогрузки"   , "");                                                       // Место погрузки
	ДанныеТТН.Вставить("ПунктРазгрузки"  , "");                                                       // Место разгрузки
	ДанныеТТН.Вставить("Перенаправление" , "");                                                       // Перенаправление
	ДанныеТТН.Вставить("Экспедитор"      , "");                                                       // Экспедитор
	
	ДанныеТТН.Идентификатор = ТТН.Идентификатор;
	
	ЗаполнитьЗначенияСвойств(ДанныеТТН, ТТН.Шапка,, "Грузоотправитель, Грузополучатель, Поставщик");
	
	ДанныеТТН.Возврат = Найти(ТТН.Шапка.ТипТТН, "Return") <> 0;
	ДанныеТТН.Упакована = ТТН.Шапка.ТипУпаковки = "Packed";
	ДанныеТТН.Грузоотправитель = ЗагрузитьОрганизацию(ТТН.Шапка.Грузоотправитель, ДополнительныеПараметры);
	ДанныеТТН.Грузополучатель = ЗагрузитьОрганизацию(ТТН.Шапка.Грузополучатель, ДополнительныеПараметры);
	
	Если ТТН.Шапка.Поставщик <> Неопределено Тогда
		ДанныеТТН.Поставщик = ЗагрузитьОрганизацию(ТТН.Шапка.Поставщик, ДополнительныеПараметры);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеТТН, ТТН.Шапка.Доставка);
	
	МассивАлкогольнойПродукции = Новый Массив;
	
	Для каждого ЭлементСодержимого Из ТТН.Содержимое.Элементы Цикл
		
		Если МассивАлкогольнойПродукции.Найти(ЭлементСодержимого.АлкогольнаяПродукция) = Неопределено Тогда
			МассивАлкогольнойПродукции.Добавить(ЭлементСодержимого.АлкогольнаяПродукция);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагруженныеПозиции = ЗагрузитьАлкогольнуюПродукцию(МассивАлкогольнойПродукции, ДополнительныеПараметры);
	
	Для каждого ЭлементСодержимого Из ТТН.Содержимое.Элементы Цикл
		
		СтрокаТТН = Новый Структура;
		СтрокаТТН.Вставить("АлкогольнаяПродукция"   , ЗагруженныеПозиции[ЭлементСодержимого.АлкогольнаяПродукция.Код]); // Элемент справочника КлассификаторАлкогольнойПродукцииЕГАИС
		СтрокаТТН.Вставить("ИдентификаторУпаковки"  , ЭлементСодержимого.ИдентификаторУпаковки);                        // Идентификатор упаковки
		СтрокаТТН.Вставить("Количество"             , ЭлементСодержимого.Количество);                                   // Количество продукции в ТТН
		СтрокаТТН.Вставить("Цена"                   , ЭлементСодержимого.Цена);                                         // Цена продукции в ТТН
		СтрокаТТН.Вставить("НомерПартии"            , ЭлементСодержимого.НомерПартии);                                  // Номер партии продукции
		СтрокаТТН.Вставить("ИдентификаторСтроки"    , ЭлементСодержимого.ИдентификаторСтроки);                          // Идентификатор позиции внутри накладной
		СтрокаТТН.Вставить("НомерСправкиА"          , ЭлементСодержимого.СправкаА.РегистрационныйНомер);                // Номер справки "А"
		СтрокаТТН.Вставить("НомерСправкиБПоставщика", ЭлементСодержимого.СправкаБ.Элементы.РегистрационныйНомер);       // Номер справки "Б" предыдущей поставки
		СтрокаТТН.Вставить("НомерСправкиБ"          , "");                                                              // Номер справки "Б" текущей поставки
		СтрокаТТН.Вставить("ДиапазоныНомеровМарок"  , Новый Массив);                                                    // Массив диапазонов номеров
		
		Маркировка = ЭлементСодержимого.СправкаБ.Элементы.Маркировка;
		Если Маркировка <> Неопределено Тогда
			Для каждого ЭлементДиапазона Из Маркировка.ДиапазоныНомеров.Элементы Цикл
				ДиапазонНомеров = Новый Структура;
				ДиапазонНомеров.Вставить("ТипМарки", Маркировка.ТипМарки);                   // Тип марки
				ДиапазонНомеров.Вставить("Идентификатор", ЭлементДиапазона.Идентификатор);   // Идентификатор диапазона в списке
				ДиапазонНомеров.Вставить("Серия", ЭлементДиапазона.Серия);                   // Серия
				ДиапазонНомеров.Вставить("НачальныйНомер", ЭлементДиапазона.НачальныйНомер); // Начальный номер
				ДиапазонНомеров.Вставить("КонечныйНомер", ЭлементДиапазона.КонечныйНомер);   // Конечный номер
				
				СтрокаТТН.ДиапазоныНомеровМарок.Добавить(ДиапазонНомеров);
			КонецЦикла;
		КонецЕсли;
		
		ДанныеТТН.ТаблицаТоваров.Добавить(СтрокаТТН);
		
	КонецЦикла;
	
	Возврат ДанныеТТН;

КонецФункции // ПолучитьДанныеТТН()

// Процедура вызывается при загрузке ТТН.
//
Процедура СоздатьТТН(ДанныеТТН, РезультатЗагрузкиТТН, ДополнительныеПараметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗагрузкиТТН.Результат = Ложь;
	
	Если ДанныеТТН.ТаблицаТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТоварноТранспортнаяНакладнаяЕГАИС = Документы.ТоварноТранспортнаяНакладнаяЕГАИС.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ТоварноТранспортнаяНакладнаяЕГАИС, ДанныеТТН,, "Номер, Дата");
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		
		Если ДополнительныеПараметры.Свойство("Организация") Тогда
			 ТоварноТранспортнаяНакладнаяЕГАИС.Организация = ДополнительныеПараметры.Организация;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("Склад") Тогда
			 ТоварноТранспортнаяНакладнаяЕГАИС.Склад = ДополнительныеПараметры.Склад;
		КонецЕсли;

	КонецЕсли;
	
	ТоварноТранспортнаяНакладнаяЕГАИС.ДатаВходящая  = ДанныеТТН.Дата;
	ТоварноТранспортнаяНакладнаяЕГАИС.НомерВходящий = ДанныеТТН.Номер;
	ТоварноТранспортнаяНакладнаяЕГАИС.Дата = ТекущаяДатаСеанса();
	
	Для каждого СтрокаТоварыТТН Из ДанныеТТН.ТаблицаТоваров Цикл
		
		СтрокаТовары = ТоварноТранспортнаяНакладнаяЕГАИС.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТоварыТТН);
		СтрокаТовары.Сумма = СтрокаТовары.Количество * СтрокаТоварыТТН.Цена;
		
	КонецЦикла;
	
	ТоварноТранспортнаяНакладнаяЕГАИС.СуммаДокумента = ТоварноТранспортнаяНакладнаяЕГАИС.Товары.Итог("Сумма");
	
	ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеТТН(ТоварноТранспортнаяНакладнаяЕГАИС, РезультатЗагрузкиТТН, ДополнительныеПараметры);
	
	Если ТоварноТранспортнаяНакладнаяЕГАИС.Модифицированность() Тогда
		Попытка
			ТоварноТранспортнаяНакладнаяЕГАИС.Записать();
		Исключение
			РезультатЗагрузкиТТН.Результат = Ложь;
			РезультатЗагрузкиТТН.ОписаниеОшибки = НСтр("ru = 'Ошибка записи ТТН, полученной из ЕГАИС.'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				НСтр("ru = 'Ошибка записи ТТН, полученной из ЕГАИС.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	РезультатЗагрузкиТТН.ДокументСсылка = ТоварноТранспортнаяНакладнаяЕГАИС.Ссылка;
	РезультатЗагрузкиТТН.Результат = Истина;
	
КонецПроцедуры // СоздатьТТН()

// Формирует уникальный идентификатор для нового элемента справочника.
//
// Параметры:
//  Источник - СправочникОбъект - записываемый элемент справочника,
//  Отказ - Булево - признак отказа от записи.
//
Процедура СформироватьИдентификаторОбъектаРИБПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		НовыйИдентификатор = Неопределено;
		ИмяСправочника = Источник.Метаданные().Имя;
		
		Если ЗначениеЗаполнено(Источник.Код) Тогда
			НовыйИдентификатор = СформироватьУникальныйИдентификатор(Источник.Код, ИмяСправочника);
		КонецЕсли;
		
		Если НовыйИдентификатор <> Неопределено Тогда
			НоваяСсылка = Справочники[ИмяСправочника].ПолучитьСсылку(НовыйИдентификатор);
			Источник.УстановитьСсылкуНового(НоваяСсылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет статус ТТН при возникновении ошибки запроса в ЕГАИС.
//
// Параметры:
//  Идентификатор           - Строка - идентификатор запроса,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
Процедура ИзменитьСтатусТТНПриОшибке(Идентификатор, ДополнительныеПараметры)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварноТранспортнаяНакладнаяЕГАИС.Ссылка КАК Ссылка,
	|	ТоварноТранспортнаяНакладнаяЕГАИС.СтатусОбработкиТТН_ЕГАИС КАК СтатусОбработкиТТН_ЕГАИС
	|ИЗ
	|	Документ.ТоварноТранспортнаяНакладнаяЕГАИС КАК ТоварноТранспортнаяНакладнаяЕГАИС
	|ГДЕ
	|	ТоварноТранспортнаяНакладнаяЕГАИС.ИдентификаторПоследнегоЗапроса = &ИдентификаторПоследнегоЗапроса";
	
	Запрос.УстановитьПараметр("ИдентификаторПоследнегоЗапроса", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	
		ТТН_Объект = Выборка.Ссылка.ПолучитьОбъект();
		ТТН_Объект.ЕстьОшибкиПередачиЗапроса = Истина;
		
		Если Выборка.СтатусОбработкиТТН_ЕГАИС = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ПереданОтказВЕГАИС Тогда
			ТТН_Объект.СтатусОбработкиТТН_ЕГАИС = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ПустаяСсылка();
		ИначеЕсли Выборка.СтатусОбработкиТТН_ЕГАИС = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ПереданОтветВЕГАИС Тогда
			ТТН_Объект.СтатусОбработкиТТН_ЕГАИС = Перечисления.СтатусыОбработкиТТН_ЕГАИС.Обрабатывается;
		КонецЕсли;
		
		ТТН_Объект.Записать();
		
		ИнтеграцияЕГАИСПереопределяемый.ПриИзмененииСтатусаТТНПриОшибке(Выборка.Ссылка, ДополнительныеПараметры);
	
	КонецЕсли;

КонецПроцедуры // ИзменитьСтатусТТНПриОшибке()

// Заполняет структуру результата обработки ответа сервера ЕГАИС на запрос.
//
Функция РезультатОбработкиВходящегоДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("Результат"     , Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ДокументСсылка", Неопределено);
	Результат.Вставить("ВидОбъекта"    , Неопределено);
	
	Возврат Результат;
	
КонецФункции // РезультатОбработкиВходящегоДокумента()
