// Процедура выполняет проведение по партиям
//
Процедура ПроведениеПоПартиямНаСервере() Экспорт
	
	//Закомментировал Вик 2020_11_18 и изменил кол-во с 1000 на 100
	
	// НЧАН
	//Если ТекущаяДата() < Константы.ЛК_Счетчик_Дата_1.Получить() Тогда
	//	Возврат;
	//КонецЕсли;		
	// КЧАН
	
	
	Останавливаться = ложь;
	
	ТекстОшибки = "";   
	ПаузаПриПроведенииДнем = Истина;
	
	Попытка
		УправлениеЗапасамиПартионныйУчет.ВыполнитьВосстановлениеНаСервере(ТекущаяДата(), 
			Справочники.Организации.ПустаяСсылка(), Истина, Истина, Истина,
			Останавливаться, 100, 100, ПаузаПриПроведенииДнем);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
	КонецПопытки;
		
КонецПроцедуры


// НЧАН
// Удаление документов инвентаризации с пометкой на удаление из главной базы (старше 2 недель)
Процедура ЛК_УдалениеДоков() Экспорт
	
	// НЧАН
	Если ТекущаяДата() < Константы.ЛК_Счетчик_Дата_1.Получить() Тогда
		Возврат;
	КонецЕсли;		
	// КЧАН
	
	// Проверяем, что база главная
	Если ИмяКомпьютера() <> "dbserv3" Тогда
		  Возврат;
	КонецЕсли;
	
	ДТ = ТекущаяДата() - 2*7*24*60*60;
	
	З = Новый Запрос;
	З.Текст = "ВЫБРАТЬ
	          |	ИнвентаризацияТоваровНаСкладе.Ссылка
	          |ИЗ
	          |	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	          |ГДЕ
	          |	ИнвентаризацияТоваровНаСкладе.ПометкаУдаления = Истина
	          |	И ИнвентаризацияТоваровНаСкладе.Дата < &Дата";
			  
	З.УстановитьПараметр("Дата", ДТ);			  
	
	В = З.Выполнить().Выбрать();
	
	Пока В.Следующий() Цикл
		О = В.Ссылка.ПолучитьОбъект(); 
	    О.Удалить();
//		Сообщить(О);
	КонецЦикла;
	
КонецПроцедуры
// КЧАН

// НЧАН
// Удаление документов инвентаризации с пометкой на удаление из главной базы (старше 2 недель)
Процедура ОбменСГР(РучнойЗапуск = Ложь) Экспорт
	
	Если НЕ РучнойЗапуск И ТекущаяДата() < Константы.ЛК_Счетчик_Дата_1.Получить() Тогда
		Возврат;
	КонецЕсли;		

	ДополнительныеДействияПередОбменом();	
	
	МагазинНастройка = Справочники.НастройкиОбменаДанными.НайтиПоКоду("003");
	ПроцедурыОбменаДанными.ВыполнитьОбменДаннымиПоПроизвольнойНастройке(МагазинНастройка, РучнойЗапуск);
		
КонецПроцедуры
// КЧАН

// НЧАН
Процедура ДополнительныеДействияПередОбменом() Экспорт
	
	ПроверитьПустыеХарактеристики();	
	
КонецПроцедуры	
// КЧАН

// НЧАН
// Удаление документов инвентаризации с пометкой на удаление из главной базы (старше 2 недель)
Процедура ОбменГРПоТочкам(СоединениеComУправляющее) Экспорт
			
	Попытка
		КС = СоединениеComУправляющее; //ПодключитьсяКБазе();
		СписокСкладовСom = КС.ПолучитьСписокСкладов();
		СписокСкладов = Новый ТаблицаЗначений;
		СписокСкладов.Колонки.Добавить("Склад");
		СписокСкладов.Колонки.Добавить("КодСклада");
		СписокСкладов.Колонки.Добавить("КодНастройки");
		СписокСкладов.Колонки.Добавить("СтатусОбмена");
		СписокСкладов.Колонки.Добавить("КодУзла");
		Для Каждого Стр Из СписокСкладовСom Цикл
			СтрД = СписокСкладов.Добавить();
			СтрД.Склад = Стр.Склад.Description; 
			СтрД.КодСклада = Стр.Склад.Code; 
			СтрД.КодНастройки = Стр.МагазинНастройка.Code;
			СтрД.КодУзла = Стр.МагазинНастройка.УзелИнформационнойБазы.Code;
		КонецЦикла;
		
		ЗаписьОшибок = "";
		ФН = Стр.МагазинНастройка;
		Соединение = Новый FTPСоединение(ФН.FTPАдресОбмена, ФН.ПортFTPСоединения, ФН.ПользовательFTPСоединения, ФН.ПарольFTPСоединения, Неопределено, Истина, 0, Неопределено);
		НайденныеФайлы = Соединение.НайтиФайлы("/" , "*");
		СообщенияФайлыСписок = НОвый Структура;
		Для Каждого Файл Из НайденныеФайлы Цикл
			ИмяП = Сред(Файл.ИмяБезРасширения, 9);
			Попытка
				СообщенияФайлыСписок.Вставить(ИмяП, Файл.ПолучитьВремяИзменения());
			Исключение
				ЗаписьОшибок = ЗаписьОшибок + "У магазина неверный код (" + ИмяП + ")";	
			КонецПопытки;	
		КонецЦикла;
		
		Для Каждого Стр Из СписокСкладов Цикл
			
			СтрокаСтатуса = "Начат обмен по складу: " + Стр.Склад;
		//	Состояние(СтрокаСтатуса);
			ЗаписатьСтатус(СтрокаСтатуса);
			
			ФайлЗагрузкиИмя = СокрЛП(Стр.КодУзла) + "_" + "ГР";
			ФайлВыгрузкиИмя = "ГР" + "_" + СокрЛП(Стр.КодУзла);
			ФайлЗагрузкиИмя = ?(ФайлЗагрузкиИмя = "" ИЛИ Найти(ФайлЗагрузкиИмя, " ") > 0, "Т", ФайлЗагрузкиИмя);
			ФайлВыгрузкиИмя = ?(ФайлВыгрузкиИмя = "" ИЛИ Найти(ФайлВыгрузкиИмя, " ") > 0, "Т", ФайлВыгрузкиИмя);
			Попытка
				ВремяФЗ = ?(СообщенияФайлыСписок.Свойство(ФайлЗагрузкиИмя), СообщенияФайлыСписок[ФайлЗагрузкиИмя], '00010101');
				ВремяФВ = ?(СообщенияФайлыСписок.Свойство(ФайлВыгрузкиИмя), СообщенияФайлыСписок[ФайлВыгрузкиИмя], '00010101');
			Исключение
				РезультатПоОбмену = Строка(ЗаписьОшибок) + "Неверное имя фтп-файла (" + ФайлЗагрузкиИмя + "," + ФайлВыгрузкиИмя + "); ";
				НЗС = Новый Структура;
				НЗС.Вставить("КодНастройки", Стр.КодНастройки);  
				НЗС.Вставить("Склад", Стр.Склад); 
				НЗС.Вставить("Статус", РезультатПоОбмену);
				НЗС.Вставить("ДатаОбмена", ТекущаяДата());

				ЗаписатьИнфуПоОбмену(НЗС);			
				Продолжить;
			КонецПопытки;

			Если  ВремяФЗ > ВремяФВ ИЛИ  ВремяФВ < ТекущаяДата() - 7200 Тогда // ИЛИ СписокСкладовкВыгрузке[0].Приоритет > 1 Тогда	
				
				Попытка
					РезультатПоОбмену = КС.ПровестиОбменСМагазином(Стр.КодНастройки);
					Если РезультатПоОбмену = "" Тогда
						РезультатПоОбмену = "Успешно"; //Строка(ТекущаяДата());		
					КонецЕсли;
				Исключение
					РезультатПоОбмену = "Ошибка: " + ОписаниеОшибки();
				КонецПопытки;
				
				Стр.СтатусОбмена = РезультатПоОбмену;
				
				НЗС = Новый Структура;
				НЗС.Вставить("КодНастройки", Стр.КодНастройки);  
				НЗС.Вставить("Склад", Стр.Склад); 
				НЗС.Вставить("Статус", РезультатПоОбмену);
				НЗС.Вставить("ДатаОбмена", ТекущаяДата());

				ЗаписатьИнфуПоОбмену(НЗС);
				
			КонецЕсли;	
			
		КонецЦикла;
		
		ЗаписатьИнфуПоОбмену(НЗС, ЗаписьОшибок);
		
	Исключение
			
	КонецПопытки;
	
	 КС = Неопределено;
			
КонецПроцедуры
// КЧАН

// НЧАН
Функция КарасныеСтрокиПеремещенияВГР(СоединениеComУправляющее) Экспорт
	
	//Возврат Ложь; // Убрать после обновления ГР
	
	ЕстьКрасныеСтроки = Ложь;
	
	КС = СоединениеComУправляющее; 
	Перемещения = КС.ПеремещенияСКраснымиСтроками();
	           
	ЕстьКрасныеСтрокиПеремещения = ЗаргеатьДокиСКраснымиСтроками(Перемещения, "ПеремещениеТоваров");
	ЕстьКрасныеСтроки = ЕстьКрасныеСтроки ИЛИ ЕстьКрасныеСтрокиПеремещения;
	
	Попытка
		Списания = КС.СписанияСКраснымиСтроками();
		ЕстьКрасныеСтрокиСписания = ЗаргеатьДокиСКраснымиСтроками(Списания, "СписаниеТоваров");
		
		Оприходования = КС.ОприходованияСКраснымиСтроками();
		ЕстьКрасныеСтрокиОприходования = ЗаргеатьДокиСКраснымиСтроками(Оприходования, "ОприходованиеТоваров");
		
		ЕстьКрасныеСтроки = ЕстьКрасныеСтроки ИЛИ ЕстьКрасныеСтрокиСписания ИЛИ ЕстьКрасныеСтрокиОприходования;
	Исключение
		Сообщить("Не удалось получить данные по красным строкам Оприходования или Списания. Необходимо обновить Главную Розницу!");
	КонецПопытки;	
		
	Возврат ЕстьКрасныеСтроки;
 
КонецФункции
// КЧАН

// НЧАН
Функция ЗаргеатьДокиСКраснымиСтроками(Доки, Менеджер)
		
	ВЗ = Ложь;
	
	Узел = ПланыОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.НайтиПоКоду("ГР"); 
	Если Доки.Количество() <> 0 Тогда
		Для Каждого Стр Из Доки Цикл
			Попытка
				Сс = Документы[Менеджер].ПолучитьСсылку(Новый УникальныйИдентификатор(Стр));
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, Сс);	
			Исключение
				#Если Клиент Тогда
					Сообщить(ОписаниеОшибки());
				#КонецЕсли
			КонецПопытки;		
		КонецЦикла;	
		ВЗ = Истина;
	КонецЕсли;	
	
	Возврат ВЗ;
 
КонецФункции
// КЧАН

Процедура ЗаписатьИнфуПоОбмену(ИнфаПоОбмену, ЗаписьОшибок = Неопределено)
	
	НЗ = РегистрыСведений.ЛК_СтатусыОбменаПоСкладам.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(НЗ, ИнфаПоОбмену);
	Если ЗаписьОшибок <> Неопределено Тогда
		НЗ.КодНастройки = "9999";
		НЗ.Склад = "Другие ошибки";
		НЗ.Статус = ЗаписьОшибок;
	КонецЕсли;	
	НЗ.Записать(Истина);
	
КонецПроцедуры	 

Процедура ЗаписатьСтатус(Статус)
	
	Свойство  =  ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("СтатусОбменаСРТ");	
	РС  =  РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
    РС.Объект  =  Справочники.Склады.НайтиПоКоду("000000009");
    РС.Свойство  =  свойство;
    РС.Значение  =  Статус;
    РС.Записать();
	
КонецПроцедуры

// НЧАН
Функция ХодОбменаССайтом() Экспорт
	
	ВЗ = "ОК";
	
	Корень = "/tabakon.ru/public_html/";
	
    Соединение = ПодключитьсяКFTPСерверу();
    Соединение.УстановитьТекущийКаталог(Корень);
	
	ГП = Соединение.НайтиФайлы("obmen_1C");  
	Если ГП.Количество() = 0 Тогда
		Попытка
			Соединение.СоздатьКаталог("obmen_1C");
		Исключение
			ЗаписьЖурналаРегистрации("Обмен с сайтом", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		КонецПопытки;			
	КонецЕсли;
	
	Соединение.УстановитьТекущийКаталог(Корень + "obmen_1C/");
	
	ГПП = Соединение.НайтиФайлы("*");	
	Если ГПП.Количество() > 0 Тогда
		ВЗ = ("Сайт не обработал предыдущие файлы");  
	КонецЕсли;	
	
	Возврат ВЗ;      
	
КонецФункции
// КЧАН

// НЧАН
Процедура ЗагрузкаНаФтпСайта(ТипЗагрузки = Неопределено) Экспорт
	
	Корень = "/tabakon.ru/public_html/";
	ПапкаВыгрузки = "obmen_1C";
	ПапкаСФайламиДляВыгрузки = "F:\Легкий Код\Obmen_Site\1cbitrix";
	
	Если ТипЗагрузки = 1 Тогда
		ПапкаВыгрузки = "obmen_1C_propertys";
		ПапкаСФайламиДляВыгрузки = "F:\Легкий Код\Obmen_Site\Таблицы свойств";
	КонецЕсли;
	
	Если ТипЗагрузки = 2 Тогда
		ПапкаВыгрузки = "obmen_1C_propertys";
		ПапкаСФайламиДляВыгрузки = "F:\Легкий Код\Obmen_Site\Доп таблицы";
	КонецЕсли;

	
    Соединение = ПодключитьсяКFTPСерверу();
    Соединение.УстановитьТекущийКаталог(Корень);
	
	ГП = Соединение.НайтиФайлы(ПапкаВыгрузки);  
	Если ГП.Количество() = 0 Тогда
		Попытка
			Соединение.СоздатьКаталог(ПапкаВыгрузки);
		Исключение
			ЗаписьЖурналаРегистрации("Обмен с сайтом", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		КонецПопытки;			
	КонецЕсли;
	
	Соединение.УстановитьТекущийКаталог(Корень + ПапкаВыгрузки + "/");
	
	//ГПП = Соединение.НайтиФайлы("*");	
	//Если ГПП.Количество() > 0 Тогда
	//	Сообщить("Сайт не обработал предыдущие файлы");
	//	Возврат;  
	//КонецЕсли;	
		
	// Запись на ftp - сервер
	
	МФ = НайтиФайлы(ПапкаСФайламиДляВыгрузки, "*");
	КаталогСФайлами = "";
	
	МассивКаталогов = Новый Массив;
	
	Н = 0;
	НВ = МФ.Количество();
	
	Для Каждого Ф Из МФ Цикл
		
		Н = Н + 1;
		#Если Клиент Тогда
			Состояние("Выгрузка файла: " + Ф.Имя + " (" + Н + " из " + НВ + ")");
		#КонецЕсли	
		
		Если Ф.ЭтоКаталог() Тогда
			//Если Ф.Имя = "import_files" Тогда
				КаталогСФайлами = Ф.Имя ; //"import_files";
				МассивКаталогов.Добавить(КаталогСФайлами);
				Продолжить;
			//КонецЕсли;				
		КонецЕсли;
		
		Попытка		
			Соединение.Записать(Ф.ПолноеИмя, Ф.Имя); 	
		Исключение
			ЗаписьЖурналаРегистрации("Обмен с сайтом", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		КонецПопытки;		
		
	КонецЦикла;	
	
		
	Если ТипЗагрузки = 1 Тогда	
		Соединение = Неопределено;
		Возврат;
	КонецЕсли;

	
	КатРод = Соединение.ТекущийКаталог();
	
	НК = 0;
	НВ = МассивКаталогов.Количество();
		
	ДЛя Каждого Кат Из МассивКаталогов Цикл		
		
		НК = НК + 1;
		
		Попытка
			Соединение.УстановитьТекущийКаталог(КатРод);
			Соединение.СоздатьКаталог(Кат);
			Соединение.УстановитьТекущийКаталог(КатРод + Кат + "/");
		Исключение
			ЗаписьЖурналаРегистрации("Обмен с сайтом", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		КонецПопытки;	
		
		ФайлыКартинки = НайтиФайлы("F:\Легкий Код\Obmen_Site\1cbitrix\" + Кат, "*");
		
		НВК = ФайлыКартинки.Количество(); 
		Н = 0;

		Для Каждого Файл Из ФайлыКартинки Цикл
			//Если Файл.ЭтоКаталог() Тогда
				Н = Н + 1;
				#Если Клиент Тогда
					Состояние("Выгрузка картинки: каталог " + НК + " из " + НВ + " ; картинка " + Н + " из " + НВК );
				#КонецЕсли
				Попытка	
					//Соединение.СоздатьКаталог(Файл.Имя);
					//Картинка = НайтиФайлы("F:\Легкий Код\Obmen_Site\1cbitrix\import_files\" + Файл.Имя , "*");
					//Соединение.Записать(Картинка[0].ПолноеИмя, Файл.Имя + "/" + Картинка[0].Имя); 
					Соединение.Записать(Файл.ПолноеИмя, Файл.Имя);
				Исключение
					ЗаписьЖурналаРегистрации("Обмен с сайтом", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
				КонецПопытки;		
			//КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
				
 	Соединение = Неопределено;
 
КонецПроцедуры
// КЧАН

// НЧАН
Функция ПодключитьсяКFTPСерверу()
 
    Соединение = Новый FTPСоединение(
        "tabakon.ru", // адрес ftp сервера    87.236.16.138
        21, // порт сервера
        "sirotkinma_admin", // имя пользователя
        "Q134679852", // пароль пользователя
        Неопределено, // прокси не используется
        Истина, // пассивный режим работы
        0, // таймаут (0 - без ограничений)
        Неопределено // незащищенное соединение
    );
  
    Возврат Соединение;
 
КонецФункции
// КЧАН


// НЧАН
Процедура ПроверитьПустыеХарактеристики() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахТовары.Ссылка,
		|	СУММА(ВЫБОР
		|			КОГДА ОтчетОРозничныхПродажахТовары.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Поле1
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
		|ГДЕ
		|	ОтчетОРозничныхПродажахТовары.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетОРозничныхПродажахТовары.Ссылка
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА ОтчетОРозничныхПродажахТовары.ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) = 0";
		
	ТД = ТекущаяДата();	
	Запрос.УстановитьПараметр("Дата1", ТД - 14 * 86400);
	Запрос.УстановитьПараметр("Дата2", ТД );
	
	РезультатЗапроса = Запрос.Выполнить();
	
	В = РезультатЗапроса.Выбрать();
	
	Пока В.Следующий() Цикл
		От = ЛК_РаботаСДокументами.ДокументСПустымиХар(В.Ссылка);
	КонецЦикла;
	
КонецПроцедуры
// КЧАН

//Вик 2020_11_28
Процедура ПроверкаОбменаМеждуУТ_УТ() Экспорт
	Результат	=	Новый ТаблицаЗначений;
	Фильтр=Новый Структура;
    Фильтр.Вставить("ДатаНачала", ТекущаяДата() - 60*60);
    Фильтр.Вставить("ДатаОкончания", КонецДня(ТекущаяДата()));
	Фильтр.Вставить("Метаданные",Метаданные.ПланыОбмена.Полный);
	Попытка
		ВыгрузитьЖурналРегистрации(Результат, Фильтр, "Данные");
	Исключение
		Сообщить(ОписаниеОшибки());
		Текст	=	"Не удалось выгрузить журнал. База: "+СтрокаСоединенияИнформационнойБазы();
		Тема	=	Текст;
		ОтправитьФайлПоЭлПочте("tabakonalert@gmail.com",Текст,Тема);
	КонецПопытки;
	
	Если Результат.Количество() = 0 тогда
		Текст	=	"Не работает обмен между УТ УТ более часа. База: "+СтрокаСоединенияИнформационнойБазы();
		Тема	=	"Внимание!";
		ОтправитьФайлПоЭлПочте("tabakonalert@gmail.com",Текст,Тема);		
	КонецЕсли;

	
КонецПроцедуры
//КонецВик

Процедура ОтправитьФайлПоЭлПочте(Кому,Текст="",Тема="")	
	Попытка
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоКоду("010920");
		ПараметрыПисьма = Новый Структура;
		
		ПараметрыПисьма.Вставить("Тема", Тема);
		ПараметрыПисьма.Вставить("Кому", Кому);
		
		ПараметрыПисьма.Вставить("Тело", Текст); 		
	
		РаботаСПочтовымиСообщениями.ОтправитьСообщение(УчетнаяЗапись,ПараметрыПисьма);
 
	Исключение
		Сообщить(ОписаниеОшибки());	
		ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация, , , ОписаниеОшибки() , );
	КонецПопытки;
			
КонецПроцедуры





















