
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Инициирует формирование запроса организаций.
//
// Параметры:
//  Параметры           - Структура - необходимые данные для формирования запроса,
//  ТранспортныйМодуль  - Структура - модуль ТМ, в котором требуется сформировать запрос,
//  ОтображатьСообщения - Булево    - если Истина, то пользователю будут отображены сообщения с ошибками.
//
// Возвращаемое значение:
//   Структура - результат формирования запроса.
//
Функция СформироватьЗапросОрганизаций(Параметры, ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	ВидКлассификатора = ПредопределенноеЗначение("Справочник.ВидыОбъектовЕГАИС.ЗапросОрганизаций");
	
	Возврат СформироватьЗапросКлассификатора(ВидКлассификатора, Параметры, ТранспортныйМодуль, ОтображатьСообщения);
	
КонецФункции // СформироватьЗапросОрганизаций()

// Инициирует формирование запроса алкогольной продукции.
//
// Параметры:
//  Параметры           - Структура - необходимые данные для формирования запроса,
//  ТранспортныйМодуль  - Структура - модуль ТМ, в котором требуется сформировать запрос,
//  ОтображатьСообщения - Булево    - если Истина, то пользователю будут отображены сообщения с ошибками.
//
// Возвращаемое значение:
//   Структура - результат формирования запроса.
//
Функция СформироватьЗапросАлкогольнойПродукции(Параметры, ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	ВидКлассификатора = ПредопределенноеЗначение("Справочник.ВидыОбъектовЕГАИС.ЗапросАлкогольнойПродукции");
	
	Возврат СформироватьЗапросКлассификатора(ВидКлассификатора, Параметры, ТранспортныйМодуль, ОтображатьСообщения);
	
КонецФункции // СформироватьЗапросАлкогольнойПродукции()

// Обрабатывает ответы из транспортного модуля.
//
// Параметры:
//  ТранспортныйМодуль      - Структура - модуль обработки ответов,
//  ОтображатьСообщения     - Булево - если Истина, то пользователю будут отображены сообщения с ошибками,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
// Возвращаемое значение:
//   Структура - результат обработки ответов.
//
Функция ОбработатьОтветыИзЕГАИС(ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина, ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.РезультатЗагрузкиВходящихДокументов();
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ТранспортныйМодуль = ВыбратьТранспортныйМодуль(Результат.ОписаниеОшибки);
		
		Если ТранспортныйМодуль = Неопределено Тогда
			Возврат ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.ОбработатьОтветыИзУТМ(ТранспортныйМодуль, ОтображатьСообщения, ДополнительныеПараметры);
	
	Если НЕ Результат.Результат Тогда
		Возврат ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения);
	КонецЕсли;
	
	Оповестить("ОбновитьСписокЗапросовЕГАИС");
	
	Возврат Результат;
	
КонецФункции // ОбработатьОтветыИзЕГАИС()

// Загружает новые ТТН из транспортного модуля.
//
// Параметры:
//  ТранспортныйМодуль      - Структура - данные транспортного модуля, из которого требуется загрузить ТТН,
//  ОтображатьСообщения     - Булево - если Истина, то пользователю будут отображены сообщения с ошибками,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
// Возвращаемое значение:
//   Структура - результат загрузки ТТН.
//
Функция ЗагрузитьТТН(ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина, ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.РезультатЗагрузкиВходящихДокументов();
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ТранспортныйМодуль = ВыбратьТранспортныйМодуль(Результат.ОписаниеОшибки);
		
		Если ТранспортныйМодуль = Неопределено Тогда
			Возврат ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Загрузка ТТН...'"));
	Результат = ИнтеграцияЕГАИСКлиентСервер.ЗагрузитьДокументыИзУТМ(ТранспортныйМодуль, "/WAYBILL/,/FORMBREGINFO/", ОтображатьСообщения, ДополнительныеПараметры);
	
	Если НЕ Результат.Результат Тогда
		Возврат ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения);
	КонецЕсли;
	
	Оповестить("ОбновитьСписокТТН_ЕГАИС");
	Возврат Результат;
	
КонецФункции // ЗагрузитьТТН()

// Выгружает акт подтверждения ТТН.
//
// Параметры:
//  Параметры           - Структура - Состав:
//     ТТН            - ДокументСсылка.ТоварноТранспортнаяНакладнаяЕГАИС - ссылка на загруженную ранее ТТН,
//     Отказ          - Булево - признак отказа от ТТН,
//     ТаблицаТоваров - Массив - массив строк с фактическим количеством.
//                               При отсутствии расхождений или в случае отказа от ТТН, массив не содержит элементов.
//                               Элемент массива - структура с ключами:
//         ИдентификаторСтроки - Строка - идентификатор строки ТТН,
//         КоличествоФакт      - Число  - фактически принятое количество,
//         НомерСправкиБ       - Строка - регистрационный номер справки "Б".
//     Номер          - Строка - номер акта подтверждения,
//     Дата           - Дата   - дата акта подтверждения,
//     Комментарий    - Строка - произвольный комментарий к акту.
//  ТранспортныйМодуль  - Структура - модуль ТМ, в котором требуется подтвердить ТТН,
//  ОтображатьСообщения - Булево - если Истина, то пользователю будут отображены сообщения с ошибками.
//
// Возвращаемое значение:
//   Структура - результат загрузки ТТН.
//
Функция ВыгрузитьАктПодтвержденияТТН(Параметры, ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ТранспортныйМодуль = ВыбратьТранспортныйМодуль(Результат.ОписаниеОшибки);
		
		Если ТранспортныйМодуль = Неопределено Тогда
			Возврат ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляВыгрузки = Новый Структура;
	ДанныеДляВыгрузки.Вставить("ТТН"           , Параметры.ТТН);
	ДанныеДляВыгрузки.Вставить("Отказ"         , ?(НЕ Параметры.Свойство("Отказ")         , Ложь        , Параметры.Отказ));
	ДанныеДляВыгрузки.Вставить("ТаблицаТоваров", ?(НЕ Параметры.Свойство("ТаблицаТоваров"), Новый Массив, Параметры.ТаблицаТоваров));
	ДанныеДляВыгрузки.Вставить("Номер"         , ?(НЕ Параметры.Свойство("Номер")         , ""          , Параметры.Номер));
	ДанныеДляВыгрузки.Вставить("Дата"          , ?(НЕ Параметры.Свойство("Дата")          , '00010101'  , Параметры.Дата));
	ДанныеДляВыгрузки.Вставить("Комментарий"   , ?(НЕ Параметры.Свойство("Комментарий")   , ""          , Параметры.Комментарий));
	
	ВидОбъекта = ПредопределенноеЗначение("Справочник.ВидыОбъектовЕГАИС.АктПодтвержденияТТН");
	
	Состояние(НСтр("ru = 'Отправка акта подтверждения ТТН...'"));
	Результат = ИнтеграцияЕГАИСКлиентСервер.СформироватьЗапросВУТМ(ТранспортныйМодуль, ВидОбъекта, ДанныеДляВыгрузки);
	
	Возврат ?(Результат.Результат, Результат, ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения));
	
КонецФункции // ВыгрузитьАктПодтвержденияТТН()

// Формирует электронную подпись чека в транспортном модуле и печает чек на ФР.
//
// Параметры:
//  ИдентификаторУстройства - Строка - Идентификатор фискального регистратора,
//  НомерЧека               - Число  - Номер чека ККМ. Выходной параметр,
//  НомерСмены              - Число  - Номер смены ККМ. Выходной параметр,
//  ПараметрыЧека           - Массив - массив, содержащий элементы:
//     0 - Таблица товаров - таблица значений с колонками:
//             1 - Наименование,
//             2 - НомерСекции,
//             3 - Цена,
//             4 - Количество,
//             5 - Скидка,
//             6 - СтавкаНДС,
//             7 - ПараметрыАлкогольнойПродукции - Структура с ключами:
//                    АлкогольнаяПродукция (Булево),
//                    Маркируемая (Булево),
//                    Штрихкод (Строка),
//                    ШтрихкодМарки (Строка, PDF417),
//                    Объем (Число),
//                    Крепость (Число, %),
//                    КодВидаПродукции (Строка).
//     1 - Сумма оплаты наличными,
//     2 - Сумма оплаты по безналу,
//     3 - Признак возврата,
//     4 - ИНН организации,
//     5 - КПП торгового объекта,
//     6 - Адрес магазина,
//     7 - Наименование магазина,
//     8 - Заводской номер ККМ.
//  ТранспортныйМодуль      - Структура - данные транспортного модуля, в котором требуется получить подпись ЕГАИС,
//  ОтображатьСообщения     - Булево    - если Истина, то пользователю будут отображены сообщения с ошибками,
//  Результат               - Структура - Выходной параметр, результат выполнения функции.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТООшибки* - результат подписи и печати чека.
//
Функция ПечатьЧекаСАлкогольнойПродукцией(ИдентификаторУстройства, НомерЧека, НомерСмены, ПараметрыЧека,
											ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина, Результат = Неопределено) Экспорт
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.РезультатЭлектроннойПодписиЧека(ТранспортныйМодуль);
	
	ТребуетсяРегистрацияВЕГАИС = ИнтеграцияЕГАИСКлиентПовтИсп.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС();
	
	Если ТребуетсяРегистрацияВЕГАИС Тогда
		
		РезультатОперации = Неопределено;
		ПараметрыЧекаЕГАИС = ИнтеграцияЕГАИСКлиентПереопределяемый.ПодготовитьВходящиеДанныеДляПодписиЧека(ПараметрыЧека, НомерЧека, НомерСмены, РезультатОперации);
		
		Если НЕ РезультатОперации.Результат Тогда
			Результат = ЗавершитьОперациюСОшибкой(
				Результат,
				ОтображатьСообщения,
				НСтр("ru = 'Ошибка при подготовке данных чека.'") + Символы.ПС + РезультатОперации.ОписаниеОшибки);
			Возврат ИнтеграцияЕГАИСКлиентПереопределяемый.ОшибкаПодготовкиВходящихДанных();
		КонецЕсли;
		
		Если ПараметрыЧекаЕГАИС.ТаблицаТоваров.Количество() > 0 ИЛИ ПараметрыЧекаЕГАИС.ТаблицаТоваровБезМарки.Количество() > 0 Тогда
			Если ТранспортныйМодуль = Неопределено Тогда
				ТекстОшибки = "";
				ТранспортныйМодуль = ВыбратьТранспортныйМодуль(ТекстОшибки);
				
				Если ТранспортныйМодуль = Неопределено Тогда
					Результат = ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, ТекстОшибки);
					Возврат ИнтеграцияЕГАИСКлиентПереопределяемый.ОшибкаПодготовкиВходящихДанных();
				КонецЕсли;
			КонецЕсли;
			
			РезультатОперации = СформироватьПодписьЧекаВЕГАИС(ПараметрыЧека, ТранспортныйМодуль, ПараметрыЧекаЕГАИС,,, ОтображатьСообщения);
			
			Если НЕ РезультатОперации.Результат Тогда
				Результат = ЗавершитьОперациюСОшибкой(
					Результат,
					ОтображатьСообщения,
					НСтр("ru='Ошибка получения электронной подписи чека ЕГАИС.'") + Символы.ПС + РезультатОперации.ОписаниеОшибки);
				Возврат ИнтеграцияЕГАИСКлиентПереопределяемый.ОшибкаФормированияЭлектроннойПодписи();
			Иначе
				ПараметрыЧекаЕГАИС.Вставить("Адрес", РезультатОперации.Адрес);
				ПараметрыЧекаЕГАИС.Вставить("Подпись", РезультатОперации.Подпись);
				
				Результат.Адрес = РезультатОперации.Адрес;
				Результат.Подпись = РезультатОперации.Подпись;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатОперации = ИнтеграцияЕГАИСКлиентПереопределяемый.ПечатьЧека(ИдентификаторУстройства, НомерЧека, НомерСмены, ПараметрыЧека);
	
	Если НЕ РезультатОперации.Результат Тогда
		
		ОписаниеОшибки = РезультатОперации.ОписаниеОшибки;
		
		Если ТребуетсяРегистрацияВЕГАИС Тогда
			Если ПараметрыЧекаЕГАИС.ТаблицаТоваровБезМарки.Количество() > 0 Тогда
				ТекстОшибки = "";
				ОтменитьЧекВУТМ(ТранспортныйМодуль, ПараметрыЧекаЕГАИС, ПараметрыЧекаЕГАИС.ТаблицаТоваровБезМарки, ТекстОшибки);
				
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
					ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыЧекаЕГАИС.ТаблицаТоваров.Количество() > 0 Тогда
				ТекстОшибки = "";
				ОтменитьЧекВУТМ(ТранспортныйМодуль, ПараметрыЧекаЕГАИС, ПараметрыЧекаЕГАИС.ТаблицаТоваров, ТекстОшибки);
				
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
					ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Результат = ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, ОписаниеОшибки);
		
		Возврат РезультатОперации.РезультатПечатиЧека;
		
	КонецЕсли;
	
	Если НЕ ТребуетсяРегистрацияВЕГАИС Тогда
		Результат.Результат = Истина;
		Возврат РезультатОперации.РезультатПечатиЧека;
	КонецЕсли;
	
	РезультатОперации = ИнтеграцияЕГАИСКлиентПереопределяемый.ПечатьСлипЧека(ИдентификаторУстройства, ПараметрыЧекаЕГАИС);
	
	Если НЕ РезультатОперации.Результат Тогда
		Результат = ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, РезультатОперации.ОписаниеОшибки);
	Иначе
		Результат.Результат = Истина;
	КонецЕсли;
	
	Возврат РезультатОперации.РезультатПечатиЧека;

КонецФункции

// Формирует электронную подпись чека в транспортном модуле и печает чек на ФР.
//
// Параметры:
//  ПараметрыЧека           - Массив - массив, содержащий элементы:
//     0 - Таблица товаров - таблица значений с колонками:
//             1 - Наименование,
//             2 - НомерСекции,
//             3 - Цена,
//             4 - Количество,
//             5 - Скидка,
//             6 - СтавкаНДС,
//             7 - ПараметрыАлкогольнойПродукции - Структура с ключами:
//                    АлкогольнаяПродукция (Булево),
//                    Маркируемая (Булево),
//                    Штрихкод (Строка),
//                    ШтрихкодМарки (Строка, PDF417),
//                    Объем (Число),
//                    Крепость (Число, %),
//                    Код вида алкогольной продукции (Строка).
//     1 - Сумма оплаты наличными,
//     2 - Сумма оплаты по безналу,
//     3 - Признак возврата,
//     4 - ИНН организации,
//     5 - КПП торгового объекта,
//     6 - Адрес магазина,
//     7 - Наименование магазина,
//     8 - Заводской номер ККМ.
//  ТранспортныйМодуль      - Структура - данные транспортного модуля, в котором требуется получить подпись ЕГАИС,
//  ПараметрыЧекаЕГАИС      - Структура - параметры чека в формате ЕГАИС,
//  ПечатьСлипЧека          - Булево    - признак печати слип-чека инфо квитанции ЕГАИС,
//  ИдентификаторУстройства - Строка    - Идентификатор фискального регистратора,
//  ОтображатьСообщения     - Булево    - если Истина, то пользователю будут отображены сообщения с ошибками.
//
// Возвращаемое значение:
//   Структура - результат подписи чека.
//
Функция СформироватьПодписьЧекаВЕГАИС(ПараметрыЧека, 
										ТранспортныйМодуль = Неопределено, ПараметрыЧекаЕГАИС = Неопределено, 
										ПечатьСлипЧека = Ложь, ИдентификаторУстройства = Неопределено, 
										ОтображатьСообщения = Истина) Экспорт
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.РезультатЭлектроннойПодписиЧека(ТранспортныйМодуль);
	
	ИспользуетсяРегистрацияВЕГАИС = ИнтеграцияЕГАИСКлиентПовтИсп.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС();
	
	Если НЕ ИспользуетсяРегистрацияВЕГАИС Тогда
		Возврат ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, НСтр("ru = 'Розничная регистрация продаж в системе ЕГАИС не используется.'"));
	КонецЕсли;
	
	Если ПараметрыЧекаЕГАИС = Неопределено Тогда
		РезультатОперации = Неопределено;
		ПараметрыЧекаЕГАИС = ИнтеграцияЕГАИСКлиентПереопределяемый.ПодготовитьВходящиеДанныеДляПодписиЧека(ПараметрыЧека,,, РезультатОперации);
		
		Если НЕ РезультатОперации.Результат Тогда
			Возврат ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, РезультатОперации.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЧекаЕГАИС.ТаблицаТоваров.Количество() = 0 И ПараметрыЧекаЕГАИС.ТаблицаТоваровБезМарки.Количество() = 0 Тогда
		Результат.Результат = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ТекстОшибки = "";
		ТранспортныйМодуль = ВыбратьТранспортныйМодуль(ТекстОшибки);
		
		Если ТранспортныйМодуль = Неопределено Тогда
			Возврат ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	РезультатОперации = ИнтеграцияЕГАИСКлиентПереопределяемый.ПроверитьВходящиеДанныеПередПодписьюЧека(ТранспортныйМодуль, ПараметрыЧекаЕГАИС);
	Если НЕ РезультатОперации.Результат Тогда
		Возврат ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, РезультатОперации.ОписаниеОшибки);
	КонецЕсли;
	
	Если ПараметрыЧекаЕГАИС.ТаблицаТоваровБезМарки.Количество() > 0 Тогда
		Состояние(НСтр("ru='Обращение к транспортному модулю ЕГАИС...'"));
		РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.ПолучитьЭлектроннуюПодписьЧекаВУТМ(ТранспортныйМодуль, ПараметрыЧекаЕГАИС, ПараметрыЧекаЕГАИС.ТаблицаТоваровБезМарки);
		
		Если НЕ РезультатОперации.Результат Тогда
			Возврат ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, РезультатОперации.ОписаниеОшибки);
		ИначеЕсли ПараметрыЧекаЕГАИС.ТаблицаТоваров.Количество() = 0 Тогда
			Результат.Результат = Истина;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЧекаЕГАИС.ТаблицаТоваров.Количество() > 0 Тогда
		Состояние(НСтр("ru='Обращение к транспортному модулю ЕГАИС...'"));
		РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.ПолучитьЭлектроннуюПодписьЧекаВУТМ(ТранспортныйМодуль, ПараметрыЧекаЕГАИС, ПараметрыЧекаЕГАИС.ТаблицаТоваров);
		
		Если НЕ РезультатОперации.Результат Тогда
			Если ПараметрыЧекаЕГАИС.ТаблицаТоваровБезМарки.Количество() > 0 Тогда
				ТекстОшибки = "";
				ОтменитьЧекВУТМ(ТранспортныйМодуль, ПараметрыЧекаЕГАИС, ПараметрыЧекаЕГАИС.ТаблицаТоваровБезМарки, ТекстОшибки);
				
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
					РезультатОперации.ОписаниеОшибки = РезультатОперации.ОписаниеОшибки + Символы.ПС + ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
			Возврат ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, РезультатОперации.ОписаниеОшибки);
		Иначе
			Результат.Адрес = РезультатОперации.Адрес;
			Результат.Подпись = РезультатОперации.Подпись;
			
			Если ПечатьСлипЧека Тогда
				ПараметрыЧекаЕГАИС.Вставить("Адрес", РезультатОперации.Адрес);
				ПараметрыЧекаЕГАИС.Вставить("Подпись", РезультатОперации.Подпись);
				
				РезультатОперации = ИнтеграцияЕГАИСКлиентПереопределяемый.ПечатьСлипЧека(ИдентификаторУстройства, ПараметрыЧекаЕГАИС);
				
				Если НЕ РезультатОперации.Результат Тогда
					Результат = ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, РезультатОперации.ОписаниеОшибки);
				Иначе
					Результат.Результат = Истина;
				КонецЕсли;
			Иначе
				Результат.Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выбирает транспортный модуль из справочника.
//
// Параметры:
//  ТекстОшибки - Строка - возвращаемое описание ошибки.
//
// Возвращаемое значение:
//   Структура  - структура, содержащая данные выбранного транспортного модуля.
//
Функция ВыбратьТранспортныйМодуль(ТекстОшибки = "")

	СписокДоступныхМодулей = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули();
	
	Если СписокДоступныхМодулей.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Отсутствуют доступные транспортные модули ЕГАИС.'");
		Возврат Неопределено;
		
	ИначеЕсли СписокДоступныхМодулей.Количество() = 1 Тогда
		Возврат СписокДоступныхМодулей[0];
		
	Иначе
		СписокДляВыбора = Новый СписокЗначений;
		Для каждого Модуль Из СписокДоступныхМодулей Цикл
			СписокДляВыбора.Добавить(Модуль, Модуль.Наименование);
		КонецЦикла;
		
		ВыбранныйЭлемент = СписокДляВыбора.ВыбратьЭлемент(НСтр("ru = 'Выберите транспортный модуль ЕГАИС'"));
		
		Если ВыбранныйЭлемент = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не выбран транспортный модуль.'");
			Возврат Неопределено;
		Иначе
			Возврат ВыбранныйЭлемент.Значение;
		КонецЕсли;
		
	КонецЕсли;

КонецФункции // ВыбратьТранспортныйМодуль()

// Формирует запрос на загрузку классификатора.
//
// Параметры:
//  ВидКлассификатора   - СправочникСсылка.ВидыОбъектовЕГАИС - вид загружаемого классификатора,
//  Параметры           - Структура - параметры, необходимые для формирования запроса,
//  ТранспортныйМодуль  - Структура - данные транспортного модуля, в котором требуется сформировать запрос,
//  ОтображатьСообщения - Булево - если Истина, то пользователю будут отображены сообщения с ошибками.
//
// Возвращаемое значение:
//   Структура - результат формирования запроса.
//
Функция СформироватьЗапросКлассификатора(ВидКлассификатора, Параметры, ТранспортныйМодуль, ОтображатьСообщения)
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ТранспортныйМодуль = ВыбратьТранспортныйМодуль(Результат.ОписаниеОшибки);
		
		Если ТранспортныйМодуль = Неопределено Тогда
			Возврат ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИНН) Тогда
		Если ВидКлассификатора = ПредопределенноеЗначение("Справочник.ВидыОбъектовЕГАИС.ЗапросАлкогольнойПродукции") Тогда
			ТекстЗаголовка = НСтр("ru = 'Введите ИНН производителя или импортера алкогольной продукции'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Введите ИНН производителя, импортера или собственной организации'");
		КонецЕсли;
		
		Если НЕ ВвестиСтроку(Параметры.ИНН, ТекстЗаголовка, 12) Тогда
			Возврат ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, НСтр("ru = 'Не введен ИНН.'"));
		КонецЕсли;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Формирование запроса на загрузку классификатора...'"));
	Результат = ИнтеграцияЕГАИСКлиентСервер.СформироватьЗапросВУТМ(ТранспортныйМодуль, ВидКлассификатора, Параметры);
	
	Возврат ?(Результат.Результат, Результат, ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения));
	
КонецФункции // СформироватьЗапросКлассификатора()

// Отменяет чек в ТМ ЕГАИС.
//
// Параметры:
//  ТранспортныйМодуль  - Структура - данные транспортного модуля, в котором требуется отменить чек,
//  ПараметрыЧекаЕГАИС  - Структура - данные, необходимые для отмены чека,
//  ТаблицаТоваров      - Массив    - строки отменяемого чека,
//  ТекстОшибки         - Строка    - в переменную запишется текст ошибки при неудачной отмене чека.
//
Процедура ОтменитьЧекВУТМ(ТранспортныйМодуль, ПараметрыЧекаЕГАИС, ТаблицаТоваров, ТекстОшибки = "")
	
	ЧекНаВозврат = ПараметрыЧекаЕГАИС.Свойство("Возврат") И ПараметрыЧекаЕГАИС.Возврат;
	
	ПараметрыЧекаЕГАИС.Вставить("Возврат", НЕ ЧекНаВозврат);
	
	Состояние(НСтр("ru='Отмена чека в транспортном модуле ЕГАИС...'"));
	РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.ПолучитьЭлектроннуюПодписьЧекаВУТМ(ТранспортныйМодуль, ПараметрыЧекаЕГАИС, ТаблицаТоваров);
	
	ПараметрыЧекаЕГАИС.Вставить("Возврат", ЧекНаВозврат);
	
	Если НЕ РезультатОперации.Результат Тогда
		ТекстОшибки = НСтр("ru='Ошибка получения электронной подписи возвратного чека ЕГАИС.'")
												+ Символы.ПС + РезультатОперации.ОписаниеОшибки;
		
	КонецЕсли;
	
КонецПроцедуры // ОтменитьЧекВУТМ()

// Прекращает выполнение текущей операции с оборудованием с ошибкой и возвращает структуру с ошибкой.
//
// Параметры:
//  Результат           - Структура - результат выполнения текущей операции с оборудованием,
//  ОтображатьСообщения - Булево    - если Истина, то пользователю будут отображены сообщения с ошибками,
//  ТекстОшибки         - Строка    - описание ошибки.
//
// Возвращаемое значение:
//   Структура - информация об ошибке.
//
Функция ЗавершитьОперациюСОшибкой(Результат = Неопределено, ОтображатьСообщения = Истина, ТекстОшибки = "")
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	Иначе
		Результат.Результат = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Результат.ОписаниеОшибки = ТекстОшибки + ?(ПустаяСтрока(Результат.ОписаниеОшибки), "", Символы.ПС + Результат.ОписаниеОшибки);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) И ОтображатьСообщения Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗавершитьОперациюСОшибкой()