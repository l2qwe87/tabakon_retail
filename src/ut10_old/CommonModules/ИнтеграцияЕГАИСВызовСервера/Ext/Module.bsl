
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция возвращает параметры запроса документа, который нужно выгрузить в ЕГАИС.
//
// Параметры:
//  ТранспортныйМодуль  - Структура - модуль, для которого формируется текст документа,
//  ВидДокумента        - СправочникСсылка.ВидыОбъектовЕГАИС - вид документа,
//  Параметры           - Структура - параметры формирования документа.
//
// Возвращаемое значение:
//   Структура -  параметры запроса.
//
Функция ПараметрыЗапросаДокументаЕГАИС(ТранспортныйМодуль, ВидДокумента, Знач Параметры) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("АдресЗапроса", ВидДокумента.ПутьНаСервере);
	Результат.Вставить("ТекстЗапроса", ИнтеграцияЕГАИС.ТекстXMLВыгрузкиДокумента(ТранспортныйМодуль, ВидДокумента, Параметры));
	
	Возврат Результат;

КонецФункции // ПараметрыЗапросаДокументаЕГАИС()

// Получает электронную подпись чека ККМ.
//
// Параметры:
//  ДанныеЧека     - Структура - данные чека,
//  ТаблицаТоваров - Массив    - состав чека.
//
// Возвращаемое значение:
//   Структура - значения подписи и URL, полученные из ТМ ЕГАИС.
//
Функция ПараметрыЗапросаЧекаККМ(Знач ДанныеЧека, Знач ТаблицаТоваров) Экспорт
	
	Результат = Новый Структура;
	
	ТекстОшибки = "";
	ТекстXML = ИнтеграцияЕГАИС.ТекстXMLВыгрузкиЧека(Справочники.ВидыОбъектовЕГАИС.ЧекККМ, ДанныеЧека, ТаблицаТоваров, ТекстОшибки);
	
	Результат.Вставить("Результат"     , ПустаяСтрока(ТекстОшибки));
	Результат.Вставить("ОписаниеОшибки", ТекстОшибки);
	Результат.Вставить("АдресЗапроса"  , Справочники.ВидыОбъектовЕГАИС.ЧекККМ.ПутьНаСервере);
	Результат.Вставить("ТекстЗапроса"  , ТекстXML);
	
	Возврат Результат;
	
КонецФункции // ПараметрыЗапросаЧекаККМ()

// Загружает список документов, полученных из УТМ.
//
// Параметры:
//  МассивДокументов  - Массив - полученные документы из ТМ ЕГАИС,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
// Возвращаемое значение:
//   Соответствие  - загруженные документы.
//
Функция ОбработатьВходящиеДокументы(Знач МассивДокументов, Знач ДополнительныеПараметры) Экспорт
	
	Возврат ИнтеграцияЕГАИС.ОбработатьВходящиеДокументы(МассивДокументов, ДополнительныеПараметры);
	
КонецФункции // ОбработатьВходящиеДокументы()

// Получает список доступных транспортных модулей ЕГАИС.
//
// Параметры: нет.
//
// Возвращаемое значение:
//   Массив   - список доступных модулей.
//
Функция ДоступныеТранспортныеМодули() Экспорт

	Возврат ИнтеграцияЕГАИСПереопределяемый.ДоступныеТранспортныеМодули();

КонецФункции // ДоступныеТранспортныеМодули()

// Записывает данные запроса в регистр сведений ЗапросыЕГАИС.
//
// Параметры:
//  ИдентификаторЗапроса - Строка - идентификатор исходящего запроса,
//  ТипЗапроса           - СправочникСсылка.ВидыОбъектовЕГАИС - вид исходящего документа,
//  ДатаЗапроса          - Дата - дата запроса.
//
Процедура ЗаписатьДанныеЗапроса(ИдентификаторЗапроса, ТипЗапроса, ДатаЗапроса = Неопределено) Экспорт
	
	Запись = РегистрыСведений.ЗапросыЕГАИС.СоздатьМенеджерЗаписи();
	Запись.Идентификатор = ИдентификаторЗапроса;
	Запись.ТипЗапроса    = ТипЗапроса;
	Запись.ДатаЗапроса   = ?(НЕ ЗначениеЗаполнено(ДатаЗапроса), ТекущаяДатаСеанса(), ДатаЗапроса);
	Запись.Записать();
	
КонецПроцедуры // ЗаписатьДанныеЗапроса()

// Проверят использование механизма регистрации розничных продаж в ЕГАИС.
//
// Параметры:
//  ДатаПродажи  - Дата - дата, на которую нужно проверить использование регистрации продаж.
//                        Если не указана, то проверяться будет текущая дата сеанса.
//
// Возвращаемое значение:
//   Булево   - признак использования регистрации продаж.
//
Функция ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(Знач ДатаПродажи = Неопределено) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаПродажи) Тогда
		ДатаПродажи = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДатаНачалаРегистрации = ПолучитьЗначениеКонстанты("ДатаНачалаРегистрацииРозничныхПродажВЕГАИС");
	
	Возврат ДатаПродажи >= ДатаНачалаРегистрации И ЗначениеЗаполнено(ДатаНачалаРегистрации);

КонецФункции // ИспользуетсяРегистрацияРозничныхПродажВЕГАИС()

// Возвращает все необработанные исходящие запросы
//
Функция ПолучитьИсходящиеЗапросы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапросыЕГАИС.Идентификатор
	|ИЗ
	|	РегистрСведений.ЗапросыЕГАИС КАК ЗапросыЕГАИС
	|ГДЕ
	|	ЗапросыЕГАИС.ДатаОтвета = ДАТАВРЕМЯ(1, 1, 1)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
КонецФункции // ПолучитьИсходящиеЗапросы()

// Получение значения константы.
//
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт

	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции // ПолучитьЗначениеКонстанты()