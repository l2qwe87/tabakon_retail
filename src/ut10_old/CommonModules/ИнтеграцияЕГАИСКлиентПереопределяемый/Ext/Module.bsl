////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Подготавливает входящие данные для подписи чека.
//
// Параметры:
//  ПараметрыЧека        - Массив - массив, содержащий элементы:
//     0 - Таблица товаров - таблица значений с колонками:
//             1 - Наименование,
//             2 - НомерСекции,
//             3 - Цена,
//             4 - Количество,
//             5 - Скидка,
//             6 - СтавкаНДС,
//             7 - ПараметрыАлкогольнойПродукции - Структура с ключами:
//                    АлкогольнаяПродукция (Булево),
//                    Маркируемая (Булево),
//                    Штрихкод (Строка),
//                    ШтрихкодМарки (Строка, PDF417),
//                    Объем (Число),
//                    Крепость (Число, %),
//                    Код вида алкогольной продукции (Строка).
//     1 - Сумма оплаты наличными,
//     2 - Сумма оплаты по безналу,
//     3 - Признак возврата,
//     4 - ИНН организации,
//     5 - КПП торгового объекта,
//     6 - Адрес магазина,
//     7 - Наименование магазина,
//     8 - Заводской номер ККМ.
//  НомерЧека            - Число - номер чека ККМ,
//  НомерСмены           - Число - номер смены ККМ,
//  РезультатПодготовки  - Структура - возвращаемый параметр, результат подготовки входящих данных.
//
// Возвращаемое значение:
//   Структура - входящие данные, необходимые для формирования подписи чека в ЕГАИС.
//
Функция ПодготовитьВходящиеДанныеДляПодписиЧека(ПараметрыЧека, НомерЧека = 0, НомерСмены = 0, РезультатПодготовки = Неопределено) Экспорт

	РезультатПодготовки = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	
	ВходящиеДанные = СтруктураДанныхЧекаККМ();
	
	ТаблицаТоваров = ПараметрыЧека[0];
	
	Если ТаблицаТоваров.Колонки.Найти("ПараметрыАлкогольнойПродукции") = Неопределено Тогда
		РезультатПодготовки.ОписаниеОшибки = НСтр("ru = 'В процедуру подготовки входящих данных передана некорректная структура параметров.'");
		Возврат ВходящиеДанные;
	КонецЕсли;
	
	ВыгружатьНемаркируемуюПродукцию = ИнтеграцияЕГАИСКлиентПовтИсп.ВыгружатьПродажиНемаркируемойПродукцииВЕГАИС();
	
	ВходящиеДанные.ИНН                  = ПараметрыЧека[4];
	ВходящиеДанные.КПП                  = ПараметрыЧека[5];
	ВходящиеДанные.АдресМагазина        = ПараметрыЧека[6];
	ВходящиеДанные.НаименованиеМагазина = ПараметрыЧека[7];
	ВходящиеДанные.ЗаводскойНомерККМ    = ПараметрыЧека[8];
	ВходящиеДанные.НомерСменыККМ        = НомерСмены;
	ВходящиеДанные.НомерЧекаККМ         = НомерЧека;
	ВходящиеДанные.ДатаВремяЧека        = ТекущаяДата();
	ВходящиеДанные.Возврат              = ПараметрыЧека[3];
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		ПараметрыАлкогольнойПродукции = СтрокаТаблицы.ПараметрыАлкогольнойПродукции;
		
		Если ТипЗнч(ПараметрыАлкогольнойПродукции) <> Тип("Структура") Тогда
			РезультатПодготовки.ОписаниеОшибки = НСтр("ru = 'В процедуру подготовки входящих данных передана некорректная структура параметров.'");
			Возврат ВходящиеДанные;
		КонецЕсли;
		
		Если НЕ ПараметрыАлкогольнойПродукции.Свойство("АлкогольнаяПродукция")
			ИЛИ НЕ ПараметрыАлкогольнойПродукции.Свойство("Маркируемая")
			ИЛИ НЕ ПараметрыАлкогольнойПродукции.Свойство("Штрихкод")
			ИЛИ НЕ ПараметрыАлкогольнойПродукции.Свойство("Объем") Тогда
			РезультатПодготовки.ОписаниеОшибки = НСтр("ru = 'В процедуру подготовки входящих данных передана некорректная структура параметров.'");
			Возврат ВходящиеДанные;
		КонецЕсли;
		
		Если НЕ ПараметрыАлкогольнойПродукции.АлкогольнаяПродукция Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыАлкогольнойПродукции.Маркируемая Тогда
			
			Если НЕ ПараметрыАлкогольнойПродукции.Свойство("ШтрихкодМарки") Тогда
				РезультатПодготовки.ОписаниеОшибки = НСтр("ru = 'Отсутствует обязательное поле ""Штрихкод марки"".'");
				Возврат ВходящиеДанные;
			КонецЕсли;
			
		Иначе
			
			Если НЕ ВыгружатьНемаркируемуюПродукцию Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ПараметрыАлкогольнойПродукции.Свойство("Крепость") Тогда
				РезультатПодготовки.ОписаниеОшибки = НСтр("ru = 'Отсутствует обязательное поле ""Крепость"".'");
				Возврат ВходящиеДанные;
			КонецЕсли;
			
			Если НЕ ПараметрыАлкогольнойПродукции.Свойство("КодВидаПродукции") Тогда
				РезультатПодготовки.ОписаниеОшибки = НСтр("ru = 'Отсутствует обязательное поле ""Код вида алкогольной продукции"".'");
				Возврат ВходящиеДанные;
			КонецЕсли;
			
		КонецЕсли;
		
		КоличествоСтрок = ?(ПараметрыАлкогольнойПродукции.Маркируемая, СтрокаТаблицы.Количество, 1);
		
		Для Сч = 1 По КоличествоСтрок Цикл
			СтрокаЧека = СтруктураДанныхСтрокиЧекаККМ();
			СтрокаЧека.Наименование   = СтрокаТаблицы.Наименование;
			СтрокаЧека.Количество     = ?(ПараметрыАлкогольнойПродукции.Маркируемая, 1, СтрокаТаблицы.Количество);
			
			Если СтрокаТаблицы.Количество = 0 ИЛИ СтрокаТаблицы.Скидка = 0 Тогда
				СтрокаЧека.Цена = СтрокаТаблицы.Цена;
			Иначе
				СтрокаЧека.Цена = Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.Скидка * 0.01, 2);
			КонецЕсли;
			
			СтрокаЧека.ШтрихкодТовара = ПараметрыАлкогольнойПродукции.Штрихкод;
			СтрокаЧека.Объем          = ПараметрыАлкогольнойПродукции.Объем;
			
			Если НЕ ПараметрыАлкогольнойПродукции.Маркируемая Тогда
				СтрокаЧека.Крепость = ПараметрыАлкогольнойПродукции.Крепость;
				СтрокаЧека.КодВидаПродукции = ПараметрыАлкогольнойПродукции.КодВидаПродукции;
				ВходящиеДанные.ТаблицаТоваровБезМарки.Добавить(СтрокаЧека);
			Иначе
				Если ТипЗнч(ПараметрыАлкогольнойПродукции.ШтрихкодМарки) = Тип("Массив") Тогда
					СтрокаЧека.ШтрихкодМарки = ?(ПараметрыАлкогольнойПродукции.ШтрихкодМарки.ВГраница() < Сч - 1, "", ПараметрыАлкогольнойПродукции.ШтрихкодМарки[Сч - 1]);
				ИначеЕсли ТипЗнч(ПараметрыАлкогольнойПродукции.ШтрихкодМарки) = Тип("Строка") И Сч = 1 Тогда
					СтрокаЧека.ШтрихкодМарки = ПараметрыАлкогольнойПродукции.ШтрихкодМарки;
				КонецЕсли;
				
				ВходящиеДанные.ТаблицаТоваров.Добавить(СтрокаЧека);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	РезультатПодготовки.Результат = Истина;
	
	Возврат ВходящиеДанные;

КонецФункции // ПодготовитьВходящиеДанныеДляПодписиЧека()

// Проверяет корректность входящих данных перед отправкой запроса в УТМ.
//
// Параметры:
//  ТранспортныйМодуль - Структура - данные УТМ, в котором требуется подписать чек,
//  ПараметрыЧекаЕГАИС - Структура - подготовленные ранее данные чека.
//
// Возвращаемое значение:
//   Структура - результат проверки данных.
//
Функция ПроверитьВходящиеДанныеПередПодписьюЧека(ТранспортныйМодуль, ПараметрыЧекаЕГАИС) Экспорт
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.ИНН) И НЕ ПустаяСтрока(ТранспортныйМодуль.ИНН) Тогда
		ПараметрыЧекаЕГАИС.ИНН = ТранспортныйМодуль.ИНН;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.КПП) И НЕ ПустаяСтрока(ТранспортныйМодуль.КПП) Тогда
		ПараметрыЧекаЕГАИС.КПП = ТранспортныйМодуль.КПП;
	КонецЕсли;
	
	Если (ПустаяСтрока(ПараметрыЧекаЕГАИС.АдресМагазина) ИЛИ СтрДлина(ПараметрыЧекаЕГАИС.АдресМагазина) > 128) И НЕ ПустаяСтрока(ТранспортныйМодуль.Адрес) Тогда
		ПараметрыЧекаЕГАИС.АдресМагазина = Лев(ТранспортныйМодуль.Адрес, 128);
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.НаименованиеМагазина) И НЕ ПустаяСтрока(ТранспортныйМодуль.Представление) Тогда
		ПараметрыЧекаЕГАИС.НаименованиеМагазина = Лев(ТранспортныйМодуль.Представление, 128);
	КонецЕсли;
	
	МассивКлючей = Новый Массив;
	ТекстОшибки  = "";
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.ИНН) Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Не указан ИНН организации.'"), "");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.КПП) И СтрДлина(ПараметрыЧекаЕГАИС.ИНН) = 10 Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Не указан КПП торгового объекта.'"), "");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.АдресМагазина) Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Не указан адрес магазина.'"), "");
	КонецЕсли;
	
	Для каждого СтрокаЧека Из ПараметрыЧекаЕГАИС.ТаблицаТоваров Цикл
		
		ПроверитьОбщиеПоляСтрокиЧека(СтрокаЧека, ТекстОшибки);
		
		Если СтрокаЧека.Количество <> 1 Тогда
			ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Товар %1. 
															|Количество маркируемой алкогольной продукции всегда должно равняться 1.'"), СтрокаЧека.Наименование);
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаЧека.ШтрихкодМарки) Тогда
			ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Товар %1. 
															|Не указан штрихкод марки алкогольной продукции.'"), СтрокаЧека.Наименование);
		КонецЕсли;
		
		КлючСтроки = СокрЛП(СтрокаЧека.ШтрихкодТовара) + СокрЛП(СтрокаЧека.ШтрихкодМарки);
		Если МассивКлючей.Найти(КлючСтроки) <> Неопределено Тогда
			ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'В чеке обнаружены дублирующиеся позиции.'"), "");
		КонецЕсли;
		
		МассивКлючей.Добавить(КлючСтроки);
	КонецЦикла;
	
	Для каждого СтрокаЧека Из ПараметрыЧекаЕГАИС.ТаблицаТоваровБезМарки Цикл
		
		ПроверитьОбщиеПоляСтрокиЧека(СтрокаЧека, ТекстОшибки);
		
		Если СтрокаЧека.Крепость = 0 Тогда
			ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Товар %1. 
															|Не указана крепость алкогольной продукции.'"), СтрокаЧека.Наименование);
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаЧека.КодВидаПродукции) Тогда
			ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Товар %1. 
															|Не указан код вида алкогольной продукции.'"), СтрокаЧека.Наименование);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.ОписаниеОшибки = ТекстОшибки;
	Результат.Результат = ПустаяСтрока(ТекстОшибки);
	
	Возврат Результат;
	
КонецФункции // ПроверитьВходящиеДанныеПередПодписьюЧека()

// Печатает фискальный чек на ФР.
//
// Параметры
//  ИдентификаторУстройства - Строка - Идентификатор фискального регистратора,
//  НомерЧека               - Число  - Номер чека ККМ. Выходной параметр,
//  НомерСмены              - Число  - Номер смены ККМ. Выходной параметр,
//  ПараметрыЧека           - Массив - массив, содержащий элементы:
//     0 - Таблица товаров - таблица значений с колонками:
//             1 - Наименование,
//             2 - НомерСекции,
//             3 - Цена,
//             4 - Количество,
//             5 - Скидка,
//             6 - СтавкаНДС,
//             7 - ПараметрыАлкогольнойПродукции - Структура с ключами:
//                    АлкогольнаяПродукция (Булево),
//                    Маркируемая (Булево),
//                    Штрихкод (Строка),
//                    ШтрихкодМарки (Строка, PDF417),
//                    Объем (Число),
//                    Крепость (Число, %),
//                    Код вида алкогольной продуккции (Строка).
//     1 - Сумма оплаты наличными,
//     2 - Сумма оплаты по безналу,
//     3 - Признак возврата,
//     4 - ИНН организации,
//     5 - КПП торгового объекта,
//     6 - Адрес магазина,
//     7 - Наименование магазина,
//     8 - Заводской номер ККМ.
//
// Возвращаемое значение:
//   Структура   - результат печати чека.
//
Функция ПечатьЧека(ИдентификаторУстройства, НомерЧека, НомерСмены, ПараметрыЧека) Экспорт

	Результат = Новый Структура("Результат, ОписаниеОшибки, РезультатПечатиЧека", Ложь, "", Неопределено);
	
	Результат.РезультатПечатиЧека = МенеджерРаботыСОборудованием().ПечатьЧека(
		ИдентификаторУстройства,
		НомерЧека,
		НомерСмены,
		ПараметрыЧека[0],
		ПараметрыЧека[1],
		ПараметрыЧека[2],
		ПараметрыЧека[3]);

	Если НЕ ЗначениеЗаполнено(Результат.РезультатПечатиЧека) Тогда
		Результат.Результат = Истина;
	Иначе
		Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка печати чека на ФР.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПечатьЧека()

// Печатает слип-чек на ФР.
//
// Параметры
//  ИдентификаторУстройства - Строка    - Идентификатор фискального регистратора,
//  ПараметрыЧекаЕГАИС      - Структура - параметры чека в формате ЕГАИС,
//  ШиринаСтроки            - Число     - ширина строки инфо-квитанции.
//
// Возвращаемое значение:
//   Структура   - результат печати слип-чека.
//
Функция ПечатьСлипЧека(ИдентификаторУстройства, ПараметрыЧекаЕГАИС, ШиринаСтроки = Неопределено) Экспорт

	Результат = Новый Структура("Результат, ОписаниеОшибки, РезультатПечатиЧека", Ложь, "", Неопределено);
	
	МассивСтрокСлипЧека = СформироватьМассивСтрокСлипЧека(ПараметрыЧекаЕГАИС, ШиринаСтроки);
	
	Результат.РезультатПечатиЧека = МенеджерРаботыСОборудованием().ОткрытьЧек(ИдентификаторУстройства, "",
																			  ПараметрыЧекаЕГАИС.Свойство("Возврат") И ПараметрыЧекаЕГАИС.Возврат,
																			  ПараметрыЧекаЕГАИС.НомерЧекаККМ, ПараметрыЧекаЕГАИС.НомерСменыККМ, Ложь);

	Если ЗначениеЗаполнено(Результат.РезультатПечатиЧека) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка открытия слип-чека.'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.РезультатПечатиЧека = МенеджерРаботыСОборудованием().ПечатьТекста(ИдентификаторУстройства, МассивСтрокСлипЧека, ШиринаСтроки);
	
	Если ЗначениеЗаполнено(Результат.РезультатПечатиЧека) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка печати слип-чека.'");
		Возврат Результат;
	КонецЕсли;

	Результат.РезультатПечатиЧека = МенеджерРаботыСОборудованием().ЗакрытьЧек(ИдентификаторУстройства, 0, 0);
	
	Если ЗначениеЗаполнено(Результат.РезультатПечатиЧека) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка закрытия слип-чека.'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.Результат = Истина;
	
	Возврат Результат;

КонецФункции // ПечатьСлипЧека()

// Возвращает ссылку на перечисление, соответствующее ошибочным входящим данным.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТООшибки* - вид ошибки.
//
Функция ОшибкаПодготовкиВходящихДанных() Экспорт
	
	Возврат Вычислить("Перечисления.ТООшибкиОбщие.ОшибкаНеизвестно");
	
КонецФункции

// Возвращает ссылку на перечисление, соответствующее ошибке подписи чека.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТООшибки* - вид ошибки.
//
Функция ОшибкаФормированияЭлектроннойПодписи() Экспорт
	
	Возврат Вычислить("Перечисления.ТООшибкиОбщие.ОшибкаНеизвестно");
	
КонецФункции

// Процедура, которую необходимо подключить в обработчик ожидания на клиенте.
//
// Параметры: нет.
//
Процедура ЗапуститьОбработкуОтветовЕГАИС() Экспорт
	
	СписокУТМ = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули();
	
	Для каждого ТранспортныйМодуль Из СписокУТМ Цикл
		ИнтеграцияЕГАИСКлиентСервер.ОбработатьОтветыИзУТМ(ТранспортныйМодуль, Ложь);
	КонецЦикла;
	
КонецПроцедуры // ЗапуститьОбработкуОтветовЕГАИС()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает общий модуль, содержащий процедуры работы с торговым оборудованием.
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//   ОбщийМодуль   - менеджер работы с оборудованием.
//
Функция МенеджерРаботыСОборудованием()

	Возврат Вычислить("ПолучитьСерверТО()");

КонецФункции // МенеджерРаботыСОборудованием()

// Формирует массив строк слип-чека для печати инфо-квитанции ЕГАИС.
//
// Параметры:
//  ПараметрыЧекаЕГАИС - Структура - данные чека в формате ЕГАИС,
//  ШиринаСтроки       - Число     - ширина строки инфо-квитанции.
// 
// Возвращаемое значение:
//  Массив - массив строк слип-чека для печати инфо-квитанции.
//
Функция СформироватьМассивСтрокСлипЧека(ПараметрыЧекаЕГАИС, Знач ШиринаСтроки)
	
	Если НЕ ЗначениеЗаполнено(ШиринаСтроки) Тогда
		ШиринаСтроки = 32;
	КонецЕсли;
	
	// Сформировать шапку чека.
	Текст = ВыстроитьПоля(ПараметрыЧекаЕГАИС.НаименованиеМагазина, , ШиринаСтроки) + Символы.ПС;
	
	ОрганизацияИНН = ?(НЕ ПустаяСтрока(ПараметрыЧекаЕГАИС.ИНН), НСтр("ru='ИНН:'") + Символы.НПП + ПараметрыЧекаЕГАИС.ИНН, "");
	ОрганизацияКПП = ?(НЕ ПустаяСтрока(ПараметрыЧекаЕГАИС.КПП), НСтр("ru='КПП:'") + Символы.НПП + ПараметрыЧекаЕГАИС.КПП, "");
	Если Не ПустаяСтрока(ОрганизацияИНН) Или НЕ ПустаяСтрока(ОрганизацияКПП) Тогда
		Текст = Текст + ВыстроитьПоля(ОрганизацияИНН, ОрганизацияКПП, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	НомерКассы = ?(НЕ ПустаяСтрока(ПараметрыЧекаЕГАИС.ЗаводскойНомерККМ), НСтр("ru='КАССА:'") + Символы.НПП + ПараметрыЧекаЕГАИС.ЗаводскойНомерККМ, "");
	НомерСмены = ?(НЕ ПустаяСтрока(ПараметрыЧекаЕГАИС.НомерСменыККМ), НСтр("ru='СМЕНА:'") + Символы.НПП + ПараметрыЧекаЕГАИС.НомерСменыККМ, "");
	Если Не ПустаяСтрока(НомерКассы) Или НЕ ПустаяСтрока(НомерСмены) Тогда
		Текст = Текст + ВыстроитьПоля(НомерКассы, НомерСмены, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	НомерЧека = ?(НЕ ПустаяСтрока(ПараметрыЧекаЕГАИС.НомерЧекаККМ), НСтр("ru='ЧЕК:'") + Символы.НПП + ПараметрыЧекаЕГАИС.НомерЧекаККМ, "");
	ДатаВремя = ?(НЕ ПустаяСтрока(ПараметрыЧекаЕГАИС.ДатаВремяЧека), ПараметрыЧекаЕГАИС.ДатаВремяЧека, ТекущаяДата());
	ДатаВремя = НСтр("ru='ДАТА:'") + Символы.НПП + Формат(ДатаВремя, "ДФ=""дд.ММ.гггг ЧЧ:мм""");
	Если Не ПустаяСтрока(НомерЧека) Или НЕ ПустаяСтрока(ДатаВремя) Тогда
		Текст = Текст + ВыстроитьПоля(НомерЧека, ДатаВремя, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	
	МассивСтрок.Добавить(Текст + Символы.ПС);
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(ПостроитьПолеПереносом(ПараметрыЧекаЕГАИС.Адрес, ШиринаСтроки));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(ПостроитьПолеПереносом(ПараметрыЧекаЕГАИС.Подпись, ШиринаСтроки));
	
	Возврат МассивСтрок;
	
КонецФункции

// Обрезает передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
Функция ПостроитьПоле(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ДобавлятьСправа = Истина)
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если ДобавлятьСправа Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		Иначе
			ТекстПолный = ДобСимвол + ТекстПолный;
		КонецЕсли;
	КонецЦикла;
	          
	Возврат ТекстПолный;
	
КонецФункции // ПостроитьПоле()

// Выстраивает строку по длине поля, если поле длинное - переносит на следующую строку.
//
Функция ПостроитьПолеПереносом(Знач Текст, Знач ДлинаПоля, ДобСимвол = "")
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	Если СтрДлина(Текст) > ДлинаПоля Тогда 
		ТекстПолный = "";
		Пока СтрДлина(Текст) > ДлинаПоля Цикл
			ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС) +  Лев(Текст, ДлинаПоля);
			Текст = Сред(Текст, ДлинаПоля + 1);
		КонецЦикла;
		ТекстПолный = ТекстПолный + ?(ПустаяСтрока(Текст), "", Символы.ПС + Текст);
	Иначе
		ТекстПолный = Текст;
	КонецЕсли;
		
	Возврат ТекстПолный;
	
КонецФункции // ПостроитьПолеПереносом()

// Формирует строку из двух полей, если передается одно поле дополняет символами до нужного размера.
//
Функция ВыстроитьПоля(Знач Текст1, Знач Текст2 = "", Знач ДлинаПоля)
	
	Если ПустаяСтрока(Текст2) Тогда
		ТекстПолный = ПостроитьПоле(Текст1, СтрДлина(Текст1) + Цел((ДлинаПоля - СтрДлина(Текст1))/2), , Ложь);
		ТекстПолный = ПостроитьПоле(ТекстПолный, ДлинаПоля);
	ИначеЕсли СтрДлина(Текст1) + СтрДлина(Текст2) < ДлинаПоля Тогда
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля - СтрДлина(Текст2)) + Текст2;
	Иначе
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля) + Символы.ПС + ПостроитьПоле(Текст2, ДлинаПоля, ,Ложь)
	КонецЕсли;
	
	Возврат ТекстПолный;
	
КонецФункции // ВыстроитьПоля()

// Возвращает структуру данных чека для формирования подписи ЕГАИС.
//
Функция СтруктураДанныхЧекаККМ()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИНН"                   , "");           // ИНН Организации
	СтруктураДанных.Вставить("КПП"                   , Неопределено); // КПП обособленного подразделения по розничной лицензии.
	СтруктураДанных.Вставить("АдресМагазина"         , "");           // Адрес обособленного подразделения по розничной лицензии (Длина до 128 символов).
	СтруктураДанных.Вставить("НаименованиеМагазина"  , "");           // Наименование магазина (Длина до 128 символов).
	СтруктураДанных.Вставить("ЗаводскойНомерККМ"     , "");           // Заводской номер ККМ (Длина до 128 символов).
	СтруктураДанных.Вставить("НомерСменыККМ"         , 0);            // Номер смены.
	СтруктураДанных.Вставить("НомерЧекаККМ"          , 0);            // Номер чека.
	СтруктураДанных.Вставить("ДатаВремяЧека"         , '00010101');   // Дата, время чека. Формат: ДДММГГЧЧММ - день, месяц, год, часы, минуты.
	СтруктураДанных.Вставить("Возврат"               , Ложь);         // Если Истина - то покупатель возвращает товар.
	СтруктураДанных.Вставить("ТаблицаТоваров"        , Новый Массив); // Таблица товаров
	СтруктураДанных.Вставить("ТаблицаТоваровБезМарки", Новый Массив); // Таблица товаров без марки
	
	Возврат СтруктураДанных;
	
КонецФункции // СтруктураДанныхЧекаККМ()

// Возвращает структуру данных строки чека для формирования подписи ЕГАИС.
//
Функция СтруктураДанныхСтрокиЧекаККМ()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Цена"            , 0);
	СтруктураДанных.Вставить("ШтрихкодМарки"   , "");
	СтруктураДанных.Вставить("ШтрихкодТовара"  , "");
	СтруктураДанных.Вставить("Объем"           , 0);
	СтруктураДанных.Вставить("КодВидаПродукции", "");
	СтруктураДанных.Вставить("Наименование"    , "");
	СтруктураДанных.Вставить("Крепость"        , 0);
	СтруктураДанных.Вставить("Количество"      , 0);
	
	Возврат СтруктураДанных;
	
КонецФункции // СтруктураДанныхСтрокиЧекаККМ()

// Добавляет в текст ошибки строку с ошибкой.
//
// Параметры:
//  ТекстОшибки  - Строка - Общий текст ошибки,
//  СтрокаОшибки - Строка - Добавляемая строка ошибки,
//  Номенклатура - Строка - Номенклатура, для которой зафиксирована ошибка.
//
Процедура ДобавитьСтрокуСОшибкой(ТекстОшибки, СтрокаОшибки, Номенклатура)

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС;
	КонецЕсли;
	
	ТекстОшибки = ТекстОшибки + СтрЗаменить(СтрокаОшибки, "%1", Номенклатура);

КонецПроцедуры // ДобавитьСтрокуСОшибкой()

// Проверяет общие поля для строки чека с маркируемым алкоголем и для пивного чека.
//
Процедура ПроверитьОбщиеПоляСтрокиЧека(СтрокаЧека, ТекстОшибки)
	
	Если ПустаяСтрока(СтрокаЧека.ШтрихкодТовара) Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Товар %1. 
														|Не указан штрихкод производителя алкогольной продукции.'"), СтрокаЧека.Наименование);
	КонецЕсли;
	
	Если СтрокаЧека.Цена = 0 Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Товар %1. 
														|Не указана цена.'"), СтрокаЧека.Наименование);
	КонецЕсли;
	
	Если СтрокаЧека.Объем = 0 Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Товар %1. 
														|Не указан объем алкогольной продукции.'"), СтрокаЧека.Наименование);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьОбщиеПоляСтрокиЧека()

//Устанавливает видимость группы ЕГАИС при полном интерфейсе в зависимости от ФО
Процедура УстановитьВидимостьИнтерфейсаЕГАИС() Экспорт
	
	ОсновнойИнтерфейс = ПользователиИнформационнойБазы.ТекущийПользователь().ОсновнойИнтерфейс;
	
	Если ОсновнойИнтерфейс = Неопределено Тогда
		ОсновнойИнтерфейс = Метаданные.ОсновнойИнтерфейс;
		Если ОсновнойИнтерфейс = Неопределено Тогда
			ИмяИнтерфейса = "Полный";
		Иначе
			ИмяИнтерфейса = ОсновнойИнтерфейс.Имя;
		КонецЕсли;
	Иначе
		ИмяИнтерфейса = ОсновнойИнтерфейс.Имя;
	КонецЕсли;
	
	ИспользованиеАлкогольнойПродукции = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	Если ИспользованиеАлкогольнойПродукции Тогда
		ИмяИнтерфейса = ИмяИнтерфейса + ",ИнтерфейсЕГАИС"
	КонецЕсли;
	
	ГлавныйИнтерфейс.ПереключитьИнтерфейс(ИмяИнтерфейса);
	
КонецПроцедуры
