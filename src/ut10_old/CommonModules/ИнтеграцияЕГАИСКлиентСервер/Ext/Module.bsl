
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает структуру, необходимую для запроса классификатора.
//
// Параметры: нет.
//
// Возвращаемое значение:
//   Структура   - структура параметров запроса.
//
Функция ПараметрыЗапросаКлассификатора() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ИНН", "");
	
	Возврат Результат;

КонецФункции // ПараметрыЗапросаКлассификатора()

// Возвращает структуру результата подписи чека в ЕГАИС.
//
// Параметры:
//  ТранспортныйМодуль - Структура - данные транспортного модуля, в котором требуется получить подпись.
//
// Возвращаемое значение:
//   Структура   - структура результата подписи чека.
//
Функция РезультатЭлектроннойПодписиЧека(ТранспортныйМодуль = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Результат"         , Ложь);
	Результат.Вставить("ОписаниеОшибки"    , "");
	Результат.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	Результат.Вставить("Адрес"             , "");
	Результат.Вставить("Подпись"           , "");
	
	Возврат Результат;

КонецФункции // РезультатЭлектроннойПодписиЧека()

// Формирует синоним по переданному имени.
//
// Параметры:
//  Имя  - Строка - имя элемента или объекта.
//
// Возвращаемое значение:
//   Строка - синоним, сформированный из имени.
//
Функция Синоним(Имя) Экспорт

	Наименование = "";
	ТекСимвол = "";
	
	Для Сч = 1 По СтрДлина(Имя) Цикл
		
		Если НРег(ТекСимвол) = ТекСимвол И ВРег(Сред(Имя, Сч, 1)) = Сред(Имя, Сч, 1) И Найти("0123456789", Сред(Имя, Сч, 1)) = 0 И НЕ ПустаяСтрока(ТекСимвол) Тогда
			Наименование = Наименование + " ";
			
			Если Сч + 1 <= СтрДлина(Имя) Тогда
				Если ВРег(Сред(Имя, Сч + 1, 1)) = Сред(Имя, Сч + 1, 1) Тогда
					Наименование = Наименование + Сред(Имя, Сч, 1);
				Иначе
					Наименование = Наименование + НРег(Сред(Имя, Сч, 1));
				КонецЕсли;
			Иначе
				Наименование = Наименование + Сред(Имя, Сч, 1);
			КонецЕсли;
			
		Иначе
			Наименование = Наименование + Сред(Имя, Сч, 1);
		КонецЕсли;
		
		ТекСимвол = Сред(Имя, Сч, 1);
	
	КонецЦикла;
	
	Возврат Наименование;

КонецФункции // Синоним()

#Если НЕ ВебКлиент Тогда

// Формирует запрос в ТМ ЕГАИС.
//
// Параметры:
//  ТранспортныйМодуль - Структура - данные из регистра сведений НастройкиОбменаЕГАИС,
//  ВидОбъекта         - СправочникСсылка.ВидыОбъектовЕГАИС - вид запроса отправляемый в транспортный модуль,
//  Параметры          - Структура - параметры исходящего документа.
//
// Возвращаемое значение:
//   Структура - результат формирования запроса.
//
Функция СформироватьЗапросВУТМ(ТранспортныйМодуль, ВидОбъекта, Параметры) Экспорт

	Результат = Новый Структура("Результат, ОписаниеОшибки, ИдентификаторЗапроса", Ложь, "", "");
	
	Если ВидОбъекта = Неопределено Тогда
		Возврат ЗавершитьОперациюСОшибкой(Результат, НСтр("ru = 'Не определен вид объекта системы ЕГАИС.'"));
	КонецЕсли;
	
	ПараметрыЗапроса = ИнтеграцияЕГАИСВызовСервера.ПараметрыЗапросаДокументаЕГАИС(ТранспортныйМодуль, ВидОбъекта, Параметры);
	
	РезультатОперации = ОтправитьДанныеВУТМ(ТранспортныйМодуль, ПараметрыЗапроса.АдресЗапроса, ПараметрыЗапроса.ТекстЗапроса);
	
	Если НЕ РезультатОперации.Результат Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось отправить запрос в транспортный модуль.'") + Символы.ПС + РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(РезультатОперации.ОтветМодуляЕГАИС);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	УзлыURL = ДокументDOM.ПолучитьЭлементыПоИмени("url");
	
	Если УзлыURL.Количество() = 0 Тогда
		Возврат ЗавершитьОперациюСОшибкой(Результат, НСтр("ru = 'Сервер отклонил запрос:'") + Символы.ПС + РезультатОперации.ОтветМодуляЕГАИС);
	КонецЕсли;
	
	Для каждого УзелURL Из УзлыURL Цикл
		
		Если НЕ ПустаяСтрока(УзелURL.ТекстовоеСодержимое) Тогда
			Результат.ИдентификаторЗапроса = УзелURL.ТекстовоеСодержимое;
			Результат.Результат = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Если Результат.Результат Тогда
		ИнтеграцияЕГАИСВызовСервера.ЗаписатьДанныеЗапроса(Результат.ИдентификаторЗапроса, ВидОбъекта);
		Возврат Результат;
	Иначе
		Возврат ЗавершитьОперациюСОшибкой(Результат, НСтр("ru = 'Ответ транспортного модуля не содержит идентификатор запроса.'"));
	КонецЕсли;

КонецФункции // СформироватьЗапросВУТМ()

// Загружает новые документы из транспортного модуля.
//
// Параметры:
//  ТранспортныйМодуль      - Структура    - данные из регистра сведений НастройкиОбменаЕГАИС,
//  ФильтрURL               - Строка       - фильтр по адресу запроса,
//  ОтображатьСообщения     - Булево       - если Истина, то пользователю будут отображены сообщения с ошибками,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
// Возвращаемое значение:
//   Структура - результат загрузки документов.
//
Функция ЗагрузитьДокументыИзУТМ(ТранспортныйМодуль, ФильтрURL = "", ОтображатьСообщения = Истина, ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = РезультатЗагрузкиВходящихДокументов();
	
	РезультатОперации = ПолучитьДанныеИзУТМ(ТранспортныйМодуль, "/opt/out");
	
	Если НЕ РезультатОперации.Результат Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось получить список входящих документов.'") + Символы.ПС + РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(РезультатОперации.ОтветМодуляЕГАИС);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	УзлыURL = ДокументDOM.ПолучитьЭлементыПоИмени("url");
	
	Для каждого УзелURL Из УзлыURL Цикл
		
		Если УзелURL.Атрибуты.ПолучитьИменованныйЭлемент("replyId") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ФильтрURL) Тогда
			СписокФильтров = РазложитьСтрокуВМассивПодстрок(ФильтрURL, ",", Истина);
			
			ЗагрузкаДокумента = Ложь;
			Для каждого Фильтр Из СписокФильтров Цикл
				Если Найти(ВРег(УзелURL.ТекстовоеСодержимое), ВРег(СокрЛП(Фильтр))) <> 0 Тогда
					ЗагрузкаДокумента = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ЗагрузкаДокумента Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(УзелURL.ТекстовоеСодержимое);
		
		РезультатОперации = ПолучитьДанныеИзУТМ(ТранспортныйМодуль, СтруктураURI.ПутьНаСервере);
		
		Если НЕ РезультатОперации.Результат Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось получить входящий документ %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", УзелURL.ТекстовоеСодержимое);
			Результат.ОписаниеОшибки = ТекстОшибки + Символы.ПС + РезультатОперации.ОписаниеОшибки;
			Возврат Результат;
		КонецЕсли;
		
		СтруктураДокумента = Новый Структура("АдресЗапроса, ТекстXML", УзелURL.ТекстовоеСодержимое, РезультатОперации.ОтветМодуляЕГАИС);
		
		МассивДокументов.Добавить(СтруктураДокумента);
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	ЗагруженныеДокументы = ИнтеграцияЕГАИСВызовСервера.ОбработатьВходящиеДокументы(МассивДокументов, ДополнительныеПараметры);
	
	РегистрацияСправок = ПредопределенноеЗначение("Справочник.ВидыОбъектовЕГАИС.РегистрацияСправокПоТТН");
	
	Для каждого КлючЗначение Из ЗагруженныеДокументы Цикл
		
		Если НЕ КлючЗначение.Значение.Результат Тогда
			Результат.ДокументыСОшибками.Добавить(Новый Структура("АдресДокумента, ОписаниеОшибки", КлючЗначение.Ключ, КлючЗначение.Значение.ОписаниеОшибки));
			
			Если ОтображатьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КлючЗначение.Значение.ОписаниеОшибки);
			КонецЕсли;
		Иначе
			РезультатОперации = УдалитьДанныеИзУТМ(ТранспортныйМодуль, ОбщегоНазначенияКлиентСервер.СтруктураURI(КлючЗначение.Ключ).ПутьНаСервере);
			
			Если НЕ РезультатОперации.Результат Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось удалить входящий документ %1'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", КлючЗначение.Ключ);
				ТекстОшибки = ТекстОшибки + Символы.ПС + РезультатОперации.ОписаниеОшибки;
				
				Если ОтображатьСообщения Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			Если КлючЗначение.Значение.ВидОбъекта <> РегистрацияСправок Тогда
				Результат.ЗагруженоДокументов = Результат.ЗагруженоДокументов + 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Результат = Истина;
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьДокументыИзУТМ()

// Обрабатывает ответы из транспортного модуля.
//
// Параметры:
//  ТранспортныйМодуль      - Структура - данные из регистра сведений НастройкиОбменаЕГАИС,
//  ОтображатьСообщения     - Булево - если Истина, то пользователю будут отображены сообщения с ошибками,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
// Возвращаемое значение:
//   Структура - результат обработки ответов.
//
Функция ОбработатьОтветыИзУТМ(ТранспортныйМодуль, ОтображатьСообщения = Истина, ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = РезультатЗагрузкиВходящихДокументов();
	
	// Получение исходящих запросов из ТМ
	РезультатОперации = ПолучитьДанныеИзУТМ(ТранспортныйМодуль, "/opt/in");
	
	Если НЕ РезультатОперации.Результат Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось получить список исходящих документов.'") + Символы.ПС + РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ЗапросыЕГАИС = Новый Соответствие;
	
	УстановитьСоответствиеЗапросов(ЗапросыЕГАИС, РезультатОперации.ОтветМодуляЕГАИС, "АдресЗапроса");
	
	// Получение входящих документов
	РезультатОперации = ПолучитьДанныеИзУТМ(ТранспортныйМодуль, "/opt/out");
	
	Если НЕ РезультатОперации.Результат Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось получить список входящих документов.'") + Символы.ПС + РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	УстановитьСоответствиеЗапросов(ЗапросыЕГАИС, РезультатОперации.ОтветМодуляЕГАИС, "АдресаОтветов");
	
	ИсходящиеЗапросы = ИнтеграцияЕГАИСВызовСервера.ПолучитьИсходящиеЗапросы();
	
	МассивДокументов = Новый Массив;
	ИдентификаторыЗапросов = Новый Соответствие;
	
	Для каждого КлючЗначение Из ЗапросыЕГАИС Цикл
		
		Если ИсходящиеЗапросы.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого АдресОтвета Из КлючЗначение.Значение.АдресаОтветов Цикл
			
			СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресОтвета);
			
			РезультатОперации = ПолучитьДанныеИзУТМ(ТранспортныйМодуль, СтруктураURI.ПутьНаСервере);
			
			Если НЕ РезультатОперации.Результат Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось получить входящий документ %1'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", АдресОтвета);
				Результат.ОписаниеОшибки = ТекстОшибки + Символы.ПС + РезультатОперации.ОписаниеОшибки;
				Возврат Результат;
			КонецЕсли;
			
			СтруктураДокумента = Новый Структура("Идентификатор, АдресЗапроса, ТекстXML", КлючЗначение.Ключ, АдресОтвета, РезультатОперации.ОтветМодуляЕГАИС);
			
			МассивДокументов.Добавить(СтруктураДокумента);
			ИдентификаторыЗапросов.Вставить(АдресОтвета, КлючЗначение.Ключ);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗагруженныеДокументы = ИнтеграцияЕГАИСВызовСервера.ОбработатьВходящиеДокументы(МассивДокументов, ДополнительныеПараметры);
	
	Для каждого КлючЗначение Из ЗагруженныеДокументы Цикл
		
		РезультатОбработкиДокумента = КлючЗначение.Значение;
		
		Если НЕ РезультатОбработкиДокумента.Результат Тогда
			Результат.ДокументыСОшибками.Добавить(Новый Структура("АдресДокумента, ОписаниеОшибки", КлючЗначение.Ключ, РезультатОбработкиДокумента.ОписаниеОшибки));
			
			Если ОтображатьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОбработкиДокумента.ОписаниеОшибки);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		ЗапросЕГАИС = ЗапросыЕГАИС[ИдентификаторыЗапросов[КлючЗначение.Ключ]];
		Если ЗапросЕГАИС = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.ЗагруженоДокументов = Результат.ЗагруженоДокументов + 1;
		
		РезультатОперации = УдалитьДанныеИзУТМ(ТранспортныйМодуль, ОбщегоНазначенияКлиентСервер.СтруктураURI(КлючЗначение.Ключ).ПутьНаСервере);
		
		Если НЕ РезультатОперации.Результат Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось удалить входящий документ %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", КлючЗначение.Ключ);
			ТекстОшибки = ТекстОшибки + Символы.ПС + РезультатОперации.ОписаниеОшибки;
			
			Если ОтображатьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЗапросЕГАИС.АдресЗапроса) Тогда
			РезультатОперации = УдалитьДанныеИзУТМ(ТранспортныйМодуль, ОбщегоНазначенияКлиентСервер.СтруктураURI(ЗапросЕГАИС.АдресЗапроса).ПутьНаСервере);
			
			Если НЕ РезультатОперации.Результат Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось удалить исходящий документ %1'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", ЗапросЕГАИС.АдресЗапроса);
				ТекстОшибки = ТекстОшибки + Символы.ПС + РезультатОперации.ОписаниеОшибки;
				
				Если ОтображатьСообщения Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
			Иначе
				ЗапросЕГАИС.АдресЗапроса = "";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Результат = Истина;
	
	Возврат Результат;
	
КонецФункции // ОбработатьОтветыИзУТМ()

// Получает электронную подпись чека ККМ.
//
// Параметры:
//  ТранспортныйМодуль  - Структура - модуль, в котором требуется подписать чек,
//  ДанныеЧека          - Структура - данные чека,
//  ТаблицаТоваров      - Массив    - состав чека.
//
// Возвращаемое значение:
//   Структура - значения подписи и URL, полученные из ТМ ЕГАИС.
//
Функция ПолучитьЭлектроннуюПодписьЧекаВУТМ(ТранспортныйМодуль, ДанныеЧека, ТаблицаТоваров) Экспорт
	
	Результат = РезультатЭлектроннойПодписиЧека(ТранспортныйМодуль);
	
	ПараметрыЗапроса = ИнтеграцияЕГАИСВызовСервера.ПараметрыЗапросаЧекаККМ(ДанныеЧека, ТаблицаТоваров);
	
	Если НЕ ПараметрыЗапроса.Результат Тогда
		Результат.ОписаниеОшибки = ПараметрыЗапроса.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	РезультатОперации = ОтправитьДанныеВУТМ(ТранспортныйМодуль, ПараметрыЗапроса.АдресЗапроса, ПараметрыЗапроса.ТекстЗапроса);
	
	Если НЕ РезультатОперации.Результат Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось отправить чек в УТМ.'") + Символы.ПС + РезультатОперации.ОписаниеОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(РезультатОперации.ОтветМодуляЕГАИС);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	УзлыURL = ДокументDOM.ПолучитьЭлементыПоИмени("*");
	
	Для каждого УзелURL Из УзлыURL Цикл
		Если УзелURL.ИмяУзла = "url" Тогда
			Результат.Адрес = УзелURL.ТекстовоеСодержимое;
		ИначеЕсли УзелURL.ИмяУзла = "sign" Тогда
			Результат.Подпись = УзелURL.ТекстовоеСодержимое;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Результат.Результат = Истина;
	
	Возврат Результат;
	
КонецФункции // ПолучитьЭлектроннуюПодписьЧекаВУТМ()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если НЕ ВебКлиент Тогда

// Функция передачи данных в транспортный модуль ЕГАИС.
//
// Параметры:
//  ТранспортныйМодуль - Структура - модуль, в который требуется передать данные,
//  АдресРесурса       - Строка    - адрес, по которому нужно передать данные,
//  ТекстЗапроса       - Строка    - данные, передаваемые в УТМ.
//
// Возвращаемое значение:
//   Структура - результат выполнения запроса.
//
Функция ОтправитьДанныеВУТМ(ТранспортныйМодуль, АдресРесурса, ТекстЗапроса)

	Результат = РезультатВыполненияЗапросаУТМ(ТранспортныйМодуль);
	
	ВремГраница = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	ТелоЗапроса = Новый ТекстовыйДокумент();
	ТелоЗапроса.ДобавитьСтроку("--" + ВремГраница);
	ТелоЗапроса.ДобавитьСтроку("Content-Disposition: form-data; name=""xml_file""");
	ТелоЗапроса.ДобавитьСтроку("Content-Type: text/xml; charset=utf-8");
	ТелоЗапроса.ДобавитьСтроку("");
	ТелоЗапроса.ДобавитьСтроку(ТекстЗапроса);
	ТелоЗапроса.ДобавитьСтроку("--" + ВремГраница + "--");
	
	ТелоЗапросаСтрока = ТелоЗапроса.ПолучитьТекст();
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	HTTPЗапрос.Заголовки["Content-Type"] = "multipart/form-data; boundary=" + ВремГраница;
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанныеБезBOM(ТелоЗапросаСтрока));
	
	ИнтернетПрокси = Новый ИнтернетПрокси();
	ИнтеграцияЕГАИСКлиентСерверПереопределяемый.ПриПолученииНастроекПроксиСервера(ТранспортныйМодуль, ИнтернетПрокси);
	
	Попытка
		Соединение = Новый HTTPСоединение(СокрЛП(ТранспортныйМодуль.АдресУТМ), ТранспортныйМодуль.ПортУТМ,,, ИнтернетПрокси);
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		Результат.Результат = Ложь;
		Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		#Если НЕ ТонкийКлиент Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка отправки данных в УТМ по адресу %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", АдресРесурса);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
									УровеньЖурналаРегистрации.Ошибка,,,
									ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		#КонецЕсли
		Возврат Результат;
	КонецПопытки;
		
	Результат.ОтветМодуляЕГАИС = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Если HTTPОтвет.КодСостояния = 504 Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Нет связи с УТМ.'");
		
	ИначеЕсли HTTPОтвет.КодСостояния <> 200 Тогда
		ДополнительноеОписание = "";
		
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(Результат.ОтветМодуляЕГАИС);
			ЧтениеXML.ПерейтиКСодержимому();
			Если ЧтениеXML.Имя = "A" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Пока ЧтениеXML.Прочитать() Цикл
					Если ЧтениеXML.Имя = "error" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						ЧтениеXML.Прочитать();
						ДополнительноеОписание = ЧтениеXML.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ЧтениеXML.Закрыть();
		Исключение
			ДополнительноеОписание = Результат.ОтветМодуляЕГАИС;
		КонецПопытки;
		
		ТекстОшибки = НСтр("ru = 'Ошибка при выполнении POST-запроса по адресу %1'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", АдресРесурса);
		
		Результат.ОписаниеОшибки = ТекстОшибки + ?(НЕ ПустаяСтрока(ДополнительноеОписание), Символы.ПС + ДополнительноеОписание, "");
		
		#Если НЕ ТонкийКлиент Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, Результат.ОписаниеОшибки);
		#КонецЕсли
	КонецЕсли;
	
	Результат.Результат = ПустаяСтрока(Результат.ОписаниеОшибки);
	
	Возврат Результат;

КонецФункции // ОтправитьДанныеВУТМ()

// Функция получения данных из транспортного модуля ЕГАИС.
//
// Параметры:
//  ТранспортныйМодуль - Структура - модуль, из которого требуется получить данные,
//  АдресРесурса       - Строка    - адрес данных, которые нужно получить.
//
// Возвращаемое значение:
//   Структура - полученный ответ из транспортного модуля.
//
Функция ПолучитьДанныеИзУТМ(ТранспортныйМодуль, АдресРесурса)

	Результат = РезультатВыполненияЗапросаУТМ(ТранспортныйМодуль);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	
	ИнтернетПрокси = Новый ИнтернетПрокси();
	ИнтеграцияЕГАИСКлиентСерверПереопределяемый.ПриПолученииНастроекПроксиСервера(ТранспортныйМодуль, ИнтернетПрокси);
	
	Попытка
		Соединение = Новый HTTPСоединение(СокрЛП(ТранспортныйМодуль.АдресУТМ), ТранспортныйМодуль.ПортУТМ,,, ИнтернетПрокси);
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		Результат.Результат = Ложь;
		Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		#Если НЕ ТонкийКлиент Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка получения данных из УТМ по адресу %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", АдресРесурса);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
									УровеньЖурналаРегистрации.Ошибка,,,
									ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		#КонецЕсли
		Возврат Результат;
	КонецПопытки;
	
	Результат.ОтветМодуляЕГАИС = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Если HTTPОтвет.КодСостояния = 504 Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Нет связи с УТМ.'");
		
	ИначеЕсли HTTPОтвет.КодСостояния <> 200 Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка при выполнении GET-запроса по адресу %1'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", АдресРесурса);
		
		Результат.ОписаниеОшибки = ТекстОшибки + Символы.ПС + Результат.ОтветМодуляЕГАИС;
		
		#Если НЕ ТонкийКлиент Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, Результат.ОписаниеОшибки);
		#КонецЕсли
	КонецЕсли;
	
	Результат.Результат = ПустаяСтрока(Результат.ОписаниеОшибки);
	
	Возврат Результат;

КонецФункции // ПолучитьДанныеИзУТМ()

// Функция удаления данных из транспортного модуля ЕГАИС..
//
// Параметры:
//  ТранспортныйМодуль - Структура - модуль, из которого требуется удалить данные,
//  АдресРесурса       - Строка    - адрес данных, которые нужно удалить.
//
// Возвращаемое значение:
//   Структура - результат удаления данных.
//
Функция УдалитьДанныеИзУТМ(ТранспортныйМодуль, АдресРесурса)
	
	Результат = РезультатВыполненияЗапросаУТМ(ТранспортныйМодуль);
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
	
	ИнтернетПрокси = Новый ИнтернетПрокси();
	ИнтеграцияЕГАИСКлиентСерверПереопределяемый.ПриПолученииНастроекПроксиСервера(ТранспортныйМодуль, ИнтернетПрокси);
	
	Попытка
		Соединение = Новый HTTPСоединение(СокрЛП(ТранспортныйМодуль.АдресУТМ), ТранспортныйМодуль.ПортУТМ,,, ИнтернетПрокси);
		HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
	Исключение
		Результат.Результат = Ложь;
		Результат.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		#Если НЕ ТонкийКлиент Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка удаления данных из УТМ по адресу %1'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", АдресРесурса);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка),
									УровеньЖурналаРегистрации.Ошибка,,,
									ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		#КонецЕсли
	КонецПопытки;
	
	Результат.ОтветМодуляЕГАИС = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Если HTTPОтвет.КодСостояния = 504 Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Нет связи с УТМ.'");
		
	ИначеЕсли HTTPОтвет.КодСостояния <> 200 Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка при выполнении DELETE-запроса по адресу %1'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", АдресРесурса);
		
		Результат.ОписаниеОшибки = ТекстОшибки + Символы.ПС + Результат.ОтветМодуляЕГАИС;
		
		#Если НЕ ТонкийКлиент Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, Результат.ОписаниеОшибки);
		#КонецЕсли
	КонецЕсли;
	
	Результат.Результат = ПустаяСтрока(Результат.ОписаниеОшибки);
	
	Возврат Результат;
	
КонецФункции // УдалитьДанныеИзУТМ()

// Возвращает двоичные данные, содержащие данные строки в формате UTF8 без BOM.
//
// Параметры:
//  СтрокаДанных  - Строка - строка для преобразования в двоичные данные.
//
// Возвращаемое значение:
//   ДвоичныеДанные - двоичные данные без BOM.
//
Функция ДвоичныеДанныеБезBOM(СтрокаДанных)

	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(СтрокаДанных);
	ТекстовыйДокумент.Записать(ВремФайл, КодировкаТекста.UTF8, Символы.ПС);
	ДвоичныеДанные = Новый ДвоичныеДанные(ВремФайл);
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	СтрокаФорматBase64 = Сред(СтрокаФорматBase64, 5); // убираем BOM
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ВК, ""); // убираем ВК
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ПС, ""); // убираем ПС
	УдалитьФайлы(ВремФайл);
	Возврат Base64Значение(СтрокаФорматBase64);

КонецФункции

#КонецЕсли

// Устанавливает соответствие между исходящим запросом и полученным ответом.
//
Процедура УстановитьСоответствиеЗапросов(ЗапросыЕГАИС, ОтветМодуляЕГАИС, ПолеАдреса)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОтветМодуляЕГАИС);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	УзлыURL = ДокументDOM.ПолучитьЭлементыПоИмени("url");
	
	Для каждого УзелURL Из УзлыURL Цикл
		
		АтрибутDOM = УзелURL.Атрибуты.ПолучитьИменованныйЭлемент("replyId");
		
		Если АтрибутDOM = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗапросыЕГАИС[АтрибутDOM.Значение] = Неопределено Тогда
			ЗапросыЕГАИС.Вставить(АтрибутDOM.Значение, Новый Структура("АдресЗапроса, АдресаОтветов", "", Новый Массив));
		КонецЕсли;
		
		Если ПолеАдреса = "АдресЗапроса" Тогда
			ЗапросыЕГАИС[АтрибутDOM.Значение][ПолеАдреса] = УзелURL.ТекстовоеСодержимое;
		Иначе
			ЗапросыЕГАИС[АтрибутDOM.Значение][ПолеАдреса].Добавить(УзелURL.ТекстовоеСодержимое);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры // УстановитьСоответствиеЗапросов()

// Заполняет структуру выполнения операции к транспортному модулю ЕГАИС.
// 
Функция РезультатВыполненияЗапросаУТМ(ТранспортныйМодуль = Неопределено)
	
	Результат = Новый Структура();
	Результат.Вставить("Результат"         , Ложь);
	Результат.Вставить("ОписаниеОшибки"    , Неопределено);
	Результат.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	Результат.Вставить("ОтветМодуляЕГАИС"  , Неопределено);
	
	Возврат Результат;
	
КонецФункции // РезультатВыполненияЗапросаУТМ()

// Заполняет структуру результата обработки входящих документов.
//
Функция РезультатЗагрузкиВходящихДокументов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Результат"          , Ложь);
	Результат.Вставить("ОписаниеОшибки"     , "");
	Результат.Вставить("ЗагруженоДокументов", 0);
	Результат.Вставить("ДокументыСОшибками" , Новый Массив);
	
	Возврат Результат;
	
КонецФункции // РезультатЗагрузкиВходящихДокументов()

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые
//  строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // РазложитьСтрокуВМассивПодстрок()

// Возвращает структуру ошибки и делает запись в журнал регистрации.
//
Функция ЗавершитьОперациюСОшибкой(Результат, ТекстОшибки)
	
	Результат.Результат = Ложь;
	Результат.ОписаниеОшибки = ТекстОшибки;
	
	#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ЕГАИС'", Метаданные.ОсновнойЯзык.КодЯзыка), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции // ЗавершитьОперациюСОшибкой()
