
Процедура ПроверкаКоличестваИКоличестваФактического(Товары,Отказ,ТекстОшибки) Экспорт 
	
	//Для каждого Строка из Товары цикл  // НЧАН
	//ОТключил вик 2020-12-30
		//Если Товары.Итог("Количество") <> Товары.Итог("ФактическоеКоличество") тогда
		//	ТекстОшибки = "Не количество не соответствует фактическому количеству! Проведение не возможно.";
		//	Отказ = истина;
		//КонецЕсли;
	//КонецЦикла;
		
	
КонецПроцедуры

Функция минимальныйОстаток(Номенклатура, Склад) экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("склад", Склад);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МинимальныйОстаток.МинОстаток
	               |ИЗ
	               |	РегистрСведений.МинимальныйОстаток КАК МинимальныйОстаток
	               |ГДЕ
	               |	МинимальныйОстаток.Склад = &Склад
	               |	И МинимальныйОстаток.Номенклатура = &Номенклатура";
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	если Выборка.Следующий() тогда
		Возврат Выборка.МинОстаток;
	иначе
		Возврат 0;		
	КонецЕсли;;
	
КонецФункции

Функция  ПолучитьЗакупочнуюЦену() экспорт
	
		Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыЦенНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
		|ГДЕ
		|	ТипыЦенНоменклатуры.Закупочная";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если  ВыборкаДетальныеЗаписи.Следующий() тогда
	возврат  ВыборкаДетальныеЗаписи.Ссылка;
	
Иначе   
	Возврат	 Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	КонецЕсли;;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	
	
КонецФункции

//######## НЧАН
#Область Т

Функция ЭтоБазаДляПереучета () Экспорт
	
	Если СтрокаСоединенияИнформационнойБазы() = "Srvr=""dbserv3"";Ref=""tabakon_1c8"";" Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	В = Документы.ОприходованиеТоваров.Выбрать();
	Н = 0;
	Пока В.Следующий() Цикл
		Если В.Проведен Тогда
			Н = Н + 1;
		КонецЕсли;	
		Если Н = 10 Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	УстановитьПривилегированныйРежим(Ложь);
	Если Н > 9 Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;	

КонецФункции	

// Заменяет все короткие ШК на ШК с нулями до нужного количества знаков
Процедура ДобавитьНуликКороткимШК () Экспорт
	
	ДлинаНомера = 13;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Штрихкод,
		|	Штрихкоды.Владелец,
		|	Штрихкоды.ТипШтрихкода,
		|	Штрихкоды.ЕдиницаИзмерения,
		|	Штрихкоды.ХарактеристикаНоменклатуры,
		|	Штрихкоды.СерияНоменклатуры,
		|	Штрихкоды.Качество,
		|	Штрихкоды.УдалитьКод,
		|	Штрихкоды.Дата
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод ПОДОБНО ""___________[^0-9]%""";

	
	РезультатЗапроса = Запрос.Выполнить(); //.Выгрузить();
		
	К = РезультатЗапроса.Выгрузить().Колонки; 
	
	В = РезультатЗапроса.Выбрать();
		
	Пока В.Следующий() Цикл

		НачатьТранзакцию();

		ШК = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();

		Для Каждого Эл Из К Цикл
			ШК.Отбор[Эл.Имя].Установить(В[Эл.Имя]);	
		КонецЦикла;
		
		ШК.Прочитать();
		Если ШК.Количество() <> 1 Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		ШК.Очистить();
		
		Попытка
			ШК.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
		НЗ = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		Для Каждого Эл Из К Цикл
			НЗ[Эл.Имя] = В[Эл.Имя];	
		КонецЦикла;
		ШКН = ЛК_РаботаСДокументами.ПривестиНомерКДлине (СокрЛП(В.Штрихкод), ДлинаНомера);
		НЗ.Штрихкод = ШКН;
		
		Попытка
			НЗ.Записать();
			Сообщить("[" + СокрЛП(В.Штрихкод) + "] для номенклатуры [" + НЗ.Владелец + "] изменен на [" + ШКН + "].");
		Исключение
		//	Сообщить(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;	

	
КонецПроцедуры	

// ###### Структура подчиненности для Связки Поступление-Перемещение

Функция ПолучитьСвязанныеДокументы (ПоступлениеСсылка) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка КАК ПеремещениеСсылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.Основание = &Основание
		|	И ПеремещениеТоваров.Дата > &Дата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
		|ГДЕ
		|	ВозвратТоваровПоставщику.Дата > &Дата
		|	И ВозвратТоваровПоставщику.Основание = &Основание
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УстановкаЦенНоменклатуры.Ссылка
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
		|ГДЕ
		|	УстановкаЦенНоменклатуры.Дата > &Дата
		|	И УстановкаЦенНоменклатуры.Основание = &Основание";
		
		Если ТипЗнч(ПоступлениеСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров") 
			И (ЗначениеЗаполнено(ПоступлениеСсылка.Основание) И ТипЗнч(ПоступлениеСсылка.Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) Тогда
		Запрос.Текст = Запрос.Текст + "			
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УстановкаЦенНоменклатуры.Ссылка
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
		|ГДЕ
		|	УстановкаЦенНоменклатуры.Дата > &Дата
		|	И УстановкаЦенНоменклатуры.Основание = &ДопОснование";

		Запрос.УстановитьПараметр("ДопОснование", ПоступлениеСсылка.Основание);
		КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата() - 60*60*24*180);
	Запрос.УстановитьПараметр("Основание", ПоступлениеСсылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Возврат РезультатЗапроса
	
КонецФункции	


//######## МРЦ по характеристикам

Функция ПолучитьМассивШКбезНулей (ШК) Экспорт	
		  
	  МШК = Новый Массив;
	  МШК.Добавить(ШК);
	  ПШК = ШК;
	  О = Истина;
	  Пока О Цикл
		Д = СтрДлина(ПШК);  	
		П = Лев(ПШК, 1);	  
		Если П = "0" Тогда
			ПШК = Прав(ПШК, Д - 1);
			МШК.Добавить(ПШК);
		Иначе
			О = Ложь;	
		КонецЕсли;	
	КонецЦикла; 
	
	// Добавил 2 нуля (26.06.2017)
	ШКН = ШК;
	Для Н = 0 По 5 Цикл
		ШКН = "0" + ШКН ;
		МШК.Добавить(ШКН);
	КонецЦикла;
	
	Возврат МШК
	
КонецФункции

Функция ПривестиНомерКДлине (Номер, КолВоЗнаков) Экспорт	// Добавление лидирующих нулей
		  
	  Д = СтрДлина(Номер);

	  Пока Д < КолВоЗнаков Цикл
		Номер = "0" + Номер;  	
		Д = Д + 1;	  
	  КонецЦикла; 
	
	Возврат Номер
	
КонецФункции

// проверяет совпадает ли контрольное число для 13 знаков, если нет, следует заменить на 12.
Функция ПроверкаEAN13 (ШК) Экспорт
	
	От = Истина;
	
	МЦ = Новый Массив;
	КЧ = Число(Прав(ШК, 1));
	ПЕ = Лев(ШК,12);
	ОД = СтрДлина(ПЕ);
	
	Пока ОД > 0 Цикл
		ПЧ = Лев(ПЕ, 1);
		ПЕ = Прав(ПЕ, ОД - 1);
		ОД = ОД - 1;
		МЦ.Добавить(Число(ПЧ));
	КонецЦикла;	
	
	СуммаЧетных   = 0;
	СуммаНечетных = 0;
	Четность = Ложь;	
	Для Каждого Эл Из МЦ Цикл
		Если Четность Тогда 
			СуммаЧетных = СуммаЧетных + Эл;
			Четность = НЕ Четность;
		Иначе
			СуммаНечетных = СуммаНечетных + Эл;
			Четность = НЕ Четность;
		КонецЕсли;
	КонецЦикла;	
	
	ОС = СуммаЧетных * 3 + СуммаНечетных;	
	БлижайшееКратноеОС = ОС;
	Пока НЕ БлижайшееКратноеОС%10 = 0 Цикл
		БлижайшееКратноеОС = БлижайшееКратноеОС + 1;
	КонецЦикла;
	РКЧ = БлижайшееКратноеОС - ОС;	
	
	Если РКЧ <> КЧ Тогда 
		От = Ложь;
	КонецЕсли;	
	
	Возврат От
	
КонецФункции	

//######## МРЦ по характеристикам

// Выбор характеристики при сканировании для МРЦ. Подставляется последняя.
Функция ПолучитьСвеженькуюХарактеристику(Номенклатура) Экспорт
	
		Характеристика = Неопределено;
		
		Если Номенклатура.ТоварМРЦ = Истина Тогда
	
			З = Новый Запрос;
			З.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
			                |	ХарактеристикиНоменклатуры.Ссылка
			                |ИЗ
			                |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			                |ГДЕ
			                |	ХарактеристикиНоменклатуры.Владелец = &Владелец
			                |
			                |УПОРЯДОЧИТЬ ПО
			                |	ХарактеристикиНоменклатуры.ДатаЗаписи УБЫВ" ;
			З.УстановитьПараметр("Владелец", Номенклатура); 	
			В = З.Выполнить().Выбрать();
			Если В.Следующий() Тогда
				Характеристика = В.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
	
	    Возврат  Характеристика
		
КонецФункции		

// Выбор характеристики при сканировании для МРЦ. Выводится окно для выбора.
Функция ПолучитьХарактеристикуНаВыбор(Номенклатура) Экспорт
	
		Характеристика = Неопределено ;
			
		Если Номенклатура.ТоварМРЦ = Истина Тогда
	
			З = Новый Запрос;
			З.Текст =  "ВЫБРАТЬ 
			                |	ХарактеристикиНоменклатуры.Ссылка
			                |ИЗ
			                |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			                |ГДЕ
			                |	ХарактеристикиНоменклатуры.Владелец = &Владелец" ;
							
			З.УстановитьПараметр("Владелец", Номенклатура); 	
			В = З.Выполнить().Выбрать();
			
			ТЗ = Новый ТаблицаЗначений;
			ТЗ.Колонки.Добавить("Характеристика") ;
			
			Пока В.Следующий() Цикл
				С = ТЗ.Добавить();
				С.Характеристика = В.Ссылка;
			КонецЦикла;;
		
		//Ф = ПолучитьФорму("Документ.ИнвентаризацияТоваровНаСкладе.ФормаВыборыХарактеристики");
		ф = Документы.ИнвентаризацияТоваровНаСкладе.ПолучитьФорму("ФормаВыборыХарактеристики");
		Ф.ТЗначениеП = ТЗ;
		Характеристика = Ф.ОткрытьМодально();
				
		КонецЕсли; 
	
		Возврат  Характеристика ;
		
КонецФункции


Функция СравнимТЗ(ТЗ1,ТЗ2)
    нпп=0;
    ПолностьюИдентичны=ИСТИНА;
    Для каждого строкаТЗ1 из ТЗ1 цикл
        Идентичны=Истина;
		Если нпп>=ТЗ2.Количество() тогда 
			//Сообщить("Добавлена строка "+нпп);нпп=нпп+1;
			продолжить; 
		КонецЕсли;
        СтрокаТЗ2=ТЗ2.Получить(нпп);
        
        СписокПропускаемыхКолонок=",Период,Регистратор,Активность,МоментВремени,"; //зяпятые должны обрамлять
        Для каждого колонкаТЗ1 из ТЗ1.Колонки цикл
            Если Найти(СписокПропускаемыхКолонок,","+колонкаТЗ1.Имя+",")<>0 тогда продолжить;КонецЕсли;
            
            
            
            былиидентичны=Идентичны;
            Если ТипЗнч(СтрокаТЗ2[колонкаТЗ1.Имя])=Тип("Число") тогда  //допускаем прогрешность 0.001
                ПроверкаИдентичности=СтрокаТЗ2[колонкаТЗ1.Имя]-строкаТЗ1[колонкаТЗ1.Имя];
                ПроверкаИдентичности=?(ПроверкаИдентичности>0,ПроверкаИдентичности,-ПроверкаИдентичности);
                Если  ПроверкаИдентичности>0.001 тогда
                    ПроверкаИдентичности=ложь;
                Иначе
                    ПроверкаИдентичности=Истина;
                КонецЕсли;
                
                Идентичны=Идентичны И ПроверкаИдентичности;
                
            Иначе
                Идентичны=Идентичны И СтрокаТЗ2[колонкаТЗ1.Имя]=строкаТЗ1[колонкаТЗ1.Имя];    
                
            КонецЕсли;
            ПолностьюИдентичны=ПолностьюИдентичны И Идентичны;
            
			//Если былиидентичны<>Идентичны тогда
			//    СтрокаОшибкиТЗ1="ТЗ1 : ";
			//    СтрокаОшибкиТЗ2="ТЗ2 : ";
			//    СписокПропускаемыхКолонок=",Период,Регистратор,Активность,МоментВремени,"; //зяпятые должны обрамлять
			//    Для каждого тек2колонкаТЗ1 из ТЗ1.Колонки цикл
			//        Если Найти(СписокПропускаемыхКолонок,","+тек2колонкаТЗ1.Имя+",")<>0 тогда продолжить;КонецЕсли;
			//        СтрокаОшибкиТЗ1=СтрокаОшибкиТЗ1+тек2колонкаТЗ1.Имя+"="+СокрЛп(СтрокаТЗ1[тек2колонкаТЗ1.Имя])+" ; ";
			//        СтрокаОшибкиТЗ2=СтрокаОшибкиТЗ2+тек2колонкаТЗ1.Имя+"="+СокрЛп(СтрокаТЗ2[тек2колонкаТЗ1.Имя])+" ; ";                                        
			//    КонецЦикла;
			//    //СтрокаОшибкиТЗ1=Лев(СтрокаОшибкиТЗ1,СтрДлина(СтрокаОшибкиТЗ1)-3);
			//    СтрокаОшибкиТЗ2=Лев(СтрокаОшибкиТЗ2,СтрДлина(СтрокаОшибкиТЗ2)-3);
			//    //Сообщить("Первое отличие в колонке:"+колонкаТЗ1.Имя);
			//    //Сообщить(СтрокаОшибкиТЗ1);
			//    //Сообщить(СтрокаОшибкиТЗ2);
			//    //Сообщить("-------------------------------------------------------------------------------------------------------------------------");
			//    
			//    
			//КонецЕсли;
        КонецЦикла;
        //Состояние(ТЗ1.Количество()-нпп);
        нпп=нпп+1;
    КонецЦикла;
    
    возврат ПолностьюИдентичны;
    
КонецФункции



Процедура Пауза(сек=3) Экспорт 
	
	тд = ТекущаяДата();
	пока ТекущаяДата() < тд + сек цикл
		
	КонецЦикла;	
	
КонецПроцедуры	


//######## Создание Документов:

// Заполнить Переоценку по остаткам АТТ
Функция ЗаполнитьПереоценкуПоОстаткамАТТ(СкладП, ДатаД) Экспорт 
			
		Ф = Документы.ПереоценкаТоваровВРознице.ПолучитьФорму("ЗаполнитьПереоценкуПоОстаткамАТТ");
		Д = Ф.ОткрытьМодально();
		
		Если Д = Неопределено тогда
			Возврат д;
		КонецЕсли;
		
		ВыбратьВсе = Д["ВыбратьВсе"];
		
		Если НЕ ВыбратьВсе Тогда
			Если Д["ТипВыбора"] = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				ТипВыбора = "И Номенклатура.НоменклатурнаяГруппа = &ТипВыбора";
			Иначе
				ТипВыбора = "И Номенклатура В ИЕРАРХИИ (&ТипВыбора)";
			КонецЕсли;
			
			//Вик 2021_03_26
			Если Д["МассивНоменклатурныеГруппы"].количество() >0 тогда
				ТипВыбора = "И Номенклатура.НоменклатурнаяГруппа В (&ТипВыбора)";	
			КонецЕсли;
			//КонецВик
		КонецЕсли;	
		 		
		УбратьНеизмененные = Д["УбратьНеизмененные"];
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТоварыВРозницеОстатки.Номенклатура,
			|	ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры
			|ПОМЕСТИТЬ НоменклатураГ
			|ИЗ
			|	РегистрНакопления.ТоварыВРознице.Остатки(
			|			&ДатаСреза,
			|			Склад = &Склад
			|			" +	?(ВыбратьВсе, "", ТипВыбора) + ") КАК ТоварыВРозницеОстатки
			|ГДЕ
			|	ТоварыВРозницеОстатки.КоличествоОстаток > 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НоменклатураГ.Номенклатура КАК Номенклатура,
			|	НоменклатураГ.ХарактеристикаНоменклатуры,
			|	ЦеныАТТСрезПоследних.Цена КАК ЦенаВРозницеСтарая
			|ИЗ
			|	НоменклатураГ КАК НоменклатураГ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАТТ.СрезПоследних(&ДатаСреза, Склад = &Склад) КАК ЦеныАТТСрезПоследних
			|		ПО НоменклатураГ.Номенклатура = ЦеныАТТСрезПоследних.Номенклатура
			|			И НоменклатураГ.ХарактеристикаНоменклатуры = ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры";
		
		Запрос.УстановитьПараметр("Склад", СкладП);
		Запрос.УстановитьПараметр("ДатаСреза", ДатаД);
		Если НЕ ВыбратьВсе Тогда Запрос.УстановитьПараметр("ТипВыбора", Д["ТипВыбораЗначение"]); КонецЕсли;
		
		//Вик 2021_03_26 //что-то одно должно быть
		Если Д["МассивНоменклатурныеГруппы"].количество() >0 тогда
			Запрос.УстановитьПараметр("ТипВыбора", Д["МассивНоменклатурныеГруппы"]);	
		КонецЕсли;
		
		Если Д["МассивНоменклатуры"].количество() >0 тогда
			Запрос.УстановитьПараметр("ТипВыбора", Д["МассивНоменклатуры"]);	
		КонецЕсли;
		//КонецВик
	
		В = Запрос.Выполнить().Выбрать();
		
		ТЗаполнения = Новый ТаблицаЗначений;
		ТЗаполнения.Колонки.Добавить("Номенклатура");
		ТЗаполнения.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТЗаполнения.Колонки.Добавить("ЦенаВРозницеСтарая");
		ТЗаполнения.Колонки.Добавить("ЦенаВРознице");
		
		Н = 1;
		К = ТЗаполнения.Количество();
		
		Пока В.Следующий() Цикл
			
			НоваяЦена = ?(ЗначениеЗаполнено(В.ХарактеристикаНоменклатуры), ЛК_РаботаСДокументами.УстановкаЦены(В.Номенклатура, СкладП, В.ХарактеристикаНоменклатуры), ЛК_РаботаСДокументами.УстановкаЦены(В.Номенклатура, СкладП));
			
			Если УбратьНеизмененные И (НоваяЦена = В.ЦенаВРозницеСтарая) Тогда
				//Н = Н + 1;
				Продолжить;
			КонецЕсли;	
				
			СтрН = ТЗаполнения.Добавить();
			СтрН.Номенклатура = В.Номенклатура;
			СтрН.ХарактеристикаНоменклатуры = В.ХарактеристикаНоменклатуры;
			СтрН.ЦенаВРозницеСтарая = В.ЦенаВРозницеСтарая;
			СтрН.ЦенаВРознице = НоваяЦена;
			
			Если Н % 100 = 0 Тогда	
				#Если КЛИЕНТ тогда
				Состояние("" + Н);
				#КонецЕсли
	        КонецЕсли;
	        Н = Н + 1;

		КонецЦикла;	

		Возврат ТЗаполнения

КонецФункции

// Создать Переоценку на основании Перемещения 
Процедура СоздатьПереоценкуПоПеремещению(СсылкаПеремещение)  Экспорт
	
	Если ЗначениеЗаполнено(СсылкаПеремещение.СкладПолучатель) и СсылкаПеремещение.СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
		Возврат;  //++ оптовые пропускаем
	КонецЕсли;	
	

	
	З = Новый Запрос;
	З.Текст = "ВЫБРАТЬ
	          |	ПереоценкаТоваровВРознице.Ссылка КАК ДокументПереоценки,
	          |	ПереоценкаТоваровВРознице.ДокументОснование
	          |ИЗ
	          |	Документ.ПереоценкаТоваровВРознице КАК ПереоценкаТоваровВРознице
	          |ГДЕ
	          |	ПереоценкаТоваровВРознице.ДокументОснование = &ДокументОснование
	          |	И ПереоценкаТоваровВРознице.ПометкаУдаления = Ложь";
		
	З.УстановитьПараметр("ДокументОснование", СсылкаПеремещение);
	
	В = З.Выполнить().Выбрать();
	
	Если В.Следующий() Тогда
		
		Если СравнимТЗ(СсылкаПеремещение.товары.выгрузить(, "Номенклатура, ХарактеристикаНоменклатуры"), В.ДокументПереоценки.Товары.выгрузить(,"Номенклатура, ХарактеристикаНоменклатуры")) Тогда
			Возврат;
		КонецЕсли;	
		
		ДП = В.ДокументПереоценки.ПолучитьОбъект();
		ДП.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ДП.Товары.Очистить();
		
	Иначе
		
		ДП = Документы.ПереоценкаТоваровВРознице.СоздатьДокумент();		
		
	КонецЕсли;
			
	// Получим старую цену
	СЦ = Новый Соответствие;
	
	З = Новый Запрос;
	З.Текст =   "ВЫБРАТЬ
	            |	ПеремещениеТоваровТовары.НомерСтроки,
	            |	ПеремещениеТоваровТовары.Номенклатура,
	            |	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры,
	            |	МАКСИМУМ(ЦеныАТТСрезПоследних.Цена) КАК Цена
	            |ИЗ
	            |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАТТ.СрезПоследних(
	            |				&Дата,
	            |				Номенклатура В
	            |					(ВЫБРАТЬ
	            |						ПеремещениеТоваровТовары.Номенклатура
	            |					ИЗ
	            |						Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	            |					ГДЕ
	            |						ПеремещениеТоваровТовары.Ссылка = &Ссылка)) КАК ЦеныАТТСрезПоследних
	            |		ПО ПеремещениеТоваровТовары.Номенклатура = ЦеныАТТСрезПоследних.Номенклатура
	            |			И ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры = ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры
	            |			И ПеремещениеТоваровТовары.Ссылка.СкладПолучатель = ЦеныАТТСрезПоследних.Склад
	            |ГДЕ
	            |	ПеремещениеТоваровТовары.Ссылка = &Ссылка
	            |
	            |СГРУППИРОВАТЬ ПО
	            |	ПеремещениеТоваровТовары.НомерСтроки,
	            |	ПеремещениеТоваровТовары.Номенклатура,
	            |	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры"  ;
				
	З.УстановитьПараметр("Ссылка", СсылкаПеремещение);
	З.УстановитьПараметр("Дата", ТекущаяДата());
	СХ = З.Выполнить().Выбрать();
	
	Пока СХ.Следующий() Цикл
		СЦ.Вставить(СХ.НомерСтроки, СХ.Цена) ;
	КонецЦикла;	
	//
	ДП.ДокументОснование = СсылкаПеремещение;
	ДП.Дата = СсылкаПеремещение.Дата;
	ДП.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВРознице;
	ДП.Организация = СсылкаПеремещение.Организация;
	ДП.Ответственный = СсылкаПеремещение.Ответственный;
	ДП.Склад = СсылкаПеремещение.СкладПолучатель;
	ДП.Комментарий = "Создано по перемещению: " + Строка (СсылкаПеремещение);
	
	З = Новый Запрос;
	З.Текст =  "ВЫБРАТЬ
	           |	ПеремещениеТоваровТовары.Номенклатура,
	           |	ПеремещениеТоваровТовары.ЕдиницаИзмерения,
	           |	ПеремещениеТоваровТовары.Цена,
	           |	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры,
	           |	ПеремещениеТоваровТовары.НомерСтроки
	           |ИЗ
	           |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	           |ГДЕ
	           |	ПеремещениеТоваровТовары.Ссылка = &Ссылка";
	З.УстановитьПараметр("Ссылка", СсылкаПеремещение);
	СИ = З.Выполнить().Выбрать();
	
	массДобНом = новый массив; //не уникальные нельзя
	массДобХар = новый массив;
	Пока СИ.Следующий() Цикл
		Если ЗначениеЗаполнено(СИ.Цена) Тогда
			Если массдобном.Найти(СИ.номенклатура) = Неопределено ИЛИ 
				массДобХар.Найти(СИ.ХарактеристикаНоменклатуры) = Неопределено Тогда
				
				// 27.06.2017
				Если СЦ[СИ.НомерСтроки] = СИ.Цена Тогда
					Продолжить;
				КонецЕсли;	
				//
				
				ДС = ДП.Товары.Добавить();
				ДС.Номенклатура = СИ.Номенклатура;
				ДС.ХарактеристикаНоменклатуры = СИ.ХарактеристикаНоменклатуры;
				ДС.ЦенаВРознице = СИ.Цена;
				ДС.ЦенаВРозницеСтарая = СЦ[СИ.НомерСтроки];
				
				массДобНом.Добавить(СИ.Номенклатура);
				массДобХар.Добавить(СИ.ХарактеристикаНоменклатуры);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Попытка
		Если ДП.Товары.Количество() > 0 Тогда
		ДП.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

//	ДП.ПолучитьФорму("ФормаДокумента").Открыть();
		
КонецПроцедуры	

// Проверка остатка по номенклатуре
Функция ПроверкаОстаткаНоменклатура (Номенклатура, Склад, ПроверяемоеКоличество, НаДату = Неопределено) Экспорт
	
	НаДату = ?(НаДату <> Неопределено, НаДату, ТекущаяДата());
	
	ПМ = Новый Массив;
	ВЗ = Ложь;
	
	З = Новый Запрос;
	З.Текст = "ВЫБРАТЬ
	           |	ТоварыВРозницеОстатки.Номенклатура,
	           |	СУММА(ТоварыВРозницеОстатки.КоличествоОстаток) КАК КоличествоОстаток
	           |ИЗ
	           |	РегистрНакопления.ТоварыВРознице.Остатки(
	           |			&МоментВремени,
	           |			Склад = &Склад
	           |				И Номенклатура = &Номен) КАК ТоварыВРозницеОстатки
	           |
	           |СГРУППИРОВАТЬ ПО
	           |	ТоварыВРозницеОстатки.Номенклатура";
			   
	З.УстановитьПараметр("МоментВремени", НаДату);		   
	З.УстановитьПараметр("Склад", Склад);
	З.УстановитьПараметр("Номен", Номенклатура);
	
	В = З.Выполнить().Выбрать();
	
	Если В.Следующий() Тогда
		ПК = В.КоличествоОстаток - ПроверяемоеКоличество;
		Если ПК < 0 Тогда
			ПМ.Добавить(ВЗ);
			ПМ.Добавить("На складе (" + Склад + ") на дату " + НаДату + " не хватает товара (" + Строка(Номенклатура) + ") " + ПК + "шт. !");
		Иначе
			ВЗ = Истина;
			ПМ.Добавить(ВЗ);
			ПМ.Добавить("Итс гуд!");
		КонецЕсли;	
			
	Иначе
		
		ПМ.Добавить(ВЗ);
		ПМ.Добавить("На складе (" + Строка(Склад) + ") на дату " + НаДату + " НЕТ товара (" + Строка(Номенклатура) + ")!");
		
	КонецЕсли;
	
	Возврат ПМ
		
КонецФункции
	
//####### Запись в регистры :

//####### Установка цен :

// Возвращает цену закупочную или базовую
Функция ПолучитьЦенуПоГлавнымТипамЦен (Номенклатура, Характеристика = Неопределено, ТипЦены) Экспорт
		
	Если НЕ ТипЦены.Закупочная И
		НЕ ТипЦены.Базовая И
		НЕ ЗначениеЗаполнено(ТипЦены.БазовыйТипЦен)Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	З = Новый Запрос;
	Т = "ВЫБРАТЬ
	|	 ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			Номенклатура = &Номенклатура
	|				И ТипЦен = &Тцен";
	Если  Характеристика <> Неопределено Тогда Т = Т + "
		|				И ХарактеристикаНоменклатуры = &ХН) КАК ЦеныНоменклатурыСрезПоследних";
		З.УстановитьПараметр("ХН",Характеристика);
	КонецЕсли;
	
	З.Текст = Т;
	З.УстановитьПараметр("Номенклатура",Номенклатура);
	З.УстановитьПараметр("Тцен",ТипЦены);
	З.УстановитьПараметр("Дата",ТекущаяДата());
	
	В = З.Выполнить().Выбрать(); 
	
	Если В.Следующий() тогда
		
		Возврат В.Цена;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;

КонецФункции

// Возвращает цену для определенных складов, выраженную в ценах других складов   // Для отчета
Функция ЦеныДляСкладовПоТипуЦен (НоменклатураСсылка, ХарактеристикаН = Неопределено, ТипЦены = Неопределено) Экспорт
	
	Цена = РасчетЦеныПоЦеновымГруппам(НоменклатураСсылка, ТипЦены);
	
	Если Цена = Неопределено Тогда Цена = 0 ; КонецЕсли;
	
	Возврат Цена
	
КонецФункции

// Возвращает цену согласно цепочке формирования цены (Индивидуальная - Договорная - ПоТипамЦенСкладов)
// Для определения розничной цены при перемещении
Функция УстановкаЦены (НоменклатураСсылка, СкладСсылка, ХарактеристикаН = Неопределено) Экспорт
	
	УстановкаЦенВручную = Ложь;
	// Проход Цен по Категориям	
	ЦПК = РасчетЦеныПоЦеновымГруппам(НоменклатураСсылка, СкладСсылка.ТипЦенРозничнойТорговли, ХарактеристикаН, УстановкаЦенВручную);
	УстановкаЦенВручную = ЦПК["УстановкаЦенВручную"]; 
	ЦенаПоКатегории = ЦПК["Цена"]; 		 
	ДоговорнаяЦена = РасчетПоДоговорнойЦене(НоменклатураСсылка, СкладСсылка);
	ЦенаПоСтандартномуМеханизму = ПолучитьРозничнуюЦену(НоменклатураСсылка, СкладСсылка.ТипЦенРозничнойТорговли, ХарактеристикаН);
	ИндивидуальнаяЦена = ПолучитьИндивидуальнуюЦену(НоменклатураСсылка, СкладСсылка.ТипЦенРозничнойТорговли, ХарактеристикаН); 
	
	Если ИндивидуальнаяЦена <> Неопределено И ИндивидуальнаяЦена <> 0 Тогда
		
		ЦенаР = ИндивидуальнаяЦена;
				
	ИначеЕсли ДоговорнаяЦена <> Неопределено И ДоговорнаяЦена <> 0 Тогда
		
		ЦенаР = ДоговорнаяЦена;
		
	ИначеЕсли ЦенаПоКатегории <> Неопределено И ЦенаПоКатегории <> 0 Тогда
				
		ЦенаР = ?(УстановкаЦенВручную, ЦенаПоКатегории, ОкруглениеПоПравилам(ЦенаПоКатегории));
					
	Иначе
		
		ЦенаР = ЦенаПоСтандартномуМеханизму;
		
	КонецЕсли;	
	
	Возврат   ЦенаР ;
		
КонецФункции	

Функция РасчетЦеныПоЦеновымГруппам (Номенклатура, ТипЦен, Характеристика = Неопределено, УстановкаЦенВручную = Неопределено) Экспорт
	
	ВЦС = Новый Структура;
	ВЦС.Вставить("УстановкаЦенВручную", УстановкаЦенВручную);	
	ВЦС.Вставить("Цена", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаценкиНаНоменклатурныеГруппы.ПроцентНаценки
		|ИЗ
		|	РегистрСведений.НаценкиНаНоменклатурныеГруппы КАК НаценкиНаНоменклатурныеГруппы
		|ГДЕ
		|	НаценкиНаНоменклатурныеГруппы.НоменклатурнаяГруппа = &НоменклатурнаяГруппа
		|	И НаценкиНаНоменклатурныеГруппы.ЦеноваяКатегория = &ЦеноваяКатегория";
	
	Запрос.УстановитьПараметр("НоменклатурнаяГруппа", Номенклатура.НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("ЦеноваяКатегория", ТипЦен.ЦеноваяКатегория);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если  РезультатЗапроса.Следующий() Тогда 
		
		ПроцентНаценки = РезультатЗапроса.ПроцентНаценки;
		Цена = 0 ;

		// 26.10.17 
		// Для номенклатурных групп с наценкой 1% должно считать специальной группой и 
		// устанавливать цены вручную.
		
		Если ПроцентНаценки = 1 Тогда
			
		   ОтборН = Новый Структура();
		   ОтборН.Вставить("ТипЦен", ТипЦен);
		   ОтборН.Вставить("Номенклатура", Номенклатура);
		   ОтборН.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	
		   ТЗЦ = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(ТекущаяДата(), ОтборН);
		   
		   Если ТЗЦ.Количество() <> 0 Тогда
		   	 Цена = ТЗЦ[0].Цена;
		   КонецЕсли;
		   
		   ВЦС.Вставить("УстановкаЦенВручную", Истина);	
		   ВЦС.Вставить("Цена", Цена);
		   
		   Возврат ВЦС;
		   
		КонецЕсли;   
		//
		
		Об = Обработки.ЛК_ФормированиеРозничныхЦен.Создать();
		ЦенаЗакупочная     = Об.ПолучитьЗакупочнуюЦену(Номенклатура);
		ЦенаБазовая        = Об.ПолучитьБазовуюЦену(Номенклатура);
		РасчетноБазовая    = Об.ПолучитьРасчетноБазовуюЦену(Номенклатура);
		ЦенаРозничная      = Об.ПолучитьРозничнуюЦену(Номенклатура,ТипЦен);
		ИндивидуальнаяЦена = Неопределено;
		ТекущийПроцент     = ПроцентНаценки;
		
		Попытка
			//Если ИндивидуальнаяЦена <> 0 И ИндивидуальнаяЦена <> Неопределено тогда
			//	Цена = ИндивидуальнаяЦена;
			//ИначеЕсли  (ИндивидуальнаяЦена = 0 ИЛИ ИндивидуальнаяЦена = Неопределено) и ЦенаБазовая<>0 тогда
			//	Цена = ОКР(ЦенаБазовая + ЦенаБазовая*ТекущийПроцент/100,-1);
			//Иначе
				//Цена = ОКР(ЦенаЗакупочная + ЦенаЗакупочная*ТекущийПроцент/100,-1);
				
			Если РасчетноБазовая <> 0 Тогда
				Цена = ОКР(РасчетноБазовая + РасчетноБазовая*ТекущийПроцент/100);
	        Иначе
				Цена = ОКР(ЦенаЗакупочная + ЦенаЗакупочная*ТекущийПроцент/100);
			КонецЕсли;
			
		Исключение
			Сообщить(Строка(Номенклатура) + " : Возможно на номенклатурную группу, в которую входит товар не назначена ценовая категория");
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		ВЦС.Вставить("Цена", Цена);
		
		Возврат ВЦС;
		
	Иначе 
		
		ВЦС.Вставить("Цена", Неопределено);
		Возврат ВЦС;
		
	КонецЕсли;
	
КонецФункции

Функция РасчетПоДоговорнойЦене (Номенклатура, Склад)  Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	ЗначенияСвойствОбъектов.Свойство
		//|ПОМЕСТИТЬ ВТ
		//|ИЗ
		//|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		//|ГДЕ
		//|	ЗначенияСвойствОбъектов.Объект = &Ссылка
		//|	И ЗначенияСвойствОбъектов.Свойство.ПометкаУдаления = ЛОЖЬ
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	Номенклатура.НоменклатурнаяГруппа
		//|ИЗ
		//|	Справочник.Номенклатура КАК Номенклатура
		//|ГДЕ
		//|	Номенклатура.Ссылка = &Ссылка
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	МАКСИМУМ(ДоговорныеЦены.Цена) КАК Цена
		//|ИЗ
		//|	ВТ КАК ВТ
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоговорныеЦены КАК ДоговорныеЦены
		//|		ПО ВТ.Свойство = ДоговорныеЦены.НомГруппаИлиСвойство
		//|ГДЕ
		//|	ДоговорныеЦены.Склад = &Склад";
		
	"ВЫБРАТЬ
	|	ДоговорныеЦены.Цена
	|ИЗ
	|	РегистрСведений.ДоговорныеЦены КАК ДоговорныеЦены
	|ГДЕ
	|	ДоговорныеЦены.НомГруппаИлиСвойство = &Ссылка
	|	И ДоговорныеЦены.Склад = &Склад";	
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
	Цена = РезультатЗапроса.Цена ;
	КонецЕсли;

	Если Цена <> Неопределено ИЛИ Цена <> 0 Тогда	
		Возврат Цена;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;		
	        	        
КонецФункции	

Функция ПолучитьРозничнуюЦену(Номенклатура,ТипЦен, ХарактеристикаН) Экспорт
		
		З = Новый Запрос;
		З.Текст = "ВЫБРАТЬ
			|	ЦеныНоменклатурыСрезПоследних.Цена
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			&Дата,
			|			Номенклатура = &Номенклатура";
		Если ХарактеристикаН <> Неопределено Тогда
			З.Текст = З.Текст + "		
			|				И ХарактеристикаНоменклатуры = &Характеристика";
		З.УстановитьПараметр("Характеристика",ХарактеристикаН);		
		КонецЕсли;
			З.Текст = З.Текст + " И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних";
			
		З.УстановитьПараметр("Номенклатура",Номенклатура);
		З.УстановитьПараметр("ТипЦен",ТипЦен);
		З.УстановитьПараметр("Дата",ТекущаяДата());

		Результат = З.Выполнить().Выбрать(); 
		
		Если Результат.Следующий() тогда
			
			Возврат Результат.Цена;
			
		Иначе
			
			Возврат 0;
			
		КонецЕсли;
		     		
	КонецФункции
	
Функция ПолучитьИндивидуальнуюЦену(Номенклатура,ТипЦен, ХарактеристикаН = Неопределено) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		                      |	ЕСТЬNULL(ИндивидуальныеЦены.Цена, 0) КАК Цена,
		                      |	ЕСТЬNULL(ИндивидуальныеЦены.БазоваяЦена, 0) КАК БазоваяЦена,
		                      |	ЕСТЬNULL(ИндивидуальныеЦены.Наценка, 0) КАК Наценка
		                      |ИЗ
		                      |	Справочник.ИндивидуальныеЦены КАК ИндивидуальныеЦены
		                      |ГДЕ
		                      |	ИндивидуальныеЦены.Владелец = &Владелец
		                      |	И (ИндивидуальныеЦены.Номенклатура = &Номенклатура
		                      |			ИЛИ ИндивидуальныеЦены.Номенклатура = &родитель)";
							  Если ХарактеристикаН <> Неопределено Тогда
								  Запрос.Текст = Запрос.Текст + " 
		                      |	И ИндивидуальныеЦены.ХарактеристикаНоменклатуры = &ХН";
							  Запрос.УстановитьПараметр("ХН",ХарактеристикаН); 
					 		  КонецЕсли;
						  
		Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
		Запрос.УстановитьПараметр("родитель",Номенклатура.Родитель);
		Запрос.УстановитьПараметр("Владелец",ТипЦен);
		
		Результат = Запрос.Выполнить().Выбрать(); 
				
		Если Результат.Следующий() Тогда
			Цена = Результат.Цена;
			//Если  Результат.БазоваяЦена = "Закупочная" Тогда
			//	Обр = Обработки.ЛК_ФормированиеРозничныхЦен.Создать();
			//	Обр.ПолучитьЗакупочнуюЦену(Номенклатура);
			//	
			//	Цена = ОкруглениеПоПравилам(Цена);
			//КонецЕсли;
			Возврат Цена;
		Иначе	
			Возврат Неопределено;			
		КонецЕсли;
				
КонецФункции

Функция ОкруглениеПоПравилам (ЦенаВходная) Экспорт
			
	Ц = ОкрИМ(ЦенаВходная);

	Если Ц  > 300 И Ц % 100 = 0 Тогда 
		Ц = Ц - 1;
	КонецЕсли;	
	
	Возврат Ц		
	
КонецФункции

Функция ОкрИМ(ЦенаВходная)
	
	
	Копейки = ЦенаВходная - Цел(ЦенаВходная) ;
	
	// ОкруглениеДоПятиВБольшуюСторону
	Если ЦенаВходная > 300 Тогда
		
		ОкруглЦена = ЦенаВходная;
		
		Если Копейки <> 0 Тогда                  
			ОкруглЦена = Цел(ЦенаВходная) + 1;
		КонецЕсли ;
		Пока ОкруглЦена % 5 <> 0 Цикл
			ОкруглЦена = ОкруглЦена + 1;
		КонецЦикла;	
		
		Возврат ОкруглЦена;
		
	КонецЕсли;	
	//
	
	Если Копейки <= 0.5 Тогда                   // 0.4
		ОкруглЦена = Цел(ЦенаВходная);
	Иначе
		ОкруглЦена = Цел(ЦенаВходная) + 1;
	КонецЕсли ;
	
	ОкрЦ = Окр(ОкруглЦена,-1) ;
	ОкрС = ОкрЦ - ОкруглЦена ;
	
	Если ОкруглЦена > 300 И ОкрС <> 5 Тогда
			 ОкруглЦена = ОкрЦ;
	КонецЕсли;	 
	
	ОчПр = Окр(ОкруглЦена,-1) ;
	ОчС  = ОкруглЦена - ОчПр ;      
	Раз  = СтрДлина(СтрЗаменить(Строка(ОкруглЦена), Символы.НПП, "")) - 1;	       
	ОчЦ  = ОкруглЦена / Pow(10, Раз) ;
	РезО = (ОчЦ - Цел(ОчЦ)) * Pow(10, Раз);  
	
	Если РезО = 0 Тогда
		ОкруглЦена = ОкруглЦена - 1 ;
	ИначеЕсли РезО = 1 Тогда 
		ОкруглЦена = ОкруглЦена - 2 ;
	КонецЕсли;
	
	
	Возврат ОкруглЦена	
	
	
КонецФункции	

// Расчет цены по остаткам розницы для перемещения на оптовый склад
Функция РасчетЦеныПеремещениеОптовыйСклад(НоменклатураСсылка, СкладСсылка, ХарактеристикаН, ДатаСреза, РекурсияАктивна = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыВРозницеОстатки.Номенклатура,
		|	ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыВРозницеОстатки.КоличествоОстаток,
		|	ТоварыВРозницеОстатки.СуммаПродажнаяОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыВРознице.Остатки(
		|			&ДатаСреза,
		|			Склад = &СкладРозница
		|				И Номенклатура = &НоменклатураСсылка
		|				И ХарактеристикаНоменклатуры = &ХарактеристикаСсылка) КАК ТоварыВРозницеОстатки";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("СкладРозница", СкладСсылка);
	Запрос.УстановитьПараметр("НоменклатураСсылка", НоменклатураСсылка);
	Запрос.УстановитьПараметр("ХарактеристикаСсылка", ХарактеристикаН);
	
	В = Запрос.Выполнить().Выбрать();
	
	Цена = 0;
	
	Если В.Следующий() Тогда
		Цена = ?(В.КоличествоОстаток = 0, 0, В.СуммаПродажнаяОстаток / В.КоличествоОстаток) ;
	Иначе 
		Если Не РекурсияАктивна Тогда
			Цена = РасчетЦеныПеремещениеОптовыйСклад(НоменклатураСсылка, СкладСсылка, ХарактеристикаН, ДатаСреза, Истина);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Цена;
	
	//Запрос групповая обработка
	
	//"ВЫБРАТЬ
	//	|	ПеремещениеТоваровТовары.Номенклатура,
	//	|	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры
	//	|ПОМЕСТИТЬ ДокНоменклатура
	//	|ИЗ
	//	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	//	|ГДЕ
	//	|	ПеремещениеТоваровТовары.Ссылка = &ДокСсылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ТоварыВРозницеОстатки.Номенклатура,
	//	|	ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры,
	//	|	ТоварыВРозницеОстатки.КоличествоОстаток,
	//	|	ТоварыВРозницеОстатки.СуммаПродажнаяОстаток
	//	|ИЗ
	//	|	ДокНоменклатура КАК ДокНоменклатура
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРознице.Остатки(
	//	|				&ДатаСреза,
	//	|				Склад = &СкладРозница
	//	|					И Номенклатура В
	//	|						(ВЫБРАТЬ
	//	|							ДокНоменклатура.Номенклатура
	//	|						ИЗ
	//	|							ДокНоменклатура КАК ДокНоменклатура)) КАК ТоварыВРозницеОстатки
	//	|		ПО ДокНоменклатура.Номенклатура = ТоварыВРозницеОстатки.Номенклатура";
	//
	//Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	//Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка);
	//Запрос.УстановитьПараметр("СкладРозница", СкладРозница);
	
КонецФункции


//#######

// Получение списка остатков по розн. складу в разразе характеристик
Функция ПолучениеСпискаОстатковРозн (НоменклатураСсылка, СкладСсылка, ДатаСреза) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
		|	КОЛИЧЕСТВО(ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
		|	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ТДата2,
		|			Номенклатура = &Номенклатура
		|				И ТипЦен = &СкладТЦ) КАК ЦеныНоменклатурыСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура";
		
	Запрос.УстановитьПараметр("СкладТЦ", СкладСсылка.ТипЦенРозничнойТорговли);	
	Запрос.УстановитьПараметр("ТДата2", ТекущаяДата() );
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка );	
	
	ВЗ = Запрос.Выполнить().Выбрать();
	Если ВЗ.Следующий() Тогда
		ЛюбаяПоследняяЦенаУстановкиЦен = ВЗ.Цена;
	Иначе
		ЛюбаяПоследняяЦенаУстановкиЦен = 0;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	ТоварыВРозницеОстатки.Склад,
		//|	ТоварыВРозницеОстатки.Номенклатура,
		//|	ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры,
		//|	ТоварыВРозницеОстатки.КоличествоОстаток,
		//|	ТоварыВРозницеОстатки.СуммаПродажнаяОстаток,
		//|	ВЫБОР
		//|		КОГДА ТоварыВРозницеОстатки.КоличествоОстаток = 0
		//|			ТОГДА 0
		//|		ИНАЧЕ ТоварыВРозницеОстатки.СуммаПродажнаяОстаток / ТоварыВРозницеОстатки.КоличествоОстаток
		//|	КОНЕЦ КАК ЦенаПоОстатку
		//|ИЗ
		//|	РегистрНакопления.ТоварыВРознице.Остатки(
		//|			&ТДата,
		//|			Склад = &Склад
		//|				И Номенклатура = &Номен) КАК ТоварыВРозницеОстатки";
		
		"ВЫБРАТЬ
		|	ТоварыВРозницеОстатки.Склад,
		|	ТоварыВРозницеОстатки.Номенклатура,
		|	ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыВРозницеОстатки.КоличествоОстаток,
		|	ТоварыВРозницеОстатки.СуммаПродажнаяОстаток,
		|	ВЫБОР
		|		КОГДА ТоварыВРозницеОстатки.КоличествоОстаток = 0
		|			ТОГДА 0
		|		ИНАЧЕ ТоварыВРозницеОстатки.СуммаПродажнаяОстаток / ТоварыВРозницеОстатки.КоличествоОстаток
		|	КОНЕЦ КАК ЦенаПоОстатку
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрНакопления.ТоварыВРознице.Остатки(
		|			&ТДата,
		|			Склад = &Склад
		|				И Номенклатура = &Номен) КАК ТоварыВРозницеОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Склад,
		|	ВТ.Номенклатура,
		|	ВТ.ХарактеристикаНоменклатуры,
		|	ВТ.КоличествоОстаток,
		|	ВТ.СуммаПродажнаяОстаток,
		|	ВТ.ЦенаПоОстатку,
		|	ЕСТЬNULL(ЦеныАТТСрезПоследних.Цена, 0) КАК ЦенаСрезаПоАТТ,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаСрезЦеныНоменклатуры
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАТТ.СрезПоследних(
		|				&ТДата,
		|				Склад = &Склад
		|					И Номенклатура = &Номен) КАК ЦеныАТТСрезПоследних
		|		ПО ВТ.Номенклатура = ЦеныАТТСрезПоследних.Номенклатура
		|			И ВТ.ХарактеристикаНоменклатуры = ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТДата2, ТипЦен = &СкладТЦ) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВТ.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВТ.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры";
	
	Запрос.УстановитьПараметр("Номен", НоменклатураСсылка);
	Запрос.УстановитьПараметр("Склад", СкладСсылка);
	Запрос.УстановитьПараметр("ТДата", Новый Граница(ДатаСреза, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("СкладТЦ", СкладСсылка.ТипЦенРозничнойТорговли);	
	Запрос.УстановитьПараметр("ТДата2", ТекущаяДата() );

	//ЭлементыФормы.Товары.ТекущаяСтрока.ХарактеристикаНоменклатуры
	
	Список = Новый СписокЗначений;
	ЦенаХарКа = Новый Соответствие;
	Данные = Новый Массив;
	
 	Попытка
		В = Запрос.Выполнить().Выбрать();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Список;
	КонецПопытки;
	
	Пока В.Следующий() Цикл
		Если В.ЦенаСрезаПоАТТ <> 0 Тогда	
			ЦенаНоменклатуры = В.ЦенаСрезаПоАТТ;
		Иначе	
			ЦенаНоменклатуры = ?(В.ЦенаСрезЦеныНоменклатуры = 0, ЛюбаяПоследняяЦенаУстановкиЦен, В.ЦенаСрезЦеныНоменклатуры);  
		КонецЕсли;
		
		ЦенаНоменклатуры = ?(ЦенаНоменклатуры = 0, В.ЦенаПоОстатку, ЦенаНоменклатуры);
			
		Список.Добавить(ЦенаНоменклатуры, "" + Окр(ЦенаНоменклатуры,2) + "р (" + В.КоличествоОстаток + "шт) " + В.ХарактеристикаНоменклатуры );		
		ЦенаХарКа.Вставить(Строка(В.ХарактеристикаНоменклатуры),  В.ХарактеристикаНоменклатуры); 	
	КонецЦикла;	
	
	Данные.Добавить(Список);
	Данные.Добавить(ЦенаХарКа); 

	Возврат Данные
	
КонецФункции

// ######  Обработка печати 

Функция ПечатьАннотации (Ссылка)    Экспорт
	
	ТипДок = ?(ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров"), "ПеремещениеТоваров", "ПоступлениеТоваровУслуг" );
	
	Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//               |	ВложенныйЗапрос.Номенклатура,
		//               |	МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод,
		//               |	Штрихкоды.ТипШтрихкода,
		//               |	ВложенныйЗапрос.Количество
		//               |ПОМЕСТИТЬ ВТ1
		//               |ИЗ
		//               |	(ВЫБРАТЬ
		//               |		ПеремещениеТоваров.Номенклатура КАК Номенклатура,
		//               |		ПеремещениеТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		//               |		ПеремещениеТоваров.Количество КАК Количество
		//               |	ИЗ
		//               |		Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
		//               |	ГДЕ
		//               |		ПеремещениеТоваров.Ссылка = &Ссылка) КАК ВложенныйЗапрос
		//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
		//               |		ПО ВложенныйЗапрос.Номенклатура = Штрихкоды.Владелец
		//               |			И ВложенныйЗапрос.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
		//               |ГДЕ
		//               |	Штрихкоды.ТипШтрихкода = &ТипШтрихкода
		//               |
		//               |СГРУППИРОВАТЬ ПО
		//               |	ВложенныйЗапрос.Номенклатура,
		//               |	Штрихкоды.ТипШтрихкода,
		//               |	ВложенныйЗапрос.Количество
		//               |;
		//               |
		//               |////////////////////////////////////////////////////////////////////////////////
		//               |ВЫБРАТЬ
		//               |	ПеремещениеТоваров.Номенклатура КАК Номенклатура,
		//               |	МАКСИМУМ(ПеремещениеТоваров.Номенклатура.Артикул) КАК Артикул,
		//               |	МАКСИМУМ(ВТ1.Штрихкод) КАК ШтрихкодИзРегистра,
		//               |	МАКСИМУМ(ВТ1.ТипШтрихкода) КАК ТипШтрихкодаИзРегистра,
		//               |	МАКСИМУМ(ПеремещениеТоваров.Штрихкод) КАК ШтрихкодИзДокумента,
		//               |	МАКСИМУМ(ПеремещениеТоваров.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияИзДокумента,
		//               |	СУММА(ВТ1.Количество) КАК Количество
		//               |ИЗ
		//               |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
		//               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ1 КАК ВТ1
		//               |		ПО ПеремещениеТоваров.Номенклатура = ВТ1.Номенклатура
		//               |ГДЕ
		//               |	ПеремещениеТоваров.Ссылка = &Ссылка
		//               |
		//               |СГРУППИРОВАТЬ ПО
		//               |	ПеремещениеТоваров.Номенклатура";
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
		               |	ПеремещениеТоваровТовары.Количество КАК Количество,
		               |	ПеремещениеТоваровТовары.Штрихкод КАК ШтрихкодИзДокумента
		               |ИЗ
		               |	Документ." + ТипДок + ".Товары КАК ПеремещениеТоваровТовары
		               |ГДЕ
		               |	ПеремещениеТоваровТовары.Ссылка = &Ссылка";
		   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//Запрос.УстановитьПараметр("ТипШтрихкода", ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
	
	//Выборка = Запрос.Выполнить().Выгрузить();
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Аннотация";
	
//	Макет = ЭтотОбъект.ПолучитьМакет("Аннотация");
	Макет = Обработки.ЛК_РаботаСПеремещениями.ПолучитьМакет("Аннотация1");
	//Область = Макет.ПолучитьОбласть("Заголовок");
	//Область.Параметры.ПрихОрдер = Лев(Строка(Ссылка), СтрДлина(Строка(Ссылка))-8);
	//ТабДок.Вывести(Область);
		
	Пока Выборка.Следующий() Цикл 
		Н = ?(Выборка.Количество = NULL, 0,Выборка.Количество);
		Пока Н > 0 Цикл
			Если СтрДлина(Выборка.ШтрихкодИзДокумента) < 2 Тогда
				ОбластьСтрока = Макет.ПолучитьОбласть("Строка1");
			Иначе
				ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
				РисунокШтрихКод = ОбластьСтрока.Рисунки.D1;
				Обработки.ПечатьЦенников.Создать().ЗаполнитьРисунокШтрихКодом(РисунокШтрихКод, Выборка.ШтрихкодИзДокумента) ;			
			КонецЕсли;   		
			ОбластьСтрока.Параметры.Заполнить(Выборка);
			ОбластьСтрока.Параметры.ДОН = Выборка.Номенклатура.ДополнительноеОписаниеНоменклатуры;
			ТабДок.Вывести(ОбластьСтрока);
			
			Н = Н - 1;
		КонецЦикла;	
	КонецЦикла;
	
	ТабДок.ТолькоПросмотр = Истина;
	//ТабДок.ОтображатьЗаголовки = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	
	Возврат  ТабДок
	
КонецФункции

//Правка Гребльного Д. начало
Функция ПечатьАннотацииИзОбработки (ТЗНовая)    Экспорт
	//	ТипДок = ?(ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров"), "ПеремещениеТоваров", "ПоступлениеТоваровУслуг" );

	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Аннотация";
	
	Макет = Обработки.ЛК_РаботаСПеремещениями.ПолучитьМакет("Аннотация1");
	
	
	Для Каждого Стр из ТЗНовая Цикл 		
		Н = ?(Стр.Количество = NULL, 0,Стр.Количество);
		Пока Н > 0 Цикл
			Если СтрДлина(Стр.Штрихкод) < 2 Тогда
				ОбластьСтрока = Макет.ПолучитьОбласть("Строка1");
			Иначе
				ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
				РисунокШтрихКод = ОбластьСтрока.Рисунки.D1;
				Обработки.ПечатьЦенников.Создать().ЗаполнитьРисунокШтрихКодом(РисунокШтрихКод, Стр.Штрихкод);			
			КонецЕсли;   		
			ОбластьСтрока.Параметры.Заполнить(Стр);
			ОбластьСтрока.Параметры.ДОН = Стр.Номенклатура.ДополнительноеОписаниеНоменклатуры;
			ТабДок.Вывести(ОбластьСтрока);
			
			Н = Н - 1;
		КонецЦикла;	
	КонецЦикла;
	
	ТабДок.ТолькоПросмотр = Истина;
	//ТабДок.ОтображатьЗаголовки = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	
	Возврат  ТабДок
КонецФункции
//Правка Гребельного Д. конец

// Печать по группам матрицы начисления процентов для Инвентаризации
Функция ПечатьДокументаПоГруппам(Документ)  Экспорт
	
	НетШапки = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыДляПроцентов.Ссылка
		|ИЗ
		|	Справочник.ГруппыДляПроцентов КАК ГруппыДляПроцентов";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		Группа = РезультатЗапроса.Ссылка;
			
		ПараметрыПечати = ПолучитьДанныеДляПечатиДокументаПоГруппам(Группа, Документ);
		
		Если ПараметрыПечати.Позиции.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НетШапки Тогда
			
			ТабДокумент = Новый ТабличныйДокумент;
			ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИнвентаризацияТоваровНаСкладе";

			Макет = Документы.ИнвентаризацияТоваровНаСкладе.ПолучитьМакет("ИнвентаризацияТоваровПоГруппам");

			// Выводим шапку накладной
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
			ТабДокумент.Вывести(ОбластьМакета);

			// Выводим данные об организации и складе
			ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
			ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
			ТабДокумент.Вывести(ОбластьМакета);
			
			НетШапки = НЕ НетШапки;
			
		КонецЕсли;	

		ОбластьМакета = Макет.ПолучитьОбласть("ШапкасХар");
		ОбластьМакета.Параметры.Товар = Строка(Группа);
		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета    = Макет.ПолучитьОбласть("СтрокасХар");

		Для каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл	

			Если НЕ ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;

			ОбластьМакета.Параметры.Заполнить(ПараметрыПозиции);
			ОбластьМакета.Параметры.Товар = ПараметрыПозиции.Номенклатура;

			ТабДокумент.Вывести(ОбластьМакета);

		КонецЦикла;

		// Вывести Итого
		ОбластьМакета                        = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Вставка");
		ТабДокумент.Вывести(ОбластьМакета);		
		
	КонецЦикла;

	// Выводим подписи к документу
	//ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	//ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

Функция ПолучитьДанныеДляПечатиДокументаПоГруппам(Группа, Документ) Экспорт
	
	ПараметрыПечати = Новый Структура;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", "Артикул");
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", "Код");
		ТекстКодАртикул = "Код";
	Иначе
		ПараметрыПечати.Вставить("ВыводитьКоды", Ложь);
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", "");
		ТекстКодАртикул = "Код";
	КонецЕсли;
    	
	ВалютаПечати = Справочники.Валюты.НайтиПоКоду("643");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Документ);
	
	ТипСклада = Перечисления.ВидыСкладов.Розничный;
	
	Если ЛК_РаботаСДокументами.ЭтоБазаДляПереучета() Тогда
		ТипСклада = Перечисления.ВидыСкладов.НТТ;
	КонецЕсли;	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИнвентаризацияТоваровНаСкладе.Номер,
	|	ИнвентаризацияТоваровНаСкладе.Дата,
	|	ИнвентаризацияТоваровНаСкладе.Организация,
	|	ИнвентаризацияТоваровНаСкладе.Склад.Представление КАК ПредставлениеСклада,
	|	ИнвентаризацияТоваровНаСкладе.Склад
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент";

	Запрос.УстановитьПараметр("ВидСкладаНТТ",    ТипСклада);

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Инвентаризация товаров на складе по группам"));
	ПараметрыПечати.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,"));
	ПараметрыПечати.Вставить("ПредставлениеСклада", Шапка.ПредставлениеСклада);
	ПараметрыПечати.Вставить("ВалютаНаименование", СокрЛП(ВалютаПечати));
	ПараметрыПечати.Вставить("Валюта", ВалютаПечати);
	
	Позиции = Новый Массив;
	
	ИтогСуммы        = 0;
	ИтогСуммыПоУчету = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки,
		|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура,
		|	ИнвентаризацияТоваровНаСкладеТовары.ХарактеристикаНоменклатуры,
		|	ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет,
		|	ИнвентаризацияТоваровНаСкладеТовары.Количество,
		|	ИнвентаризацияТоваровНаСкладеТовары.Отклонение,
		|	ВЫБОР
		|		КОГДА ИнвентаризацияТоваровНаСкладеТовары.Ссылка.Склад.ВидСклада = &ВидСкладаНТТ
		|			ТОГДА ИнвентаризацияТоваровНаСкладеТовары.ЦенаВРознице
		|		ИНАЧЕ ИнвентаризацияТоваровНаСкладеТовары.Цена
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА ИнвентаризацияТоваровНаСкладеТовары.Ссылка.Склад.ВидСклада = &ВидСкладаНТТ
		|			ТОГДА (ИнвентаризацияТоваровНаСкладеТовары.Количество + ИнвентаризацияТоваровНаСкладеТовары.ООРП) * ИнвентаризацияТоваровНаСкладеТовары.ЦенаВРознице
		|		ИНАЧЕ ИнвентаризацияТоваровНаСкладеТовары.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ИнвентаризацияТоваровНаСкладеТовары.Ссылка.Склад.ВидСклада = &ВидСкладаНТТ
		|			ТОГДА ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет * ИнвентаризацияТоваровНаСкладеТовары.ЦенаВРознице
		|		ИНАЧЕ ИнвентаризацияТоваровНаСкладеТовары.СуммаУчет
		|	КОНЕЦ КАК СуммаПоУчету,
		|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.НаименованиеПолное КАК Товар,
		|	ИнвентаризацияТоваровНаСкладеТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.Артикул КАК КодАртикул,
		|	ИнвентаризацияТоваровНаСкладеТовары.СерияНоменклатуры КАК Серия,
		|	ИнвентаризацияТоваровНаСкладеТовары.ООРП,
		|	ИнвентаризацияТоваровНаСкладеТовары.Итого
		|ПОМЕСТИТЬ ВТ1
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				СоставГруппДляПроцентов.Номенклатура
		|			ИЗ
		|				РегистрСведений.СоставГруппДляПроцентов КАК СоставГруппДляПроцентов
		|			ГДЕ
		|				СоставГруппДляПроцентов.Группа = &Группа)
		|	И ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ1.НомерСтроки,
		|	ВТ1.Номенклатура,
		|	ВТ1.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ВТ1.КоличествоУчет,
		|	ВТ1.Количество,
		|	ВТ1.Отклонение,
		|	ВТ1.Цена,
		|	ВТ1.Сумма,
		|	ВТ1.СуммаПоУчету,
		|	ВТ1.Сумма - ВТ1.СуммаПоУчету КАК РазницаСумма,
		|	ВТ1.Товар,
		|	ВТ1.ЕдиницаИзмерения,
		|	ВТ1.КодАртикул,
		|	ВТ1.Серия,
		|	ВТ1.ООРП,
		|	ВТ1.Итого
		|ИЗ
		|	ВТ1 КАК ВТ1";
	
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.УстановитьПараметр("ВидСкладаНТТ", ТипСклада);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСтрокТовары = РезультатЗапроса.Выбрать();
	
	ИтогоИтог = 0;
	ИтогоООРП = 0;
	ИтогоРазницаСумма = 0;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		ПараметрыПозиции = Новый Структура;
		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);		
        ПараметрыПозиции.Вставить("НомерСтроки", ВыборкаСтрокТовары.НомерСтроки);		
		ПараметрыПозиции.Вставить("Товар", ?(ВыборкаСтрокТовары.Товар = NULL, "", ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары));
		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("КоличествоПоУчету", ВыборкаСтрокТовары.КоличествоУчет);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТовары.ЕдиницаИзмерения);
		ПараметрыПозиции.Вставить("Цена", ВыборкаСтрокТовары.Цена);
		ПараметрыПозиции.Вставить("Сумма", ВыборкаСтрокТовары.Сумма);
		ПараметрыПозиции.Вставить("СуммаПоУчету", ВыборкаСтрокТовары.СуммаПоУчету);
		ПараметрыПозиции.Вставить("Разница", ВыборкаСтрокТовары.Отклонение ); 
		ПараметрыПозиции.Вставить("РазницаСумма", ВыборкаСтрокТовары.РазницаСумма ); 
		ПараметрыПозиции.Вставить("Харка", ВыборкаСтрокТовары.Характеристика );  
		ПараметрыПозиции.Вставить("ООРП", ВыборкаСтрокТовары.ООРП );  
		ПараметрыПозиции.Вставить("Итого", ВыборкаСтрокТовары.Итого );  

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ПараметрыПозиции.Вставить("КодАртикул", ВыборкаСтрокТовары.КодАртикул);
		КонецЕсли;

		ИтогСуммы        = ИтогСуммы        + ВыборкаСтрокТовары.Сумма;
		ИтогСуммыПоУчету = ИтогСуммыПоУчету + ВыборкаСтрокТовары.СуммаПоУчету;
		ИтогоИтог = ИтогоИтог + ВыборкаСтрокТовары.ООРП;
		ИтогоООРП = ИтогоООРП + ВыборкаСтрокТовары.Итого;
		ИтогоРазницаСумма = ИтогоРазницаСумма + ВыборкаСтрокТовары.РазницаСумма;

		#Если ВнешнееСоединение Тогда
		WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПозиции);
		#КонецЕсли

		Позиции.Добавить(ПараметрыПозиции);

	КонецЦикла;
	
	ПараметрыПечати.Вставить("Позиции", Позиции);

	чВсего = ОбщегоНазначения.ФорматСумм(ИтогСуммы);
	чВсегоПоУчету = ОбщегоНазначения.ФорматСумм(ИтогСуммыПоУчету);
	ПараметрыПечати.Вставить("ИтогРазница", ИтогоРазницаСумма); // Строка(Формат(ИтогСуммы - ИтогСуммыПоУчету, "ЧДЦ=2")));
	ПараметрыПечати.Вставить("Всего", чВсего);
	ПараметрыПечати.Вставить("ВсегоПоУчету", чВсегоПоУчету);
	ПараметрыПечати.Вставить("ИтогоИтог", ИтогоИтог);
	ПараметрыПечати.Вставить("ИтогоООРП", ИтогоООРП);
	
	#Если ВнешнееСоединение Тогда
	WEBПриложения.ПодготовитьСтруктуруДляВнешнегоСоединения(ПараметрыПечати);
	#КонецЕсли
	
	Возврат ПараметрыПечати;
		
КонецФункции 


// ######
Функция Счетчик (Н, ОИ, Кратность = Неопределено) Экспорт  // 
	
	//ОС = Окр(Н*100/ОИ, 0);	
	//
	//Н = Н + 1;
	//
	//Т = Строка(ОС) + "% : ";
	//
	//Возврат 
	
КонецФункции

Функция ЗаписьЛог(ИмяФайла, ТЗ, Шапка = Истина)  Экспорт
	
	Для Каждого Стр Из ТЗ Цикл
		
		ЛогСтрока = "";
		Для Каждого К Из ТЗ.Колонки Цикл	
			ЛогСтрока = ЛогСтрока + Стр[К.Имя] + " | ";
		КонецЦикла;	
		
		Попытка			  
			ВыбФайл = Новый Файл(ИмяФайла);
			Если НЕ ВыбФайл.Существует() Тогда
				ТД = Новый ТекстовыйДокумент;
				ТД.Записать(ИмяФайла); 
			КонецЕсли;
			Текст = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8,,Истина);
			Текст.ЗаписатьСтроку(ЛогСтрока);  // .Записать() - без переноса сроки; 
			Текст.Закрыть();
		Исключение
			Сообщить("Ошибка доступа к файлу логов");
		КонецПопытки;
		
	КонецЦикла;
	
КонецФункции

Функция ОпределитьЦепочкуПоставщиков (Док) Экспорт
	
	Если ТипЗнч(Док) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Т = Док.Склад.Наименование;
	Иначе
		Т = Док.СкладОтправитель.Наименование;
	КонецЕсли;	
	
	СписокП = Новый Массив;
	СписокП.Добавить(Т);
	
	Основание = ВозможноОснование(Док);
	
	Пока Основание <> Неопределено Цикл
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			СписокП.Добавить(Основание.СкладОтправитель.Наименование);		
		КонецЕсли;

		Основание = ВозможноОснование(Основание);
		
	КонецЦикла;
	
	Строка = "";
	ВС = СписокП.Количество()-1; 
	Пока ВС >= 0 Цикл
		Строка = Строка + СписокП[ВС] + ?(ВС = 0, "", " - ");
		ВС = ВС - 1;
	КонецЦикла;	
	
	Возврат Строка
	
КонецФункции

Функция ВозможноОснование (Док)
	
	П = Док.Метаданные().Реквизиты.Найти("Основание");
	
	Если П <> Неопределено Тогда
		Возврат Док.Основание;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции	

Процедура НеСдвигатьПартии(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	 Если НЕ Источник.ЭтоНовый() Тогда
	    Если Источник.Движения.Найти("ПартииТоваровНаСкладах") <> Неопределено Тогда
	        ТаблицаДвиженийПоПартиям = ВернутьТаблицуДвиженийПоПартиям(Источник.Ссылка);
	        Источник.ДополнительныеСвойства.Вставить("ПартииДоПроведения", ТаблицаДвиженийПоПартиям);            
	    КонецЕсли;
	    ГраницаПартионногоУчета = Последовательности.ПартионныйУчет.ПолучитьГраницу();        
	    Источник.ДополнительныеСвойства.Вставить("ГраницаПоследовательности", ГраницаПартионногоУчета);
	КонецЕсли;
	
КонецПроцедуры

Функция ВернутьТаблицуДвиженийПоПартиям(СсылкаНаОбъект) Экспорт
    Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
                          |    ПартииТоваровНаСкладах.Номенклатура,
                          |    ПартииТоваровНаСкладах.Склад,
                          |    ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
                          |    ПартииТоваровНаСкладах.СерияНоменклатуры,
                          |    ПартииТоваровНаСкладах.ДокументОприходования,
                          |    ПартииТоваровНаСкладах.СтатусПартии,
                          |    ПартииТоваровНаСкладах.Заказ,
                          |    ПартииТоваровНаСкладах.Качество,
                          |    ПартииТоваровНаСкладах.Количество,
                          |    ПартииТоваровНаСкладах.Стоимость
                          |ИЗ
                          |    РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
                          |ГДЕ
                          |    ПартииТоваровНаСкладах.Регистратор = &Регистратор");
    Запрос.УстановитьПараметр("Регистратор", СсылкаНаОбъект);
    РезультатЗапроса = Запрос.Выполнить();
    Если РезультатЗапроса.Пустой() Тогда
        Возврат Новый ТаблицаЗначений;
    Иначе
        Возврат РезультатЗапроса.Выгрузить();
    КонецЕсли;
КонецФункции

Процедура ПодпискаНаСобытие1ОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	//Изменил Вик 20201027
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") тогда
		НужноеНаименование	=	СокрЛП(Источник.СкладОтправитель.Наименование);
	иначе
		НужноеНаименование = "";
	КонецЕсли;
	// НЧАН
	//Если Источник.Комментарий = "Фиктивный. Перемещение комиссионных товаров." Тогда 
	Если Источник.Комментарий = "Фиктивный. Перемещение комиссионных товаров."
			или НужноеНаименование = "Неучтенка"  Тогда
	//КонецВик   
		РазрешитьЗаписьБезОстатков = Истина;
	Иначе	
		РазрешитьЗаписьБезОстатков = Ложь;
	КонецЕсли;
	// КЧАН
	
	// НЧАН   Проверка остатков при неоперативном проведении
	СписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.РазрешитьПревышениеОстаткаТоваровНаСкладе);
	Если СписокФильтров.НайтиПоЗначению(Истина) = Неопределено И (НЕ РазрешитьЗаписьБезОстатков) Тогда	
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") 
			ИЛИ  ТипЗнч(Источник) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") 
			Тогда
			Склад = ?(ТипЗнч(Источник) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах"), Источник.Склад, Источник.СкладОтправитель );
			Таблица = Источник.Товары.Выгрузить();
			ВтораяКолонка = ?(ТипЗнч(Источник) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах"), Неопределено, "ФактическоеКоличество" ); 
			КонтрольОстатков = ПроверитьОстатки (Склад, Таблица, Источник.Дата, ВтораяКолонка, источник);
			
			Если КонтрольОстатков <> Неопределено Тогда
				Отказ = Истина;
				Сообщить ("Нельзя провести " + КонтрольОстатков);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// КЧАН
				
	// НЧАН     Проверка на совпадение таблиц документов
	Если  ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") И Источник.Основание <> Неопределено Тогда
		
		О = Справочники.Склады.НайтиПоКоду("000000001");
		А = Источник.СкладОтправитель;
		Б = Источник.СкладПолучатель;
		
		Если А = О ИЛИ Б = О Тогда         // проверка только при наличии офиса в документе 
				
			Отличие = Неопределено;
			
			ТЧО = Источник.Основание.Товары.Выгрузить();
			ТЧД = Источник.Товары.Выгрузить();
			
			ТЧО.Свернуть("Номенклатура, ХарактеристикаНоменклатуры");
			ТЧД.Свернуть("Номенклатура, ХарактеристикаНоменклатуры");
		
			ТЧД.Колонки.Добавить("Соответствие");
			
			Для Каждого Стр Из ТЧО Цикл
				
				ОК = Новый Структура;
				ОК.Вставить("Номенклатура", Стр.Номенклатура);
				ОК.Вставить("ХарактеристикаНоменклатуры", Стр.ХарактеристикаНоменклатуры);
				НС = ТЧД.НайтиСтроки(ОК);
				
				Если НС.Количество() = 0 Тогда
					Отличие = "" +  Стр.Номенклатура + "(" + Стр.ХарактеристикаНоменклатуры + ")";
					Прервать;
				ИначеЕсли НС.Количество() > 1 Тогда
					Сообщить ("В текущем документе есть одинаковые строки.");
					Отказ = Истина;
					Прервать;
				КонецЕсли;
				
				НС[0].Соответствие = 1;
								
			КонецЦикла;	
			
			Если Отличие = Неопределено Тогда
				КС = ТЧД.Найти(0, "Соответствие");
				Если КС <> Неопределено Тогда
					Отличие = "" +  КС.Номенклатура + "(" + КС.ХарактеристикаНоменклатуры + ")";
			    КонецЕсли;			
			КонецЕсли;	
				
			Если Отличие <> Неопределено и не РольДоступна("СуперАдмин_без_доп_проверок") Тогда
				Сообщить ("Нельзя провести. Табличная часть документа-основания отличается по позиции " + Отличие );
				Отказ = Истина;	
				Источник.Основание.ПолучитьФорму("ФормаДокумента").Открыть();
			КонецЕсли;	
			
		КонецЕсли;	
			
	КонецЕсли;
	// КЧАН
		
	ВыполнитьКонтрольГП(Источник);    //  Игорь
	
КонецПроцедуры

Функция ПроверитьОстатки (Склад, Таблица, Дата, ВтораяКолонкаКоличество = Неопределено, источник = Неопределено) Экспорт;
	
	Если ВтораяКолонкаКоличество <> Неопределено Тогда
		Для Каждого Стр Из Таблица Цикл
			Стр = ?(Стр.Количество > Стр[ВтораяКолонкаКоличество] , Стр.Количество, Стр[ВтораяКолонкаКоличество]);
		КонецЦикла;
	КонецЕсли;
	
	//ЛК Андрей Изменение таблицы, чтобы продавались комплекты ====
	
	//Для Каждого Стр Из Таблица Цикл
	//	Товар=Стр.Номенклатура;
	//	Если Товар.Комплект=Истина Тогда
	//		Запрос = Новый Запрос;
	//		Запрос.УстановитьПараметр("Товар", Товар);
	//		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Стр.ХарактеристикаНоменклатуры);
	//		Запрос.Текст ="ВЫБРАТЬ
	//		|	КомплектующиеНоменклатуры.Комплектующая,
	//		|	КомплектующиеНоменклатуры.ХарактеристикаКомплектующей,
	//		|	КомплектующиеНоменклатуры.Количество,
	//		|	КомплектующиеНоменклатуры.ЕдиницаИзмерения
	//		|ИЗ
	//		|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
	//		|ГДЕ
	//		|	КомплектующиеНоменклатуры.Номенклатура = &Товар
	//		|	И КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
	//		Результат = Запрос.Выполнить();
	//		Выборка = Результат.Выбрать();
	//		Пока Выборка.Следующий() Цикл
	//			Строка=Таблица.Добавить();
	//			Строка.Номенклатура=Выборка.Комплектующая;
	//			Строка.ХарактеристикаНоменклатуры=Выборка.ХарактеристикаКомплектующей;
	//			Строка.Количество=Выборка.Количество*Стр.Количество*Стр.Коэффициент;
	//			Строка.Коэффициент=1;
	//			Строка.ЕдиницаИзмерения=Выборка.ЕдиницаИзмерения;
	//		КонецЦикла;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	//++ модуль выше заменили на этот:
	Если источник <> Неопределено и ТипЗнч(Источник) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		Для Каждого Стр Из источник.СоставНабора Цикл
			Товар=Стр.Номенклатура;
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Товар", Товар);
			Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Стр.ХарактеристикаНоменклатуры);
			Запрос.Текст ="ВЫБРАТЬ
			|	КомплектующиеНоменклатуры.Комплектующая,
			|	КомплектующиеНоменклатуры.ХарактеристикаКомплектующей,
			|	КомплектующиеНоменклатуры.Количество,
			|	КомплектующиеНоменклатуры.ЕдиницаИзмерения
			|ИЗ
			|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
			|ГДЕ
			|	КомплектующиеНоменклатуры.Номенклатура = &Товар
			|	И КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Строка=Таблица.Добавить();
				Строка.Номенклатура=Выборка.Комплектующая;
				Строка.ХарактеристикаНоменклатуры=Выборка.ХарактеристикаКомплектующей;
				Строка.Количество=Выборка.Количество*Стр.Количество*Стр.Коэффициент;
				Строка.Коэффициент=1;
				Строка.ЕдиницаИзмерения=Выборка.ЕдиницаИзмерения;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;	

	Счет=0;	
	Пока Счет<Таблица.Количество() Цикл
		Строка=Таблица.Получить(Счет);
		Если Строка.Номенклатура.Комплект=Истина Тогда
			Индекс=Таблица.Индекс(Строка);
			Таблица.Удалить(Индекс);
		Иначе
			Счет=Счет+1;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из Таблица Цикл
		Если Стр.Коэффициент<>1 Тогда
			Стр.Количество=Стр.Количество*Стр.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	
	//=============================================================
	
	
	
	
	
	
	
	Таблица.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "Количество");
	
	Регистр = ?(Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый, "ТоварыНаСкладах", "ТоварыВРознице");
			
	З = Новый Запрос;
	З.Текст = "ВЫБРАТЬ
	          |	ТЗ.Номенклатура КАК Номенклатура,
	          |	ТЗ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	          |	ТЗ.Количество КАК Количество
	          |ПОМЕСТИТЬ ВТ
	          |ИЗ
	          |	&ТЗ КАК ТЗ
	          |;
	          |
	          |////////////////////////////////////////////////////////////////////////////////
	          |ВЫБРАТЬ
	          |	ВТ.Номенклатура,
	          |	ВТ.ХарактеристикаНоменклатуры,
	          |	ВТ.Количество,
	          |	ТоварыВРозницеОстатки.КоличествоОстаток,
	          |	ВЫБОР
	          |		КОГДА ТоварыВРозницеОстатки.КоличествоОстаток >= ВТ.Количество
	          |			ТОГДА 0
	          |		ИНАЧЕ 1
	          |	КОНЕЦ КАК Контроль
	          |ПОМЕСТИТЬ ВТ2
	          |ИЗ
	          |	ВТ КАК ВТ
	          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления." + Регистр + ".Остатки(
	          |				&МоментВремени,
	          |				Склад = &Склад
	          |					И Номенклатура В (&Номен)) КАК ТоварыВРозницеОстатки
	          |		ПО ВТ.Номенклатура = ТоварыВРозницеОстатки.Номенклатура
	          |			И ВТ.ХарактеристикаНоменклатуры = ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры
	          |;
	          |
	          |////////////////////////////////////////////////////////////////////////////////
	          |ВЫБРАТЬ
	          |	ВТ2.Номенклатура,
	          |	ВТ2.КоличествоОстаток,
	          |	ВТ2.ХарактеристикаНоменклатуры,
	          |	ВТ2.Контроль
	          |ИЗ
	          |	ВТ2 КАК ВТ2
	          |ГДЕ
	          |	ВТ2.Контроль = 1";
			   
	З.УстановитьПараметр("МоментВремени", Дата);		   
	З.УстановитьПараметр("Склад", Склад);
	З.УстановитьПараметр("Номен", Таблица.ВыгрузитьКолонку("Номенклатура"));
	З.УстановитьПараметр("ТЗ", Таблица);
	
	В = З.Выполнить().Выбрать();
	
	КонтрольНеПройден = Неопределено;
	
	Пока В.Следующий() цикл
		//Вик 2020_12_25
		Если В.Номенклатура.Услуга тогда
			Продолжить;
		КонецЕсли;
		//КонецВик
		
		КонтрольНеПройден = "" + В.Номенклатура + " (" + В.ХарактеристикаНоменклатуры + ") на складе " + В.КоличествоОстаток + " шт.";					
	КонецЦикла;;
	
	Возврат КонтрольНеПройден
	
КонецФункции	

Процедура ВыполнитьКонтрольГП(Источник) Экспорт
    Если Источник.Метаданные().Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено Тогда
        Если НЕ Источник.ОтражатьВУправленческомУчете Тогда
            Возврат;
        КонецЕсли;
    КонецЕсли;
    Если НЕ Источник.ЭтоНовый() Тогда
        Если Источник.Движения.Найти("ПартииТоваровНаСкладах") <> Неопределено Тогда
            ПартииПослеПроведения = Источник.Движения.ПартииТоваровНаСкладах.Выгрузить();
            Если ПартииПослеПроведения.Количество() = 0 Тогда
                // для части документов партии появляются после записи объекта в базу
                ПартииПослеПроведения = ВернутьТаблицуДвиженийПоПартиям(Источник.Ссылка);
            КонецЕсли;
            Источник.ДополнительныеСвойства.Вставить("ПартииПослеПроведения", ПартииПослеПроведения);
            ОпределитьНеобходимостьВозвращенияГП(Источник);
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

Функция ОпределитьНеобходимостьВозвращенияГП(Источник) Экспорт
    ДополнительныеСвойства = Источник.ДополнительныеСвойства;
    ГраницаПоследовательностиДокумента = Неопределено;
    ДополнительныеСвойства.Свойство("ГраницаПоследовательности", ГраницаПоследовательностиДокумента);
    Идентичность = УстановитьИдентичностьТаблицДвиженийПоПартиям(ДополнительныеСвойства);
    ГраницаПоследовательностиТекущая = Последовательности.ПартионныйУчет.ПолучитьГраницу();
    Если ГраницаПоследовательностиДокумента <> Неопределено Тогда
        Если Идентичность И ГраницаПоследовательностиТекущая.Дата < ГраницаПоследовательностиДокумента.Дата Тогда
            // если таблицы идентичны, но текущая граница сдвинулась назад - вернем обратно
            Последовательности.ПартионныйУчет.УстановитьГраницу(ГраницаПоследовательностиДокумента);
            ЗаписьЖурналаРегистрации("Контроль ГП", УровеньЖурналаРегистрации.Информация, Источник.Метаданные(), Источник.Ссылка, "Граница последовательности возвращена на " + Строка(ГраницаПоследовательностиДокумента.Дата) + ", документ: " + Строка(ГраницаПоследовательностиДокумента.Ссылка));
        КонецЕсли;
    КонецЕсли;
КонецФункции

Функция УстановитьИдентичностьТаблицДвиженийПоПартиям(ДополнительныеСвойства) Экспорт
    Идентичность = Ложь;
    ПартииДоПроведения = Неопределено;
    ДополнительныеСвойства.Свойство("ПартииДоПроведения", ПартииДоПроведения);
    ПартииПослеПроведения = Неопределено;
    ДополнительныеСвойства.Свойство("ПартииПослеПроведения", ПартииПослеПроведения);
    Если СравнитьТаблицыЗначений(ПартииДоПроведения, ПартииПослеПроведения) Тогда
        Идентичность = Истина;
    Иначе
        Идентичность = Ложь;
    КонецЕсли;        
    Возврат Идентичность;
КонецФункции

Функция СравнитьТаблицыЗначений(ТаблицаЗначений1, ТаблицаЗначений2)

    Если ТипЗнч(ТаблицаЗначений1) <> Тип("ТаблицаЗначений") ИЛИ ТипЗнч(ТаблицаЗначений2) <> Тип("ТаблицаЗначений") Тогда
        Возврат Ложь;
    КонецЕсли; 
    
    Если ТаблицаЗначений1.Количество() <> ТаблицаЗначений2.Количество() Тогда
        Возврат Ложь;
    КонецЕсли; 

    Если ТаблицаЗначений1.Колонки.Количество() <> ТаблицаЗначений2.Колонки.Количество() Тогда
        Возврат Ложь;
    КонецЕсли; 

    Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
        
        Если ТаблицаЗначений2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
            Возврат Ложь;
        КонецЕсли;
        
        Для каждого СтрокаТаблицы Из ТаблицаЗначений1 Цикл
        
            Попытка
            
                Если СтрокаТаблицы[Колонка.Имя] <> ТаблицаЗначений2[ТаблицаЗначений1.Индекс(СтрокаТаблицы)][Колонка.Имя] Тогда
                
                    Возврат Ложь;
                
                КонецЕсли;
            
            Исключение
                
                Возврат Ложь;
                
            КонецПопытки;
        
        КонецЦикла; 
    
    КонецЦикла; 
    
    Возврат Истина;
    
КонецФункции // СравнитьТаблицыЗначений()

Процедура ВывестиСписокДоков (МД) Экспорт
	
	Если МД.Количество() > 0 тогда
		
		СЗ = Новый СписокЗначений;
		СЗ.ЗагрузитьЗначения(МД);
		
		ФормаСписка = ЖурналыДокументов.ЛК_Журнал.ПолучитьФорму("ФормаСписка");
		ФормаСписка.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
		ФормаСписка.Отбор.Ссылка.Значение      = СЗ;
		ФормаСписка.Отбор.Ссылка.Использование = Истина;
		
		//Изменил Вик 2020_10_08
		//ФормаСписка.Отбор.Дата.ЗначениеС = Дата("00010101");
		ФормаСписка.Отбор.Дата.ЗначениеС  = НачалоДня(ТекущаяДата());
		//КонецВик

		ФормаСписка.Отбор.Дата.ЗначениеПо = КонецДня(ТекущаяДата());
		ФормаСписка.Отбор.Дата.Использование = Истина;
		ФормаСписка.Открыть();	
		
	КонецЕсли;	
	
КонецПроцедуры	

Функция ПолучитьЗакупочную (Номенклатура, Характеристика, ДатаСреза)  Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ДатаСреза,
		|			Номенклатура = &Номенклатура
		|				И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
		|				И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Характеристика);
	Запрос.УстановитьПараметр("ТипЦен", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001"));
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	ЗакЦена = 0;
	
	Если РезультатЗапроса.Следующий() Тогда
		
		ЗакЦена = РезультатЗапроса.Цена;
		
	КонецЕсли;
	
	Возврат ЗакЦена 	
	
КонецФункции

Функция ПолучитьПоследнийШК(Номенклатура, ЕдиницаИзмерения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Штрихкод,
		|	Штрихкоды.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец = &Владелец
		|	И Штрихкоды.ЕдиницаИзмерения = &ЕдиницаИзмерения
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() ТОгда
		От = ВыборкаДетальныеЗаписи.Штрихкод;
	Иначе
		От = "";
	КонецЕсли;
	
	Возврат От
	
КонецФункции	

Функция ПолучитьАдресаХраненияНоменклатуры (НомСсылка, СкладДляПоискаПоЯчейкам = Неопределено) Экспорт
	
	Т = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛК_СвязиЯчеекНоменклатуры.Номенклатура,
		|	ЛК_СвязиЯчеекНоменклатуры.Ячейка
		|ИЗ
		|	РегистрСведений.ЛК_СвязиЯчеекНоменклатуры КАК ЛК_СвязиЯчеекНоменклатуры
		|ГДЕ
		|	ЛК_СвязиЯчеекНоменклатуры.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", НомСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Т = Т + ?(Т = "", "", ";") + ВыборкаДетальныеЗаписи.Ячейка ;
	КонецЦикла;
	
	Возврат Т
	
КонецФункции	

Процедура УстановитьУдалитьЯчейкуХранения (НоменклатураСсылка, ЯчейкаСсылка, УдалитьЯчейку = Ложь) Экспорт
	
	МЗ = РегистрыСведений.ЛК_СвязиЯчеекНоменклатуры.СоздатьМенеджерЗаписи();
	МЗ.Номенклатура = НоменклатураСсылка;
	МЗ.Ячейка = ЯчейкаСсылка;
	Если УдалитьЯчейку Тогда
		МЗ.Удалить();
	Иначе	
		МЗ.Записать(Истина);
	КонецЕсли;	
	
КонецПроцедуры	

Функция ПолучитьФункциюНадЦеной (ТипЦены, ХарактеристикаСтрЗнч) Экспорт
				
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыЦенНоменклатурыФормулыЦен.ЗначениеХарактеристики КАК ЗначениеХарактеристики,
		|	ТипыЦенНоменклатурыФормулыЦен.Условие1,
		|	ТипыЦенНоменклатурыФормулыЦен.Условие2,
		|	ТипыЦенНоменклатурыФормулыЦен.Формула1,
		|	ТипыЦенНоменклатурыФормулыЦен.Формула2
		|ИЗ
		|	Справочник.ТипыЦенНоменклатуры.ФормулыЦен КАК ТипыЦенНоменклатурыФормулыЦен
		|ГДЕ
		|	ТипыЦенНоменклатурыФормулыЦен.Ссылка = &Ссылка
		|	И ТипыЦенНоменклатурыФормулыЦен.Условие1 = ЗНАЧЕНИЕ(Перечисление.УсловияФормулЦен.ТочноеЗначение)
		|	И ТипыЦенНоменклатурыФормулыЦен.ЗначениеХарактеристики = &ЗначениеХарактеристики";
	
	Запрос.УстановитьПараметр("Ссылка",ТипЦены);
	Запрос.УстановитьПараметр("ЗначениеХарактеристики", ХарактеристикаСтрЗнч);
	ТЗнч = Запрос.Выполнить().Выбрать();
	
	Если ТЗнч.Следующий() Тогда
		Возврат ТЗнч.Формула1; 
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыЦенНоменклатурыФормулыЦен.ЗначениеХарактеристики КАК ЗначениеХарактеристики,
		|	ТипыЦенНоменклатурыФормулыЦен.Условие1,
		|	ТипыЦенНоменклатурыФормулыЦен.Условие2,
		|	ТипыЦенНоменклатурыФормулыЦен.Формула1,
		|	ТипыЦенНоменклатурыФормулыЦен.Формула2
		|ИЗ
		|	Справочник.ТипыЦенНоменклатуры.ФормулыЦен КАК ТипыЦенНоменклатурыФормулыЦен
		|ГДЕ
		|	ТипыЦенНоменклатурыФормулыЦен.Ссылка = &Ссылка
		|	И ТипыЦенНоменклатурыФормулыЦен.Условие1 <> ЗНАЧЕНИЕ(Перечисление.УсловияФормулЦен.ТочноеЗначение)  ";
	//	|	И ТипыЦенНоменклатурыФормулыЦен.ЗначениеХарактеристики = &ЗначениеХарактеристики ";

	Запрос.УстановитьПараметр("Ссылка", ТипЦены);
	//Запрос.УстановитьПараметр("ЗначениеХарактеристики", ИЗнч);

	РЗР = Запрос.Выполнить().Выгрузить();         // Изменено 21.10
	РЗР.Колонки.Добавить("Порядок");
	Для Каждого Стр Из РЗР Цикл
		Стр.Порядок = Число(Стр.ЗначениеХарактеристики);
	КонецЦикла;
	РЗР.Сортировать("Порядок Возр");
	
	ЧН = Число(ХарактеристикаСтрЗнч);
	ПредСтр = Неопределено;
	НЗ = "";	
	
	Если РЗР.Количество() = 1 Тогда
		Если ЧН < Стр.Порядок Тогда
			НЗ = Стр.Формула1;
		Иначе	
			НЗ = Стр.Формула2;
		КонецЕсли;
		Возврат НЗ;
	КонецЕсли;	
			
	Для Каждого Стр Из РЗР Цикл
		
		Если ПредСтр = Неопределено И ЧН < Стр.Порядок Тогда
			НЗ = Стр.Формула1;
			Прервать;
		КонецЕсли;
		
		Если ЧН < Стр.Порядок И ЧН > ПредСтр.Порядок Тогда
			НЗ = ПредСтр.Формула2;
			Прервать;
		КонецЕсли;
			
		ПредСтр = Стр;
		
	КонецЦикла;
	
	Если НЗ = "" И РЗР.Количество() > 0 Тогда
		НЗ = Стр.Формула1;
	КонецЕсли;	

	Возврат НЗ;
	
КонецФункции	

Функция ПолучитьПоследнююЦенуПоставщика (Номенклатура, ТипЦен) Экспорт
	
	ЦенаВозвр = 0;
	КоэффВозвр = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Период,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Регистратор,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.НомерСтроки,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Активность,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ТипЦен,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Валюта,
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ТипЦен = &ТипЦен
		|	И ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	вт.Период,
		|	вт.Регистратор,
		|	вт.НомерСтроки,
		|	вт.Активность,
		|	вт.ТипЦен,
		|	вт.Номенклатура,
		|	вт.ХарактеристикаНоменклатуры,
		|	вт.ЕдиницаИзмерения,
		|	вт.Валюта,
		|	вт.Цена,
		|	ХарактеристикиНоменклатуры.ДатаЗаписи КАК ДатаЗаписи,
		|	вт.ЕдиницаИзмерения.Коэффициент
		|ИЗ
		|	вт КАК вт
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО вт.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЗаписи УБЫВ";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЦенаВозвр = ВыборкаДетальныеЗаписи.Цена;
		КоэффВозвр = ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияКоэффициент;
	КонецЕсли;
	
	МВ = Новый Массив;
	МВ.Добавить(ЦенаВозвр);
	МВ.Добавить(КоэффВозвр);

	Возврат МВ;
	
КонецФункции	

Функция ПолучитьСтоимостьИзРегистраПартийПоДокументу (Документ) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|ГДЕ
		|	ПартииТоваровНаСкладах.Регистратор = &ТекущийДокумент";
	
	Запрос.УстановитьПараметр("ТекущийДокумент", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Стоимость;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

Процедура ЗагрузкаИнвентаризацииЧерезФайл (ВФ) Экспорт
	
	Ошибки = "";
		
	Попытка
		Попытка
			Архиватор = Новый ЧтениеZipФайла(ВФ);
			ИмяФайлаОбмена = Архиватор.Элементы[0].Имя;
			ВрФ = КаталогВременныхФайлов();
			Архиватор.ИзвлечьВсе(ВрФ);				
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		Архиватор = Неопределено;
		Обр = Обработки.УниверсальныйОбменДаннымиXML.Создать();    
		Обр.ИмяФайлаОбмена = ВрФ + ИмяФайлаОбмена; 
		Обр.РежимОбмена = "Загрузка";
		Обр.ВыполнитьЗагрузку();
	Исключение
		Ошибки = Ошибки + " // " + ОписаниеОшибки();
		Сообщить(Ошибки);
	КонецПопытки;
	
КонецПроцедуры	

Функция ПолучитьТаблицуИзЭкселя(Знач ФайлEXCEL, Знач ИмяЛиста, Знач СтрокаЗаголовка = 1, НачСтрока = 0, КонСтрока = 0, КолвоСтрокExcel, Знач ПодключениеADODB = "MicrosoftJetOLEDB40") Экспорт

    Перем СonnectionString, ADODBConnection, ADODBRecordset, ТекстЗапроса;
    Перем КолвоКолонокExcel, Поле, Колонка, ИмяКолонки;
    Перем НоваяСтрока, НомерСтроки;
    Перем ТаблицаРезультат;
    
    // Нумерация MS ADODB начинается с 1.
    
    // Переменная "СтрокаЗаголовка", не используется, т.к. HDR=YES, а не HDR=NO.
    // HDR=YES:
    // 1. Считывание заголовков колонок с 1-ой строки.
    // 2. Считываемые данные со 2-ой и последующих строк типизированы. Для варианта HDR=NO: считываемые данные - строка.
    
    // Строка соединения - определение драйвера, который будет использован для подключения к файлу EXCEL.
    Если ПодключениеADODB = "MicrosoftACEOLEDB12" Тогда
        
        // ACE.OLEDB.12.0 - Для использования данного подключения необходимо дополнительное ПО:
        // Microsoft Access Database Engine 2010 Redistributable 32/64 bit.
        СonnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source= " + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 12.0;HDR=YES;IMEX=1;""";
        
        // Еще один вариант.
        //СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
        
    Иначе
        
        // Jet.OLEDB.4.0 - Стандартное подключение, как правило, не требующее установки дополнительного ПО. 
        // Рекомендуется установить последний Service Pack Windows.
        СonnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source= "  + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 8.0;HDR=YES;IMEX=1;""";
        
        // Еще один вариант.
        //СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
        
    КонецЕсли;
    
    Попытка
        // Инициализация основного объекта ADODB.Connection. Открытие соединения.
        ADODBConnection = Новый COMОбъект("ADODB.Connection");
        ADODBConnection.ConnectionString =  СonnectionString;
        ADODBConnection.Open();
        // Импирически определенный параметр для правильного определения количества строк листа.
        ADODBConnection.CursorLocation = 3;    // По-умолчанию 2.
    Исключение
        Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецПопытки;
	//ИмяЛиста = "Лист1";
    ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "$]";
    // Создание Recordset. Дочерний объект ADODBConnection. Набор записей по запросу.
    Попытка
        ADODBRecordset = Новый COMОбъект("ADODB.Recordset");
        ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
        
        // Проверка заполненности листа.
        Если (ADODBRecordset.EOF ИЛИ ADODBRecordset.BOF) Тогда
            КолвоСтрокExcel = 0;
            Сообщить(НСтр("ru = '" + ИмяЛиста + ": не содержит данных.'"), СтатусСообщения.Внимание);
            
            // Завершение работы.
            // Закрытие Объектов.
            ADODBRecordset.Close();
            ADODBConnection.Close();
            ADODBRecordset   = Неопределено;
            ADODBConnection = Неопределено;
            
            Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
        КонецЕсли;
        
        // Импирически определенные параметры для правильного определения количества строк листа.
        ADODBRecordset.AbsolutePage     = 1;
        ADODBRecordset.AbsolutePosition = 1;
    Исключение
        Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецПопытки;
    
    // Параметр, возвращаемый в вызывающую процедуру.
    КолвоСтрокExcel = ADODBRecordset.RecordCount + 1;    // (+1) - учет Строки-Заголовока, которая "съедается".
    КолвоКолонокExcel = ADODBRecordset.Fields.Count;
    
    // Проверка заполненности листа.
     Если КолвоСтрокExcel <= 2 Тогда
        КолвоСтрокExcel = 0;
        Сообщить(НСтр("ru = '" + ИмяЛиста + ": не содержит данных.'"), СтатусСообщения.Внимание);
        
        // Завершение работы.
        // Закрытие Объектов.
        ADODBRecordset.Close();
        ADODBConnection.Close();
        ADODBRecordset   = Неопределено;
        ADODBConnection = Неопределено;
        
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецЕсли;
    
    // Создание результирующей таблицы, в которую будут записываться считанные из EXCEL данные.
    ТаблицаРезультат = Новый ТаблицаЗначений;
    
    // Формирование колонок результирующей таблицы.
    
    // "НомерСтроки" - для наглядности и удобства.
    // В зависимости от разрабатываемой обработки.
    // "Сопоставлено" - может быть другим.
    // Здесь же могут быть добавлены другие колонки, не формируемые из содержимого файла EXCEL.
    ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
    ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
   Для ит = 1 ПО КолвоКолонокExcel Цикл
        
        Поле = ADODBRecordset.Fields.Item(ит - 1);
        ИмяКолонки = "К_" + ит;
        Колонка = ТаблицаРезультат.Колонки.Добавить(ИмяКолонки, , СокрЛП(СтрЗаменить(Поле.Name, "#", ".")));
        // Замена "#" на ".", т.к. при считывании ADODB "." в имени колонки заменяется на "#".
        
    КонецЦикла;
    
    // ТаблицаРезультат: 1-я строка - Строка-Заголовок.
    
    // Добавление этой строки обусловлено исключительно из соображений идентичности содержимого файла EXCEL и ТаблицыЗначений,
    // выводимой на форме Обработки, и дальнейшей обработки строки заголовка
    // с целью сопоставления колонок EXCEL и реквизитов 1С: для Справочников, ПВХ, Регистров, Документов.
    
    // Если в Вашей обработке в результирующей таблице в качестве 1-ой строки не нужна Строка-Заголовок, то
    // следует закомментировать следующий цикл:
	//НоваяСтрока = ТаблицаРезультат.Добавить();
	//НоваяСтрока.НомерСтроки = 1;
	//Для ит = 1 ПО КолвоКолонокExcel Цикл
	//    
	//    ИмяКолонки = "К_" + ит;
	//    Колонка = ТаблицаРезультат.Колонки.Найти(ИмяКолонки);
	//    НоваяСтрока[ИмяКолонки] = Колонка.Заголовок;
	//    
	//КонецЦикла;
                                               
    // ТаблицаРезультат: Формирование строк по указанному диапазону: НачСтрока - КонСтрока.
    
    НомерСтроки = 0;
    Пока ADODBRecordset.EOF() = 0 Цикл
        
        НомерСтроки = НомерСтроки + 1;
        
        Если НомерСтроки < НачСтрока Тогда    // Номер строки вне диапазона считываемых строк.
            ADODBRecordset.MoveNext();             // Следующая строка.
            Продолжить;
        КонецЕсли;
        
        Если КонСтрока > 0 И НомерСтроки > КонСтрока Тогда    // Номер строки вне диапазона считываемых строк.
            Прервать;
        КонецЕсли;
        
        НоваяСтрока = ТаблицаРезультат.Добавить();
        НоваяСтрока.НомерСтроки = НомерСтроки;
        
        Для ит = 1 ПО КолвоКолонокExcel Цикл
            
            Поле = ADODBRecordset.Fields.Item(ит - 1);
                
            Если Поле.ActualSize = 0 Тогда        // Пустое поле EXCEL.
                Продолжить;
            КонецЕсли;
                
            ЗначениеЯчейки = Поле.Value;        // Учитывая параметр HDR=YES в строке соединения, данные считываются в соответствии с их типом.
            
            ИмяКолонки = "К_" + ит;
            НоваяСтрока[ИмяКолонки] = ЗначениеЯчейки;
            
            // Используется при формировании таблицы на форме обработки.
            ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
            ДлинаСтроки      = СтрДлина(СокрЛП(ЗначениеЯчейки));
            ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
                
        КонецЦикла;
        
        ADODBRecordset.MoveNext();   // Следующая строка.
        
    КонецЦикла;
    
    //УдалитьКолонкиСНулевойШириной(ТаблицаРезультат);
    
    // Завершение работы.
    // Закрытие Объектов.
    ADODBRecordset.Close();
    ADODBConnection.Close();
    ADODBRecordset   = Неопределено;
    ADODBConnection = Неопределено;
    
    Возврат ТаблицаРезультат;
    
КонецФункции

Функция ФайлExcelПолучитьСписокЛистов(Знач ФайлEXCEL, Знач ПодключениеADODB = "MicrosoftJetOLEDB40")  Экспорт
    Перем СписокЛистов, ВсегоЛистов, ИмяЛиста, МассивЛистов;
    Перем ServiceManager, Desktop, Properties1, Properties2, Arguments, Book, Sheets;
    Перем СonnectionString, ADODBConnection, ADOXCatalog;
  
    СписокЛистов = Новый СписокЗначений;
    
    Файл = Новый Файл(ФайлEXCEL);
    
           // Для файлов типа .XLS .XLSX используем MS ADODB.
        
        // Строка соединения - определение драйвера, который будет использован для подключения к файлу EXCEL.
        Если ПодключениеADODB = "MicrosoftACEOLEDB12" Тогда
            
            // ACE.OLEDB.12.0 - Для использования данного подключения необходимо дополнительное ПО:
            // Microsoft Access Database Engine 2010 Redistributable 32/64 bit.
            СonnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source= " + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 12.0;HDR=YES;IMEX=1;""";
            
            // Еще один вариант.
            //СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
            
        Иначе
            
            // Jet.OLEDB.4.0 - Стандартное подключение, как правило, не требующее установки дополнительного ПО. 
            // Рекомендуется установить последний Service Pack Windows.
            СonnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source= "  + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 8.0;HDR=YES;IMEX=1;""";
            
            // Еще один вариант.
            //СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
            
        КонецЕсли;
        
        Попытка
            ADODBConnection = Новый COMОбъект("ADODB.Connection");       // Инициализация ADODB.
            ADODBConnection.Open(СonnectionString);                                      // Открытие соединения.
            
            
            ADOXCatalog = Новый COMОбъект ("ADOX.Catalog");
            ADOXCatalog.ActiveConnection = ADODBConnection;
            МассивЛистов = ADOXCatalog.Tables;
            
            Для Каждого ЛистМассива ИЗ МассивЛистов Цикл
                ИмяЛиста = ЛистМассива.Name;
                Если ИмяЛиста = "Excel_BuiltIn_Database" Тогда                    // Исключаем лист "по-умолчанию".
                    Продолжить;
                КонецЕсли;
                 // Добавляем в список имя листа без знака $. Исключительно для удобвства восписятия при выборе листа из списка.
                СписокЛистов.Вставить(0, Лев(ИмяЛиста, СтрДлина(ИмяЛиста)-1));
            КонецЦикла;

            ADOXCatalog = Неопределено;
            ADODBConnection.Close();
            ADODBConnection = Неопределено;
        Исключение
            Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
            Возврат Новый СписокЗначений;    // В случае ошибки возвращаем пустой список значений.
        КонецПопытки;
        
    
    
    Возврат СписокЛистов;
    
КонецФункции

Функция ПрочитатьВТаблицуЗначений(Файл, ПерваяСтрока = 1, Свойства) Экспорт
	
	Excel = Новый ComОбъект("Excel.Application");
	Excel.Workbooks.Open(Файл);
	Excel.DisplayAlerts = 0;//Не выводить предупреждения Excel
	
	КоличествоСтрок = Excel.Cells.SpecialCells(11).Row;
	КоличествоСтолбцов = Excel.Cells.SpecialCells(11).Column;  	

	ТЗ = Новый ТаблицаЗначений;
	Для ии = 1 По КоличествоСтолбцов Цикл  
		Попытка
			КолонкаКод = "К_"+Строка(ии); 
			НазваниеКолонки = Excel.ActiveSheet.Cells(ПерваяСтрока,ии).Value;
			Если ии <= КоличествоСтолбцов Тогда
				ТЗ.Колонки.Добавить(КолонкаКод, ,НазваниеКолонки);
			КонецЕсли;
			Если ии > 1 Тогда
				Свойства.Вставить(НазваниеКолонки, КолонкаКод);
			КонецЕсли;			
		Исключение
			Сообщить("Не удалось добавить колонку");
		КонецПопытки; 		
	КонецЦикла;
	
	КолКолонок = ии - 1;  	
		
	ВтораяСтрока = ПерваяСтрока + 1;
	Для ии = ВтораяСтрока По КоличествоСтрок Цикл
		стр = ТЗ.Добавить();
		Для кол = 1 По КолКолонок Цикл
			стр[кол-1] = Формат(Excel.ActiveSheet.Cells(ии,кол).Value, "ЧВН=; ЧГ=");
		КонецЦикла;
	КонецЦикла; 
	
	Excel.Quit();
	Возврат ТЗ;
	
КонецФункции

Функция ЗапретаОбменаПоДате (ПроверяемаяДата) Экспорт
	
	ВЗ = ТекущаяДата() - 86400 * 14;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений КАК ДЗ
		|ИЗ
		|	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
		|ГДЕ
		|	ГраницыЗапретаИзмененияДанных.Пользователь.Код = ""obmen""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	В = РезультатЗапроса.Выбрать();
	
	ПолОбмен = (Пользователи.ТекущийПользователь() = Справочники.Пользователи.НайтиПоКоду("obmen")) ИЛИ (Пользователи.ТекущийПользователь() = Справочники.Пользователи.НайтиПоКоду("Обмен"));
	Если ПолОбмен Тогда
		УбратьОтложенныеРаннееОбщегоЗапрета();
	КонецЕсли;	
	
	Если В.Следующий() Тогда 	
		ВЗ = В.ДЗ;
	КонецЕсли;
	
	Если ПроверяемаяДата < ВЗ Тогда
		ВЗД = Истина;
	Иначе
		ВЗД = Ложь;
	КонецЕсли;
	
	Возврат ВЗД;
	
КонецФункции

Процедура УбратьОтложенныеРаннееОбщегоЗапрета() 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ГраницыЗапретаИзмененияДанных.ГраницаЗапретаИзменений) КАК ДЗ
		|ПОМЕСТИТЬ Гр
		|ИЗ
		|	РегистрСведений.ГраницыЗапретаИзмененияДанных КАК ГраницыЗапретаИзмененияДанных
		|ГДЕ
		|	(ГраницыЗапретаИзмененияДанных.Пользователь = НЕОПРЕДЕЛЕНО
		|			ИЛИ ГраницыЗапретаИзмененияДанных.Пользователь = ЗНАЧЕНИЕ(справочник.Пользователи.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтложенныеДвиженияДокументов.УзелОбмена,
		|	ОтложенныеДвиженияДокументов.Документ
		|ИЗ
		|	РегистрСведений.ОтложенныеДвиженияДокументов КАК ОтложенныеДвиженияДокументов,
		|	Гр КАК Гр
		|ГДЕ
		|	ОтложенныеДвиженияДокументов.ДатаДокумента < Гр.ДЗ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	В = РезультатЗапроса.Выбрать();
	
	Пока В.Следующий() Цикл
		
		МЗ = РегистрыСведений.ОтложенныеДвиженияДокументов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, В);
		МЗ.Удалить();
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура УстановитьПринятиеРозницей (Перемещение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПереоценкаТоваровВРознице.Ссылка
		|ИЗ
		|	Документ.ПереоценкаТоваровВРознице КАК ПереоценкаТоваровВРознице
		|ГДЕ
		|	ПереоценкаТоваровВРознице.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Перемещение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	В = РезультатЗапроса.Выбрать();
	
	Пока В.Следующий() Цикл
		Об = В.Ссылка.ПолучитьОбъект();
		Об.Дата = Перемещение.Дата;
		Об.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
		
КонецПроцедуры	

Процедура ОткрытьПлатежныйКалендарь() Экспорт
	
	ОбС = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Платежный календарь", Истина);
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = ОбС.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	
	Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
	Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла);
	Форма.Открыть();
		
КонецПроцедуры	

Функция ДокументСПустымиХар(Док) Экспорт
	
	ВЗ = Ложь;
	
	Заполн = 0;
	НеЗаполн = 0;

	Для Каждого СтрокаТабЧасти Из Док.Товары Цикл
		Если СтрокаТабЧасти.Номенклатура.ТоварМРЦ И СтрокаТабЧасти.Номенклатура.ВестиУчетПоХарактеристикам Тогда
			//ХарНеЗаписаны = Истина;
			Если ЗначениеЗаполнено(СтрокаТабЧасти.ХарактеристикаНоменклатуры) Тогда
				Заполн = Заполн + 1;
				Прервать;
			Иначе
				НеЗаполн = НеЗаполн + 1;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Если НеЗаполн > 0 И Заполн = 0 Тогда
		ВЗ = Истина;
		//ЗаписьЖурналаРегистрации("(ЛК) Инфо", УровеньЖурналаРегистрации.Информация,,,"ХарНеЗаписаны: " + Строка(Объект));
		РС = РегистрыСведений.ДополнительнаяРегистрацияОбъектов.СоздатьМенеджерЗаписи();
		РС.Назначение = "ГР";
		РС.Объект = "ОтчетОРозничныхПродажах"; 
		РС.Менеджер = "Документы";
		РС.УИД = Строка(Док.УникальныйИдентификатор());  
		РС.Записать(Истина);
	КонецЕсли;	
	
	Возврат ВЗ;
	
КонецФункции

#КонецОбласти
//######## КЧАН


#Область Игорь
Функция ПолучитьДанныеПриемки(Ссылка = Неопределено, Список = Неопределено)  Экспорт 
	
	Если ссылка <> Неопределено Тогда
		
		структ = новый Структура;
		структ.Вставить("ДатаПринятия", "");
		структ.Вставить("Пользователь", Справочники.Пользователи.ПустаяСсылка());
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЛК_СтатусыСрезПоследних.ДатаПринятия,
		|	ЛК_СтатусыСрезПоследних.Пользователь
		|ИЗ
		|	РегистрСведений.ЛК_Статусы КАК ЛК_СтатусыСрезПоследних
		|ГДЕ
		|	ЛК_СтатусыСрезПоследних.Документ = &Ссылка";
		
		Запрос.УстановитьПараметр("ссылка", Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			структ.Вставить("ДатаПринятия", выборка.ДатаПринятия);
			структ.Вставить("Пользователь", выборка.Пользователь);
			
		КонецЦикла;
		
		Возврат структ;
		
	КонецЕсли;
	
	Если Список <> Неопределено Тогда
		
		//структ = новый ТаблицаЗначений;
		//структ.Колонки("ДатаПринятия", "");
		//структ.Вставить("Пользователь", Справочники.Пользователи.ПустаяСсылка());
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЛК_СтатусыСрезПоследних.ДатаПринятия,
		               |	ЛК_СтатусыСрезПоследних.Пользователь,
		               |	ЛК_СтатусыСрезПоследних.Документ
		               |ИЗ
		               |	РегистрСведений.ЛК_Статусы КАК ЛК_СтатусыСрезПоследних
		               |ГДЕ
		               |	ЛК_СтатусыСрезПоследних.Документ В(&Ссылка)";
		
		Запрос.УстановитьПараметр("ссылка", Список);
		
		Результат = Запрос.Выполнить();
		//Выборка = Результат.Выбрать();
		
		Возврат Результат.Выгрузить();
		
	КонецЕсли;
	

	
КонецФункции

Функция ЕстьДвиженияУООРП(СсылкаНаОбъект) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ТоварыВРознице.Период,
	               |	ТоварыВРознице.Регистратор,
	               |	ТоварыВРознице.НомерСтроки,
	               |	ТоварыВРознице.Активность,
	               |	ТоварыВРознице.ВидДвижения,
	               |	ТоварыВРознице.Склад,
	               |	ТоварыВРознице.Номенклатура,
	               |	ТоварыВРознице.ХарактеристикаНоменклатуры,
	               |	ТоварыВРознице.СерияНоменклатуры,
	               |	ТоварыВРознице.Качество,
	               |	ТоварыВРознице.Количество,
	               |	ТоварыВРознице.СуммаПродажная
	               |ИЗ
	               |	РегистрНакопления.ТоварыВРознице КАК ТоварыВРознице
	               |ГДЕ
	               |	ТоварыВРознице.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("Регистратор", СсылкаНаОбъект);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	//уже есть движения, пропускаем
	Если Выборка.Следующий() тогда
		возврат истина;	
	КонецЕсли;	
	
	возврат ложь;
	
КонецФункции
					

//++ Возвращает значение типа штрихкода для использования в ЭУ
// "1С:Печать штрихкодов"
//
// Параметры
// 	ТипКода -	ПланыВидовХарактеристик.ТипыШтрихкодов - тип, значение для которого
//				нужно получить
//
// Возвращаемое значение:
//   Число, которое может быть присвоено свойству ЭУ "ТипКода"
//
Функция ПолучитьЗначениеТипаШтрихкодаДляЭУ(ТипКода)
	Перем Значение;
	
	Если ТипКода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8 Тогда
		Значение = 0;
	ИначеЕсли ТипКода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13 Тогда
		Значение = 1;
	ИначеЕсли ТипКода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN128 Тогда
		Значение = 2;
	ИначеЕсли ТипКода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code39 Тогда
		Значение = 3;
	ИначеЕсли ТипКода = ПланыВидовХарактеристик.ТипыШтрихкодов.Code128 Тогда
		Значение = 4;
	Иначе
		Значение = -1;
	КонецЕсли;
	
	Возврат Значение;
КонецФункции // ПолучитьЗначениеТипаШтрихкодаДляЭУ()

//++
Функция ВывестиШКСверху(Макет, ТабДокумент, ссылка=Неопределено) Экспорт 
	
	//Если этопоследнийЛист Тогда
	//	Возврат "";	
	//КонецЕсли;
	
	НомерДок = прав(Ссылка.Номер,7);
	Штрихкод = СформНовыйШКЛиста(НомерДок, ссылка);
	
	//ШК
	ЭтикеткаОбласть = Макет.ПолучитьОбласть("ШК");
	ЭтикеткаОбласть.Параметры.ИмяПодб = ссылка;
	ОбластьШтрихкод = ЭтикеткаОбласть.Области.ОбластьШтрихкод;
	РисунокШтрихкод = ЭтикеткаОбласть.Рисунки.РисунокШК;
	РисунокШтрихкод.Объект.Разделители = 0;
	РисунокШтрихкод.Объект.ОриентацияТекста = 1;
	РисунокШтрихкод.Расположить(ОбластьШтрихкод);

	
	ТипКода = ПолучитьЗначениеТипаШтрихкодаДляЭУ(ПланыВидовХарактеристик.ТипыШтрихкодов.Code39);
	
	ЭтикеткаОбласть.Рисунки.РисунокШК.Объект.ТипКода   = ТипКода;
	ЭтикеткаОбласть.Рисунки.РисунокШК.Объект.Сообщение = Штрихкод;
	
	//ЭтикеткаОбласть.Параметры.НаименованиеДляЦенника = НаименованиеДляЦенника; 
	//ЭтикеткаОбласть.Параметры.Артикул                = Артикул;
	//ЭтикеткаОбласть.Параметры.Назначение             = Назначение;
	//ЭтикеткаОбласть.Параметры.НашКод                 = "К" + НашКод;
	//ЭтикеткаОбласть.Параметры.СтранаПроисхождения    = СтранаПроисхождения;
	
	ТабДокумент.Вывести(ЭтикеткаОбласть);
	
	Возврат Штрихкод;
	
КонецФункции

//++
Функция СформНовыйШКЛиста(НомерДок, ссылка)
	
	//ТекЗапись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
	
	НовыйШК =  ПолучитьШтрихКодПоДокументу(ссылка); //СформироватьШтрихКод_автоматизацияСклада(3, 4, номердок);

	//
	//ТекЗапись.Владелец         = Ссылка;
	//ТекЗапись.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("шт");
	//ТекЗапись.ТипШтрихкода     = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	////ТекЗапись.Качество         = Справочники.Качество.Новый;
	//ТекЗапись.Штрихкод         = НовыйШК;
	//
	//ТекЗапись.Прочитать();
	//
	//ТекЗапись.Владелец         = Ссылка;
	//ТекЗапись.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("шт");
	//ТекЗапись.ТипШтрихкода     = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	////ТекЗапись.Качество         = Справочники.Качество.Новый;
	//ТекЗапись.Штрихкод         = НовыйШК;
	//
	//Попытка
	//	ТекЗапись.Записать(Истина);
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	Возврат "";	
	//КонецПопытки;
	
	//Возврат  ТекЗапись; 
	
	Возврат НовыйШК;
	
КонецФункции	


//формирование штрих-кода
Функция ПолучитьШтрихКодПоДокументу(ДокСсылка) Экспорт
    стрНомерДокумента=ДокСсылка.Номер; //Прав(СокрП(ДокСсылка.Номер),7);
    //стрДата=""+Формат(ДокСсылка.Дата,"ДФ=yyyy")+?(Месяц(ДокСсылка.Дата)<10,"0"+Месяц(ДокСсылка.Дата),Месяц(ДокСсылка.Дата))+Лев(ДокСсылка.Дата,2);
    ВидДок=ТипЗнч(ДокСсылка);
    Если ВидДок=Тип("ДокументСсылка.ПеремещениеТоваров") Тогда  // для заказ-наряда
        КодДокумента="01";
    ИначеЕсли ВидДок=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда    
        КодДокумента="02";
	//ИначеЕсли ВидДок=Тип("ДокументСсылка.СчетНаОплатуЗаАвтомобили") Тогда    
	//    КодДокумента="03";     
	//ИначеЕсли ВидДок=Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда    
	//    КодДокумента="04";    
	//ИначеЕсли ВидДок=Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда    
	//    КодДокумента="05";
	//ИначеЕсли ВидДок=Тип("ДокументСсылка.СчетНаОплату") Тогда    
	//    КодДокумента="06";    
	//ИначеЕсли ВидДок=Тип("ДокументСсылка.РеализацияТоваров") Тогда    
	//    КодДокумента="07";    
    Иначе
        Возврат  "";
    КонецЕсли;
    //КодФирмы=Число(Прав(СокрП(ДокСсылка.Организация.Код),2));
    //СтрФирма=?(КодФирмы<10,"0"+КодФирмы, Строка(КодФирмы));
    ШтрихКод=КодДокумента + стрНомерДокумента; //КодДокумента+СтрФирма+стрДата+стрНомерДокумента;
    Возврат ШтрихКод;
КонецФункции

//получение документа
Функция ПолучитьДокументПоШтрихКоду(ШтрихКод) Экспорт
    ШтрихКод=СокрЛ(ШтрихКод);
    КодДокумента=Лев(ШтрихКод,2);
    Если КодДокумента="01" Тогда
        ВидДок="ПеремещениеТоваров";
    ИначеЕсли КодДокумента="02" Тогда   
        ВидДок="ПоступлениеТоваров";
	//ИначеЕсли КодДокумента="03" Тогда   
	//    ВидДок="СчетНаОплатуЗаАвтомобили";
	//ИначеЕсли КодДокумента="04" Тогда   
	//    ВидДок="ПриходныйКассовыйОрдер";
	//ИначеЕсли КодДокумента="05" Тогда   
	//    ВидДок="РасходныйКассовыйОрдер";
	//ИначеЕсли КодДокумента="06" Тогда   
	//    ВидДок="СчетНаОплату";
	//ИначеЕсли КодДокумента="07" Тогда   
	//    ВидДок="РеализацияТоваров";
    Иначе 
        Возврат Неопределено;   
    КонецЕсли;   
	//ДатаДок=Дата(Сред(ШтрихКод,5,4),Сред(ШтрихКод,9,2),Сред(ШтрихКод,11,2));
	//КодФирмы="000000"+Сред(ШтрихКод,3,2);
	//Организация=Справочники.Организации.НайтиПоКоду(КодФирмы);
	//Префикс=Организация.Префикс;
    НомерДок=сред(ШтрихКод, 3); //Префикс+Сред(ШтрихКод,13);
    Запрос=Новый Запрос;
    Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
                 |	Документ.Ссылка
                 |ИЗ
                 |	Документ."+ВидДок+" КАК Документ
                 |ГДЕ
                 |	Документ.Номер = &Номер
                 |
                 |УПОРЯДОЧИТЬ ПО
                 |	Документ.Дата УБЫВ
                 |АВТОУПОРЯДОЧИВАНИЕ";
    //Запрос.УстановитьПараметр("ДатаНач",НачалоДня(ДатаДок));             
    Запрос.УстановитьПараметр("Номер",НомерДок);
    Выборка=Запрос.Выполнить().Выбрать();
    Если Выборка.Следующий() Тогда
        Возврат Выборка.Ссылка;
    КонецЕсли;    
    Возврат Неопределено;
КонецФункции


Процедура установитьПометкуПринятоВРозн (ОформленияСтрок)   Экспорт 
	
	для Каждого  эл из 	ОформленияСтрок цикл
	//	списЗнач.Добавить(эл.ДанныеСтроки.Ссылка);
		// НЧАН 
		ДокОснов = эл.ДанныеСтроки.Ссылка.Метаданные().Реквизиты.Найти("ДокументОснование");
		
		Если ДокОснов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Док = эл.ДанныеСтроки.Ссылка.ДокументОснование;
		Если Док = Неопределено Тогда
			Продолжить;
		КонецЕсли;			 
		// КЧАН
		эл.Ячейки.ПринятаРОЗН.УстановитьТекст( ЗначениеЗаполнено(
		ЛК_РаботаСДокументами.ПолучитьДанныеПриемки(Док
		).ДатаПринятия) );  
	КонецЦикла;	

	
КонецПроцедуры

процедура УстановитьСвойствоВажности(Ссылка, Значение)   Экспорт
	//установим свойство важности
	свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Важный");
	если не ЗначениеЗаполнено(свойство) Тогда
		свойство = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
		свойство.Наименование = "Важный";
		свойство.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
		свойство.ТипЗначения = тип("Булево");
		свойство.Записать();
		свойство = свойство.Ссылка;
	КонецЕсли;
	
	рс = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	рс.Объект = Ссылка;
	рс.Свойство = свойство;
	рс.Значение = Значение;
	рс.Прочитать();
	рс.Объект = Ссылка;
	рс.Свойство = свойство;
	рс.Значение = Значение;
	рс.Записать();
	
КонецПроцедуры


#КонецОбласти

#Область ГРД

//процедура выполняет запись документов в ФоновомРежиме
//выполняется по запросу обработки "ООРП_СличительнаяВедомость"
Процедура ЗаписатьВфоне(Массив)  Экспорт

	Кол=0;
	Для Каждого Элт из Массив Цикл	
		Если Элт<>Неопределено Тогда 
			Кол=Кол+1;
			GUID = Новый УникальныйИдентификатор(Элт); 
			СсылкаДок=Документы.ОтчетОРозничныхПродажах.ПолучитьСсылку(GUID);		
			Док=СсылкаДок.ПолучитьОбъект();
			ПланыОбмена.ЗарегистрироватьИзменения(ПланыОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.НайтиПоКоду("ГР"), Док);
		КонецЕсли;
	КонецЦикла;
	//для проверки работоспособности кода:
	//Сообщить("Процедура завершена. Перезаписано " + Кол + " документов");
	
КонецПроцедуры

#КонецОбласти


//Балашева 02.09.2019

Процедура РегистрацияИзмененийНоменклатурыДляОбменаУТГЛРозницаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Отказ = Истина тогда
		Возврат;   
	КонецЕсли;	
			
		Если НЕ Источник.ЭтоНовый() Тогда   			
			Запись=Ложь;    			
			МетаданныеСправочника = Источник.Ссылка.Метаданные();
			Для каждого Реквизит из МетаданныеСправочника.СтандартныеРеквизиты Цикл
				Если Источник[Реквизит.Имя] <> Источник.Ссылка[Реквизит.Имя] Тогда
					Запись=Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Реквизит из МетаданныеСправочника.Реквизиты Цикл
				Если Реквизит = МетаданныеСправочника.Реквизиты.ДополнительноеОписаниеНоменклатуры  				
				ИЛИ Реквизит = МетаданныеСправочника.Реквизиты.НаименованиеДляСайта 
				ИЛИ Реквизит = МетаданныеСправочника.Реквизиты.ОсновноеИзображение 
				ИЛИ Реквизит = МетаданныеСправочника.Реквизиты.ОкруглениеДо
				ИЛИ Реквизит = МетаданныеСправочника.Реквизиты.ТекстДляСайта
				ИЛИ Реквизит = МетаданныеСправочника.Реквизиты.ШаблонДляПечати
				ИЛИ Реквизит = МетаданныеСправочника.Реквизиты.ГалсерID Тогда  				
				 Продолжить;
				КонецЕсли;	
				Если Источник[Реквизит.Имя] <> Источник.Ссылка[Реквизит.Имя] Тогда
					Запись=Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ из МетаданныеСправочника.ТабличныеЧасти Цикл
				Если Источник[ТЧ.Имя].Количество() <> Источник.Ссылка[ТЧ.Имя].Количество() Тогда
					Запись=Истина;
					Прервать;
				КонецЕсли;
			    сч = 0;
				Для Каждого Стр из Источник[ТЧ.Имя] цикл
					Для Каждого Реквизит из ТЧ.Реквизиты Цикл
						Если Источник[ТЧ.Имя][сч][Реквизит.Имя] <> Источник.Ссылка[ТЧ.Имя][сч][Реквизит.Имя] Тогда
							Запись=Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;	
					сч = сч + 1;
				КонецЦикла;	
			КонецЦикла;  		
			
			
			Если Запись=Истина Тогда	                                 
				ПланыОбмена.ЗарегистрироватьИзменения(ПланыОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.НайтиПоКоду("ГР"), Источник);
	        КонецЕсли;
						
		иначе 
			Источник.ДополнительныеСвойства.вставить("ЭтоНовый", Истина);   		
	    
		КонецЕсли;   

КонецПроцедуры

Процедура РегистрацияИзмененийНоменклатурыПриЗаписиДляОбменаУТГЛРозницаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Отказ = Истина тогда
		Возврат;
	КонецЕсли;
	
	
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(ПланыОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.НайтиПоКоду("ГР"), Источник);
	КонецЕсли;    

	
КонецПроцедуры


// Костин 25.10.19

Функция ПолучитьОсновноеИзображениеИзКаталогаНаДиске(Код, ПоказыватьКартинку) Экспорт
	
	ПутьКФайлу = "F:\УТ_ХранилищеКартинок\" + Код + "\";
	//ПутьКФайлу = "F:\Легкий Код\Костин\Папка\" + Код + "\";
	МассивНайденныхФайлов = НайтиФайлы(
	ПутьКФайлу, // где искать
	"*.*", // маска поиска
	Ложь // если Истина, то будет искать и в подкаталогах
	);
	
	Если  МассивНайденныхФайлов.Количество() = 1 Тогда
		
		ОсновнаяКартинка = МассивНайденныхФайлов[0];
		ПоказыватьКартинку =Истина;
		
	ИначеЕсли  МассивНайденныхФайлов.Количество() > 1 Тогда
		
		Для каждого Файл Из МассивНайденныхФайлов Цикл
			
			Если Файл.ИмяБезРасширения = Код Тогда
				ОсновнаяКартинка = Файл;
				ПоказыватьКартинку =Истина;
				Прервать;                   
			КонецЕсли;
		КонецЦикла;
		
		Если  Не   ПоказыватьКартинку Тогда
			Для каждого Файл Из МассивНайденныхФайлов Цикл
				
				ИмяФайла = Лев(Файл.ИмяБезРасширения, 11);
				НомерФайла = Прав(Файл.ИмяБезРасширения, (СтрДлина(Файл.ИмяБезРасширения) - 12));
				
				Если ИмяФайла = Код И НомерФайла = "1" Тогда
					ОсновнаяКартинка = Файл;
					ПоказыватьКартинку =Истина;
					Прервать;                   
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если  Не   ПоказыватьКартинку Тогда
			Для каждого Файл Из МассивНайденныхФайлов Цикл
							
				НомерФайла = Лев(Файл.ИмяБезРасширения, 1);
				
				Если НомерФайла = "1" Тогда
					ОсновнаяКартинка = Файл;
					ПоказыватьКартинку =Истина;
					Прервать;                   
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если  Не   ПоказыватьКартинку Тогда
			ОсновнаяКартинка = МассивНайденныхФайлов[0];
			ПоказыватьКартинку =Истина;
		КонецЕсли;
				
	Иначе
		ОсновнаяКартинка = Неопределено;
		ПоказыватьКартинку =Ложь;
	КонецЕсли;
	
	Если ПоказыватьКартинку Тогда
		Если ОсновнаяКартинка.Существует() Тогда
			НоваяКартинка = Новый Картинка(ОсновнаяКартинка.ПолноеИмя);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат НоваяКартинка;
	
КонецФункции

// Костин 01.11.19

Функция ПроверитьПравоПользователя(ПравоПользователя) Экспорт
	
	ПравоРазрешено = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПользователей.Значение
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Пользователь = &Пользователь
		|	И НастройкиПользователей.Настройка = &Настройка";
	
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию(ПравоПользователя));
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПравоРазрешено = Выборка.Значение;	
	КонецЦикла;
		
	Возврат ПравоРазрешено;
	
КонецФункции


//Вик 2020_09_04
Процедура ПередЗаписьюПроверкаСкладаИОрганизацииПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если не РольДоступна("ПолныеПрава") тогда
		
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") тогда
			НужныйСклад =  Источник.СкладПолучатель;
			Если ЗначениеЗаполнено(Источник.СкладПолучатель) тогда
				Если Источник.СкладПолучатель.Наименование = "Неучтенка" тогда
					НужныйСклад =  Источник.СкладОтправитель;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") или ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") тогда
			НужныйСклад =  Источник.СкладОрдер;
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПокупателя") тогда
			НужныйСклад =  Источник.СкладГруппа;  
		иначе
			НужныйСклад =  Источник.Склад;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НужныйСклад.ЮрЛицо) тогда 
		
			Если НужныйСклад.ЮрЛицо <> Источник.Организация тогда
				Сообщить("Внимание! Различаются Организация склада и Организация из документа", СтатусСообщения.Важное);
				Отказ = истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры
//КонецВик

//Вик 2020_12_10 СуперКостыль
Процедура ИсправлениеПлохихХарактеристик(Источник, Отказ, РежимЗаписи, РежимПроведения)  экспорт	
	Плохая  = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("40f4828e-0871-11eb-a348-0cc47aabb907")); 
 	Хорошая = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("9fa566a3-0877-11eb-a348-0cc47aabb907"));

	Отбор = Новый Структура;
	Отбор.Вставить("ХарактеристикаНоменклатуры",Плохая);
	Строки = Источник.Товары.НайтиСтроки(Отбор);
	Для каждого Строка из Строки цикл
		Строка.ХарактеристикаНоменклатуры = Хорошая; 	
	КонецЦикла;
	
	Плохая  = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("bde5caf7-e6c6-11ea-b143-0cc47aabb907")); 
 	Хорошая = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("cd220990-e6cb-11ea-b143-0cc47aabb907")); 

	Отбор = Новый Структура;
	Отбор.Вставить("ХарактеристикаНоменклатуры",Плохая);
	Строки = Источник.Товары.НайтиСтроки(Отбор);
	Для каждого Строка из Строки цикл
		Строка.ХарактеристикаНоменклатуры = Хорошая; 	
	КонецЦикла;
	
	Плохая  = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("849180e3-65f4-11eb-9be1-0cc47aabb907")); 
 	Хорошая = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор("75a0561a-65f8-11eb-9be1-0cc47aabb907")); 

	Отбор = Новый Структура;
	Отбор.Вставить("ХарактеристикаНоменклатуры",Плохая);
	Строки = Источник.Товары.НайтиСтроки(Отбор);
	Для каждого Строка из Строки цикл
		Строка.ХарактеристикаНоменклатуры = Хорошая; 	
	КонецЦикла;


КонецПроцедуры
//
