Перем ДанныеРасшифровки;

Функция ТДАнализСКД (Склады = Неопределено, СписокНоменклатуры, ДатаНач, ДатаКон, НеРассчитыватьКоличествоДнейПродаж = Ложь, ОптСкладАнализ) Экспорт
	
	Если НеРассчитыватьКоличествоДнейПродаж Тогда	
		СхемаКомпоновкиДанных = ПолучитьМакет("Макет1");
	Иначе
		СхемаКомпоновкиДанных = ПолучитьМакет("Макет");
	КонецЕсли;
	
	ЗапросД = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос;
	ЗапросД2 = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных2.Запрос;
	РозничСкладыУстановлены = Ложь;
	Если Склады.Количество() <> 0 Тогда
		ЗапросД = СтрЗаменить(ЗапросД, "Склад.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Розничный)" , "Склад.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Розничный) И Склад В (&РозничСклады)");
		ЗапросД2 = СтрЗаменить(ЗапросД2, "Номенклатура В ИЕРАРХИИ (&Номенклатура)" , "Номенклатура В ИЕРАРХИИ (&Номенклатура) И Склад В (&РозничСклады)");

		РозничСкладыУстановлены = Истина;
	КонецЕсли;	
	
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Запрос = ЗапросД; 
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных2.Запрос = ЗапросД2;
	
	Если Не ВыводитьКод Тогда
		СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.Структура[0].Строки[0].ПоляГруппировки.Элементы[1].Использование = Ложь;
	КонецЕсли;
	
	Если Не ВыводитьПоследнююЗакупку Тогда
		СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.Структура[0].Строки[0].ПоляГруппировки.Элементы[2].Использование = Ложь;
	КонецЕсли;
	
	Если Не ВыводитьПоМесяцам Тогда
		СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.Структура[0].Строки[0].Структура[0].Использование = Ложь;
		СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.Структура[0].Строки[0].Структура[0].ПоляГруппировки.Элементы[0].Использование = Ложь;
	КонецЕсли;
	
	Если Не ВозвратПереоценка Тогда
		СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.Выбор.Элементы[8].Использование = Ложь;
		СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки.Выбор.Элементы[9].Использование = Ложь;
	КонецЕсли;

	
    //создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
    КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
   	
	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;  
	
	//Если НеРассчитыватьКоличествоДнейПродаж Тогда
	//	Для Каждого Эл Из НастройкиКомпоновщика.Выбор.Элементы Цикл
	//		Если Строка(Эл.Поле) = "ЕстьНаСкладе" Тогда
	//			Эл.Использование = Ложь;
	//		КонецЕсли;	
	//	КонецЦикла;
	//КонецЕсли;	
	
	НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаКон", ДатаКон);
	НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНач",  ДатаНач);
	
	МассНом = Новый Массив;
	Для Каждого Эл Из СписокНоменклатуры Цикл
		МассНом.Добавить(Эл.Значение);
	КонецЦикла;	
	НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("Номенклатура",  МассНом);
	
	Если РозничСкладыУстановлены Тогда 	
		//НастройкиКомпоновщика.ПараметрыДанных.ДоступныеПараметры.Элементы[7].ДоступенСписокЗначений = Истина;
		МассСкл = Новый Массив;
		Для Каждого Эл Из Склады Цикл
			МассСкл.Добавить(Эл.Значение);
		КонецЦикла;	
		НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("РозничСклады",  МассСкл);
	КонецЕсли;	

	//Если Склады <> Неопределено Тогда
	//	НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("СписокСкладов",  Склады);
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(ОптСкладАнализ) Тогда
		НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("ОтпСклад",  ОптСкладАнализ);
	КонецЕсли;	
	
	ОсновнойПоставщикНоменклатуры = НастройкиКомпоновщика.Отбор.Элементы[0];
	ОсновнойПоставщикНоменклатуры.Использование = Ложь;
	Если ПоставщикОтбор.Количество() <> 0 Тогда 	
		ОсновнойПоставщикНоменклатуры.Использование = Истина;
		ОсновнойПоставщикНоменклатуры.ПравоеЗначение = ПоставщикОтбор; 
	КонецЕсли;	
	
    //Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
    ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

    //Формируем макет, с помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика, ДанныеРасшифровки);

    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

    //Очищаем поле табличного документа
    Результат = Новый ТабличныйДокумент();
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(Результат);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    
    Результат.ОтображатьЗаголовки = Ложь;
    Результат.ОтображатьСетку = Ложь;
  	//  Результат.Показать();
	
//	ДанныеРасшифровки.Элементы[2361].ПолучитьПоля()
  	Возврат Результат

КонецФункции

Функция ПолучитьРасшифровку (РН, РС) Экспорт
	
	Н = ДанныеРасшифровки.Элементы[РН].ПолучитьПоля()[0].Значение;
	С = ДанныеРасшифровки.Элементы[РС].ПолучитьПоля()[0].Значение;
	
	М = Новый Массив;
	М.Добавить(Н);
	М.Добавить(С);
	
	Возврат М
	
КонецФункции	

