// НЧАН
Функция РезКомТЗ(СКД) Экспорт
	
	//ДоступноеПоле = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Сезон");
	//ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = ДоступноеПоле.Поле;
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//Сезон = ТекущийСезон;
	//ЭлементОтбора.ПравоеЗначение = Сезон;
	//ЭлементОтбора.Использование = Истина;

	//Настройки = КомпоновщикНастроек.Настройки;


    КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
    КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);

	//НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;
	//ПараметрыНастройки = НастройкиКомпоновщика.ПараметрыДанных;
	
	//ЗначениеПараметра = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	//ЗначениеПараметра.Значение = НачалоПериода;

	//ЗначениеПараметра = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	//ЗначениеПараметра.Значение = КонецДня(КонецПериода);
	
	ДоступноеПоле = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("ТипНомГрИлиСвойство");
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = ДоступноеПоле.Поле;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Тип = Тип("СправочникСсылка.НоменклатурныеГруппы");
	ЭлементОтбора.ПравоеЗначение = Тип;
	ЭлементОтбора.Использование = Истина;
	
	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;

	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, НастройкиКомпоновщика,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, НастройкиКомпоновщика);


    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

    ТаблицаРезультат = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

    ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

    Возврат ТаблицаРезультат;

КонецФункции

Функция РезКомТЗ1( СкладыВыб = Неопределено, ГрупСвНом = Неопределено, СписокНоменклатуры) Экспорт
	
СхемаКомпоновкиДанных = ПолучитьМакет("Цены1");

    //создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
    КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
   // Настройки = КомпоновщикНастроек.Настройки;
    
        
	
	ПолеВыбора = ОпределитьТипПоля(ГрупСвНом);
	
	ДоступноеПоле = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти(ПолеВыбора);
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = ДоступноеПоле.Поле;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ГрупСвНом;
	ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ДоступноеПоле = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Склад");
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = ДоступноеПоле.Поле;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СкладыВыб;
	ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	
	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;
	
	НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("СписокНоменклатуры",  СписокНоменклатуры);
	НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("ТипЦен",     Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("закупочная"));

        //Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
    ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

    //Формируем макет, с помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика, ДанныеРасшифровки);

    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

    //Очищаем поле табличного документа
    Результат = Новый ТабличныйДокумент();
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(Результат);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    
    Результат.ОтображатьЗаголовки = Ложь;
    Результат.ОтображатьСетку = Ложь;
  //  Результат.Показать();
  	Возврат Результат

КонецФункции

//Функция ТаблицаЗнач (Док) Экспорт
//	
//	ТЗ = Новый ТаблицаЗначений;
//	НомерКолонки = 1;
//	Пока Истина Цикл
//        
//        ИмяКолонки = ТабДок.Область(1,1,2, НомерКолонки).Текст;
//        Если ПустаяСтрока(ИмяКолонки) Тогда
//            Прервать;
//        КонецЕсли;        
//        ТЗ.Колонки.Добавить(ИмяКолонки);
//		НомерКолонки = НомерКолонки + 1;
//    КонецЦикла;

//	
//КонецФункции	

Функция ПолучитьТЗИзМакета(ТабДок, КолонкаИндекса = 1) Экспорт
    
    ТаблицаДанных = Новый ТаблицаЗначений;
    НомерКолонки = 0;
    Пока Истина Цикл
        НомерКолонки = НомерКолонки + 1;
        ИмяКолонки = ТабДок.Область(1, НомерКолонки).Текст;
        Если ПустаяСтрока(ИмяКолонки) Тогда
            Прервать;
        КонецЕсли;        
        ТаблицаДанных.Колонки.Добавить(ИмяКолонки);
    КонецЦикла;
    
    СчетчикКолонок = НомерКолонки - 1;
    
    НомерСтроки = 1; ФлагПрерывания = Ложь;
    Пока Истина Цикл
        НомерСтроки = НомерСтроки + 1;
        Стр = ТаблицаДанных.Добавить();
        
        Для А = 1 ПО СчетчикКолонок Цикл
            ТекстКолонки = ТабДок.Область(НомерСтроки, А).Текст;
            Если ПустаяСтрока(ТекстКолонки) Тогда
                Если А = КолонкаИндекса Тогда
                    Флагпрерывания = Истина;
                    ТаблицаДанных.Удалить(Стр);
                КонецЕсли;
            Иначе
                Стр[А - 1] = ТекстКолонки
            КонецЕсли;
            
            Если Флагпрерывания Тогда
                Прервать
            КонецЕсли;
        КонецЦикла;
        
        Если Флагпрерывания Тогда
            Прервать
        КонецЕсли;
    КонецЦикла;
    
    Возврат ТаблицаДанных
КонецФункции

Функция обМакетВТаблицуЗначений(Макет) Экспорт
    Перем ТЗ;
ТЗ=Новый ТаблицаЗначений();
#Если Клиент Тогда
    //Считываем колонки
	Для Стр=1 По Макет.ВысотаТаблицы Цикл
		Если Стр>1 Тогда
        	ТекСтр=ТЗ.Добавить();
		КонецЕсли;
		ПустаяСтрока=истина;
		Для Кол=1 По Макет.ШиринаТаблицы Цикл
			Яч=Макет.Область(Стр, Кол);
			Если Яч.СодержитЗначение Тогда
				Зн=Яч.Значение;
			Иначе
				Зн=Яч.Текст;
			КонецЕсли;
			Если ТипЗнч(Зн)=Тип("Строка") И ПустаяСтрока(Зн) Тогда
				Зн=Неопределено;
			КонецЕсли;
			
			//Добавляем колонку
			Если Стр=1 Тогда
		        ТЗ.Колонки.Добавить(Зн);
			Иначе
				ТекСтр[Кол-1]=Зн;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
#КонецЕсли
   Возврат ТЗ;
КонецФункции

Функция Постр (Док) Экспорт
	
	Построитель = Новый ПостроительЗапроса;
   // ТабДок = ЭлементыФормы.ТабДокумент;
    
	//ТабДок = Новый ТабличныйДокумент;
	//ТабДок.Прочитать("C:\ххх\Увеличенные ставки 2014.mxl");
	ТабДок = Док;
    
    Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДок.Область(1, 1, ТабДок.ВысотаТаблицы, 7));
    Построитель.Выполнить();
    ТЗ = Построитель.Результат.Выгрузить();
Возврат ТЗ	
КонецФункции	

Процедура  ОбновитьРегистр(НомГруппаИлиСвойство, Склад, Значение) Экспорт
		
	МенеджерЗаписи = РегистрыСведений.ДоговорныеЦены.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НомГруппаИлиСвойство = НомГруппаИлиСвойство;
	МенеджерЗаписи.Склад     = Склад;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() тогда
		МенеджерЗаписи.Цена       = Значение;
	Иначе
		МенеджерЗаписи.НомГруппаИлиСвойство = НомГруппаИлиСвойство;
	    МенеджерЗаписи.Склад     = Склад;
        МенеджерЗаписи.Цена       = Значение;

	КонецЕсли;
	
	МенеджерЗаписи.Записать(Истина);
	
	
КонецПроцедуры

//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//    Отбор = Новый Структура();
//    Отбор.Вставить("КлючОбъекта", ИмяФормы);
//    Отбор.Вставить("КлючНастройки", "Основная"); //тут имя настройки
//    Отбор.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь").Код);
//    Настройки = ХранилищеНастроекДанныхФорм.Выбрать(Отбор);
//    Если Настройки.Следующий() Тогда
//        Для Каждого стр из Настройки.Настройки Цикл
//            Выполнить(стр.Ключ + " = стр.Значение");
//        КонецЦикла;
//    КонецЕсли;
//КонецПроцедуры

Функция ОпределитьТипПоля(ГрупСвНом)

	Если ТипЗнч(ГрупСвНом) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		Рез = "НоменклатурнаяГруппа";
		Возврат  Рез ;
	ИначеЕсли  ТипЗнч(ГрупСвНом) = Тип("ПланВидовХарактеристикСсылка.СвойстваОбъектов") Тогда
		Рез = "Свойство";
		Возврат  Рез ;
	КонецЕсли;	
		
КонецФункции	




// КЧАН

