
Функция ВывестиСКДПоОтпускнойЦене(Склад = Неопределено, СписокНоменклатуры, КлючОстаток = Неопределено, НаДату = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьМакет("Макет");

    //создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
    КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
   // Настройки = КомпоновщикНастроек.Настройки;
   
	
	//ДоступноеПоле = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти(ПолеВыбора);
	//ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = ДоступноеПоле.Поле;
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.ПравоеЗначение = ГрупСвНом;
	//ЭлементОтбора.Использование = Истина;
	////ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	//
	//ДоступноеПоле = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Склад");
	//ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = ДоступноеПоле.Поле;
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//ЭлементОтбора.ПравоеЗначение = СкладыВыб;
	//ЭлементОтбора.Использование = Истина;
	//ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	
	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;             
	
	НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("НоменклатураСписок",  СписокНоменклатуры);
	НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("Склад",  Склад);
	НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("КлючОстаток",  КлючОстаток);
	НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("ТДата",  НаДату);

        //Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
    ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

    //Формируем макет, с помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика, ДанныеРасшифровки);

    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

    //Очищаем поле табличного документа
    Результат = Новый ТабличныйДокумент();
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(Результат);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    
    Результат.ОтображатьЗаголовки = Ложь;
    Результат.ОтображатьСетку = Ложь;
  //  Результат.Показать();
  	Возврат Результат

КонецФункции

// Номенклатура Характеристика  ЕдИзм  Цена  Количество  Сумма  Склад
Функция ВывестиСКДизСправочникаЦен( Склад = Неопределено, СписокНоменклатуры, КлючОстаток = Неопределено, ТипЦены = Неопределено, НаДату = Неопределено) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;	

	З = Новый Запрос;
	З.Текст = "ВЫБРАТЬ
	          |	НаценкиНаНоменклатурныеГруппы.НоменклатурнаяГруппа,
	          |	НаценкиНаНоменклатурныеГруппы.ПроцентНаценки
	          |ПОМЕСТИТЬ ВТ
	          |ИЗ
	          |	РегистрСведений.НаценкиНаНоменклатурныеГруппы КАК НаценкиНаНоменклатурныеГруппы
	          |ГДЕ
	          |	НаценкиНаНоменклатурныеГруппы.ЦеноваяКатегория = &ЦеноваяКатегория
	          |;
	          |
	          |////////////////////////////////////////////////////////////////////////////////
	          |ВЫБРАТЬ
	          |	ТоварыВРозницеОстатки.Номенклатура КАК Номенклатура,
	          |	ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры КАК Характеристика,
	          |	ТоварыВРозницеОстатки.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдИзм,
	          |	МАКСИМУМ(ЦеныАТТСрезПоследних.Цена) КАК Цена,
	          |	ТоварыВРозницеОстатки.КоличествоОстаток КАК Количество,
	          |	МАКСИМУМ(ТоварыВРозницеОстатки.СуммаПродажнаяОстаток) КАК Сумма,
	          |	ТоварыВРозницеОстатки.Склад КАК Склад,
	          |	МАКСИМУМ(МинимальныйОстаток.МинОстаток) КАК МинОстаток,
	          |	ТоварыВРозницеОстатки.Номенклатура.Родитель КАК Группа,
	          |	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)) КАК ЗакупочнаяЦена,
	          |	ЕСТЬNULL(ВТ.ПроцентНаценки, 0) КАК ПроцентНаценкиЗ,
	          |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * (1 + ЕСТЬNULL(ВТ.ПроцентНаценки, 0) / 100) КАК МоделируемаяЦена,
	          |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * (1 + ЕСТЬNULL(ВТ.ПроцентНаценки, 0) / 100) * ТоварыВРозницеОстатки.КоличествоОстаток КАК МоделируемаяСумма
	          |ИЗ
	          |	РегистрНакопления.ТоварыВРознице.Остатки(&ТДата, Склад В (&Склад)) КАК ТоварыВРозницеОстатки
	          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныАТТ.СрезПоследних(
	          |				&ТДата,
	          |				Номенклатура В (&НоменклатураСписок)
	          |					И Склад В (&Склад)) КАК ЦеныАТТСрезПоследних
	          |		ПО ТоварыВРозницеОстатки.Номенклатура = ЦеныАТТСрезПоследних.Номенклатура
	          |			И ТоварыВРозницеОстатки.Склад = ЦеныАТТСрезПоследних.Склад
	          |			И ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры = ЦеныАТТСрезПоследних.ХарактеристикаНоменклатуры
	          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныйОстаток КАК МинимальныйОстаток
	          |		ПО ТоварыВРозницеОстатки.Склад = МинимальныйОстаток.Склад
	          |			И ТоварыВРозницеОстатки.Номенклатура = МинимальныйОстаток.Номенклатура
	          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	          |				&ТДата,
	          |				ТипЦен.Закупочная
	          |					И Номенклатура В (&НоменклатураСписок)) КАК ЦеныНоменклатурыСрезПоследних
	          |		ПО ТоварыВРозницеОстатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	          |			И ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	          |		ПО ТоварыВРозницеОстатки.Номенклатура.НоменклатурнаяГруппа = ВТ.НоменклатурнаяГруппа
	          |ГДЕ
	          |	ВЫБОР
	          |			КОГДА &КлючОстаток ПОДОБНО ""Больше нуля""
	          |				ТОГДА ТоварыВРозницеОстатки.КоличествоОстаток > 0
	          |			КОГДА &КлючОстаток ПОДОБНО ""Меньше нуля""
	          |				ТОГДА ТоварыВРозницеОстатки.КоличествоОстаток < 0
	          |			КОГДА &КлючОстаток ПОДОБНО ""Меньше мин.ост.""
	          |				ТОГДА ТоварыВРозницеОстатки.КоличествоОстаток < МинимальныйОстаток.МинОстаток
	          |			ИНАЧЕ ТоварыВРозницеОстатки.КоличествоОстаток >= 0
	          |					ИЛИ ТоварыВРозницеОстатки.КоличествоОстаток < 0
	          |		КОНЕЦ
	          |	И ТоварыВРозницеОстатки.Номенклатура В(&НоменклатураСписок)
	          |
	          |СГРУППИРОВАТЬ ПО
	          |	ТоварыВРозницеОстатки.Номенклатура,
	          |	ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры,
	          |	ТоварыВРозницеОстатки.КоличествоОстаток,
	          |	ТоварыВРозницеОстатки.Номенклатура.Родитель,
	          |	ТоварыВРозницеОстатки.Склад,
	          |	ТоварыВРозницеОстатки.Номенклатура.БазоваяЕдиницаИзмерения,
	          |	ЕСТЬNULL(ВТ.ПроцентНаценки, 0),
	          |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * (1 + ЕСТЬNULL(ВТ.ПроцентНаценки, 0) / 100),
	          |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * (1 + ЕСТЬNULL(ВТ.ПроцентНаценки, 0) / 100) * ТоварыВРозницеОстатки.КоличествоОстаток";
	 
	З.УстановитьПараметр("ТДата", НаДату);
	З.УстановитьПараметр("НоменклатураСписок", СписокНоменклатуры);
	З.УстановитьПараметр("Склад", Склад); 
	З.УстановитьПараметр("КлючОстаток", КлючОстаток);
	З.УстановитьПараметр("ЦеноваяКатегория", ТипЦены.ЦеноваяКатегория); 
	
		  //        |	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена * (1 + НаценкиНаНоменклатурныеГруппы.ПроцентНаценки / 100)) КАК МоделируемаяЦена,
		  //    |	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена * (1 + НаценкиНаНоменклатурныеГруппы.ПроцентНаценки / 100) * ТоварыВРозницеОстатки.КоличествоОстаток) КАК МоделируемаяСумма
		  //
	
	ТЗ = З.Выполнить().Выгрузить();
	
	Если ТипЦены.Закупочная ИЛИ
		 ТипЦены.Базовая ИЛИ
		 ЗначениеЗаполнено(ТипЦены.БазовыйТипЦен) Тогда
		 
		Для Каждого С Из ТЗ Цикл
			
			Цена = ЛК_РаботаСДокументами.ПолучитьЦенуПоГлавнымТипамЦен(С.Номенклатура, С.Характеристика, ТипЦены);
			С.Цена = Цена;	
			С.Сумма = Цена * С.Количество; 
			
		КонецЦикла;	
			 
		    СхемаКомпоновкиДанных = ПолучитьМакет("Макет1");
			ТЗ.Колонки.Удалить("ЗакупочнаяЦена");
			ТЗ.Колонки.Удалить("ПроцентНаценкиЗ");
			ТЗ.Колонки.Удалить("МоделируемаяЦена"); 
			ТЗ.Колонки.Удалить("МоделируемаяСумма");
			
	Иначе 
		
//		Цена = ЛК_РаботаСДокументами.ЦеныДляСкладовПоТипуЦен(С.Номенклатура, , ТипЦены);

		СхемаКомпоновкиДанных = ПолучитьМакет("ВыражениеВДругомТипеЦен");		 
		 
	КонецЕсли;
		
	ТЗ.Колонки.Удалить("МинОстаток");
	
	ВнешнийНабор = Новый Структура("ТЗ", ТЗ);
	
    //создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
    КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
   		
	НастройкиКомпоновщика = КомпоновщикНастроек.Настройки;
	
	//НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("НоменклатураСписок",  СписокНоменклатуры);
	//НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("Склад",  Склад);
	//НастройкиКомпоновщика.ПараметрыДанных.УстановитьЗначениеПараметра("ТДата",  ТекущаяДата());

        //Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
    ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

    //Формируем макет, с помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщика, ДанныеРасшифровки);

    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;

    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешнийНабор, ДанныеРасшифровки);

    //Очищаем поле табличного документа
    Результат = Новый ТабличныйДокумент();
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(Результат);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    
    Результат.ОтображатьЗаголовки = Ложь;
    Результат.ОтображатьСетку = Ложь;
  //  Результат.Показать();
  	Возврат Результат

КонецФункции

