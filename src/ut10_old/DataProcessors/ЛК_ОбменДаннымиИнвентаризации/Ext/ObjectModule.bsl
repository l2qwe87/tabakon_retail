Перем Прокси;
Перем КэшСсылок;
Перем Запрос;
Перем Реж; // НЧАН

Функция ПолучитьСсылкуИзКэша(СтрокаСсылка, МенеджерОбъекта, ДанныеЗаполнения = Неопределено)
	Реж = Истина;
	Если ПустаяСтрока(СтрокаСсылка) Тогда Возврат МенеджерОбъекта.ПустаяСсылка(); КонецЕсли;
	
	СсылкаНаОбъект = КэшСсылок.Получить(СтрокаСсылка);
	
	// Если ключ строкового представления ссылки не найден в кэше, ищем ссылку в базе
	Если СсылкаНаОбъект = Неопределено Тогда
		СсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаСсылка));
		
		Если СсылкаНаОбъект.ПолучитьОбъект() <> Неопределено Тогда			
			Если ТипЗнч(МенеджерОбъекта) = Тип("СправочникМенеджер.Номенклатура") Тогда 
				Если ЗначениеЗаполнено(ДанныеЗаполнения.СсылкаРодитель) 
					И СсылкаНаОбъект.Родитель = Справочники.Номенклатура.ПустаяСсылка() Тогда
					СсылкаРодитель = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеЗаполнения.СсылкаРодитель));
					сОб = СсылкаНаОбъект.ПолучитьОбъект();
					сОб.Родитель = СсылкаРодитель;
					сОб.Записать();
					СсылкаНаОбъект = сОб.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		
		// Если <Объект не найден>, то создаем новый документ/элемент справочника
		Если СсылкаНаОбъект.ПолучитьОбъект() = Неопределено Тогда
			стрТипЗначения = Строка(ТипЗнч(МенеджерОбъекта));
			
			Если Найти(стрТипЗначения, "Справочник") > 0 Тогда 
			// НЧАН       // Отключим поиск по имени, т.к. существует СПЕЦИАЛЬНО созданная одинаковая номенклатура (Для разных организаций)
				//Если ТипЗнч(МенеджерОбъекта) = Тип("СправочникМенеджер.Номенклатура") Тогда
				//	ПоискНомК = Неопределено; //Справочники.Номенклатура.НайтиПоКоду(ДанныеЗаполнения.КодНоменклатуры );
				//	ПоискНомН = Справочники.Номенклатура.НайтиПоНаименованию(ДанныеЗаполнения.НаименованиеНоменклатуры, Истина);
				//	ПСс = Справочники.Номенклатура.ПустаяСсылка();
				//	К = ?(ПоискНомК = Неопределено ИЛИ ПоискНомК = ПСс, Ложь, Истина);
				//	С = ?(ПоискНомН = Неопределено ИЛИ ПоискНомН = ПСс, Ложь, Истина);
				//	Если К ИЛИ С Тогда
				//    	Реж = Ложь;
				//		СсылкаНаОбъект = ?(К, ПоискНомК, ПоискНомН) ;
				//		Возврат  СсылкаНаОбъект;
				//	КонецЕсли;
				//КонецЕсли;
				СсылкаНаОбъект = МенеджерОбъекта.СоздатьЭлемент();
			// КЧАН
			ИначеЕсли Найти(стрТипЗначения, "Документ") > 0 Тогда
				СсылкаНаОбъект = МенеджерОбъекта.СоздатьДокумент();
				
			Иначе
				Возврат Неопределено;
				
			КонецЕсли;
			
			СсылкаНаОбъект.ОбменДанными.Загрузка = Истина;
			СсылкаНаОбъект.УстановитьСсылкуНового(МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаСсылка))); //++
			
			Если ТипЗнч(МенеджерОбъекта) = Тип("СправочникМенеджер.Склады") Тогда  
				//с = Справочники.Склады.НайтиПоКоду(ДанныеЗаполнения.Код );
				//Если ЗначениеЗаполнено(с) тогда
				//	СсылкаНаОбъект = с;
				//Иначе 	
				СсылкаНаОбъект.Код = ДанныеЗаполнения.Код;
				СсылкаНаОбъект.Наименование = ДанныеЗаполнения.Наименование;
				СсылкаНаОбъект.ВидСклада = Перечисления.ВидыСкладов.НТТ;
				//КонецЕсли;
				//ссы
				
			ИначеЕсли ТипЗнч(МенеджерОбъекта) = Тип("СправочникМенеджер.Организации") Тогда 
				//с = Справочники.Организации.НайтиПоКоду(ДанныеЗаполнения.Код );
				//Если ЗначениеЗаполнено(с) тогда
				//	СсылкаНаОбъект = с;
				//Иначе
				СсылкаНаОбъект.Код = ДанныеЗаполнения.КодОрганизации;
				СсылкаНаОбъект.Наименование = ДанныеЗаполнения.НаименованиеОрганизации;
				//КонецЕсли;
				
			ИначеЕсли ТипЗнч(МенеджерОбъекта) = Тип("СправочникМенеджер.Номенклатура") И Реж Тогда
				//ПоискНом = Справочники.Номенклатура.НайтиПоКоду(ДанныеЗаполнения.КодНоменклатуры );
				//Если НЕ ЗначениеЗаполнено(ПоискНом) ИЛИ ПоискНом = Неопределено ИЛИ ПоискНом = Справочники.Номенклатура.ПустаяСсылка() тогда
							
				// КЧАН
					//СсылкаНаОбъект = Справочники.Номенклатура.СоздатьЭлемент();
					СсылкаНаОбъект.Код = ДанныеЗаполнения.КодНоменклатуры;
					СсылкаНаОбъект.Наименование = ДанныеЗаполнения.НаименованиеНоменклатуры;
					СсылкаНаОбъект.ВидНоменклатуры = Товар(); 
					СсылкаНаОбъект.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
				// НЧАН
					Если ЗначениеЗаполнено(ДанныеЗаполнения.СсылкаРодитель) И ДанныеЗаполнения.СсылкаРодитель <> "" Тогда 
						//СсылкаРодитель = Справочники.Номенклатура.НайтиПоНаименованию(ДанныеЗаполнения.НоменклатураРодительНаименование);
						СсылкаРодитель = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеЗаполнения.СсылкаРодитель));
						//Если СсылкаРодитель = Неопределено ИЛИ СсылкаРодитель = Справочники.Номенклатура.ПустаяСсылка() Тогда  		 			
						//	СсылкаНаОб = Справочники.Номенклатура.СоздатьГруппу();			
						//	//СсылкаНаОб.ОбменДанными.Загрузка = Истина;
						//	СсылкаНаОб.Наименование = ДанныеЗаполнения.НоменклатураРодительНаименование;
						//	СсылкаНаОб.Записать();
						//	СсылкаРодитель = СсылкаНаОб.Ссылка;
						//КонецЕсли;
					СсылкаНаОбъект.Родитель = СсылкаРодитель;
					КонецЕсли;

					СсылкаНаОбъект.Записать();

			ИначеЕсли ТипЗнч(МенеджерОбъекта) = Тип("СправочникМенеджер.Качество") Тогда           
				СсылкаНаОбъект.Наименование = ДанныеЗаполнения.НаименованиеКачества;
				
			КонецЕсли;
			
			//Если найти(строка(типзнч(СсылкаНаОбъект)), "объект") > 0 Тогда
				Если Найти(стрТипЗначения, "Справочник") > 0 Тогда
					Попытка
						СсылкаНаОбъект.Записать();
					Исключение
						ТекстСообщения = "Ошибка записи элемента справочника: [" + Строка(СсылкаНаОбъект) + "] - " + ОписаниеОшибки();
						
						#Если Клиент Тогда
							Сообщить(ТекстСообщения);
						#Иначе
							ВызватьИсключение ТекстСообщения;
						#КонецЕсли	
						
						Возврат МенеджерОбъекта.ПустаяСсылка();                                                  		
					КонецПопытки;                                               
					
				ИначеЕсли Найти(стрТипЗначения, "Документ") > 0 Тогда
					Попытка
						СсылкаНаОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						ТекстСообщения = "Ошибка записи/проведения документа: [" + Строка(СсылкаНаОбъект) + "] - " + ОписаниеОшибки();
						
						#Если Клиент Тогда
							Сообщить(ТекстСообщения);
						#Иначе
							ВызватьИсключение ТекстСообщения;
						#КонецЕсли	
						
						Возврат МенеджерОбъекта.ПустаяСсылка();                                                  		
						
					КонецПопытки;
				КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
		
		КэшСсылок.Вставить(СтрокаСсылка, СсылкаНаОбъект.Ссылка);
	КонецЕсли;
	
	// НЧАН
	Если Найти(НРег(Строка(ТипЗнч(СсылкаНаОбъект))), "объект") > 0 Тогда
		СсылкаНаОбъект = СсылкаНаОбъект.Ссылка;
	КонецЕсли;
	// КЧАн
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция Товар()
	
	с = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар");
	если не ЗначениеЗаполнено(с) Тогда
		с = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
		с.Наименование = "Товар";
		с.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		с.Записать();
	КонецЕсли;
	Возврат с.Ссылка;
	
	
КонецФункции

//********************************************************************************************
Функция ВыгрузитьДокументИнвентаризацииНаСервер() Экспорт
	Если ДокументИнвентаризации.Пустая() Тогда
		#Если Клиент Тогда
	        Сообщить("Не заполнен документ инвентаризации!");
		#КонецЕсли
		
		Возврат Ложь; 
	КонецЕсли;
	
	WSФабрикаXDTO = WSСсылки.WS_InventoryExchange.ПолучитьWSОпределения().ФабрикаXDTO;
	Магазин = WSФабрикаXDTO.Создать(WSФабрикаXDTO.Тип("http://www.tabakon-inventory-exchange.org", "Магазин"));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияТоваровНаСкладе.Дата,
		|	ИнвентаризацияТоваровНаСкладе.Склад,
		|	ИнвентаризацияТоваровНаСкладе.Склад.Код КАК КодСклада,
		|	ИнвентаризацияТоваровНаСкладе.Склад.Наименование КАК НаименованиеСклада,
		|	ИнвентаризацияТоваровНаСкладе.Организация,
		|	ИнвентаризацияТоваровНаСкладе.Организация.Код КАК КодОрганизации,
		|	ИнвентаризацияТоваровНаСкладе.Организация.Наименование КАК НаименованиеОрганизации,
		|	ИнвентаризацияТоваровНаСкладе.ИтоговыйДокумент
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ДокументИнвентаризации
		|;
		|ВЫБРАТЬ Товары.* ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Товары ГДЕ Товары.Ссылка = &ДокументИнвентаризации
		|";
	Запрос.УстановитьПараметр("ДокументИнвентаризации", ДокументИнвентаризации);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатыЗапроса[0].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДатаДокумента = ВыборкаДетальныеЗаписи.Дата;
		
		Магазин.Код = ВыборкаДетальныеЗаписи.КодСклада;
		Магазин.Наименование = ВыборкаДетальныеЗаписи.НаименованиеСклада;
		Магазин.ИдентификаторСсылки = XMLСтрока(ВыборкаДетальныеЗаписи.Склад);
		Магазин.КодОрганизации = ВыборкаДетальныеЗаписи.КодОрганизации;
		Магазин.НаименованиеОрганизации = ВыборкаДетальныеЗаписи.НаименованиеОрганизации;
		Магазин.ИдентификаторСсылкиОрганизации = XMLСтрока(ВыборкаДетальныеЗаписи.Организация);
		ИтоговыйДокумент = ВыборкаДетальныеЗаписи.ИтоговыйДокумент; 
	КонецЦикла;
	
	Товары = РезультатыЗапроса[1].Выгрузить();
	
	ТипУникальногоИдентификатора = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36));
	
	Товары.Колонки.Добавить("СсылкаНоменклатура", ТипУникальногоИдентификатора);
	Товары.Колонки.Добавить("СсылкаКачество", ТипУникальногоИдентификатора);
	Товары.Колонки.Добавить("СсылкаЕдиницаИзмерения", ТипУникальногоИдентификатора);
	Товары.Колонки.Добавить("СсылкаЕдиницаИзмеренияМест", ТипУникальногоИдентификатора);
	Товары.Колонки.Добавить("СсылкаУИДДокумента", ТипУникальногоИдентификатора);
	Товары.Колонки.Добавить("ЕдинИзмНаименование");
	Товары.Колонки.Добавить("ХарактеристикаНоменклатурыС", ТипУникальногоИдентификатора);	
	
	Для Каждого СтрокаТЗ ИЗ Товары Цикл
		СтрокаТЗ.СсылкаНоменклатура = ?(ЗначениеЗаполнено(СтрокаТЗ.Номенклатура), XMLСтрока(СтрокаТЗ.Номенклатура), "");
		СтрокаТЗ.СсылкаКачество = ?(ЗначениеЗаполнено(СтрокаТЗ.Качество), XMLСтрока(СтрокаТЗ.Качество), "");
		СтрокаТЗ.СсылкаЕдиницаИзмерения = ?(ЗначениеЗаполнено(СтрокаТЗ.ЕдиницаИзмерения), XMLСтрока(СтрокаТЗ.ЕдиницаИзмерения), "");
		СтрокаТЗ.СсылкаЕдиницаИзмеренияМест = ?(ЗначениеЗаполнено(СтрокаТЗ.ЕдиницаИзмеренияМест), XMLСтрока(СтрокаТЗ.ЕдиницаИзмеренияМест), "");
		СтрокаТЗ.СсылкаУИДДокумента = XMLСтрока(ДокументИнвентаризации); //++
		СтрокаТЗ.ЕдинИзмНаименование = СтрокаТЗ.ЕдиницаИзмерения.Наименование; // НЧАН
		СтрокаТЗ.ХарактеристикаНоменклатурыС = ?(ЗначениеЗаполнено(СтрокаТЗ.ХарактеристикаНоменклатуры), XMLСтрока(СтрокаТЗ.ХарактеристикаНоменклатуры), "");  // НЧАН
			
	КонецЦикла;
		
	Товары.Колонки.Удалить("Номенклатура");
	Товары.Колонки.Удалить("ХарактеристикаНоменклатуры");
	Товары.Колонки.Удалить("Качество");
	Товары.Колонки.Удалить("ЕдиницаИзмеренияМест");
	Товары.Колонки.Удалить("ЕдиницаИзмерения");
	Товары.Колонки.Удалить("СерияНоменклатуры");
	Товары.Колонки.Удалить("Ссылка");
	Товары.Колонки.Удалить("НомерСтроки");
		
	
	ТабличныеДанные = WSФабрикаXDTO.Создать(WSФабрикаXDTO.Тип("http://www.tabakon-inventory-exchange.org", "ТабличныеДанные"));
	ТабличныеДанные.ТаблицаЗначений = СериализаторXDTO.ЗаписатьXDTO(Товары);
	ТД = ТабличныеДанные;//ТД = новый ХранилищеЗначения(ТабличныеДанные, новый СжатиеДанных(9));   
	////ИД = новый ХранилищеЗначения(ИтоговыйДокумент, новый СжатиеДанных(9));

	
	Если Прокси.UploadDocument(ДатаДокумента, Магазин, ТД, ИтоговыйДокумент) Тогда
		#Если Клиент Тогда
	        Сообщить("Документ инвентаризации успешно выгружен на сервер!", СтатусСообщения.Обычное);
		#КонецЕсли
// НЧАН	
		Если НЕ ДокументИнвентаризации.ИтоговыйДокумент Тогда
			ДокументИнвентаризации.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		
		Возврат Истина;
	Иначе
		#Если Клиент Тогда
	        Сообщить("Ошибка выгрузки документа инвентаризации на сервер!", СтатусСообщения.ОченьВажное);
		#КонецЕсли
		
		Возврат Ложь;
	КонецЕсли;
КонецФункции

//********************************************************************************************
Процедура СоздатьДокументОприходованияОстатков() Экспорт
	Если ТаблицаОстатковПоСкладу.Количество() = 0 Тогда 
		#Если Клиент Тогда
	        Сообщить("Таблица остатков пуста!");
		#КонецЕсли
		
		Возврат; 
	КонецЕсли;
	
	НОменклатураСПустымиЦенами = "";
	Для Каждого Стр Из ТаблицаОстатковПоСкладу Цикл
		Если Стр.Цена = 0 ИЛИ Стр.Цена = NULL  ИЛИ Стр.ЦенаАТТ = 0 ИЛИ Стр.ЦенаАТТ = NULL Тогда
			Товар = "" + Стр.НаименованиеНоменклатуры + " (" + Стр.ХарактеристикаНоменклатурыНаименование + ")" ;
			НОменклатураСПустымиЦенами = НОменклатураСПустымиЦенами + Товар + Символы.ПС;	
		КонецЕсли; 
	КонецЦикла;
	Если  НОменклатураСПустымиЦенами <> "" Тогда
		Сообщить("По следующим товарам не заполнены цены:" + Символы.ПС + НОменклатураСПустымиЦенами);
		Возврат;
	КонецЕсли;	
		
	// Удаление (пометка) всех ранее созданных документов инвентаризации. 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОприходованиеТоваров.Ссылка
		|ИЗ
		|	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
		|ГДЕ
		|	НЕ ОприходованиеТоваров.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	ДокументОприходования = Документы.ОприходованиеТоваров.СоздатьДокумент();
	ДокументОприходования.Дата = РабочаяДата;
	ДокументОприходования.ИнициализироватьНовыйДокумент(Неопределено, Неопределено);
	ДокументОприходования.ОтражатьВУправленческомУчете = Истина; // НЧАН
	ДокументОприходования.ОтражатьВБухгалтерскомУчете = Ложь;
	ДокументОприходования.ОтражатьВНалоговомУчете = Ложь;
	ДокументОприходования.Склад = ПолучитьСсылкуИзКэша(СтруктураДанныхМагазина.ИдентификаторСсылки, Справочники.Склады, СтруктураДанныхМагазина);
	Опт = ?(ДокументОприходования.Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый, Истина, Ложь);
	ДокументОприходования.ПриИзмененииСклада();
	//
	Если НЕ ПустаяСтрока(СтруктураДанныхМагазина.ИдентификаторСсылкиОрганизации) Тогда
		ДокументОприходования.Организация = ПолучитьСсылкуИзКэша(СтруктураДанныхМагазина.ИдентификаторСсылкиОрганизации, Справочники.Организации, СтруктураДанныхМагазина);
		ДокументОприходования.ПриИзмененииОрганизации();
	КонецЕсли;
	
	Для Каждого СтрокаТЗ ИЗ ТаблицаОстатковПоСкладу Цикл 
	
		НоменклатураО = ПолучитьСсылкуИзКэша(СтрокаТЗ.СсылкаНоменклатура, Справочники.Номенклатура, СтрокаТЗ);
		Если НоменклатураО.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		//Если  СтрокаТЗ.Количество >= 0 тогда
		НоваяСтрока = ДокументОприходования.Товары.Добавить();
		НоваяСтрока.Номенклатура = НоменклатураО ;// ПолучитьСсылкуИзКэша(СтрокаТЗ.СсылкаНоменклатура, Справочники.Номенклатура, СтрокаТЗ); // НЧАН
		НоваяСтрока.ЕдиницаИзмерения = ПолучитьСсылкуИзКэша(СтрокаТЗ.СсылкаЕдиницаХранения, Справочники.ЕдиницыИзмерения, СтрокаТЗ);
		НоваяСтрока.Коэффициент = СтрокаТЗ.КоэффициентЕдиницыХранения;
		НоваяСтрока.Количество = СтрокаТЗ.Количество;
// НЧАН	
		//ЦенаNULL = ?(СтрокаТЗ.Цена = NULL, 0, СтрокаТЗ.Цена);
		//Если ЦенаNULL <> 0 Тогда
		//	РасчетнаяЦена = СтрокаТЗ.Цена;
		//Иначе
		//	РасчетнаяЦена = 0;
		////ИначеЕсли (СтрокаТЗ.Сумма = 0) ИЛИ (СтрокаТЗ.Количество = 0) Тогда
		//	Сообщить("По номенклатуре: " + НоменклатураО + "   неопределена цена!");
		////	//Возврат ;
		////	РасчетнаяЦена = 0;
		////Иначе	
			//КонецЕсли;
			
		//РасчетнаяЦена = ?(Опт, СтрокаТЗ.Цена, СтрокаТЗ.Сумма / СтрокаТЗ.Количество);	
			
		НоваяСтрока.Цена = СтрокаТЗ.Цена;
		НоваяСтрока.ЦенаВРознице = ?(Опт, 0, СтрокаТЗ.ЦенаАТТ);
		НоваяСтрока.Сумма = НоваяСтрока.Цена * СтрокаТЗ.Количество ; // ?(Опт, НоваяСтрока.Цена * СтрокаТЗ.Количество, СтрокаТЗ.Сумма);  //НоваяСтрока.Цена * ?(СтрокаТЗ.Количество > 0, СтрокаТЗ.Количество, - СтрокаТЗ.Количество ) ; //++                     
		НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма; // НоваяСтрока.Цена * ?(СтрокаТЗ.Количество > 0, СтрокаТЗ.Количество, - СтрокаТЗ.Количество ) ; // 
		
		НоваяСтрока.Качество = ПолучитьСсылкуИзКэша(СтрокаТЗ.СсылкаКачество, Справочники.Качество, СтрокаТЗ);
		
		Если СтрокаТЗ.ТоварМРЦ Тогда
			УстановкаСтатусаМРЦ(НоваяСтрока.Номенклатура);	
		КонецЕсли;
		
		Если СтрокаТЗ.СсылкаХарактеристикаНоменклатуры <> "" Тогда
				НоваяСтрока.ХарактеристикаНоменклатуры = ЗаписатьХарактеристикуДляМРЦ(НоваяСтрока.Номенклатура, СтрокаТЗ.СсылкаХарактеристикаНоменклатуры, СтрокаТЗ.ХарактеристикаНоменклатурыНаименование) ;
	 	КонецЕсли;
		
		Если НоваяСтрока.Цена = 0 Тогда
			Сообщить(Строка(НоменклатураО)+ "  Цена = 0!");
		ИначеЕсли НоваяСтрока.Количество = 0 Тогда
			Сообщить(Строка(НоменклатураО)+ "  Количество = 0!");
		КонецЕсли;	
// КЧАН 
		//КонецЕсли;
	КонецЦикла;
	
	ДокументОприходования.СуммаДокумента = ДокументОприходования.Товары.Итог("Сумма");
	ДокументОприходования.СуммаДокументаРегл = ДокументОприходования.Товары.Итог("СуммаРегл");
	
	НачатьТранзакцию();
	//
	//// Формируем документ переоценки для установки продажных цен номенклатуры из ТЧ "Товары"
	//// (без этого документ оприходования не проведется)
	//ДокументПереоценки = Документы.ПереоценкаТоваровВРознице.СоздатьДокумент();
	//ДокументПереоценки.ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВРознице;
	//ЗаполнитьЗначенияСвойств(ДокументПереоценки, ДокументОприходования);
	//ДокументПереоценки.Дата = ДобавитьМесяц(ДокументОприходования.Дата, -2);

	//Для Каждого СтрокаТЗ ИЗ ДокументОприходования.Товары Цикл
	//	НоваяСтрока = ДокументПереоценки.Товары.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	//КонецЦикла;
	//
	//Попытка
	//	ДокументПереоценки.Записать(РежимЗаписиДокумента.Проведение);
	//Исключение
	//	ТекстСообщения = "Ошибка записи/проведения документа: [" + Строка(ДокументПереоценки) + "] - " + ОписаниеОшибки();
	//	
	//	#Если Клиент Тогда
	//        Сообщить(ТекстСообщения, СтатусСообщения.ОченьВажное);
	//	#Иначе
	//		ВызватьИсключение ТекстСообщения;
	//	#КонецЕсли
	//	
	//	ОтменитьТранзакцию();
	//	Возврат;
	//КонецПопытки;
	
	Попытка
		ДокументОприходования.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстСообщения = "Ошибка записи/проведения документа: [" + Строка(ДокументОприходования) + "] - " + ОписаниеОшибки();
		
		#Если Клиент Тогда
	        Сообщить(ТекстСообщения, СтатусСообщения.ОченьВажное);
		#Иначе
			ВызватьИсключение ТекстСообщения;
		#КонецЕсли
		
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	#Если Клиент Тогда
        Сообщить("Записан документ: " + Строка(ДокументОприходования));
	#КонецЕсли
КонецПроцедуры

//********************************************************************************************
Функция ПолучитьСписокМагазиновПоВебСервису(СписокМагазинов = Неопределено, ОптовыйСклад = Неопределено) Экспорт
	Если ТипЗнч(СписокМагазинов) <> Тип("СписокЗначений") Тогда
		СписокМагазинов = Новый СписокЗначений;
	КонецЕсли;
	
	СписокМагазинов.Очистить();
	
// НЧАН	
	ВС =  ?(ОптовыйСклад = Истина, "Опт", "Роз");
	СписокМагазиновПакет = Прокси.GetStoresList(ВС);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИдентификаторСсылки");
	ТЗ.Колонки.Добавить("ИдентификаторСсылкиОрганизации");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("КодОрганизации");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("НаименованиеОрганизации");
		
	Для Каждого Эл ИЗ СписокМагазиновПакет.Список Цикл
		Стр = ТЗ.Добавить();
		Стр.ИдентификаторСсылки = Эл.ИдентификаторСсылки;
		Стр.ИдентификаторСсылкиОрганизации  = Эл.ИдентификаторСсылкиОрганизации;
		Стр.Код  = Эл.Код ;
		Стр.КодОрганизации = Эл.КодОрганизации;
		Стр.Наименование    = Эл.Наименование ;
		Стр.НаименованиеОрганизации  = Эл.НаименованиеОрганизации ;
	КонецЦикла;
	
	ТЗ.Сортировать("Наименование");	

	Для Каждого Магазин ИЗ ТЗ Цикл
		СтруктураМагазина = Новый Структура;
		
		//Для Каждого Свво ИЗ Магазин.Свойства() Цикл
		Для Каждого Свво ИЗ ТЗ.Колонки Цикл
			//СтруктураМагазина.Вставить(Свво.Имя, Магазин.Получить(Свво));
			СтруктураМагазина.Вставить(Свво.Имя, Магазин[Свво.Имя]);
		КонецЦикла;
		
		СписокМагазинов.Добавить(СтруктураМагазина, "[" + СтруктураМагазина.Код + "] " + СтруктураМагазина.Наименование);
		//СписокМагазинов.Добавить(СтруктураМагазина, СтруктураМагазина.Наименование);
		//Стр = ТЗ.Добавить();
		//Стр.Склад = СтруктураМагазина.Наименование; 
		//Стр.Структура = 
	КонецЦикла;
		
//	СписокМагазинов.СортироватьПоЗначению(НаправлениеСортировки.Возр);
// НЧАН	
	Возврат СписокМагазинов;
КонецФункции

Процедура ПолучитьСписокСерверныхИнвентаризацийНаДату() Экспорт
	ТаблицаОбъединяемыхДокументовИнвентаризации.Очистить();
	
	Если НЕ ЗначениеЗаполнено(ДатаОперации) Тогда
		#Если Клиент Тогда
			Сообщить("Не указана дата документов объединения инвентаризации!", СтатусСообщения.ОченьВажное);
		#КонецЕсли
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанныхМагазина) Тогда 
		#Если Клиент Тогда
			Сообщить("Не указан склад/магазин!", СтатусСообщения.ОченьВажное);
		#КонецЕсли
	КонецЕсли;
	
	ТабличныеДанные = Прокси.GetInventoriesList(ДатаОперации, СтруктураДанныхМагазина.Код);
	
	ТаблицаОбъединяемыхДокументовИнвентаризации = СериализаторXDTO.ПрочитатьXDTO(ТабличныеДанные.ТаблицаЗначений);	
КонецПроцедуры
	
//********************************************************************************************
Процедура ЗаполнитьТаблицуОстатковПоСкладу() Экспорт
	ТаблицаОстатковПоСкладу.Очистить();
	
	Табл = Прокси.GetProductBalances(СтруктураДанныхМагазина.Код, Формат(ОстаткиНаДату, "ДФ=ггггММддЧЧммсс"));
	ТабличныеДанные = Табл.Получить();	

	//++ТаблицаОстатковПоСкладу = СериализаторXDTO.ПрочитатьXDTO(ТабличныеДанные.ТаблицаЗначений);	
	
	ЧтениеХМЛ = новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(ТабличныеДанные);
	ТаблицаОстатковПоСкладу = СериализаторXDTO.ПрочитатьXML( ЧтениеХМЛ);
	
	////++ГК        // НЧАН 24.07.17
	//Итого = ТаблицаОстатковПоСкладу.Итого("Количество");
	//Сообщить("Всего товаров : " + Итого);
	////--ГК

	
КонецПроцедуры

//********************************************************************************************
Функция УстановитьСоединениеСВебСервисом() Экспорт
	Попытка
		
		РаботаЧерезВССсылки = ложь;
		Если РаботаЧерезВССсылки Тогда
			
			ВебСервисИнвентаризации = Неопределено;
			
			Для Каждого ВебСервис ИЗ WSСсылки.WS_InventoryExchange.ПолучитьWSОпределения().Сервисы Цикл
				Если ВебСервис.Имя = "InventoryExchange" Тогда
					ВебСервисИнвентаризации = ВебСервис;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ВебСервисИнвентаризации = Неопределено Тогда Возврат Ложь; КонецЕсли;			
			
			Прокси = WSСсылки.WS_InventoryExchange.СоздатьWSПрокси(ВебСервисИнвентаризации.URIПространстваИмен, ВебСервисИнвентаризации.Имя, "InventoryExchangeSoap");
			Прокси.Пользователь = "WS_User";
			Прокси.Пароль = "123456";
		Иначе
			
			Прокси = ПолучитьПрокси("123456",,"WS_User","http://localhost:1777/ut");
			Если Прокси = Неопределено Тогда
				Прокси = ПолучитьПрокси("123456",,"WS_User","http://mx.tabakon.ru:1777/ut");
				если Прокси = Неопределено Тогда
					ВызватьИсключение("");
				КонецЕсли;
			КонецЕсли;	
			//отправить письмо о неудаче
			
			//Доп.ОтправитьПисьмоНаПочту("", "Внимание! Не удалось подключиться к веб-сервису учета", "info@1-spbpro.ru");
			
			//Возвр
		КонецЕсли;
	Исключение
		#Если Клиент Тогда
			Сообщить("Невозможно установить соединение с веб-сервисом обмена данных инвентаризацией!", СтатусСообщения.ОченьВажное);
		#КонецЕсли
		
		Возврат Ложь;
	КонецПопытки;	

	Возврат Истина;
КонецФункции


Функция ПолучитьПрокси(Пароль="", ТекстОшибки = "", Пользователь = "", Адрес = "") Экспорт
	
	ТекстОшибки = "";
	ИмяСервиса = "InventoryExchange"; 
	ИмяСервисаСоап = "InventoryExchangeSoap";
	
	//Если адрес = "" Тогда
	//	Адрес = Константы.АдресХелпДеск.Получить();
	//	//ИмяСервиса = "MAExchange";
	//	//ИмяСервисаСоап = "MAExchangeSoap";
	//КонецЕсли;
		
	Адрес = Адрес + "/ws/InventoryExchange?wsdl";
	Попытка                                 
		Определения = Новый WSОпределения(Адрес,Пользователь,Пароль, 60);
	Исключение      
		// Сообщим пользователю о том, что не получилось получить определение сервиса
		ТекстОшибки = НСтр("ru = 'Не удалось установить соединение с сервером. Повторите попытку позже.'", "ru");
		Если Адрес = "http://mx.tabakon.ru:1777/ut/ws/InventoryExchange?wsdl" Тогда
			Сообщить(ОписаниеОшибки());
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	URI = URIПространстваИменСервиса();
	Прокси = Новый WSПрокси(Определения, URI, ИмяСервиса, ИмяСервисаСоап);
	Прокси.Пользователь = Пользователь;
	Прокси.Пароль = Пароль;
	Возврат Прокси;
	
КонецФункции


Функция URIПространстваИменСервиса()
	
	возврат "http://www.tabakon-inventory-exchange.org";
	//Возврат "http://127.0.0.1";
	
КонецФункции

// НЧАН
Функция ЕдИзПоКласиф (ЕдиницаПоКлассификаторуНаименование)
	
	ЕдПоКл = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕдиницаПоКлассификаторуНаименование);
						
	Если ЕдПоКл = Неопределено ИЛИ ЕдПоКл = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда

		НовОб =  Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		НовОб.УстановитьНовыйКод();
		НовОб.Наименование = ЕдиницаПоКлассификаторуНаименование;
		Попытка
			НовОб.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;

		Возврат НовОб.Ссылка;
	Иначе
		Возврат ЕдПоКл;
	КонецЕсли; 
	
КонецФункции

Функция ЕдиницИзмСоздать (Эл, Владелец)

	////UUID = Новый УникальныйИдентификатор(XMLЗначение(Тип("УникальныйИдентификатор"),  Эл.ЕдИзС ));
	////НоваяСсылка = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(UUID);
	////
	////Если НоваяСсылка.Наименование = "" Тогда
	////	СсНаОбЕдИзм = Справочники.ЕдиницыИзмерения.СоздатьЭлемент(); 

	//////	СсНаОбЕдИзм.УстановитьСсылкуНового(Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(XMLЗначение(Тип("УникальныйИдентификатор"),  Эл.ЕдИзС ))));
	////	СсНаОбЕдИзм.УстановитьНовыйКод(); // Код = Эл.ЕдИзКод; 
	////	СсНаОбЕдИзм.Наименование = Эл.ЕдИзНаименование ;
	////	СсНаОбЕдИзм.ЕдиницаПоКлассификатору = ЕдИзПоКласиф(Эл.ЕдИзЕдиницаПоКлассификаторуНаименование);
	////	СсНаОбЕдИзм.Коэффициент = Эл.ЕдИзКоэффициент;
	////	СсНаОбЕдИзм.Владелец = Владелец;  					
	////	Попытка
	////		СсНаОбЕдИзм.УстановитьСсылкуНового(НоваяСсылка);
	////		СсНаОбЕдИзм.Записать();
	////	Исключение
	////		Сообщить(ОписаниеОшибки());           //77777
	////		//UUID = Новый УникальныйИдентификатор;
	////		//НоваяСсылка = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(UUID);
	////		//СсНаОбЕдИзм.УстановитьСсылкуНового(НоваяСсылка);
	////		//СсНаОбЕдИзм.Записать();
	////	КонецПопытки;
	////
	////	Возврат СсНаОбЕдИзм.Ссылка;
	////	
	////КонецЕсли;	
	////
	////Возврат НоваяСсылка;

КонецФункции

Функция ЗагрузитьОбъединенныйДокументИнвентаризации () Экспорт
	
	СсылкаД = ТаблицаОбъединяемыхДокументовИнвентаризации[0].СсылкаИнвентаризация;
	ТабличныеДанные = Прокси.DownloadDocument(СсылкаД);
	ТабличныеДанные = ТабличныеДанные.получить(); //++
	
	//ТЗ = СериализаторXDTO.ПрочитатьXDTO(ТабличныеДанные.ТаблицаЗначений);
	//++новое чтение сжатого
	ЧтениеХМЛ = новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(ТабличныеДанные);
	ТЗ = СериализаторXDTO.ПрочитатьXML( ЧтениеХМЛ);

	
	Стр = ТЗ[0];
	
	СущОб = Документы.ИнвентаризацияТоваровНаСкладе.ПолучитьСсылку(новый УникальныйИдентификатор(Стр.Ссылка)); 
	Если Сущоб.ПолучитьОбъект() = Неопределено Тогда	
		ДИ = Документы.ИнвентаризацияТоваровНаСкладе.СоздатьДокумент();
		ДИ.УстановитьСсылкуНового(СущОб);
	Иначе
		ДИ = СущОб.ПолучитьОбъект();
		ДИ.Товары.Очистить();
	КонецЕсли;
	
	ДИ.Дата = Стр.Дата;
	ДИ.ИнициализироватьНовыйДокумент(Неопределено, Неопределено);
	ДИ.Склад = ПолучитьСсылкуИзКэша(Стр.СкладС, Справочники.Склады, СтруктураДанныхМагазина);
	ДИ.УчитыватьСерии = XMLЗначение(Тип("Булево"), Стр.УчитыватьСерии);
	ДИ.Организация =  ПолучитьСсылкуИзКэша(Стр.ОрганизацияС, Справочники.Организации, СтруктураДанныхМагазина);
	
	Для Каждого СтрокаТЗ ИЗ Стр.Товары Цикл
		НоваяСтрока = ДИ.Товары.Добавить();
		НоваяСтрока.Номенклатура = ПолучитьНоменклатуруРезко(СтрокаТЗ); // ПолучитьСсылкуИзКэша(СтрокаТЗ.Номенклатура, Справочники.Номенклатура, СтрокаТЗ);
		Если НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков = Null Тогда // 26.06.2017
			ЗагрузитьДополнительноОднуНоменклатуру(СтрокаТЗ.Номенклатура);
			НоваяСтрока.Номенклатура = ПолучитьНоменклатуруРезко(СтрокаТЗ);
			Сообщить("Номенклатура " + СтрокаТЗ.НаименованиеНоменклатуры + " обновлена!");
		КонецЕсли;		
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков; //  ПолучитьСсылкуИзКэша(СтрокаТЗ.ЕдиницаИзмерения, Справочники.ЕдиницыИзмерения, СтрокаТЗ);
		НоваяСтрока.Коэффициент = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент ; // СтрокаТЗ.Коэффициент;
		НоваяСтрока.Количество = СтрокаТЗ.Количество;     
		НоваяСтрока.КоличествоУчет = СтрокаТЗ.КоличествоУчет;
		НоваяСтрока.Отклонение = СтрокаТЗ.Отклонение;
		НоваяСтрока.Цена = СтрокаТЗ.Цена;
		НоваяСтрока.ЦенаВРознице = СтрокаТЗ.ЦенаВРознице;
		НоваяСтрока.Сумма = СтрокаТЗ.Сумма;                     
		НоваяСтрока.СуммаРегл = СтрокаТЗ.СуммаРегл;
		НоваяСтрока.Качество = Справочники.Качество.Новый; // ПолучитьСсылкуИзКэша(СтрокаТЗ.Качество, Справочники.Качество, СтрокаТЗ);
		НоваяСтрока.СуммаУчет = СтрокаТЗ.СуммаУчет;
		НоваяСтрока.ШКприСканировании = СтрокаТЗ.ШКприСканировании ; 
		НоваяСтрока.ООРП = СтрокаТЗ.ООРП ;
		НоваяСтрока.Итого = СтрокаТЗ.Итого ;
		
		//Если СтрокаТЗ.ТоварМРЦ Тогда
		//	УстановкаСтатусаМРЦ(НоваяСтрока.Номенклатура);
			Если СтрокаТЗ.ХарактеристикаНоменклатуры <> "" Тогда
				НоваяСтрока.ХарактеристикаНоменклатуры = ЗаписатьХарактеристикуДляМРЦ(НоваяСтрока.Номенклатура, СтрокаТЗ.ХарактеристикаНоменклатуры) ;
			КонецЕсли;
		//КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		ДИ.Записать(РежимЗаписиДокумента.Запись);
		Сообщить("Итоговый документ обновлен!");
	Исключение
		ТекстСообщения = "Ошибка записи/проведения документа: [" + Строка(ДИ) + "] - " + ОписаниеОшибки();
		
		#Если Клиент Тогда
	        Сообщить(ТекстСообщения);
		#Иначе
			ВызватьИсключение ТекстСообщения;
		#КонецЕсли	
		
		Возврат Ложь;                                                  		
	КонецПопытки;

	Возврат ДИ.Ссылка
	
КонецФункции

Функция ПолучитьНоменклатуруРезко (СтрокаТЗ, Рекурсия = Истина)
	
	УИД = Новый УникальныйИдентификатор(СтрокаТЗ.Номенклатура);
	НоменклатураС = Справочники.Номенклатура.ПолучитьСсылку(УИД);
	
	//Если НоменклатураС.Наименование = "" Тогда 
	//	НоменклатураС = Справочники.Номенклатура.НайтиПоНаименованию(СтрокаТЗ.НаименованиеНоменклатуры, Истина);
	//КонецЕсли;	
	
	Если НоменклатураС = Неопределено ИЛИ НоменклатураС = Справочники.Номенклатура.ПустаяСсылка() ИЛИ НоменклатураС.Наименование = "" Тогда
		Если Рекурсия Тогда
			ЗагрузитьДополнительноОднуНоменклатуру(СтрокаТЗ.Номенклатура);
			Сообщить("Загружена новая номенклатура " + СтрокаТЗ.НаименованиеНоменклатуры);
			Рекурсия = Ложь;
			НоменклатураС = ПолучитьНоменклатуруРезко(СтрокаТЗ, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если НоменклатураС = Неопределено ИЛИ НоменклатураС = Справочники.Номенклатура.ПустаяСсылка() Тогда
	    Сообщить("" + СтрокаТЗ.НаименованиеНоменклатуры + "  неопределено!");
	КонецЕсли;	
			
	Возврат НоменклатураС 
	
КонецФункции	
	
Функция НайтиОбъектПоУИДКодуИмени (СтрокаСсылка, МенеджерОбъекта, Код = Неопределено, Наименование = Неопределено)
	
	Если ПустаяСтрока(СтрокаСсылка) Тогда Возврат МенеджерОбъекта.ПустаяСсылка(); КонецЕсли;
	
	СсылкаНаОбъектПоУИД  = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаСсылка));
	//СсылкаНаОбъектПоНаим = ?(Код = Неопределено, Неопределено, МенеджерОбъекта.НайтиПоНаименованию(Наименование));
	СсылкаНаОбъектПоКоду = ?(Наименование = Неопределено, Неопределено, МенеджерОбъекта.НайтиПоКоду(Код));
	
	Если НЕ ПустаяСтрока(СсылкаНаОбъектПоУИД.ВерсияДанных) Тогда 
		
			Возврат СсылкаНаОбъектПоУИД;
			
	ИначеЕсли СсылкаНаОбъектПоКоду <> Неопределено Тогда 
			
			Возврат  СсылкаНаОбъектПоКоду;
	Иначе
			Возврат МенеджерОбъекта.ПустаяСсылка();
		
	КонецЕсли;   
	
	
	//Если НЕ ПустаяСтрока(СсылкаНаОбъектПоУИД.ВерсияДанных) Тогда 
	//	
	//		Возврат СсылкаНаОбъектПоУИД;
	//		
	//ИначеЕсли СсылкаНаОбъектПоКоду <> Неопределено Тогда 
	//		
	//		Возврат  СсылкаНаОбъектПоКоду;

	//ИначеЕсли СсылкаНаОбъектПоНаим <> Неопределено Тогда
	//	
	//		Возврат  СсылкаНаОбъектПоНаим;
	//	
	//Иначе
	//		Возврат МенеджерОбъекта.ПустаяСсылка();
	//	
	//КонецЕсли;   		
		
КонецФункции	

Функция УдалитьДокиНаСервере(СтрокаИзУИД) Экспорт  // Установить ПометкуУдаления
	Прокси.PometitDokiNaUdolenie(СтрокаИзУИД) ;
КонецФункции

Процедура ПредварительнаяЗагрузкаСправочников () Экспорт
	
	ЗагрузитьГруппыНоменклатуры();
	
	Склад = ПолучитьСсылкуИзКэша(СтруктураДанныхМагазина.ИдентификаторСсылки, Справочники.Склады, СтруктураДанныхМагазина);
	Организация = ПолучитьСсылкуИзКэша(СтруктураДанныхМагазина.ИдентификаторСсылкиОрганизации, Справочники.Организации, СтруктураДанныхМагазина);
	
	Для Каждого СтрокаТЗ ИЗ ТаблицаОстатковПоСкладу Цикл
		Номенклатура = ПолучитьСсылкуИзКэша(СтрокаТЗ.СсылкаНоменклатура, Справочники.Номенклатура, СтрокаТЗ);
		Если Номенклатура.ЭтоГруппа = Истина Тогда
			Продолжить;
		КонецЕсли;	
		//ЕдиницаИзмерения = ПолучитьСсылкуИзКэша(СтрокаТЗ.СсылкаЕдиницаХранения, Справочники.ЕдиницыИзмерения, СтрокаТЗ);
		
		ЗагрузкаДопХарактеристикНоменклатуры(Номенклатура, СтрокаТЗ);
		
		ЗагрузкаДопЕдИзмерений(Номенклатура, СтрокаТЗ);
		
		ЗагрузкаДопШК(Номенклатура, СтрокаТЗ);   
		
		Если Номенклатура.ЕдиницаХраненияОстатков.Владелец = Неопределено Тогда
			ЕдХранX = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТЗ.СсылкаЕдиницаХранения));
			Об = Номенклатура.ПолучитьОбъект();
			Об.ЕдиницаХраненияОстатков = ЕдХранX;
			Об.ЕдиницаДляОтчетов = ЕдХранX;
			Попытка
				Об.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки; 
		КонецЕсли;	
		
		Попытка
			КЕХТ = Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			ПроверкаВладельца = (Номенклатура <> Номенклатура.ЕдиницаХраненияОстатков.Владелец);
			Если КЕХТ = 0 ИЛИ ПроверкаВладельца Тогда
				ЕдХран = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТЗ.СсылкаЕдиницаХранения));
					
					ЕдОб = ЕдХран.ПолучитьОбъект();
					ЕдОб.Коэффициент = СтрокаТЗ.КоэффициентЕдиницыХранения;
					ЕдОб.Владелец = Номенклатура;	
					ЕдОб.Записать();
							
				Об = Номенклатура.ПолучитьОбъект();
				Об.ЕдиницаХраненияОстатков = ЕдХран;
				Об.ЕдиницаДляОтчетов = ЕдХран;
				Попытка
					Об.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки; 
				
				Если ЕдОб.Коэффициент = 0 ИЛИ ПроверкаВладельца Тогда				
					ТС = Строка(Номенклатура) + ?(ЕдОб.Коэффициент = 0," (ЕдиницаХраненияОстатков.Коэффициент) = 0!", ?(ПроверкаВладельца, ": ЕдиницаХраненияОстатков имеет другого владельца!", ""));
					Сообщить(ТС);
				КонецЕсли;	
		//			ПроверкаиЗаполнениеКоэффициента (1, СтрокаТЗ, Номенклатура, ЕдиницаИзмерения);  //77777
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 

 
		// Справочники.ЕдиницыИзмерения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТЗ.СсылкаЕдиницаХранения))
		Если Номенклатура.ЕдиницаХраненияОстатков.Наименование = "" Тогда
			ЗагрузитьДополнительноОднуНоменклатуру(СтрокаТЗ.СсылкаНоменклатура);
		КонецЕсли;			
		//

		//Качество = ПолучитьСсылкуИзКэша(СтрокаТЗ.СсылкаКачество, Справочники.Качество, СтрокаТЗ);
		Если СтрокаТЗ.ТоварМРЦ Тогда
			УстановкаСтатусаМРЦ(Номенклатура);	
		КонецЕсли;
		
		//Если СтрокаТЗ.СсылкаХарактеристикаНоменклатуры <> "" Тогда
		//	ХарактеристикаНоменклатуры = ЗаписатьХарактеристикуДляМРЦ(Номенклатура, СтрокаТЗ.СсылкаХарактеристикаНоменклатуры, СтрокаТЗ.ХарактеристикаНоменклатурыНаименование) ;
		//КонецЕсли;
					
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаиЗаполнениеКоэффициента (Ключ, Данные, Номенклатура, ЕдиницаИзмерения)
	
	КЕИ  = ЕдиницаИзмерения.Коэффициент;
	
	Если КЕИ = 0 Тогда
		ЕИ = ЕдиницаИзмерения.ПолучитьОбъект();
		ЕИ.Коэффициент = ?(Данные.КоэффициентЕдиницыХранения <> 0, Данные.КоэффициентЕдиницыХранения, 1); // При неизвестном коэфф. установить "1" ()
		Попытка
			ЕИ.Записать();
		Исключение
			Сообщить("Ошибка(456751) " + ОписаниеОшибки());
		КонецПопытки;	
	КонецЕсли;	
		
	Об = Номенклатура.ПолучитьОбъект();
	Об.ЕдиницаХраненияОстатков = Справочники.ЕдиницыИзмерения.ПустаяСсылка(); //  ЕдиницаИзмерения;
	Попытка
		Об.Записать();
	Исключение
		Сообщить("Ошибка(241676) " + ОписаниеОшибки());
	КонецПопытки;	
	      
КонецПроцедуры

Процедура ЗаписатьДокПоСсылке(ДокументСсылка, ПутьВыгрузки ) Экспорт
	
	ЗаписьТхт = Новый ТекстовыйДокумент;
	Склад = СтруктураДанныхМагазина;
	
	Если СтруктураДанныхМагазина <> Неопределено Тогда
		СкладСсылка = Справочники.Склады.ПолучитьСсылку( Новый УникальныйИдентификатор(СтруктураДанныхМагазина.ИдентификаторСсылки));
	Иначе
		СкладСсылка = ДокументСсылка.Склад;
	КонецЕсли;	
	
	НомерД=ДокументСсылка.Номер;     
	ДТ=Строка(ТекущаяДата());
	ДТ=(Лев(ДТ, 10));
	Год=(Прав(ДТ, 2));
	ДеньМес=(Лев(ДТ, 5));
	ДТ=ДеньМес+"."+Год;
	ИмяФайла = ПутьВыгрузки + "\" + СкладСсылка.Наименование + НомерД + " (" + ДТ + ").txt";
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура КАК НоменклатураС,
	               |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.Код КАК Код,
	               |	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.Артикул КАК Артикул,
	               |	ИнвентаризацияТоваровНаСкладеТовары.Количество КАК Кол,
	               |	ИнвентаризацияТоваровНаСкладеТовары.Цена,
	               |	ИнвентаризацияТоваровНаСкладеТовары.ХарактеристикаНоменклатуры,
	               |	ИнвентаризацияТоваровНаСкладеТовары.ШКприСканировании,
	               |	ИнвентаризацияТоваровНаСкладеТовары.ЦенаВРознице
	               |ИЗ
	               |	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	               |ГДЕ
	               |	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);			   
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаписьТхт.ДобавитьСтроку("Артикул;Код;Наименование;Кол;Цена;Документ;ШК;Магазин");
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Кол = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Наименование= Выборка.НоменклатураС.Наименование + " (" +Выборка.ХарактеристикаНоменклатуры.Наименование + ")" ;
		Код			=?(Выборка.Код = "", "/", Выборка.Код) ;
		Артикул		=?(Выборка.Артикул = "", "/", Выборка.Артикул) ;
		Кол 		=?(Выборка.Кол = "", "/", Выборка.Кол) ;
	    Цена 		=?(Выборка.ЦенаВРознице = "", "/", Выборка.ЦенаВРознице) ;  Цена = Формат(Цена,"ЧГ=0");
		ШК 	 		=?(Выборка.ШКприСканировании = "", "/", Выборка.ШКприСканировании) ;

		Документ 	=?(НомерД = "", "/", НомерД) ;	
	
		ЗаписьТхт.ДобавитьСтроку("/"+";"+Код+";"+Наименование+";"+Кол+";"+Цена+";"+Документ+" ("+ДТ+");"+ШК+";"+СкладСсылка.Наименование);
		
	КонецЦикла;

	ЗаписьТхт.Записать(ИмяФайла, КодировкаТекста.ANSI);

КонецПроцедуры

Процедура УстановкаСтатусаМРЦ (Номенклатура)
	
	//П = Номенклатура.ТоварМРЦ И Истина ; П = Номенклатура.ВестиУчетПоХарактеристикам И П ;
	
	Если Не Номенклатура.ТоварМРЦ ИЛИ НЕ Номенклатура.ВестиУчетПоХарактеристикам Тогда
		
		Об = Номенклатура.ПолучитьОбъект();
		Если Об.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
			 Об.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
		КонецЕсли;
		Об.ВестиУчетПоХарактеристикам = Истина;
		Об.ТоварМРЦ = Истина;
		
		Об.Записать(); 
		
	КонецЕсли;
	
КонецПроцедуры	

Функция ЗаписатьХарактеристикуДляМРЦ (Номенклатура, УИДСереЛ, НаименованиеХ = Неопределено)        // Или получить при загрузке объединенной инвентаризации
	
	//СсылкаНаОбъект = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(НаименованиеХ, Истина, , Номенклатура); 
	СсылкаНаОбъект = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДСереЛ));
	
	Если СсылкаНаОбъект = Неопределено Тогда
		Сообщить ("Характеристика <" + НаименованиеХ + "> для номенклатуры [" + Номенклатура + "] не найдена!");
		Возврат Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()
	КонецЕсли;	
	
	//МН = Справочники.ХарактеристикиНоменклатуры;
	//Попытка
	//	СсылкаНаОбъект = МН.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДСереЛ));
	//	Если СсылкаНаОбъект.ПолучитьОбъект() = Неопределено Тогда
	//		СсылкаНаОбъект = Неопределено;
	//	КонецЕсли;	
	//Исключение
	//	СсылкаНаОбъект = Неопределено;
	//КонецПопытки;	
	//	
	//Если СсылкаНаОбъект = Неопределено Тогда
	//	
	//	СсылкаНаОбъект = МН.СоздатьЭлемент();
	//	СсылкаНаОбъект.УстановитьСсылкуНового(МН.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДСереЛ)));
	//	СсылкаНаОбъект.Владелец = Номенклатура;	
	//	СсылкаНаОбъект.Наименование = НаименованиеХ;
	//	СсылкаНаОбъект.Записать();
			
		//Запись = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		//
		//Запись.Объект = СсылкаНаОбъект.Ссылка;
		//ВидСвойства = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Размер");
		//Запись.Свойство = ВидСвойства;
		//Запись.Значение    = Значение;
		//Запись.Записать();
			
	//КонецЕсли;	
	
	Возврат  СсылкаНаОбъект;		
			
КонецФункции

Процедура УдалениеСтарыхДокументовИФайлов (ПутьВыгрузкиИнвентаризации, ПутьВыгрузкиДляПродавца ) Экспорт
	
	ДТ = ТекущаяДата() - 2*7*24*60*60 ;
		
	// Документы
	З = Новый Запрос;
	З.Текст = "ВЫБРАТЬ
	          |	ИнвентаризацияТоваровНаСкладе.Ссылка
	          |ИЗ
	          |	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	          |ГДЕ
	          |	ИнвентаризацияТоваровНаСкладе.ПометкаУдаления = ИСТИНА
	          |	И ИнвентаризацияТоваровНаСкладе.Дата < &ДТ
	          |
	          |ОБЪЕДИНИТЬ ВСЕ
	          |
	          |ВЫБРАТЬ
	          |	ОприходованиеТоваров.Ссылка
	          |ИЗ
	          |	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
	          |ГДЕ
	          |	ОприходованиеТоваров.ПометкаУдаления = ИСТИНА
	          |	И ОприходованиеТоваров.Дата < &ДТ";
			  
	З.УстановитьПараметр("ДТ", ДТ);			  
	В = З.Выполнить().Выбрать();
	
	//Пока В.Следующий() Цикл         // Удалять доки не будем, т.к. на ноуте может быть другая дата
	//	О = В.Ссылка.ПолучитьОбъект();
	//	ОС = Строка(О);
	//    О.Удалить();          
	//	Сообщить("Удален " + ОС);
	//КонецЦикла;
	
	// Папки
	МФ = НайтиФайлы(ПутьВыгрузкиИнвентаризации, "*.xls");	
    Для Каждого Эл Из МФ Цикл
	   Д =  ПолучитьДатуД(Эл.Имя, 1);   
	   Если Д < ДТ Тогда 
 			УдалитьФайлы(Эл.ПолноеИмя);
			Сообщить("Удален " + Эл.Имя);
	   КонецЕсли;	   	
   КонецЦикла;
   
   МФ = НайтиФайлы(ПутьВыгрузкиДляПродавца, "*.txt");	
    Для Каждого Эл Из МФ Цикл
	   Д =  ПолучитьДатуД(Эл.Имя, 2);   
	   Если Д < ДТ Тогда 
			УдалитьФайлы(Эл.ПолноеИмя);
			Сообщить("Удален " + Эл.Имя);
	   КонецЕсли;	   	
   КонецЦикла;
   
КонецПроцедуры	

Функция ПолучитьДатуД (ИмяДока, Вид)
	
	Если Вид = 1 Тогда
		
	   О = Прав(ИмяДока,14);
	   Д = Лев(О,2);
	   М = Сред(О, 4, 2);
	   Г = Сред(О, 7, 4);
	   СК = Г + М + Д ;
	   Д = Дата(СК);
	   
   ИначеЕсли Вид = 2 Тогда          
	   
	   О = Прав(ИмяДока,14);
	   Д = Сред(О,2,2);
	   М = Сред(О, 5, 2);
	   Г = "20" + Сред(О, 8, 2);
	   СК = Г + М + Д ;
	   Д = Дата(СК);
	   
   КонецЕсли;
   
	   Возврат Д;
	   
   КонецФункции	
   
Процедура ЗагрузкаДопХарактеристикНоменклатуры(Номенклатура, СтрокаТЗ)
	
	Если СтрокаТЗ.ЗагрузкаДопХарактеристик = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Эл Из СтрокаТЗ.ЗагрузкаДопХарактеристик Цикл   
		
		Если Эл.ХарактеристикаС = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СсылкаНаОбъект = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(Эл.ХарактеристикаС));
		
		ДругойВладелец = Ложь;
		Если СсылкаНаОбъект.ПолучитьОбъект() <> Неопределено Тогда
			Если СсылкаНаОбъект.Владелец = Номенклатура Тогда
				Продолжить;
			Иначе
				ДругойВладелец = Истина;
			КонецЕсли;	
		КонецЕсли;
		
		ППЗ = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(Эл.Наименование, Истина, , Номенклатура);
		Если ППЗ <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
			Если ППЗ <> Неопределено Тогда
			     Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СсылкаНаОбъект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
		СсылкаНаОбъект.ОбменДанными.Загрузка = Истина;
		Если НЕ ДругойВладелец Тогда
			СсылкаНаОбъект.УстановитьСсылкуНового(Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(Эл.ХарактеристикаС)));
		КонецЕсли;	
			
		СсылкаНаОбъект.Наименование = Эл.Наименование;
		СсылкаНаОбъект.ДатаЗаписи = Эл.ДатаЗаписи;
//		СсылкаНаОбъект.Представление = Эл.Представление;
		СсылкаНаОбъект.Владелец = Номенклатура;
		
		СсылкаНаОбъект.Записать();
		
		
	КонецЦикла;	
	   
КонецПроцедуры	 

Процедура ЗагрузкаДопЕдИзмерений(Номенклатура, СтрокаТЗ)
	
	Если ТипЗнч(СтрокаТЗ.ЕдИзТЗ) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТЗ.ЕдИзТЗ.Количество() = 0 Тогда
		Сообщить("Номенклатура " + Строка(Номенклатура) + "  не имеет ЕдИз!" );
		Возврат;
	КонецЕсли;
	
	ТабСвер = СтрокаТЗ.ЕдИзТЗ.Скопировать();
	//ТабСвер.Очистить();
		
	Для Каждого Эл Из ТабСвер Цикл
		
		UUID = Новый УникальныйИдентификатор(Эл.ЕдИзС);
		Сс = Справочники.ЕдиницыИзмерения.ПолучитьСсылку(UUID);
		
		Если Сс.ПолучитьОбъект() <> Неопределено Тогда
			Если Сс.Владелец = Номенклатура Тогда
				Продолжить;
			Иначе
				//ДругойВладелец = Истина;
				Сообщить("Единица измерения для " + Номенклатура + " уже записана на " + Сс.Владелец + "!");
			КонецЕсли;	
		КонецЕсли;
	
	    СсНаОбЕдИзм = Справочники.ЕдиницыИзмерения.СоздатьЭлемент(); 
		СсНаОбЕдИзм.УстановитьСсылкуНового(Сс);
		СсНаОбЕдИзм.УстановитьНовыйКод(); // Код = Эл.ЕдИзКод; 
		СсНаОбЕдИзм.Наименование = Эл.ЕдИзНаименование ;
		СсНаОбЕдИзм.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Эл.ЕдИзНаименование);
		Если СсНаОбЕдИзм.ЕдиницаПоКлассификатору = Неопределено Тогда
			КЕИЗ = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
			КЕИЗ.Наименование = Эл.ЕдИзНаименование;
			КЕИЗ.Записать();
			СсНаОбЕдИзм.ЕдиницаПоКлассификатору = КЕИЗ.Ссылка;
		КонецЕсли;	
		СсНаОбЕдИзм.Коэффициент = Эл.ЕдИзКоэффициент;
		СсНаОбЕдИзм.Владелец = Номенклатура;  					
		Попытка
			СсНаОбЕдИзм.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗагрузкаДопШК(Номенклатура, СтрокаТЗ)     // 14.06.2017
	
	Если ТипЗнч(СтрокаТЗ.ШКТЗ) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТЗ.ШКТЗ.Количество() = 0 Тогда
		Сообщить("Номенклатура " + Строка(Номенклатура) + "  не имеет ШК!" );
		Возврат;
	КонецЕсли;
	
	ТабСвер = СтрокаТЗ.ШКТЗ.Скопировать();
	ТабСвер.Свернуть("ШКЗначение,ШКЕдИз,ШКТип");

	Для Каждого Эл Из ТабСвер Цикл   
			
		Запрос = новый Запрос("ВЫБРАТЬ
			|	Штрихкоды.Владелец КАК Владелец
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Штрихкод В (&Штрихкод)");
			
		МШК = ЛК_РаботаСДокументами.ПолучитьМассивШКбезНулей(Эл.ШКЗначение);
		Запрос.УстановитьПараметр("Штрихкод", МШК);        
		
		Результат = Запрос.Выполнить().Выбрать();
	
		Если Результат.Следующий() тогда
			Если Результат.Владелец = Номенклатура Тогда
				Продолжить;
			Иначе
				Сообщить("ШК " + Эл.ШКЗначение + " (" + Номенклатура + ") имеет другого владельца: " + Результат.Владелец);
				Продолжить;
			КонецЕсли;	
		Иначе
			СсНаОб = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();					
			СсНаОб.Штрихкод = Эл.ШКЗначение;
			СсНаОб.Владелец = Номенклатура;					
			СсНаОб.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.НайтиПоНаименованию(Эл.ШКТип);    
			ЕИЗ = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(?(Эл.ШКЕдИз=Null,"шт.",Эл.ШКЕдИз),,,Номенклатура);
			СсНаОб.ЕдиницаИзмерения = ?(ЕИЗ <> Неопределено , ЕИЗ, Справочники.ЕдиницыИзмерения.ПустаяСсылка());
			СсНаОб.Качество = Справочники.Качество.Новый; 
			Попытка
				СсНаОб.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;		
	КонецЦикла;	
		
КонецПроцедуры

Процедура ЗагрузитьДополнительноОднуНоменклатуру(Номенклатура) // 26.06.2017
	
	Данные = Прокси.GetNomenklature(Номенклатура);	
	ТекстОшибки = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.РежимОбмена = "Загрузка";
	
	РаботаВозможна = ОбработкаОбмена.ВыполнитьДействияПередЧтениемДанных(Данные.Получить());
	
	Если НЕ РаботаВозможна Тогда
		Сообщить("Ошибка обмена данных!");
		Возврат;
	КонецЕсли;	

	ОбработкаОбмена.ПроизвестиЧтениеДанных(ТекстОшибки);
	
	ОбработкаОбмена.ВыполнитьДействияПослеЗавершенияЧтенияДанных(); 
	
КонецПроцедуры 

Процедура ЗагрузитьГруппыНоменклатуры()
	
	УР = РегистрыСведений.СоставГруппДляПроцентов.СоздатьНаборЗаписей();
	УР.Записать();

	Данные = Прокси.GetGroupNomenklature();
	
	ТекстОшибки = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.РежимОбмена = "Загрузка";
	
	РаботаВозможна = ОбработкаОбмена.ВыполнитьДействияПередЧтениемДанных(Данные.Получить());
	
	Если НЕ РаботаВозможна Тогда
		Сообщить("Ошибка обмена данных!");
		Возврат;
	КонецЕсли;	
	
	ОбработкаОбмена.ВыводВОкноСообщенийИнформационныхСообщений = Ложь;
	ОбработкаОбмена.ПроизвестиЧтениеДанных(ТекстОшибки);
	
	ОбработкаОбмена.ВыполнитьДействияПослеЗавершенияЧтенияДанных(); 
	
КонецПроцедуры 
// КЧАН

//********************************************************************************************
Функция ВыполнитьОбъединениеДокументовИнвентаризацииНаСервере() Экспорт
	СтрокаСсылок = "";
	КолОтметок = 0;
	
	Для Каждого СтрокаТЗ ИЗ ТаблицаОбъединяемыхДокументовИнвентаризации Цикл
		Если СтрокаТЗ.Объединять Тогда
			СтрокаСсылок = СтрокаСсылок + СтрокаТЗ.СсылкаИнвентаризация + ";";
			КолОтметок = КолОтметок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КолОтметок < 2 Тогда
		#Если Клиент Тогда
			Сообщить("Для операции объединения должно быть отмечено как минимум 2 документа инвентаризации!", СтатусСообщения.ОченьВажное);
		#КонецЕсли
		Возврат Ложь; 
	КонецЕсли;
	
	Если Прокси.CombineDocuments(СтрокаСсылок) Тогда
		
	КонецЕсли;
КонецФункции
//********************************************************************************************
ДатаОперации = РабочаяДата;

Запрос = Новый Запрос;
КэшСсылок = Новый Соответствие;
