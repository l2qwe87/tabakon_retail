Процедура  ЗагрузитьОтчетыОПродажах(Склад = Неопределено) экспорт
	
	Если Склад = Неопределено ИЛИ ПустаяСтрока(Склад) Тогда // НЧАН
		МассивСкладов = ПолучитьРозничныеСклады();
	Иначе
		МассивСкладов = новый Массив;
		МассивСкладов.Добавить(Склад);	
	КонецЕсли;
	
	Для каждого Склад из МассивСкладов цикл
		
		//Если ЗначениеЗаполнено(Склад.ПочтовыйЯщик) тогда    // НЧАН
		ПочтовыйЯщик =  Склад.ПочтовыйЯщик;
		//// Вставить содержимое обработчика.
		////создадим новый объект
		//Профиль = Новый ИнтернетПочтовыйПрофиль;
		//
		////Пропишем параметры соединения
		////ip адрес или имя POP3 сервера
		////Профиль.АдресСервераIMAP = "imap.mail.ru";
		//
		////Профиль.АдресСервераSMTP = "smtp.mail.ru";
		//
		//Профиль.АдресСервераPOP3    = ПочтовыйЯщик.POP3Сервер;
		//Профиль.ИспользоватьSSLPOP3 = ПочтовыйЯщик.ИспользоватьЗащищенноеСоединениеДляВходящейПочты;
		//
		////Порт SMTP сервера
		//Профиль.ПортPOP3   = ПочтовыйЯщик.ПортPOP3;
		////Профиль.ПортIMAP = "993";
		////Профиль.ПортSMTP = "465" ;
		//
		////Имя пользователя почтового ящика
		//Профиль.Пользователь = ПочтовыйЯщик.Логин;
		//
		////Пароль доступа к почтовому ящику
		//Профиль.Пароль = ПочтовыйЯщик.Пароль;
		////
		////Профиль.ПользовательIMAP = "test.tab@mail.ru";
		////Профиль.ПарольIMAP = "zaq12WSX";
		//
		////Профиль.ПользовательSMTP = "test.tab@mail.ru";
		////Профиль.ПарольSMTP = "zaq12WSX";
		
		// НЧАН			
		Профиль = Новый ИнтернетПочтовыйПрофиль;
		
		Профиль.АдресСервераPOP3    	= "mx.tabakon.ru";
		Профиль.ПортPOP3 				= "110";
		Профиль.Пользователь            = "otdely";
		Профиль.Пароль					= "1asdf1971";
		
		Почта = Новый ИнтернетПочта;
		Попытка
			Почта.Подключиться(Профиль);
		Исключение
			Сообщить("Ошибка при подключении к серверу" + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		Заголовки 	= Новый Массив;
		Заголовки 	= Почта.ПолучитьЗаголовки();
		Отбор 		= Новый Массив;
		
		Для Каждого Эл Из Заголовки Цикл
			
			//А = Эл.Отправитель.Адрес // otdel.vsujka@tabakon.ru
			//Заголовки[7].Идентификатор[0]  // 000221e0
			//Заголовки[7].Тема // Re:№ АЗ00001754 от 16.02.17 (16.02.17_11:37:14) загружена 17.02
			
			ЛГН = СокрЛП(ПочтовыйЯщик.Логин);
			
			К = ?(ТипЗнч(Эл.Отправитель.Адрес) = Тип("Строка"), Найти(Эл.Отправитель.Адрес, ЛГН), 0);
			Если К > 0 И НеВыгруженоРанее(ЛГН, Эл.Идентификатор[0]) Тогда
				Отбор.Добавить(Эл);
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если Отбор.Количество() < 1 Тогда
			Продолжить;
		КонецЕсли;	
		
		//Выбираем письма по отбору с определенным складом
		УдалятьПисьма = Ложь;
		МассивСообщений = Новый Массив;
		МассивСообщений = Почта.Выбрать(УдалятьПисьма, Отбор);             
		
		//Разбираем каждое письмо, и выполняем необходимые действия
		Для Каждого Письмо Из МассивСообщений Цикл
			
			Если Письмо.Вложения.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			//Получение вложений в письме
			//Вложения = Письмо.Вложения;
			//Тема      =  Письмо.Тема;
			ДатаОтправления = Письмо.ДатаОтправления;    
			//Тексты      =  Письмо.Тексты;
			Для каждого Вложения из Письмо.Вложения цикл
		// 06.06.17 Проверка на тип файла		
			Если Найти(НРег(Вложения.ИмяФайла), "возврат") Тогда 	
				Продолжить;	
			КонецЕсли;
		//		
				ВременныйФайл = ПолучитьИмяВременногоФайла("txt");
				Вложения.Данные.Записать(ВременныйФайл);
			КонецЦикла;
			
			Если ВременныйФайл = Неопределено Тогда Продолжить; КонецЕсли;
			
	// 30.06.2017
	
			ПС = Найти(Вложения.Имя, "_");
			Если ПС > 0 Тогда
				Д = Сред(Вложения.Имя, ПС + 1, 2);
				М = Сред(Вложения.Имя, ПС + 4, 2);
				Г = Сред(Вложения.Имя, ПС + 7, 4);
		
				ДатаВложения = Дата(Г+М+Д+"010000") // Новый Граница(Дата(Г+М+Д), ВидГраницы.Включая);       
			Иначе
				//Сообщить("Неверный формат темы письма (правильный формат = [продажи ДД.ММ.ГГ]");
	            Продолжить;
			КонецЕсли;	
	//
			Если (ЗначениеЗаполнено(НачПериода) и ДатаВложения < НачПериода) Тогда
				Продолжить;	
			КонецЕсли;	
			Если (ЗначениеЗаполнено(КонПериода) и КонецДня(КонПериода) < ДатаВложения) Тогда
				Продолжить;	
			КонецЕсли;				
			
			ТаблицаТоваров = ПолучитьТаблицуТоваров(ВременныйФайл);
			Если ТипЗнч(ТаблицаТоваров) <> Тип("ТаблицаЗначений") Тогда           // 13.06.2017
				Сообщить("Ошибка преобразования данных! : " + ТаблицаТоваров[0]);
				Продолжить;
			КонецЕсли;		

			//Если ТипЗнч(ТаблицаТоваров) = Тип("Строка") Тогда
			//	Если ТаблицаТоваров <> "" Тогда
			//		Сообщить(Письмо.ИмяОтправителя + "|" + Письмо.Тема + "  В 5-ой колнке должен быть Штрихкод! (" + ТаблицаТоваров + ")");
			//		Продолжить;
			//	КонецЕсли;
			//КонецЕсли;	
			
			Если ТаблицаТоваров.Количество() > 0 Тогда
				СоздатьОтчетОРозничныхпродажах(ТаблицаТоваров,Склад,ДатаВложения, Письмо.Идентификатор[0], ПочтовыйЯщик.Логин);
			КонецЕсли;
			
		КонецЦикла;                   
		
		
		//После получения закрываем соединение
		Почта.Отключиться();
		
		
		//КонецЕсли;     // НЧАН
	КонецЦикла;
	
	Склад = Справочники.Склады.ПустаяСсылка();
	
	// КЧАН
	
КонецПроцедуры

Процедура СоздатьОтчетОРозничныхпродажах(ТаблицаТоваров,Склад,ДатаОтправления, ПисьмоИД = Неопределено, СкладПользователь = Неопределено, РежимАвтоЗагрузки = Истина)
	
	//найдем прошлый по сумму и дате
	сум = 0;
	ПерваяСтрока = Истина;
	для Каждого стр из ТаблицаТоваров цикл
		Если ПерваяСтрока тогда
			ПерваяСтрока = Ложь;
			Продолжить;
		КонецЕсли;
		КоличествоП   = Число(Стр.Колонка2);
		цена = Стр.Колонка3;
		сум = сум + КоличествоП*цена;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтчетОРозничныхПродажах.Дата,
	               |	ОтчетОРозничныхПродажах.СуммаДокумента,
	               |	ОтчетОРозничныхПродажах.Ссылка
	               |ИЗ
	               |	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	               |ГДЕ
	               |	ОтчетОРозничныхПродажах.Дата = &Дата
	               |	И ОтчетОРозничныхПродажах.СуммаДокумента = &СуммаДокумента
	               |	И ОтчетОРозничныхПродажах.ПометкаУдаления = ЛОЖЬ
	               |	И ОтчетОРозничныхПродажах.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Дата", КонецДня(ДатаОтправления));
	Запрос.УстановитьПараметр("СуммаДокумента", сум);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() тогда
		Возврат;	
	КонецЕсли;
	
		
	
	// НЧАН	
	Организация = Справочники.Организации.НайтиПоКоду("000000100");
	ДокументОтчетОРозничныхПродажах      = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	ДокументОтчетОРозничныхПродажах.Дата = КонецДня(ДатаОтправления);
	ДокументОтчетОРозничныхПродажах.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
	ДокументОтчетОРозничныхПродажах.КассаККМ    = ПолучитьКассуККМ(Склад.КассаСклада, Организация);//Склад.КассаСклада;
	ДокументОтчетОРозничныхПродажах.Склад       = Склад;
	ДокументОтчетОРозничныхПродажах.Организация = Организация;
	ДокументОтчетОРозничныхПродажах.ОтражатьВУправленческомУчете = Истина;
	ДокументОтчетОРозничныхПродажах.ОтражатьВБухгалтерскомУчете  = Истина;
	ДокументОтчетОРозничныхПродажах.ОтражатьВНалоговомУчете      = Истина;
	ДокументОтчетОРозничныхПродажах.СуммаВключаетНДС             = Истина;
	ДокументОтчетОРозничныхПродажах.УчитыватьНДС                 = Истина;	
	ДокументОтчетОРозничныхПродажах.ТипЦен                       = Склад.ТипЦенРозничнойТорговли;
	
	ОшибкаКоличества = "Ошибка в остатках: ";
	ПерваяСтрока = Истина;
	Для каждого Строка из ТаблицаТоваров цикл
		
		Если ПерваяСтрока тогда
			ПерваяСтрока = Ложь;
			Продолжить;
		КонецЕсли;
		
//		НоменклатураП = ПолучитьНоменклатуру(Строка.Колонка5); // По Штрих-коду
		НоменклатураП = ПолучитьНоменклатуруПоКоду(ЛК_РаботаСДокументами.ПривестиНомерКДлине(Строка.Колонка1, 11));

		КоличествоП   = Число(Строка.Колонка2);
		
		// Проверка остатков
		
		ММ = ЛК_РаботаСДокументами.ПроверкаОстаткаНоменклатура(НоменклатураП, Склад, КоличествоП, ДокументОтчетОРозничныхПродажах.Дата);
		
		Если НЕ ММ[0] Тогда	
			ОшибкаКоличества = ОшибкаКоличества + Строка(НоменклатураП) + "; ";
			//			Сообщить(ММ[1]);
			//			Возврат;
		КонецЕсли;
		
		// КАК ВАРИАНТ ИСКАТЬ СООТВЕТСТВИЕ ЦЕНЫ ПРОДАЖИ В НАЗВАНИИ ХАРАКТЕРИСТИКИ МРЦ
		// Но будем списывать по "принципу ФИФО" для текущего склада:
		
		// Согласно ДатеЗаписи характеристики (при нормальной работе)
		//ТаблицаСписанийПоХарактеристикам = СписаниеПоХарактеристикам(КоличествоП, Склад, НоменклатураП, ТекущаяДата());
		
		// По соответствию загружаемой цены и характеристики
		//ДатаСреза = ТекущаяДата();
		ДатаСреза = КонецДня(ДатаОтправления);
		ТаблицаСписанийПоХарактеристикам = СписаниеПоХарактеристикамПоСоответсвию(КоличествоП, Склад, НоменклатураП, Строка.Колонка3, ДатаСреза);
		
		Для Каждого Эл Из ТаблицаСписанийПоХарактеристикам Цикл
			
			НоваяСтрока                  = ДокументОтчетОРозничныхПродажах.Товары.Добавить();
			НоваяСтрока.Номенклатура     = НоменклатураП;
			НоваяСтрока.ХарактеристикаНоменклатуры = Эл.хка;
			//НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			
			НоваяСтрока.ЕдиницаИзмерения = ?(ТипЗнч(НоменклатураП.ЕдиницаХраненияОстатков) = Тип("СправочникСсылка.ЕдиницыИзмерения"), НоменклатураП.ЕдиницаХраненияОстатков, Справочники.ЕдиницыИзмерения.ПустаяСсылка());
			НоваяСтрока.Количество       = Эл.кол;
			НоваяСтрока.ШКизФайла = Строка.Колонка5;
			//НоваяСтрока.Количество       = Число(Строка.Колонка2);

			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) тогда
				НоваяСтрока.СтавкаНДС        = НоваяСтрока.Номенклатура.СтавкаНДС;
			Иначе
				НоваяСтрока.СтавкаНДС        = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			НоваяСтрока.Цена             = Строка.Колонка3;
			НоваяСтрока.Коэффициент      = ?(НоваяСтрока.ЕдиницаИзмерения.Коэффициент <> 0, НоваяСтрока.ЕдиницаИзмерения.Коэффициент, 1);
			
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока,ДокументОтчетОРозничныхПродажах);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока,ДокументОтчетОРозничныхПродажах);
			
			// Доп проверки
			Если НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент = 0  Тогда
				Сообщить("Номенклатура: " + НоваяСтрока.Номенклатура + " Ошибка: Коэффициент в Единице хранения остатков не должен равняться 0 !");
			КонецЕсли;        
			
		КонецЦикла;
		
	КонецЦикла;
	
	Попытка
		Если СтрДлина(ОшибкаКоличества) <> 19 Тогда
			ДокументОтчетОРозничныхПродажах.Комментарий = ОшибкаКоличества;
			ДокументОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
			Сообщить(Строка(ДокументОтчетОРозничныхПродажах) + " записан с ОШИБКОЙ!" );
		Иначе	
			ДокументОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);    // Татьяна пока просила отключить проведение при успехе
			Сообщить(Строка(ДокументОтчетОРозничныхПродажах) + " записан !" );
		КонецЕсли;	
		Если РежимАвтоЗагрузки Тогда
			ЗаписатьВРегистрИДПисьма(ПисьмоИД, СкладПользователь);
		КонецЕсли;	
	Исключение
		//ДокументОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	// КЧАН		
КонецПроцедуры

Функция ПолучитьНоменклатуру(ШК)
	
	Запрос = новый Запрос("ВЫБРАТЬ
	|	Штрихкоды.Владелец КАК Товар
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод В (&Штрихкод)");
	
	// НЧАН
	МШК = ЛК_РаботаСДокументами.ПолучитьМассивШКбезНулей(ШК);
	Запрос.УстановитьПараметр("Штрихкод",МШК);        
	// КЧАН
	Результат = запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() тогда
		Возврат Результат.Товар;
	Иначе
		Сообщить("Номенклатуры со штрих-кодом " + ШК + " не найдено!");
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции



Функция ПолучитьЕденицуИзмерения(ШК, Владелец)
	
	Запрос = новый Запрос("ВЫБРАТЬ
	                      |	МАКСИМУМ(Штрихкоды.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	                      |	Штрихкоды.Штрихкод
	                      |ИЗ
	                      |	РегистрСведений.Штрихкоды КАК Штрихкоды
	                      |ГДЕ
	                      |	Штрихкоды.Штрихкод В(&Штрихкод)
	                      |	И Штрихкоды.ЕдиницаИзмерения.Владелец = &Владелец
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Штрихкоды.Штрихкод");
						  
						  
	
	// НЧАН
	МШК = ЛК_РаботаСДокументами.ПолучитьМассивШКбезНулей(ШК);
	Запрос.УстановитьПараметр("Штрихкод",МШК);  
	Запрос.УстановитьПараметр("Владелец",Владелец);        

	// КЧАН
	
	Результат = запрос.Выполнить().Выбрать();
	
	
	Если Результат.Следующий() тогда
		Возврат Результат.ЕдиницаИзмерения;
	Иначе
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции



Функция ИзСтрокиСРазделителями(Знач Значение, Знач Разделитель = ",") Экспорт
	
	Если СтрДлина(Разделитель) = 0 тогда
		ВызватьИсключение("Ошибка при вызове функции (ИзСтрокиСРазделителями): Несоответствие типов (параметр номер '2')");
	КонецЕсли;
	
	ДлинаРазделителя = СтрДлина(Разделитель);
	Результат = Новый Массив();
	
	
	Пока СтрДлина(Значение) > 0 Цикл
		ПозицияРазделителя = Найти(Значение, Разделитель);
		Если ПозицияРазделителя = 0 тогда
			Результат.Добавить(СокрЛП(Значение));
			Прервать;
		Иначе
			КоличествоКавычек = СтрЧислоВхождений(Лев(Значение, ПозицияРазделителя - 1), """");
			Пока (Цел(КоличествоКавычек / 2) * 2) <> КоличествоКавычек Цикл
				НоваяПозицияРазделителя = Найти(Сред(Значение, ПозицияРазделителя + ДлинаРазделителя), Разделитель);
				Если НоваяПозицияРазделителя > 0 тогда
					ПозицияРазделителя = ПозицияРазделителя + НоваяПозицияРазделителя - 1 + ДлинаРазделителя;
				Иначе
					Результат.Добавить(СокрЛП(Значение));
					Перейти ~ВыходИзПроцедуры;
				КонецЕсли;
				КоличествоКавычек = СтрЧислоВхождений(Лев(Значение, ПозицияРазделителя - 1), """");
			КонецЦикла;
			Результат.Добавить(СокрЛП(Лев(Значение, ПозицияРазделителя - 1)));
			Значение = Сред(Значение, ПозицияРазделителя + ДлинаРазделителя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	~ВыходИзПроцедуры:
	
	
	Возврат Результат;
КонецФункции

функция ПолучитьРозничныеСклады()
	
	Запрос = новый Запрос("ВЫБРАТЬ
	|	Склады.Ссылка как Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Розничный)
	|	И НЕ Склады.ПометкаУдаления");	
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	
КонецФункции

// НЧАН

Функция ПолучитьНоменклатуруПоКоду (Номер)
	
	Запрос = новый Запрос("ВЫБРАТЬ
	                      |	Номенклатура.Ссылка
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Номенклатура
	                      |ГДЕ
	                      |	Номенклатура.Код = &Код");
	
	Запрос.УстановитьПараметр("Код", Номер);        
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() тогда
		Возврат Результат.Ссылка;
	Иначе
		Сообщить("Номенклатуры со кодом " + Номер + " не найдено!");
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция СписаниеПоХарактеристикамПоСоответсвию(КоличествокСписанию, Склад, НоменклатураП, ХарактеристикаП, ДатаСреза)
	
		СХК = Новый ТаблицаЗначений;
		СХК.Колонки.Добавить("хка");
		СХК.Колонки.Добавить("кол");
		
		Если НЕ НоменклатураП.ТоварМРЦ Тогда
			
			нстр = СХК.Добавить();
			нстр.хка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			нстр.кол = КоличествокСписанию;
			
		Иначе 	
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			
			"ВЫБРАТЬ
			|	МИНИМУМ(ЕСТЬNULL(ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры.ДатаЗаписи, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 1))) КАК ХарактеристикаНоменклатурыДатаЗаписи,
			|	ТоварыВРозницеОстатки.Номенклатура,
			|	ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	СУММА(ТоварыВРозницеОстатки.КоличествоОстаток) КАК Остаток,
			|	ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры.Наименование
			|ИЗ
			|	РегистрНакопления.ТоварыВРознице.Остатки(
			|			&МоментВремени,
			|			Склад = &Склад
			|				И Номенклатура = &Номенклатура) КАК ТоварыВРозницеОстатки
			|ГДЕ
			|	ТоварыВРозницеОстатки.КоличествоОстаток > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ТоварыВРозницеОстатки.Номенклатура,
			|	ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры
			|
			|УПОРЯДОЧИТЬ ПО
			|	ХарактеристикаНоменклатурыДатаЗаписи";
			
			Запрос.УстановитьПараметр("МоментВремени", ДатаСреза);
			Запрос.УстановитьПараметр("Номенклатура", НоменклатураП);
			Запрос.УстановитьПараметр("Склад", Склад);
			
			ВХ = Запрос.Выполнить().Выгрузить();
			
			ХарактеристикаПреобр = СтрЗаменить(ХарактеристикаП, ",", ".");
			
			Х = ВХ.Найти(ХарактеристикаПреобр, "ХарактеристикаНоменклатурыНаименование");
			
			// (19.06.17) Добавим условие, при котором, в случае неудачи, будет подобрана характеристика на
		    // остатках с минимальным значением:
			
			Если Х = Неопределено И ВХ.Количество() > 0 Тогда
				ВХ.Колонки.Добавить("ПрЦена");
				Для Каждого Стр Из ВХ Цикл
					Если Стр.ХарактеристикаНоменклатурыНаименование <> Null Тогда
						Попытка
							Стр.ПрЦена = Число(СтрЗаменить(Стр.ХарактеристикаНоменклатурыНаименование, ",", ".")); 
						Исключение
						 	Стр.ПрЦена = 0;
						КонецПопытки;
					Иначе 
					  	Стр.ПрЦена = 0;
					КонецЕсли;
				КонецЦикла;
				ВХ.Сортировать("ПрЦена Убыв");
				
				Если ВХ[0].ПрЦена <> 0 Тогда
					Х = ВХ[0];
				ИначеЕсли ВХ.Количество() > 1 Тогда	 
					Х = ?(ВХ[1].ПрЦена <> 0, ВХ[1].ПрЦена, Неопределено);
				Иначе
					Х = Неопределено;
				КонецЕсли;	
			КонецЕсли;
	
			//
			
			НужноСписать = КоличествокСписанию;
			
			Если Х <> Неопределено Тогда
				
				Списываем = Мин(НужноСписать, Х.Остаток);
				Нстр = СХК.Добавить();
				Нстр.хка = Х.ХарактеристикаНоменклатуры;
				Нстр.кол = Списываем;
				НужноСписать = НужноСписать - Списываем;
				
			КонецЕсли;
			
			Если НужноСписать > 0 Тогда 
				Нстр = СХК.Добавить();
				Нстр.хка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Нстр.кол =  НужноСписать;
			КонецЕсли;		
			
		КонецЕсли;
		
		Возврат СХК
		
КонецФункции

Функция СписаниеПоХарактеристикам(КоличествокСписанию, Склад, НоменклатураП, ДатаСреза)
	
		СХК = Новый ТаблицаЗначений;
		СХК.Колонки.Добавить("хка");
		СХК.Колонки.Добавить("кол");
		
		Если НЕ НоменклатураП.ТоварМРЦ Тогда
			
			нстр = СХК.Добавить();
			нстр.хка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			нстр.кол = КоличествокСписанию;
			
		Иначе 	
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			
			"ВЫБРАТЬ
			|	МИНИМУМ(ЕСТЬNULL(ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры.ДатаЗаписи, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 1))) КАК ХарактеристикаНоменклатурыДатаЗаписи,
			|	ТоварыВРозницеОстатки.Номенклатура,
			|	ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	СУММА(ТоварыВРозницеОстатки.КоличествоОстаток) КАК Остаток
			|ИЗ
			|	РегистрНакопления.ТоварыВРознице.Остатки(
			|			&МоментВремени,
			|			Склад = &Склад
			|				И Номенклатура = &Номенклатура) КАК ТоварыВРозницеОстатки
			|ГДЕ
			|	ТоварыВРозницеОстатки.КоличествоОстаток > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ТоварыВРозницеОстатки.Номенклатура,
			|	ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры
			|
			|УПОРЯДОЧИТЬ ПО
			|	ХарактеристикаНоменклатурыДатаЗаписи";
			
			Запрос.УстановитьПараметр("МоментВремени", ДатаСреза);
			Запрос.УстановитьПараметр("Номенклатура", НоменклатураП);
			Запрос.УстановитьПараметр("Склад", Склад);
			
			В = Запрос.Выполнить().Выбрать();
			
			НужноСписать = КоличествокСписанию;
			
			Пока В.Следующий() И НужноСписать > 0 Цикл
				
				Списываем = Мин(НужноСписать, В.Остаток);
				
				Нстр = СХК.Добавить();
				Нстр.хка = В.ХарактеристикаНоменклатуры;
				Нстр.кол =  Списываем;
				//Движение.Стоимость = ?(В.КоличествоОстаток = Списываем, ВыборкаДетальныеЗаписи.СтоимостьОстаток, ВыборкаДетальныеЗаписи.СтоимостьОстаток / ВыборкаДетальныеЗаписи.КоличествоОстаток * Списываем ); 
				
				НужноСписать = НужноСписать - Списываем;	
				
			КонецЦикла; 
			
			Если НужноСписать > 0 Тогда
				
				НайденнаяСтрока = СХК.Найти(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), "хка");
				Если НайденнаяСтрока <> Неопределено Тогда
					Для Каждого Стр Из СХК Цикл
						Если Стр.хка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() Тогда
							Стр.кол = Стр.кол + НужноСписать;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе	
					Нстр = СХК.Добавить();
					Нстр.хка = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					Нстр.кол =  НужноСписать;
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		Возврат СХК
		
КонецФункции

Функция НеВыгруженоРанее(Склад, ИД)
	
	З = Новый Запрос;
	З.Текст = "ВЫБРАТЬ
	|	ЛК_DownloadedMailsID.ID_Письма
	|ИЗ
	|	РегистрСведений.ЛК_DownloadedMailsID КАК ЛК_DownloadedMailsID
	|ГДЕ
	|	ЛК_DownloadedMailsID.Отдел ПОДОБНО &Отдел
	|	И ЛК_DownloadedMailsID.ID_Письма ПОДОБНО &ID_Письма";
	
	З.УстановитьПараметр("Отдел", СокрЛП(Склад));
	З.УстановитьПараметр("ID_Письма", ИД);
	
	В = З.Выполнить().Выбрать();
	
	Если В.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуТоваров(Файл) 
	
	ЗагружаемыйФайл = Новый ЧтениеТекста(Файл, КодировкаТекста.ANSI);
	Строка = ЗагружаемыйФайл.ПрочитатьСтроку();
	ТаблицаТоваров = Новый ТаблицаЗначений;
	
	Для Счетчик = 1 По 6 Цикл
		ТаблицаТоваров.Колонки.Добавить("Колонка"+Счетчик, Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	//СоответствиеШапки = ИзСтрокиСРазделителями(Строка,";");  // 2я колонка должна быть = Количество
	//Если СоответствиеШапки.Количество() <> 6 Тогда           // 3я = Цена
	//	ОШ = Строка;                                         // 5я = ШК
	//	Возврат ОШ;
	//КонецЕсли;
	
	Пока Строка <> Неопределено Цикл
		
		Если Строка = "" Тогда 
			Строка = ЗагружаемыйФайл.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;
		
		МассивКолонок = ИзСтрокиСРазделителями(Строка,";");     
		
		Если МассивКолонок.Количество() < 5 Тогда // ТаблицаТоваров.Колонки.Количество() Тогда  13.06.17
			ТаблицаТоваров = Новый Массив;
			ТаблицаТоваров.Добавить(Строка(Файл));
			Возврат ТаблицаТоваров; 
		КонецЕсли;
		
		Если ТаблицаТоваров.Количество() = 1 Тогда 
			
			ОШЧ = Ложь;
			Попытка
				ЧСШК = Число(МассивКолонок[4]);
			Исключение
				ОШЧ = Истина;
			КонецПопытки;
			ДСШК = СтрДлина(МассивКолонок[4]);
			
			Если ДСШК < 8 ИЛИ ОШЧ = Истина Тогда	
				ОШ = "Ошибка";                                        
				Возврат ОШ;
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		Для НомерКолонки = 1 по МассивКолонок.Количество() Цикл 
			//заполняем строку значениями
			ТекущееЗначение = МассивКолонок[НомерКолонки-1];
			ИмяКолонки = ТаблицаТоваров.Колонки[НомерКолонки-1].Имя; 			
			НоваяСтрока[ИмяКолонки] = ТекущееЗначение;			
		КонецЦикла;   		
		
		Строка = ЗагружаемыйФайл.ПрочитатьСтроку();
		
	КонецЦикла;
	
	Возврат ТаблицаТоваров
	
КонецФункции

Процедура ЗаписатьВРегистрИДПисьма(ПисьмоИД, СкладПользователь)
	
	НЗ = РегистрыСведений.ЛК_DownloadedMailsID.СоздатьМенеджерЗаписи();
	НЗ.Период = ТекущаяДата();
	НЗ.Отдел = СокрЛП(СкладПользователь);
	НЗ.ID_Письма = ПисьмоИД;
	Попытка
		НЗ.Записать();	
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузкаОтчетаОПродажеВручную (Склад) Экспорт
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	ДиалогОткрытияФайла.Фильтр = "Текстовый документ(*.txt)|*.txt";
	ДиалогОткрытияФайла.Выбрать();
	ВыбранныйФайл = ДиалогОткрытияФайла.ВыбранныеФайлы;
	
	Если ВыбранныйФайл.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Д = Лев(Прав(ВыбранныйФайл[0], 14), 10);
		ДатаОтправления = Дата(Прав(Д,4)+Сред(Д,4,2)+Лев(Д,2));
	Исключение		
		ВвестиДату(ДатаОтправления, "Дата не определена, введите вручную:");
	КонецПопытки;
	
	ТаблицаТоваров = ПолучитьТаблицуТоваров(ВыбранныйФайл[0]);
	Если ТипЗнч(ТаблицаТоваров) <> Тип("ТаблицаЗначений") Тогда           // 13.06.2017
		Сообщить("Ошибка преобразования данных! : " + ТаблицаТоваров[0]);
		Возврат;
	КонецЕсли;	
	
	СоздатьОтчетОРозничныхпродажах(ТаблицаТоваров,Склад,ДатаОтправления,,, Ложь);
	
КонецПроцедуры

Процедура УдалитьЗаписиРегистра () Экспорт
	
	Рег = РегистрыСведений.ЛК_DownloadedMailsID;
	Выборка = Рег.Выбрать(, ТекущаяДата() - 30*24*60*60);
	Пока Выборка.Следующий() Цикл
		Выборка.ПолучитьМенеджерЗаписи().Удалить();
	КонецЦикла;
	
КонецПроцедуры	

// КЧАН

//++ ГК
Функция ПолучитьКассуККМ(Касса, Организация)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КассыККМ.Ссылка
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.Наименование ПОДОБНО &Наименование
		|	И КассыККМ.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("Наименование", Касса.Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	//создадим кассу, если ее не нашли
	
	КассаНовая = Справочники.КассыККМ.СоздатьЭлемент();
	КассаНовая.Наименование = Касса.Наименование;
	КассаНовая.Владелец = Организация;
	КассаНовая.Записать();
	
	Возврат КассаНовая.Ссылка;
	
	
КонецФункции