&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Если Параметры.Свойство("ТТН") Тогда
		ТТН = Параметры.ТТН;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокАлкогольнойПродукцииЕГАИС, "ТТН", ТТН);
	
	Если Параметры.Свойство("АдресВХранилище") И ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
		
		СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
		
		Если СтруктураДанных.Свойство("АлкогольнаяПродукция") Тогда
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокАлкогольнойПродукцииЕГАИС, "Ссылка", СтруктураДанных.АлкогольнаяПродукция, Истина, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
		
		Если Параметры.Свойство("РежимВыбора") Тогда
			РежимВыбора = Параметры.РежимВыбора;
			Элементы.ФормаВыбратьНоменклатуру.Видимость         = РежимВыбора;
			Элементы.ФормаВыбратьНоменклатуру.КнопкаПоУмолчанию = РежимВыбора;
			Элементы.ФормаУстановитьСоответствие.Видимость      = НЕ РежимВыбора;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользоватьОтборПоСвойствам Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтборНоменклатуры", 0.1, Истина);
	КонецЕсли;
	
	Если ПустаяСтрока(ВариантОтбораСоответствийАлкогольнаяПродукция) Тогда
		ВариантОтбораСоответствийАлкогольнаяПродукция = "Все";
	КонецЕсли;
	
	Если ПустаяСтрока(ВариантОтбораСоответствийНоменклатура) Тогда
		ВариантОтбораСоответствийНоменклатура = "Все";
	КонецЕсли;
	
	ПриИзмененииВидимостиОтбора("АлкогольнаяПродукция", ВидимостьОтбораАлкогольнаяПродукция);
	ПриИзмененииВидимостиОтбора("Номенклатура", ВидимостьОтбораНоменклатура);
	ВариантОтбораСоответствийАлкогольнаяПродукцияПриИзменении(Неопределено);
	ВариантОтбораСоответствийНоменклатураПриИзменении(Неопределено);
	УстановитьОтборПоАлкогольнойПродукции();
	ИспользоватьОтборПоСвойствамПриИзменении(Неопределено);
	
КонецПроцедуры

// Процедура - обработчик внешнего события, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если Не ВводДоступен() Тогда
			Возврат;
		КонецЕсли;
		
		ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);
	#Иначе
		ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);
	#КонецЕсли
	
КонецПроцедуры // ВнешнееСобытие()

&НаКлиенте
Процедура СтрокаПоискаНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	ПрименитьПоиск("Номенклатура", СписокНоменклатуры, СтрокаПоискаНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНоменклатураПриИзменении(Элемент)
	
	ПрименитьПоиск("Номенклатура", СписокНоменклатуры, СтрокаПоискаНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	СпискиВыбораКлиент.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАлкогольнаяПродукцияОчистка(Элемент, СтандартнаяОбработка)
	
	ПрименитьПоиск("АлкогольнаяПродукция", СписокАлкогольнойПродукцииЕГАИС, СтрокаПоискаАлкогольнаяПродукция);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАлкогольнаяПродукцияПриИзменении(Элемент)
	
	ПрименитьПоиск("АлкогольнаяПродукция", СписокАлкогольнойПродукцииЕГАИС, СтрокаПоискаАлкогольнаяПродукция);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАлкогольнаяПродукцияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	СпискиВыбораКлиент.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОбъемуПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтборНоменклатуры", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоКрепостиПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтборНоменклатуры", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВидуПродукцииПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтборНоменклатуры", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПроизводителюПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтборНоменклатуры", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИмпортеруПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтборНоменклатуры", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТТНПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокАлкогольнойПродукцииЕГАИС, "ТТН", ТТН);
	
	Элементы.СписокАлкогольнойПродукцииЕГАИС.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтбораСоответствийАлкогольнаяПродукцияПриИзменении(Элемент)
	
	УстановитьОтборПоСоответствиюАлкогольнаяПродукция();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтбораСоответствийНоменклатураПриИзменении(Элемент)
	
	УстановитьОтборПоСоответствиюНоменклатура();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоАлкогольнойПродукцииПриИзменении(Элемент)
	
	УстановитьОтборПоАлкогольнойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоСвойствамПриИзменении(Элемент)
	
	УстановитьВидимостьСвойствОтбора();
	
	УстановитьОтборНоменклатурыПоСвойствамАлкогольнойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАлкогольнойПродукцииЕГАИСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.Номенклатура.Пустая() Тогда
		Элементы.СписокНоменклатуры.ТекущаяСтрока = Элемент.ТекущиеДанные.Номенклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если РежимВыбора Тогда
		ВыбратьНоменклатуруКлиент();
	ИначеЕсли Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущиеДанные.ЕстьСоответствие Тогда
		СвязаннаяАлкогольнаяПродукция = ПолучитьСписокСвязаннойАлкогольнойПродукции(Элемент.ТекущиеДанные.Ссылка);
		
		Если СвязаннаяАлкогольнаяПродукция.Количество() > 0 Тогда
			Элементы.СписокАлкогольнойПродукцииЕГАИС.ВыделенныеСтроки.Очистить();
			Элементы.СписокАлкогольнойПродукцииЕГАИС.ТекущаяСтрока = СвязаннаяАлкогольнаяПродукция[0];
			
			Для каждого АлкогольнаяПродукция Из СвязаннаяАлкогольнаяПродукция Цикл
				Элементы.СписокАлкогольнойПродукцииЕГАИС.ВыделенныеСтроки.Добавить(АлкогольнаяПродукция);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАлкогольнойПродукцииЕГАИСПриАктивизацииСтроки(Элемент)
	
	Если ИспользоватьОтборПоСвойствам Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтборНоменклатуры", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоответствие(Команда)
	
	Если Элементы.СписокАлкогольнойПродукцииЕГАИС.ТекущиеДанные = Неопределено 
		ИЛИ Элементы.СписокНоменклатуры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если НЕ ПроверитьВозможностьУстановкиСоответствия(Элементы.СписокАлкогольнойПродукцииЕГАИС.ТекущиеДанные.Ссылка, Элементы.СписокНоменклатуры.ТекущиеДанные.Ссылка, ТекстОшибки) Тогда
		Предупреждение(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АлкогольнаяПродукция", Элементы.СписокАлкогольнойПродукцииЕГАИС.ТекущиеДанные.Ссылка);
	ПараметрыФормы.Вставить("Номенклатура", Элементы.СписокНоменклатуры.ТекущиеДанные.Ссылка);
	ПараметрыФормы.Вставить("ИдентификаторУпаковки", Элементы.СписокАлкогольнойПродукцииЕГАИС.ТекущиеДанные.ИдентификаторУпаковки);
	
	РезультатЗакрытия = ОткрытьФормуМодально("Обработка.СопоставлениеНоменклатурыЕГАИС.Форма.ФормаСопоставленияНоменклатуры", ПараметрыФормы, ЭтаФорма);
	УстановитьСоответствие_Завершение(РезультатЗакрытия, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоответствие_Завершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Истина Тогда
		Элементы.СписокАлкогольнойПродукцииЕГАИС.Обновить();
		Элементы.СписокНоменклатуры.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСоответствие(Команда)
	
	МассивЭлементов = Новый Массив;
	
	Для каждого АлкогольнаяПродукция Из Элементы.СписокАлкогольнойПродукцииЕГАИС.ВыделенныеСтроки Цикл
	
		ДанныеСтроки = Элементы.СписокАлкогольнойПродукцииЕГАИС.ДанныеСтроки(АлкогольнаяПродукция);
		Если НЕ ДанныеСтроки.Номенклатура.Пустая() Тогда
			МассивЭлементов.Добавить(АлкогольнаяПродукция);
		КонецЕсли;
	
	КонецЦикла;
	
	Если МассивЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АдресМассиваАлкогольнойПродукции = ПоместитьВоВременноеХранилище(МассивЭлементов);
	
	РезультатВопроса = Вопрос(НСтр("ru = 'Отменить связь выбранной алкогольной продукции?'"), РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК);
	ОтменитьСоответствие_Завершение(РезультатВопроса, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСоответствие_Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтменитьСоответствие", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	
	МассивЭлементов = Элементы.СписокАлкогольнойПродукцииЕГАИС.ВыделенныеСтроки;
	Если МассивЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если НЕ ПроверитьВозможностьСозданияНоменклатуры(МассивЭлементов, ТекстОшибки) Тогда
		Предупреждение(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	РезультатВопроса = Вопрос(НСтр("ru = 'Создать номенклатуру по выделенным строкам алкогольной продукции?'"), РежимДиалогаВопрос.ОКОтмена);
	СоздатьНоменклатуру_Подтверждение(РезультатВопроса, МассивЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру_Подтверждение(РезультатВопроса, ВыделенныеСтроки) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	АдресСпискаАлкогольнойПродукции = ПоместитьВоВременноеХранилище(ВыделенныеСтроки);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСпискаАлкогольнойПродукции", АдресСпискаАлкогольнойПродукции);
	
	ПараметрыСозданияНоменклатуры = ОткрытьФормуМодально("Обработка.СопоставлениеНоменклатурыЕГАИС.Форма.ФормаСозданияНоменклатуры", ПараметрыФормы, ЭтаФорма);
	
	СоздатьНоменклатуру_Завершение(ПараметрыСозданияНоменклатуры, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру_Завершение(ПараметрыСозданияНоменклатуры, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ПараметрыСозданияНоменклатуры) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	АдресПараметровСозданияНоменклатуры = ПоместитьВоВременноеХранилище(ПараметрыСозданияНоменклатуры);
	
	Подключаемый_СоздатьНоменклатуру();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНоменклатуру(Команда)
	
	ВыбратьНоменклатуруКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОтборНоменклатура(Команда)
	
	ВидимостьОтбораНоменклатура = НЕ ВидимостьОтбораНоменклатура;
	
	ПриИзмененииВидимостиОтбора("Номенклатура", ВидимостьОтбораНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьОтборАлкогольнаяПродукция(Команда)
	
	ВидимостьОтбораАлкогольнаяПродукция = НЕ ВидимостьОтбораАлкогольнаяПродукция;
	
	ПриИзмененииВидимостиОтбора("АлкогольнаяПродукция", ВидимостьОтбораАлкогольнаяПродукция);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьНоменклатуру()
	
	СозданнаяНоменклатура = СоздатьНоменклатуруНаСервере(АдресПараметровСозданияНоменклатуры);
	
	Элементы.СписокАлкогольнойПродукцииЕГАИС.Обновить();
	Элементы.СписокНоменклатуры.Обновить();
	
	Элементы.СписокНоменклатуры.ВыделенныеСтроки.Очистить();
	
	Номенклатура = Неопределено; 
	
	Для каждого Номенклатура Из СозданнаяНоменклатура Цикл
		Элементы.СписокНоменклатуры.ВыделенныеСтроки.Добавить(Номенклатура);
	КонецЦикла;
	
	Если РежимВыбора И ЗначениеЗаполнено(Номенклатура) Тогда
		Закрыть(Номенклатура);
		Возврат;
	КонецЕсли;
	
	Если СозданнаяНоменклатура.Количество() = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Создан элемент номенклатуры %Наименование%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", СокрЛП(СозданнаяНоменклатура[0]));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СозданнаяНоменклатура[0]);
	Иначе
		ТекстСообщения = НСтр("ru = 'Создано %Количество% элементов номенклатуры.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", СозданнаяНоменклатура.Количество());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтменитьСоответствие()
	
	ОтменитьСоответствиеНаСервере(ПолучитьИзВременногоХранилища(АдресМассиваАлкогольнойПродукции));
	
	Элементы.СписокАлкогольнойПродукцииЕГАИС.Обновить();
	Элементы.СписокНоменклатуры.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьНоменклатуруНаСервере(АдресПараметровСозданияНоменклатуры)
	
	СозданнаяНоменклатура = Новый Массив;
	
	ПараметрыСозданияНоменклатуры = ПолучитьИзВременногоХранилища(АдресПараметровСозданияНоменклатуры);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого АлкогольнаяПродукция Из ПараметрыСозданияНоменклатуры.МассивЭлементов Цикл
		
		РеквизитыАлкогольнойПродукции = ПолучитьРеквизитыАлкогольнойПродукции(АлкогольнаяПродукция);
		
		НоменклатураОбъект  = Справочники.Номенклатура.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НоменклатураОбъект, РеквизитыАлкогольнойПродукции);
		
		НоменклатураОбъект.Родитель                = ПараметрыСозданияНоменклатуры.Родитель;
		НоменклатураОбъект.АлкогольнаяПродукция    = Истина;
		НоменклатураОбъект.ВидНоменклатуры         = ПараметрыСозданияНоменклатуры.ВидНоменклатуры;
		НоменклатураОбъект.БазоваяЕдиницаИзмерения = ПараметрыСозданияНоменклатуры.ЕдиницаИзмерения;
		НоменклатураОбъект.СтавкаНДС               = ПараметрыСозданияНоменклатуры.СтавкаНДС;
		НоменклатураОбъект.НоменклатурнаяГруппа    = ПараметрыСозданияНоменклатуры.НоменклатурнаяГруппа;
		НоменклатураОбъект.СтранаПроисхождения     = ПараметрыСозданияНоменклатуры.СтранаПроисхождения;
		Если ЗначениеЗаполнено(НоменклатураОбъект.СтранаПроисхождения) Тогда
			НоменклатураОбъект.ИмпортнаяАлкогольнаяПродукция = 
				Не НоменклатураОбъект.СтранаПроисхождения = Справочники.КлассификаторСтранМира.Россия;
		КонецЕсли;
		
		ТекстОшибкиПроизводитель = "";
		ТекстОшибкиИмпортер = "";
		
		Если ЗначениеЗаполнено(РеквизитыАлкогольнойПродукции.ПроизводительЕГАИС) Тогда
			Если ЗначениеЗаполнено(РеквизитыАлкогольнойПродукции.Производитель) Тогда
				Если ЗначениеЗаполнено(РеквизитыАлкогольнойПродукции.ИмпортерЕГАИС) Тогда
					НоменклатураОбъект.Производитель = РеквизитыАлкогольнойПродукции.Производитель;
				Иначе
					НоменклатураОбъект.ПроизводительИмпортерАлкогольнойПродукции = РеквизитыАлкогольнойПродукции.Производитель;
				КонецЕсли;
			Иначе
				ТекстОшибкиПроизводитель = НСтр("ru = 'При создании номенклатуры %Наименование% не удалось определить сопоставленного производителя.'");
				ТекстОшибкиПроизводитель = СтрЗаменить(ТекстОшибкиПроизводитель, "%Наименование%", СокрЛП(НоменклатураОбъект.Наименование));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыАлкогольнойПродукции.ИмпортерЕГАИС) Тогда
			Если ЗначениеЗаполнено(РеквизитыАлкогольнойПродукции.Импортер) Тогда
				НоменклатураОбъект.ПроизводительИмпортерАлкогольнойПродукции = РеквизитыАлкогольнойПродукции.Импортер;
				НоменклатураОбъект.ИмпортнаяАлкогольнаяПродукция = Истина;
			Иначе
				ТекстОшибкиИмпортер = НСтр("ru = 'При создании номенклатуры %Наименование% не удалось определить сопоставленного импортера.'");
				ТекстОшибкиИмпортер = СтрЗаменить(ТекстОшибкиИмпортер, "%Наименование%", СокрЛП(НоменклатураОбъект.Наименование));
			КонецЕсли;
		КонецЕсли;
		
		НоменклатураОбъект.Записать();
		
		Если НЕ ПустаяСтрока(ТекстОшибкиПроизводитель) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиПроизводитель, НоменклатураОбъект.Ссылка);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибкиИмпортер) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИмпортер, НоменклатураОбъект.Ссылка);
		КонецЕсли;
		
		НоменклатураСсылка = НоменклатураОбъект.Ссылка;
		
		ЕдиницаИзмеренияОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		ЕдиницаИзмеренияОбъект.Владелец = НоменклатураСсылка;
		ЕдиницаИзмеренияОбъект.ЕдиницаПоКлассификатору = НоменклатураСсылка.БазоваяЕдиницаИзмерения;
		ЕдиницаИзмеренияОбъект.Наименование = ЕдиницаИзмеренияОбъект.ЕдиницаПоКлассификатору.Наименование;
		ЕдиницаИзмеренияОбъект.Коэффициент = 1;
		ЕдиницаИзмеренияОбъект.Записать();
		
		ЕдиницаИзмеренияСсылка = ЕдиницаИзмеренияОбъект.Ссылка;
		
		НоменклатураОбъект.ЕдиницаХраненияОстатков = ЕдиницаИзмеренияСсылка;
		НоменклатураОбъект.ЕдиницаДляОтчетов       = ЕдиницаИзмеренияСсылка;
		НоменклатураОбъект.Записать();
		
		Запись = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
		Запись.АлкогольнаяПродукция = АлкогольнаяПродукция;
		Запись.Номенклатура = НоменклатураСсылка;
		Запись.Записать();
		
		СозданнаяНоменклатура.Добавить(НоменклатураОбъект.Ссылка);
		
	КонецЦикла;
	
	Возврат СозданнаяНоменклатура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыАлкогольнойПродукции(АлкогольнаяПродукция)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", АлкогольнаяПродукция);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Наименование,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.НаименованиеПолное,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Объем / 10 КАК ОбъемДАЛ,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Крепость,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции КАК ВидАлкогольнойПродукцииЕГАИС,
	|	ЕСТЬNULL(СоответствиеПоПроизводителю.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Производитель,
	|	ЕСТЬNULL(СоответствиеПоИмпортеру.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Импортер,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Производитель КАК ПроизводительЕГАИС,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Импортер КАК ИмпортерЕГАИС
	|ИЗ
	|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОрганизацийЕГАИС КАК СоответствиеПоПроизводителю
	|		ПО КлассификаторАлкогольнойПродукцииЕГАИС.Производитель = СоответствиеПоПроизводителю.ОрганизацияЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОрганизацийЕГАИС КАК СоответствиеПоИмпортеру
	|		ПО КлассификаторАлкогольнойПродукцииЕГАИС.Импортер = СоответствиеПоИмпортеру.ОрганизацияЕГАИС
	|ГДЕ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить()[0];
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьСоответствиеНаСервере(МассивАлкогольнойПродукции)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивАлкогольнойПродукции", МассивАлкогольнойПродукции);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция,
	|	СоответствиеНоменклатурыЕГАИС.ИдентификаторУпаковки
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция В(&МассивАлкогольнойПродукции)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Прочитать();
		
		Если Запись.Выбран() Тогда
			Запись.Удалить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьУстановкиСоответствия(АлкогольнаяПродукция, Номенклатура, ТекстОшибки)
	
	Если Номенклатура.ЭтоГруппа Тогда
		ТекстОшибки = НСтр("ru = 'Связка алкогольной продукции с группой номенклатуры невозможна.'");
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АлкогольнаяПродукция", АлкогольнаяПродукция);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = &АлкогольнаяПродукция
	|	И СоответствиеНоменклатурыЕГАИС.Номенклатура <> &Номенклатура";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = НСтр("ru = 'Выбранная алкогольная продукция уже имеет связку.'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВозможностьСозданияНоменклатуры(МассивАлкогольнойПродукции, ТекстОшибки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивАлкогольнойПродукции", МассивАлкогольнойПродукции);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|ИЗ
	|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|ГДЕ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка В(&МассивАлкогольнойПродукции)
	|	И СоответствиеНоменклатурыЕГАИС.Номенклатура ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = НСтр("ru = 'Выбранная алкогольная продукция уже имеет связку.'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокСвязаннойАлкогольнойПродукции(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АлкогольнаяПродукция");
	
КонецФункции

&НаКлиенте
Процедура ПоискПоПодстрокеНаКлиенте(ОбластьПоиска, Список, СтрокаПоиска)
	
	Использование = ЗначениеЗаполнено(СтрокаПоиска);
	
	ГруппаОтбора = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы,
		"ПоискПоПодстроке",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"Наименование",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"Код",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"НаименованиеПолное",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
		
	Если ОбластьПоиска = "Номенклатура" Тогда
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
			ГруппаОтбора,
			"Артикул",
			СтрокаПоиска,
			Использование, ВидСравненияКомпоновкиДанных.Содержит);
	Иначе
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
			ГруппаОтбора,
			"ПроизводительНаименование",
			СтрокаПоиска,
			Использование, ВидСравненияКомпоновкиДанных.Содержит);
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
			ГруппаОтбора,
			"ИмпортерНаименование",
			СтрокаПоиска,
			Использование, ВидСравненияКомпоновкиДанных.Содержит);
	КонецЕсли;
			
	СпискиВыбораКлиент.ОбновитьСписокВыбора(Элементы["СтрокаПоиска" + ОбластьПоиска].СписокВыбора, СтрокаПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПоиск(ОбластьПоиска, Список, СтрокаПоиска)
	
	ПоискПоПодстрокеНаКлиенте(ОбластьПоиска, Список, СтрокаПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьОтборНоменклатуры()
	
	УстановитьОтборНоменклатурыПоСвойствамАлкогольнойПродукции();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.СписокАлкогольнойПродукцииЕГАИС;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНоменклатурыПоСвойствамАлкогольнойПродукции()
	
	ТекущиеДанные = Элементы.СписокАлкогольнойПродукцииЕГАИС.ТекущиеДанные;
	
	ИспользованиеОтборов = ИспользоватьОтборПоСвойствам И ТекущиеДанные <> Неопределено;
	
	ГруппаОтбора = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		СписокНоменклатуры.Отбор.Элементы,
		"ОтборПоСвойствамАлкогольнойПродукции",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"ОбъемДАЛ",
		?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Объем / 10),
		ИспользованиеОтборов И ОтборПоОбъему И ТекущиеДанные.Объем <> 0, ВидСравненияКомпоновкиДанных.Равно);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"Крепость",
		?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Крепость),
		ИспользованиеОтборов И ОтборПоКрепости И ТекущиеДанные.Крепость <> 0, ВидСравненияКомпоновкиДанных.Равно);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"ВидАлкогольнойПродукцииЕГАИС",
		?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ВидПродукции),
		ИспользованиеОтборов И ОтборПоВидуПродукции И ЗначениеЗаполнено(ТекущиеДанные.ВидПродукции), ВидСравненияКомпоновкиДанных.Равно);
		
	Производитель = ?(ТекущиеДанные = Неопределено, Неопределено, ПолучитьКонтрагентаПоСоответствию(ТекущиеДанные.Производитель));
	
	//ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
	//	ГруппаОтбора,
	//	"Производитель",
	//	?(ТекущиеДанные = Неопределено, Неопределено, Производитель),
	//	ИспользованиеОтборов И ОтборПоПроизводителю И ЗначениеЗаполнено(Производитель) И ЗначениеЗаполнено(ТекущиеДанные.Производитель), ВидСравненияКомпоновкиДанных.Равно);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"ПроизводительИмпортерАлкогольнойПродукции",
		?(ТекущиеДанные = Неопределено, Неопределено, Производитель),
		ИспользованиеОтборов И ОтборПоПроизводителю И ЗначениеЗаполнено(Производитель) И НЕ ЗначениеЗаполнено(ТекущиеДанные.Импортер), ВидСравненияКомпоновкиДанных.Равно);
		
	Импортер = ?(ТекущиеДанные = Неопределено, Неопределено, ПолучитьКонтрагентаПоСоответствию(ТекущиеДанные.Импортер));
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"ПроизводительИмпортерАлкогольнойПродукции",
		?(ТекущиеДанные = Неопределено, Неопределено, Импортер),
		ИспользованиеОтборов И ОтборПоИмпортеру И ЗначениеЗаполнено(Импортер), ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСвойствОтбора()
	
	Элементы.ГруппаВидыОтборовПоСвойтвамЕГАИС.Видимость = ИспользоватьОтборПоСвойствам;
	Элементы.ДекорацияОтборПоСвойствам.Видимость = ИспользоватьОтборПоСвойствам;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСоответствиюАлкогольнаяПродукция()
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
			СписокАлкогольнойПродукцииЕГАИС,
			"Номенклатура",
			ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"),
			НЕ ВариантОтбораСоответствийАлкогольнаяПродукция = "Все", 
			?(ВариантОтбораСоответствийАлкогольнаяПродукция = "Связанные", ВидСравненияКомпоновкиДанных.НеРавно, ВидСравненияКомпоновкиДанных.Равно));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСоответствиюНоменклатура()
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
			СписокНоменклатуры,
			"ЕстьСоответствие",
			Истина,
			НЕ ВариантОтбораСоответствийНоменклатура = "Все", 
			?(ВариантОтбораСоответствийНоменклатура = "Связанные", ВидСравненияКомпоновкиДанных.Равно, ВидСравненияКомпоновкиДанных.НеРавно));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоАлкогольнойПродукции()
	
	Элементы.СписокНоменклатурыАлкогольнаяПродукция.Видимость = НЕ ОтборПоАлкогольнойПродукции;
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
			СписокНоменклатуры,
			"АлкогольнаяПродукция",
			Истина,
			ОтборПоАлкогольнойПродукции, 
			ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентаПоСоответствию(ОрганизацияЕГАИС)
	
	Если ОрганизацияЕГАИС.Пустая() Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеОрганизацийЕГАИС.Контрагент
	|ИЗ
	|	РегистрСведений.СоответствиеОрганизацийЕГАИС КАК СоответствиеОрганизацийЕГАИС
	|ГДЕ
	|	СоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Контрагент;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьНоменклатуруКлиент()
	
	ТекущиеДанныеНоменклатура = Элементы.СписокНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанныеНоменклатура = Неопределено Тогда
		Закрыть()
	Иначе
		Закрыть(ТекущиеДанныеНоменклатура.Ссылка)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидимостиОтбора(ВидОтбора, ВидимостьОтбора)
	
	Элементы["ГруппаОтбор" + ВидОтбора].Видимость = ВидимостьОтбора;
	Элементы["ПоказатьСкрытьОтбор" + ВидОтбора].Пометка = ВидимостьОтбора;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура вызывается при выборе пункта "Поиск по штрихкоду" меню
// кнопки Сервис командной панели табличного поля "Товары", открывает
// форму для ввода штрихкода и обрабатывает событие ввода штрихкода.
//
&НаКлиенте
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

 // Процедура осуществляет обработку полученного штрихкода
// от сканера штрихкода
//
// Параметры:
//  Штрихкод   - <Строка>
//             - Текстовое представление штрихкода.
//
&НаКлиенте
Процедура СШКОбработатьШтрихкод(Штрихкод) Экспорт
	
	ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Штрихкод, ЭтаФорма);
	
КонецПроцедуры

// Функция осуществляет обработку считывания штрих-кода номенклатуры
//
// Параметры:
//  Номенклатура   				- <СправочникСсылка.Номенклатура>
//                 				- Номенклатура, штрих-код которой был отсканирован.
//
//  ХарактеристикаНоменклатуры  - <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 				- Характеристика номенклатуры отсканированной номенклатуры.
//
//  Единица        				- <СправочникСсылка.ЕдиницыИзмерения>
//                 				- Единица измерения отсканированной номенклатуры.
//
//  Количество     				- <Число>
//                 				- Количество отсканированной номенклатуры.
//
//  СШК            				- <Строка>
//                 				- Идентификатор сканера штрих-кода, с которым связано данное
//                   			событие.
//
// Возвращаемое значение:
//  <Булево>      				- Данная ситуация обработана.
//
&НаКлиенте
Функция СШКНоменклатура(Номенклатура, ХарактеристикаНоменклатуры, Единица, Количество) Экспорт

	Элементы.СписокНоменклатуры.ТекущаяСтрока = Номенклатура;
	
	ТекущийЭлемент = Элементы.СписокНоменклатуры;
	
	Возврат Истина;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрих-кода серийного номера
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
&НаСервере
Функция СШКСерийныйНомер(СерийныйНомерСчитанный) Экспорт

	Элементы.СписокНоменклатуры.ТекущаяСтрока           = СерийныйНомерСчитанный.Владелец;
	Элементы.СписокНоменклатуры.ИерархическийПросмотр   = Истина;
	Элементы.СписокНоменклатуры.ПросмотрГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	Элементы.СписокНоменклатуры.НастройкаОтбора.Ссылка.Доступность    = Истина;
	Элементы.СписокНоменклатуры.НастройкаОтбора.ЭтоГруппа.Доступность = Истина;

	ТекущийЭлемент = Элементы.СписокНоменклатуры;
	
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрих-кода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
&НаКлиенте
Функция СШКИнформационнаяКарта(Карта) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
&НаКлиенте
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Предупреждение("Номенклатуры с указанным штрихкодом не существует!");
	Возврат Истина;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрих-кода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрих-кода, с которым связано данное
//              событие.
//
&НаКлиенте
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК) Экспорт

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	#Иначе
		Текст = ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	#КонецЕсли
	
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
&НаКлиенте
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = ПредопределенноеЗначение("Перечисление.ВидыТорговогоОборудования.СканерШтрихКода") Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

&НаСервере
Процедура ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма)

	глСерверТО = Обработки.ТОСервер.Создать();
	глСерверТО.ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК)
	
	глСерверТО = Обработки.ТОСервер.Создать();
	Возврат глСерверТО.ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	
КонецФункции
