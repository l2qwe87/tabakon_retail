&НаКлиенте
Перем флЭтоВнешнийЭквайринг;

&НаКлиенте
Перем МассивКассККМКлиент_оригинал;

&НаКлиенте
Перем трейдИн, флУдаленПодарок, НоменклатураИзКуара;

&НаСервереБезКонтекста
Функция ПолучитьТрейдИн()
	результ = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	замены.Номенклатура КАК Владелец,
	               |	замены.Комплектующая КАК Номенклатура,
	               |	замены.ХарактеристикаКомплектующей КАК Характеристика,
	               |	замены.ДоляСтоимости КАК Доплата
	               |ИЗ
	               |	РегистрСведений.КомплектующиеНоменклатуры КАК замены
	               |ИТОГИ ПО
	               |	Владелец";
	
	прототипСтруктуры = "Владелец,Номенклатура,Характеристика,Доплата";
	
	резЗамены = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока резЗамены.Следующий() Цикл
		
		резКомплект = резЗамены.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		мВарианты = Новый Массив();
		Пока резКомплект.Следующий() Цикл
			
			стр = Новый Структура(прототипСтруктуры);
			ЗаполнитьЗначенияСвойств(стр,резКомплект);
			мВарианты.Добавить(стр);
		КонецЦикла;
		
		результ.Вставить(резЗамены.Владелец , мВарианты);
	Конеццикла;
	
	
	возврат результ;
КонецФункции

&НаКлиенте
&После("ОбновитьФормуНаКлиенте")
Процедура ТБКОбновитьФормуНаКлиенте()	
	Если Объект.Товары.Количество()=0 тогда
		УправляемыеСкидки.Очистить();
		ПокупкаСотрудника						=	Ложь;
		Элементы.ПокупкаСотрудника.Доступность	=	Истина;
		Элементы.Товары.Доступность				=	Истина; 	
		элементы.ТелефонКлиента.Доступность		=	Истина;
		Подарок									=	Неопределено;
		КодыПодарочныхСертификатов				=	"";
		ОбработанныеАкцииПоПодаркам.Очистить();
		ПогашенныеКодыСертификатов.Очистить();  
		КодыНовойУценки.Очистить();
		флУдаленПодарок	=	Неопределено;
		Объект.ТБКМаркиДляБК.Очистить();
		
		Если ДоступнаПроверкаОрганизаций тогда
			СброситьКонстантуЗапущеноФоновоаяПроверкаМарок();
		КонецЕсли;

		Если ИспользоватьВторойМонитор тогда
			ОкнаПриложения = ПолучитьОкна();          
			Для каждого ОкноПриложения Из ОкнаПриложения Цикл  
				Если Найти(ОкноПриложения.Заголовок, "Табакон") тогда
					НайденнаяФорма = ОкноПриложения.Содержимое[0];
					НайденнаяФорма.Закрыть(); 					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;  
		
		НачалоЧека = Неопределено;    
		
		Элементы.ГруппаВторыеЭлектронки.Видимость	=	Ложь;
		Объект.ТБКВторыеЭлектронки.Очистить();  
	Иначе
		Если не ЗначениеЗаполнено(НачалоЧека) тогда
			НачалоЧека = ТекущаяДата();
		КонецЕсли;
		
	КонецЕсли;
	
	//Вик 2024-03-12
	Если ДоступнаПроверкаОрганизаций тогда
		ПроверитьСтатусыМарок();
	КонецЕсли;
	//
	
	//Марк 2024-0314
	Если КоличествоБалловСписано > 0 Тогда
		Элементы.КартинкаПО22РучныеСкидки.Доступность = Ложь;
	иначе
		Элементы.КартинкаПО22РучныеСкидки.Доступность = Истина;
	КонецЕсли;
	//КоенцМарк

КонецПроцедуры 

&НаСервереБезКонтекста
Процедура СброситьКонстантуЗапущеноФоновоаяПроверкаМарок()
	ОбщегоНазначения.УстановитьЗначениеТБККонстанты("ЗапущеноФоновоаяПроверкаМарок", Ложь);
КонецПроцедуры                                                                                 

&НаСервереБезКонтекста
Функция ПолноеНаименованиеНоменклатуры(Номенклатура)
	Возврат Номенклатура.НаименованиеПолное;
КонецФункции

&НаКлиенте
Процедура ПроверитьСтатусыМарок() ЭКСПОРТ
	Отбор	=	Новый Структура("ПроверкаМаркиСтатус",0);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") тогда
		Если Объект.АкцизныеМарки.Количество()>0 и Объект.АкцизныеМарки.НайтиСтроки(Отбор).количество() >0  тогда 
		
			Если ЗначениеЗаполнено(адресРезультата_ПроверитьСтатусыМарок) Тогда
				ПодключитьОбработчикОжидания("ПроверитьСтатусыМарок", 1, ИСТИНА);
				возврат;
			КонецЕсли;
			
			
			Если ПроверитьСтатусыМарок_Сервер() Тогда
				ПодключитьОбработчикОжидания("ПроверитьСтатусыМарок_Результат", 1, ЛОЖЬ);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьСтатусыМарок_Сервер()
	УжеЗапущено	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ЗапущеноФоновоаяПроверкаМарок");
		
	Если УжеЗапущено = Истина тогда
		Возврат ложь;
	КонецЕсли;   	
		
	ОбщегоНазначения.УстановитьЗначениеТБККонстанты("ЗапущеноФоновоаяПроверкаМарок", Истина);

	марки = ПолучитьМаркиНаПроверку();
	
	Если марки.Количество() = 0 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
			
	адресРезультата_ПроверитьСтатусыМарок = ПоместитьВоВременноеХранилище(неопределено);
			
	ТекстФоновойПроцедуры = "
	| Попытка
	|	рез = Обработки.ТБК_Маркировка.ПолучитьВладельцаМарок(марки);
	|	ПоместитьВоВременноеХранилище(рез, адресРезультата);
	|	Рег = РегистрыСведений.ТБК_Константы.СоздатьНаборЗаписей();
	|	Рег.Отбор.ИмяКонстанты.Установить(""ЗапущеноФоновоаяПроверкаМарок"");
	|	НоваяСтр	=	Рег.Добавить();
	|	НоваяСтр.ЗначениеКонстанты	=	Ложь;
	|	НоваяСтр.ИмяКонстанты		=	""ЗапущеноФоновоаяПроверкаМарок"";
	|	рег.Записать(); 
	| Исключение  
	|	Рег = РегистрыСведений.ТБК_Константы.СоздатьНаборЗаписей();
	|	Рег.Отбор.ИмяКонстанты.Установить(""ЗапущеноФоновоаяПроверкаМарок"");
	|	НоваяСтр	=	Рег.Добавить();
	|	НоваяСтр.ЗначениеКонстанты	=	Ложь;
	|	НоваяСтр.ИмяКонстанты		=	""ЗапущеноФоновоаяПроверкаМарок"";
	|	рег.Записать();
	|   информацияОбОшибке = ""Ошибка"" ;
	| 	ПоместитьВоВременноеХранилище(информацияОбОшибке, адресРезультата);
	| КонецПопытки;
	|";
	
	ФоновоеВыполнение.ЗапуститьФоновоеВыполнение(ТекстФоновойПроцедуры,Новый Структура("марки,адресРезультата", марки, адресРезультата_ПроверитьСтатусыМарок));

	Возврат ИСТИНА;
КонецФункции

&НаКлиенте
Функция ПолучитьАкцизныеМаркиПоКлючСвязи(ключСвязи)
	мРезультат = новый Массив;
	
	Для Каждого стр из Объект.АкцизныеМарки Цикл
		Если стр.КлючСвязи = ключСвязи Тогда
			мРезультат.Добавить(стр);
		КонецЕсли;
	КонецЦикла;
	
	Возврат мРезультат;
КонецФункции

&НаСервере
Функция ПолучитьТоварыПоКлючСвязи(ключСвязи)
	Для Каждого стр из Объект.Товары Цикл
		Если стр.КлючСвязи = ключСвязи Тогда
			Возврат стр;
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервере
Функция ПолучитьМаркиНаПроверку()
	марки = новый Массив;
	Для Каждого стр из Объект.АкцизныеМарки Цикл
		
		стрТовары = ПолучитьТоварыПоКлючСвязи(стр.КлючСвязи);
		Если (стрТовары <> неопределено)И ЗначениеЗаполнено(стрТовары.Номенклатура) И ОбщегоНазначения.ЭтоМаркированнаяНоменклатура(стрТовары.Номенклатура) тогда
			Если стр.ПроверкаМаркиСтатус = 0 Тогда
				марки.Добавить(стр.КодАкцизнойМарки);
				стрТовары.ПроверкаМаркиСтатус = 0;
			КонецЕсли;
		Иначе
			стр.ПроверкаМаркиСтатус = -1;
			Если (стрТовары <> неопределено) Тогда
				стрТовары.ПроверкаМаркиСтатус = -1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат марки;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИзВременногоХранилища_Сервер(адрес)
	Попытка
		Возврат ПолучитьИзВременногоХранилища(адрес);
	Исключение
		Возврат неопределено;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ПроверитьСтатусыМарок_Результат() ЭКСПОРТ
	статусыМарок = ПолучитьИзВременногоХранилища_Сервер(адресРезультата_ПроверитьСтатусыМарок);
	Если статусыМарок = неопределено или статусыМарок = "" или Строка(статусыМарок) = "Ошибка" Тогда	
		Возврат;
	КонецЕсли;
	
	//Доп Вик 2022_01_31
	Попытка
		ОтборСтр	=	Новый Структура();
		ОтборСтр.Вставить("ПроверкаМаркиСтатус",0);
		Строки =  Объект.АкцизныеМарки.НайтиСтроки(ОтборСтр);
		Если Строки.количество() <> статусыМарок.Количество() тогда  
			ПроверитьСтатусыМарок_Сервер();
			Возврат
		КонецЕсли;
	Исключение
	КонецПопытки;
	//КонецВик	
	
	ОтключитьОбработчикОжидания("ПроверитьСтатусыМарок_Результат");
	
	инн = СокрЛП(ПолучитьЗначениеРеквизита(ЭтаФорма.Объект.Организация, "ИНН"));
	                          
	Если ЛОЖЬ Тогда статусыМарок = Новый Соответствие; КонецЕсли;
	
	Для Каждого стр из Объект.АкцизныеМарки Цикл
		Если стр.ПроверкаМаркиСтатус = 0 Тогда
			//Если длина = 25 тогда необходимо отбросить 4 последних символа про МРЦ)
			//это спроведливо только для пачки
			
			статус = статусыМарок.Получить(стр.КодАкцизнойМарки);
			Если статус = Неопределено тогда
				мкрка = Сред(стр.КодАкцизнойМарки,1, СтрДлина(стр.КодАкцизнойМарки)-4);
				статус = статусыМарок.Получить(мкрка);
			КонецЕсли;
			
			Если статус = неопределено Тогда
				стр.ПроверкаМаркиСтатус = 2;
			Иначе
				Если статус.ИНН = Неопределено тогда
					стр.ПроверкаМаркиСтатус = 2;
				иначе
					Если статус.ИНН = инн Тогда 
						стр.ПроверкаМаркиСтатус = 1;	
					Иначе
						стр.ПроверкаМаркиСтатус = 2;
						стр.ПроверкаМаркиИНН 	= статус.ИНН;
					КонецЕсли;
					
					//Вик 2024-03-11 Доп проверка статуса марки
					Если статус.Статус <> "INTRODUCED" тогда
						стр.ПроверкаМаркиСтатус = 2;
						стр.ПроверкаМаркиИНН 	= "Статус: " + статус.Статус;
					КонецЕсли;
				КонецЕсли;
				//
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Обновить данные в общей таблице
	Для Каждого стр из Объект.Товары Цикл
		Если стр.ПроверкаМаркиСтатус < 0 Тогда
			ПРОДОЛЖИТЬ;
		КонецЕсли;
		Если не стр.МаркируемаяПродукция тогда Продолжить; КонецЕсли;		
		
		строкиМарки = ПолучитьАкцизныеМаркиПоКлючСвязи(стр.КлючСвязи);
		агрегатИНН = "";
		
		
		флЕстьХорошие		=	Ложь;
		флЕстьПлохие		=	Ложь;	

		Для Каждого стрМарка из строкиМарки Цикл
			
			Если ЗначениеЗаполнено(стрМарка.ПроверкаМаркиИНН) тогда //значит неверный инн или статус
				Если агрегатИНН = "" тогда
					агрегатИНН =  стрМарка.КодАкцизнойМарки + " : " + стрМарка.ПроверкаМаркиИНН; 		
				иначе
					агрегатИНН = агрегатИНН + Символы.ПС + стрМарка.КодАкцизнойМарки + " : " + стрМарка.ПроверкаМаркиИНН; 
				КонецЕсли;
				
				флЕстьПлохие	=	Истина;
			иначе
				флЕстьХорошие	=	Истина;
			КонецЕсли;
				
		КонецЦикла;
		
		стр.ПроверкаМаркиИНН = СокрЛП(агрегатИНН);
		
		Если флЕстьПлохие и флЕстьХорошие тогда
			стр.ПроверкаМаркиСтатус	=	3;
		ИначеЕсли флЕстьПлохие тогда
			стр.ПроверкаМаркиСтатус	=	2;
		иначеЕсли флЕстьХорошие тогда
			стр.ПроверкаМаркиСтатус	=	1;
		иначе
			стр.ПроверкаМаркиСтатус	=	0;
		КонецЕсли; 
		
	КонецЦикла;
	
	адресРезультата_ПроверитьСтатусыМарок	=	"";
КонецПроцедуры

&НаКлиенте
Процедура ТБКТоварыВыборПосле(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Строка=Элементы.Товары.ТекущиеДанные;
	ПроверкаМаркиИНН = Строка.ПроверкаМаркиИНН;	
	Если ЗначениеЗаполнено(ПроверкаМаркиИНН) Тогда
		//ПоказатьОповещениеПользователя(,,ПроверкаМаркиИНН);
		тд = Новый ТекстовыйДокумент;
		тд.УстановитьТекст(ПроверкаМаркиИНН);
		тд.Показать("Проверка "+Строка.Номенклатура);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОбработкаЗавершения_ПроверкаНапредметПустогоНаименованияТовара(РезультатОткрытияФормы, стр)ЭКСПОРТ
	Объект.Товары.Удалить(стр);	
	ОбновитьФормуНаКлиенте();
КонецФУнкции

&НаКлиенте
Функция ОбработкаЗавершенияВыбораЗамены(РезультатОткрытияФормы, стр)ЭКСПОРТ
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		стр.Номенклатура = РезультатОткрытияФормы.Номенклатура;
		стр.Характеристика = РезультатОткрытияФормы.Характеристика;
		стр.Цена = РезультатОткрытияФормы.Доплата;
		
		
		стр.Цена = ?(стр.Цена=1,
					0.01,
					стр.Цена
		);
		
		
		стр.Сумма = стр.Цена;
		стр.СуммаВсего = стр.Сумма;
		
	Иначе
		Объект.Товары.Удалить(стр);
	КонецЕсли;
	
	
	ОбновитьФормуНаКлиенте();
КонецФУнкции

&НаСервере
&Вместо("ПроверитьЗаполнениеТабличнойЧасти")
Процедура ТБКПроверитьЗаполнениеТабличнойЧасти(Отказ, ПараметрыИнформации, ОплатаТолькоНаличными)
	// Вставить содержимое метода.
	
	//КолМарокДолжноБыть	=	0;
	//// Вставить содержимое метода.	
	//Для Каждого стр из Объект.Товары Цикл
	//	Если СтрДлина(стр.Штрихкод) <= 13 Тогда
	//		стр.МаркируемаяПродукция = ложь;
	//	КонецЕсли;  
	//	
	//	КодСимвола	=	КодСимвола(Сред(стр.Номенклатура.Наименование,6,1));

	//	Если Лев(стр.Номенклатура.Наименование,5) = "Набор" и (КодСимвола >= 48 И КодСимвола <= 57) тогда  
	//		Попытка
	//			КолМарокВНаборе	=	Число(Сред(Стр.Номенклатура.Наименование,6,1));
	//		Исключение
	//			КолМарокВНаборе	=	3;
	//		КонецПопытки;
	//		
	//		КолМарокДолжноБыть = КолМарокДолжноБыть + КолМарокВНаборе;	
	//	КонецЕсли;
	//КонецЦикла;  
	//
	//Если КолМарокДолжноБыть >0 тогда
	//	Если КолМарокДолжноБыть <> Объект.АкцизныеМарки.Количество() тогда
	//		Отказ = Истина;
	//		Сообщить("Отсканируйте qr-код с наборов айкос!");	
	//	КонецЕсли;		
	//КонецЕсли;

	
	//Вик 2021_07_01
	Для Каждого Стр из Объект.Товары Цикл
		
		//Марк 2025-03-24
		Если ТекущаяДата() > '20250401' и ЗначениеЗаполнено(Стр.Характеристика) и Стр.Цена < 135 тогда
			Отказ = Истина;
			Сообщить("Для продажи сигарет < 135р. воспользуйтесь БК");
		//КонецЕсли		
		ИначеЕсли ТекущаяДата() > '20240401' и ЗначениеЗаполнено(Стр.Характеристика) и Стр.Цена < 129 тогда
			Отказ = Истина;
			Сообщить("Для продажи сигарет < 129р. воспользуйтесь БК");

		ИначеЕсли ТекущаяДата() > '20230601' и ЗначениеЗаполнено(Стр.Характеристика) и Стр.Цена < 119 тогда
			Отказ = Истина;
			Сообщить("Для продажи сигарет < 119р. воспользуйтесь БК");
		КонецЕсли;
		
		//25_04_2022 группы - БК стики гло и БК стики Айкос. Часто ставят цены блоков - поэтому контроль. по просьбе Волковой
		ПК			=	ПолучитьПолныйКод(Стр.Номенклатура);	
		Если Стр.Цена >300 и ( Найти(ПК,"Ю2-00015938") или Найти(ПК,"Ю2-00015939") ) тогда 
			Отказ = Истина;
			Сообщить("Нельзя пробивать стики дороже 300р. Возможно вы пробиваете блок");
		КонецЕсли;
	КонецЦикла;;
	//КонецВик
	
	ПродолжитьВызов(Отказ, ПараметрыИнформации, ОплатаТолькоНаличными);
КонецПроцедуры

&НаКлиенте
Процедура ТБКПрименитьВаучерПосле(Команда)
	// Вставить содержимое обработчика.
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивУправляемыеСкидкиДокумента", УправляемыеСкидки.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуУправляемыхСкидок", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаВаучер",
		ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
КонецПроцедуры

&НаКлиенте
Процедура ТБКПриОткрытииПосле(Отказ)
	//Вставить содержимое обработчика   	
	МассивКассККМКлиент_оригинал = новый Массив;
	
	Для Каждого эл из МассивКассККМКлиент цикл 
		ЭтаФорма.Элементы.ТекущаяКассаККМ.СписокВыбора.Добавить(эл);
		МассивКассККМКлиент_оригинал.Добавить(эл);
	КонецЦикла;
	
	Для Каждого стр из Этаформа.ТаблицаКассККМОрганизаций Цикл
		нстр = Этаформа.ТаблицаКассККМОрганизаций_оригинал.Добавить();
		ЗаполнитьЗначенияСвойств(нстр,стр);
	КонецЦикла;
	
	Этаформа.ТекущаяКассаККМ = МассивКассККМКлиент_оригинал[0];
	
	ТБКТекущаяКассаККМПриИзмененииПосле(неопределено);
	
	Версия = ПолучитьВерсиюКонфигурации();
	Элементы.ВерсияР.Заголовок = Версия;
	
	УстановитьЦветКнопкиОтключитьЭквайринг();
	Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный тогда
		флЭтоВнешнийЭквайринг = Истина;
	иначе
		флЭтоВнешнийЭквайринг = Ложь;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработатьИнтернетЗаказы_Клиент",900);//Вик 2021_08_13
	ПодключитьОбработчикОжидания("ПроверкаНовыхСообщений",60);
	трейдИн = ПолучитьТрейдИн();
	ПодключитьОбработчикОжидания("ЗаполнитьТрейдИН",3600); 
	ПодключитьОбработчикОжидания("ПроверитьОфлайнРежим",600); 
	
	Парам	=	Новый Структура;
	Парам.Вставить("КассаККМ",ТекущаяКассаККМ);
	ОткрытьФорму("ОбщаяФорма.ТБКФормаВыбораТипаПродавцаИВремениРаботы",Парам,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

	Элементы.ГруппаПрочихОпераций.Видимость					=	Ложь;
	Элементы.КомандаПО04ОтложитьЧекАкселераторы.Доступность	=	Ложь;
	Элементы.ГруппаТБК.Видимость							=	Ложь;
	
	ДокументСписанияПослеИнвента	=	НайтиДокументСписанияПослеИнвента();
	Если не ЗначениеЗаполнено(ДокументСписанияПослеИнвента) тогда
		Элементы.ТоварыПродано.Видимость = Ложь;	
	КонецЕсли;
	
	//Если СокрЛП(Строка(Объект.Магазин)) = "Москва Форт" тогда
	//	ПроверятьНоменклатуруПриДобавлении	=	1;	
	//КонецЕсли;
	//
	//Если СокрЛП(Строка(Объект.Магазин)) = "МоскваФорт2СКМ" тогда
	//	ПроверятьНоменклатуруПриДобавлении	=	2;	
	//КонецЕсли;
	
	//Марк 2024-04-25
	Элементы.ТекПродавец.Заголовок = Строка(ТекФизЛицо());   
	
	Если ТекущаяДата() > '20240901' тогда
		ИспользоватьВторыеЭлектронки	=	Истина;
	КонецЕсли; 
	
	Если ТекущаяДата() > '20240921' тогда
		ИспользоватьВторыеЭлектронки					=	Ложь;
		Элементы.ИспользоватьВторыеЭлектронки.Видимость	=	Ложь;
	КонецЕсли;
	
	//Вик 2024-10-07
	ОбновитьНадписиКоличествоЧеков(); 

	КоличествоКасс	=	ОбщегоНазначенияВызовСервера.ПолучитьКоличествоКассККМ();
	Если КоличествоКасс > 1 тогда
		ПодключитьОбработчикОжидания("ОбновитьНадписиКоличествоЧеков",30);
	КонецЕсли;
	
	//Марк 2025-02-18
	ОбновитьСтатусИнтернета();
	ПодключитьОбработчикОжидания("ОбновитьСтатусИнтернета",5);
	ПодключитьОбработчикОжидания("ОбновитьСтатусИнтернета_Результат",1);
	ОбновитьСтатусИнтернета_Результат();
	//КонецМарк
	
	//Вик 2025-06-30
	АвтоматическиПодгружатьНоменклатуру = Истина;
	// 
	
	СброситьКассуПоУмолчаниюДляРабочегоМестаСервер(ТекущаяКассаККМ);//Вик 2025-10-08

КонецПроцедуры

#Область PingInternet

&НаКлиенте
процедура ОбновитьСтатусИнтернета()
	
	PingInternet(); 
	
КонецПроцедуры

&НаКлиенте
процедура ОбновитьСтатусИнтернета_Результат()

	РезультатОтветаИнтернет = ПолучитьИзВременногоХранилища(СтатусИнтернета);

	Если РезультатОтветаИнтернет <> Неопределено Тогда 
		
		Если РезультатОтветаИнтернет Тогда

			Элементы.СтатусИнтернетаЕсть.Видимость 				= Истина;
			Элементы.СтатусИнтернетаНЕТ.Видимость  				= Ложь;
			Элементы.ТекстОшибкиПодключенияИнтернета.Видимость 	= Ложь;
			
		Иначе
						
			Элементы.СтатусИнтернетаЕсть.Видимость 				= Ложь;
			Элементы.СтатусИнтернетаНЕТ.Видимость  				= Истина;
			Элементы.ТекстОшибкиПодключенияИнтернета.Видимость 	= Истина;
			
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(СтатусИнтернета);
		
	КонецЕсли;

КонецПроцедуры
	
&НаСервере
Процедура PingInternet() 
	
	СтатусИнтернета = ПоместитьВоВременноеХранилище(неопределено);
	ТекстФоновойПроцедуры = "
	| ответ = ФоновоеВыполнение.PingInternet();
	| ПоместитьВоВременноеХранилище(ответ,СтатусИнтернета);";
	
	ФоновоеВыполнение.ЗапуститьФоновоеВыполнение(ТекстФоновойПроцедуры,Новый Структура("СтатусИнтернета", СтатусИнтернета));
		
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ТекФизЛицо()

	Возврат Пользователи.ТекущийПользователь().ФизическоеЛицо;	

КонецФункции // ()


&НаСервереБезКонтекста
Функция НайтиДокументСписанияПослеИнвента()
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	СписаниеТоваров.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.СписаниеТоваров КАК СписаниеТоваров
	      	 	             |ГДЕ
	      	 	             |	СписаниеТоваров.Дата >= &Дата
	      	 	             |	И СписаниеТоваров.Комментарий ПОДОБНО &Комментарий
	      	 	             |	И СписаниеТоваров.Проведен
	      	 	             |
	      	 	             |ОБЪЕДИНИТЬ ВСЕ
	      	 	             |
	      	 	             |ВЫБРАТЬ
	      	 	             |	РеализацияТоваров.Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.РеализацияТоваров КАК РеализацияТоваров
	      	 	             |ГДЕ
	      	 	             |	РеализацияТоваров.Дата >= &Дата
	      	 	             |	И РеализацияТоваров.Комментарий ПОДОБНО &Комментарий
	      	 	             |	И РеализацияТоваров.Проведен");	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата() - 7*24*60*60);
	Запрос.УстановитьПараметр("Комментарий", "%Инвентаризация товаров на складе%");  
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() тогда
		Возврат Рез.Ссылка;		
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция  ПолучитьВерсиюКонфигурации()
	Возврат ОбщегоНазначения.ПолучитьВерсиюРасширения();	
КонецФункции

&НаКлиенте
Процедура ТБКТекущаяКассаККМПриИзмененииПосле(Элемент) 

	//КОММЕНТ ВИК 2024-07-02. Не понятно зачем это сделано! Не будет работать проверка марок если включить

	//// Вставить содержимое обработчика.
	//МассивКассККМКлиент.Очистить();
	//МассивКассККМКлиент.Добавить(Этаформа.ТекущаяКассаККМ);	
	//
	////ТБКТекущаяКассаККМПриИзмененииПослеСервер();
	//
	//Этаформа.ТаблицаКассККМОрганизаций.Очистить();
	//
	//Для каждого стр из Этаформа.ТаблицаКассККМОрганизаций_оригинал Цикл
	//	Если стр.КассаККМ = Этаформа.ТекущаяКассаККМ Тогда
	//		нстр = Этаформа.ТаблицаКассККМОрганизаций.Добавить();
	//		ЗаполнитьЗначенияСвойств(нстр,стр);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
	//	Объект.Организация = ТаблицаКассККМОрганизаций[0].Организация;
	//КонецЕсли;
	
	
	//Вик 2025-10-08     
	Если ЗначениеЗаполнено(ТекущаяКассаККМ) Тогда 
		УстановитьКассуПоУмолчаниюДляРабочегоМестаСервер(ТекущаяКассаККМ);    
	КонецЕсли;
	//КонецВик

	
	Парам	=	Новый Структура;
	Парам.Вставить("КассаККМ",ТекущаяКассаККМ);
	ОткрытьФорму("ОбщаяФорма.ТБКФормаВыбораТипаПродавцаИВремениРаботы",Парам,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры    

//Вик 2025-10-08     
&НаСервереБезКонтекста
Процедура УстановитьКассуПоУмолчаниюДляРабочегоМестаСервер(ТекущаяКассаККМ)

	РабМесто	=	ТекущаяКассаККМ.РабочееМесто;		
	Если ЗначениеЗаполнено(РабМесто) Тогда
		Об = РабМесто.ПолучитьОбъект();   
		Об.КассаККМ_ПоУмолчанию	=	ТекущаяКассаККМ;  
		Об.Записать();
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СброситьКассуПоУмолчаниюДляРабочегоМестаСервер(ТекущаяКассаККМ) 
	РабМесто	=	ТекущаяКассаККМ.РабочееМесто;		
	Если ЗначениеЗаполнено(РабМесто) и ЗначениеЗаполнено(РабМесто.КассаККМ_ПоУмолчанию) Тогда
		Об = РабМесто.ПолучитьОбъект();   
		Об.КассаККМ_ПоУмолчанию	=	Неопределено;  
		Об.Записать();
	КонецЕсли;	
КонецПроцедуры
//КонецВик


&НаСервере
Функция ТБКТекущаяКассаККМПриИзмененииПослеСервер()
	
	
		
КонецФункции

//Ложь - номенклатура плохая, Истина - Номенклатура хорошая
&НаСервереБезКонтекста
Функция ПроверкаНапредметПустогоНаименованияТовара(Номенклатура)
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		возврат Ложь;
	КонецЕсли;
	
	наименование = ПолучитьЗначениеРеквизита(Номенклатура,"Наименование");
	Если наименование = неопределено Тогда
		возврат Ложь;
	КонецЕсли;
	
	наименование = СтрЗаменить(наименование,"<","");
	наименование = СтрЗаменить(наименование,">","");
	наименование = СтрЗаменить(наименование,"	","");
	наименование = СтрЗаменить(наименование,"  ","");
	наименование = СтрЗаменить(наименование,"","");
	
	
	Возврат ЗначениеЗаполнено(наименование);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка,ИмяРеквизита)
	Попытка
		Возврат Ссылка[ИмяРеквизита];
	Исключение
		Возврат неопределено;
	Конецпопытки
КонецФункции

&НаСервере
&После("ЗаполнитьОстаткиСервер")
Процедура ТБКЗаполнитьОстаткиСервер()
	
	//Заполняем колонку продано
	Если ЗначениеЗаполнено(ДокументСписанияПослеИнвента) тогда
		ЗапасыСервер.ЗаполнитьОстаткиНоменклатурыБезУчетаХарактеристик(Объект, "Товары", ДокументСписанияПослеИнвента.Дата);
	иначе
		ЗапасыСервер.ЗаполнитьОстаткиНоменклатурыБезУчетаХарактеристик(Объект, "Товары");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТБКDebug_ОбработатьМаркуПосле(Команда) 
	нужМарка	=	ЭтаФорма.Debug_Марка;  
	
	//Если Лев(нужМарка,3) = "010" и СтрДлина(нужМарка) = 31 тогда
	//	нужМарка	=	Сред(нужМарка,3);	
	//КонецЕсли;
	
	ДанныеШтрихкода = Новый Структура;
	ДанныеШтрихкода.Вставить("Количество", 1);
	ДанныеШтрихкода.Вставить("Штрихкод"  , нужМарка);
	
	ОбработатьКодМаркировки(ДанныеШтрихкода);

КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя")
Процедура ВместоВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя()
	Если не ОбщегоНазначенияВызовСервера.ПроверитьВозможностьРедактирования_Общая()  тогда
		
		ЗаголовокИнформации = НСтр("ru = 'Запрет возврата без основания'");
		ТекстСообщения = НСтр("ru = 'Для возврата за прошлый период в форме меню нажмите Чеки -> Ввести на основании -> Возврат от покупателя -> кнопка Нал или Карта '");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);

		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
&Вместо("ОткрытьЗакрытьМенюПрочихОпераций")
Процедура ТБК_ОткрытьЗакрытьМенюПрочихОпераций()
	
	Элементы.ГруппаПрочихОпераций.Видимость = НЕ Элементы.ГруппаПрочихОпераций.Видимость;
	Элементы.ГруппаТБК.Видимость			= НЕ Элементы.ГруппаТБК.Видимость;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереключитьЭквайрингСервер(РабочееМесто)
	
	ТЗНужныйТерминал = ПолучитьРаботающийТерминал(РабочееМесто);	
	
	Если ТЗНужныйТерминал <> Неопределено тогда
		Для каждого Строка из ТЗНужныйТерминал цикл
			Об = Строка.Ссылка.ПолучитьОбъект();
			Об.ИспользоватьБезПодключенияОборудования = не Об.ИспользоватьБезПодключенияОборудования;
			Об.ПодключаемоеОборудование 			  = Строка.ПодключаемоеОборудование;
			Об.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРаботающийТерминал(РабочееМесто) 	
	СписокУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам( , , РабочееМесто);
	
	Для каждого Строка из СписокУстройств цикл
		Если Строка.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал тогда
			
			Запрос	=	Новый запрос("ВЫБРАТЬ
			      	 	             |	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
			      	 	             |ГДЕ
			      	 	             |	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
			      	 	             |	И (ЭквайринговыеТерминалы.ПодключаемоеОборудование = &ПодключаемоеОборудование
			      	 	             |			ИЛИ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)");
			Запрос.УстановитьПараметр("ПодключаемоеОборудование",Строка.Ссылка);
			
			Рез = Запрос.Выполнить().Выгрузить();
			Если Рез.Количество() > 0 тогда
				ТЗВозврата = Новый ТаблицаЗначений;
				ТЗВозврата.Колонки.Добавить("Ссылка");
				ТЗВозврата.Колонки.Добавить("ИспользоватьБезПодключенияОборудования");
				ТЗВозврата.Колонки.Добавить("ПодключаемоеОборудование");

				Для каждого СтрокаТерминал из Рез цикл
					
					НоваяСтрока = ТЗВозврата.Добавить();
					НоваяСтрока.Ссылка									=	СтрокаТерминал.Ссылка;
					НоваяСтрока.ИспользоватьБезПодключенияОборудования	=	СтрокаТерминал.Ссылка.ИспользоватьБезПодключенияОборудования;
					НоваяСтрока.ПодключаемоеОборудование				=	Строка.Ссылка;
				КонецЦикла;
				 
				Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗВозврата); 
			иначе
				Возврат Неопределено;
			КонецЕсли;  
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура УстановитьЦветКнопкиОтключитьЭквайринг()
	ТЗНужныйТерминал =    ПолучитьРаботающийТерминал(Объект.РабочееМесто);
	
	Если ТЗНужныйТерминал <> Неопределено тогда
		флЕстьРаботающий = Ложь;
		
		Для каждого Строка из ТЗНужныйТерминал цикл
			Если не Строка.ИспользоватьБезПодключенияОборудования тогда
				флЕстьРаботающий = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		
		Если флЕстьРаботающий тогда 
			Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Черный;
			Элементы.КнопкаОтключитьЭквайринг.Заголовок  = "Отключить"+Символы.ПС+"эквайринг";
		иначе
			Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный;
			Элементы.КнопкаОтключитьЭквайринг.Заголовок  = "Включить"+Символы.ПС+"эквайринг"; 
		КонецЕсли;
	иначе
		Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный;
		Элементы.КнопкаОтключитьЭквайринг.Заголовок  = "Включить"+Символы.ПС+"эквайринг";

	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура ТБКОтключитьЭквайрингПосле(Команда)
	Если Объект.Товары.Количество() > 0 тогда
		ЗаголовокИнформации = НСтр("ru = 'Отключение эквайринга'"); 
		ТекстИнформации = НСтр("ru = 'Перед отключением эквайринга необходимо пробить, аннулировать или отложить текущий чек.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Пароль = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводСтроки", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещения, Пароль, "Введите пароль: "); 

КонецПроцедуры

&НаКлиенте
Процедура ВводСтроки(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если ПолученноеЗначение = "0000" тогда 
		ПереключитьЭквайрингСервер(Объект.РабочееМесто);
		УстановитьЦветКнопкиОтключитьЭквайринг();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
&После("ОбработатьУспешноеПробитиеЧека")
Процедура ТБКОбработатьУспешноеПробитиеЧека() // не работает, поэтому перенесено в другую процедуру ниже
	//Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный и не флЭтоВнешнийЭквайринг тогда 
	//	ПереключитьЭквайрингСервер(Объект.РабочееМесто);
	//	УстановитьЦветКнопкиОтключитьЭквайринг();
	//КонецЕсли;
	//
	////Вик 2021_09_13
	//Если ЗначениеЗаполнено(КодАкции) тогда
	//	ПогастьКод(КодАкции);
	//	КодАкции = "";
	//КонецЕсли;
	////
	//
	////Вик 2023-10-13
	//Если ОбработанныеАкцииПоПодаркам.Количество()>0 тогда 
	//	ЗаписатьПодарки();
	//КонецЕсли;
	////
	//
	////Вик 2023-12-18
	//Если ПогашенныеКодыСертификатов.Количество()>0 тогда 
	//	ПогаситьСертификатыНаСервере();
	//КонецЕсли;
	//// 
	//
	////Вик 2024-04-23
	//Если КодыНовойУценки.Количество()>0 тогда 
	//	ПогаситьКодыНовойУценки();
	//КонецЕсли;
	////

	//
	//Элементы.НадписьПродажаПоСертификату.Заголовок	=	""; 
	//
	//ОбновитьНадписиКоличествоЧеков();
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьЧО04Возврат")
Процедура ТБКВыполнитьЧО04Возврат()
	Если НЕ ПроверитьВозможностьВозврата() тогда
		Возврат;		
	КонецЕсли;
	
	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьВозвратПоследнегоЧека")
Процедура ТБКВыполнитьВозвратПоследнегоЧека()
	Если НЕ ПроверитьВозможностьВозврата() тогда
		Возврат;		
	КонецЕсли;
	
	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьВозврата()
	Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный и не флЭтоВнешнийЭквайринг тогда
		Если не ОбщегоНазначенияВызовСервера.ПроверитьВозможностьРедактирования_Общая()  тогда
			ЗаголовокИнформации = НСтр("ru = 'Запрет возврата при отключенном терминале'");
			ТекстСообщения = НСтр("ru = 'Для возврата необходимо включить терминал '");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
			Возврат ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;	
КонецФункции 

&НаКлиенте
Процедура ТБКТоварыПриАктивизацииСтрокиПосле(Элемент)
	
КонецПроцедуры

&НаСервере
&Перед("ПровестиЧекККМПередПробитием")
Процедура ТБКПровестиЧекККМПередПробитием(ОбъектЧекККМ, ПараметрыОперации, ПараметрыИнформации)
	Если не ЗначениеЗаполнено(ОбъектЧекККМ.КассаККМ) тогда
		ОбъектЧекККМ.КассаККМ	=	ТекущаяКассаККМ;	
	КонецЕсли;
	
	//Вик 2021_06_02
	Для каждого Строка из  ОбъектЧекККМ.Товары цикл
		Если Строка.Сумма = 0 тогда
			
			Для каждого Строка2 из  ОбъектЧекККМ.Товары цикл
				Если Строка2.Сумма > 1 тогда 	
					Строка2.Сумма	 = Строка2.Сумма - (0.01 * Строка.Количество);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Строка.Сумма 				 = Строка.Сумма + (0.01 * Строка.Количество) ;
		КонецЕсли;
	КонецЦикла;
	//конецВик
КонецПроцедуры

//Вик 2021_08_13  для интернет заказов
&НаКлиенте
Процедура ОбработатьИнтернетЗаказы_Клиент()
	ТелефонКлиента	=	элементы.телефонклиента.ТекстРедактирования;
	
	флНужноВключитьИндикацию					= ПроверкаНеобходимостиИндикации();
	флНужноВключитьИндикациюОтмененныхЗаказов	= ПроверкаНеобходимостиИндикацииОтменыЗаказов();
	флНужноВключитьИндикациюЗаявок				= ПроверкаНеобходимостиИндикацииЗаявок();

	ОбработкаИндикации(флНужноВключитьИндикацию, флНужноВключитьИндикациюОтмененныхЗаказов, флНужноВключитьИндикациюЗаявок);   
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПроверкаНеобходимостиИндикации()
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	НЕ ЗаказПокупателя.ПометкаУдаления
	      	 	             |	И ЗаказПокупателя.Статус = &Статус");
	Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыЗаказовПокупателей.НеСогласован);
	
	Возврат не запрос.Выполнить().Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция  ПроверкаНеобходимостиИндикацииОтменыЗаказов()
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	НЕ ЗаказПокупателя.ПометкаУдаления
	      	 	             |	И (ЗаказПокупателя.Комментарий ПОДОБНО &Комментарий
	      	 	             |			ИЛИ ЗаказПокупателя.Статус = &СтатусОтменен)");
	Запрос.УстановитьПараметр("Комментарий","%ОТМЕНЕН В ОФИСЕ%");
	Запрос.УстановитьПараметр("СтатусОтменен",Перечисления.СтатусыЗаказовПокупателей.ОтмененВОфисе);

	Возврат не запрос.Выполнить().Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция  ПроверкаНеобходимостиИндикацииЗаявок()
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ЗаявкаОтМагазина.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ТБК_ЗаявкаОтМагазина КАК ТБК_ЗаявкаОтМагазина
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ЗаявкаОтМагазина.ПометкаУдаления
	      	 	             |	И (ТБК_ЗаявкаОтМагазина.ПризнакОбновление = 0
	      	 	             |			ИЛИ ТБК_ЗаявкаОтМагазина.Статус = ""Собирать"")");
	Возврат не запрос.Выполнить().Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция  ПроверкаНеобходимостиИндикацииЗаявокИМ() //Марк 2024-02-27
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ЗаявкаОтМагазина.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ТБК_ЗаявкаОтМагазина КАК ТБК_ЗаявкаОтМагазина
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ЗаявкаОтМагазина.ПометкаУдаления
	      	 	             |	И (ТБК_ЗаявкаОтМагазина.ПризнакОбновление = 0
	      	 	             |			ИЛИ ТБК_ЗаявкаОтМагазина.Статус = ""Собирать"")
	      	 	             |	И ТБК_ЗаявкаОтМагазина.Проект.Наименование = ""Возврат (Собирать) интернет-магазин""");
	Возврат не запрос.Выполнить().Пустой();
КонецФункции

&НаКлиенте
Процедура ОбработкаИндикации(флНужноВключитьИндикацию, флНужноВключитьИндикациюОтмененныхЗаказов, флНужноВключитьИндикациюЗаявок = Ложь, флНужноВключитьИндикациюЗаявокИМ = Ложь)
	Если флНужноВключитьИндикацию тогда
		Элементы.ЗаказыПокупателей.ЦветТекста = WebЦвета.Красный;
	иначе
		Элементы.ЗаказыПокупателей.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;
	
	Если флНужноВключитьИндикациюОтмененныхЗаказов тогда
		Элементы.ЗаказыДляОтмены.ЦветТекста = WebЦвета.Красный;
	иначе
		Элементы.ЗаказыДляОтмены.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;   
	
	
	Если флНужноВключитьИндикациюЗаявок тогда
		Элементы.ЗаявкиМагазина.ЦветТекста = WebЦвета.Красный;
	иначе
		Элементы.ЗаявкиМагазина.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;
	
	//Марк 2024-02-20
	Если флНужноВключитьИндикациюЗаявокИМ тогда
		Элементы.ЗаявкиИМ.ЦветТекста = WebЦвета.Красный;
	иначе
		Элементы.ЗаявкиИМ.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;
	//КонецМарк
КонецПроцедуры

&НаКлиенте
Процедура ТБКЗаказыПокупателейПосле(Команда)
	//ЗначениеОтбора  = Новый Структура("Номер", "333");
	//Параметрыотбора = Новый Структура("Отбор", ЗначениеОтбора);
	

	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеОткрытияЗаказов",ЭтотОбъект); 
	Форма	=	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаСписка",,,,,,Оповещение); 
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПометкаУдаления"); 
	ОтборВладелец.ПравоеЗначение 	= Ложь;   
	
	СЗ	=	ПолучитьСЗ_Статусов();
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Статус"); 
	ОтборВладелец.ПравоеЗначение 	= СЗ; 
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеСодержит; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Комментарий"); 
	ОтборВладелец.ПравоеЗначение 	= "ОТМЕНЕН В ОФИСЕ";
КонецПроцедуры
  &НаКлиенте
Процедура ТБКЗаявкиИМПосле(Команда) //Марк 2024-02-14 Отбор (Интернет заказов)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеОткрытияЗаказов",ЭтотОбъект);

	ПараметрыОтбора	=	Новый Структура;
	ПараметрыОтбора.Вставить("ЭтоИМ",Истина);
	
	Форма	= ОткрытьФорму("Документ.ТБК_ЗаявкаОтМагазина.ФормаСписка",ПараметрыОтбора,,,,,Оповещение);
	Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаСоздать.Видимость = Ложь;
	Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаСоздать.Доступность = Ложь;
	Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаСкопировать.Видимость  = Ложь;
	Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаСкопировать.Доступность  = Ложь;
КонецПроцедуры

//&НаСервере
//Функция ПолучтьПроектИнтернетМагазин() //Марк 2024-02-27
//	Возврат Справочники.ТБКПроекты.НайтиПоНаименованию("Возврат (Собирать) интернет-магазин");
//КонецФункции

&НаКлиенте
Процедура ТБКЗаявкиМагазинаПосле(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеОткрытияЗаказов",ЭтотОбъект);
	ПараметрыОтбора	=	Новый Структура;
	ПараметрыОтбора.Вставить("ЭтоИМ",Ложь);

	Форма	=	ОткрытьФорму("Документ.ТБК_ЗаявкаОтМагазина.ФормаСписка",ПараметрыОтбора,,,,,Оповещение);
	

	////Марк 2024-02-27
	//ОтборПроекта = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборПроекта.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	//ОтборПроекта.использование = Истина;
	//ОтборПроекта.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Проект");
	//ОтборПроекта.ПравоеЗначение = ПолучтьПроектИнтернетМагазин();
	////КонецМарк
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьПослеОткрытияЗаказов(РезультатОткрытияФормы, стр) экспорт 
	флНужноВключитьИндикацию					= ПроверкаНеобходимостиИндикации();
	флНужноВключитьИндикациюОтмененныхЗаказов	= ПроверкаНеобходимостиИндикацииОтменыЗаказов();
	флНужноВключитьИндикациюЗаявок				= ПроверкаНеобходимостиИндикацииЗаявок();
	//Марк 2024-02-20
	флНужноВключитьИндикациюЗаявокИМ			= ПроверкаНеобходимостиИндикацииЗаявокИМ();
	//КонецМарк
	ОбработкаИндикации(флНужноВключитьИндикацию, флНужноВключитьИндикациюОтмененныхЗаказов, флНужноВключитьИндикациюЗаявок, флНужноВключитьИндикациюЗаявокИМ);   
КонецПроцедуры

&НаКлиенте
Процедура ТБКЗаказыДляОтменыПосле(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеОткрытияЗаказов",ЭтотОбъект); 
	Форма	=	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаСписка",,,,,,Оповещение); 
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПометкаУдаления"); 
	ОтборВладелец.ПравоеЗначение 	= Ложь;   
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Содержит; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Комментарий"); 
	ОтборВладелец.ПравоеЗначение 	= "ОТМЕНЕН В ОФИСЕ";  
КонецПроцедуры

&НаСервере
Процедура ТБКПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)	
	ДоступнаНефискальнаяПечать = Ложь;
	КонстантаДоступнаНефискальнаяПечать	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ДоступнаНефискальнаяПечать");
	Если КонстантаДоступнаНефискальнаяПечать <> Неопределено тогда
		ДоступнаНефискальнаяПечать =   КонстантаДоступнаНефискальнаяПечать;
	КонецЕсли;
	
	ДоступнаПроверкаОрганизаций = Ложь;
	КонстантаДоступнаПроверкаОрганизаций	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ДоступнаПроверкаОрганизаций");
	Если КонстантаДоступнаПроверкаОрганизаций <> Неопределено тогда
		ДоступнаПроверкаОрганизаций =   КонстантаДоступнаПроверкаОрганизаций;
	КонецЕсли;
	
	СдвигПоРазрешениюЭкрана = 0;
	КонстантаСдвигПоРазрешениюЭкрана	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("СдвигПоРазрешениюЭкрана");
	Если КонстантаСдвигПоРазрешениюЭкрана <> Неопределено тогда
		СдвигПоРазрешениюЭкрана =   КонстантаСдвигПоРазрешениюЭкрана;
	КонецЕсли;
	
	ИспользоватьВторойМонитор = Ложь;
	КонстантаИспользоватьВторойМонитор	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ИспользоватьВторойМонитор");
	Если КонстантаИспользоватьВторойМонитор <> Неопределено тогда
		ИспользоватьВторойМонитор =   КонстантаИспользоватьВторойМонитор;
	КонецЕсли;
	
	//Вик 2022-10-21 в фоне почему то не работает..
	//ТекстФоновойПроцедуры = " 
	//|Соед = ОбщегоНазначенияВызовСервера.ПолучитьПрокси(""123456"", ""WS_User_tbk"", ""http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl"", 10);
	//|Массив	=	новый Массив;
	//|Массив.Добавить(Соед);
	//|ПоместитьВоВременноеХранилище(Массив,РЕЗ);";
	//ФоновоеВыполнение.ЗапуститьФоновоеВыполнение(ТекстФоновойПроцедуры, Новый Структура("РЕЗ", ЭтаФорма.Адрес_ВебСоединение)); 
	
	Попытка
		Соед = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User_tbk", "http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl", 10, Истина);
		Массив	=	новый Массив;
		Массив.Добавить(Соед);
		Адрес_ВебСоединение	=	ПоместитьВоВременноеХранилище(Массив,ЭтаФорма.УникальныйИдентификатор); 
	Исключение
	КонецПопытки;
	
	ВариантМотивации	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ВариантМотивации");
    Если ВариантМотивации = 0 или ВариантМотивации = Неопределено тогда
		Элементы.ОткрытьВыполнениеПланов.Видимость	=	ложь;
	иначе
		Элементы.ОткрытьВыполнениеПланов.Видимость	=	Истина;
	КонецЕсли;
	
	Попытка
		ТекПродавец	=	Пользователи.ТекущийПользователь().ФизическоеЛицо;
		Если ЗначениеЗаполнено(ТекПродавец) тогда
			Если не ТекПродавец.Сотрудник тогда
				Об = ТекПродавец.ПолучитьОбъект();
				Об.Сотрудник	=	Истина;
				Об.Записать();
			КонецЕсли;		
		КонецЕсли;
	Исключение
	КонецПопытки;
	//

	//НужныйМагазин	 = ОбщегоНазначения.ПолучитьМагазинИзООРП();
	//Если ЗначениеЗаполнено(НужныйМагазин) тогда
	//	Если Строка(НужныйМагазин) = "Советская" или Строка(НужныйМагазин) = "ГринПаркНИА" или Строка(НужныйМагазин) = "СлавянкаХТА" 
	//				или Строка(НужныйМагазин) = "ГрандКаньонБЮА" или	Строка(НужныйМагазин) = "ЛомоносовЛентаБАА" или Строка(НужныйМагазин) = "ОкейГерманаСДП" тогда
	//		Элементы.ОткрытьВыполнениеПланов.Видимость	= Истина;
	//	иначе
	//		Элементы.ОткрытьВыполнениеПланов.Видимость	= Ложь;		
	//	КонецЕсли;
	//Иначе
	//	Элементы.ОткрытьВыполнениеПланов.Видимость	= Ложь;		
	//КонецЕсли;
	
	//Марк 2024-09-16
	МассивДопПользователей = Новый Массив;
	МассивДопПользователей.Добавить("Волкова Татьяна Евгеньевна 01");
	
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) или МассивДопПользователей.Найти(Строка(Пользователи.ТекущийПользователь())) <> Неопределено Тогда
		Элементы.ПереключательDebug.Видимость = Истина;	
	КонецЕсли; 
	//КонецМарк	

КонецПроцедуры


&НаСервереБезКонтекста
Процедура ТБКПриЗакрытииПослеНаСервере()
	Соединение 	= Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ТБКПриЗакрытииПосле(ЗавершениеРаботы)
	//ТБКПриЗакрытииПослеНаСервере();//в новой платформе запрещены серверные вызовы при завершении работы
	
	Попытка
		Если не Адрес_ВебСоединение  = "" тогда
			Массив = ПолучитьИзВременногоХранилища(Адрес_ВебСоединение);
			Массив[0] = Неопределено;
		КонецЕсли;
	Исключение
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСЗ_Статусов()
	СЗ	=	Новый СписокЗначений;
	СЗ.Добавить(Перечисления.СтатусыЗаказовПокупателей.НеСогласован);
	СЗ.Добавить(Перечисления.СтатусыЗаказовПокупателей.Согласован);  
	
	Возврат СЗ;
КонецФункции

&НаСервереБезКонтекста
Функция ПроверкаНаПометку(Номенклатура)
	Возврат ПолучитьЗначениеРеквизита(Номенклатура,"ПометкаУдаления");
	//Возврат Номенклатура.ПометкаУдаления;
КонецФункции

&НаКлиенте
Процедура ТБКВнешнееСобытиеВместо(Источник, Событие, Данные)  
	
	Если ВводДоступен() Тогда
		
		// &ЗамерПроизводительности
		Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь,
		"Обработка.РМКУправляемыйРежим.Форма.Форма.ВнешнееСобытие");
		
		Если Объект.Товары.Количество() = 0 Тогда
			Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		
		
		Если (Событие = "Штрихкод" Или Событие = "ПолученШтрихкод") Тогда 
			
			Данные = ОбщегоНазначенияКлиентСервер.УдалитьНедопустимыеСимволыXML(Данные); 
			
			Если СтрДлина(Данные) > 21 Тогда 
								
				//Проверяем, является ли переданный код обезличенной марки (например, код, не содержащий уникальной информации о товаре).
				Если ОбщегоНазначенияВызовСервера.ЭтоОбезличеннаяМарка(Данные) Тогда
					Сообщить("Для этой номенклатуры сканируйте штрихкод!");  	
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
						
			//Марк 2025-06-18
			НоменклатураИзКуара = ОбщегоНазначенияВызовСервера.ПолучитьНоменклатуруИзДанныхСканирования(Данные, АвтоматическиПодгружатьНоменклатуру);
			//КонецМарк  
			
			
			//Вик 2024-09-11 Костыль, эти группы товаров бить по БК, на них наклеены Универсальные марки
			Если СтрДлина(Данные) >= 25 И НоменклатураИзКуара <> Неопределено тогда
									
				Если ЭтуМаркуБитьПоБК(Данные, НоменклатураИзКуара) тогда
					Сообщить("Для этой номенклатуры сканируйте штрихкод!");  	
					Возврат; 	
				КонецЕсли; 
				
				//Вик 2024-09-26 Костыль на наборы
				Если СтрДлина(Данные) > 29 и Лев(Строка(НоменклатураИзКуара),5) = "Набор" тогда 
					ОбщегоНазначенияВызовСервера.ПроставитьПризнакиМаркировкиЕслиНужно(НоменклатураИзКуара);	
				КонецЕсли;
				//КонецВик
				
			КонецЕсли; 
			
			//Вик 2021_09_10
			Если Найти(Данные,"Akciya") тогда
				ОбработатьКодАкции(Данные);
				Возврат;
			КонецЕсли;				
			//КонецВик			
			
			//Вик 2021_11_17
			Если Найти(Данные,"tbkskidka") тогда
				ОбработатьУценку(Данные);
				Возврат;
			КонецЕсли;				
			//КонецВик
			
			//Вик 2021_12_17
			Если Найти(Данные,"tbk_iqos_001") тогда //Скидка на iqos.Продаем за 1 коп. Это замена неработающих устройсв за счет поставщика 
				ОбработатьЗаменуАйкос(Данные);
				Возврат;
			КонецЕсли;				
			//КонецВик
			
			//Вик 2021_12_28
			//Если Найти(Данные,"www.gosuslugi.ru") тогда  
			//	ЗапуститьПриложение(Данные);
			//	Возврат;
			//КонецЕсли;				
			//КонецВик
			
			Если СтрЧислоВхождений(Данные,"*") >5 тогда //это куар клиента
				Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") тогда
					
					Элементы.ГруппаБонусы.Видимость	=	Истина;
					Объект.ТБК_IDКлиента			=	ТБК_Шифрование.ПолучитьРасшифрованныйТекст(Данные,"PDV","*");
					
					ПеремТовары	=	объект.Товары;
					Если не ОфлайнРежим тогда
						СтруктураБаллов					=	ТБК_ПрограммаЛояльности.ПолучитьКоличествоБаллов(Объект.ТБК_IDКлиента, ПеремТовары, Адрес_ВебСоединение);
						Если СтруктураБаллов <> 0 тогда
							КоличествоНакопленныхБаллов		=	СтруктураБаллов.КоличествоНакопленныхБаллов;
							КоличествоБалловМожноСписать	=	СтруктураБаллов.КоличествоБалловМожноСписать;
							ИмяКлиента						=	СтруктураБаллов.Имя;
							ТелефонКлиента					=	СтруктураБаллов.Телефон;
							ПочтаКлиента					=	СтруктураБаллов.Почта;					
							Элементы.ТелефонКлиента.ТолькоПросмотр	=	Истина;
							//Если ЗначениеЗаполнено(ПочтаКлиента) тогда
							//	НеПечататьЧек					=	Истина;
							//КонецЕсли;
							
							Если ИспользоватьВторойМонитор тогда
								ОбработатьДействияВторойМонитор();
							КонецЕсли; 
							
							Попытка
								ДобавитьЗаписьВЖурнал("Скан куара лояльности: "+Объект.ТБК_IDКлиента+"; телефон: "+ТелефонКлиента);
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				иначе
					Сообщить("Не надо так делать! При возврате поиск клиента в программе происходит автоматически!");
				КонецЕсли;
				Возврат;
			КонецЕсли;
			
			Если Лев(Данные, 3) = "FL_" тогда //это покупка для себя
				ОбработатьПокупкуДляСебя(Данные);
				Возврат;
			КонецЕсли;
			
			//Вик 2023-12-18
			Если Лев(Данные, 10) = "^cert_pod^" тогда //это подарочный сертификат
				ОбработатьПогашениеПодарочногоСертификата(Данные);
				Если ИспользоватьВторойМонитор тогда
					ОбработатьДействияВторойМонитор();
				КонецЕсли; 
				Возврат;
			КонецЕсли;
			//
			
			//Вик 2024-04-23
			Если СтрЧислоВхождений(Данные,"/") > 10 тогда //это куар новой уценки
				ОбработатьНовуюУценку(Данные);
				Если ИспользоватьВторойМонитор тогда
					ОбработатьДействияВторойМонитор();
				КонецЕсли; 
				Возврат;
			КонецЕсли;
			//			
			
			//Вик 2024-04-15
			МаркаСписана	=	ПроверитьСписаниеМарки(Данные);
			Если МаркаСписана тогда //это списанная марка
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Ошибка!'"), "Эта марка списана! Пробейте по БК!");	
				Возврат;
			КонецЕсли;
			//
			
			Если ПроверитьЧтоЭтоВода(Данные) и СтрДлина(данные) > 13 и СтрДлина(данные) < 37 и ТекущаяДата()>'20230627' тогда
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Ошибка!'"), "Для продажи напитков отсканируйте QR-код");	
				Возврат;	
			КонецЕсли; 
			
			//Вик 2024-12-28
			Если СтрДлина(данные) = 12 тогда
				данные  =  "0" + данные;        
			КонецЕсли;
			
			//////////////////////////////////////////
			
			//Вик 2021_12_07         
			//Если НоменклатураИзКуара <>Неопределено тогда
			//	Если СтрДлина(Данные) > 29 и Лев(Строка(НоменклатураИзКуара),5) = "Набор" тогда //этоБлок
			//		Попытка
			//			флВсеХорошо	=	Истина;
			//			ОбработатьБлок(Данные,флВсеХорошо);
			//			Если флВсеХорошо тогда
			//				Возврат;
			//			КонецЕсли;
			//		Исключение
			//			ЗаголовокИнформации =	НСтр("ru = 'Ошибка!'");
			//			ТекстСообщения 		=	ОписаниеОшибки();
			//			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
			//            Возврат; 
			//		КонецПопытки;
			//	КонецЕсли;			
			//КонецЕсли;
			//КонецВик 
			
			//Костыль на макбарен
			//Если Лев(Данные,3) = "010" и СтрДлина(Данные) = 32   тогда
			//	Данные	=	Сред(Данные,3);	
			//КонецЕсли;
			
			#Область ВторыеЭлектронки
			//Вик 2024-08-31
			//флДобавитьВоВторыеЭлектронки = Ложь;
			//			
			//Если ИспользоватьВторыеЭлектронки тогда
			//	Если Объект.ТБКВторыеЭлектронки.Количество()>0 тогда
			//		Сообщить("Пробейте позицию отдельным чеком!");
			//		Возврат;
			//	КонецЕсли;
			//	
			//	Если Объект.Товары.Итог("КоличествоУпаковок")=1 тогда 
			//		
			//		Для каждого Строка Из Объект.АкцизныеМарки цикл
			//			Если найти(Данные, Строка.КодАкцизнойМарки) тогда
			//				Сообщить("Марка уже была отсканирована!");
			//				Возврат;
			//			КонецЕсли;
			//		КонецЦикла;;
			
			//		
			//		Для Каждого Строка из Объект.Товары цикл
			//			ПК	=	ПолучитьПолныйКод(Строка.Номенклатура);	
			//			
			//			Если ВходитВАкциюДВаПоЦенеОдного(ПК) тогда
			//				флДобавитьВоВторыеЭлектронки = Истина;
			//			КонецЕсли;
			//		КонецЦикла;
			//	КонецЕсли;
			//КонецЕсли;
			//
			//Если флДобавитьВоВторыеЭлектронки тогда
			//	
			//	НужНоменклатура	=	ОбщегоНазначенияВызовСервера.ПолучитьНоменклатуруПоКуару(Данные);	
			//	Если НужНоменклатура = Неопределено тогда Возврат КонецЕсли;
			//	
			//	ПК	=	ПолучитьПолныйКод(НужНоменклатура);	
			//	
			//	Если ВходитВАкциюДВаПоЦенеОдного(ПК) тогда
			//		ОбработатьДобавлениеВоВторыеЭлектронки(Данные, НужНоменклатура);
			//		Возврат;
			//	КонецЕсли; 
			//КонецЕсли;
			#КонецОбласти			
			
			ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(
			ЭтотОбъект, 
			Источник, 
			Событие, 
			Данные);
			
			Если ДанныеСоСканераСтруктура = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
			
		Иначе
			ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
		КонецЕсли;
		
		ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
		
		ДействияПриДобавленииНовойПозиции(); 
	КонецЕсли;
КонецПроцедуры  

&НаСервере
Процедура ОбработатьДобавлениеВоВторыеЭлектронки(Данные, НужНоменклатура)
	СканКуар = Данные;
	
	Элементы.ГруппаВторыеЭлектронки.Видимость	=	Истина;
	
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ДействующиеЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ДействующиеЦеныНоменклатуры.СрезПоследних КАК ДействующиеЦеныНоменклатурыСрезПоследних
	      	 	             |ГДЕ
	      	 	             |	ДействующиеЦеныНоменклатурыСрезПоследних.Номенклатура = &Номенклатура");
	Запрос.УстановитьПараметр("Номенклатура", НужНоменклатура);
	
	Рез = Запрос.Выполнить().Выбрать();
	
	нужЦена = 0;
	Если рез.Следующий() тогда
		Если рез.Цена> Объект.Товары[0].цена тогда
			Сообщить("Сначала отсканируйте дорогую электронку!");
			Возврат;
		КонецЕсли;
		НужЦена = Рез.Цена;
	КонецЕсли;
	
	НовСтрока	=	Объект.ТБКВторыеЭлектронки.Добавить();
	НовСтрока.Номенклатура 	= НужНоменклатура;   
	Если СтрДлина(СканКуар) >28 тогда
		НовСтрока.Марка			= СканКуар;
	КонецЕсли;
	НовСтрока.Цена 			= НужЦена;
	
	Элементы.Товары.Доступность	=	Ложь;	
КонецПроцедуры  

&НаСервереБезКонтекста
Функция ПроверитьЧтоЭтоВода(ШК_ЕАН);
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	Штрихкоды.Владелец КАК Владелец
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.Штрихкоды КАК Штрихкоды
	      	 	             |ГДЕ
	      	 	             |	Штрихкоды.Штрихкод = &Штрихкод
	      	 	             |	И Штрихкоды.Владелец В ИЕРАРХИИ(&Вода)");
	Запрос.УстановитьПараметр("Штрихкод", ШК_ЕАН);
	Запрос.УстановитьПараметр("Вода", Справочники.Номенклатура.НайтиПоКоду("00048205246") );  
	Возврат  Не Запрос.Выполнить().Пустой();						
КонецФункции

&НаСервереБезКонтекста
Функция  ПроверитьСписаниеМарки(Данные)
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ТБКСписанныеМарки.Марка КАК Марка
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКСписанныеМарки КАК ТБКСписанныеМарки
	      	 	             |ГДЕ
	      	 	             |	ТБКСписанныеМарки.Марка ПОДОБНО &Марка");
	Запрос.УстановитьПараметр("Марка", Лев(Данные,21)+"%" );
	Возврат не Запрос.Выполнить().Пустой();
КонецФункции

&НаКлиенте
Процедура ОбработатьБлок(Данные, флВсеХорошо)	
	марки = Новый Массив();
	марки.Добавить(Данные);   
	Попытка
		сведенияМарок	=	ПолучитьСведенияМарок_Сервер(марки);
	Исключение
		флВсеХорошо	=	Ложь;
		Возврат;
	КонецПопытки;
	
	флНадоРаспределитьЦенуНабора	=	Ложь;
	Если ТипЗнч(сведенияМарок) = Тип("Массив") Тогда
		Если сведенияМарок.Количество() = 1 Тогда
			сведения = сведенияМарок[0]; 
			Если сведения.cisInfo.Свойство("maxRetailPrice") тогда //на табаки нет МРЦ
				Попытка
					ДочерниеМарки_Массив	=	сведения.cisInfo.child; 
					Если ДочерниеМарки_Массив.Количество() = 0 тогда
						флВсеХорошо	=	Ложь;
						Возврат;
					КонецЕсли;

					МРЦБлока				=	Число(сведения.cisInfo.maxRetailPrice/10);//в копейках      
					МРЦБлокаКодированнная	=	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьМРЦ(МРЦБлока);	
				Исключение  
					флВсеХорошо = ложь;
					//ЗаголовокИнформации = НСтр("ru = 'Не удалось получить данные марок в блоке'");
					//ТекстСообщения = НСтр("ru = 'Не удалось получить данные марок в блоке! возможно сервис не доступен '");
					//ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
	                Возврат;
				КонецПопытки;
			иначе
				Попытка
					ДочерниеМарки_Массив	=	сведения.cisInfo.child;
					МРЦБлокаКодированнная 	= "";
				Исключение
					флВсеХорошо = ложь;
					//ЗаголовокИнформации = НСтр("ru = 'Не удалось получить данные марок в блоке'");
					//ТекстСообщения = НСтр("ru = 'Не удалось получить данные марок в блоке! возможно сервис не доступен '");
					//ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
	                Возврат;  	
				КонецПопытки;				
			КонецЕсли;
			
			Для каждого ДочерняяМарка из ДочерниеМарки_Массив цикл 
				ДанныеШтрихкода = Новый Структура;
				ДанныеШтрихкода.Вставить("Количество", 1);
				ДанныеШтрихкода.Вставить("Штрихкод"  ,	ДочерняяМарка + МРЦБлокаКодированнная);				
				ОбработатьКодМаркировки(ДанныеШтрихкода);
				
				//Вик 2023-02-13  
				Если не флНадоРаспределитьЦенуНабора тогда     
					Если Объект.Товары.Количество() >0 тогда  
						Если Найти(Строка(Объект.Товары[0].Номенклатура),"^") тогда
							флНадоРаспределитьЦенуНабора	=	Истина; 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если флНадоРаспределитьЦенуНабора тогда     
					КолМарок	=	ДочерниеМарки_Массив.Количество();
					Элементы.Товары.ТекущиеДанные.Цена			=	1;
					Элементы.Товары.ТекущиеДанные.Сумма			=	1 * Элементы.Товары.ТекущиеДанные.Количество;
					Элементы.Товары.ТекущиеДанные.СуммаВсего	=	1 * Элементы.Товары.ТекущиеДанные.Количество;
				КонецЕсли;				
				//КонецВик
			КонецЦикла;   
		КонецЕсли;
	КонецЕсли; 	
	
	Если флНадоРаспределитьЦенуНабора тогда
		Строка	=	Объект.Товары[0];
		Строка.СуммаРучнойСкидки	=	КолМарок; 				
		Строка.Сумма				=	Строка.Сумма - Строка.СуммаРучнойСкидки;			
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
	КонецЕсли;
КонецПроцедуры 

&НаСервереБезКонтекста
Функция  ПолучитьСведенияМарок_Сервер(марки)  
	Возврат Обработки.ТБК_Маркировка.ПолучитьСведенияМарок(марки);	
КонецФункции

&НаКлиенте
Процедура ОбработатьКодАкции(Данные)
	Если ПокупкаСотрудника тогда Возврат КонецЕсли;

	Если Найти(Данные,"GLO") тогда
		флЭтоАкцияГЛО	=	Истина;
	иначе
		флЭтоАкцияГЛО	=	Ложь;
	КонецЕсли;
	
	Для каждого Строка из Объект.Товары цикл
		Если флЭтоАкцияГЛО тогда 
			флЭтоГло = ЭтоГЛО(Строка.Номенклатура);
			Если флЭтоГло тогда
				//Если Строка.количество <> 1 тогда
				//	ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Количество акционного товара должно быть 1","Количество акционного товара должно быть 1. Остальные акционные товары пробивайте отдельным чеком");
				//	Возврат;
				//КонецЕсли;
				
				Если Строка.СуммаРучнойСкидки > 0 тогда
					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка уже проставлена","Скидка уже проставлена!");
					Возврат;
				КонецЕсли;
				
				ДанныеПоКоду = ПолучитьДанныеПоКоду(Данные);
				
				Если ДанныеПоКоду = Неопределено тогда
					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Не удалось получить данные по коду!","Не удалось получить данные по коду! Возможно отсутствует соединение с сервером");
					Возврат;
				КонецЕсли;
				
				Если не ДанныеПоКоду.Валиден тогда
					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Код уже погашен","Этот код уже был использован! Повторное использование кода не допускается.");
					Возврат;
				КонецЕсли;
				
				КодНом						=	ПолучитьКодНоменклатуры(Строка.Номенклатура);
				КодАкции					=	Данные + КодНом;
				Если ВыполненыДопУсловияАкцииГЛО(КодНом) тогда
					Строка.СуммаРучнойСкидки	=	990;
				иначе				
					Строка.СуммаРучнойСкидки	=	ДанныеПоКоду.Скидка;
				КонецЕсли;
				
				Строка.Сумма				=	Строка.Сумма - Строка.СуммаРучнойСкидки;			
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);		
				ОбновитьФормуНаКлиенте();
				
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУценку(Данные)
	Если ПокупкаСотрудника тогда Возврат КонецЕсли;
	ТекСтрока	=	Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока = Неопределено тогда Возврат КонецЕсли;
	
	Если ТекСтрока.Количество <>1 тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","Количество должно равняться 1");
		Возврат;
	КонецЕсли;
	
	//В чеке должна быть 1 позиция
	Если Объект.Товары.Итог("Количество") <>1 тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","В чеке должна быть только 1 штука");
		Возврат;
	КонецЕсли; 	
	
	ПК			=	ПолучитьПолныйКод(ТекСтрока.Номенклатура);	
	
	Поз1	=	СтрНайти(Данные,"/",,,1);
	Поз2	=	СтрНайти(Данные,"/",,,2);
	Поз3	=	СтрНайти(Данные,"/",,,3);
	
	НужныйКод	=	Сред(Данные,Поз3+1,11);
	НужныйКод	=	СтрЗаменить(НужныйКод,"u","Ю");
	НужныйКод	=	СтрЗаменить(НужныйКод,"mp","МП");
	
	Если не Найти(Строка(ТекСтрока.Номенклатура)," БК") тогда
		Если не Найти(ПК,НужныйКод) тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","QR не принадлежит этой номенклатуре. Возможно необходимо встать на соответствующую позицию товаров");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекСтрока.СуммаРучнойСкидки >0 тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","Скидка уже проставлена");
		Возврат;
	КонецЕсли;
	
	ПроцентСкидки	=	Сред(Данные,Поз1+1,Поз2-Поз1-1);
	Если найти(ПроцентСкидки,"r") тогда
		СуммаСкидки	=	Число(СтрЗаменить(ПроцентСкидки,"r",""));		
	иначе
		СуммаСкидки	=	окр((ТекСтрока.Цена/100) * ПроцентСкидки,2);
	КонецЕсли;
	
	ТекСтрока.КодУценки 		=	Данные;
	ТекСтрока.СуммаРучнойСкидки	=	СуммаСкидки;
	ТекСтрока.Сумма				=	ТекСтрока.Сумма - ТекСтрока.СуммаРучнойСкидки;			
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);		
	ОбновитьФормуНаКлиенте(); 
КонецПроцедуры   

&НаКлиенте
Процедура ОбработатьНовуюУценку(Данные)
	Если ПокупкаСотрудника тогда Возврат КонецЕсли;
	Если не Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") тогда  Возврат КонецЕсли;
	
	ТекСтрока	=	Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока = Неопределено тогда Возврат КонецЕсли;  

	ШК	=	СтрЗаменить(Данные,Символы.НПП,"");
	ШК	=	СтрЗаменить(Данные,Символ(10),"");
	ШК	=	СтрЗаменить(Данные,"B","");
	
	КодУценки = ТБК_Шифрование.ПолучитьРасшифрованныйТекст(Данные,"2","/"); 
	
	Отбор = Новый Структура("КодНовойУценки", КодУценки);
	Если КодыНовойУценки.НайтиСтроки(Отбор).Количество() >0 тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена!","Вы уже сканировали этот код!");
		Возврат;
	КонецЕсли; 
	
	флСканировали	=	ПроверитьКодУценкиВРегистре(КодУценки);	
	Если флСканировали тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена!","Вы уже сканировали этот код!");
		Возврат;
	КонецЕсли;

	
	Поз1	=	СтрНайти(КодУценки,"_",,,1);
	Поз2	=	СтрНайти(КодУценки,"_",,,2);
	Поз3	=	СтрНайти(КодУценки,"_",,,3);
	
	КодПричины		=	Сред(КодУценки,1, Поз1-1);
	КодНоменклатуры	=	Сред(КодУценки,Поз1+1, 11);
	ПроцентСкидки	=	Сред(КодУценки,Поз2+1, Поз3-Поз2-1); 
	
	КодНоменклатуры	=	СтрЗаменить(КодНоменклатуры,"u","Ю");
	КодНоменклатуры	=	СтрЗаменить(КодНоменклатуры,"mp","МП");
	
	//основная проверка   
	КоличествоПродаем	=	0;
	Для каждого СтрокаТовары из Объект.Товары цикл
		Если Найти(Строка(СтрокаТовары.Номенклатура), " БК") тогда
			НужНом	=	ОбщегоНазначенияВызовСервера.ПолучитьРеальнуюНоменклатуруДляБК(СтрокаТовары.Номенклатура);
		иначе
			НужНом	=	СтрокаТовары.Номенклатура;
		КонецЕсли;

		
		Если ПолучитьКод(НужНом) = КодНоменклатуры тогда    
			КоличествоПродаем		=	КоличествоПродаем + СтрокаТовары.Количество;
			УценяемаяНоменклатура	=	СтрокаТовары.Номенклатура;
		КонецЕсли;
	КонецЦикла;  
	
	Если КоличествоПродаем =0 тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Нет товаров для уценки!", "В продаваемых товарах нет товара для уценки с кодом: "+КодНоменклатуры);
		Возврат;		
	КонецЕсли;

	
	КоличествоУжеУценили	=	1;//тот что сейчас сканируем
	Для каждого Строка из КодыНовойУценки цикл
		
		Если Найти(Строка(Строка.Номенклатура), " БК") тогда
			НужНом	=	ОбщегоНазначенияВызовСервера.ПолучитьРеальнуюНоменклатуруДляБК(Строка.Номенклатура);
		иначе
			НужНом	=	Строка.Номенклатура;
		КонецЕсли;

		
		Если ПолучитьКод(НужНом) = КодНоменклатуры тогда    
			КоличествоУжеУценили	=	КоличествоУжеУценили + 1;
		КонецЕсли;
	КонецЦикла;  
	
	Если КоличествоПродаем < КоличествоУжеУценили тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Отказ!", "Вы уже отсканировали максимальное количество кодов уценки для товара: "+УценяемаяНоменклатура);
		Возврат;		
	КонецЕсли;
	//  

	Для каждого Строка из Объект.Товары цикл
		Если Найти(Строка(Строка.Номенклатура), " БК") тогда
			НужНом	=	ОбщегоНазначенияВызовСервера.ПолучитьРеальнуюНоменклатуруДляБК(Строка.Номенклатура);
		иначе
			НужНом	=	Строка.Номенклатура;
		КонецЕсли;
		
		если ПолучитьКод(НужНом) = КодНоменклатуры тогда     
			
			Отбор	=	Новый Структура("КлючСвязи", Строка.номерСтроки); 
			Строки	=	КодыНовойУценки.НайтиСтроки(Отбор);
			Если Строки.количество() >= Строка.Количество тогда  
				Продолжить;
			КонецЕсли;
			
			
			СуммаСкидки	=	окр((Строка.Цена/100) * ПроцентСкидки,2);
			
			ТекСтрока.СуммаРучнойСкидки	=	ТекСтрока.СуммаРучнойСкидки + СуммаСкидки;
			ТекСтрока.Сумма				=	ТекСтрока.Сумма - ТекСтрока.СуммаРучнойСкидки;

			НовСтрока	=	КодыНовойУценки.Добавить();
			НовСтрока.КодНовойУценки 	= КодУценки;  
			НовСтрока.Номенклатура		= НужНом;	
			НовСтрока.КлючСвязи			= Строка.номерСтроки;
			НовСтрока.ПричинаУценки		= КодПричины;
			НовСтрока.ПроцентСкидки		= Число(ПроцентСкидки);
			НовСтрока.СуммаСкидки		= СуммаСкидки;
			НовСтрока.Цена				= Строка.Цена;
		КонецЕсли;
	КонецЦикла;
	
 	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);		
	ОбновитьФормуНаКлиенте(); 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьКодУценкиВРегистре(КодУценки) 
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ЕСТЬNULL(СУММА(ВЫБОР
	      	 	             |				КОГДА ТБКУценка_Новая.Чек.ВидОперации = &Продажа
	      	 	             |					ТОГДА 1
	      	 	             |				ИНАЧЕ -1
	      	 	             |			КОНЕЦ), 0) КАК Количество
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКУценка_Новая КАК ТБКУценка_Новая
	      	 	             |ГДЕ
	      	 	             |	ТБКУценка_Новая.Код = &Код");  
	Запрос.УстановитьПараметр("Код", КодУценки);
	Запрос.УстановитьПараметр("Продажа", Перечисления.ВидыОперацийЧекККМ.Продажа); 
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() тогда
		Если Рез.Количество>0 тогда
			Возврат Истина;
		иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ОбработатьЗаменуАйкос(Данные)
	ТекСтрока	=	Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока = Неопределено тогда Возврат КонецЕсли;
		
	//В чеке должна быть 1 позиция
	Если Объект.Товары.Итог("Количество") <>1 тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","В чеке должна быть только 1 штука");
		Возврат;
	КонецЕсли;
	
	Если не ЭтоАйкос(ТекСтрока.Номенклатура) тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","На этот товар скидка по замене Айкос - невозможна");
		Возврат;	
	КонецЕсли;
	
	ТекСтрока.КодУценки = Данные;
	
	СуммаСкидки	=	ТекСтрока.Сумма - 0.01;
	
	ТекСтрока.СуммаРучнойСкидки	=	СуммаСкидки;
	ТекСтрока.Сумма				=	ТекСтрока.Сумма - ТекСтрока.СуммаРучнойСкидки;			
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);		
	ОбновитьФормуНаКлиенте();	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПолныйКод(Номенклатура)
	Возврат Номенклатура.ПолныйКод();
КонецФункции   

&НаСервереБезКонтекста
Функция ПолучитьКод(Номенклатура)
	Возврат Номенклатура.Код;
КонецФункции  	

&НаСервереБезКонтекста
Функция ЭтоГЛО(Номенклатура)
	Возврат Найти(Номенклатура.ПолныйКод(),"Ю2-00007720") или Найти(Номенклатура.ПолныйКод(),"Ю2-00007721");
КонецФункции

&НаСервереБезКонтекста
Функция ВыполненыДопУсловияАкцииГЛО(КодНом)
	Если (ТекущаяДата() > '20221121' и ТекущаяДата()< '20221204') или (ТекущаяДата() > '20221219' и ТекущаяДата()< '20221231') тогда
		Если КодНом = "Ю2-00003373" или КодНом = "Ю2-00007811" или КодНом = "Ю2-00003375" или КодНом = "Ю2-00010310"
			или КодНом = "Ю2-00003376" или КодНом = "Ю2-00013993" или КодНом = "Ю2-00013992" или КодНом = "Ю2-00003374" тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЭтоАйкос(Номенклатура)
	ПК	=	Номенклатура.ПолныйКод();
	Возврат Найти(ПК,"Ю2-00014185") или Найти(ПК,"00048208784") или Найти(ПК,"Ю2-00046531") или Найти(ПК,"Ю2-00048161");
КонецФункции

&НаСервере
Функция ПолучитьКодНоменклатуры(Номенклатура)
	Возврат Номенклатура.код;
КонецФункции

&НаСервере
Функция ПолучитьДанныеПоКоду(Данные)
	Попытка
		СтруктураПодключения	=	ОбщегоНазначения.ПолучитьСтруктуруПодключенияFTP();
	Исключение
		Сообщить("Нет данных для подключения по фтп!!");
		Возврат Неопределено;
	КонецПопытки;
	
	Если СтруктураПодключения = Неопределено тогда
		Сообщить("Нет данных для подключения по фтп!");
	иначе
		Попытка
			КаталогНаСервере		=	СтруктураПодключения.КаталогНаСервере;  	
			Соединение = Новый FTPСоединение(СтруктураПодключения.ИмяFTPСервера, СтруктураПодключения.Порт,
										СтруктураПодключения.Пользователь, СтруктураПодключения.Пароль, , Истина,10);
										
			Если Соединение <> Неопределено тогда							
				Массив	=	новый Массив;
				Массив.Добавить(КаталогНаСервере);
				Массив.Добавить(Соединение);
			
				АдресВХ	=	ПоместитьВоВременноеХранилище(Массив,ЭтаФорма.УникальныйИдентификатор);
			КонецЕсли;
		Исключение
			Соединение = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если АдресВХ = "" тогда Возврат Неопределено КонецЕсли;

	
	Массив = ПолучитьИзВременногоХранилища(АдресВХ);
	КаталогНаСервере	=	Массив[0];
	Соединение			=	Массив[1];
	
	Попытка
		НужныйПуть	=	Лев(КаталогНаСервере,10) + СтрЗаменить(Лев(Данные,15),"_","/");
    	Файлы		=	Соединение.НайтиФайлы(НужныйПуть,"*");
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если Файлы.Количество() = 0 тогда
		 Возврат Неопределено;
	КонецЕсли;
	 
	Для каждого Файл из Файлы цикл 
		
		Если Файл.ИмяБезРасширения = "KODS" тогда
	
			ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
		    Соединение.Получить(Файл.ПолноеИмя,ПутьКФайлу);
			
			ТабДок = Новый ТабличныйДокумент;
			Попытка
				ТабДок.Прочитать(ПутьКФайлу);
			Исключение
				Возврат Неопределено;
			КонецПопытки;

			ТаблицаДанных	= ОбщегоНазначения.ПолучитьТЗИзМакета(ТабДок);
			
			НужнаяСтрока	=	ТаблицаДанных.Найти(Данные);
			
			Если НужнаяСтрока = Неопределено тогда
				Возврат Неопределено;
			КонецЕсли;
			
			СтруктураВозврата	=	Новый Структура;
			СтруктураВозврата.Вставить("Скидка",Число(НужнаяСтрока.Скидка));
			
			Если НужнаяСтрока.Флаг = "1" тогда
				СтруктураВозврата.Вставить("Валиден",ложь);
			иначе
				СтруктураВозврата.Вставить("Валиден",истина);
			КонецЕсли;
			
			УдалитьФайлы(ПутьКФайлу);
		ИначеЕсли Файл.ИмяБезРасширения = Данные тогда //погашенные коды - это текстовые файлы где  имя файла = сам код
			СтруктураВозврата	=	Новый Структура;
			СтруктураВозврата.Вставить("Валиден",ложь);
			Возврат СтруктураВозврата;
		КонецЕсли; 		
	КонецЦикла; 
	
	Соединение = Неопределено;
	
	Возврат СтруктураВозврата;
КонецФункции 

&НаСервере
Процедура ПогастьКод(Данные)
	Рег = РегистрыСведений.КомментарииСтатистики.СоздатьМенеджерЗаписи();//нужно было куда-то еще записать, а создавать новый рег.св. - это монополия которую хотелось избежать
	Рег.ХешНаименования	=	Строка(ТекущаяДата());
	Рег.Наименование	=	Данные;
		
	Рег.Записать();
	
	КодНом	=	Сред(Данные, СтрДлина(Данные)-10);
	Данные	=	Сред(Данные,1, СтрДлина(Данные)-11);
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("txt");
	
	Док = Новый ТекстовыйДокумент();
	Док.ДобавитьСтроку(Строка(ТекущаяКассаККМ));
	Док.ДобавитьСтроку(КодНом);
	Док.Записать(ПутьКФайлу, "windows-1251");  
	
	Если АдресВХ = "" тогда 
		Рег.ХешНаименования	=	Рег.ХешНаименования + "_ошибка";
		Рег.Записать();
		Возврат; 
	КонецЕсли;
	
	Массив = ПолучитьИзВременногоХранилища(АдресВХ);
	КаталогНаСервере	=	Массив[0];
	Соединение			=	Массив[1];
	
	НужныйПуть	=	Лев(КаталогНаСервере,10) + СтрЗаменить(Лев(Данные,15),"_","/");
	
	Попытка
		Соединение.Записать(ПутьКФайлу, НужныйПуть + Данные+".txt");
	Исключение
		Рег.ХешНаименования	=	Рег.ХешНаименования + "_ошибка";
		Рег.Записать();
		Возврат; 
	КонецПопытки;

	УдалитьФайлы(ПутьКФайлу);

	
	//Можно так но долго.. 10000 - 30 сек при записи
	//Если АдресВХ = "" тогда Возврат КонецЕсли;
	//
	//Массив = ПолучитьИзВременногоХранилища(АдресВХ);
	//КаталогНаСервере	=	Массив[0];
	//Соединение			=	Массив[1];
	//
	//Попытка
	//	НужныйПуть	=	Лев(КаталогНаСервере,10) + СтрЗаменить(Лев(Данные,15),"_","/");
	//	Файлы		=	Соединение.НайтиФайлы(НужныйПуть,"*.xlsx");
	//Исключение
	//	Возврат;
	//КонецПопытки;
	//
	//Если Файлы.Количество() = 0 тогда
	//	 Возврат;
	//КонецЕсли;
	//
	//ПутьКФайлу	=	Файлы[0].ПолноеИмя;
	//
	//ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
	//Соединение.Получить(Файлы[0].ПолноеИмя,ПутьКФайлу);
	//
	//ТабДок = Новый ТабличныйДокумент;
	//Попытка
	//	ТабДок.Прочитать(ПутьКФайлу);
	//Исключение
	//	Возврат;
	//КонецПопытки;

	//ТаблицаДанных	= ОбщегоНазначения.ПолучитьТЗИзМакета(ТабДок);
	//
	//НужнаяСтрока	=	ТаблицаДанных.Найти(Данные);
	//
	//Если НужнаяСтрока = Неопределено тогда
	//	Возврат;
	//КонецЕсли;
	//
	//НужнаяСтрока.Флаг	=	"1";
	//
	//Постр							=	новый ПостроительОтчета;
	//Постр.ВыводитьЗаголовокОтчета	= 	Ложь;	
	//Постр.ИсточникДанных			=	новый ОписаниеИсточникаДанных(ТаблицаДанных);
	//ТабДок							=	новый ТабличныйДокумент;	
	//Постр.Вывести(ТабДок); 
	//Область = ТабДок.Область(1,1,10000,1);
	//ТабДок.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоГоризонтали);	
	//
	//ТабДок.Записать(ПутьКФайлу,ТипФайлаТабличногоДокумента.XLSX);
	//
	//Соединение.Записать(ПутьКФайлу, НужныйПуть+"KODS.xlsx");

	//УдалитьФайлы(ПутьКФайлу);
КонецПроцедуры 

&НаСервере
Процедура ЗаписатьПодарки()
	Для каждого Строка из ОбработанныеАкцииПоПодаркам цикл
		Рег = РегистрыСведений.ТБКПодаркиПоАкциям.СоздатьМенеджерЗаписи();
		Если  ТабличноеПолеЧеков.Количество()>0 тогда
			Рег.ЧекККМ	=	ТабличноеПолеЧеков[0].ЧекККМСсылка;
		КонецЕсли;
		Рег.УидАкции	=	Строка.УидАкции;
		Рег.Подарок		=	Строка.Подарок;
		Рег.Сумма		=	Строка.Сумма;

		Рег.Записать();
	КонецЦикла;	
КонецПроцедуры
		
&НаКлиенте
&Вместо("ОповещениеОткрытьФормуОплатыНаличными")
Процедура ТБКОповещениеОткрытьФормуОплатыНаличными(РезультатОткрытияФормы, ДополнительныеПараметры)
	//// Вставить содержимое метода.
	//ПродолжитьВызов(РезультатОткрытияФормы, ДополнительныеПараметры);
	
	ЛогированиеБезДополнительныхДанных("ОплатаНаличными");
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		ОбработатьОтказОтОплаты();
		Возврат;
	//Вик	
	ИначеЕсли ДоступнаНефискальнаяПечать тогда
	    ДобавитьТаблицуОплат(РезультатОткрытияФормы);

		Если НужноПечататьНеФискально(РезультатОткрытияФормы) тогда
			СоздатьНефискальныйЧек();
		Иначе
			ЗавершитьОплатуТоваров(ДополнительныеПараметры.Печать);
		КонецЕсли;
	//КонецВик	
	Иначе
		ДобавитьТаблицуОплат(РезультатОткрытияФормы);
		ЗавершитьОплатуТоваров(ДополнительныеПараметры.Печать);
	КонецЕсли;

КонецПроцедуры

Функция НужноПечататьНеФискально(РезультатОткрытияФормы) 
	//наличные
	АдресТаблицы  	= РезультатОткрытияФормы.АдресТаблицыОплата;
	ТЗ 				= ПолучитьИзВременногоХранилища(АдресТаблицы);
	Для каждого Строка из ТЗ цикл
		Если Строка(Строка.ВидОплаты) <> "Наличные" тогда
			Возврат ложь;
		КонецЕсли;
	КонецЦикла;   
	
	//без марок
	Для каждого Строка из Объект.Товары цикл
		Если ОбщегоНазначения.ЭтоМаркированнаяНоменклатура(Строка.Номенклатура) тогда 
			Возврат ложь;
		КонецЕсли;
	КонецЦикла;
	
	//По времени
	ДеньТД				=	ДеньНедели(ТекущаяДата());
	ЧасТД				=	Час(ТекущаяДата());
	
	ЧасНачалаПоУмолчанию	=	19;
	ЧасНачалаКонстанта	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ЧасНачалаНефискальнаяПечать");
	Если ЧасНачалаКонстанта <> Неопределено тогда
		ЧасНачала	=	ЧасНачалаКонстанта;
	иначе
		ЧасНачала	=	ЧасНачалаПоУмолчанию;
	КонецЕсли;
	
	
	Если ДеньТД <> 6 и ДеньТД <> 7 тогда // на выходных - целый день
		Если ЧасТД < ЧасНачала тогда
			Возврат ложь;
		КонецЕсли;
	КонецЕсли;   
		
	Возврат истина;     
КонецФункции

&НаКлиенте
Процедура СоздатьНефискальныйЧек(ЭтоВторыеЭлектронки = Ложь, НужныйЧек = Неопределено)
	НовыйЧекККМ	=	СоздатьЧекККМ(ЭтоВторыеЭлектронки, НужныйЧек);
	Если НовыйЧекККМ = Неопределено тогда 
		Возврат;
	КонецЕсли;

	
	Сдача 			= Макс(Объект.Оплата.Итог("Сумма") - Объект.Товары.Итог("СуммаВсего"),0); 	
	ВыведенаСдача = Истина;
	ОставлятьФлагТаблоСдачи = Истина;
	Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаСдача;
	НадписьСуммаСдачи = Формат(Сдача, "ЧЦ=15; ЧДЦ=2; ЧН=0.00");
	
	Если СокрЛП(Строка(Объект.Организация)) = "ИП Пинкасович Д.В." тогда
		СНО	=	"Общая";	
	иначе
		СНО	=	"УСН доход-расход";
	КонецЕсли;
	
	
	Если не  ЗначениеЗаполнено(Объект.Ответственный) тогда
		НужныйКассир	=	Строка(ОбщегоНазначенияВызовСервера.ПолучитьТекущегоПродавца());
	иначе
		НужныйКассир	=	Строка(Объект.Ответственный);
	КонецЕсли;
	
	флНал = Истина;
	Если НужныйЧек<>Неопределено тогда
		Если ВидОплатыПоЧеку(НужныйЧек) <>"Наличные" тогда
			флНал = Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	ТБКНеФискальнаяПечать.НапечататьЧек(Объект.Товары, Сдача, СНО , Объект.Магазин, НужныйКассир, Объект.ТБКВторыеЭлектронки, флНал);
		
	Объект.Товары.Очистить();
	Объект.Оплата.Очистить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидОплатыПоЧеку(НужныйЧек)
	Возврат Строка(НужныйЧек.Оплата[0].ВидОплаты)
КонецФункции

&НаСервере
Функция СоздатьЧекККМ(ЭтоВторыеЭлектронки = Ложь, НужныйЧек = Неопределено)
	
	НовыйДокументЧек = Документы.ЧекККМ.СоздатьДокумент();
	НовыйДокументЧек.КассаККМ		=	ТекущаяКассаККМ;
	НовыйДокументЧек.Магазин		=	ТекущаяКассаККМ.Магазин;
	НовыйДокументЧек.Комментарий	=   "Чек н.ф.";
	
	НовыйДокументЧек.Дата	=	ТекущаяДата(); 
	НовыйДокументЧек.УстановитьНовыйНомер();
	
	НовыйДокументЧек.СтатусЧекаККМ			=	Перечисления.СтатусыЧековККМ.Аннулированный;
	НовыйДокументЧек.ВидОперации			=	Перечисления.ВидыОперацийЧекККМ.Продажа;
	
	НовыйДокументЧек.Товары.Очистить();
	НовыйДокументЧек.Оплата.Очистить();
	
	Если ЭтоВторыеЭлектронки тогда
		Для каждого СтрокаТовары из Объект.Товары цикл
			НоваяСтрока = НовыйДокументЧек.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовары);
			НоваяСтрока.Цена			=	Объект.ТБКВторыеЭлектронки[0].Цена;
			НоваяСтрока.Сумма			=	НоваяСтрока.Цена;
			НоваяСтрока.Номенклатура	=	Объект.ТБКВторыеЭлектронки[0].Номенклатура;
			
			СуммаДок	=	НоваяСтрока.Сумма;
			
			Если ЗначениеЗаполнено(Объект.ТБКВторыеЭлектронки[0].Марка) тогда
				НовСтрка	=	НовыйДокументЧек.АкцизныеМарки.Добавить();
				
				НвыйЭл	=	Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",Объект.ТБКВторыеЭлектронки[0].Марка);
				Если НвыйЭл.Пустая() тогда
					НвыйЭл						=	Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
					НвыйЭл.Номенклатура			=	Объект.ТБКВторыеЭлектронки[0].Номенклатура;
					НвыйЭл.ЗначениеШтрихкода	=	Объект.ТБКВторыеЭлектронки[0].Марка;
					
					НвыйЭл.Записать();
				КонецЕсли;
				
				НовСтрка.АкцизнаяМарка		=	НвыйЭл.Ссылка;
				НовСтрка.КлючСвязи			=	1;
				НовСтрка.ШтрихкодУпаковки	=	НвыйЭл.Ссылка;
			КонецЕсли;

		КонецЦикла;	
	
	иначе
		Для каждого СтрокаТовары из Объект.Товары цикл
			НоваяСтрока = НовыйДокументЧек.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовары);	
		КонецЦикла;
	КонецЕсли;
	
	
	Если НужныйЧек = Неопределено тогда	
		НоваяСтрока = НовыйДокументЧек.Оплата.Добавить(); 		
		НоваяСтрока.ВидОплаты				=	Справочники.ВидыОплатЧекаККМ.НайтиПоНаименованию("Наличные");
		НоваяСтрока.Сумма					=	Объект.Товары.Итог("СуммаВсего"); 
	иначе
		НоваяСтрока = НовыйДокументЧек.Оплата.Добавить(); 		
		НоваяСтрока.ВидОплаты				=	Справочники.ВидыОплатЧекаККМ.НайтиПоНаименованию("Наличные");
		НоваяСтрока.Сумма					=	СуммаДок; 
	КонецЕсли;
	
	Попытка
		Если НовыйДокументЧек.ПроверитьЗаполнение()  Тогда
			НовыйДокументЧек.мЗакрытиеСмены	=	Истина;
			НовыйДокументЧек.Записать(РежимЗаписиДокумента.Проведение);
			
			//Марк 2024-09-17
			Ном = 1;
			Для каждого Строка Из НовыйДокументЧек.АкцизныеМарки Цикл
				
				Если ЗначениеЗаполнено(Строка.ШтрихкодУпаковки) Тогда
					Рег = РегистрыСведений.ТБКМаркиДляСписания.СоздатьМенеджерЗаписи();
					Рег.Чек	= НовыйДокументЧек.Ссылка;                                   
					Рег.Ном = Ном;
					Рег.Номенклатура = Строка.ШтрихкодУпаковки.Номенклатура;
					Рег.Харкатеристика = Строка.ШтрихкодУпаковки.Характеристика;
					Рег.Марка =  Строка(Строка.АкцизнаяМарка);
					Рег.КлючСвязи = Строка.КлючСвязи;
					Рег.КоличествоВУпаковке = 1; 
					
					Рег.Записать();
					
					Ном = Ном+1;
				КонецЕсли;
			КонецЦикла; 						
			//КонецМарк
			
		иначе
			ТекстСообщения = "Ошибка при формировании чека н.ф.!";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;    
		КонецЕсли;
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено; 
	КонецПопытки; 
	
	Возврат НовыйДокументЧек.Ссылка;	
КонецФункции

&НаСервереБезКонтекста
Процедура ПогаситьКодУценкиНаСервере(КодУценки,НужныйЧек)
	Рег = РегистрыСведений.КомментарииСтатистики.СоздатьМенеджерЗаписи();
	Рег.Наименование	=	КодУценки;
	Рег.ХешНаименования	=	ТекущаяДата();
	
	Если ТекущаяДата()>'20240301' тогда
		Рег.ХешНаименования	=	Рег.ХешНаименования + ";" + НужныйЧек.Номер;	
	КонецЕсли;

	
	
	Если ЗначениеЗаполнено(НужныйЧек) тогда
		Рег.Наименование	=	Рег.Наименование + "/"+НужныйЧек.Номер;
		
		Для каждого Строка из НужныйЧек.Товары цикл
			Рег.Наименование =   Рег.Наименование + "/"+Строка.Номенклатура.Код + "/" + Строка.СуммаРучнойСкидки + "/" + Строка.Сумма;
		КонецЦикла;
	КонецЕсли;
	
	Рег.Записать();
КонецПроцедуры

&НаСервере
Процедура ПогаситьСертификатыНаСервере()
	
	Для каждого Строка из ПогашенныеКодыСертификатов цикл
		Рег = РегистрыСведений.ТБКПогашенныеСертификаты.СоздатьМенеджерЗаписи();
		
		Рег.Сертификат	=	Строка.КодСертификата;
		
		Если  ТабличноеПолеЧеков.Количество()>0 тогда
			Рег.Чек	=	ТабличноеПолеЧеков[0].ЧекККМСсылка;
		КонецЕсли;

		Рег.Сумма		=	Строка.Сумма;
		
		
		Рег.Записать();
	КонецЦикла;
	
	//Пробуем отправить сразу
	Попытка
		Если Адрес_ВебСоединение  = "" тогда
			Веб_Соединение	=	ПодключитьсяКУТ();
			Если Веб_Соединение = Неопределено тогда возврат КонецЕсли;
		иначе
			Попытка
				Массив = ПолучитьИзВременногоХранилища(Адрес_ВебСоединение);
				Веб_Соединение	=	Массив[0]; 
				
				Если Веб_Соединение = Неопределено тогда//повторное подключение
					Веб_Соединение	=	ПодключитьсяКУТ();
				КонецЕсли;
			Исключение
				Сообщить("Не удалось подключиться к УТ. Попробуйте выполнить действие позже.");
				Возврат; 
			КонецПопытки;
		КонецЕсли;

		
		Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	ТБКПогашенныеСертификаты.Чек КАК Чек,
	      	 	             |	ТБКПогашенныеСертификаты.Сертификат КАК Сертификат,
	      	 	             |	ТБКПогашенныеСертификаты.Сумма КАК Сумма
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКПогашенныеСертификаты КАК ТБКПогашенныеСертификаты
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБКПогашенныеСертификаты.ОтправленоВУТ");

		Рез = Запрос.Выполнить().Выбрать();
		Пока Рез.Следующий() цикл
			Структура = Новый Структура;

			Структура.Вставить("Чек", 			Строка(Рез.Чек));
			Структура.Вставить("Сертификат", 	Строка(Рез.Сертификат));
			Структура.Вставить("Сумма",			Строка(Рез.Сумма));	
			Структура.Вставить("Магазин",		Строка(Рез.Чек.Магазин));	

			JS = ОбщегоНазначения.СтруктураВjson_Общая(Структура);
			
			Ответ	=	Веб_Соединение.WriteCert(JS);

			Если Ответ тогда
				рег = РегистрыСведений.ТБКПогашенныеСертификаты.СоздатьНаборЗаписей();
				рег.Отбор.Сертификат.Установить(Рез.Сертификат);	

				рег.Прочитать();
				рег[0].ОтправленоВУТ = Истина;
				рег.Записать();		
			КонецЕсли;
			
		КонецЦикла;	
	Исключение
	КонецПопытки;
КонецПроцедуры   

&НаСервере
Процедура ПогаситьКодыНовойУценки()	
	Для каждого Строка из КодыНовойУценки цикл
		Рег = РегистрыСведений.ТБКУценка_Новая.СоздатьМенеджерЗаписи();
		
		Рег.Номенклатура	=	Строка.Номенклатура;
		Рег.Код				=	Строка.КодНовойУценки;		
		Рег.ПричинаУценки	=	Строка.ПричинаУценки;	
		Рег.СуммаСкидки		=	Строка.СуммаСкидки;	
		Рег.ПроцентСкидки	=	Строка.ПроцентСкидки;	
		Рег.Цена			=	Строка.Цена;	
		Если  ТабличноеПолеЧеков.Количество()>0 тогда
			Рег.Чек	=	ТабличноеПолеЧеков[0].ЧекККМСсылка;
		КонецЕсли;  		
		
		Рег.Записать();
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
&Перед("СоздатьЧекиЗавершение")
Процедура ТБКСоздатьЧекиЗавершение1(Отказ, ПечатьПакетаДокументовВозврат, МассивСсылокЧеков, Печать)//не работает, вместо нее "ВместоПроцедурыТБКСоздатьЧекиЗавершение"
	Если Объект.Товары.Количество() =0 тогда возврат; КонецЕсли;

//	Если МассивСсылокЧеков.количество() = 1 тогда
//		НужныйЧек	=	МассивСсылокЧеков[0];
//	иначе
//		НужныйЧек = Неопределено;
//	КонецЕсли;
//	
//	//Вик 2024-03-19
//	ВремяНаЧек	=	ТекущаяДата() - НачалоЧека;
//	Если НужныйЧек<> Неопределено и  ВремяНаЧек> 60 тогда
//		ЗаписатьДанныеДолгийЧек(НужныйЧек, ВремяНаЧек);
//	КонецЕсли;		
//	//

//	
//	Для каждого Строка из Объект.Товары цикл
//		Если ЗначениеЗаполнено(Строка.КодУценки) тогда
//			ПогаситьКодУценкиНаСервере(Строка.КодУценки,НужныйЧек);			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	//Вик 2024-03-12  	
//	Для Каждого Строка из Объект.АкцизныеМарки Цикл		
//		Если ЗначениеЗаполнено(Строка.ПроверкаМаркиИНН) тогда
//			ЗаписатьДанныеОНевернойОрганизации(Строка.ПроверкаМаркиИНН,НужныйЧек, СТрока.НомерСтроки, Строка.КодАкцизнойМарки);	
//		КонецЕсли; 		
//	КонецЦикла;  
//	//
//	
//	
//	//Вик 2022_04_22 	
//	Если (ЗначениеЗаполнено(Объект.ТБК_IDКлиента) или СтрДлина(СокрЛП(ТелефонКлиента)) = 12) и НужныйЧек <> Неопределено тогда
//		флНадоНачислить		=	истина;
//		флНадоСделатьЗапись	=	Истина;	
//		
//		Если ЗначениеЗаполнено(КодАкции) тогда флНадоНачислить		= Ложь; КонецЕсли;
//		Если ПокупкаСотрудника			 тогда флНадоСделатьЗапись 	= Ложь; КонецЕсли;
//		
//		КолСписано	=	0;
//		Для каждого Строка из Объект.Товары цикл
//			//Если ЗначениеЗаполнено(Строка.КодУценки) 			тогда флНадоНачислить	=	Ложь; КонецЕсли;
//			//Если ЗначениеЗаполнено(Строка.ЗаказПокупателя)	тогда флНадоНачислить	=	Ложь; КонецЕсли;
//			Если Строка.флПроставленаСкидкаПоАкции 				тогда флНадоНачислить	=	Ложь; КонецЕсли; 
//			Если ЗначениеЗаполнено(Строка.ТБК_КоличествоБаллов)	тогда флНадоНачислить	=	Ложь; КонецЕсли;
//			Если Строка.СуммаРучнойСкидки > 0 					тогда флНадоНачислить	=	Ложь; КонецЕсли; 
//			
//			КолСписано	=	КолСписано + Строка.ТБК_КоличествоБаллов;
//		КонецЦикла;
//			
//		Если Строка(Объект.ВидОперации) = "Возврат" тогда
//			флНадоНачислить = ПроверитьЧекНаВозвратБаллов(НужныйЧек);
//		КонецЕсли;

//	    Если флНадоСделатьЗапись тогда
//			ДобавитьЗаписьВИсториюПокупок(НужныйЧек, Объект.ТБК_IDКлиента, флНадоНачислить, КолСписано, ТелефонКлиента);
//		КонецЕсли;
//		
//		Объект.ТБК_IDКлиента			=	"";
//		КоличествоБалловМожноСписать	=	0;
//		КоличествоНакопленныхБаллов		=	0;
//		ИмяКлиента						=	"";
//		ТелефонКлиента					=	"";
//		ПочтаКлиента					=	"";
//		КоличествоБалловСписано			=	0;
//		Элементы.ТелефонКлиента.ТолькоПросмотр	=	Ложь;
//	КонецЕсли;
//	
//	Если ПокупкаСотрудника и НужныйЧек <> Неопределено тогда
//		ПокупкаСотрудника	=	ложь;
//		ЗаписатьДанныеОПокупкеСотрудника(НужныйЧек, Объект.Продавец);
//	КонецЕсли;
//	ПроверитьВозвратНаПокупкуСотрудника(НужныйЧек,  Объект.Продавец);  
//	//
//	
//	//Марк
//	Если НужныйЧек <> Неопределено И НЕ Объект.ЗаказПокупателя.Пустая() Тогда 	
//		ЗакрытьЗаказКлиента(Объект.ЗаказПокупателя);
//		НомерЗаказаПокупателя	=	"";
//		Элементы.НомерЗаказаПокупателя.ТолькоПросмотр = Ложь;
//	КонецЕсли;
//	//КонецМарк
//	//Марк 2024-03-13
//	Если НужныйЧек <> Неопределено Тогда
//		ЗаписьДанныхРучныхСкидок(НужныйЧек);
//	КонецЕсли;	
//	//КонецМарк   
//	
//	//Вик 2024-08-31
//	Если Объект.ТБКВторыеЭлектронки.Количество()>0 тогда
//		СоздатьНефискальныйЧек(Истина, НужныйЧек);
//	КонецЕсли;
//	//	
//	
//	//Вик 2024-09-11
//	Если НужныйЧек <> Неопределено тогда
//		Если Объект.ТБКМаркиДляБК.Количество()>0 тогда
//			ЗаписатьМаркиДляБК(НужныйЧек);
//		КонецЕсли;
//			
//	КонецЕсли;

КонецПроцедуры    

&НаСервере
Процедура ЗаписатьМаркиДляБК(НужныйЧек)
	Ном = 1;
	Для каждого Строка из Объект.ТБКМаркиДляБК цикл
		Рег = РегистрыСведений.ТБКМаркиДляСписания.СоздатьМенеджерЗаписи();
		Рег.Чек	= НужныйЧек.Ссылка;
		Рег.Ном = Ном;
		ЗаполнитьЗначенияСвойств(Рег,Строка);
		Рег.Записать();
		
		Ном = Ном+1;
	КонецЦикла;
 	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ЗакрытьЗаказКлиента(ЗаказПокуп)
	
	Заказ = ЗаказПокуп.ПолучитьОбъект();
	Заказ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.Закрыт");
	Попытка
		Заказ.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Примечание,,,"Не удалось записать заказ: "+Заказ);
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьВозвратНаПокупкуСотрудника(НужныйЧек, Продавец);
	Если НужныйЧек<>Неопределено тогда
		Если ЗначениеЗаполнено(НужныйЧек.ЧекККМПродажа) тогда
			Запрос	=	Новый Запрос("ВЫБРАТЬ
			      	 	             |	ТБК_ПокупкиСотрудников.Чек КАК Чек
			      	 	             |ИЗ
			      	 	             |	РегистрСведений.ТБК_ПокупкиСотрудников КАК ТБК_ПокупкиСотрудников
			      	 	             |ГДЕ
			      	 	             |	ТБК_ПокупкиСотрудников.Чек = &Чек");
			Запрос.УстановитьПараметр("Чек",НужныйЧек.ЧекККМПродажа);
			
			Если НЕ Запрос.Выполнить().Пустой() тогда
				ЗаписатьДанныеОПокупкеСотрудника(НужныйЧек, Продавец);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПроверитьЧекНаВозвратБаллов(НужныйЧек);
	Если ЗначениеЗаполнено(НужныйЧек.ЧекККМПродажа) тогда
		Запрос	=	Новый Запрос("ВЫБРАТЬ
		      	 	             |	ТБК_ИсторияПокупокРозница.флНадоНачислить КАК флНадоНачислить
		      	 	             |ИЗ
		      	 	             |	РегистрСведений.ТБК_ИсторияПокупокРозница КАК ТБК_ИсторияПокупокРозница
		      	 	             |ГДЕ
		      	 	             |	ТБК_ИсторияПокупокРозница.Чек = &Чек");
		Запрос.УстановитьПараметр("Чек",НужныйЧек.ЧекККМПродажа);
		Рез = Запрос.Выполнить().Выгрузить();
		
		Если рез.Количество() >0 тогда
			Возврат Рез[0].флНадоНачислить 
		иначе
			Возврат истина;
		КонецЕсли;
	КонецЕсли;    	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеОПокупкеСотрудника(НужныйЧек, Продавец)
	Рег 			= РегистрыСведений.ТБК_ПокупкиСотрудников.СоздатьМенеджерЗаписи();
	Если ЗначениеЗаполнено(НужныйЧек.Продавец) тогда
		Рег.Продавец	=	НужныйЧек.Продавец;
	ИначеЕсли ЗначениеЗаполнено(Продавец) тогда
		Рег.Продавец	=	Продавец;
	ИначеЕсли НужныйЧек.Товары.Количество() >0 тогда 
		Рег.Продавец	=	НужныйЧек.Товары[0].Продавец;	
	КонецЕсли;
	
	Рег.Чек			=	НужныйЧек;
	Рег.Записать();	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВИсториюПокупок(НужныйЧек, ТБК_IDКлиента, флНадоНачислить, КолСписано, ТелефонКлиента)
	Рег 							= РегистрыСведений.ТБК_ИсторияПокупокРозница.СоздатьМенеджерЗаписи();
	Если ЗначениеЗаполнено(ТБК_IDКлиента) тогда
		Рег.IDКлиента					=	ТБК_IDКлиента;
	иначе
		Рег.IDКлиента					=	Сред(ТелефонКлиента,2);
	КонецЕсли;
	
	Рег.ВидОперации					=	НужныйЧек.ВидОперации;
	Рег.Чек     					=	НужныйЧек;
	Рег.Дата						=	ТекущаяДата();
	Рег.Товары						=	Новый ХранилищеЗначения(Объект.Товары.Выгрузить());
	Рег.Сумма						=	НужныйЧек.СуммаДокумента;
	Рег.флНадоНачислить				=	флНадоНачислить;
	Рег.КоличествоСписанныхБаллов	=	КолСписано;	
	
	Рег.Записать();	
	
	Если КолСписано >0 тогда //отправляем информацию сразу в ут, а не ждем обмен, чтобы нельзя было два раза списать баллы
		Попытка
			//ТБК_ПрограммаЛояльности.ОтправкаДанныхИсторияПокупок(Адрес_ВебСоединение);
			ТекстФоновойПроцедуры = "ТБК_ПрограммаЛояльности.ОтправкаДанныхИсторияПокупок(Адрес_ВебСоединение)";
			ФоновоеВыполнение.ЗапуститьФоновоеВыполнение(ТекстФоновойПроцедуры, Новый Структура("Адрес_ВебСоединение", Адрес_ВебСоединение));  
		Исключение
			ЗаписьЖурналаРегистрации("информация",УровеньЖурналаРегистрации.Примечание,,,ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
&Вместо("ОповещениеОткрытьФормуВыбораЧекаПриВозврате")
Процедура ТБКОповещениеОткрытьФормуВыбораЧекаПриВозврате(РезультатОткрытияФормы, ДополнительныеПараметры)
	// &ЗамерПроизводительности  
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
	Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ВыборЧекаПриВозврате");	
	
	Если РезультатОткрытияФормы <> Неопределено Тогда
		
		ЧекККМПродажаОснование = РезультатОткрытияФормы.ЧекККМ;
		//Вик 2021-11-18
		//Если ЗначениеЗаполнено(ЧекККМПродажаОснование) Тогда
		//	Если не ОбщегоНазначенияВызовСервера.ПроверитьЧекНаНаличиеСкидок(ЧекККМПродажаОснование) тогда
		//		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Возврат чека не возможен","В выбранном чеке присутсвует уцененный товар!");
		//		Возврат;
		//	КонецЕсли;
		//КонецЕсли;
		//КонецВик
		
		ДополнительныеПараметры = Новый Структура;
		Если ЗначениеЗаполнено(ЧекККМПродажаОснование) Тогда
			ДополнительныеПараметры.Вставить("ЧекККМПродажаОснование", ЧекККМПродажаОснование);
		Иначе
			ДополнительныеПараметры.Вставить("ЧекККМПродажаОснование",
				ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка"));
		КонецЕсли;
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВыбораПричиныВозврата", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораПричиныВозврата",,
			УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);

КонецПроцедуры

&НаКлиенте
Процедура ТБКDebug_ВнешнееСобытиеПосле(Команда)
	ТБКВнешнееСобытиеВместо("","Штрихкод",Debug_Марка);
КонецПроцедуры

//Вик 2021-12-02
&НаКлиенте
&После("НазначитьАвтоматическиеСкидкиКлиент")
Процедура ТБКНазначитьАвтоматическиеСкидкиКлиент(ТолькоСообщенияПослеОформления, НеВыводитьСообщения, ПараметрыДляОплаты)
	Попытка
		Если ЗначениеЗаполнено(флУдаленПодарок) тогда
			Возврат;
		КонецЕсли;

		флНадо	=	Ложь;
		
		//2023-09-13 Не даем оплачивать пока не рассчиталась скидка
		Элементы.КартинкаЧО06ПлатежнаяКарта.Доступность	=	ложь;
		Элементы.КартинкаЧО07СложнаяОплата.Доступность	=	ложь;
		Элементы.КартинкаЧО05Наличные.Доступность		=	ложь;  
		//       
		СтруктураПодарки	=	Новый Структура();
		ОбработатьСкидкиИзУТ(флНадо,,СтруктураПодарки);
		
		//Вик. Обработка подарков 2023-10-12
		Если СтруктураПодарки.Свойство("СЗПодарки") тогда
			Если СтруктураПодарки.СЗПодарки.Количество()>0 тогда
				ОТборУидАкции	=	Новый Структура;
				ОТборУидАкции.Вставить("УидАкции",  СтруктураПодарки.УидАкции);
				
				Если ОбработанныеАкцииПоПодаркам.НайтиСтроки(ОТборУидАкции).Количество() = 0 тогда
				
					НовСтрока	=	ОбработанныеАкцииПоПодаркам.Добавить();
					НовСтрока.УидАкции	=	 СтруктураПодарки.УидАкции;
					
					Подарок	=	Неопределено;
					
					ПараметрыОткрытия	=	новый Структура;
					ПараметрыОткрытия.Вставить("СЗПодарки", СтруктураПодарки.СЗПодарки); 
					Оповещение = Новый ОписаниеОповещения("ПослеОткрытияФормы_ТБКФормаВыбораПодарка",ЭтотОбъект,НовСтрока);

					ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаВыбораПодарка",       
						ПараметрыОткрытия, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);  
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//
		
		
		//2023-09-13 даем оплачивать после того как рассчиталась скидка
		Элементы.КартинкаЧО06ПлатежнаяКарта.Доступность	=	Истина;
		Элементы.КартинкаЧО07СложнаяОплата.Доступность	=	Истина;
		Элементы.КартинкаЧО05Наличные.Доступность		=	Истина;  
		//
		//Если флНадо тогда
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			ОбновитьФормуНаКлиенте(); 	
		//КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
КонецПроцедуры

&НаСервере
Процедура ОбработатьСкидкиИзУТ(флНадо, ФлПринудительныйПересчет = Ложь, СтруктураПодарки = Неопределено)
	Если ЗначениеЗаполнено(КодАкции) тогда Возврат КонецЕсли;
	Если ПокупкаСотрудника тогда Возврат КонецЕсли;
	Для каждого Строка из Объект.Товары цикл
		Если ЗначениеЗаполнено(Строка.КодУценки) тогда Возврат КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ЗаказПокупателя) тогда Возврат КонецЕсли;
	КонецЦикла;  
	Если КодыНовойУценки.Количество() >0 тогда Возврат КонецЕсли;

	
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ХранилищеСертификатов.Наименование КАК Наименование,
	      	 	             |	ХранилищеСертификатов.Идентификатор КАК Идентификатор,
	      	 	             |	ХранилищеСертификатов.Сертификат КАК Сертификат
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ХранилищеСертификатов КАК ХранилищеСертификатов
	      	 	             |ГДЕ
	      	 	             |	ХранилищеСертификатов.ДатаНачала <= &ТекДат
	      	 	             |	И ХранилищеСертификатов.ДатаОкончания >= &ТекДат
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	Наименование");
	Запрос.УстановитьПараметр("ТекДат",НачалоДня(ТекущаяДата()));
	Рез = запрос.Выполнить().Выгрузить();
	

	Для каждого Строка из рез цикл
		НужНаименование	=	Строка.Сертификат.Получить();//изменения от 2024-04-17
		Если не ЗначениеЗаполнено(НужНаименование) тогда
			НужНаименование	=	Строка.Наименование;
		КонецЕсли;
		
		Позиция1 = СтрНайти(НужНаименование,"/",,,1);
		Позиция2 = СтрНайти(НужНаименование,"/",,,2);
		Позиция3 = СтрНайти(НужНаименование,"/",,,3);
		Позиция4 = СтрНайти(НужНаименование,"/",,,4);
		Позиция5 = СтрНайти(НужНаименование,"/",,,5);
		Позиция6 = СтрНайти(НужНаименование,"/",,,6);
		Позиция7 = СтрНайти(НужНаименование,"/",,,7);
		Позиция8 = СтрНайти(НужНаименование,"/",,,8);
		Позиция9 = СтрНайти(НужНаименование,"/",,,9);
		
		ТипАкции				=	Сред(НужНаименование,1,Позиция1-1);
		Скидка					=	Сред(НужНаименование,Позиция1+1,Позиция2-Позиция1-1);
		ТоварВПодарок			=	Сред(НужНаименование,Позиция2+1,Позиция3-Позиция2-1);
		СуммаЧека				=	Сред(НужНаименование,Позиция3+1,Позиция4-Позиция3-1);
		КоличествоНоменклатуры	=	Сред(НужНаименование,Позиция4+1,Позиция5-Позиция4-1);
		Номенклатура			=	Сред(НужНаименование,Позиция5+1,Позиция6-Позиция5-1);
		КоличествоШагов			=	Сред(НужНаименование,Позиция6+1,Позиция7-Позиция6-1);
		КоличествоЧеков			=	Сред(НужНаименование,Позиция7+1,Позиция8-Позиция7-1);
		НоменклатураИсключение	=	Сред(НужНаименование,Позиция8+1,Позиция9-Позиция8-1);
		
		Если ТипАкции = "Скидка на самую дешёвую позицию" тогда
			ОбработатьСкидкуНаСамуюДешевуюПозициюВЧеке(Скидка,КоличествоНоменклатуры,Номенклатура, флНадо, НоменклатураИсключение);
		КонецЕсли;	
		
		Если ТипАкции = "Процентная скидка на товар" тогда
			ОбработатьСкидкуПроцентнаяСкидкаНаТовар(Скидка,Номенклатура, флНадо, ФлПринудительныйПересчет, НоменклатураИсключение);
		КонецЕсли;
		
		Если ТипАкции = "Скидка на товары с шагом в процентах" тогда
			ОбработатьСкидкуНаТоварСШагомВПроцентах(Скидка, Число(КоличествоШагов), Номенклатура, флНадо, ФлПринудительныйПересчет, НоменклатураИсключение);
		КонецЕсли;
		
		Если ТипАкции = "Подарок за товар" тогда
			ОбработатьПодарокЗаТовар(ТоварВПодарок, Номенклатура, КоличествоНоменклатуры, СуммаЧека,  КоличествоЧеков, СтруктураПодарки, Строка.Идентификатор, НоменклатураИсключение);
		КонецЕсли;


	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ОбработатьСкидкуНаСамуюДешевуюПозициюВЧеке(Скидка,КоличествоНоменклатуры,Номенклатура, флНадо, НоменклатураИсключение)
	//Проверяем выполняется ли условие по номенклатуре	
	СзНоменклатура = Новый СписокЗначений;

	КопияНом =  Номенклатура;
	Пока Найти(КопияНом,"_") цикл
		КДобавлению = Сред(КопияНом,1,11);
		СзНоменклатура.Добавить(КДобавлению);
		
		КопияНом	=	Сред(КопияНом,13);
	КонецЦикла;
	Если КопияНом <> "" тогда
		СзНоменклатура.Добавить(КопияНом);
	КонецЕсли;
	//
	
	//Исключения
	СзНоменклатураИсключения = Новый СписокЗначений;

	КопияНомИскл =  НоменклатураИсключение;
	Пока Найти(КопияНомИскл,"_") цикл
		КДобавлению = Сред(КопияНомИскл,1,11);
		СзНоменклатураИсключения.Добавить(КДобавлению);
		
		КопияНомИскл	=	Сред(КопияНомИскл,13);
	КонецЦикла;
	
	Если КопияНомИскл <> "" тогда
		СзНоменклатураИсключения.Добавить(КопияНомИскл);
	КонецЕсли;
	//

		
	ВСегоПодходящихНоменклатур	=	0;
	ЦенаМин						=	1000000000;
	СамаяДешеваяСтрока			=	Неопределено;
	
	Для каждого СтрокаТовары Из Объект.Товары цикл
		//Доп обработка БК
		Если Найти(Строка(СтрокаТовары.Номенклатура), " БК") тогда
			НужНом	=	Справочники.Номенклатура.НайтиПоНаименованию(СтрЗаменить(СтрокаТовары.Номенклатура.Наименование, " БК",""));
		иначе
			НужНом	=	СтрокаТовары.Номенклатура;
		КонецЕсли;
		
		ПК	=	НужНом.ПолныйКод();
		
		флЭтоИсключение	=	Ложь;
		Для каждого СтрокаСписка из СзНоменклатураИсключения цикл
			Если Найти(ПК,СтрокаСписка.Значение) тогда
				флЭтоИсключение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		Если флЭтоИсключение тогда
			Продолжить;
		КонецЕсли;  		

		
		Для каждого СтрокаСписка из СзНоменклатура цикл
			Если Найти(ПК,СтрокаСписка.Значение) тогда
				ВСегоПодходящихНоменклатур = ВСегоПодходящихНоменклатур + СтрокаТовары.КоличествоУпаковок;
				ЦенаМин	=	Мин(ЦенаМин,СтрокаТовары.цена);
				
				Если СтрокаТовары.цена <= ЦенаМин тогда
					СамаяДешеваяСтрока	=	СтрокаТовары;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	//
	
	Если ВСегоПодходящихНоменклатур >= Число(КоличествоНоменклатуры) тогда
		СуммаВозможнойСкидки	=	Окр((ЦенаМин/100) * Скидка,0);
		СуммаСкидкиУжеПроставлено	=	0;
		Если СамаяДешеваяСтрока.СуммаРучнойСкидки = 0 тогда //обнуляем скидки
			Для каждого СтрокаТовары Из Объект.Товары цикл 
				СтрокаТовары.СуммаРучнойСкидки		=	0;
				СтрокаТовары.ПроцентРучнойСкидки	=	0;
				СтрокаТовары.Сумма					=	СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок;
			КонецЦикла; 	
		иначе			
			
			Для каждого СтрокаТовары Из Объект.Товары цикл
				СуммаСкидкиУжеПроставлено = СуммаСкидкиУжеПроставлено + СтрокаТовары.СуммаРучнойСкидки;
			КонецЦикла; 	
		КонецЕсли;
		
		
		Если СуммаВозможнойСкидки <= СуммаСкидкиУжеПроставлено тогда//ничего делать не нужно
			Возврат;
		КонецЕсли;
		
		Для каждого СтрокаТовары Из Объект.Товары цикл //Отчищаем скидки
			СтрокаТовары.СуммаРучнойСкидки		=	0;
			СтрокаТовары.ПроцентРучнойСкидки	=	0;
			СтрокаТовары.Сумма					=	СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок;
		КонецЦикла;
		
		СамаяДешеваяСтрока.СуммаРучнойСкидки			=	СуммаВозможнойСкидки;
		СамаяДешеваяСтрока.Сумма						=	СамаяДешеваяСтрока.Сумма - СуммаВозможнойСкидки;
		СамаяДешеваяСтрока.флПроставленаСкидкаПоАкции	=	Истина;//При смене количества -  идет пересчет процента скидки. а После этого в зависимости от прцента идет пересчет суммы скидки. плохо сделано фирмой 1с
		флНадо	=	Истина;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСкидкуПроцентнаяСкидкаНаТовар(Скидка,Номенклатура, флНадо, ФлПринудительныйПересчет = Ложь, НоменклатураИсключение)
	//Проверяем выполняется ли условие по номенклатуре	
	СзНоменклатура = Новый СписокЗначений;

	КопияНом =  Номенклатура;
	Пока Найти(КопияНом,"_") цикл
		КДобавлению = Сред(КопияНом,1,11);
		СзНоменклатура.Добавить(КДобавлению);
		
		КопияНом	=	Сред(КопияНом,13);
	КонецЦикла;
	
	Если КопияНом <> "" тогда
		СзНоменклатура.Добавить(КопияНом);
	КонецЕсли;
	
	//Исключения
	СзНоменклатураИсключения = Новый СписокЗначений;

	КопияНомИскл =  НоменклатураИсключение;
	Пока Найти(КопияНомИскл,"_") цикл
		КДобавлению = Сред(КопияНомИскл,1,11);
		СзНоменклатураИсключения.Добавить(КДобавлению);
		
		КопияНомИскл	=	Сред(КопияНомИскл,13);
	КонецЦикла;
	
	Если КопияНомИскл <> "" тогда
		СзНоменклатураИсключения.Добавить(КопияНомИскл);
	КонецЕсли;
	//

	
	СуммаСкидкиУжеПроставлено	=	0;
	СуммаВозможнойСкидки		=	0;
	Для каждого СтрокаТовары Из Объект.Товары цикл
		СуммаСкидкиУжеПроставлено = СуммаСкидкиУжеПроставлено + СтрокаТовары.СуммаРучнойСкидки;
	КонецЦикла;


	
	СЗ_СтрокиДляСкидки	=	Новый СписокЗначений;
	Для каждого СтрокаТовары Из Объект.Товары цикл
		
		//Доп обработка БК
		Если Найти(СтрокаТовары.Номенклатура.Наименование, " БК") тогда
			НужНом	=	Справочники.Номенклатура.НайтиПоНаименованию(СтрЗаменить(СтрокаТовары.Номенклатура.Наименование, " БК",""));
		иначе
			НужНом	=	СтрокаТовары.Номенклатура;
		КонецЕсли;
		
		ПК	=	НужНом.ПолныйКод();
		
		флЭтоИсключение	=	Ложь;
		Для каждого СтрокаСписка из СзНоменклатураИсключения цикл
			Если Найти(ПК,СтрокаСписка.Значение) тогда
				флЭтоИсключение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		Если флЭтоИсключение тогда
			Продолжить;
		КонецЕсли;

		
		Для каждого СтрокаСписка из СзНоменклатура цикл
			Если Найти(ПК,СтрокаСписка.Значение) тогда
				СуммаВозможнойСкидки	=	СуммаВозможнойСкидки + (СтрокаТовары.Цена/100 * Скидка) * СтрокаТовары.КоличествоУпаковок;
				СЗ_СтрокиДляСкидки.Добавить(СтрокаТовары); 
				   				
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
	Если не ФлПринудительныйПересчет тогда
		Если СуммаВозможнойСкидки <= СуммаСкидкиУжеПроставлено тогда//ничего делать не нужно
			Возврат;
		КонецЕсли;   
	КонецЕсли;
	
	Для каждого СтрокаТовары Из Объект.Товары цикл //Отчищаем скидки
		СтрокаТовары.СуммаРучнойСкидки		=	0;
		СтрокаТовары.ПроцентРучнойСкидки	=	0;
		СтрокаТовары.Сумма					=	СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок;
	КонецЦикла;

	
	Для каждого СтрокаТовары Из СЗ_СтрокиДляСкидки цикл
		СтрокаТовары.Значение.СуммаРучнойСкидки				=	Окр((СтрокаТовары.Значение.Цена/100) * Скидка,0) * СтрокаТовары.Значение.КоличествоУпаковок;
		СтрокаТовары.Значение.Сумма							=	СтрокаТовары.Значение.Сумма - СтрокаТовары.Значение.СуммаРучнойСкидки;
		СтрокаТовары.Значение.флПроставленаСкидкаПоАкции	=	Истина; //При смене количества -  идет пересчет процента скидки. а После этого в зависимости от прцента идет пересчет суммы скидки. плохо сделано фирмой 1с
		флНадо	=	Истина;
	КонецЦикла;
	
	//
КонецПроцедуры 

&НаСервере
Процедура ОбработатьСкидкуНаТоварСШагомВПроцентах(Скидка,КоличествоШагов, Номенклатура, флНадо, ФлПринудительныйПересчет = Ложь, НоменклатураИсключение)
	
	
	//Проверяем выполняется ли условие по номенклатуре	
	СзНоменклатура = Новый СписокЗначений;

	КопияНом =  Номенклатура;
	Пока Найти(КопияНом,"_") цикл
		КДобавлению = Сред(КопияНом,1,11);
		СзНоменклатура.Добавить(КДобавлению);
		
		КопияНом	=	Сред(КопияНом,13);
	КонецЦикла;
	
	Если КопияНом <> "" тогда
		СзНоменклатура.Добавить(КопияНом);
	КонецЕсли;
	
	//Исключения
	СзНоменклатураИсключения = Новый СписокЗначений;

	КопияНомИскл =  НоменклатураИсключение;
	Пока Найти(КопияНомИскл,"_") цикл
		КДобавлению = Сред(КопияНомИскл,1,11);
		СзНоменклатураИсключения.Добавить(КДобавлению);
		
		КопияНомИскл	=	Сред(КопияНомИскл,13);
	КонецЦикла;
	
	Если КопияНомИскл <> "" тогда
		СзНоменклатураИсключения.Добавить(КопияНомИскл);
	КонецЕсли;
	//

	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");

	Если не ФлПринудительныйПересчет тогда
		СуммаСкидкиУжеПроставлено	=	0;
		СуммаВозможнойСкидки		=	0;
		Для каждого СтрокаТовары Из Объект.Товары цикл
			СуммаСкидкиУжеПроставлено = СуммаСкидкиУжеПроставлено + СтрокаТовары.СуммаРучнойСкидки;
		КонецЦикла;
		
		СЗ_СтрокиДляСкидки	=	Новый СписокЗначений;
		
		СуммаВозможнойСкидки	=	ДокументОбъект.РассчитатьВозможнуюСкидкуПоШагу(Скидка, КоличествоШагов, СзНоменклатура);
		
		Если СуммаВозможнойСкидки <= СуммаСкидкиУжеПроставлено тогда//ничего делать не нужно
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Для каждого СтрокаТовары Из Объект.Товары цикл //Отчищаем скидки
		СтрокаТовары.СуммаРучнойСкидки		=	0;
		СтрокаТовары.ПроцентРучнойСкидки	=	0;
		СтрокаТовары.Сумма					=	СтрокаТовары.Цена * СтрокаТовары.Количество;
	КонецЦикла;

	ДокументОбъект.ПроставитьСкидкуПоШагу(Скидка, КоличествоШагов, СзНоменклатура, флНадо, СзНоменклатураИсключения);
	
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры 

&НаСервере
Процедура ОбработатьПодарокЗаТовар(ТоварВПодарок, Номенклатура, КоличествоНоменклатуры, СуммаЧека,  КоличествоЧеков, СтруктураПодарки, Идентификатор, НоменклатураИсключение)
	
	//Проверяем выполняется ли условие по номенклатуре
	СуммаПодходящая	=	0;
	Если ЗначениеЗаполнено(Номенклатура) тогда
		СзНоменклатура = Новый СписокЗначений;

		КопияНом =  Номенклатура;
		Пока Найти(КопияНом,"_") цикл
			КДобавлению = Сред(КопияНом,1,11);
			СзНоменклатура.Добавить(КДобавлению);
			
			КопияНом	=	Сред(КопияНом,13);
		КонецЦикла;
		Если КопияНом <> "" тогда
			СзНоменклатура.Добавить(КопияНом);
		КонецЕсли;
		
		//Исключения
		СзНоменклатураИсключения = Новый СписокЗначений;

		КопияНомИскл =  НоменклатураИсключение;
		Пока Найти(КопияНомИскл,"_") цикл
			КДобавлению = Сред(КопияНомИскл,1,11);
			СзНоменклатураИсключения.Добавить(КДобавлению);
			
			КопияНомИскл	=	Сред(КопияНомИскл,13);
		КонецЦикла;
		
		Если КопияНомИскл <> "" тогда
			СзНоменклатураИсключения.Добавить(КопияНомИскл);
		КонецЕсли;
		//


			
		ВСегоПодходящихНоменклатур	=	0;
		
		Для каждого СтрокаТовары Из Объект.Товары цикл
			//Доп обработка БК
			Если Найти(СтрокаТовары.Номенклатура.Наименование, " БК") тогда
				НужНом	=	Справочники.Номенклатура.НайтиПоНаименованию(СтрЗаменить(СтрокаТовары.Номенклатура.Наименование, " БК",""));
			иначе
				НужНом	=	СтрокаТовары.Номенклатура;
			КонецЕсли;
			
			ПК	=	НужНом.ПолныйКод();
			
			флЭтоИсключение	=	Ложь;
			Для каждого СтрокаСписка из СзНоменклатураИсключения цикл
				Если Найти(ПК,СтрокаСписка.Значение) тогда
					флЭтоИсключение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			Если флЭтоИсключение тогда
				Продолжить;
			КонецЕсли;

		
			Для каждого СтрокаСписка из СзНоменклатура цикл
				Если Найти(ПК,СтрокаСписка.Значение) тогда
					ВСегоПодходящихНоменклатур  = ВСегоПодходящихНоменклатур + СтрокаТовары.КоличествоУпаковок;	
					СуммаПодходящая				=	СуммаПодходящая + СтрокаТовары.Сумма; 
					Прервать;
				КонецЕсли;
			КонецЦикла;		
		КонецЦикла;
		Если ВСегоПодходящихНоменклатур < Число(КоличествоНоменклатуры) тогда
			возврат; // не прошли по номенклатуре
		КонецЕсли;		
	КонецЕсли;
	//
	
	//Проверяем выполняется ли условие по сумме	
	Если ЗначениеЗаполнено(СуммаЧека) тогда
		Если СуммаПодходящая = 0 тогда
			СуммаТекущегоЧека	=	0;	
			Для каждого СтрокаТовары Из Объект.Товары цикл 
				СуммаТекущегоЧека	=	СуммаТекущегоЧека + (СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок - СтрокаТовары.СуммаРучнойСкидки);
			КонецЦикла; 
			СуммаПодходящая	=	СуммаТекущегоЧека;
		КонецЕсли;
		
		Если СуммаПодходящая < Число(СтрЗаменить(СуммаЧека,Символы.НПП,"")) тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

		
	//Проверяем выполняется ли условие по Количество Чеков
	Если ЗначениеЗаполнено(КоличествоЧеков)  и не  ЗначениеЗаполнено(СуммаЧека) тогда
		Запрос	=	Новый Запрос("ВЫБРАТЬ
		      	 	             |	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЧекККМ.Ссылка), 0) КАК КоличествоЧековПродажа
		      	 	             |ИЗ
		      	 	             |	Документ.ЧекККМ КАК ЧекККМ
		      	 	             |ГДЕ
		      	 	             |	ЧекККМ.Дата >= &Дата
		      	 	             |	И ЧекККМ.ВидОперации = &ВидОперацииПродажа");	
		Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("ВидОперацииПродажа", Перечисления.ВидыОперацийЧекККМ.Продажа);

		Рез = Запрос.Выполнить().Выбрать();  		
		Если Рез.Следующий() тогда
			Если Рез.КоличествоЧековПродажа > Число(КоличествоЧеков) тогда Возврат КонецЕсли;
		КонецЕсли;		
	КонецЕсли; 
	
	//Проверяем выполняется ли условие по Количество Чеков и сумма
	Если ЗначениеЗаполнено(КоличествоЧеков) и ЗначениеЗаполнено(СуммаЧека) и КоличествоЧеков <> "0" тогда
		Запрос	=	Новый Запрос("ВЫБРАТЬ
		      	 	             |	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЧекККМ.Ссылка), 0) КАК КоличествоЧековПродажа
		      	 	             |ИЗ
		      	 	             |	Документ.ЧекККМ КАК ЧекККМ
		      	 	             |ГДЕ
		      	 	             |	ЧекККМ.Дата >= &Дата
		      	 	             |	И ЧекККМ.ВидОперации = &ВидОперацииПродажа
		      	 	             |	И ЧекККМ.СуммаДокумента >= &СуммаДокумента");	
		Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("ВидОперацииПродажа", Перечисления.ВидыОперацийЧекККМ.Продажа);
		Запрос.УстановитьПараметр("СуммаДокумента", Число(СтрЗаменить(СуммаЧека,Символы.НПП,"")));

		Рез = Запрос.Выполнить().Выбрать();   		
		Если Рез.Следующий() тогда
			Если Рез.КоличествоЧековПродажа >  Число(КоличествоЧеков) тогда Возврат КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	//ФОРМИРУЕМ список подарков
	СЗПодарки	=	Новый СписокЗначений;
	КопияНом =  ТоварВПодарок;
	Пока Найти(КопияНом,"_") цикл
		КДобавлению = Справочники.Номенклатура.НайтиПоКоду(Сред(КопияНом,1,11));
		Если не КДобавлению.Пустая() тогда
			Если КДобавлению.ЭтоГруппа тогда
				Запрос	=	Новый запрос("ВЫБРАТЬ
				      	 	             |	Номенклатура.Ссылка КАК Ссылка
				      	 	             |ПОМЕСТИТЬ НужнаяНом
				      	 	             |ИЗ
				      	 	             |	Справочник.Номенклатура КАК Номенклатура
				      	 	             |ГДЕ
				      	 	             |	Номенклатура.Ссылка В ИЕРАРХИИ(&Ссылка)
				      	 	             |	И НЕ Номенклатура.ЭтоГруппа
				      	 	             |	И НЕ Номенклатура.ПометкаУдаления
				      	 	             |;
				      	 	             |
				      	 	             |////////////////////////////////////////////////////////////////////////////////
				      	 	             |ВЫБРАТЬ
				      	 	             |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
				      	 	             |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
				      	 	             |ПОМЕСТИТЬ Итог
				      	 	             |ИЗ
				      	 	             |	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки,
				      	 	             |	НужнаяНом КАК НужнаяНом
				      	 	             |ГДЕ
				      	 	             |	ТоварыНаСкладахОстатки.Номенклатура В (НужнаяНом.Ссылка)
				      	 	             |;
				      	 	             |
				      	 	             |////////////////////////////////////////////////////////////////////////////////
				      	 	             |ВЫБРАТЬ
				      	 	             |	Итог.Номенклатура КАК Номенклатура
				      	 	             |ИЗ
				      	 	             |	Итог КАК Итог
				      	 	             |ГДЕ
				      	 	             |	Итог.КоличествоОстаток > 0");
				Запрос.УстановитьПараметр("Ссылка", КДобавлению);
				Рез = Запрос.Выполнить().Выбрать();
				Пока рез.Следующий() цикл
					СЗПодарки.Добавить(рез.Номенклатура);
				КонецЦикла;
			иначе
				Запрос	=	Новый Запрос("ВЫБРАТЬ
				      	 	             |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
				      	 	             |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
				      	 	             |ИЗ
				      	 	             |	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОстатки
				      	 	             |ГДЕ
				      	 	             |	ТоварыНаСкладахОстатки.КоличествоОстаток > 0");
				Запрос.УстановитьПараметр("Номенклатура", КДобавлению);
				Если не Запрос.Выполнить().Пустой() тогда			
					СЗПодарки.Добавить(КДобавлению);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		КопияНом	=	Сред(КопияНом,13);
	КонецЦикла;
	
	Если КопияНом <> "" тогда
		КДобавлению = Справочники.Номенклатура.НайтиПоКоду(Сред(КопияНом,1,11));
		Если не КДобавлению.Пустая() тогда
			Если КДобавлению.ЭтоГруппа тогда
				Запрос	=	Новый запрос("ВЫБРАТЬ
				      	 	             |	Номенклатура.Ссылка КАК Ссылка
				      	 	             |ПОМЕСТИТЬ НужнаяНом
				      	 	             |ИЗ
				      	 	             |	Справочник.Номенклатура КАК Номенклатура
				      	 	             |ГДЕ
				      	 	             |	Номенклатура.Ссылка В ИЕРАРХИИ(&Ссылка)
				      	 	             |	И НЕ Номенклатура.ЭтоГруппа
				      	 	             |	И НЕ Номенклатура.ПометкаУдаления
				      	 	             |;
				      	 	             |
				      	 	             |////////////////////////////////////////////////////////////////////////////////
				      	 	             |ВЫБРАТЬ
				      	 	             |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
				      	 	             |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
				      	 	             |ПОМЕСТИТЬ Итог
				      	 	             |ИЗ
				      	 	             |	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки,
				      	 	             |	НужнаяНом КАК НужнаяНом
				      	 	             |ГДЕ
				      	 	             |	ТоварыНаСкладахОстатки.Номенклатура В (НужнаяНом.Ссылка)
				      	 	             |;
				      	 	             |
				      	 	             |////////////////////////////////////////////////////////////////////////////////
				      	 	             |ВЫБРАТЬ
				      	 	             |	Итог.Номенклатура КАК Номенклатура
				      	 	             |ИЗ
				      	 	             |	Итог КАК Итог
				      	 	             |ГДЕ
				      	 	             |	Итог.КоличествоОстаток > 0");
				Запрос.УстановитьПараметр("Ссылка", КДобавлению);
				Рез = Запрос.Выполнить().Выбрать();
				Пока рез.Следующий() цикл
					СЗПодарки.Добавить(рез.Номенклатура);
				КонецЦикла;
			иначе
				СЗПодарки.Добавить(КДобавлению);
				
				Запрос	=	Новый Запрос("ВЫБРАТЬ
				      	 	             |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
				      	 	             |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
				      	 	             |ИЗ
				      	 	             |	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОстатки
				      	 	             |ГДЕ
				      	 	             |	ТоварыНаСкладахОстатки.КоличествоОстаток > 0");
				Запрос.УстановитьПараметр("Номенклатура", КДобавлению);
				Если не Запрос.Выполнить().Пустой() тогда			
					СЗПодарки.Добавить(КДобавлению);
				КонецЕсли;

				
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	СтруктураПодарки.Вставить("СЗПодарки", СЗПодарки);
	СтруктураПодарки.Вставить("УидАкции", Идентификатор);

КонецПроцедуры
	
&НаКлиенте
Процедура ПослеОткрытияФормы_ТБКФормаВыбораПодарка(Результат, Параметры) экспорт
	Если ЗначениеЗаполнено(Подарок)  тогда
		НоваяСтрока	=	Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Объект.Товары[0]);
		НоваяСтрока.Номенклатура				=	Подарок;
		НоваяСтрока.Характеристика				=	Неопределено;
		НоваяСтрока.КоличествоУпаковок			=	1;
		НоваяСтрока.Количество					=	1;
		НоваяСтрока.ТБК_КоличествоБаллов		=	0;
		
		
		НужЦена		=	ОбщегоНазначенияВызовСервера.ПолучитьЦенуНоменклатуры(Подарок);	

		Если НужЦена <>Неопределено  тогда		
			НоваяСтрока.Цена						=	НужЦена;
			НоваяСтрока.СуммаРучнойСкидки			=	НужЦена - 0.01;
			НоваяСтрока.Сумма						=	0.01;
			НоваяСтрока.СуммаВсего					=	0.01;
			НоваяСтрока.СуммаНДС					=	0;
			//Если Найти(Объект.Организация,"ИП Пинкасович Д.В.") тогда
			//	НоваяСтрока.СуммаНДС					=	(НужЦена*20)/120;
			//иначе
			//	НоваяСтрока.СуммаНДС					=	0;
			//КонецЕсли;
		иначе
			НоваяСтрока.Цена						=	0.01;
			НоваяСтрока.Сумма						=	0.01;
			НоваяСтрока.СуммаВсего					=	0.01; 
			НоваяСтрока.СуммаНДС					=	0;
			

		КонецЕсли;
		
		//плюс скидка на первую позицию
		Объект.Товары[0].СуммаРучнойСкидки		=	Объект.Товары[0].СуммаРучнойСкидки 	+ 0.01;	
		Объект.Товары[0].Сумма					=	Объект.Товары[0].Сумма		 		- 0.01;
		Объект.Товары[0].СуммаВсего				=	Объект.Товары[0].СуммаВсего		 	- 0.01;  
		
		НоваяСтрока.ПроцентАвтоматическойСкидки	=	0;
		НоваяСтрока.ПроцентРучнойСкидки			=	0;
		НоваяСтрока.СуммаАвтоматическойСкидки	=	0;
		НоваяСтрока.Штрихкод					=	Неопределено;
		НоваяСтрока.КлючСвязи					=	НоваяСтрока.НомерСтроки;
		НоваяСтрока.ТипНоменклатуры				=	ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар");
		НоваяСтрока.НеобходимостьВводаАкцизнойМарки	=	Ложь;  
		
		Параметры.Подарок = Подарок;
		Параметры.Сумма	  = НоваяСтрока.Сумма;
		

	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура ТБКТоварыПослеУдаленияПосле(Элемент)
	Попытка
		
		флНадо	=	Ложь;
		
		Если не ЗначениеЗаполнено(флУдаленПодарок) тогда 
			ОбработатьСкидкиИзУТ(флНадо, истина);
			флУдаленПодарок	=	Неопределено;
		КонецЕсли;
		
		//2023-09-13 даем оплачивать после того как рассчиталась скидка
		Элементы.КартинкаЧО06ПлатежнаяКарта.Доступность	=	Истина;
		Элементы.КартинкаЧО07СложнаяОплата.Доступность	=	Истина;
		Элементы.КартинкаЧО05Наличные.Доступность		=	Истина;  
		//
		//Если флНадо тогда
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			ОбновитьФормуНаКлиенте(); 	
		//КонецЕсли;
		
		ОбработатьДействияВторойМонитор();
		
		// ОбработкаГЛО
		Элементы.КартинкаПО22РучныеСкидки.Доступность			=	Истина;
		
		флЕстьГЛОсоСкидкой	=	Ложь;
		Для Каждого стр из Объект.Товары Цикл

			Если стр.СуммаРучнойСкидки > 0 тогда 
				Если ЭтоГЛО(стр.Номенклатура) тогда //Вик 2021_09_28 по просьбе Козьминой
					Элементы.КартинкаПО22РучныеСкидки.Доступность			=	Ложь;
					флЕстьГЛОсоСкидкой = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		
		Если не флЕстьГЛОсоСкидкой тогда
			КодАкции = "";
		КонецЕсли;

	Исключение
	КонецПопытки; 
КонецПроцедуры

&НаКлиенте
&Вместо("ПересчитатьИлиОтменитьСкидкиИОплатуБонусами")
Процедура ТБКПересчитатьИлиОтменитьСкидкиИОплатуБонусами(ТолькоПересчет)
		
	Если Объект.Товары.Количество() > 0 Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
			//ПодготовитьОплатуБонусамиКСторнированию();
		Иначе
			НазначитьАвтоматическиеСкидкиКлиент(Ложь, Ложь);
		КонецЕсли;
	Иначе
		//Если (НЕ ТолькоПересчет) Тогда
		//	ОтменитьСкидкиИОплатуБонусамиСервер();
		//КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеОНевернойОрганизации(ПроверкаМаркиИНН, НужныйЧек, НомерСтроки, Марка)
	Рег = РегистрыСведений.ВременныеИдентификаторыЗапросов.СоздатьНаборЗаписей();
	Рег.Отбор.Идентификатор.Установить(Строка(НомерСтроки) + "; " + Строка(НужныйЧек) );
	НовСтр	=	Рег.Добавить();
	
	НовСтр.Идентификатор	=	Строка(НомерСтроки) + "; " + Строка(НужныйЧек) ;
	НовСтр.Дата				=	ТекущаяДата();
	
	Значение	=	Новый Структура;
	Значение.Вставить("Магазин",НужныйЧек.Магазин);  
	Значение.Вставить("Организация",НужныйЧек.Организация);  
	Значение.Вставить("ИНН",НужныйЧек.Организация.ИНН);
	Значение.Вставить("Чек",НужныйЧек);      
	Значение.Вставить("ВидОперации",Строка(НужныйЧек.ВидОперации));
	Значение.Вставить("ПроверкаМаркиИНН",ПроверкаМаркиИНН);
		
	Значение.Вставить("Марка",Марка);
	
	
	Если Не найти(ПроверкаМаркиИНН,"Статус") Тогда		
		Значение.Вставить("НеверныйИНН", ПроверкаМаркиИНН); 		
	иначе
		Значение.Вставить("НеверныйИНН","");  	
	КонецЕсли; 
	
	
	ХранЗнач		=	Новый ХранилищеЗначения(Значение);
	НовСтр.Запрос	=	ХранЗнач;
	
	Рег.Записать();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеДолгийЧек(НужныйЧек, ВремяНаЧек)
	Рег = РегистрыСведений.ТБКДолгиеЧеки.СоздатьМенеджерЗаписи();
	Рег.Чек			=	НужныйЧек;
	Рег.ВремяНаЧек	=	ВремяНаЧек;
	
	Рег.Записать();
КонецПроцедуры

&НаКлиенте
Функция ПроверитьУценку()	
	ЕстьУценка	=	Ложь;
	Для каждого Строка из Объект.Товары цикл
		Если ЗначениеЗаполнено(Строка.КодУценки) тогда
			ЕстьУценка = Истина;
			Прервать;
		КонецЕсли;		
	КонецЦикла;	
	
	Если ЕстьУценка тогда
		Если Объект.Товары.Итог("Количество") <>1 тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Внимание!!","Уцененные товары нужно пробивать отдельным чеком!");
			Возврат Ложь;
		КонецЕсли; 	
	КонецЕсли;
	
	Возврат истина;
КонецФункции

&НаКлиенте
&Вместо("ВыполнитьЧО05Наличные")
Процедура ТБКВыполнитьЧО05Наличные()
	//Вик 2022_03_21
	флВсеХорошо	=	ПроверитьУценку();
	Если не флВсеХорошо тогда Возврат КонецЕсли;
	//КонецВик

	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьЧО07СложнаяОплата")
Процедура ТБКВыполнитьЧО07СложнаяОплата()
	//Вик 2022_03_21
	флВсеХорошо	=	ПроверитьУценку();
	Если не флВсеХорошо тогда Возврат КонецЕсли;
	//КонецВик

	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьЧО06ПлатежнаяКарта")
Процедура ТБКВыполнитьЧО06ПлатежнаяКарта()
	//Вик 2022_03_21
	флВсеХорошо	=	ПроверитьУценку();
	Если не флВсеХорошо тогда Возврат КонецЕсли;
	//КонецВик
	
	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
Процедура ТБКОткрытьПочтуПосле(Команда)
	ЗапуститьПриложение("www.e.mail.ru");
КонецПроцедуры

&НаКлиенте
Процедура ТБКПолучитьЦеныПокупкаСотрудникаПосле(Команда)
	Если не ПокупкаСотрудника тогда
		Сообщить("Не установлена галочка Покупка сотрудника!");
		Возврат	
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 тогда
		Сообщить("Нет товаров!");
		Возврат	
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 5 тогда
		Сообщить("Запрещено запрашивать цены более 5 товаров!");
		Возврат	
	КонецЕсли;

	
	Для каждого СтрокаТовары из Объект.Товары цикл
		//Если ОбщегоНазначенияВызовСервера.ЭтоМаркированнаяНоменклатураСервер(СтрокаТовары.Номенклатура) тогда
		НужХар	=	Неопределено;
		Попытка
			НужХар = Число(Строка(СтрокаТовары.Характеристика));	
		Исключение
		КонецПопытки;
		
		Если НужХар <> Неопределено тогда
			Сообщить("Сотрудникам нельзя покупать для себя сигареты и стики!");
			Возврат
		КонецЕсли;		
	КонецЦикла; 

	ВвестиПарольИОбработать();
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьПО14Продавец")
Процедура ТБКВыполнитьПО14Продавец()
	Если Объект.Товары.Количество() > 0 тогда
		Сообщить("В чеке присутствуют товары! Смена продавца невозможна!");
		Возврат;
	КонецЕсли;
	
	ИсполняемаяОперацияЛогирования = "ВыбранПродавец";
	Если ЗначениеЗаполнено(Объект.Продавец) Тогда
		ЛогированиеВводаПродавца(
			Неопределено, Объект.Продавец, ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"));
		Объект.Продавец = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		УстановитьЗаголовок();
	Иначе
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
						Истина, "Справочник.ФизическиеЛица.Форма.ФормаВыбораВРМК.Открытие");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПродавца", ЭтотОбъект);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Сотрудник" , Истина);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбораВРМК",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВвестиПарольИОбработать()
	Пароль = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьПарольИОбработатьЦеныДляСотрудников", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещения, Пароль, "Введите пароль: ");		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПарольИОбработатьЦеныДляСотрудников(ПолученноеЗначение, ПереданныеПараметры) экспорт  
	ПолучитьПарольИОбработатьЦеныДляСотрудниковНаСервере(ПолученноеЗначение, ПереданныеПараметры);
КонецПроцедуры

&НаСервере
Процедура ПолучитьПарольИОбработатьЦеныДляСотрудниковНаСервере(ПолученноеЗначение, ПереданныеПараметры) 
	//Подключение
	
	
	Если Адрес_ВебСоединение  = "" тогда
		Веб_Соединение	=	ПодключитьсяКУТ();
		Если Веб_Соединение = Неопределено тогда возврат КонецЕсли;
	иначе
		Попытка
			Массив = ПолучитьИзВременногоХранилища(Адрес_ВебСоединение);
			Веб_Соединение	=	Массив[0]; 
			
			Если Веб_Соединение = Неопределено тогда//повторное подключение
				Веб_Соединение	=	ПодключитьсяКУТ();
			КонецЕсли;
		Исключение
			Сообщить("Не удалось подключиться к УТ. Попробуйте выполнить действие позже.");
			Возврат; 
		КонецПопытки;
	КонецЕсли;
	
	//Проверка паролей
	Если Объект.Продавец.Пустая() тогда
		Объект.Продавец = Объект.Товары[0].Продавец;
	КонецЕсли;
	
	СтруктураПарольЛимитСотрудника	=	Веб_Соединение.GetPasswordAndLimit(СокрЛП(Строка(Объект.Продавец)));
	СтруктураПарольЛимитСотрудника	=	ОбщегоНазначения.jsonВСтруктура_Общая(СтруктураПарольЛимитСотрудника);	 	

	ПарольСотрудника				=	СтруктураПарольЛимитСотрудника[0].ПарольСотрудника;
	ЛимитСотрудника					=	Число(СтруктураПарольЛимитСотрудника[0].ЛимитСотрудника);
	ИзрасходованныйЛимит			=	Число(СтруктураПарольЛимитСотрудника[0].ИзрасходованныйЛимит);
	ТипСотрудника					=	СтруктураПарольЛимитСотрудника[0].ТипСотрудника;
	
	//Добавляем не отправленные в ут
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ЕСТЬNULL(ТБК_ПокупкиСотрудников.Чек.СуммаДокумента, 0) КАК СуммаЧека
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_ПокупкиСотрудников КАК ТБК_ПокупкиСотрудников
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ПокупкиСотрудников.ОтправленВУТ
	      	 	             |	И ТБК_ПокупкиСотрудников.Продавец = &Продавец");
	Запрос.УстановитьПараметр("Продавец",Объект.Продавец);
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого Строка из Рез цикл
		ИзрасходованныйЛимит	=	ИзрасходованныйЛимит + Строка.СуммаЧека;	
	КонецЦикла;
	
	Если ПарольСотрудника =  "Не найден" тогда
		Сообщить("Ошибка! Пользователь не найден в УТ");
		Возврат
	КонецЕсли;
	
	Если ПарольСотрудника <> "" и ПарольСотрудника <> ПолученноеЗначение тогда
		Сообщить("Неверный пароль!");
		Возврат;
	КонецЕсли;	
		
	//Получение Цен. Цены получаем уже с наценкой
	Результат = Новый Массив;
	нЗапись   = Новый Структура();

	Для каждого СтрокаТовары из Объект.Товары цикл
		нЗапись.Вставить("НоменклатураКод" + Строка(СтрокаТовары.НомерСтроки),СокрЛП(СтрокаТовары.Номенклатура.Код));		
	КонецЦикла; 
	нЗапись.Вставить("ТипСотрудника",ТипСотрудника);	
	
	Результат.Добавить(нЗапись);	
	СтрJSON		=	ОбщегоНазначения.СтруктураВjson_Общая(Результат);			
	
	Ответ	= Веб_Соединение.GetPriceWorker(СтрJSON);
	//Прокси	=	Неопределено;
	
	Если Ответ = "" тогда
		Сообщить("Не удалось получить цены из УТ! Попробуйте выполнить действие позже.");
		Возврат
	КонецЕсли;   
	
	СтруктураОтвета	= ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);     	
	
	Если СтруктураОтвета[0].количество() = 0 тогда
		Сообщить("Не удалось получить цены из УТ. Попробуйте выполнить действие позже.");
		Возврат
	КонецЕсли; 
	
	//Обработка ответа
	
	//1) Проверка лимитов
	СуммаЧека	=	0;
	
	Для каждого Строка из СтруктураОтвета цикл
		Для i=1 по 10000 цикл
			Если Строка.Свойство("Цена"+Строка(i)) тогда
				ЦенаЗакуп			=	"";
				Строка.Свойство("Цена"	+ Строка(i), ЦенаЗакуп);
				
				ЦенаЗакуп	=	Число (ЦенаЗакуп);
				
				СуммаЧека	=	СуммаЧека + ЦенаЗакуп * Объект.Товары[i-1].Количество;
			иначе
				Прервать;
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	Если ЛимитСотрудника < СуммаЧека + ИзрасходованныйЛимит тогда
		Сообщить("Превышен лимит!");
		//Прокси = Неопределено;
		Возврат
	КонецЕсли;	
	
	//2) Изменяем ТЧ
	Для каждого Строка из СтруктураОтвета цикл
		Для i=1 по 10000 цикл
			Если Строка.Свойство("Цена"+Строка(i)) тогда
				ЦенаЗакуп			=	"";
				Строка.Свойство("Цена"	+ Строка(i), ЦенаЗакуп);
				
				ЦенаЗакуп	=	Число (ЦенаЗакуп);
				
				Объект.Товары[i-1].Цена					=	ЦенаЗакуп;
				Объект.Товары[i-1].Сумма				=	Объект.Товары[i-1].Цена * Объект.Товары[i-1].Количество;
				Объект.Товары[i-1].СуммаРучнойСкидки	=	0;
				Объект.Товары[i-1].СуммаВсего			=	Объект.Товары[i-1].Сумма;
			иначе
				Прервать;
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ПересчитатьСуммуНДСВТЧСервер(
		Объект.Товары, ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));	
		
	Элементы.ПокупкаСотрудника.Доступность	=	Ложь;
	Элементы.Товары.Доступность				=	Ложь;
	Элементы.КартинкаЧО03РедактированиеСтроки.Доступность	=	Ложь;
КонецПроцедуры

&НаСервере
Процедура ПолучитьПарольИОбработатьЦеныДляАдминистрацииТЦ(ФизЛицо) экспорт
	//Подключение
	Если Адрес_ВебСоединение  = "" тогда
		Веб_Соединение	=	ПодключитьсяКУТ();
		Если Веб_Соединение = Неопределено тогда возврат КонецЕсли;
	иначе
		Попытка
			Массив = ПолучитьИзВременногоХранилища(Адрес_ВебСоединение);
			Веб_Соединение	=	Массив[0]; 
			
			Если Веб_Соединение = Неопределено тогда//повторное подключение
				Веб_Соединение	=	ПодключитьсяКУТ();
			КонецЕсли;
		Исключение
			Сообщить("Не удалось подключиться к УТ. Попробуйте выполнить действие позже.");
			Возврат; 
		КонецПопытки;
	КонецЕсли;
		
	Результат = Новый Массив;
	нЗапись   = Новый Структура();

	Для каждого СтрокаТовары из Объект.Товары цикл
		нЗапись.Вставить("НоменклатураКод" + Строка(СтрокаТовары.НомерСтроки),СокрЛП(СтрокаТовары.Номенклатура.Код));	
	КонецЦикла; 
	нЗапись.Вставить("ТипСотрудника","Администрация");	
	
	Результат.Добавить(нЗапись);	
	СтрJSON		=	ОбщегоНазначения.СтруктураВjson_Общая(Результат);			
	
	Ответ	= Веб_Соединение.GetPriceWorker(СтрJSON);
	
	Если Ответ = "" тогда
		Сообщить("Не удалось получить цены из УТ! Попробуйте выполнить действие позже.");
		Возврат
	КонецЕсли;   
	
	СтруктураОтвета	= ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);     	
	
	Если СтруктураОтвета[0].количество() = 0 тогда
		Сообщить("Не удалось получить цены из УТ. Попробуйте выполнить действие позже.");
		Возврат
	КонецЕсли; 
		
	Для каждого Строка из СтруктураОтвета цикл
		Для i=1 по 10000 цикл
			Если Строка.Свойство("ПроцентСкидки"+Строка(i)) тогда   
				Если Объект.Товары[i-1].СуммаРучнойСкидки = 0 тогда
					ПроцентСкидки			=	"";
					Строка.Свойство("ПроцентСкидки"	+ Строка(i), ПроцентСкидки);
					
					ПроцентСкидки	=	Число (ПроцентСкидки);

					
					Объект.Товары[i-1].СуммаРучнойСкидки	=	(Объект.Товары[i-1].Сумма/100) * ПроцентСкидки;
					Объект.Товары[i-1].Сумма				=	Объект.Товары[i-1].Сумма - Объект.Товары[i-1].СуммаРучнойСкидки;
					Объект.Товары[i-1].СуммаВсего			=	Объект.Товары[i-1].Сумма;       
				КонецЕсли;
			иначе
				Прервать;
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ПересчитатьСуммуНДСВТЧСервер(
		Объект.Товары, ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));	
		
	Элементы.ПокупкаСотрудника.Доступность	=	Ложь;
	Элементы.Товары.Доступность				=	Ложь;
	Элементы.КартинкаЧО03РедактированиеСтроки.Доступность	=	Ложь;
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьЧО03РедактированиеСтроки")
Процедура ТБКВыполнитьЧО03РедактированиеСтроки()
	Если ПокупкаСотрудника тогда Возврат КонецЕсли;//Вик 2022-05-04
	
	ДанныеСтрокиТовары = Элементы.Товары.ТекущиеДанные;
	
	Если ДанныеСтрокиТовары <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтрокиТовары.ДоговорКонтрагента)
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			
			СтруктураПараметровКлиента = Новый Структура;
			СтруктураПараметровКлиента.Вставить("УчетХарактеристик", Ложь);
			СтруктураПараметровКлиента.Вставить("ПересчиталиЦену", Истина);
			СтруктураПараметровКлиента.Вставить("НеУдалятьСтроку", Истина);
			СтруктураПараметровКлиента.Вставить("ПредупреждениеНулевойЦены", НСтр("ru = 'Введите сумму платежа.'"));
			СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", Истина);
			СтруктураПараметровКлиента.Вставить("ИдентификаторСтроки", ДанныеСтрокиТовары.ПолучитьИдентификатор());
			СтруктураПараметровКлиента.Вставить("ПрекратитьДействия", Ложь);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия", СтруктураПараметровКлиента);
			
			ОбработчикОповещения = Новый ОписаниеОповещения(
				"ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите сумму платежа.'"), ОбработчикОповещения);
			
		Иначе
			
			Если НЕ ДанныеСтрокиТовары.НомерСтроки = Объект.Товары.Количество()
				И НЕ НаборПравИНастроек.РазрешитьРедактироватьНабранныйЧек 
				И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
				Возврат;
			КонецЕсли;
			
			ОбработатьРедактированиеСтроки(ДанныеСтрокиТовары, "");
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьПО04ОтложитьЧек")
Процедура ТБКВыполнитьПО04ОтложитьЧек()
	Сообщить("Операция невозможна");
	Возврат;
	
	Если не ПокупкаСотрудника тогда
		Если ОтменитьОплатуПК Тогда
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
			ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
			Возврат;
		КонецЕсли;
	
		ОповещениеОтложитьЧек();
	иначе
		Сообщить("Невозможно для покупок для себя");	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьПО15ПродолжитьЧек")
Процедура ТБКВыполнитьПО15ПродолжитьЧек()
	Если не ПокупкаСотрудника тогда  
		Если ОтменитьОплатуПК Тогда
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеПродолжитьЧек", ЭтотОбъект);
			ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
			Возврат;
		КонецЕсли;
		
		ОповещениеПродолжитьЧек();
	иначе
		Сообщить("Невозможно для покупок для себя");	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьПО22РучныеСкидки")
Процедура ТБКВыполнитьПО22РучныеСкидки()
	Если не ПокупкаСотрудника тогда  

		Если ОшибкаРасчетаСкидокПоЗаказуПокупателя() Тогда
			Возврат;
		КонецЕсли;
		
		Если ОшибкаРасчетаСкидокПоДокументуРасчета() Тогда
			Возврат;
		КонецЕсли;
		
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
						Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаРучныхСкидок.Открытие");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуРучныхСкидок", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаРучныхСкидок",
			, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	иначе
		Сообщить("Невозможно для покупок для себя");	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
&После("ОповещениеОткрытьФормуВыбораПричиныВозврата")
Процедура ТБКОповещениеОткрытьФормуВыбораПричиныВозврата(РезультатОткрытияФормы, ДополнительныеПараметры)
	Если РезультатОткрытияФормы <> Неопределено Тогда
		ЗначениеВозврата	=	ОбработатьИсториюПокупокПриВозврате(РезультатОткрытияФормы, ДополнительныеПараметры);
		Если ЗначениеВозврата <> Неопределено тогда
			Если Найти(ЗначениеВозврата,"TBK") тогда	
				Объект.ТБК_IDКлиента	=	ЗначениеВозврата;	
			иначе
				ТелефонКлиента						=	"+" + ЗначениеВозврата;
				Элементы.ТелефонКлиента.Доступность	=	ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		СуммаСертификата = ОбработатьПродажуПоСертификату(РезультатОткрытияФормы, ДополнительныеПараметры);
		Если СуммаСертификата <> Неопределено тогда
			Элементы.НадписьПродажаПоСертификату.Заголовок	=	"Продажа по сертификату. Номинал: "+СуммаСертификата;	
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция  ОбработатьИсториюПокупокПриВозврате(РезультатОткрытияФормы, ДополнительныеПараметры)  		
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ИсторияПокупокРозница.Чек КАК Чек,
	      	 	             |	ТБК_ИсторияПокупокРозница.IDКлиента КАК IDКлиента,
	      	 	             |	ТБК_ИсторияПокупокРозница.Товары КАК Товары
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_ИсторияПокупокРозница КАК ТБК_ИсторияПокупокРозница
	      	 	             |ГДЕ
	      	 	             |	ТБК_ИсторияПокупокРозница.Чек = &Чек");
	Запрос.УстановитьПараметр("Чек",ДополнительныеПараметры.ЧекККМПродажаОснование);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество()>0 тогда
		ТЗТовары	=	Рез[0].Товары.получить();
		
		Для каждого Строка из Объект.Товары цикл
			Строка.ТБК_КоличествоБаллов	=	-1*ТЗТовары[Строка.НомерСтроки-1].ТБК_КоличествоБаллов;
		КонецЦикла; 
			
		Возврат Рез[0].IDКлиента;
	иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции

&НаСервереБезКонтекста
Функция  ОбработатьПродажуПоСертификату(РезультатОткрытияФормы, ДополнительныеПараметры)  		
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБКПогашенныеСертификаты.Чек КАК Чек,
	      	 	             |	ТБКПогашенныеСертификаты.Сумма КАК Сумма
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКПогашенныеСертификаты КАК ТБКПогашенныеСертификаты
	      	 	             |ГДЕ
	      	 	             |	ТБКПогашенныеСертификаты.Чек = &Чек");
	Запрос.УстановитьПараметр("Чек",ДополнительныеПараметры.ЧекККМПродажаОснование);
	Рез = Запрос.Выполнить().Выбрать();
		
	Если Рез.Следующий()>0 тогда
		Возврат Рез.Сумма;
	КонецЕсли; 

КонецФункции

&НаКлиенте
Процедура ТБКОбновитьКоличествоБалловКоторыеМожноСписатьПосле(Команда)
	Если ЗначениеЗаполнено(Объект.ТБК_IDКлиента) тогда
		Перем_Товары	=	Объект.Товары; 	
	
		КоличествоБалловМожноСписать	=	ТБК_ПрограммаЛояльности.ОбновитьКоличествоБаллов(КоличествоНакопленныхБаллов, Перем_Товары, Адрес_ВебСоединение);	
		
	ИначеЕсли СтрДлина(ТелефонКлиента) = 12 тогда
		ТБКНайтиПоТелефонуПосле(Неопределено);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ТБКСписатьБаллыПосле(Команда)	
	Если ЗначениеЗаполнено(КодАкции) тогда
		Сообщить("Нельзя списывать баллы, если заполнен код акции");
		Возврат;
	КонецЕсли;
	
	Если ПокупкаСотрудника тогда 
		Сообщить("Нельзя списывать баллы, если это покупка сотрудника");
		Возврат;
	КонецЕсли;
	
	//Марк 2024-03-14
	Если Объект.Товары.Итог("РучнаяСкидка") > 0 Тогда
		Сообщить("Нельзя списывать баллы, если проставлена ручная скидка");
		Возврат;	
	КонецЕсли;
	//КонецМарк
	Для каждого Строка из Объект.Товары цикл
		Если ЗначениеЗаполнено(Строка.КодУценки) тогда 
			Сообщить("Нельзя списывать баллы, если заполнен код уценки");
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ЗаказПокупателя) тогда
			Сообщить("Нельзя списывать баллы, если это интернет-заказ");
			Возврат;
		КонецЕсли;
		
		Если Строка.СуммаРучнойСкидки >0 тогда
			Сообщить("Нельзя списывать баллы, если проставлена ручная скидка");
			Возврат;	
		КонецЕсли;
	КонецЦикла;

	
	ТекстВопроса = НСтр("ru='Списать баллы?'");
	ОбработчикОповещения = Новый ОписаниеОповещения("СписатьБаллы", ЭтотОбъект);
	ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);  
КонецПроцедуры

&НаКлиенте
Процедура СписатьБаллы(Результат, ДополнительныеПараметры) экспорт
	Если Строка(Объект.ВидОперации) = "Возврат" тогда
		Сообщить("Невозможно при возврате!");
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ЗначениеЗаполнено(Объект.ТБК_IDКлиента) тогда
			Перем_Товары	=	Объект.Товары;
	
			КоличествоБалловСписано			= ТБК_ПрограммаЛояльности.СписатьБаллы(Число(КоличествоНакопленныхБаллов), Перем_Товары, Адрес_ВебСоединение, Объект.ТБК_IDКлиента);	
			
			Если КоличествоБалловМожноСписать >0 тогда
				КоличествоБалловМожноСписать	= КоличествоБалловМожноСписать - КоличествоБалловСписано;
			КонецЕсли;
			Если КоличествоБалловМожноСписать <0 тогда КоличествоБалловМожноСписать = 0 КонецЕсли;

			Для каждого Строка из Объект.Товары цикл
				Строка.СуммаРучнойСкидки	=	Перем_Товары[Строка.НомерСтроки-1].СуммаРучнойСкидки;
				Строка.ТБК_КоличествоБаллов	=	Перем_Товары[Строка.НомерСтроки-1].ТБК_КоличествоБаллов;
				Строка.Сумма				=	Перем_Товары[Строка.НомерСтроки-1].Сумма;
			КонецЦикла;
			Элементы.Товары.Доступность				=	Ложь; 	
			
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);		
			ОбновитьФормуНаКлиенте();   
		КонецЕсли;	
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаСкидкиАксессуарыIQOSСкидка50() //Марк 2024-06-06

	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрНайти(ПолучитьПолныйКод(СтрокаТЧ.Номенклатура), "00048205496") > 0 или СтрНайти(ПолучитьПолныйКод(СтрокаТЧ.Номенклатура), "МП-00002778") > 0 Тогда 
			СуммаБезСкидки 				= СтрокаТЧ.КоличествоУпаковок * СтрокаТЧ.Цена;
			СтрокаТЧ.СуммаРучнойСкидки 	= СуммаБезСкидки * 0.5; // Толстоухов 31.10.2025 PRIC-92 ++
			СтрокаТЧ.Сумма				= СуммаБезСкидки - СтрокаТЧ.СуммаРучнойСкидки;
		КонецЕсли;
		
	КонецЦикла; 
	
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);		
	ОбновитьФормуНаКлиенте(); 
	

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПокупкуДляСебя(Данные)
	Если Объект.Товары.Количество() = 0 тогда
		Сообщить("Сначала отсканируйте товары");
		Возврат;
	КонецЕсли; 
	
	Для каждого Строка из Объект.Товары цикл
		Если Строка.СуммаРучнойСкидки >0 тогда  
			сообщить("Уже прставлена скидка!");
			Возврат;	
		КонецЕсли;
	КонецЦикла;
	
	НаименованиеСпр	=	Сред(Данные,4);
	НаименованиеСпр	=	Сред(НаименованиеСпр,1,СтрДлина(НаименованиеСпр)-4);
	Пароль			=	Прав(Данные,4);
	//разборНаименования
	НужНаим	=	"";
	Пока НаименованиеСпр <> "" цикл
		Если Лев(НаименованиеСпр,2) = "32" тогда
			НужНаим		=	НужНаим  + " ";	 
			НаименованиеСпр	=	Сред(НаименованиеСпр,3); 
			Продолжить;
		КонецЕсли;
		
		КодСимвола	=	Сред(НаименованиеСпр,1,4);
		НужНаим		=	НужНаим + Символ(КодСимвола);
		
		НаименованиеСпр	=	Сред(НаименованиеСпр,5);
	КонецЦикла;  
	
	Если НужНаим = "" тогда 
		Сообщить("Не найден продавец (физическое лицо). Обратитесь в офис");
		Возврат;	
	КонецЕсли;
	
	ФизЛицо	=	ПолучитьФизЛицо(НужНаим);
	Если Не ЗначениеЗаполнено(ФизЛицо) тогда
		Сообщить("Не найден продавец (физическое лицо). Обратитесь в офис!");
		Возврат;	
	КонецЕсли;
	
	//Доп блок Скидки для Администрации магазинов
	Если ЭтоАдминистрацияМагазина(ФизЛицо) тогда
		ПолучитьПарольИОбработатьЦеныДляАдминистрацииТЦ(ФизЛицо);
		ПокупкаСотрудника = Истина;
		Возврат;
	КонецЕсли;
	//Конец доп блок
	
	//Проставляем продавца
	Объект.Продавец = ФизЛицо;
	ЛогированиеВводаПродавца(
		Неопределено,
		ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"),
		Объект.Продавец);
		
	//Для каждого СтрокаТовары из Объект.Товары цикл
	//	СтрокаТовары.Продавец = ФизЛицо;	
	//КонецЦикла;
		
	//Получаем цены	
	ПолучитьПарольИОбработатьЦеныДляСотрудников(Пароль, Неопределено);
	ПокупкаСотрудника = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьПогашениеПодарочногоСертификата(Данные)
	Если Объект.Товары.Количество() = 0 тогда
		Сообщить("Сначала отсканируйте товары");
		Возврат;
	КонецЕсли; 
	
	Для каждого Строка из ПогашенныеКодыСертификатов цикл
		Если Строка.КодСертификата = Данные тогда
			Сообщить("Вы уже сканировали этот сертификат!");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Пароль = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПинСертификатаИОбработать", ЭтаФорма, Данные);
	ПоказатьВводСтроки(ОписаниеОповещения, Пароль, "Введите пин-код сертификата: "); 

КонецПроцедуры 

&НаКлиенте
Процедура ВвестиПинСертификатаИОбработать(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	ПослеВводаПинКодаСертификатаСервер(ПолученноеЗначение, ПереданныеПараметры);
	ОбновитьФормуНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура ПослеВводаПинКодаСертификатаСервер(ПолученноеЗначение, Данные)
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	ТБКПогашенныеСертификаты.Сертификат КАК Сертификат,
	      	 	             |	ТБКПогашенныеСертификаты.Чек КАК Чек
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКПогашенныеСертификаты КАК ТБКПогашенныеСертификаты
	      	 	             |ГДЕ
	      	 	             |	ТБКПогашенныеСертификаты.Сертификат = &Сертификат");
	Запрос.УстановитьПараметр("Сертификат", Данные);
	Если не запрос.Выполнить().Пустой() тогда
		Сообщить("Сертификат уже погашен!");
		Возврат; 		
	КонецЕсли;
	
	
	Если Адрес_ВебСоединение  = "" тогда
		Веб_Соединение	=	ПодключитьсяКУТ();
		Если Веб_Соединение = Неопределено тогда возврат КонецЕсли;
	иначе
		Попытка
			Массив = ПолучитьИзВременногоХранилища(Адрес_ВебСоединение);
			Веб_Соединение	=	Массив[0]; 
			
			Если Веб_Соединение = Неопределено тогда//повторное подключение
				Веб_Соединение	=	ПодключитьсяКУТ();
			КонецЕсли;
		Исключение
			Сообщить("Не удалось подключиться к УТ. Попробуйте выполнить действие позже.");
			Возврат; 
		КонецПопытки;
	КонецЕсли;
	
	
	СтруктураСуммаПинкод	=	Веб_Соединение.check_cert(СокрЛП(Строка(Данные)));
	Если Найти(СтруктураСуммаПинкод, "Сертификат") тогда //Значит вернул ошибку, не найден или погашен
		Сообщить(СтруктураСуммаПинкод);
		Возврат;
	КонецЕсли;
	СтруктураСуммаПинкод	=	ОбщегоНазначения.jsonВСтруктура_Общая(СтруктураСуммаПинкод);
	
	Если СтруктураСуммаПинкод.Пинкод <> ПолученноеЗначение тогда
		Сообщить("Введен неверный пин-код!");
		Возврат;
	КонецЕсли; 	



	СуммаКПогашению =   СтруктураСуммаПинкод.Сумма;
	СуммаСкидки		=	0;
	
	флТолькоСигареты	=	Истина;
	Для каждого Строка из Объект.Товары цикл
		//Запрет сигарет
		НужХар	=	Неопределено;
		Попытка
			НужХар = Число(Строка(Строка.Характеристика));	
		Исключение
		КонецПопытки;
		
		Если НужХар <> Неопределено тогда
			Продолжить;;
		КонецЕсли;
		флТолькоСигареты	=	Ложь;
	КонецЦикла;
	
	Если флТолькоСигареты тогда
		Сообщить("На сигареты не распространяется скидка по сертификатам!");
		Возврат;  
	КонецЕсли;	
	
	
	Для каждого Строка из Объект.Товары цикл
		//Запрет сигарет
		НужХар	=	Неопределено;
		Попытка
			НужХар = Число(Строка(Строка.Характеристика));	
		Исключение
		КонецПопытки;
		
		Если НужХар <> Неопределено тогда
			Продолжить;;
		КонецЕсли;
		
		
		Если СуммаКПогашению = 0 тогда Прервать; КонецЕсли;
		
		Если СуммаКПогашению >= Строка.Сумма тогда
			СуммаКПогашению				=	СуммаКПогашению - Строка.Сумма;
			СуммаСкидки					=	СуммаСкидки + Строка.Сумма;

			Строка.СуммаРучнойСкидки	=	Строка.СуммаРучнойСкидки + Строка.Сумма - 0.01;
			Строка.Сумма				=	0.01;
			Строка.СуммаВсего			=	Строка.Сумма;
		иначе
			СуммаСкидки					=	СуммаСкидки + СуммаКПогашению;

			Строка.СуммаРучнойСкидки	=	Строка.СуммаРучнойСкидки + СуммаКПогашению;
			Строка.Сумма				=	Строка.Сумма - СуммаКПогашению;   
			Строка.СуммаВсего			=	Строка.Сумма;
			СуммаКПогашению				=	0;
		КонецЕсли;
		
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ПересчитатьСуммуНДСВТЧСервер(
		Объект.Товары, ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));	
		
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);		

	Элементы.Товары.Доступность						= Ложь;
	Элементы.КартинкаПО22РучныеСкидки.Доступность	= Ложь;	
	
	НовСтр					=	ПогашенныеКодыСертификатов.Добавить();
	НовСтр.КодСертификата	=	Данные;
	НовСтр.Сумма			=	СуммаСкидки;
	
	//Сообщить("Выполнено успешно!"); 
КонецПроцедуры

&НаСерверебезКонтекста
Функция ЭтоАдминистрацияМагазина(ФизЛицо)
	Возврат ФизЛицо.Родитель.Наименование = "Администрация ТЦ"; 
КонецФункции

&НаСерверебезКонтекста
Функция ПолучитьФизЛицо(НужНаим)
	Возврат Справочники.ФизическиеЛица.НайтиПоНаименованию(НужНаим);
КонецФункции

&НаКлиенте
&Вместо("ОплатитьТовары")
Процедура ТБКОплатитьТовары(ИмяФормыОплаты, ОплатаПлатежнойКартой = Ложь, ОплатаПлатежнойСистемой = Ложь, Печать = Ложь)
	//Вик 2022-09-26
	Если ПокупкаСотрудника и Элементы.Товары.Доступность = Истина тогда
		Сообщить("Для продажи по розничной цене - снимите галочку покупка сотрудника.");
		ЭтотОбъект.Доступность = Истина;
		Возврат;
	КонецЕсли;
	//
	
	ЭтоВозвратПродукцииИСМПБезМарки = Ложь;
	
	Если Объект.Товары.Количество() = 0 
		И НЕ Объект.ОперацияСДенежнымиСредствами Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяФормыОплаты = "ФормаОплатыЯндексКасса" И Объект.СуммаДокумента > 15000 Тогда
		
		НаличиеДоговора = ПроверитьНаличиеДоговораЯндексКассы(Объект.Организация);
		Если Не НаличиеДоговора Тогда
			ЗаголовокИнформации = НСтр("ru = 'Оплата'");
			ТекстИнформации = НСтр("ru = 'Превышена максимальная сумма чека оплаты без договора с ЮKassa.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
			
			ЭтотОбъект.Доступность = Истина;
			
			Возврат;
		КонецЕсли
	КонецЕсли;
	
	ОплатаЭСНСПК = Ложь;
	Если ОплатаПлатежнойКартой И ОплатаПлатежнойСистемой Тогда
		ОплатаЭСНСПК = Истина;
		ОплатаПлатежнойСистемой = Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФормыОплаты", ИмяФормыОплаты);
	ДополнительныеПараметры.Вставить("ОплатаПлатежнойКартой", ОплатаПлатежнойКартой);
	ДополнительныеПараметры.Вставить("ОплатаПлатежнойСистемой", ОплатаПлатежнойСистемой);
	ДополнительныеПараметры.Вставить("ОплатаЭСНСПК", ОплатаЭСНСПК);
	ДополнительныеПараметры.Вставить("Печать", Печать);
	
	ОбработкаОповещения =
		Новый ОписаниеОповещения("ОплатитьТоварыПослеВыбораККМПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ТекущаяКассаККМ) Тогда
		Результат = Новый Структура();
		Результат.Вставить("Касса", 	ТекущаяКассаККМ);
		Результат.Вставить("Организация", Объект.Организация);
		ВыполнитьОбработкуОповещения(ОбработкаОповещения, Результат);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КассыККМ",    МассивКассККМКлиент);
		ПараметрыФормы.Вставить("Организации", МассивОрганизацийКлиент);
		
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораКассыККМ",
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор,
			,
			,
			ОбработкаОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;

КонецПроцедуры

Функция ПодключитьсяКУТ()
	Попытка
		Веб_Соединение = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User_tbk", "http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl", 10);
		Массив	=	новый Массив;
		Массив.Добавить(Веб_Соединение);
		Адрес_ВебСоединение	=	ПоместитьВоВременноеХранилище(Массив,ЭтаФорма.УникальныйИдентификатор);
		
		Возврат Веб_Соединение;
	Исключение
		Сообщить("Не удалось подключиться к УТ. Попробуйте выполнить действие позже.");
		Возврат Неопределено; 
	КонецПопытки; 	
КонецФункции

&НаКлиенте
Процедура ТБКНайтиПоТелефонуПосле(Команда)
	Если СтрДлина(СокрЛП(ТелефонКлиента)) <> 12 тогда
		Сообщить("Номер должен быть 12 символов. Вы ввели: "+СтрДлина(СокрЛП(ТелефонКлиента)) + "  символов. Номер телефона: "+СокрЛП(ТелефонКлиента));	
		Возврат
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") тогда
		Сообщить("Не надо так делать! При возврате поиск клиента в программе происходит автоматически!");
		Возврат;
	КонецЕсли;

	ПеремТовары	=	объект.Товары;
	
	Для Ном = 2 по СтрДлина(ТелефонКлиента) цикл
		Символ	=	Сред(ТелефонКлиента,Ном,1);	
		КодСимвола	=	КодСимвола(Символ);
        Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) тогда
			Сообщить("В номере телефона есть недопустимые символы. Сотрите номер и введите заново");	
			Возврат
		КонецЕсли;
	КонецЦикла;
	
	Если не ОфлайнРежим тогда
		СтруктураБаллов					=	ТБК_ПрограммаЛояльности.ПолучитьКоличествоБаллов(СокрЛП(ТелефонКлиента), ПеремТовары, Адрес_ВебСоединение);
		Если СтруктураБаллов <> 0 тогда
			КоличествоНакопленныхБаллов		=	СтруктураБаллов.КоличествоНакопленныхБаллов;
			КоличествоБалловМожноСписать	=	СтруктураБаллов.КоличествоБалловМожноСписать;
			ИмяКлиента						=	СтруктураБаллов.Имя;
			ТелефонКлиента					=	СтруктураБаллов.Телефон;
			ПочтаКлиента					=	СтруктураБаллов.Почта;
			Объект.ТБК_IDКлиента			=	СтруктураБаллов.ID_Ответ;
			//Если ЗначениеЗаполнено(ПочтаКлиента) тогда
			//	НеПечататьЧек					=	Истина;
			//КонецЕсли;
			Элементы.ТелефонКлиента.ТолькоПросмотр	=	Истина;
			
			Если ИспользоватьВторойМонитор тогда
				ОбработатьДействияВторойМонитор();
			КонецЕсли; 
			
			Попытка
				ДобавитьЗаписьВЖурнал("Найти по телефону лояльности: "+Объект.ТБК_IDКлиента+"; телефон: "+ТелефонКлиента);
			Исключение
			КонецПопытки;
		КонецЕсли;   
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТБКУзнатьКоличествоБалловПоТелефону1После(Команда)
	ПеремТовары	=	Объект.Товары;
	
	СтруктураБаллов					=	ТБК_ПрограммаЛояльности.ПолучитьКоличествоБаллов(СокрЛП(ТелефонКлиента), ПеремТовары, Адрес_ВебСоединение);
	Если СтруктураБаллов <> 0 тогда
		Сообщить("У клиента: "+СтруктураБаллов.Имя+" накоплено: "+СтруктураБаллов.КоличествоНакопленныхБаллов+" баллов.");
	КонецЕсли; 
КонецПроцедуры  

&НаКлиенте
Процедура ТБКОчиститьПоляпрограммыЛояльностиПосле(Команда)
	ТБК_IDКлиента					=	"";
	Объект.ТБК_IDКлиента			=	"";
	КоличествоБалловМожноСписать	=	0;
	КоличествоНакопленныхБаллов		=	0;
	ИмяКлиента						=	"";
	ТелефонКлиента					=	"";
	ПочтаКлиента					=	"";
	КоличествоБалловСписано			=	0; 	
	Элементы.ТелефонКлиента.ТолькоПросмотр	=	Ложь;  
	
	Для каждого СтрокаТовары из Объект.Товары цикл
		СтрокаТовары.СуммаРучнойСкидки		=	0;
		СтрокаТовары.ПроцентРучнойСкидки	=	0;
		СтрокаТовары.Сумма					=	СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок;	
	КонецЦикла;
	//Марк 2024-03-14
	ОбновитьФормуНаКлиенте();
	//КонецМарк
	Если ИспользоватьВторойМонитор тогда
		ОбработатьДействияВторойМонитор();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТБКТелефонКлиентаАвтоПодборПосле(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если текст = "" тогда
		Если ТелефонКлиента = "" тогда
			ЭтаФорма.ТекущийЭлемент.УстановитьГраницыВыделения(3,3);	
		иначе
			Поз	=	СтрДлина(СокрЛП(ТелефонКлиента)) + 1;
			ЭтаФорма.ТекущийЭлемент.УстановитьГраницыВыделения(Поз,Поз);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ТБКПереключитьНеПечататьЧекНажатиеПосле(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка 	= ложь;
	НеПечататьЧек			=	не НеПечататьЧек;
	ЭтаФорма.ТекущийЭлемент	=	Элементы.НеПечататьЧек;
КонецПроцедуры

&НаКлиенте
&Вместо("ПробитьЧекККМ")
Процедура ТБКПробитьЧекККМ(ЧекККМСсылка, КассаККМ, НеПечататьБумажныйЧек = Ложь)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка"));
	ПараметрыЗаполнения.Вставить("ЧекПробит", Ложь);
	
	ПараметрыКассыККМ         = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
	ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
	
	ИспользоватьКассуККМБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
	Отказ = Ложь;
	
	Если НЕ ИспользоватьПодключаемоеОборудование ИЛИ ИспользоватьКассуККМБезПодключенияОборудования ИЛИ ОтправкаЧековЧерезСервис Тогда
		ПогаситьОднократныеСкидки();
		Если НомерДокументаКассыККМ[КассаККМ] <> Неопределено Тогда
			НомерЧекаККМ  = НомерДокументаКассыККМ[КассаККМ];
		Иначе
			НомерЧекаККМ  = ПорядковыйНомерПродажи;
		КонецЕсли;
		ПараметрыЗаполнения.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
		ПараметрыЗаполнения.Вставить("Дата", ОбщегоНазначенияКлиент.ДатаСеанса());
		ПараметрыЗаполнения.Вставить("НомерЧекаККМ" , НомерЧекаККМ);
		ПараметрыЗаполнения.Вставить("ЧекККМСсылка" , ЧекККМСсылка);
		ПараметрыЗаполнения.ЧекПробит = Истина;
		ПробитьЧекБезПодключенияОборудования(ПараметрыЗаполнения);
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		Отказ = Истина;
		ЗаголовокИнформации = НСтр("ru = 'Не выбрано устройство для печати чеков.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации);
		ПробитьЧекОчередиЗавершение(ПараметрыЗаполнения, Отказ);
		Возврат;
		
	Иначе
		// Готовим данные
		ТекстСообщенияЕГАИС = "";
		
		НомерЧека = НомерДокументаКассыККМ[КассаККМ] + 1;
		ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(
			ЧекККМСсылка,
			НомерЧека,
			ТекстСообщенияЕГАИС,
			НеПечататьБумажныйЧек);
		
		ОбщиеПараметры.Вставить("ТекстСообщенияЕГАИС", ТекстСообщенияЕГАИС);
		
		//Вик  
		Если НеПечататьЧек тогда
			//коммент от 202-12-04. налоговая включила проверку почту
			//ОбщиеПараметры.Электронно = истина;
			//Если ЗначениеЗаполнено(ПочтаКлиента) тогда
			//	ОбщиеПараметры.ПокупательEmail	=	ПочтаКлиента;
			//иначе
				ОбщиеПараметры.ПокупательEmail	=	"check@tabakon.ru";
			//КонецЕсли;   
			НеПечататьЧек = Ложь;
		КонецЕсли;
		// 
	
		ИдентификаторЧекаВОчереди = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДобавитьЧекВОчередьЧековККТ(ОбщиеПараметры);
		Если ИдентификаторЧекаВОчереди = Неопределено Тогда 
			ИдентификаторЧекаВОчереди = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДобавитьЧекВОчередьЧековККТ(ОбщиеПараметры);
			Если ИдентификаторЧекаВОчереди = Неопределено Тогда
				Отказ = Истина;
				ЗаголовокИнформации = НСтр("ru = 'Устройство печати чеков занято. Повторите попытку позднее.'");
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщенияЕГАИС);
				ПробитьЧекОчередиЗавершение(ПараметрыЗаполнения, Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		НовыйЧекВОчереди = МассивЧековВОчереди.Добавить();
		НовыйЧекВОчереди.ИдентификаторЧекаВОчереди = ОбщиеПараметры.ИдентификаторФискальнойЗаписи;
		НовыйЧекВОчереди.Статус = Ложь;
		НовыйЧекВОчереди.БезПодключенияОборудования = Ложь;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписьДанныхРучныхСкидок(Чек)
		
	РучнаяСкидка = Объект.Товары.Итог("РучнаяСкидка");
	
	Если РучнаяСкидка > 0 Тогда
	
		рег = РегистрыСведений.ТБКРучныеСкидкиЗапись.СоздатьМенеджерЗаписи();	
	    рег.Чек = Чек;
		рег.РучнаяСкидка = РучнаяСкидка;
		Попытка                                           
			рег.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("Информация",УровеньЖурналаРегистрации.Информация,,, "Не удалось записать данные по ручкой скидке. " + ОписаниеОшибки());
		КонецПопытки;

	КонецЕсли;

КонецПроцедуры // ()

&НаКлиенте
&Вместо("НапечататьЧекиККМ")
Процедура ТБКНапечататьЧекиККМ(МассивСсылокЧеков, ЗаявлениеБезПроведения = Ложь)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораПечатныхФорм.Открытие");
	
	ЗаполнитьАдресТаблицыПечатныхФорм(МассивСсылокЧеков);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТаблицыПечатныхФорм", АдресТаблицыПечатныхФорм);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивСсылокЧеков", МассивСсылокЧеков);
	
	//Если БыстраяПечать тогда//Вик 2022-11-14
		ОповещениеОткрытьФормуВыбораПечатныхФорм("ТоварныйЧекДляФР",ДополнительныеПараметры)
	//иначе
	//	ОбработчикОповещения = Новый ОписаниеОповещения(
	//		"ОповещениеОткрытьФормуВыбораПечатныхФорм", ЭтотОбъект, ДополнительныеПараметры);
	//	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	//	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораПечатныхФорм",
	//		ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим); 
	//	
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТБКТБК_ПечатьПоследнегоЧекаПосле(Команда)   
	ПоследнийЧек	=	ПолучитьПоследнийЧек();
	МассивСсылокЧеков = Новый Массив;
	МассивСсылокЧеков.Добавить(ПоследнийЧек);

	ТБКНапечататьЧекиККМ(МассивСсылокЧеков);
КонецПроцедуры 

&НаСерверебезКонтекста 
Функция  ПолучитьПоследнийЧек()  	
	Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	ЧекККМ.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЧекККМ КАК ЧекККМ
	      	 	             |ГДЕ
	      	 	             |	ЧекККМ.Проведен
	      	 	             |	И ЧекККМ.ВидОперации = &ВидОперации
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	ЧекККМ.Дата УБЫВ");
	Запрос.УстановитьПараметр("ВидОперации",Перечисления.ВидыОперацийЧекККМ.Продажа);  
	Рез = Запрос.Выполнить().Выгрузить();
	Возврат Рез[0].Ссылка; 
КонецФункции

//&НаКлиенте
//&Вместо("ПробитьЧекККМЗавершение")
//Процедура ТБКПробитьЧекККМЗавершение(РезультатВыполнения, ПараметрыОперации)
//	ПараметрыЗаполнения = ПараметрыОперации.ПараметрыЗаполнения;
//	
//	Если РезультатВыполнения.Результат Тогда
//		
//		// Установить полученное значение номера чека реквизиту документа.
//		ПараметрыЗаполнения.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
//		ПараметрыЗаполнения.Вставить("Дата", ОбщегоНазначенияКлиент.ДатаСеанса());
//		ПараметрыЗаполнения.Вставить("НомерСменыККМ", РезультатВыполнения.ВыходныеПараметры[0]);
//		ПараметрыЗаполнения.Вставить("НомерЧекаККМ" , РезультатВыполнения.ВыходныеПараметры[1]);
//		
//		Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.НомерЧекаККМ) Тогда
//			Если НомерДокументаКассыККМ[ПараметрыОперации.КассаККМ] <> Неопределено Тогда
//				НомерЧекаККМ  = НомерДокументаКассыККМ[ПараметрыОперации.КассаККМ];
//			Иначе
//				НомерЧекаККМ  = ПорядковыйНомерПродажи;
//			КонецЕсли;
//			
//			ПараметрыЗаполнения.Вставить("НомерЧекаККМ", НомерЧекаККМ);
//		КонецЕсли;
//		
//	Иначе
//		ЗаголовокИнформации = НСтр("ru = 'При печати чека произошла ошибка.'");
//		ТекстСообщения = НСтр("ru = 'Чек не напечатан на устройстве для печати чеков.
//		                            |Дополнительное описание: %ДополнительноеОписание%'");
//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
//		//Вик 2022-11-23
//		Если Найти(ТекстСообщения,"Порт занят") тогда
//			ТекстСообщения	=	"У вас запущено 2 программы 1с! Закройте одну из них. Если не помогло - перезагрузите компьютер." + Символы.ПС + Символы.ПС + ТекстСообщения
//			+ Символы.ПС + Символы.ПС + "У вас запущено 2 программы 1с! Закройте одну из них. Если не помогло - перезагрузите компьютер.";
//			
//		ИначеЕсли Найти(ТекстСообщения,"Порт недоступен") тогда
//			ТекстСообщения	=	"Проверьте включен ли фискальник (должна гореть зеленая лампочка)" + Символы.ПС + Символы.ПС + ТекстСообщения
//			 + Символы.ПС + Символы.ПС + "Проверьте включен ли фискальник (должна гореть зеленая лампочка)" ;
//		КонецЕсли;
//		ОбщегоНазначенияВызовСервера.ЗаписатьВЛог(ТекстСообщения);
//		 //		 
//		//КонецВик		
//		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
//		
//	КонецЕсли;
//	
//	ПараметрыЗаполнения.ЧекПробит = РезультатВыполнения.Результат;
//	
//	ВыполнитьОбработкуОповещения(ПараметрыОперации.ОповещениеПриЗавершении, ПараметрыЗаполнения);

//КонецПроцедуры
//КонецВик

&НаСерверебезКонтекста
Процедура ДобавитьЗаписьВЖурнал(Текст); 
	ЗаписьЖурналаРегистрации("Информация",УровеньЖурналаРегистрации.Примечание,,,Текст);
КонецПроцедуры

&НаКлиенте
Процедура ТБКЗарегистрироватьКлиентаВПрограммеЛояльностиПосле(Команда)
    Оповещение = Новый ОписаниеОповещения("ПослеОткрытияФормы_ЗарегистрироватьКлиентаВПрограммеЛояльности", 
      ЭтотОбъект);


	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФорма_ЗарегистрироватьКлиентаВПрограммеЛояльности",
						Неопределено,ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
						
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормы_ЗарегистрироватьКлиентаВПрограммеЛояльности(Результат, Параметры) экспорт
	Если СтруктураВозвратаЗарегистрироватьКлиента.флУспех тогда
		ТелефонКлиента	=	СтруктураВозвратаЗарегистрироватьКлиента.ТелефонКлиента;
		ИмяКлиента		=	СтруктураВозвратаЗарегистрироватьКлиента.ИмяКлиента;

		//ТБКНайтиПоТелефонуПосле(Неопределено);
		
	КонецЕсли;  
КонецПроцедуры

&НаСервере
&Вместо("ЗаполнитьКнопкиНижнейПанели")
Процедура ТБКЗаполнитьКнопкиНижнейПанели(Отказ, ПараметрыИнформации)
	//ПараметрыЗаполненияКнопок = РозничныеПродажиКлиентСервер.СтруктураЗаполненияНижнихКнопокРМК();
	//ПараметрыЗаполненияКнопок.НастройкаРМК                = НастройкаРМК;
	//ПараметрыЗаполненияКнопок.ИспользоватьНастройкуРМК    = ИспользоватьНастройкуРМК;
	//ПараметрыЗаполненияКнопок.ПрограммноСозданныеЭлементы = ПрограммноСозданныеЭлементы;
	//ПараметрыЗаполненияКнопок.КартинкиБыстрыхТоваров      = КартинкиБыстрыхТоваров;
	//ПараметрыЗаполненияКнопок.УникальныйИдентификатор     = УникальныйИдентификатор;
	//ПараметрыЗаполненияКнопок.ПрограммноСозданныеКоманды  = ПрограммноСозданныеКоманды;
	//ПараметрыЗаполненияКнопок.ТаблицаБыстрыхТоваров       = ТаблицаБыстрыхТоваров;
	//
	//ПараметрыДоступностиЭлементов = РозничныеПродажиКлиентСервер.СтруктураДоступностьЭлементовРМК();
	//ПараметрыДоступностиЭлементов.НаборПравИНастроек               = НаборПравИНастроек;
	//ПараметрыДоступностиЭлементов.ЦенаВключаетНДС                  = Объект.ЦенаВключаетНДС;
	//ПараметрыДоступностиЭлементов.ТаблицаКассККМОрганизаций        = ТаблицаКассККМОрганизаций;
	//ПараметрыДоступностиЭлементов.ПодключаемоеОборудованиеЕстьТСД  = ПодключаемоеОборудованиеЕстьТСД;
	//ПараметрыДоступностиЭлементов.ПодключаемоеОборудованиеЕстьВесы = ПодключаемоеОборудованиеЕстьВесы;
	//ПараметрыДоступностиЭлементов.Магазин                          = Объект.Магазин;
	//
	//ПараметрыЗаполненияКнопок.Вставить("ПараметрыДоступностиЭлементов", ПараметрыДоступностиЭлементов);
	
	//РозничныеПродажиСервер.ЗаполнитьКнопкиНижнейПанели(Отказ, ПараметрыИнформации, Элементы, ПараметрыЗаполненияКнопок, ЭтотОбъект);
	
	ПалитраБыстрыхТоваров = НастройкаРМК.ПалитраБыстрыхТоваров;
	

КонецПроцедуры

&НаКлиенте
Процедура ТБКОткрытьИнструкцииПосле(Команда)
	ОткрытьФорму("Справочник.ТБК_Инструкции.ФормаСписка",); 
КонецПроцедуры

&НаКлиенте
Процедура ТБКОткрытьНовостиПосле(Команда)
	ОткрытьФорму("Справочник.ТБКНовости.ФормаСписка",); 
КонецПроцедуры

&НаКлиенте
Процедура ТБКТелефонКлиентаОкончаниеВводаТекстаПосле(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)  
	Если СтрДлина(СокрЛП(Текст)) = 12 тогда 
		ТелефонКлиента	=	Текст;
		ТБКНайтиПоТелефонуПосле(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТБКОткрытьВыполнениеПлановПосле(Команда)
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКВыполнениеПланов");
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНовыхСообщений() Экспорт
	ТелефонКлиента	=	элементы.телефонклиента.ТекстРедактирования;
	флНужноВключитьИндикацию	=	ПроверкаНеобходимостиИндикацииКнопкиЧат();
	ОбработкаИндикацииКнопкичЧат(флНужноВключитьИндикацию);  
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТрейдИН() Экспорт
	трейдИн = ПолучитьТрейдИн();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОфлайнРежим() Экспорт
	ПринудительныйОфлайнРежим	=	ПолучитьРежимОфлайнйнНаСервере();

	Если ПринудительныйОфлайнРежим = "1" тогда
		ОфлайнРежим						 = Истина;
		Элементы.ОфлайнРежим.Доступность = Ложь;
		ТБКОфлайнРежимПриИзмененииПосле(Неопределено);
		
	ИначеЕсли  ПринудительныйОфлайнРежим = "0" и Элементы.ОфлайнРежим.Доступность = Ложь тогда 
		ОфлайнРежим						 = Ложь;
		Элементы.ОфлайнРежим.Доступность = Истина;
		ТБКОфлайнРежимПриИзмененииПосле(Неопределено);

	КонецЕсли;

КонецПроцедуры

&наСервереБезКонтекста
Функция ПолучитьРежимОфлайнйнНаСервере()
	возврат ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ПринудительныйОфлайнРежим");	
КонецФункции    
		
&НаКлиенте
Процедура ТБКЧатСОфисомПосле(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеОткрытияЧата",ЭтотОбъект); 
	Форма	=	ОткрытьФорму("Обработка.ТБКЧатУТ.Форма",,,,,,Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеОткрытияЧата(РезультатОткрытияФормы, стр) экспорт
	флНужноВключитьИндикацию	=	ПроверкаНеобходимостиИндикацииКнопкиЧат();
	ОбработкаИндикацииКнопкичЧат(флНужноВключитьИндикацию);   
КонецПроцедуры  

&НаКлиенте
Процедура ОбработкаИндикацииКнопкичЧат(флНужноВключитьИндикацию)
	Если флНужноВключитьИндикацию тогда
		Элементы.ЧатСофисом.ЦветФона = WebЦвета.Красный;
	иначе
		Элементы.ЧатСофисом.ЦветФона = ОбщегоНазначенияВызовСервера.ПолучитьЦветФонаКонпки();
	КонецЕсли;
КонецПроцедуры

Функция  ПроверкаНеобходимостиИндикацииКнопкиЧат()
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБКСообщенияУТРозница.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Справочник.ТБКСообщенияУТРозница КАК ТБКСообщенияУТРозница
	      	 	             |ГДЕ
	      	 	             |	ТБКСообщенияУТРозница.Отправитель = ""Офис""
	      	 	             |	И НЕ ТБКСообщенияУТРозница.Прочитано");
	
	Возврат не запрос.Выполнить().Пустой();
КонецФункции

&НаКлиенте
Процедура ДействияПриДобавленииНовойПозиции(Элемент = Неопределено, ОТказ = Ложь); 

	//2023-04-17 		
	Стр = Элементы.Товары.ТекущиеДанные;
	Если Стр <> Неопределено Тогда

		Если Элемент <> Неопределено тогда
			Если Элемент.ТекущийЭлемент.Имя <> "ТоварыКоличествоУпаковок" тогда
				Если не Прав(СокрЛП(Строка(Стр.Номенклатура)),3)=" БК" тогда 
					
					отказ = истина;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(стр.Продавец) Тогда
			стр.Продавец =  ОбщегоНазначенияВызовСервера.ПолучитьТекущегоПродавца();
		КонецЕсли;
		
		//Вик 2023-09-13 Костыль
		Если ПроверятьНоменклатуруПриДобавлении = 1 тогда
			ПК			=	ПолучитьПолныйКод(стр.Номенклатура);	
			
			Если Найти(ПК,"00048218445") или Найти(ПК,"Ю2-00025964") или Найти(ПК,"00048209667") или Найти(ПК,"Ю2-00024988") или Найти(ПК,"Ю2-00007954")
				или Найти(ПК,"Ю2-00025964") или  Найти(ПК,"Ю2-00024989")  тогда		
				
				Сообщить("Вам нельзя продавать этот товар!");
				Объект.Товары.Удалить(Стр);
				возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ПроверятьНоменклатуруПриДобавлении = 2 тогда
			ПК			=	ПолучитьПолныйКод(стр.Номенклатура);	
			
			Если не (Найти(ПК,"00048218445") или Найти(ПК,"Ю2-00025964") или Найти(ПК,"00048209667") или Найти(ПК,"Ю2-00024988") или Найти(ПК,"Ю2-00007954")
				или Найти(ПК,"Ю2-00025964") или  Найти(ПК,"Ю2-00024989"))  тогда		
				
				Сообщить("Вам нельзя продавать этот товар!");
				Объект.Товары.Удалить(Стр);
				возврат;
			КонецЕсли;
		КонецЕсли;
		
		//Вик 2024-06-28
		
		
		Если Найти(Строка(ТекущаяКассаККМ), "Наличная33ПДВ") или Найти(Строка(ТекущаяКассаККМ), "Новосмоленская12ПДВ")
			или Найти(Строка(ТекущаяКассаККМ), "Средний50ПДВ") или Найти(Строка(ТекущаяКассаККМ), "Стачек4ПДВ") тогда 
			ДатаЗапретаПродажиАлкоголя	=	'20240629110000';
		иначе
			ДатаЗапретаПродажиАлкоголя	=	'20240629220000';
		КонецЕсли;

		Если ТекущаяДата() <  ДатаЗапретаПродажиАлкоголя тогда
			Если Лев(Строка(стр.Номенклатура),4) = "Пиво"  Тогда	
				Сообщить("Запрещено продавать алкоголь!");
				Объект.Товары.Удалить(Стр);
				возврат;
			КонецЕсли;
		КонецЕсли; 
		//

		Если ЗначениеЗаполнено(стр.Номенклатура) и ЗначениеЗаполнено(стр.Цена) Тогда
			Если не (Найти(ПолноеНаименованиеНоменклатуры(стр.Номенклатура),"Напиток")  или Найти(ПолноеНаименованиеНоменклатуры(стр.Номенклатура),"Набор")) Тогда//Вик 2022_04_12  
				Если (трейдИн.Получить(стр.Номенклатура) <> неопределено) Тогда
					параметрыВыбора = Новый Структура();
					параметрыВыбора.Вставить("ТрейдИн", трейдИн.Получить(стр.Номенклатура));
					
					оповещение = Новый ОписаниеОповещения("ОбработкаЗавершенияВыбораЗамены",ЭтотОбъект, стр);
					
					ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаВыборЗамены",параметрыВыбора,УникальныйИдентификатор
						,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;

		
		Если НЕ ПроверкаНапредметПустогоНаименованияТовара(стр.Номенклатура) Тогда
			оповещение = Новый ОписаниеОповещения("ОбработкаЗавершения_ПроверкаНапредметПустогоНаименованияТовара",ЭтотОбъект, стр);
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаСообщениеОПлохойНоменклатуре",неопределено,неопределено
					,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
					
			возврат;			
		КонецЕсли;
		
		Если ПроверкаНаПометку(стр.Номенклатура)  Тогда
			ПараметрыОткр	=	новый Структура;
			ПараметрыОткр.Вставить("ИзменитьЗаголовок",истина);
			
			оповещение = Новый ОписаниеОповещения("ОбработкаЗавершения_ПроверкаНапредметПустогоНаименованияТовара",ЭтотОбъект, стр);//эта подходит
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаСообщениеОПлохойНоменклатуре",ПараметрыОткр,неопределено
					,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
					
			возврат;			
		КонецЕсли; 
		
		
		// ОбработкаГЛО
		Элементы.КартинкаПО22РучныеСкидки.Доступность			=	Истина;
		
		флЕстьГЛОсоСкидкой	=	Ложь;
		Для Каждого стр из Объект.Товары Цикл

			Если стр.СуммаРучнойСкидки > 0 тогда 
				Если ЭтоГЛО(стр.Номенклатура) тогда //Вик 2021_09_28 по просьбе Козьминой
					Элементы.КартинкаПО22РучныеСкидки.Доступность			=	Ложь;
					флЕстьГЛОсоСкидкой = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
		
		Если не флЕстьГЛОсоСкидкой тогда
			КодАкции = "";
		КонецЕсли; 
		
		Если ИспользоватьВторойМонитор тогда
			ОбработатьДействияВторойМонитор();
		КонецЕсли; 
		
		//Вик 2024-09-10 МАРКИ для БК
		Если Элемент <> Неопределено тогда
			Если  Прав(СокрЛП(Строка(Стр.Номенклатура)),3)=" БК" тогда
				
				ОтборБК = Новый Структура("КлючСвязи", стр.НомерСтроки);
				Строки = Объект.ТБКМаркиДляБК.НайтиСтроки(ОтборБК);
				Если Строки.Количество()=0  тогда
										
					ПараметрыОткрытия	= Новый Структура();
					ПараметрыОткрытия.Вставить("Номенклатура", стр.Номенклатура);     
					ПараметрыОткрытия.Вставить("Количество", 1);     
					
					оповещение = Новый ОписаниеОповещения("ОбработкаЗавершенияВводаМаркиДляБК",ЭтотОбъект, стр);
					
					ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаВводаМаркиДляБК",ПараметрыОткрытия,УникальныйИдентификатор
						,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				КонецЕсли;  
			КонецЕсли;
		КонецЕсли;
		//КонецВик
	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействияВторойМонитор()
	Если Объект.Товары.Количество()=0 тогда
		ОкнаПриложения = ПолучитьОкна();          
		Для каждого ОкноПриложения Из ОкнаПриложения Цикл  
			Если Найти(ОкноПриложения.Заголовок, "Табакон") тогда
				НайденнаяФорма = ОкноПриложения.Содержимое[0];
				НайденнаяФорма.Закрыть(); 					
			КонецЕсли;
		КонецЦикла;		
		
	иначе  
		ОкнаПриложения = ПолучитьОкна();          
		Для каждого ОкноПриложения Из ОкнаПриложения Цикл  
			Если Найти(ОкноПриложения.Заголовок, "Табакон") тогда
				НайденнаяФорма = ОкноПриложения.Содержимое[0];
				
				НайденнаяФорма.Объект.Товары.очистить();  
				Для каждого Строка из Объект.Товары цикл
					НоваяСтрока	=	НайденнаяФорма.Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				КонецЦикла;  
				
				НайденнаяФорма.ДоступноБаллов	=	КоличествоНакопленныхБаллов; 
			КонецЕсли;
		КонецЦикла; 
		
		Если НайденнаяФорма = Неопределено тогда
			НайденнаяФорма	=	ПолучитьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКВторойМонитор"); 				
			НайденнаяФорма.открыть();           
			//Двигаем
			AutoItX3 = Новый COMОбъект("AutoItX3.Control"); 
			
			ОкнаПриложения = ПолучитьОкна();
			Для каждого ОкноПриложения Из ОкнаПриложения Цикл 
				Если Найти(ОкноПриложения.Заголовок, "Табакон") тогда 
					//AutoItX3.WinSetState(ОкноПриложения.Заголовок, "",3);						
					AutoItX3.WinMove(ОкноПриложения.Заголовок, "", СдвигПоРазрешениюЭкрана,500 ); 
				КонецЕсли;
			КонецЦикла;	
			
			//
			НайденнаяФорма.ДоступноБаллов	=	КоличествоНакопленныхБаллов;
			Для каждого Строка из Объект.Товары цикл
				НоваяСтрока	=	НайденнаяФорма.Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			КонецЦикла; 
			ЭтаФорма.Активизировать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ТБКТоварыПередНачаломИзмененияПосле(Элемент, Отказ)
	ДействияПриДобавленииНовойПозиции(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ТБКОфлайнРежимПриИзмененииПосле(Элемент)
	Элементы.НайтиПоТелефону.Доступность	=	не ОфлайнРежим;
	Элементы.СписатьБаллы.Доступность		=	не ОфлайнРежим;  
КонецПроцедуры

&НаКлиенте
Процедура ТБКОстаткиМагазинаПосле(Команда)
	ОткрытьФорму("Отчет.ТБКОтчетОстаткиВРознице.Форма");
КонецПроцедуры

&НаСервереБезКонтекста  
Функция ЭтоМаркированнаяНоменклатура(Номенклатура) // Повторяется
	возврат Найти(Номенклатура.ВидНоменклатуры.Наименование,"Табак (х)") или Номенклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВидНалогаСервер(НужнаяОрг)  // Повторяется
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ПрименениеСистемНалогообложенияСрезПоследних.СистемаНалогообложения КАК СистемаНалогообложения
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ПрименениеСистемНалогообложения.СрезПоследних КАК ПрименениеСистемНалогообложенияСрезПоследних
	      	 	             |ГДЕ
	      	 	             |	ПрименениеСистемНалогообложенияСрезПоследних.Организация = &Организация");
	Запрос.УстановитьПараметр("Организация",НужнаяОрг);
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если рез.Количество() = 0 тогда
		Сообщить("Внимание! Не найдена система налогооблажения!");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат рез[0].СистемаНалогообложения;
	
КонецФункции

&НаКлиенте
Процедура ТБКНомерЗаказаПокупателяАвтоПодборПосле(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если СтрДлина(СокрЛП(Текст)) = 5 ИЛИ СтрДлина(СокрЛП(Текст)) = 4 Тогда
		ЗатолнитьТоварыПоЗаказу(Текст);
		НомерЗаказаПокупателя	=	Текст;
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ЗатолнитьТоварыПоЗаказу(ВведенныйНомер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Ссылка КАК Ссылка,
		|	ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки,
		|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
		|	ЗаказПокупателяТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЗаказПокупателяТовары.КодСтроки КАК КодСтроки,
		|	ЗаказПокупателяТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		|	ЗаказПокупателяТовары.Резервировать КАК Резервировать,
		|	ЗаказПокупателяТовары.Продавец КАК Продавец,
		|	ЗаказПокупателяТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|	ЗаказПокупателяТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ЗаказПокупателяТовары.СуммаНДС КАК СуммаНДС,
		|	ЗаказПокупателяТовары.Характеристика КАК Характеристика,
		|	ЗаказПокупателяТовары.Упаковка КАК Упаковка,
		|	ЗаказПокупателяТовары.Цена КАК Цена,
		|	ЗаказПокупателяТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|	ЗаказПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
		|	ЗаказПокупателяТовары.Сумма КАК Сумма,
		|	ЗаказПокупателяТовары.Отменено КАК Отменено,
		|	ЗаказПокупателяТовары.ПричинаОтмены КАК ПричинаОтмены,
		|	ЗаказПокупателяТовары.КоличествоУпаковок КАК Количество
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка.НомерЗаказаНаСайте ПОДОБНО &НомерЗаказаНаСайте
		|	И НЕ ЗаказПокупателяТовары.Ссылка.ПометкаУдаления
		|	И ЗаказПокупателяТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.Согласован)
		|	И ЗаказПокупателяТовары.Ссылка.Дата >= &ДатаНач";
	
	Запрос.УстановитьПараметр("НомерЗаказаНаСайте", "%"+СокрЛП(ВведенныйНомер)+"%");
	Запрос.УстановитьПараметр("ДатаНач", НачалоГода(ТекущаяДата()));
                                                    
	Если Запрос.Выполнить().Пустой() Тогда	
		Возврат;
	КонецЕсли;   	
	
	ТоварыЗаказа = Запрос.Выполнить().Выгрузить();
	
	объект.ЗаказПокупателя = ТоварыЗаказа[0].Ссылка;
	
	Объект.Товары.Очистить();                   
		
	НужныйСклад = ОбщегоНазначения.ПолучитьСкладИзООРП();
	НужаяСНО = ПолучитьВидНалогаСервер(Объект.Организация);
	Для каждого Строка из ТоварыЗаказа цикл
		НоваяСтрока	= Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.Склад			=	НужныйСклад;
		НоваяСтрока.Организация		=	Объект.Организация;
		НоваяСтрока.ЗаказПокупателя	=	Строка.Ссылка;
		НоваяСтрока.СтавкаНДС		=	Перечисления.СтавкиНДС.БезНДС;
		НоваяСтрока.ВидНалога		=	НужаяСНО;
		Если ЭтоМаркированнаяНоменклатура(НоваяСтрока.Номенклатура) тогда
			НоваяСтрока.НеобходимостьВводаАкцизнойМарки	= истина;
			НоваяСтрока.СтатусПроверкиГосИС 			= 2;
			НоваяСтрока.ВидПродукцииИС					= Перечисления.ВидыПродукцииИС.Табак;
			НоваяСтрока.МаркируемаяПродукция			= Истина;  
		КонецЕсли;

	КонецЦикла;
	//Элементы.Товары.ТолькоПросмотр = Истина;
	Элементы.НомерЗаказаПокупателя.ТолькоПросмотр = Истина;
	Элементы.КартинкаПО22РучныеСкидки.Доступность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ТБКNumПлюсПосле(Команда)
	ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.ТелефонКлиента;
  ТекущийЭлемент.УстановитьГраницыВыделения(3, 3);
КонецПроцедуры

&НаКлиенте
Процедура ТБКОчиститьНомерЗаказаПосле(Команда)
	Объект.Товары.Очистить();
	Элементы.Товары.ТолькоПросмотр = Ложь;
	Элементы.НомерЗаказаПокупателя.ТолькоПросмотр = Ложь;
	НомерЗаказаПокупателя	=	"";
КонецПроцедуры

&НаКлиенте
&После("ОповещениеОткрытьФормуВопросаАннулироватьЧекЗавершение")
Процедура ТБКОповещениеОткрытьФормуВопросаАннулироватьЧекЗавершение(РезультатВыполнения, ДополнительныеПараметры)
	Если РезультатВыполнения.ЧекАннулирован Тогда
		ТБКОчиститьПоляпрограммыЛояльностиПосле(Неопределено);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТБКТоварыКоличествоУпаковокПриИзмененииПеред(Элемент)
	//2023-09-13 Не даем оплачивать пока не рассчиталась скидка
	Элементы.КартинкаЧО06ПлатежнаяКарта.Доступность	=	ложь;
	Элементы.КартинкаЧО07СложнаяОплата.Доступность	=	ложь;
	Элементы.КартинкаЧО05Наличные.Доступность		=	ложь;  
	//    
	
	//Вик 2024-09-10 МАРКИ для БК
	Стр = Элементы.Товары.ТекущиеДанные;

	Если Элемент <> Неопределено тогда
		Если  Прав(СокрЛП(Строка(Стр.Номенклатура)),3)=" БК" тогда
			
			ОтборБК = Новый Структура("КлючСвязи", стр.НомерСтроки);
			Строки = Объект.ТБКМаркиДляБК.НайтиСтроки(ОтборБК);
			СтрокаУжеОтсканированныеБК = "";
			СтрокаКоличествоВУпаковке  = "";
			Для каждого Строка из Строки цикл
				СтрокаУжеОтсканированныеБК = СтрокаУжеОтсканированныеБК + Строка.марка + Символы.ПС;
				СтрокаКоличествоВУпаковке  = СтрокаКоличествоВУпаковке + Строка.КоличествоВУпаковке + Символы.ПС;
			КонецЦикла;
												
			ПараметрыОткрытия	= Новый Структура();
			ПараметрыОткрытия.Вставить("Номенклатура", стр.Номенклатура);     
			ПараметрыОткрытия.Вставить("Количество", Элементы.Товары.ТекущиеДанные.КоличествоУпаковок);     
			ПараметрыОткрытия.Вставить("УжеОтсканированныеБК", СтрокаУжеОтсканированныеБК);     
			ПараметрыОткрытия.Вставить("СтрокаКоличествоВУпаковке", СтрокаКоличествоВУпаковке);     
			
			оповещение = Новый ОписаниеОповещения("ОбработкаЗавершенияВводаМаркиДляБК",ЭтотОбъект, стр);
			
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаВводаМаркиДляБК",ПараметрыОткрытия,УникальныйИдентификатор
				,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	КонецЕсли;
	//КонецВик


КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаЗавершенияВводаМаркиДляБК(Результат, Параметры) экспорт
	Если Результат<> Неопределено 	 тогда
		//чистим
		ОТбор	=	Новый Структура("КлючСвязи", Элементы.Товары.ТекущиеДанные.НомерСтроки);
		Строки = Объект.ТБКМаркиДляБК.НайтиСтроки(ОТбор);
		Для каждого Строка из Строки цикл
			 Объект.ТБКМаркиДляБК.Удалить(Строка);
		КонецЦикла;

		//добавляем
		Для каждого Строка из Результат цикл		
			НовСтрока	=	Объект.ТБКМаркиДляБК.добавить();
			НовСтрока.Номенклатура			=	Элементы.Товары.ТекущиеДанные.Номенклатура;
			НовСтрока.Харкатеристика		=	Элементы.Товары.ТекущиеДанные.Характеристика;
			НовСтрока.Марка					=	Строка.Марка;
			НовСтрока.КоличествоВУпаковке	=	Строка.КоличествоВУпаковке; 	
			НовСтрока.КлючСвязи				=	Элементы.Товары.ТекущиеДанные.НомерСтроки; 	
		КонецЦикла;
		
	КонецЕсли;
 
КонецПроцедуры

&НаКлиенте
&Вместо("ДобавитьНоменклатуруВТабЧастьКлиент")
Процедура ТБКДобавитьНоменклатуруВТабЧастьКлиент(СтруктураПараметров, Знач ОткрыватьРедактированиеСтроки)
	// Вставить содержимое метода.
		Если СтруктураПараметров.Свойство("Количество") Тогда 
		КоличествоУпаковок = СтруктураПараметров.Количество;
	Иначе
		КоличествоУпаковок = 1;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Цена") тогда
		ТБКДобавитьНоменклатуруВТабЧасть(
			СтруктураПараметров.Номенклатура,
			СтруктураПараметров.Характеристика,
			СтруктураПараметров.Упаковка,
			КоличествоУпаковок,
			СтруктураПараметров.Цена,
			Истина,,
			ОткрыватьРедактированиеСтроки);
	иначе
		ДобавитьНоменклатуруВТабЧасть(
			СтруктураПараметров.Номенклатура,
			СтруктураПараметров.Характеристика,
			СтруктураПараметров.Упаковка,
			КоличествоУпаковок,
			Истина,,
			ОткрыватьРедактированиеСтроки);

	КонецЕсли;

	//ПродолжитьВызов(СтруктураПараметров, ОткрыватьРедактированиеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТБКДобавитьНоменклатуруВТабЧасть(Знач Номенклатура, Знач Характеристика, Знач Упаковка, Знач Количество, Знач цена, Знач ПерейтиНаКоличество, Знач СерийныйНомер, ОткрыватьРедактированиеСтроки)
	// Уточняем значение характеристики товара.
	Если Характеристика = Неопределено Тогда
		Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
	// Проверить необходимость объединять товары.
	Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
		Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
	МассивТоваров = Объект.Товары.НайтиСтроки(
		Новый Структура("Номенклатура, Характеристика, Упаковка", Номенклатура, Характеристика, Упаковка));
	
	ТекстЗапретаПродаж = "";
	Если НельзяПродавать(Номенклатура, ТекстЗапретаПродаж) Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Запрет продаж.'"), ТекстЗапретаПродаж);
		Возврат;
	КонецЕсли;
	
	ДобавленаСтрока = Ложь;
	Если ИзменитьТекущуюСтроку(Номенклатура, МассивТоваров.Количество()) Тогда 
		
		ПоследнееРедактированиеКоличество = МассивТоваров[0].КоличествоУпаковок;
		МассивТоваров[0].КоличествоУпаковок = МассивТоваров[0].КоличествоУпаковок + Количество;
		ТекущаяСтрока = МассивТоваров[0];
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		
	Иначе
		Если Объект.Товары.Количество() = 0 Тогда
			Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.Номенклатура = Номенклатура;
		ТекущаяСтрока.Характеристика = Характеристика;
		ТекущаяСтрока.Упаковка = Упаковка;
		ТекущаяСтрока.КоличествоУпаковок = Количество;
		ТекущаяСтрока.Цена = Цена;
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ДобавленаСтрока = Истина;
		
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий, Ложь);
	КонецЕсли;
	
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма", Ложь);
	ПараметрДействия.Вставить("ДобавитьСерийныйНомерИОткрытьВводСерии", СерийныйНомер);
	ПараметрДействия.Вставить("ОбновлениеДисплеяПокупателяДобавлениеТовара");
	ПараметрДействия.Вставить("ТоварыПриИзмененииНаСервере");
	ПараметрДействия.Вставить("ЗапретПродажиПроверен", Истина);
	ПараметрДействия.Вставить("ЗаполнитьПредставлениеТабло", НаборПравИНастроек.ЗапросТабло);
	
	Если ДобавленаСтрока Тогда
		ТоварыПриИзмененииНоменклатуры(ТекущаяСтрока, ПерейтиНаКоличество, ПараметрДействия, ОткрыватьРедактированиеСтроки);
	Иначе
		ТоварыПриИзмененииКоличестваУпаковок(ТекущаяСтрока, ПоследнееРедактированиеКоличество);
	КонецЕсли;
	
	Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
		ДобавитьСерийныйНомерИОткрытьВводСерии(ТекущаяСтрока, СерийныйНомер, ОткрыватьРедактированиеСтроки);
		ОбновлениеДисплеяПокупателяДобавлениеТовара(ТекущаяСтрока);
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		ОбновитьФормуНаКлиенте();
	Иначе
		ОткрыватьРедактированиеСтроки = Ложь;
	КонецЕсли;
	
	Если ОткрыватьРедактированиеСтроки Тогда
		ПодключитьОбработчикОжидания("РедактированиеСтрокиКлиент", 0.1, Истина);
	КонецЕсли;
	//ПродолжитьВызов(Номенклатура, Характеристика, Упаковка, Количество, ПерейтиНаКоличество, СерийныйНомер, ОткрыватьРедактированиеСтроки);
КонецПроцедуры

&НаКлиенте
&Вместо("ИзменитьПроцентРучнойСкидкиНаценкиВЧеке")
Процедура ТБКИзменитьПроцентРучнойСкидкиНаценкиВЧеке(ЭтоНаценка)
	Если ВозможностьРаботыСРучнымиСкидкамиВЧеке() Тогда
		
		ЗаголовокФормы = ?(ЭтоНаценка, 
			НСтр("ru = 'Ручная наценка процентом в чеке'"),
			НСтр("ru = 'Ручная скидка процентом в чеке'"));
		
		СуммаРучнойСкидкиНаценки = Объект.Товары.Итог("СуммаРучнойСкидки");
		СуммаБезАвтоматическойСкидки =
			ОбработкаТабличнойЧастиТоварыКлиент.СуммаДокументаБезПодарочныхСертификатов(Объект) +
				Объект.Товары.Итог("СуммаСкидкиОплатыБонусом") +
					СуммаРучнойСкидкиНаценки;
		СуммаБезСкидок = ОбработкаТабличнойЧастиТоварыКлиент.СуммаДокументаБезПодарочныхСертификатов(Объект) +
			Объект.Товары.Итог("СуммаАвтоматическойСкидки") +
				Объект.Товары.Итог("СуммаСкидкиОплатыБонусом") + СуммаРучнойСкидкиНаценки;
		
		ПроцентРучнойСкидкиНаценки = 0;
		
		Если СуммаБезСкидок > 0 Тогда
			ПроцентРучнойСкидкиНаценки = СуммаРучнойСкидкиНаценки * 100 / СуммаБезСкидок;
		КонецЕсли;
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * ПроцентРучнойСкидкиНаценки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
		
		ПараметрыВводаЧисла = Новый Структура;
		ПараметрыВводаЧисла.Вставить("ЧислоВвода", ЧислоВвода);
		Если ЭтоНаценка Тогда
			ПараметрыВводаЧисла.Вставить("Отрицательное", Истина);
		ИначеЕсли СуммаБезСкидок > 0 Тогда
			//Марк 2024-03-12 изменение скидки не превышающей 10%
			//ПараметрыВводаЧисла.Вставить("МаксимальноеЗначение", СуммаБезАвтоматическойСкидки * 100 / СуммаБезСкидок);
			ПараметрыВводаЧисла.Вставить("МаксимальноеЗначение", СуммаБезАвтоматическойСкидки * 10 / СуммаБезСкидок);
			//КонецМарк
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Знак",           Знак);
		ДополнительныеПараметры.Вставить("ЗаголовокФормы", ЗаголовокФормы);
		ДополнительныеПараметры.Вставить("СуммаБезСкидок", СуммаБезСкидок);
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВЧеке", ЭтотОбъект, ДополнительныеПараметры);
		
		ПолучитьИнтерактивноЧисло(
			ЗаголовокФормы,
			ОбработчикОповещения,
			ПараметрыВводаЧисла);
	КонецЕсли;
	//ПродолжитьВызов(ЭтоНаценка);
КонецПроцедуры

&НаКлиенте
&Вместо("ИзменитьСуммуРучнойСкидкиНаценкиВЧеке")
Процедура ТБКИзменитьСуммуРучнойСкидкиНаценкиВЧеке(ЭтоНаценка)
	Если ВозможностьРаботыСРучнымиСкидкамиВЧеке() Тогда
		
		ЗаголовокФормы = ?(ЭтоНаценка, 
			НСтр("ru = 'Ручная наценка суммой в чеке'"),
			НСтр("ru = 'Ручная скидка суммой в чеке'"));
		
		СуммаБезАвтоматическойСкидки =
			ОбработкаТабличнойЧастиТоварыКлиент.СуммаДокументаБезПодарочныхСертификатов(Объект) +
				Объект.Товары.Итог("СуммаРучнойСкидки");
		//Марк 2024-03-12 изменение скидки не превышающей 10%
		СуммаБезАвтоматическойСкидки = СуммаБезАвтоматическойСкидки * 0.1;
		//КонецМарк
		СуммаРучнойСкидкиНаценки = Объект.Товары.Итог("СуммаРучнойСкидки");
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * СуммаРучнойСкидкиНаценки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
		
		ПараметрыВводаЧисла = Новый Структура;
		ПараметрыВводаЧисла.Вставить("ЧислоВвода", ЧислоВвода);
		Если ЭтоНаценка Тогда
			ПараметрыВводаЧисла.Вставить("Отрицательное", Истина);
		Иначе
			ПараметрыВводаЧисла.Вставить("МаксимальноеЗначение", СуммаБезАвтоматическойСкидки);
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Знак", Знак);
		ДополнительныеПараметры.Вставить("ЗаголовокФормы", ЗаголовокФормы);
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВЧеке", ЭтотОбъект, ДополнительныеПараметры);
		
		ПолучитьИнтерактивноЧисло(
			ЗаголовокФормы,
			ОбработчикОповещения,
			ПараметрыВводаЧисла);
	КонецЕсли;
	//ПродолжитьВызов(ЭтоНаценка);
КонецПроцедуры

&НаКлиенте
&Вместо("ИзменитьПроцентРучнойСкидкиНаценкиВСтроке")
Процедура ТБКИзменитьПроцентРучнойСкидкиНаценкиВСтроке(ЭтоНаценка)
	Если ВозможностьРаботыСРучнымиСкидкамиВСтроке() Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		ЗаголовокФормы = ?(ЭтоНаценка,
			НСтр("ru = 'Ручная наценка процентом в строке'"),
			НСтр("ru = 'Ручная скидка процентом в строке'"));
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * СтрокаТабличнойЧасти.ПроцентРучнойСкидки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
		
		ПараметрыВводаЧисла = Новый Структура;
		ПараметрыВводаЧисла.Вставить("ЧислоВвода", ЧислоВвода);
		Если ЭтоНаценка Тогда
			ПараметрыВводаЧисла.Вставить("Отрицательное", Истина);
		Иначе
			//Марк 2024-03-12 изменение скидки не превышающей 10%
			//ПараметрыВводаЧисла.Вставить("МаксимальноеЗначение", 100);
			ПараметрыВводаЧисла.Вставить("МаксимальноеЗначение", 10);
			//КонецМарк
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		ДополнительныеПараметры.Вставить("Знак",                Знак);
		ДополнительныеПараметры.Вставить("ЗаголовокФормы",      ЗаголовокФормы);
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВСтроке", ЭтотОбъект, ДополнительныеПараметры);
		
		ПолучитьИнтерактивноЧисло(
			ЗаголовокФормы,
			ОбработчикОповещения,
			ПараметрыВводаЧисла);
			
	КонецЕсли;

	//ПродолжитьВызов(ЭтоНаценка);
КонецПроцедуры

&НаКлиенте
&Вместо("ИзменитьСуммуРучнойСкидкиНаценкиВСтроке")
Процедура ТБКИзменитьСуммуРучнойСкидкиНаценкиВСтроке(ЭтоНаценка)
		Если ВозможностьРаботыСРучнымиСкидкамиВСтроке() Тогда
		
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		
		ЗаголовокФормы = ?(ЭтоНаценка,
			НСтр("ru = 'Ручная наценка суммой в строке'"),
			НСтр("ru = 'Ручная скидка суммой в строке'"));
		
		Знак = ?(ЭтоНаценка, -1, 1);
		ЧислоВвода = Знак * СтрокаТабличнойЧасти.СуммаРучнойСкидки;
		ЧислоВвода = ?(ЧислоВвода > 0, ЧислоВвода, 0);
		
		ПараметрыВводаЧисла = Новый Структура;
		ПараметрыВводаЧисла.Вставить("ЧислоВвода", ЧислоВвода);
		Если ЭтоНаценка Тогда
			ПараметрыВводаЧисла.Вставить("Отрицательное", Истина);
		Иначе
			//Марк 2024-03-12 изменение скидки не превышающей 10%
			//ПараметрыВводаЧисла.Вставить("МаксимальноеЗначение", СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаРучнойСкидки);
			ПараметрыВводаЧисла.Вставить("МаксимальноеЗначение", (СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаРучнойСкидки) * 0.1);
			//КонецМарк
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
		ДополнительныеПараметры.Вставить("Знак", Знак);
		ДополнительныеПараметры.Вставить("ЗаголовокФормы", ЗаголовокФормы);
		
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВСтроке", ЭтотОбъект, ДополнительныеПараметры);
		
		ПолучитьИнтерактивноЧисло(
			ЗаголовокФормы,
			ОбработчикОповещения,
			ПараметрыВводаЧисла);
	КонецЕсли;

	//ПродолжитьВызов(ЭтоНаценка);
КонецПроцедуры                                                                        

&НаКлиенте
&Вместо("ОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВСтроке")
Процедура ТБКОповещениеОткрытьФормуВводаЧислаИзменитьСуммуРучнойСкидкиНаценкиВСтроке(РезультатОткрытияФормы, ДополнительныеПараметры)
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		
		СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЧислоВвода = ?(РезультатОткрытияФормы.ВведенноеЧисло = Неопределено, 0, РезультатОткрытияФормы.ВведенноеЧисло);
		
		СуммаДоРасчета = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.СуммаРучнойСкидки = ДополнительныеПараметры.Знак * ЧислоВвода;
		//Марк 2024-03-14
		Если ДополнительныеПараметры.ЗаголовокФормы = "Ручная скидка суммой в строке" Тогда
			СтрокаТабличнойЧасти.РучнаяСкидка = ДополнительныеПараметры.Знак * ЧислоВвода		
		КонецЕсли;
		//КонецМарк
		
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",
			Новый Структура("Очищать, ПересчитыватьСуммуСкидки", Ложь, Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",
			ОбработкаТабличнойЧастиТоварыКлиент.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));
		
		ОбработкаТабличнойЧастиТоварыКлиент.ПриИзмененииРеквизитовВТЧКлиент(
			Объект.Товары, СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		ОбновитьФормуНаКлиенте();
		ВывестиИнформациюНаДисплейПокупателя("ОжиданиеОплаты");
		
		СуммаПослеРасчета = СтрокаТабличнойЧасти.Сумма;
		УменьшениеСуммыЧекаККМ = СуммаДоРасчета - СуммаПослеРасчета;
		УменьшениеСуммыЧекаККМ = ?(УменьшениеСуммыЧекаККМ > 0, УменьшениеСуммыЧекаККМ, 0);
		Если ЧислоВвода = 0  Тогда
			ЛогированиеВводаРучнойСкидки(НСтр("ru = 'Отмена ручной скидки в строке'") , 0, 0);
		Иначе
			ЛогированиеВводаРучнойСкидки(
				ДополнительныеПараметры.ЗаголовокФормы,
				СтрокаТабличнойЧасти.СуммаРучнойСкидки,
				УменьшениеСуммыЧекаККМ);
		КонецЕсли;
		
	КонецЕсли;
	//ПродолжитьВызов(РезультатОткрытияФормы, ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ТБКТоварыПередУдалениемПосле(Элемент, Отказ)
	Отбор	=	Новый Структура("КлючСвязи",Элемент.ТекущиеДанные.НомерСтроки);  
	Строки	=	КодыНовойУценки.НайтиСтроки(Отбор);
	Для каждого Строка из Строки цикл
		КодыНовойУценки.Удалить(Строка);
	КонецЦикла;
	
	//2024-08-12
	Если Подарок <> Неопределено и  Элемент.ТекущиеДанные.Номенклатура = Подарок тогда
		ОбработанныеАкцииПоПодаркам.Очистить();
		Для каждого Строка Из Объект.Товары Цикл
			Строка.РучнаяСкидка			=	0;		
			Строка.СуммаРучнойСкидки	=	0;
			Строка.Сумма	=	Строка.цена * Строка.КоличествоУпаковок;
		КонецЦикла;		
		
		ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);		
		ОбновитьФормуНаКлиенте();
		Подарок = Неопределено;
		флУдаленПодарок	=	Истина; 
	КонецЕсли;
	//   
	
	
	//Вик 2024-10-02 Не записывает крипто хвоост в справчник, для блка, а потом ругаается на тсутствие криптхвооста
	Строки	=	Объект.АкцизныеМарки.НайтиСтроки(Отбор);
	Для каждого Строка из Строки цикл
		Если СтрДлина(Строка(Строка.АкцизнаяМарка))>40 тогда
			
			УдалитьШкУпаковокНаСервере(Строка.АкцизнаяМарка);  
			
			//Марк 2025-02-12
			//для пробитии непробитого блока не можем проверить
			//Объект.АкцизныеМарки.Удалить(Строка); 
			//КонецМарк
			
		КонецЕсли;
	КонецЦикла;
	//


КонецПроцедуры

&НаКлиенте
Процедура ТБКНеПечататьЧекПриИзмененииПосле(Элемент)
	Объект.НеПечататьБумажныйЧек	=	НеПечататьЧек;
КонецПроцедуры

&НаКлиенте
&Вместо("ВвестиСерии")
Процедура ТБКВвестиСерии()
	// Вставить содержимое метода.
	//ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
&Вместо("ПроверитьСтатусЧека")
Процедура ТБКПроверитьСтатусЧека()
		МассивСсылокЧеков = Новый Массив;
	
	Отказ = Ложь;
	
	Для Каждого ЧекВОчереди Из МассивЧековВОчереди Цикл
		
		Если ЧекВОчереди.БезПодключенияОборудования Тогда
			
			МассивСсылокЧеков.Добавить(ЧекВОчереди.ЧекККМ);
			Если Не ЧекВОчереди.Статус Тогда
				ЧекВОчереди.Статус = Истина;
			КонецЕсли;
			МассивЧековВОчереди.Удалить(МассивЧековВОчереди.Индекс(ЧекВОчереди));
			
		Иначе
			
			СтатусЧека = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПолучитьСтатусЧекаВОчереди(ЧекВОчереди.ИдентификаторЧекаВОчереди);
			
			Если СтатусЧека.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализирован") Тогда
				
				ПараметрыОперации = Новый Структура;
				ПараметрыОперации.Вставить("НомерСмены"   , СтатусЧека.НомерСменыККМ);
				ПараметрыОперации.Вставить("НомерЧека"    , СтатусЧека.НомерЧекаККМ);
				ПараметрыОперации.Вставить("СтатусЧекаККМ", СтатусЧека.СтатусЧека);
				ПараметрыОперации.Вставить("ЧекПробит", Истина);
				ПараметрыОперации.Вставить("ЧекККМСсылка", СтатусЧека.ДокументОснование);
				МассивСсылокЧеков.Добавить(СтатусЧека.ДокументОснование);
				Если Не ЧекВОчереди.Статус Тогда
					ПробитьЧекОчередиУспешноеЗавершение(ПараметрыОперации);
					ЧекВОчереди.Статус = Истина;
				КонецЕсли;
				МассивЧековВОчереди.Удалить(МассивЧековВОчереди.Индекс(ЧекВОчереди));
				
			ИначеЕсли СтатусЧека.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Ошибка") Тогда
				ПараметрыОперации = Новый Структура;
				ПараметрыОперации.Вставить("НомерСмены"   , СтатусЧека.НомерСменыККМ);
				ПараметрыОперации.Вставить("НомерЧека"    , СтатусЧека.НомерЧекаККМ);
				ПараметрыОперации.Вставить("СтатусЧекаККМ", СтатусЧека.СтатусЧека);
				ПараметрыОперации.Вставить("ЧекПробит", Ложь);
				ПараметрыОперации.Вставить("ЧекККМСсылка", СтатусЧека.ДокументОснование);
				ПараметрыОперации.Вставить("ТекстОшибки", СтатусЧека.ТекстОшибки);
				
				Если НЕ Объект.ОперацияСДенежнымиСредствами Тогда
					Попытка
						ДеактивироватьСкидкиПоИдентификаторуЧека(СтатусЧека.ДокументОснование);
					Исключение
						Возврат;
					КонецПопытки;
				КонецЕсли;
				
				ЗаголовокИнформации = НСтр("ru = 'При печати чека произошла ошибка.'");
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Чек не напечатан на устройстве для печати чеков.
					|Описание ошибки: %1'"), СтатусЧека.ТекстОшибки);
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
				МассивСсылокЧеков.Очистить();
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ЧекККМСсылка", СтатусЧека.ДокументОснование);
				СтрокиЧека = ТабличноеПолеЧеков.НайтиСтроки(СтруктураПоиска);
				Если СтрокиЧека.Количество() > 0 Тогда
					Для Каждого СтрокаТаблицы Из СтрокиЧека Цикл
						СтрокаТаблицы.Пробит = Ложь;
					КонецЦикла;
				КонецЕсли;
				ОбработатьОшибочноеПробитиеЧека();
				МассивЧековВОчереди.Удалить(МассивЧековВОчереди.Индекс(ЧекВОчереди));
				ОборудованиеЧекопечатающиеУстройстваВызовСервера.УдалитьЧекИзОчереди(СтатусЧека.ДокументОснование);
				
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивЧековВОчереди.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("ПроверитьСтатусЧека", 1, Истина);
	Иначе   
		//Вик 2024-08-09	
		ВместоПроцедурыТБКСоздатьЧекиЗавершение(МассивСсылокЧеков);
		//
		УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитые(Истина);
		ПробитьЧекОчередиЗавершение(МассивСсылокЧеков, Отказ);
	КонецЕсли;
КонецПроцедуры  

&НаКлиенте
Процедура ВместоПроцедурыТБКСоздатьЧекиЗавершение(МассивСсылокЧеков)     
	Если МассивСсылокЧеков.количество() = 1 тогда
		НужныйЧек	=	МассивСсылокЧеков[0];
	иначе
		НужныйЧек = Неопределено;
	КонецЕсли;
	
	//Вик 2024-03-19
	ВремяНаЧек	=	ТекущаяДата() - НачалоЧека;
	Если НужныйЧек<> Неопределено и  ВремяНаЧек> 60 тогда
		ЗаписатьДанныеДолгийЧек(НужныйЧек, ВремяНаЧек);
	КонецЕсли;		
	//

	
	Для каждого Строка из  Объект.Товары цикл
		Если ЗначениеЗаполнено(Строка.КодУценки) тогда
			ПогаситьКодУценкиНаСервере(Строка.КодУценки,НужныйЧек);			
		КонецЕсли;
		
	КонецЦикла;
	
	//Вик 2024-03-12  	
	Для Каждого Строка из Объект.АкцизныеМарки Цикл		
		Если ЗначениеЗаполнено(Строка.ПроверкаМаркиИНН) тогда
			ЗаписатьДанныеОНевернойОрганизации(Строка.ПроверкаМаркиИНН,НужныйЧек, СТрока.НомерСтроки, Строка.КодАкцизнойМарки);	
		КонецЕсли; 	
		
		//Вик 2024-10-02 Не записывает крипто хвоост в справчник, для блка, а потом ругаается на тсутствие криптхвооста
		Если СтрДлина(Строка(Строка.АкцизнаяМарка))>40 тогда			
			УдалитьШкУпаковокНаСервере(Строка.АкцизнаяМарка)	
		КонецЕсли;
		//

	КонецЦикла;  
	//
	
	
	//Вик 2022_04_22 	
	Если (ЗначениеЗаполнено(Объект.ТБК_IDКлиента) или СтрДлина(СокрЛП(ТелефонКлиента)) = 12) и НужныйЧек <> Неопределено тогда
		флНадоНачислить		=	истина;
		флНадоСделатьЗапись	=	Истина;	
		
		Если ЗначениеЗаполнено(КодАкции) тогда флНадоНачислить		= Ложь; КонецЕсли;
		Если ПокупкаСотрудника			 тогда флНадоСделатьЗапись 	= Ложь; КонецЕсли;
		
		КолСписано	=	0;
		Для каждого Строка из Объект.Товары цикл
			//Если ЗначениеЗаполнено(Строка.КодУценки) 			тогда флНадоНачислить	=	Ложь; КонецЕсли;
			//Если ЗначениеЗаполнено(Строка.ЗаказПокупателя)	тогда флНадоНачислить	=	Ложь; КонецЕсли;
			Если Строка.флПроставленаСкидкаПоАкции 				тогда флНадоНачислить	=	Ложь; КонецЕсли; 
			Если ЗначениеЗаполнено(Строка.ТБК_КоличествоБаллов)	тогда флНадоНачислить	=	Ложь; КонецЕсли;
			Если Строка.СуммаРучнойСкидки > 0 					тогда флНадоНачислить	=	Ложь; КонецЕсли; 
			
			КолСписано	=	КолСписано + Строка.ТБК_КоличествоБаллов;
		КонецЦикла;
			
		Если Строка(Объект.ВидОперации) = "Возврат" тогда
			флНадоНачислить = ПроверитьЧекНаВозвратБаллов(НужныйЧек);
		КонецЕсли;

	    Если флНадоСделатьЗапись тогда
			ДобавитьЗаписьВИсториюПокупок(НужныйЧек, Объект.ТБК_IDКлиента, флНадоНачислить, КолСписано, ТелефонКлиента);
		КонецЕсли;
		
		Объект.ТБК_IDКлиента			=	"";
		КоличествоБалловМожноСписать	=	0;
		КоличествоНакопленныхБаллов		=	0;
		ИмяКлиента						=	"";
		ТелефонКлиента					=	"";
		ПочтаКлиента					=	"";
		КоличествоБалловСписано			=	0;
		Элементы.ТелефонКлиента.ТолькоПросмотр	=	Ложь;
	КонецЕсли;
	
	Если ПокупкаСотрудника и НужныйЧек <> Неопределено тогда
		ПокупкаСотрудника	=	ложь;
		ЗаписатьДанныеОПокупкеСотрудника(НужныйЧек, Объект.Продавец);
	КонецЕсли;
	ПроверитьВозвратНаПокупкуСотрудника(НужныйЧек,  Объект.Продавец);  
	//
	
	//Марк
	Если НужныйЧек <> Неопределено И НЕ Объект.ЗаказПокупателя.Пустая() Тогда 	
		ЗакрытьЗаказКлиента(Объект.ЗаказПокупателя);
		НомерЗаказаПокупателя	=	"";
		Элементы.НомерЗаказаПокупателя.ТолькоПросмотр = Ложь;
	КонецЕсли;
	//КонецМарк
	//Марк 2024-03-13
	Если НужныйЧек <> Неопределено Тогда
		ЗаписьДанныхРучныхСкидок(НужныйЧек);
	КонецЕсли;	
	//КонецМарк  
	
	//Вик 2024-08-31
	Если Объект.ТБКВторыеЭлектронки.Количество()>0 тогда
		СоздатьНефискальныйЧек(Истина, НужныйЧек);
	КонецЕсли;
	//	
	
	//Вик 2024-09-11
	Если НужныйЧек <> Неопределено тогда
		Если Объект.ТБКМаркиДляБК.Количество()>0 тогда
			ЗаписатьМаркиДляБК(НужныйЧек);
		КонецЕсли;
			
	КонецЕсли;
	
	//Вик 2024-11-01
		Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный и не флЭтоВнешнийЭквайринг тогда 
			ПереключитьЭквайрингСервер(Объект.РабочееМесто);
			УстановитьЦветКнопкиОтключитьЭквайринг();
		КонецЕсли;
		
		//Вик 2021_09_13
		Если ЗначениеЗаполнено(КодАкции) тогда
			ПогастьКод(КодАкции);
			КодАкции = "";
		КонецЕсли;
		//
		
		//Вик 2023-10-13
		Если ОбработанныеАкцииПоПодаркам.Количество()>0 тогда 
			ЗаписатьПодарки();
		КонецЕсли;
		//
		
		//Вик 2023-12-18
		Если ПогашенныеКодыСертификатов.Количество()>0 тогда 
			ПогаситьСертификатыНаСервере();
		КонецЕсли;
		// 
		
		//Вик 2024-04-23
		Если КодыНовойУценки.Количество()>0 тогда 
			ПогаситьКодыНовойУценки();
		КонецЕсли;
		//

		
		Элементы.НадписьПродажаПоСертификату.Заголовок	=	""; 
		
		ОбновитьНадписиКоличествоЧеков();   
	//Конец вик

	
КонецПроцедуры

&НаКлиенте
&Вместо("ОбработатьКодМаркировки")
Процедура ТБКОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры)
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ИсходныйШтрихкод = ИсходныеДанные.Штрихкод;
	
	//Вик 2024-08-15 Костыль по просьбе Козьминой
	ВыбратьНужнуюХарактеристикуПоНеобходимости(ИсходныеДанные, ПараметрыСканирования);
	//

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНужнуюХарактеристикуПоНеобходимости(ИсходныеДанные, ПараметрыСканирования)
	ИсходныйШтрихкод = ИсходныеДанные.Штрихкод;
	
	флЭтоБлок	=	Ложь; 	
	Если СтрДлина(ИсходныйШтрихкод)>29 тогда
		флЭтоБлок	=	Истина;
	КонецЕсли;  
	
	ШК	=	ИсходныйШтрихкод;	
	
	Если Лев(ШК,3) = "010" Тогда
		ШК	=	Сред(ШК,4);	
	КонецЕсли;
	
	флЭтоЕан8	=	Ложь;
	Если Лев(ИсходныйШтрихкод, 5)= "00000"  Тогда
		флЭтоЕан8	=	Истина;	
	КонецЕсли;    
	
	ШК	=	СтрЗаменить(ШК, Символ(21), "");
	ШК	=	СтрЗаменить(ШК, Символ(29), ""); 
	
	ШК	=	ОбщегоНазначенияВызовСервера.УдалитьЛидирующиеНули(ШК);
	
	Если флЭтоЕан8 тогда
		ШК	=	Лев(ШК,8);
	иначе
		ШК	=	Лев(ШК,13);
	КонецЕсли;

	флНуженВыборХарактеристики = Ложь;
	
	Если ЗначениеЗаполнено(НоменклатураИзКуара) тогда
		Если найти(Строка(НоменклатураИзКуара), "Bohem") 
			или найти(Строка(НоменклатураИзКуара), "K.Ritter")
			или найти(Строка(НоменклатураИзКуара), "Dakota") тогда
			
			флНуженВыборХарактеристики = Истина;
		КонецЕсли;
	иначе
		МассивШтрихкодов	=	ПолучитьМассивШКНаПроверкуХарактеристик();
		Если МассивШтрихкодов.Найти(ШК)<>Неопределено тогда
			флНуженВыборХарактеристики = Истина;	
		КонецЕсли;
	КонецЕсли;

	Если флНуженВыборХарактеристики тогда
		
		ХарактеристикиПоШК	=	ПолучитьХарактеристики(ШК, НоменклатураИзКуара); 	
		
		Если ХарактеристикиПоШК.Количество() = 0 тогда
			//Перейти ~ЕслиНеЗавелиХарактеристик;
			//ИсходныеДанные.Штрихкод = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBAse64(ИсходныеДанные.Штрихкод);
			
			ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
			РезультатОбработки = ОбработатьВводШтрихкода(ИсходныеДанные, Неопределено, ПараметрыСканирования, Новый Структура);
			
			Если (РезультатОбработки.Свойство("ЭтоДисконтнаяКарта") И РезультатОбработки.ЭтоДисконтнаяКарта) 
				Или Объект.ОперацияСДенежнымиСредствами Тогда
				ОповещениеПоискаПоШтрихкоду(ИсходныйШтрихкод);
			Иначе
				ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
				ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
			КонецЕсли;	
			
			Возврат;
		КонецЕсли; 
		
		ПараметрыОткрытия	=	новый Структура;
		ПараметрыОткрытия.Вставить("ХарактеристикиПоШК", ХарактеристикиПоШК); 
		
		ДопПараметры	=	Новый Структура;
		ДопПараметры.Вставить("ПараметрыСканирования", ПараметрыСканирования);
		ДопПараметры.Вставить("ИсходныеДанные", ИсходныеДанные);
		ДопПараметры.Вставить("ИсходныйШтрихкод", ИсходныеДанные.Штрихкод);
		ДопПараметры.Вставить("флЭтоБлок", флЭтоБлок);

		Если ХарактеристикиПоШК.Количество() = 1 тогда 
			ПослеОткрытияФормы_ТБКФормаВыбораХарактеристики(ХарактеристикиПоШК[0],ДопПараметры);
		иначе  			
			Оповещение = Новый ОписаниеОповещения("ПослеОткрытияФормы_ТБКФормаВыбораХарактеристики",ЭтотОбъект,ДопПараметры);
				
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаВыбораХарактеристики",       
				ПараметрыОткрытия, ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);  
        КонецЕсли;
						
	иначе
		//~ЕслиНеЗавелиХарактеристик:		
		ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
		РезультатОбработки = ОбработатьВводШтрихкода(ИсходныеДанные, Неопределено, ПараметрыСканирования, Новый Структура);
		
		Если (РезультатОбработки.Свойство("ЭтоДисконтнаяКарта") И РезультатОбработки.ЭтоДисконтнаяКарта) 
			Или Объект.ОперацияСДенежнымиСредствами Тогда
			ОповещениеПоискаПоШтрихкоду(ИсходныйШтрихкод);
		Иначе
			ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
			ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
		КонецЕсли;		
			
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивШКНаПроверкуХарактеристик()
	МассивШтрихкодов	=	Новый Массив;
	МассивШтрихкодов.Добавить("2001231470011");
	МассивШтрихкодов.Добавить("4610030144719");
	МассивШтрихкодов.Добавить("4610030144726");
	МассивШтрихкодов.Добавить("4610030144733");
	МассивШтрихкодов.Добавить("4610030144740");
	МассивШтрихкодов.Добавить("4610030144856");
	МассивШтрихкодов.Добавить("4610030144863");
	МассивШтрихкодов.Добавить("4610030144870");
	МассивШтрихкодов.Добавить("4610030144887");
	МассивШтрихкодов.Добавить("4610030144917");
	МассивШтрихкодов.Добавить("4610030144924");
	МассивШтрихкодов.Добавить("4610030144931");
	МассивШтрихкодов.Добавить("4610030144948");
	МассивШтрихкодов.Добавить("4610030144955");
	МассивШтрихкодов.Добавить("4610030144962");
	МассивШтрихкодов.Добавить("4610030144986");
	МассивШтрихкодов.Добавить("4610030144993");
	МассивШтрихкодов.Добавить("8801116042272");
	МассивШтрихкодов.Добавить("8801116042265");
	МассивШтрихкодов.Добавить("8801116042258");
	МассивШтрихкодов.Добавить("8801116042241");
	МассивШтрихкодов.Добавить("8801116042234");
	МассивШтрихкодов.Добавить("8801116042227");
	МассивШтрихкодов.Добавить("8801116041022");
	МассивШтрихкодов.Добавить("8801116041015");
	МассивШтрихкодов.Добавить("8801116041008");
	МассивШтрихкодов.Добавить("8801116040995");
	МассивШтрихкодов.Добавить("8801116033188");
	МассивШтрихкодов.Добавить("8801116033171");
	МассивШтрихкодов.Добавить("8801116032273");
	МассивШтрихкодов.Добавить("8801116032266");
	МассивШтрихкодов.Добавить("8801116031344");
	МассивШтрихкодов.Добавить("8801116031337");
	МассивШтрихкодов.Добавить("48515696");
	МассивШтрихкодов.Добавить("48515672");
	МассивШтрихкодов.Добавить("4850008002867");
	МассивШтрихкодов.Добавить("4850008002843");
	МассивШтрихкодов.Добавить("4680062292900");
	МассивШтрихкодов.Добавить("4680062292856");
	МассивШтрихкодов.Добавить("4680062292849");
	МассивШтрихкодов.Добавить("4680062292832");
	МассивШтрихкодов.Добавить("4680062292825");
	МассивШтрихкодов.Добавить("4680062292801");
	МассивШтрихкодов.Добавить("4640030093847");
	МассивШтрихкодов.Добавить("4640030093823");
	МассивШтрихкодов.Добавить("4640030093816");
	МассивШтрихкодов.Добавить("4640030092239");
	МассивШтрихкодов.Добавить("4640030093786");
	МассивШтрихкодов.Добавить("4640030092222");
	МассивШтрихкодов.Добавить("4640030092161");
	МассивШтрихкодов.Добавить("4640030092062");
	МассивШтрихкодов.Добавить("4610030142388");
	МассивШтрихкодов.Добавить("4610030142371");
	МассивШтрихкодов.Добавить("4610030142364");
	МассивШтрихкодов.Добавить("2900054699763");
	МассивШтрихкодов.Добавить("2900054699756");
	МассивШтрихкодов.Добавить("2900054610973");
	МассивШтрихкодов.Добавить("2900054568489");
	МассивШтрихкодов.Добавить("2900053200601");
	МассивШтрихкодов.Добавить("2900053200595");
	МассивШтрихкодов.Добавить("2900053199387");
	МассивШтрихкодов.Добавить("2900053199370");
	МассивШтрихкодов.Добавить("2900053199363");
	МассивШтрихкодов.Добавить("2900053199356");
	МассивШтрихкодов.Добавить("2900053199349");
	МассивШтрихкодов.Добавить("2900053199332");  
	МассивШтрихкодов.Добавить("4610030144535");
	МассивШтрихкодов.Добавить("4610030144528");
	МассивШтрихкодов.Добавить("4610030144511");
	МассивШтрихкодов.Добавить("4610030144450");
	МассивШтрихкодов.Добавить("4610030144412");
	МассивШтрихкодов.Добавить("4610030144405");
	МассивШтрихкодов.Добавить("4610030144399");
	МассивШтрихкодов.Добавить("4610030144382");
	МассивШтрихкодов.Добавить("4610030144375");
	МассивШтрихкодов.Добавить("4610030144368");
	МассивШтрихкодов.Добавить("4610030144351");
	МассивШтрихкодов.Добавить("4610030144344");
	МассивШтрихкодов.Добавить("4610030144115");
	МассивШтрихкодов.Добавить("4610030144108");
	МассивШтрихкодов.Добавить("4610030144092");
	МассивШтрихкодов.Добавить("4610030144085");
	МассивШтрихкодов.Добавить("4610030142616");
	МассивШтрихкодов.Добавить("4610030142609");
	МассивШтрихкодов.Добавить("4610030142593");
	МассивШтрихкодов.Добавить("4610030142586");
	МассивШтрихкодов.Добавить("4610030142579");
	МассивШтрихкодов.Добавить("4610030142531");
	МассивШтрихкодов.Добавить("4610030142555");
	МассивШтрихкодов.Добавить("4610030142524");
	МассивШтрихкодов.Добавить("4610030142517");
	МассивШтрихкодов.Добавить("4610030142500");
	МассивШтрихкодов.Добавить("4610030142494");
	МассивШтрихкодов.Добавить("4610030142487");
	МассивШтрихкодов.Добавить("4610030142470");
	МассивШтрихкодов.Добавить("4610030142463");
	МассивШтрихкодов.Добавить("4610030142456");
	МассивШтрихкодов.Добавить("4610030142449");
	МассивШтрихкодов.Добавить("4610030142432");
	МассивШтрихкодов.Добавить("4610030142425");
	МассивШтрихкодов.Добавить("4610030142418");
	МассивШтрихкодов.Добавить("4610030142401");
	МассивШтрихкодов.Добавить("4610030142395");

	Возврат МассивШтрихкодов; 
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьХарактеристики(ШК, Номенклатура)
	Если ЗначениеЗаполнено(Номенклатура) тогда
		
		Запрос	=	Новый Запрос("ВЫБРАТЬ
		      	 	             |	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		      	 	             |ИЗ
		      	 	             |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		      	 	             |ГДЕ
		      	 	             |	ХарактеристикиНоменклатуры.Владелец = &Владелец
		      	 	             |	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
		      	 	             |	И НЕ ХарактеристикиНоменклатуры.Наименование ПОДОБНО ""%Не%""");
		Запрос.УстановитьПараметр("Владелец", Номенклатура);
		
		Рез = Запрос.Выполнить().Выгрузить();
		Рез	=	Рез.ВыгрузитьКолонку("Характеристика"); 	
	иначе
		Запрос	=	Новый Запрос("ВЫБРАТЬ
		      	 	             |	Штрихкоды.Владелец КАК Владелец
		      	 	             |ПОМЕСТИТЬ Номен
		      	 	             |ИЗ
		      	 	             |	РегистрСведений.Штрихкоды КАК Штрихкоды
		      	 	             |ГДЕ
		      	 	             |	Штрихкоды.Штрихкод = &Штрихкод
		      	 	             |
		      	 	             |СГРУППИРОВАТЬ ПО
		      	 	             |	Штрихкоды.Владелец
		      	 	             |;
		      	 	             |
		      	 	             |////////////////////////////////////////////////////////////////////////////////
		      	 	             |ВЫБРАТЬ
		      	 	             |	Штрихкоды.Характеристика КАК Характеристика
		      	 	             |ИЗ
		      	 	             |	РегистрСведений.Штрихкоды КАК Штрихкоды,
		      	 	             |	Номен КАК Номен
		      	 	             |ГДЕ
		      	 	             |	Штрихкоды.Владелец В (Номен.Владелец)
		      	 	             |	И НЕ Штрихкоды.Характеристика.Наименование = &Наименование
		      	 	             |	И НЕ Штрихкоды.Характеристика.ПометкаУдаления
		      	 	             |	И НЕ Штрихкоды.Характеристика.Наименование ПОДОБНО ""%Не%""
		      	 	             |
		      	 	             |СГРУППИРОВАТЬ ПО
		      	 	             |	Штрихкоды.Характеристика");
		Запрос.УстановитьПараметр("Штрихкод", ШК);
		Запрос.УстановитьПараметр("Наименование", "");
		
		Рез = Запрос.Выполнить().Выгрузить();
		Рез	=	Рез.ВыгрузитьКолонку("Характеристика"); 	
	КонецЕсли;
		
	Возврат Рез;
КонецФункции
 
&НаКлиенте
Процедура ПослеОткрытияФормы_ТБКФормаВыбораХарактеристики(Результат, ДопПараметры) экспорт
	Если Результат <> Неопределено тогда
		ИсходныеДанные			=	ДопПараметры.ИсходныеДанные;
		ПараметрыСканирования	=	ДопПараметры.ПараметрыСканирования;
		
		
		ПараметрыСканирования.Характеристика	=	Результат;
		
		//ИсходныеДанные.Штрихкод = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBAse64(ИсходныеДанные.Штрихкод);
		ИсходныйШтрихкод = ИсходныеДанные.Штрихкод;

		//Если ДопПараметры.флЭтоБлок тогда
		//	марки = Новый Массив();
		//	марки.Добавить(ДопПараметры.ИсходныйШтрихкод);   
		//	Попытка
		//		сведенияМарок	=	ПолучитьСведенияМарок_Сервер(марки);
		//	Исключение
		//		флВсеХорошо	=	Ложь;
		//		Возврат;
		//	КонецПопытки;
		//	
		//	Если ТипЗнч(сведенияМарок) = Тип("Массив") Тогда
		//		Если сведенияМарок.Количество() = 1 Тогда
		//			сведения = сведенияМарок[0]; 
		//				Попытка
		//					ДочерниеМарки_Массив	=	сведения.cisInfo.child;
		//					МРЦБлокаКодированнная 	= "";
		//				Исключение
		//					флВсеХорошо = ложь;
		//					Сообщить(ОписаниеОшибки());
		//	                Возврат;  	
		//				КонецПопытки;				
		//			
		//			Для каждого ДочерняяМарка из ДочерниеМарки_Массив цикл 
		//				ДанныеШтрихкода = Новый Структура;
		//				ДанныеШтрихкода.Вставить("Количество", 1);
		//				ДанныеШтрихкода.Вставить("Штрихкод"  ,	ДочерняяМарка + МРЦБлокаКодированнная);				
		//				//ОбработатьКодМаркировки(ДанныеШтрихкода);
		//				
		//				ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
		//				РезультатОбработки = ОбработатьВводШтрихкода(ИсходныеДанные, Неопределено, ПараметрыСканирования, Новый Структура);
		//	
		//				Если (РезультатОбработки.Свойство("ЭтоДисконтнаяКарта") И РезультатОбработки.ЭтоДисконтнаяКарта) 
		//					Или Объект.ОперацияСДенежнымиСредствами Тогда
		//					ОповещениеПоискаПоШтрихкоду(ИсходныйШтрихкод);
		//				Иначе
		//					ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
		//					ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
		//				КонецЕсли;

		//				//КонецВик
		//			КонецЦикла;   
		//		КонецЕсли;
		//	КонецЕсли; 	
		//иначе 
		  	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);

			РезультатОбработки = ОбработатьВводШтрихкода(ИсходныеДанные, Неопределено, ПараметрыСканирования, Новый Структура);
			
			
			Если (РезультатОбработки.Свойство("ЭтоДисконтнаяКарта") И РезультатОбработки.ЭтоДисконтнаяКарта) 
				Или Объект.ОперацияСДенежнымиСредствами Тогда
				ОповещениеПоискаПоШтрихкоду(ИсходныйШтрихкод);
			Иначе
				ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
				ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
			КонецЕсли;
		//КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтуМаркуБитьПоБК(Данные, Номенклатура)	
	
	Если Найти(Строка(Номенклатура), "Электронное устройство GANG") > 0 И ТекущаяДата() >= '20241015' Тогда
		Возврат истина;	
	КонецЕсли; 

	
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБКУниверсальныеМарки.Номенклатура КАК Номенклатура
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКУниверсальныеМарки КАК ТБКУниверсальныеМарки
	      	 	             |ГДЕ
	      	 	             |	ТБКУниверсальныеМарки.Марка = &Марка");
	Запрос.УстановитьПараметр("Марка", Данные);
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() тогда
		
		//Марк 2025-02-28
		Если ТекущаяДата()>='20250301' Тогда
			Возврат истина; 
		КонецЕсли;
		//КонецМарк
		
		ПК = ПолучитьПолныйКод(Рез.Номенклатура);
		Если Найти(ПК, "Ю2-00039463") или Найти(ПК, "Ю2-00021839") или Найти(ПК, "Ю2-00039464") или 
			Найти(ПК, "Ю2-00023903") или Найти(ПК, "Ю2-00017742") или Найти(ПК, "Ю2-00040674") или 
			Найти(ПК, "Ю2-00040675") или Найти(ПК, "Ю2-00024908") или Найти(ПК, "Ю2-00024907") или
			Найти(ПК, "Ю2-00043465") или Найти(ПК, "Ю2-00040497") или Найти(ПК, "Ю2-00040508") или
			Найти(ПК, "Ю2-00037161") или Найти(ПК, "Ю2-00022045") или Найти(ПК, "Ю2-00041653") или 
			Найти(ПК, "Ю2-00040598") или Найти(ПК, "Ю2-00039007") или Найти(ПК, "Ю2-00024201") или Найти(ПК, "Ю2-00040690")			
			тогда
			
			Возврат истина;    
			
		КонецЕсли;  
		
		
		//Марк 2024-10-17
		Если ПробиватьПоБК(ПК) Тогда
			Возврат Истина;
		КонецЕсли;
		//КонецМарк	  
		
	КонецЕсли;
	
	//Вик 2024-09-20 С 21.09.24 принято решение ввсе жидкости бить по бк. Ранее эти жидкости пробивались как акция 2 по цене 1.
	Если ТекущаяДата()>'20240921' тогда
		Если ЗначениеЗаполнено(Номенклатура) тогда
			ПК = ПолучитьПолныйКод(Номенклатура);
			Если ВходитВАкциюДВаПоЦенеОдного(ПК) тогда
				Возврат истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Вик 2024-09-30
	Если ТекущаяДата()>'20241001' тогда
		Если Найти(ПК, "Ю2-00040690") тогда
			Возврат истина;
		КонецЕсли;
	КонецЕсли; 
	
	//Марк 2024-10-17
	Если ПробиватьПоБК(ПК) Тогда
		Возврат Истина;
	КонецЕсли;
	//Вик 2024-10-02
	//Если ТекущаяДата()>'20241003' тогда
	//	Если Найти(ПК, "Ю2-00043285") тогда
	//		Возврат истина;
	//	КонецЕсли;
	//КонецЕсли; 

	

	Возврат Ложь;
КонецФункции 

&НаСервереБезКонтекста
Функция ПробиватьПоБК(ПК) //Марк 2024-10-17
	
	Если ТекущаяДата()>'20241003' тогда
		Если Найти(ПК, "Ю2-00043285") тогда
			Возврат истина;
		КонецЕсли;
	КонецЕсли; 
	
	//Moti 5000    Ю2-00022876
	//Moti 6000    Ю2-00022877
	//QSUN7000    Ю2-00037442
	//TOPOL 10000  Ю2-00039006
	//UDN 10000    Ю2-00023765
	//UDN 20000    Ю2-00042309
	//UDN 12000    Ю2-00026304
	
	Если ТекущаяДата() >= '20241018' Тогда
		
		Если Найти(ПК, "Ю2-00022876") или Найти(ПК, "Ю2-00022877") или Найти(ПК, "Ю2-00037442")
			или Найти(ПК, "Ю2-00039006") или Найти(ПК, "Ю2-00023765") или Найти(ПК, "Ю2-00042309") или Найти(ПК, "Ю2-00026304") Тогда
			
			Возврат истина;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Ю2-00040638 UDN X 20000
	Если ТекущаяДата() >= '20241023' Тогда
		
		Если Найти(ПК, "Ю2-00040638") Тогда
			Возврат истина;		
		КонецЕсли;
		
	КонецЕсли;
	
	//Марк 2024-10-29 DV1C-92
	//VOZOL 20000
	Если ТекущаяДата() >= '20241030' Тогда
	
		Если Найти(ПК, "Ю2-00043464") Тогда
			Возврат истина;		
		КонецЕсли;	
	
	КонецЕсли;
	//КонецМарк 
	
	//Марк 2024-11-12
	//Ю2-00041917 MON BOOSTER P15000
	//Ю2-00040694 Сигареты электронные TITANIK
	Если ТекущаяДата() >= '20241113' Тогда
		
		Если Найти(ПК, "Ю2-00041917") или  Найти(ПК, "Ю2-00040694") Тогда
			Возврат истина;		
		КонецЕсли;	
		
	КонецЕсли;
	//КонецМарк
	
	//Марк 2024-11-19
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПробиватьПоБК.Дата КАК Дата
	                      |ИЗ
	                      |	РегистрСведений.ПробиватьПоБК КАК ПробиватьПоБК
	                      |ГДЕ
	                      |	ПробиватьПоБК.НоменклатурнаяГруппа.Код В(&Код)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ");
	Массив_ПК = СтрРазделить(ПК, "/");
	Запрос.УстановитьПараметр("Код", Массив_ПК);
	//7622100577423
	ВыборкаБитьПоБК = запрос.Выполнить().Выбрать();
	
	Если ВыборкаБитьПоБК.Следующий() Тогда
	
		Если ТекущаяДата() >= ВыборкаБитьПоБК.Дата Тогда
			Возврат Истина;	
		КонецЕсли;	
	
	КонецЕсли;
	//КонецМарк



	
	Возврат Ложь;
	
	
КонецФункции // ()

&НаСервереБезКонтекста
Функция ВходитВАкциюДВаПоЦенеОдного(ПК)
	ПодходитПодАкцию 	= Ложь;
	ЯвляетсяИсключением = Ложь;
	
	Если ТекущаяДата()<'20240908' тогда  
		
		Если (Найти(ПК, "00048205348") или Найти(ПК, "Ю2-00023503")  или Найти(ПК, "Ю2-00032192") )  тогда //Группа электронные устройства и группы БК для электронных устройств
			ПодходитПодАкцию = Истина;	
		КонецЕсли;
		
		
		Если Найти(ПК, "Ю2-00019140") тогда //Стики и группы данные отделом закупок
			ЯвляетсяИсключением = Истина;
		КонецЕсли;	
		
		Если ТекущаяДата()>'20240905' тогда
			Если Найти(ПК, "Ю2-00016475") или Найти(ПК, "Ю2-00039006") или Найти(ПК, "Ю2-00040694") или Найти(ПК, "Ю2-00038107") или Найти(ПК, "Ю2-00014079") или Найти(ПК, "Ю2-00021080") или Найти(ПК, "Ю2-00022246") или 
			     Найти(ПК, "Ю2-00037702") или Найти(ПК, "Ю2-00040966") или Найти(ПК, "Ю2-00037691") или Найти(ПК, "Ю2-00016476") или Найти(ПК, "Ю2-00025386") или Найти(ПК, "Ю2-00003523") или Найти(ПК, "Ю2-00022843") или
				 Найти(ПК, "Ю2-00026231") или Найти(ПК, "Ю2-00026230") или Найти(ПК, "Ю2-00011050") или Найти(ПК, "Ю2-00017651") или Найти(ПК, "Ю2-00011062") или Найти(ПК, "Ю2-00037518") или
				 Найти(ПК, "Ю2-00038020") или Найти(ПК, "Ю2-00039023") или Найти(ПК, "Ю2-00037494") или Найти(ПК, "Ю2-00041111") или Найти(ПК, "Ю2-00041083") или Найти(ПК, "Ю2-00041042") или Найти(ПК, "Ю2-00037974") или
				 Найти(ПК, "Ю2-00037973") или Найти(ПК, "Ю2-00037421") или Найти(ПК, "Ю2-00025016") или Найти(ПК, "Ю2-00019912") или Найти(ПК, "Ю2-00011258") или Найти(ПК, "Ю2-00023846") или
				 Найти(ПК, "Ю2-00018405") или Найти(ПК, "Ю2-00039760") или Найти(ПК, "Ю2-00011258") или Найти(ПК, "Ю2-00008011") или Найти(ПК, "Ю2-00007113") или
				 Найти(ПК, "Ю2-00007867") или Найти(ПК, "Ю2-00007114") или Найти(ПК, "Ю2-00007955") или Найти(ПК, "Ю2-00011916") или Найти(ПК, "Ю2-00022861") или Найти(ПК, "Ю2-00038996") или Найти(ПК, "Ю2-00022377") или		 
				 Найти(ПК, "Ю2-00019978") или Найти(ПК, "Ю2-00019978") или Найти(ПК, "Ю2-00039374") или Найти(ПК, "Ю2-00043250") или Найти(ПК, "Ю2-00043377") или Найти(ПК, "Ю2-00025666") или Найти(ПК, "Ю2-00039379") или	 
				 Найти(ПК, "Ю2-00025667") или Найти(ПК, "Ю2-00040550") или Найти(ПК, "Ю2-00025379") или Найти(ПК, "Ю2-00037766") или Найти(ПК, "Ю2-00022253") или
				 Найти(ПК, "Ю2-00002827") или Найти(ПК, "Ю2-00016722") или Найти(ПК, "Ю2-00002828") или Найти(ПК, "Ю2-00013577") или Найти(ПК, "Ю2-00002825") или Найти(ПК, "Ю2-00016723") или Найти(ПК, "Ю2-00002823") или		 
				 Найти(ПК, "Ю2-00010415") или Найти(ПК, "Ю2-00004277") или Найти(ПК, "Ю2-00003271") или Найти(ПК, "Ю2-00014625") или Найти(ПК, "Ю2-00037767") или Найти(ПК, "Ю2-00002824") или Найти(ПК, "Ю2-00026982") или		 
				 Найти(ПК, "Ю2-00011215") или Найти(ПК, "Ю2-00023001") или Найти(ПК, "Ю2-00023002") или Найти(ПК, "Ю2-00037992") или Найти(ПК, "Ю2-00036966") или Найти(ПК, "Ю2-00040389")
			
			тогда //группы данные отделом закупок
				ЯвляетсяИсключением = Истина;
			КонецЕсли;	
		КонецЕсли;
	иначе
		
		Если Найти(ПК, "00048205502") или Найти(ПК, "Ю2-00022727")  или Найти(ПК, "Ю2-00025685") или Найти(ПК, "Ю2-00025177")   тогда 
			ПодходитПодАкцию = Истина;	
		КонецЕсли;	
		
	КонецЕсли;

	
	Если ПодходитПодАкцию и не ЯвляетсяИсключением тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
	
КонецФункции

&НаКлиенте
Процедура ТБКПереключательDebugПриИзмененииПосле(Элемент)
	Элементы.Debug.Видимость = ПереключательDebug;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьШкУпаковокНаСервере(ШК) 
	Об = ШК.получитьОбъект();
	Об.ЗначениеШтрихкода	=	"ч" + Об.ЗначениеШтрихкода;
	Об.записать();    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписиКоличествоЧеков()
	СтруктураКолЧеков	=	ОбщегоНазначенияВызовСервера.ПолучитьКоличествоЧеков();
	
	Если СтруктураКолЧеков.КолЧеков>0 или СтруктураКолЧеков.КолЧековЛояльность>0 тогда
		Процент	=	?(СтруктураКолЧеков.КолЧеков>0, окр(СтруктураКолЧеков.КолЧековЛояльность/СтруктураКолЧеков.КолЧеков*100,1), 0) ;
		Элементы.КолЧековВсего.Заголовок			=	"Всего чеков: "		+ СтруктураКолЧеков.КолЧеков;
		Элементы.КолЧековЛояльность.Заголовок		=	"По лояльности: " 	+ СтруктураКолЧеков.КолЧековЛояльность+";  "+Процент+"%";		
	иначе
		Элементы.КолЧековЛояльность.Заголовок		=	"";		
		Элементы.КолЧековВсего.Заголовок			=	"";
	КонецЕсли;
КонецПроцедуры

&НаСервере
&Вместо("ЗаписатьЧекККМПоОрганизации")
Функция ТБКЗаписатьЧекККМПоОрганизации(ИдентификаторСтрокиТПЧеков, ПерваяОрганизация, ПараметрыОперации, ПараметрыИнформации)
	
	СтрокаТПЧеков = ТабличноеПолеЧеков.НайтиПоИдентификатору(ИдентификаторСтрокиТПЧеков);
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Если ЗначениеЗаполнено(СтрокаТПЧеков.ЧекККМСсылка) Тогда
		
		ОбъектЧекККМ = СтрокаТПЧеков.ЧекККМСсылка.ПолучитьОбъект();
		Если Не ТипЗнч(ОбъектЧекККМ) = Тип("ДокументОбъект.ЧекККМ") Тогда
			ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
			ОбъектЧекККМ.УстановитьСсылкуНового(СтрокаТПЧеков.ЧекККМСсылка);
		КонецЕсли;
		
		ОбъектЧекККМ.Дата = ТекущаяДата;
		
	Иначе
		
		ОбъектЧекККМ = Документы.ЧекККМ.СоздатьДокумент();
		ОбъектЧекККМ.Дата = НачалоДня(ТекущаяДата);
		
		Если ЗначениеЗаполнено(СтрокаТПЧеков.ЧекККМСсылка) Тогда
			ОбъектЧекККМ.УстановитьСсылкуНового(СтрокаТПЧеков.ЧекККМСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектЧекККМ.РежимРМК = Истина;
	
	ЗаполнитьЗначенияСвойств(ОбъектЧекККМ, Объект,,"Ссылка, Дата");
	
	ОбъектЧекККМ.СистемаНалогообложения = СтрокаТПЧеков.ВидНалога;
	ОбъектЧекККМ.Организация = СтрокаТПЧеков.Организация;
	
	Если ЗначениеЗаполнено(ТаблицаДокументовРасчета) И ТаблицаДокументовРасчета.Количество() > 1 Тогда
		СтруктураОтбора = Новый Структура("Организация", СтрокаТПЧеков.Организация);
		ДокументыРасчета = ТаблицаДокументовРасчета.НайтиСтроки(СтруктураОтбора);
		Если ЗначениеЗаполнено(ДокументыРасчета) Тогда
			ОбъектЧекККМ.ДокументРасчета       = ДокументыРасчета[0].ДокументРасчета;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектЧекККМ.ИдентификаторЧекаВОчереди) Тогда
		Идентификатор = Новый УникальныйИдентификатор;
		ОбъектЧекККМ.ИдентификаторЧекаВОчереди = XMLСтрока(Идентификатор);
	КонецЕсли;
	
	СтруктураПоискаКассыККМ = Новый Структура;
	СтруктураПоискаКассыККМ.Вставить("Организация", СтрокаТПЧеков.Организация);
	//Бойков ИК вторая касса
	СтруктураПоискаКассыККМ.Вставить("ПоУмолчанию", Истина);
	////////////////////////
	
	СтрокиКассККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(СтруктураПоискаКассыККМ);
	Если СтрокиКассККМОрганизации.Количество() > 0  Тогда
		ОбъектЧекККМ.КассаККМ = СтрокиКассККМОрганизации[0].КассаККМ;
	КонецЕсли;
	
	СтруктураПоискаТоваров = Новый Структура();
	СтруктураПоискаТоваров.Вставить("Организация", СтрокаТПЧеков.Организация);
	СтруктураПоискаТоваров.Вставить("ВидНалога", СтрокаТПЧеков.ВидНалога);
	
	МассивКлючей = ПолучитьМассивКлючей("КлючСвязи", СтруктураПоискаТоваров);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "Товары", "КлючСвязи", МассивКлючей,, Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "СкидкиНаценки", "КлючСвязи", МассивКлючей,, Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "Подарки", "КлючСвязи", Неопределено, ПерваяОрганизация, Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "СерииПодарков", "КлючСвязи", Неопределено, ПерваяОрганизация, Истина);
	ЗаполнитьТабличнуюЧастьЧека(
		ОбъектЧекККМ, "БонусныеБаллыКНачислению", "КлючСвязи", МассивКлючей, ПерваяОрганизация, Истина);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "АкцизныеМарки", "КлючСвязи", МассивКлючей,, Истина);
	ЗаполнитьТабличнуюЧастьЧека(
		ОбъектЧекККМ, "ПредъявленныеКодыОднократныхСкидок", "КлючСвязи", Неопределено, ПерваяОрганизация, Истина);
	
	МассивКлючей = ПолучитьМассивКлючей("КлючСвязиСерийныхНомеров", СтруктураПоискаТоваров);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "СерийныеНомера", "КлючСвязиСерийныхНомеров", МассивКлючей,, Истина);
	
	МассивКлючейСвязиТПЧеков = Новый Массив();
	МассивКлючейСвязиТПЧеков.Добавить(ИдентификаторСтрокиТПЧеков);
	ЗаполнитьТабличнуюЧастьЧека(ОбъектЧекККМ, "Оплата", "КлючСвязиТПЧеков", МассивКлючейСвязиТПЧеков,, Истина);
	ЗаполнитьТабличнуюЧастьЧека(
		ОбъектЧекККМ, "ПогашениеПодарочныхСертификатов", "КлючСвязиТПЧеков", МассивКлючейСвязиТПЧеков,, Истина);
	
	ЗаполнитьТабличнуюЧастьПоНоменклатуреХарактеристике(ОбъектЧекККМ, "Серии", ОбъектЧекККМ.Товары, Истина);
	
	ЗаполнитьУправляемыеСкидки(ОбъектЧекККМ);
	
	ДобавитьОплатуБонусамиВЧек(ОбъектЧекККМ, Истина);
	
	ОбъектЧекККМ.СуммаДокумента =
		ОбработкаТабличнойЧастиТоварыКлиентСервер.СуммаДокумента(ОбъектЧекККМ.Товары, Объект.ЦенаВключаетНДС);
	
	ПровестиЧекККМПередПробитием(ОбъектЧекККМ, ПараметрыОперации, ПараметрыИнформации);
	
	Если ПерваяОрганизация И ЗначениеЗаполнено(ОбъектЧекККМ.Ссылка) Тогда
		ЗаполнитьПредварительныйЛог(ОбъектЧекККМ.Ссылка);
	КонецЕсли;
	
	СтрокаТПЧеков.ЧекККМСсылка = ОбъектЧекККМ.Ссылка;
	
	Возврат ОбъектЧекККМ.Ссылка;

КонецФункции

&НаКлиенте
&Вместо("ОплатитьТоварыПослеВыбораККМПродолжение")
Процедура ТБКОплатитьТоварыПослеВыбораККМПродолжение(Знач Результат = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущаяКассаККМ) Тогда
			ЗаголовокИнформации = НСтр("ru = 'Оплата'");
			ТекстИнформации = НСтр("ru = 'Не выбрана касса ККМ для проведения операции.'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		КонецЕсли;
	
		Если НЕ ЭтотОбъект.Доступность Тогда
			ЭтотОбъект.Доступность = Истина;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ИзменитьКассуПоУмолчанию = Ложь;
	Если НЕ ТекущаяКассаККМ = Результат.Касса Тогда
		ТекущаяКассаККМ = Результат.Касса;
		ИзменитьКассуПоУмолчанию = Истина;
	КонецЕсли; 
	
	//Бойков ИК вторая касса
	ИзменитьОрганизацию = Ложь;
	////////////////////////
	
	Если НЕ Объект.Организация = Результат.Организация Тогда
		Объект.Организация = Результат.Организация;
		
		ПараметрыПоискаСклада = Новый Структура;
		ПараметрыПоискаСклада.Вставить("Организация", Объект.Организация);
		ПараметрыПоискаСклада.Вставить("РабочееМесто", Объект.РабочееМесто);
		ПараметрыПоискаСклада.Вставить("Магазин", Объект.Магазин);
		
		СкладПродажиПоУмолчанию = СкладПродажиПоУмолчанию(ПараметрыПоискаСклада);
		
		ИзменитьКассуПоУмолчанию = Истина;
		ИзменитьОрганизацию = Истина;
	КонецЕсли; 
	
	ИзменитьКассуПоУмолчанию = Истина;
	
	Если ИзменитьКассуПоУмолчанию Тогда
		ККМОрганизации = ТаблицаКассККМОрганизаций.НайтиСтроки(Новый Структура("Организация", Объект.Организация));
		Для каждого СтрокаККМ Из ККМОрганизации Цикл
			СтрокаККМ.ПоУмолчанию = СтрокаККМ.КассаККМ = ТекущаяКассаККМ;
		КонецЦикла;
	КонецЕсли;
	
	Если ВестиУчетАлкогольнойПродукции И ИзменитьОрганизацию Тогда
		НайденнаяОрганизацияЕГАИС = ИнтеграцияЕГАИСРТВызовСервера.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
			Объект.Организация, Объект.Магазин);
		Если ОрганизацияЕГАИС <> НайденнаяОрганизацияЕГАИС Тогда
			ОрганизацияЕГАИС = НайденнаяОрганизацияЕГАИС;
		КонецЕсли;
	КонецЕсли;
	
	Если ВестиУчетМаркируемойПродукцииИСМП И ИзменитьОрганизацию Тогда
		Если НЕ ОрганизацииИСМП.НайтиПоЗначению(Объект.Организация) = Неопределено Тогда
			ОрганизацияИСМП = Объект.Организация;
		Иначе
			ОрганизацияИСМП = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ИзменитьОрганизацию Тогда
		ИзменитьОрганизациюВТоварахНаСервере();
		ПриИзмененииЭлементаГосИС();
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокНоменклатуры = Новый СписокЗначений;
	Если РозничныеПродажиКлиент.ЭтоВозвратПродукцииИСМПБезУказанияМарок(Объект, СписокНоменклатуры) Тогда
		ПодтвердитьВозвратПродукцииИСМПБезМарок(
			ДополнительныеПараметры,
			СписокНоменклатуры);
	Иначе
		ПродолжитьОплатуТоваров(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры
