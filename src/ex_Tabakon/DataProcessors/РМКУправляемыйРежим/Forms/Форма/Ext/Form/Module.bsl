&НаКлиенте
Перем флЭтоВнешнийЭквайринг;

&НаКлиенте
Перем МассивКассККМКлиент_оригинал;


&НаСервереБезКонтекста
Функция ПолучитьТекущегоПродавца()
	текущийПользователь = Пользователи.ТекущийПользователь();
	Возврат текущийПользователь.ФизическоеЛицо;
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьТрейдИн()
	результ = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	замены.Номенклатура КАК Владелец,
	               |	замены.Комплектующая КАК Номенклатура,
	               |	замены.ХарактеристикаКомплектующей КАК Характеристика,
	               |	замены.ДоляСтоимости КАК Доплата
	               |ИЗ
	               |	РегистрСведений.КомплектующиеНоменклатуры КАК замены
	               |ИТОГИ ПО
	               |	Владелец";
	
	прототипСтруктуры = "Владелец,Номенклатура,Характеристика,Доплата";
	
	резЗамены = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока резЗамены.Следующий() Цикл
		
		резКомплект = резЗамены.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		мВарианты = Новый Массив();
		Пока резКомплект.Следующий() Цикл
			
			стр = Новый Структура(прототипСтруктуры);
			ЗаполнитьЗначенияСвойств(стр,резКомплект);
			мВарианты.Добавить(стр);
		КонецЦикла;
		
		результ.Вставить(резЗамены.Владелец , мВарианты);
	Конеццикла;
	
	
	возврат результ;
КонецФункции

&НаКлиенте
&После("ОбновитьФорму")
Процедура ТБКОбновитьФорму()
	// Вставить содержимое метода.
	текущегоПродавца = ПолучитьТекущегоПродавца();
	
	трейдИн = ПолучитьТрейдИн();
	Если ЛОЖЬ Тогда трейдИн = Новый Соответствие(); КонецЕсли;
	
	Элементы.КартинкаПО22РучныеСкидки.Доступность			=	Истина;
	Элементы.ПрограммноКартинкаПО22РучныеСкидки.Доступность	=	Истина;
	
	флЕстьГЛОсоСкидкой	=	Ложь;
	Для Каждого стр из Объект.Товары Цикл
		
		Если не ЗначениеЗаполнено(стр.Продавец) Тогда
			стр.Продавец = текущегоПродавца;
		КонецЕсли;
		
		Если НЕ ПроверкаНапредметПустогоНаименованияТовара(стр.Номенклатура) Тогда
			оповещение = Новый ОписаниеОповещения("ОбработкаЗавершения_ПроверкаНапредметПустогоНаименованияТовара",ЭтотОбъект, стр);
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаСообщениеОПлохойНоменклатуре",неопределено,неопределено
					,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
					
			возврат;			
		КонецЕсли; 		
		
		//Вик 2021_08_31
		Если ПроверкаНаПометку(стр.Номенклатура)  Тогда
			ПараметрыОткр	=	новый Структура;
			ПараметрыОткр.Вставить("ИзменитьЗаголовок",истина);
			
			оповещение = Новый ОписаниеОповещения("ОбработкаЗавершения_ПроверкаНапредметПустогоНаименованияТовара",ЭтотОбъект, стр);//эта подходит
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаСообщениеОПлохойНоменклатуре",ПараметрыОткр,неопределено
					,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
					
			возврат;			
		КонецЕсли; 
		//КонецВик
		
		
		Если ЗначениеЗаполнено(стр.Номенклатура) и ЗначениеЗаполнено(стр.Цена) Тогда
			Если не Найти(ПолноеНаименованиеНоменклатуры(стр.Номенклатура),"Напиток") Тогда//Вик 2022_04_12  
				Если (трейдИн.Получить(стр.Номенклатура) <> неопределено) Тогда
					параметрыВыбора = Новый Структура();
					параметрыВыбора.Вставить("ТрейдИн", трейдИн.Получить(стр.Номенклатура));
					
					оповещение = Новый ОписаниеОповещения("ОбработкаЗавершенияВыбораЗамены",ЭтотОбъект, стр);
					
					ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаВыборЗамены",параметрыВыбора,УникальныйИдентификатор
						,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				КонецЕсли;
			КонецЕсли;			
		конецЕсли;
		
		Если ЭтоГЛО(стр.Номенклатура) тогда //Вик 2021_09_28 по просьбе Козьминой
			Элементы.КартинкаПО22РучныеСкидки.Доступность			=	Ложь;
			Элементы.ПрограммноКартинкаПО22РучныеСкидки.Доступность	=	Ложь;
			Если стр.СуммаРучнойСкидки > 0 тогда
				флЕстьГЛОсоСкидкой = Истина;
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
	Если не флЕстьГЛОсоСкидкой тогда
		КодАкции = "";
	КонецЕсли;
	
	Если Объект.Товары.Количество()=0 тогда
		УправляемыеСкидки.Очистить();
		ПокупкаСотрудника						=	Ложь;
		Элементы.ПокупкаСотрудника.Доступность	=	Истина;
		Элементы.Товары.Доступность				=	Истина;
	КонецЕсли; 

	Если ДоступнаПроверкаОрганизаций тогда
		синхронно = ЛОЖЬ;
		Если синхронно Тогда
			ПроверитьСтатусыМарок_СерверСинхронно();
			ПроверитьСтатусыМарок_Результат();
		Иначе
			ПроверитьСтатусыМарок();
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолноеНаименованиеНоменклатуры(Номенклатура)
	Возврат Номенклатура.НаименованиеПолное;
КонецФункции

&НаКлиенте
Процедура ПроверитьСтатусыМарок() ЭКСПОРТ
	
	Если ЗначениеЗаполнено(ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок) Тогда
		ПодключитьОбработчикОжидания("ПроверитьСтатусыМарок",0.5,ИСТИНА);
		возврат;
	КонецЕсли;
	
	//ПроверитьСтатусыМарок_Сервер();
	//Если ЗначениеЗаполнено(ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок) Тогда
	Если ПроверитьСтатусыМарок_Сервер() Тогда
		ПодключитьОбработчикОжидания("ПроверитьСтатусыМарок_Результат",1,ЛОЖЬ);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция ПроверитьСтатусыМарок_СерверСинхронно()
	
	марки = ПолучитьМаркиНаПроверку();
	
	Если марки.Количество() = 0 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок = ПоместитьВоВременноеХранилище(неопределено);
	
	адресРезультата = ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок;
	
	рез = Обработки.ТБК_Маркировка.ПолучитьВладельцаМарок(марки);
	ПоместитьВоВременноеХранилище(рез, адресРезультата);
КонецФункции
&НаСервере
Функция ПроверитьСтатусыМарок_Сервер()
	
	марки = ПолучитьМаркиНаПроверку();
	
	Если марки.Количество() = 0 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	//йй = Обработки.ТБК_Маркировка.ПолучитьВладельцаМарок(марки); 
	
	//коммент Вик 2022_01_31
	//Если ЗначениеЗаполнено(ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок) Тогда
	//	Возврат ЛОЖЬ;
	//КонецЕсли;     
	//Вик
	
	
	ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок = ПоместитьВоВременноеХранилище(неопределено);
			
	ТекстФоновойПроцедуры = "
	| Попытка
	|	рез = Обработки.ТБК_Маркировка.ПолучитьВладельцаМарок(марки);
	|	ПоместитьВоВременноеХранилище(рез, адресРезультата);
	| Исключение                     
	|   информацияОбОшибке = ИнформацияОбОшибке();
	| 	ПоместитьВоВременноеХранилище(информацияОбОшибке, адресРезультата);
	| КонецПопытки;
	|";
	
	ФоновоеВыполнение.ЗапуститьФоновоеВыполнение(ТекстФоновойПроцедуры,Новый Структура("марки,адресРезультата",марки, ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок));
	
	Возврат ИСТИНА;
КонецФункции


&НаКлиенте
Функция ПолучитьАкцизныеМаркиПоКлючСвязи(ключСвязи)
	мРезультат = новый Массив;
	
	Для Каждого стр из Объект.АкцизныеМарки Цикл
		Если стр.КлючСвязи = ключСвязи Тогда
			мРезультат.Добавить(стр);
		КонецЕсли;
	КонецЦикла;
	
	Возврат мРезультат;
КонецФункции

&НаСервере
Функция ПолучитьТоварыПоКлючСвязи(ключСвязи)
	Для Каждого стр из Объект.Товары Цикл
		Если стр.КлючСвязи = ключСвязи Тогда
			Возврат стр;
		КонецЕсли;
	КонецЦикла;
КонецФункции



&НаСервере
Функция ПолучитьМаркиНаПроверку()
	марки = новый Массив;
	Для Каждого стр из Объект.АкцизныеМарки Цикл
		
		стрТовары = ПолучитьТоварыПоКлючСвязи(стр.КлючСвязи);
		Если (стрТовары <> неопределено)И ЗначениеЗаполнено(стрТовары.Номенклатура) И ОбщегоНазначения.ЭтоМаркированнаяНоменклатура(стрТовары.Номенклатура) тогда
			Если стр.ПроверкаМаркиСтатус = 0 Тогда
				марки.Добавить(стр.КодАкцизнойМарки);
				стрТовары.ПроверкаМаркиСтатус = 0;
			КонецЕсли;
		Иначе
			стр.ПроверкаМаркиСтатус = -1;
			Если (стрТовары <> неопределено) Тогда
				стрТовары.ПроверкаМаркиСтатус = -1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат марки;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИзВременногоХранилища_Сервер(адрес)
	Попытка
		Возврат ПолучитьИзВременногоХранилища(адрес);
	Исключение
		Возврат неопределено;
	КонецПопытки;
КонецФункции


&НаКлиенте
Процедура ПроверитьСтатусыМарок_Результат() ЭКСПОРТ
	статусыМарок = ПолучитьИзВременногоХранилища_Сервер(ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок);
	//Если (статусыМарок = неопределено) ИЛИ (не ЗначениеЗаполнено(статусыМарок)) Тогда
	Если статусыМарок = неопределено или статусыМарок = "" или Строка(статусыМарок) = "ИнформацияОбОшибке" Тогда
		Возврат
	КонецЕсли; 
	
	//Доп Вик 2022_01_31
	ОтборСтр	=	Новый Структура();
	ОтборСтр.Вставить("ПроверкаМаркиСтатус",0);
	Строки =  Объект.АкцизныеМарки.НайтиСтроки(ОтборСтр);
	Если Строки.количество() <> статусыМарок.Количество() тогда  
		ПроверитьСтатусыМарок_Сервер();
		Возврат
	КонецЕсли;
	//КонецВик	
	
	ОтключитьОбработчикОжидания("ПроверитьСтатусыМарок_Результат");
	
	инн = СокрЛП(ПолучитьЗначениеРеквизита(ЭтаФорма.Объект.Организация, "ИНН"));
	                          
	Если ЛОЖЬ Тогда статусыМарок = Новый Соответствие; КонецЕсли;
	Для Каждого стр из Объект.АкцизныеМарки Цикл
		Если стр.ПроверкаМаркиСтатус = 0 Тогда
			//Если длина = 25 тогда необходимо отбросить 4 последних символа про МРЦ)
			//это спроведливо только для пачки
			мкрка = ?(СтрДлина(стр.КодАкцизнойМарки = 25),Лев(стр.КодАкцизнойМарки, 25 - 4),стр.КодАкцизнойМарки);
			статус = статусыМарок.Получить(мкрка);
			Если статус = неопределено Тогда
				стр.ПроверкаМаркиСтатус = 2;
			Иначе
				Если статус.ИНН = инн Тогда 
					стр.ПроверкаМаркиСтатус = 1;	
				Иначе
					стр.ПроверкаМаркиСтатус = 2;
					стр.ПроверкаМаркиИНН = статус.ИНН;
				КонецЕсли;
				
				//ПодключитьОбработчикОжидания("ПроверитьСтатусыМарок_Результат",1,ЛОЖЬ);
				//Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Обновить данные в общей таблице
	Для Каждого стр из Объект.Товары Цикл
		Если стр.ПроверкаМаркиСтатус < 0 Тогда
			ПРОДОЛЖИТЬ;
		КонецЕсли;
		Если не стр.МаркируемаяПродукция тогда Продолжить; КонецЕсли;		
		
		строкиМарки = ПолучитьАкцизныеМаркиПоКлючСвязи(стр.КлючСвязи);
		минСтатус = 99;
		максСтатус = 0;
		агрегатИНН = "";
		
		Для Каждого стрМарка из строкиМарки Цикл
			минСтатус = Мин(минСтатус, стрМарка.ПроверкаМаркиСтатус);
			максСтатус = Макс(максСтатус, стрМарка.ПроверкаМаркиСтатус);
			
			агрегатИНН = 
				агрегатИНН + Символы.ПС + 
				стрМарка.КодАкцизнойМарки + " : " + ?(ЗначениеЗаполнено(стрМарка.ПроверкаМаркиИНН),стрМарка.ПроверкаМаркиИНН,"V"); 
			
		КонецЦикла;
		
		стр.ПроверкаМаркиИНН = "";
		Если (минСтатус > 0) и (максСтатус > 1) Тогда 
			стр.ПроверкаМаркиИНН = СокрЛП(агрегатИНН);
		КонецЕсли;
		
		Если минСтатус = максСтатус Тогда
			стр.ПроверкаМаркиСтатус = минСтатус;
		ИначеЕсли минСтатус > 0 Тогда
			стр.ПроверкаМаркиСтатус = 3;
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок = "";
		
КонецПроцедуры


&НаКлиенте
Процедура ТБКТоварыВыборПосле(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Строка=Элементы.Товары.ТекущиеДанные;
	ПроверкаМаркиИНН = Строка.ПроверкаМаркиИНН;	
	Если ЗначениеЗаполнено(ПроверкаМаркиИНН) Тогда
		//ПоказатьОповещениеПользователя(,,ПроверкаМаркиИНН);
		тд = Новый ТекстовыйДокумент;
		тд.УстановитьТекст(ПроверкаМаркиИНН);
		тд.Показать("Проверка "+Строка.Номенклатура);
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Функция ОбработкаЗавершения_ПроверкаНапредметПустогоНаименованияТовара(РезультатОткрытияФормы, стр)ЭКСПОРТ
	Объект.Товары.Удалить(стр);	
	ОбновитьФорму();
КонецФУнкции


&НаКлиенте
Функция ОбработкаЗавершенияВыбораЗамены(РезультатОткрытияФормы, стр)ЭКСПОРТ
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		стр.Номенклатура = РезультатОткрытияФормы.Номенклатура;
		стр.Характеристика = РезультатОткрытияФормы.Характеристика;
		стр.Цена = РезультатОткрытияФормы.Доплата;
		
		
		стр.Цена = ?(стр.Цена=1,
					0.01,
					стр.Цена
		);
		
		
		стр.Сумма = стр.Цена;
		стр.СуммаВсего = стр.Сумма;
		
	Иначе
		Объект.Товары.Удалить(стр);
	КонецЕсли;
	
	
	ОбновитьФорму();
КонецФУнкции

&НаСервере
&Вместо("ПроверитьЗаполнениеТабличнойЧасти")
Процедура ТБКПроверитьЗаполнениеТабличнойЧасти(Отказ, ПараметрыИнформации, ОплатаТолькоНаличными)
	// Вставить содержимое метода.
	
	Для Каждого стр из Объект.Товары Цикл
		Если СтрДлина(стр.Штрихкод) <= 13 Тогда
			стр.МаркируемаяПродукция = ложь;
		КонецЕсли;
	КонецЦикла;
	
	//Вик 2021_07_01
	Для Каждого Стр из Объект.Товары Цикл
		Если ЗначениеЗаполнено(Стр.Характеристика) и Стр.Цена <108 тогда
			Отказ = Истина;
			Сообщить("Для продажи сигарет < 108р. воспользуйтесь БК");
		ИначеЕсли ТекущаяДата() > '20220401' и ЗначениеЗаполнено(Стр.Характеристика) и Стр.Цена < 112 тогда
			Отказ = Истина;
			Сообщить("Для продажи сигарет < 112р. воспользуйтесь БК");
		КонецЕсли;
		
		//25_04_2022 группы - БК стики гло и БК стики Айкос. Часто ставят цены блоков - поэтому контроль. по просьбе Волковой
		Если Стр.Цена >300 и ( Найти(Стр.Номенклатура.ПолныйКод(),"Ю2-00015938") или Найти(Стр.Номенклатура.ПолныйКод(),"Ю2-00015939") ) тогда 
			Отказ = Истина;
			Сообщить("Нельзя пробивать стики дороже 300р. Возможно вы пробиваете блок");
		КонецЕсли;
	КонецЦикла;;
	//КонецВик
	
	ПродолжитьВызов(Отказ, ПараметрыИнформации, ОплатаТолькоНаличными);
КонецПроцедуры

&НаКлиенте
Процедура ТБКПрименитьВаучерПосле(Команда)
	// Вставить содержимое обработчика.
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивУправляемыеСкидкиДокумента", УправляемыеСкидки.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуУправляемыхСкидок", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаВаучер",
		ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
КонецПроцедуры

&НаКлиенте
Процедура ТБКПриОткрытииПосле(Отказ)
	//Вставить содержимое обработчика
	
	МассивКассККМКлиент_оригинал = новый Массив;
	
	Для Каждого эл из МассивКассККМКлиент цикл 
		ЭтаФорма.Элементы.ТекущаяКассаККМ.СписокВыбора.Добавить(эл);
		МассивКассККМКлиент_оригинал.Добавить(эл);
	КонецЦикла;
	
	Для Каждого стр из Этаформа.ТаблицаКассККМОрганизаций Цикл
		нстр = Этаформа.ТаблицаКассККМОрганизаций_оригинал.Добавить();
		ЗаполнитьЗначенияСвойств(нстр,стр);
	КонецЦикла;
	
	Этаформа.ТекущаяКассаККМ = МассивКассККМКлиент_оригинал[0];
	
	ТБКТекущаяКассаККМПриИзмененииПосле(неопределено);
	
	Версия = ПолучитьВерсиюКонфигурации();
	Элементы.ВерсияР.Заголовок = Версия;
	
	УстановитьЦветКнопкиОтключитьЭквайринг();
	Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный тогда
		флЭтоВнешнийЭквайринг = Истина;
	иначе
		флЭтоВнешнийЭквайринг = Ложь;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработатьИнтернетЗаказы_Клиент",900);//Вик 2021_08_13
КонецПроцедуры 

&НаСервереБезКонтекста
Функция  ПолучитьВерсиюКонфигурации()
	Возврат ОбщегоНазначения.ПолучитьВерсиюРасширения();	
КонецФункции

&НаКлиенте
Процедура ТБКТекущаяКассаККМПриИзмененииПосле(Элемент)
	// Вставить содержимое обработчика.
	МассивКассККМКлиент.Очистить();
	МассивКассККМКлиент.Добавить(Этаформа.ТекущаяКассаККМ);	
	
	//ТБКТекущаяКассаККМПриИзмененииПослеСервер();
	
	Этаформа.ТаблицаКассККМОрганизаций.Очистить();
	
	Для каждого стр из Этаформа.ТаблицаКассККМОрганизаций_оригинал Цикл
		Если стр.КассаККМ = Этаформа.ТекущаяКассаККМ Тогда
			нстр = Этаформа.ТаблицаКассККМОрганизаций.Добавить();
			ЗаполнитьЗначенияСвойств(нстр,стр);
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
		Объект.Организация = ТаблицаКассККМОрганизаций[0].Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТБКТекущаяКассаККМПриИзмененииПослеСервер()
	
	
		
КонецФункции



//Ложь - номенклатура плохая, Истина - Номенклатура хорошая
&НаСервереБезКонтекста
Функция ПроверкаНапредметПустогоНаименованияТовара(Номенклатура)
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		возврат Ложь;
	КонецЕсли;
	
	наименование = ПолучитьЗначениеРеквизита(Номенклатура,"Наименование");
	Если наименование = неопределено Тогда
		возврат Ложь;
	КонецЕсли;
	
	наименование = СтрЗаменить(наименование,"<","");
	наименование = СтрЗаменить(наименование,">","");
	наименование = СтрЗаменить(наименование,"	","");
	наименование = СтрЗаменить(наименование,"  ","");
	наименование = СтрЗаменить(наименование,"","");
	
	
	Возврат ЗначениеЗаполнено(наименование);
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка,ИмяРеквизита)
	Попытка
		Возврат Ссылка[ИмяРеквизита];
	Исключение
		Возврат неопределено;
	Конецпопытки
КонецФункции

&НаСервере
&После("ЗаполнитьОстаткиСервер")
Процедура ТБКЗаполнитьОстаткиСервер()
	ЗапасыСервер.ЗаполнитьОстаткиНоменклатурыБезУчетаХарактеристик(Объект, "Товары")
КонецПроцедуры

&НаКлиенте
Процедура ТБКDebug_ОбработатьМаркуПосле(Команда)
	ДанныеШтрихкода = Новый Структура;
	ДанныеШтрихкода.Вставить("Количество", 1);
	ДанныеШтрихкода.Вставить("Штрихкод"  , ЭтаФорма.Debug_Марка);
	
	ОбработатьКодМаркировки(ДанныеШтрихкода);

КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя")
Процедура ВместоВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя()
	Если не ОбщегоНазначенияВызовСервера.ПроверитьВозможностьРедактирования_Общая()  тогда
		
		ЗаголовокИнформации = НСтр("ru = 'Запрет возврата без основания'");
		ТекстСообщения = НСтр("ru = 'Для возврата за прошлый период в форме меню нажмите Чеки -> Ввести на основании -> Возврат от покупателя -> кнопка Нал или Карта '");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);

		Возврат;
	КонецЕсли;
КонецПроцедуры


&НаСервере
&Вместо("ОткрытьЗакрытьМенюПрочихОпераций")
Процедура ТБК_ОткрытьЗакрытьМенюПрочихОпераций()
	
	Элементы.ГруппаПрочихОпераций.Видимость = НЕ Элементы.ГруппаПрочихОпераций.Видимость;
	Элементы.ГруппаТБК.Видимость			= НЕ Элементы.ГруппаТБК.Видимость;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереключитьЭквайрингСервер(РабочееМесто)
	
	ТЗНужныйТерминал = ПолучитьРаботающийТерминал(РабочееМесто);	
	
	Если ТЗНужныйТерминал <> Неопределено тогда
		Для каждого Строка из ТЗНужныйТерминал цикл
			Об = Строка.Ссылка.ПолучитьОбъект();
			Об.ИспользоватьБезПодключенияОборудования = не Об.ИспользоватьБезПодключенияОборудования;
			Об.ПодключаемоеОборудование 			  = Строка.ПодключаемоеОборудование;
			Об.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРаботающийТерминал(РабочееМесто) 	
	СписокУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам( , , РабочееМесто);
	
	Для каждого Строка из СписокУстройств цикл
		Если Строка.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал тогда
			
			Запрос	=	Новый запрос("ВЫБРАТЬ
			      	 	             |	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
			      	 	             |ГДЕ
			      	 	             |	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
			      	 	             |	И (ЭквайринговыеТерминалы.ПодключаемоеОборудование = &ПодключаемоеОборудование
			      	 	             |			ИЛИ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)");
			Запрос.УстановитьПараметр("ПодключаемоеОборудование",Строка.Ссылка);
			
			Рез = Запрос.Выполнить().Выгрузить();
			Если Рез.Количество() > 0 тогда
				ТЗВозврата = Новый ТаблицаЗначений;
				ТЗВозврата.Колонки.Добавить("Ссылка");
				ТЗВозврата.Колонки.Добавить("ИспользоватьБезПодключенияОборудования");
				ТЗВозврата.Колонки.Добавить("ПодключаемоеОборудование");

				Для каждого СтрокаТерминал из Рез цикл
					
					НоваяСтрока = ТЗВозврата.Добавить();
					НоваяСтрока.Ссылка									=	СтрокаТерминал.Ссылка;
					НоваяСтрока.ИспользоватьБезПодключенияОборудования	=	СтрокаТерминал.Ссылка.ИспользоватьБезПодключенияОборудования;
					НоваяСтрока.ПодключаемоеОборудование				=	Строка.Ссылка;
				КонецЦикла;
				 
				Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗВозврата); 
			иначе
				Возврат Неопределено;
			КонецЕсли;  
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура УстановитьЦветКнопкиОтключитьЭквайринг()
	ТЗНужныйТерминал =    ПолучитьРаботающийТерминал(Объект.РабочееМесто);
	
	Если ТЗНужныйТерминал <> Неопределено тогда
		флЕстьРаботающий = Ложь;
		
		Для каждого Строка из ТЗНужныйТерминал цикл
			Если не Строка.ИспользоватьБезПодключенияОборудования тогда
				флЕстьРаботающий = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		
		Если флЕстьРаботающий тогда 
			Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Черный;
			Элементы.КнопкаОтключитьЭквайринг.Заголовок  = "Отключить"+Символы.ПС+"эквайринг";
		иначе
			Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный;
			Элементы.КнопкаОтключитьЭквайринг.Заголовок  = "Включить"+Символы.ПС+"эквайринг"; 
		КонецЕсли;
	иначе
		Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный;
		Элементы.КнопкаОтключитьЭквайринг.Заголовок  = "Включить"+Символы.ПС+"эквайринг";

	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура ТБКОтключитьЭквайрингПосле(Команда)
	Если Объект.Товары.Количество() > 0 тогда
		ЗаголовокИнформации = НСтр("ru = 'Отключение эквайринга'"); 
		ТекстИнформации = НСтр("ru = 'Перед отключением эквайринга необходимо пробить, аннулировать или отложить текущий чек.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Пароль = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводСтроки", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещения, Пароль, "Введите пароль: "); 

КонецПроцедуры

&НаКлиенте
Процедура ВводСтроки(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если ПолученноеЗначение = "0000" тогда 
		ПереключитьЭквайрингСервер(Объект.РабочееМесто);
		УстановитьЦветКнопкиОтключитьЭквайринг();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
&После("ОбработатьУспешноеПробитиеЧека")
Процедура ТБКОбработатьУспешноеПробитиеЧека()
	Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный и не флЭтоВнешнийЭквайринг тогда 
		ПереключитьЭквайрингСервер(Объект.РабочееМесто);
		УстановитьЦветКнопкиОтключитьЭквайринг();
	КонецЕсли;
	
	//Вик 2021_09_13
	Если ЗначениеЗаполнено(КодАкции) тогда
		ПогастьКод(КодАкции);
		КодАкции = "";
	КонецЕсли;
	//
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьЧО04Возврат")
Процедура ТБКВыполнитьЧО04Возврат()
	Если НЕ ПроверитьВозможностьВозврата() тогда
		Возврат;		
	КонецЕсли;
	
	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьВозвратПоследнегоЧека")
Процедура ТБКВыполнитьВозвратПоследнегоЧека()
	Если НЕ ПроверитьВозможностьВозврата() тогда
		Возврат;		
	КонецЕсли;
	
	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьВозврата()
	Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный и не флЭтоВнешнийЭквайринг тогда
		Если не ОбщегоНазначенияВызовСервера.ПроверитьВозможностьРедактирования_Общая()  тогда
			ЗаголовокИнформации = НСтр("ru = 'Запрет возврата при отключенном терминале'");
			ТекстСообщения = НСтр("ru = 'Для возврата необходимо включить терминал '");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
			Возврат ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;	
КонецФункции 

&НаКлиенте
Процедура ТБКТоварыПриАктивизацииСтрокиПосле(Элемент)
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если не Прав(СокрЛП(Строка(ТекСтрока.Номенклатура)),3)=" БК" тогда
	    	Элементы.ТоварыЦена.ТолькоПросмотр	 	 = Истина;
			Элементы.ТоварыСумма.ТолькоПросмотр		 = Истина;
			Элементы.ТоварыСуммаВсего.ТолькоПросмотр = Истина;
			Элементы.ТоварыСуммаНДС.ТолькоПросмотр	 = Истина;
			Элементы.ТоварыСтавкаНДС.ТолькоПросмотр	 = Истина;
		иначе
		   	Элементы.ТоварыЦена.ТолькоПросмотр	 	 = Ложь;
			Элементы.ТоварыСумма.ТолькоПросмотр		 = Ложь;
			Элементы.ТоварыСуммаВсего.ТолькоПросмотр = Ложь;
			Элементы.ТоварыСуммаНДС.ТолькоПросмотр	 = Ложь;
			Элементы.ТоварыСтавкаНДС.ТолькоПросмотр	 = Ложь;	
		КонецЕсли;
    КонецЕсли; 
КонецПроцедуры

&НаСервере
&Перед("ПровестиЧекККМПередПробитием")
Процедура ТБКПровестиЧекККМПередПробитием(ОбъектЧекККМ, ПараметрыОперации, ПараметрыИнформации)
	Если не ЗначениеЗаполнено(ОбъектЧекККМ.КассаККМ) тогда
		ОбъектЧекККМ.КассаККМ	=	ТекущаяКассаККМ;	
	КонецЕсли;
	
	//Вик 2021_06_02
	Для каждого Строка из  ОбъектЧекККМ.Товары цикл
		Если Строка.Сумма = 0 тогда
			
			Для каждого Строка2 из  ОбъектЧекККМ.Товары цикл
				Если Строка2.Сумма > 1 тогда 	
					Строка2.Сумма	 = Строка2.Сумма - (0.01 * Строка.Количество);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Строка.Сумма 				 = Строка.Сумма + (0.01 * Строка.Количество) ;
		КонецЕсли;
	КонецЦикла;
	//конецВик
КонецПроцедуры

//Вик 2021_08_13  для интернет заказов
&НаКлиенте
Процедура ОбработатьИнтернетЗаказы_Клиент()
	Попытка
		ОбработатьИнтернетЗаказы();
	Исключение
	КонецПопытки;
	
	флНужноВключитьИндикацию					= ПроверкаНеобходимостиИндикации();
	флНужноВключитьИндикациюОтмененныхЗаказов	= ПроверкаНеобходимостиИндикацииОтменыЗаказов();
	флНужноВключитьИндикациюЗаявок				= ПроверкаНеобходимостиИндикацииЗаявок();

	ОбработкаИндикации(флНужноВключитьИндикацию, флНужноВключитьИндикациюОтмененныхЗаказов, флНужноВключитьИндикациюЗаявок);   
КонецПроцедуры

&НаСервере
Процедура ОбработатьИнтернетЗаказы()	
	Если АдресВХ = "" тогда Возврат КонецЕсли;
	
	Массив = ПолучитьИзВременногоХранилища(АдресВХ);
	КаталогНаСервере	=	Массив[0];
	Соединение			=	Массив[1];
	
	Попытка
    	Файлы	=	Соединение.НайтиФайлы(КаталогНаСервере+"/ZAKAZ","*.json");
	Исключение
		Возврат;
	КонецПопытки;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Для каждого Файл Из Файлы цикл
		ВремФайл = ПолучитьИмяВременногоФайла("json");
    	Соединение.Получить(Файл.Полноеимя,ВремФайл);
		
		ЧтениеJSON.ОткрытьФайл(ВремФайл);
		Мас	=	 ПрочитатьJSON(ЧтениеJSON, Ложь);//Массив
		Если Мас.количество() = 1 тогда
			СтруктураЗаказа	= Мас[0];
			//далее создаем заказ или ищем его
			ОбработатьЗаказ(СтруктураЗаказа);					
		КонецЕсли;
		
		ЧтениеJSON.Закрыть();
		
        УдалитьФайлы(ВремФайл);  				
	КонецЦикла;  
	
	ОбработатьОтменыЗаказов(Соединение,КаталогНаСервере);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьЗаказ(СтруктураЗаказа); 	 					
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	ЗаказПокупателя.НомерЗаказаНаСайте = &НомерЗаказаНаСайте");
	Запрос.УстановитьПараметр("НомерЗаказаНаСайте",СокрЛП(СтруктураЗаказа.СайтНомер));
	рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() = 0 тогда  		
		СоздатьНовыйИнтернетЗаказ(СтруктураЗаказа);  			
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьНовыйИнтернетЗаказ(СтруктураЗаказа);
	НовыйДок	=	Документы.ЗаказПокупателя.СоздатьДокумент();
	НовыйДок.НомерЗаказаНаСайте	=	СокрЛП(СтруктураЗаказа.СайтНомер);
	

	НовыйДок.Дата			=	Дата(СтруктураЗаказа.Дата);
	НовыйДок.Номер			=	СтруктураЗаказа.НомерЗаказаУТ;
	НовыйДок.Комментарий	=	"Оплачен: "    		+ СтруктураЗаказа.Оплачен + Символы.ПС +
								"Тип оплаты: " 		+ СтруктураЗаказа.СайтТипОплаты + Символы.ПС +
								"Доп. информация: " + СтруктураЗаказа.СайтДопИнфо;
	
	НовыйДок.Статус			=	Перечисления.СтатусыЗаказовПокупателей.НеСогласован;
	НовыйДок.ИнтернетЗаказ	=	Истина;
	
	Если ЗначениеЗаполнено(СтруктураЗаказа.ДатаОтгрузки) тогда
		НовыйДок.ЖелаемаяДатаПродажи	=	Дата(СтруктураЗаказа.ДатаОтгрузки);
	КонецЕсли;
	
	//товары
	Для Ном =1 по 100 цикл
		Если СтруктураЗаказа.Свойство("Количество"+Строка(Ном)) тогда
			НоваяСтрока	=	НовыйДок.Товары.Добавить();
			
			НужХар		=	"";
			НужйШК		=	"";
			НужКол		=	"";
			НужЦена		=	"";
			НужСумма	=	"";
			НужПроц	=	"";
			
			СтруктураЗаказа.Свойство("Количество"			+	Строка(Ном),	НужКол);
			СтруктураЗаказа.Свойство("Характеристика"		+	Строка(Ном),	НужХар);
			СтруктураЗаказа.Свойство("Штрихкод"				+	Строка(Ном),	НужйШК);
			СтруктураЗаказа.Свойство("Цена"					+	Строка(Ном),	НужЦена);
			СтруктураЗаказа.Свойство("Сумма"				+	Строка(Ном),	НужСумма);
			СтруктураЗаказа.Свойство("ПроцентСкидкиНаценки"	+	Строка(Ном),	НужПроц);
			
			НужЦена		=	СтрЗаменить(НужЦена,Символы.НПП,"");
			НужСумма	=	СтрЗаменить(НужСумма,Символы.НПП,"");
			НужКол		=	СтрЗаменить(НужКол,Символы.НПП,"");

			
			Запрос	=	новый запрос("ВЫБРАТЬ
			      	 	             |	Штрихкоды.Владелец КАК Владелец,
			      	 	             |	Штрихкоды.Упаковка КАК Упаковка
			      	 	             |ИЗ
			      	 	             |	РегистрСведений.Штрихкоды КАК Штрихкоды
			      	 	             |ГДЕ
			      	 	             |	Штрихкоды.Штрихкод = &Штрихкод");
			
			Запрос.УстановитьПараметр("Штрихкод",НужйШК);
			
			Рез	=	Запрос.Выполнить().Выгрузить();
			
			Если Рез.Количество() >0 тогда
				НоваяСтрока.Номенклатура		=	Рез[0].Владелец;	
				Если ЗначениеЗаполнено(НужХар) тогда
					Запрос	=	Новый запрос("ВЫБРАТЬ
					      	 	             |	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
					      	 	             |ИЗ
					      	 	             |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
					      	 	             |ГДЕ
					      	 	             |	ХарактеристикиНоменклатуры.Наименование = &Наименование
					      	 	             |	И ХарактеристикиНоменклатуры.Владелец = &Владелец");
					Запрос.УстановитьПараметр("Владелец",НоваяСтрока.Номенклатура);
					Запрос.УстановитьПараметр("Наименование",НужХар);
					Рез = Запрос.Выполнить().Выгрузить();
					
					Если Рез.Количество() >0 тогда
						НоваяСтрока.Характеристика		=	Рез[0].Ссылка;
					КонецЕсли;
				КонецЕсли;

				
				
				НоваяСтрока.Количество			=	Число(СтрЗаменить(НужКол,",","."));
				НоваяСтрока.КоличествоУпаковок	=	НоваяСтрока.Количество;
				НоваяСтрока.Цена				=	Число(СтрЗаменить(НужЦена,",","."));
				НоваяСтрока.Сумма				=	Число(СтрЗаменить(НужСумма,",","."));
				НоваяСтрока.ПроцентРучнойСкидки	=	Число(СтрЗаменить(НужПроц,",",".")); 
			КонецЕсли; 		
			
		иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		НовыйДок.Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	//Доп
	Если СтруктураЗаказа.Оплачен = "Да" тогда
		Рег	=	РегистрыСведений.СостояниеОплатыЗаказаПокупателя.СоздатьМенеджерЗаписи();
		Рег.ЗаказПокупателя	=	НовыйДок.Ссылка;
		Рег.Состояние		=	Перечисления.СостоянияОплатыЗаказаПокупателя.ОплаченПолностью;
		Рег.Период			=	НовыйДок.Дата;
		Рег.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ОбработатьОтменыЗаказов(Соединение,КаталогНаСервере)
	//Обрабатываем заказы за последние две недели
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте,
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	ЗаказПокупателя.Дата >= &Дата
	      	 	             |	И НЕ ЗаказПокупателя.ПометкаУдаления");
	Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()) - 14*24*60*60);
	
	рез = Запрос.Выполнить().Выгрузить();
	Для каждого Строка из Рез цикл
		Файлы	=	Соединение.НайтиФайлы(КаталогНаСервере+"/ZAKAZ",СокрЛП(Строка.НомерЗаказаНаСайте) + ".json");
		Если Файлы.количество() = 0 тогда
			Об = Строка.Ссылка.ПолучитьОбъект();
			Об.Номер	=	"";
			Об.Комментарий	= Об.Комментарий + " ОТМЕНЕН В ОФИСЕ";	
			Об.Записать();
			//Об.УстановитьПометкуУдаления(истина);
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПроверкаНеобходимостиИндикации()
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	НЕ ЗаказПокупателя.ПометкаУдаления
	      	 	             |	И ЗаказПокупателя.Статус = &Статус");
	Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыЗаказовПокупателей.НеСогласован);
	
	Возврат не запрос.Выполнить().Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция  ПроверкаНеобходимостиИндикацииОтменыЗаказов()
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	НЕ ЗаказПокупателя.ПометкаУдаления
	      	 	             |	И ЗаказПокупателя.Комментарий ПОДОБНО &Комментарий");
	Запрос.УстановитьПараметр("Комментарий","%ОТМЕНЕН В ОФИСЕ%");
	
	Возврат не запрос.Выполнить().Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция  ПроверкаНеобходимостиИндикацииЗаявок()
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ЗаявкаОтМагазина.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ТБК_ЗаявкаОтМагазина КАК ТБК_ЗаявкаОтМагазина
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ЗаявкаОтМагазина.ПометкаУдаления
	      	 	             |	И ТБК_ЗаявкаОтМагазина.ПризнакОбновление = 0");
	Возврат не запрос.Выполнить().Пустой();
КонецФункции

&НаКлиенте
Процедура ОбработкаИндикации(флНужноВключитьИндикацию, флНужноВключитьИндикациюОтмененныхЗаказов, флНужноВключитьИндикациюЗаявок = Ложь)
	Если флНужноВключитьИндикацию тогда
		Элементы.ЗаказыПокупателей.ЦветТекста = WebЦвета.Красный;
	иначе
		Элементы.ЗаказыПокупателей.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;
	
	Если флНужноВключитьИндикациюОтмененныхЗаказов тогда
		Элементы.ЗаказыДляОтмены.ЦветТекста = WebЦвета.Красный;
	иначе
		Элементы.ЗаказыДляОтмены.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;   
	
	
	Если флНужноВключитьИндикациюЗаявок тогда
		Элементы.ЗаявкиМагазина.ЦветТекста = WebЦвета.Красный;
	иначе
		Элементы.ЗаявкиМагазина.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТБКЗаказыПокупателейПосле(Команда)
	//ЗначениеОтбора  = Новый Структура("Номер", "333");
	//Параметрыотбора = Новый Структура("Отбор", ЗначениеОтбора);
	

	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеОткрытияЗаказов",ЭтотОбъект); 
	Форма	=	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаСписка",,,,,,Оповещение); 
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПометкаУдаления"); 
	ОтборВладелец.ПравоеЗначение 	= Ложь;   
	
	СЗ	=	ПолучитьСЗ_Статусов();
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Статус"); 
	ОтборВладелец.ПравоеЗначение 	= СЗ; 
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеСодержит; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Комментарий"); 
	ОтборВладелец.ПравоеЗначение 	= "ОТМЕНЕН В ОФИСЕ";
КонецПроцедуры

&НаКлиенте
Процедура ТБКЗаявкиМагазинаПосле(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеОткрытияЗаказов",ЭтотОбъект); 
	Форма	=	ОткрытьФорму("Документ.ТБК_ЗаявкаОтМагазина.ФормаСписка",,,,,,Оповещение); 
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьПослеОткрытияЗаказов(РезультатОткрытияФормы, стр) экспорт
	флНужноВключитьИндикацию					= ПроверкаНеобходимостиИндикации();
	флНужноВключитьИндикациюОтмененныхЗаказов	= ПроверкаНеобходимостиИндикацииОтменыЗаказов();
	флНужноВключитьИндикациюЗаявок				= ПроверкаНеобходимостиИндикацииЗаявок();

	ОбработкаИндикации(флНужноВключитьИндикацию, флНужноВключитьИндикациюОтмененныхЗаказов, флНужноВключитьИндикациюЗаявок);   
КонецПроцедуры


&НаКлиенте
Процедура ТБКЗаказыДляОтменыПосле(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеОткрытияЗаказов",ЭтотОбъект); 
	Форма	=	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаСписка",,,,,,Оповещение); 
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПометкаУдаления"); 
	ОтборВладелец.ПравоеЗначение 	= Ложь;   
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Содержит; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Комментарий"); 
	ОтборВладелец.ПравоеЗначение 	= "ОТМЕНЕН В ОФИСЕ";  
КонецПроцедуры


&НаСервере
Процедура ТБКПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	Попытка
		СтруктураПодключения	=	ОбщегоНазначения.ПолучитьСтруктуруПодключенияFTP();
	Исключение
		Сообщить("Нет данных для подключения по фтп!!");
		Возврат;
	КонецПопытки;
	
	Если СтруктураПодключения = Неопределено тогда
		Сообщить("Нет данных для подключения по фтп!");
	иначе
		Попытка
			КаталогНаСервере		=	СтруктураПодключения.КаталогНаСервере;  	
			Соединение = Новый FTPСоединение(СтруктураПодключения.ИмяFTPСервера, СтруктураПодключения.Порт,
										СтруктураПодключения.Пользователь, СтруктураПодключения.Пароль, , Истина,10);
										
			Если Соединение <> Неопределено тогда							
				Массив	=	новый Массив;
				Массив.Добавить(КаталогНаСервере);
				Массив.Добавить(Соединение);
			
				АдресВХ	=	ПоместитьВоВременноеХранилище(Массив,ЭтаФорма.УникальныйИдентификатор);
			КонецЕсли;
		Исключение
			Соединение = Неопределено;
		КонецПопытки;
	КонецЕсли;	
	
	ДоступнаНефискальнаяПечать = Ложь;
	КонстантаДоступнаНефискальнаяПечать	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ДоступнаНефискальнаяПечать");
	Если КонстантаДоступнаНефискальнаяПечать <> Неопределено тогда
		ДоступнаНефискальнаяПечать =   КонстантаДоступнаНефискальнаяПечать;
	КонецЕсли;
	
	ДоступнаПроверкаОрганизаций = Ложь;
	КонстантаДоступнаПроверкаОрганизаций	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ДоступнаПроверкаОрганизаций");
	Если КонстантаДоступнаПроверкаОрганизаций <> Неопределено тогда
		ДоступнаПроверкаОрганизаций =   КонстантаДоступнаПроверкаОрганизаций;
	КонецЕсли;


КонецПроцедуры


&НаСервереБезКонтекста
Процедура ТБКПриЗакрытииПослеНаСервере()
	Соединение = Неопределено
КонецПроцедуры


&НаКлиенте
Процедура ТБКПриЗакрытииПосле(ЗавершениеРаботы)
	ТБКПриЗакрытииПослеНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСЗ_Статусов()
	СЗ	=	Новый СписокЗначений;
	СЗ.Добавить(Перечисления.СтатусыЗаказовПокупателей.НеСогласован);
	СЗ.Добавить(Перечисления.СтатусыЗаказовПокупателей.Согласован);  
	
	Возврат СЗ;
КонецФункции

&НаСервереБезКонтекста
Функция ПроверкаНаПометку(Номенклатура)
	Возврат ПолучитьЗначениеРеквизита(Номенклатура,"ПометкаУдаления");
	//Возврат Номенклатура.ПометкаУдаления;
КонецФункции

&НаКлиенте
Процедура ТБКВнешнееСобытиеВместо(Источник, Событие, Данные)
	Если ВводДоступен() Тогда
		
		// &ЗамерПроизводительности
		Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь,
			"Обработка.РМКУправляемыйРежим.Форма.Форма.ВнешнееСобытие");
		
		Если Объект.Товары.Количество() = 0 Тогда
			Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		
		Если (Событие = "Штрихкод" Или Событие = "ПолученШтрихкод") Тогда
			//Вик 2021_09_10
			Если Найти(Данные,"Akciya") тогда
				ОбработатьКодАкции(Данные);
				Возврат;
			КонецЕсли;				
			//КонецВик			
			
			//Вик 2021_11_17
			Если Найти(Данные,"tbkskidka") тогда
				ОбработатьУценку(Данные);
				Возврат;
			КонецЕсли;				
			//КонецВик
			
			//Вик 2021_12_17
			Если Найти(Данные,"tbk_iqos_001") тогда //Скидка на iqos.Продаем за 1 коп. Это замена неработающих устройсв за счет поставщика 
				ОбработатьЗаменуАйкос(Данные);
				Возврат;
			КонецЕсли;				
			//КонецВик
			
			//Вик 2021_12_28
			Если Найти(Данные,"www.gosuslugi.ru") тогда  
				ЗапуститьПриложение(Данные);
				Возврат;
			КонецЕсли;				
			//КонецВик


			//Вик 2021_12_07       
			Данные	=	СтрЗаменить(Данные,Символ(29),"");
			
			Если ПроверитьЧтоЭтоВода(Данные) и СтрДлина(данные) < 37 и ТекущаяДата()>'20230627' тогда     				
				ЗаголовокИнформации =	НСтр("ru = 'Ошибка!'");
				ТекстСообщения 		=	"Для продажи воды БонаАква отсканируйте QR-код";
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);	
				Возврат
			КонецЕсли;
			
			
			Если СтрДлина(Данные) > 29 и ИспользоватьПробитиеБлока тогда //этоБлок
			//Если ШтрихкодированиеМОТПКлиентСервер.ЭтоКодУпаковки(Данные) тогда
				Попытка
					флВсеХорошо	=	Истина;
					ОбработатьБлок(Данные,флВсеХорошо);
					Если флВсеХорошо тогда
						Возврат;
					КонецЕсли;
				Исключение
					ЗаголовокИнформации =	НСтр("ru = 'Ошибка!'");
					ТекстСообщения 		=	ОписаниеОшибки();
					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
	                Возврат; 
				КонецПопытки;
			КонецЕсли;				
			//КонецВик
			

			
			ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(
				ЭтотОбъект, 
				Источник, 
				Событие, 
				Данные);
				
			Если ДанныеСоСканераСтруктура = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
			
		Иначе
			ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
		КонецЕсли;
		
		ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЧтоЭтоВода(ШК_ЕАН);
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	Штрихкоды.Владелец КАК Владелец
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.Штрихкоды КАК Штрихкоды
	      	 	             |ГДЕ
	      	 	             |	Штрихкоды.Штрихкод = &Штрихкод
	      	 	             |	И Штрихкоды.Владелец.Наименование ПОДОБНО &Вода");
	Запрос.УстановитьПараметр("Штрихкод", ШК_ЕАН);
	Запрос.УстановитьПараметр("Вода", "%вода1%");  
	Возврат  Не Запрос.Выполнить().Пустой();					
КонецФункции


&НаКлиенте
Процедура ОбработатьБлок(Данные, флВсеХорошо)	
	марки = Новый Массив();
	марки.Добавить(Данные);   
	Попытка
		сведенияМарок	=	ПолучитьСведенияМарок_Сервер(марки);
	Исключение
		флВсеХорошо	=	Ложь;
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(сведенияМарок) = Тип("Массив") Тогда
		Если сведенияМарок.Количество() = 1 Тогда
			сведения = сведенияМарок[0]; 
			Если сведения.cisInfo.Свойство("maxRetailPrice") тогда //на табаки нет МРЦ
				Попытка
					ДочерниеМарки_Массив	=	сведения.cisInfo.child; 
					МРЦБлока				=	Число(сведения.cisInfo.maxRetailPrice/10);//в копейках      
					МРЦБлокаКодированнная	=	ШтрихкодированиеИСКлиентСервер.ЗакодироватьМРЦ(МРЦБлока);	
				Исключение  
					флВсеХорошо = ложь;
					//ЗаголовокИнформации = НСтр("ru = 'Не удалось получить данные марок в блоке'");
					//ТекстСообщения = НСтр("ru = 'Не удалось получить данные марок в блоке! возможно сервис не доступен '");
					//ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
	                Возврат;
				КонецПопытки;
			иначе
				Попытка
					ДочерниеМарки_Массив	=	сведения.cisInfo.child;
					МРЦБлокаКодированнная 	= "";
				Исключение
					флВсеХорошо = ложь;
					//ЗаголовокИнформации = НСтр("ru = 'Не удалось получить данные марок в блоке'");
					//ТекстСообщения = НСтр("ru = 'Не удалось получить данные марок в блоке! возможно сервис не доступен '");
					//ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
	                Возврат;  	
				КонецПопытки;				
			КонецЕсли;
			
			Для каждого ДочерняяМарка из ДочерниеМарки_Массив цикл 
				ДанныеШтрихкода = Новый Структура;
				ДанныеШтрихкода.Вставить("Количество", 1);
				ДанныеШтрихкода.Вставить("Штрихкод"  ,	ДочерняяМарка + МРЦБлокаКодированнная);				
				ОбработатьКодМаркировки(ДанныеШтрихкода);
			КонецЦикла;   
		КонецЕсли;
	КонецЕсли; 	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция  ПолучитьСведенияМарок_Сервер(марки)  
	Возврат Обработки.ТБК_Маркировка.ПолучитьСведенияМарок(марки);	
КонецФункции

&НаКлиенте
Процедура ОбработатьКодАкции(Данные)
	Если ПокупкаСотрудника тогда Возврат КонецЕсли;

	Если Найти(Данные,"GLO") тогда
		флЭтоАкцияГЛО	=	Истина;
	иначе
		флЭтоАкцияГЛО	=	Ложь;
	КонецЕсли;
	
	Для каждого Строка из Объект.Товары цикл
		Если флЭтоАкцияГЛО тогда 
			флЭтоГло = ЭтоГЛО(Строка.Номенклатура);
			Если флЭтоГло тогда
				//Если Строка.количество <> 1 тогда
				//	ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Количество акционного товара должно быть 1","Количество акционного товара должно быть 1. Остальные акционные товары пробивайте отдельным чеком");
				//	Возврат;
				//КонецЕсли;
				
				Если Строка.СуммаРучнойСкидки > 0 тогда
					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка уже проставлена","Скидка уже проставлена!");
					Возврат;
				КонецЕсли;
				
				ДанныеПоКоду = ПолучитьДанныеПоКоду(Данные);
				
				Если ДанныеПоКоду = Неопределено тогда
					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Не удалось получить данные по коду!","Не удалось получить данные по коду! Возможно отсутствует соединение с сервером");
					Возврат;
				КонецЕсли;
				
				Если не ДанныеПоКоду.Валиден тогда
					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Код уже погашен","Этот код уже был использован! Повторное использование кода не допускается.");
					Возврат;
				КонецЕсли;
				
				КодНом						=	ПолучитьКодНоменклатуры(Строка.Номенклатура);
				КодАкции					=	Данные + КодНом;
				Строка.СуммаРучнойСкидки	=	ДанныеПоКоду.Скидка;
				Строка.Сумма				=	Строка.Сумма - Строка.СуммаРучнойСкидки;			
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);		
				ОбновитьФорму();
				
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУценку(Данные)
	Если ПокупкаСотрудника тогда Возврат КонецЕсли;
	ТекСтрока	=	Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока = Неопределено тогда Возврат КонецЕсли;
	
	Если ТекСтрока.Количество <>1 тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","Количество должно равняться 1");
		Возврат;
	КонецЕсли;
	
	//В чеке должна быть 1 позиция
	Если Объект.Товары.Итог("Количество") <>1 тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","В чеке должна быть только 1 штука");
		Возврат;
	КонецЕсли; 	
	
	ПК			=	ПолучитьПолныйКод(ТекСтрока.Номенклатура);	
	
	Поз1	=	СтрНайти(Данные,"/",,,1);
	Поз2	=	СтрНайти(Данные,"/",,,2);
	Поз3	=	СтрНайти(Данные,"/",,,3);
	
	НужныйКод	=	Сред(Данные,Поз3+1,11);
	НужныйКод	=	СтрЗаменить(НужныйКод,"u","Ю");
	НужныйКод	=	СтрЗаменить(НужныйКод,"mp","МП");
	
	Если не Найти(Строка(ТекСтрока.Номенклатура)," БК") тогда
		Если не Найти(ПК,НужныйКод) тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","QR не принадлежит этой номенклатуре. Возможно необходимо встать на соответствующую позицию товаров");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекСтрока.СуммаРучнойСкидки >0 тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","Скидка уже проставлена");
		Возврат;
	КонецЕсли;
	
	ПроцентСкидки	=	Сред(Данные,Поз1+1,Поз2-Поз1-1);
	Если найти(ПроцентСкидки,"r") тогда
		СуммаСкидки	=	Число(СтрЗаменить(ПроцентСкидки,"r",""));		
	иначе
		СуммаСкидки	=	окр((ТекСтрока.Цена/100) * ПроцентСкидки,2);
	КонецЕсли;
	
	ТекСтрока.КодУценки 		=	Данные;
	ТекСтрока.СуммаРучнойСкидки	=	СуммаСкидки;
	ТекСтрока.Сумма				=	ТекСтрока.Сумма - ТекСтрока.СуммаРучнойСкидки;			
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);		
	ОбновитьФорму(); 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗаменуАйкос(Данные)
	ТекСтрока	=	Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока = Неопределено тогда Возврат КонецЕсли;
		
	//В чеке должна быть 1 позиция
	Если Объект.Товары.Итог("Количество") <>1 тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","В чеке должна быть только 1 штука");
		Возврат;
	КонецЕсли;
	
	Если не ЭтоАйкос(ТекСтрока.Номенклатура) тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","На этот товар скидка по замене Айкос - невозможна");
		Возврат;	
	КонецЕсли;
	
	ТекСтрока.КодУценки = Данные;
	
	СуммаСкидки	=	ТекСтрока.Сумма - 0.01;
	
	ТекСтрока.СуммаРучнойСкидки	=	СуммаСкидки;
	ТекСтрока.Сумма				=	ТекСтрока.Сумма - ТекСтрока.СуммаРучнойСкидки;			
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);		
	ОбновитьФорму();	
КонецПроцедуры


&НаСервере
Функция ПолучитьПолныйКод(Номенклатура)
	Возврат Номенклатура.ПолныйКод();
КонецФункции  

&НаСервереБезКонтекста
Функция ЭтоГЛО(Номенклатура)
	Возврат Найти(Номенклатура.ПолныйКод(),"Ю2-00007720") или Найти(Номенклатура.ПолныйКод(),"Ю2-00007721");
КонецФункции

&НаСервере
Функция ЭтоАйкос(Номенклатура)
	Возврат Найти(Номенклатура.ПолныйКод(),"Ю2-00014185") или Найти(Номенклатура.ПолныйКод(),"00048208784");
КонецФункции


&НаСервере
Функция ПолучитьКодНоменклатуры(Номенклатура)
	Возврат Номенклатура.код;
КонецФункции


&НаСервере
Функция ПолучитьДанныеПоКоду(Данные)
	Если АдресВХ = "" тогда Возврат Неопределено КонецЕсли;
	
	Массив = ПолучитьИзВременногоХранилища(АдресВХ);
	КаталогНаСервере	=	Массив[0];
	Соединение			=	Массив[1];
	
	Попытка
		НужныйПуть	=	Лев(КаталогНаСервере,10) + СтрЗаменить(Лев(Данные,15),"_","/");
    	Файлы		=	Соединение.НайтиФайлы(НужныйПуть,"*");
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если Файлы.Количество() = 0 тогда
		 Возврат Неопределено;
	КонецЕсли;
	 
	Для каждого Файл из Файлы цикл 
		
		Если Файл.ИмяБезРасширения = "KODS" тогда
	
			ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
		    Соединение.Получить(Файл.ПолноеИмя,ПутьКФайлу);
			
			ТабДок = Новый ТабличныйДокумент;
			Попытка
				ТабДок.Прочитать(ПутьКФайлу);
			Исключение
				Возврат Неопределено;
			КонецПопытки;

			ТаблицаДанных	= ОбщегоНазначения.ПолучитьТЗИзМакета(ТабДок);
			
			НужнаяСтрока	=	ТаблицаДанных.Найти(Данные);
			
			Если НужнаяСтрока = Неопределено тогда
				Возврат Неопределено;
			КонецЕсли;
			
			СтруктураВозврата	=	Новый Структура;
			СтруктураВозврата.Вставить("Скидка",Число(НужнаяСтрока.Скидка));
			
			Если НужнаяСтрока.Флаг = "1" тогда
				СтруктураВозврата.Вставить("Валиден",ложь);
			иначе
				СтруктураВозврата.Вставить("Валиден",истина);
			КонецЕсли;
			
			УдалитьФайлы(ПутьКФайлу);
		ИначеЕсли Файл.ИмяБезРасширения = Данные тогда //погашенные коды - это текстовые файлы где  имя файла = сам код
			СтруктураВозврата	=	Новый Структура;
			СтруктураВозврата.Вставить("Валиден",ложь);
			Возврат СтруктураВозврата;
		КонецЕсли; 		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
КонецФункции 

&НаСервере
Процедура ПогастьКод(Данные)
	Рег = РегистрыСведений.КомментарииСтатистики.СоздатьМенеджерЗаписи();//нужно было куда-то еще записать, а создавать новый рег.св. - это монополия которую хотелось избежать
	Рег.ХешНаименования	=	Строка(ТекущаяДата());
	Рег.Наименование	=	Данные;
	Рег.Записать();
	
	КодНом	=	Сред(Данные, СтрДлина(Данные)-10);
	Данные	=	Сред(Данные,1, СтрДлина(Данные)-11);
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("txt");
	
	Док = Новый ТекстовыйДокумент();
	Док.ДобавитьСтроку(Строка(ТекущаяКассаККМ));
	Док.ДобавитьСтроку(КодНом);
	Док.Записать(ПутьКФайлу, "windows-1251");  
	
	Если АдресВХ = "" тогда 
		Рег.ХешНаименования	=	Рег.ХешНаименования + "_ошибка";
		Рег.Записать();
		Возврат; 
	КонецЕсли;
	
	Массив = ПолучитьИзВременногоХранилища(АдресВХ);
	КаталогНаСервере	=	Массив[0];
	Соединение			=	Массив[1];
	
	НужныйПуть	=	Лев(КаталогНаСервере,10) + СтрЗаменить(Лев(Данные,15),"_","/");
	
	Попытка
		Соединение.Записать(ПутьКФайлу, НужныйПуть + Данные+".txt");
	Исключение
		Рег.ХешНаименования	=	Рег.ХешНаименования + "_ошибка";
		Рег.Записать();
		Возврат; 
	КонецПопытки;

	УдалитьФайлы(ПутьКФайлу);

	
	//Можно так но долго.. 10000 - 30 сек при записи
	//Если АдресВХ = "" тогда Возврат КонецЕсли;
	//
	//Массив = ПолучитьИзВременногоХранилища(АдресВХ);
	//КаталогНаСервере	=	Массив[0];
	//Соединение			=	Массив[1];
	//
	//Попытка
	//	НужныйПуть	=	Лев(КаталогНаСервере,10) + СтрЗаменить(Лев(Данные,15),"_","/");
	//	Файлы		=	Соединение.НайтиФайлы(НужныйПуть,"*.xlsx");
	//Исключение
	//	Возврат;
	//КонецПопытки;
	//
	//Если Файлы.Количество() = 0 тогда
	//	 Возврат;
	//КонецЕсли;
	//
	//ПутьКФайлу	=	Файлы[0].ПолноеИмя;
	//
	//ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
	//Соединение.Получить(Файлы[0].ПолноеИмя,ПутьКФайлу);
	//
	//ТабДок = Новый ТабличныйДокумент;
	//Попытка
	//	ТабДок.Прочитать(ПутьКФайлу);
	//Исключение
	//	Возврат;
	//КонецПопытки;

	//ТаблицаДанных	= ОбщегоНазначения.ПолучитьТЗИзМакета(ТабДок);
	//
	//НужнаяСтрока	=	ТаблицаДанных.Найти(Данные);
	//
	//Если НужнаяСтрока = Неопределено тогда
	//	Возврат;
	//КонецЕсли;
	//
	//НужнаяСтрока.Флаг	=	"1";
	//
	//Постр							=	новый ПостроительОтчета;
	//Постр.ВыводитьЗаголовокОтчета	= 	Ложь;	
	//Постр.ИсточникДанных			=	новый ОписаниеИсточникаДанных(ТаблицаДанных);
	//ТабДок							=	новый ТабличныйДокумент;	
	//Постр.Вывести(ТабДок); 
	//Область = ТабДок.Область(1,1,10000,1);
	//ТабДок.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоГоризонтали);	
	//
	//ТабДок.Записать(ПутьКФайлу,ТипФайлаТабличногоДокумента.XLSX);
	//
	//Соединение.Записать(ПутьКФайлу, НужныйПуть+"KODS.xlsx");

	//УдалитьФайлы(ПутьКФайлу);
КонецПроцедуры 

&НаКлиенте
&Вместо("ОповещениеОткрытьФормуОплатыНаличными")
Процедура ТБКОповещениеОткрытьФормуОплатыНаличными(РезультатОткрытияФормы, ДополнительныеПараметры)
	//// Вставить содержимое метода.
	//ПродолжитьВызов(РезультатОткрытияФормы, ДополнительныеПараметры);
	
	ЛогированиеБезДополнительныхДанных("ОплатаНаличными");
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		ОбработатьОтказОтОплаты();
		Возврат;
	//Вик	
	ИначеЕсли ДоступнаНефискальнаяПечать тогда
	    ДобавитьТаблицуОплат(РезультатОткрытияФормы);

		Если НужноПечататьНеФискально(РезультатОткрытияФормы) тогда
			СоздатьНефискальныйЧек();
		Иначе
			ЗавершитьОплатуТоваров(ДополнительныеПараметры.Печать);
		КонецЕсли;
	//КонецВик	
	Иначе
		ДобавитьТаблицуОплат(РезультатОткрытияФормы);
		ЗавершитьОплатуТоваров(ДополнительныеПараметры.Печать);
	КонецЕсли;

КонецПроцедуры

Функция НужноПечататьНеФискально(РезультатОткрытияФормы) 
	//наличные
	АдресТаблицы  	= РезультатОткрытияФормы.АдресТаблицыОплата;
	ТЗ 				= ПолучитьИзВременногоХранилища(АдресТаблицы);
	Для каждого Строка из ТЗ цикл
		Если Строка(Строка.ВидОплаты) <> "Наличные" тогда
			Возврат ложь;
		КонецЕсли;
	КонецЦикла;   
	
	//без марок
	Для каждого Строка из Объект.Товары цикл
		Если ОбщегоНазначения.ЭтоМаркированнаяНоменклатура(Строка.Номенклатура) тогда 
			Возврат ложь;
		КонецЕсли;
	КонецЦикла;
	
	//По времени
	ДеньТД				=	ДеньНедели(ТекущаяДата());
	ЧасТД				=	Час(ТекущаяДата());
	
	ЧасНачалаПоУмолчанию	=	19;
	ЧасНачалаКонстанта	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ЧасНачалаНефискальнаяПечать");
	Если ЧасНачалаКонстанта <> Неопределено тогда
		ЧасНачала	=	ЧасНачалаКонстанта;
	иначе
		ЧасНачала	=	ЧасНачалаПоУмолчанию;
	КонецЕсли;
	
	
	Если ДеньТД <> 6 и ДеньТД <> 7 тогда // на выходных - целый день
		Если ЧасТД < ЧасНачала тогда
			Возврат ложь;
		КонецЕсли;
	КонецЕсли;   
		
	Возврат истина;     
КонецФункции

&НаКлиенте
Процедура СоздатьНефискальныйЧек()
	НовыйЧекККМ	=	СоздатьЧекККМ();
	Если НовыйЧекККМ = Неопределено тогда 
		Возврат;
	КонецЕсли;

	
	Сдача 			= Макс(Объект.Оплата.Итог("Сумма") - Объект.Товары.Итог("СуммаВсего"),0); 	
	ВыведенаСдача = Истина;
	ОставлятьФлагТаблоСдачи = Истина;
	Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаСдача;
	НадписьСуммаСдачи = Формат(Сдача, "ЧЦ=15; ЧДЦ=2; ЧН=0.00");
	
	Если СокрЛП(Строка(Объект.Организация)) = "ИП Пинкасович Д.В." тогда
		СНО	=	"Общая";	
	иначе
		СНО	=	"УСН доход-расход";
	КонецЕсли;
	
	
	Если не  ЗначениеЗаполнено(Объект.Ответственный) тогда
		НужныйКассир	=	Строка(ПолучитьТекущегоПродавца());
	иначе
		НужныйКассир	=	Строка(Объект.Ответственный);
	КонецЕсли;
	ТБКНеФискальнаяПечать.НапечататьЧек(Объект.Товары, Сдача, СНО , Объект.Магазин, НужныйКассир);
		
	Объект.Товары.Очистить();
	Объект.Оплата.Очистить();
КонецПроцедуры

&НаСервере
Функция СоздатьЧекККМ()
	
	НовыйДокументЧек = Документы.ЧекККМ.СоздатьДокумент();
	НовыйДокументЧек.КассаККМ		=	ТекущаяКассаККМ;
	НовыйДокументЧек.Магазин		=	ТекущаяКассаККМ.Магазин;
	НовыйДокументЧек.Комментарий	=   "Чек н.ф.";
	
	НовыйДокументЧек.Дата	=	ТекущаяДата(); 
	НовыйДокументЧек.УстановитьНовыйНомер();
	
	НовыйДокументЧек.СтатусЧекаККМ			=	Перечисления.СтатусыЧековККМ.Аннулированный;
	НовыйДокументЧек.ВидОперации			=	Перечисления.ВидыОперацийЧекККМ.Продажа;
	
	НовыйДокументЧек.Товары.Очистить();
	НовыйДокументЧек.Оплата.Очистить();
	
	Для каждого СтрокаТовары из Объект.Товары цикл
		НоваяСтрока = НовыйДокументЧек.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовары);	
	КонецЦикла;
	
	НоваяСтрока = НовыйДокументЧек.Оплата.Добавить();
	НоваяСтрока.ВидОплаты				=	Справочники.ВидыОплатЧекаККМ.НайтиПоНаименованию("Наличные");
	НоваяСтрока.Сумма					=	Объект.Товары.Итог("СуммаВсего"); 
	
	Попытка
		Если НовыйДокументЧек.ПроверитьЗаполнение()  Тогда
			НовыйДокументЧек.мЗакрытиеСмены	=	Истина;
			НовыйДокументЧек.Записать(РежимЗаписиДокумента.Проведение); 
		иначе
			ТекстСообщения = "Ошибка при формировании чека н.ф.!";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;    
		КонецЕсли;
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено; 
	КонецПопытки; 
	
	Возврат НовыйДокументЧек.Ссылка;	
КонецФункции

&НаСервереБезКонтекста
Процедура ПогаситьКодУценкиНаСервере(КодУценки,НужныйЧек)
	Рег = РегистрыСведений.КомментарииСтатистики.СоздатьМенеджерЗаписи();
	Рег.Наименование	=	КодУценки;
	Рег.ХешНаименования	=	ТекущаяДата();
	
	
	Если ЗначениеЗаполнено(НужныйЧек) тогда
		Рег.Наименование	=	Рег.Наименование + "/"+НужныйЧек.Номер;
		
		Для каждого Строка из НужныйЧек.Товары цикл
			Рег.Наименование =   Рег.Наименование + "/"+Строка.Номенклатура.Код + "/" + Строка.СуммаРучнойСкидки;
		КонецЦикла;
	КонецЕсли;
	
	Рег.Записать();
КонецПроцедуры

&НаКлиенте
&Перед("СоздатьЧекиЗавершение")
Процедура ТБКСоздатьЧекиЗавершение1(Отказ, ПечатьПакетаДокументовВозврат, МассивСсылокЧеков, Печать)
	Если МассивСсылокЧеков.количество() = 1 тогда
		НужныйЧек	=	МассивСсылокЧеков[0];
	иначе
		НужныйЧек = Неопределено;
	КонецЕсли;
	
	Для каждого Строка из Объект.Товары цикл
		Если ЗначениеЗаполнено(Строка.КодУценки) тогда
			ПогаситьКодУценкиНаСервере(Строка.КодУценки,НужныйЧек);			
		КонецЕсли;
		
		//Вик 2022_03_09
		//Записываем данные о неверной организации в марке
		Если ЗначениеЗаполнено(Строка.ПроверкаМаркиИНН) Тогда
			ЗаписатьДанныеОНевернойОрганизации(Строка.ПроверкаМаркиИНН,НужныйЧек, СТрока.НомерСтроки);	
		КонецЕсли;		
		//КонецВик
	КонецЦикла;
	
	//Вик 2022_04_22
	Если ПокупкаСотрудника и НужныйЧек <> Неопределено тогда
		ПокупкаСотрудника	=	ложь;
		ЗаписатьДанныеОПокупкеСотрудника(НужныйЧек);
	КонецЕсли;
	ПроверитьВозвратНаПокупкуСотрудника(НужныйЧек);
	//       
КонецПроцедуры 

&НаСервере
Процедура ПроверитьВозвратНаПокупкуСотрудника(НужныйЧек);
	Если ЗначениеЗаполнено(НужныйЧек.ЧекККМПродажа) тогда
		Запрос	=	Новый Запрос("ВЫБРАТЬ
		      	 	             |	ТБК_ПокупкиСотрудников.Чек КАК Чек
		      	 	             |ИЗ
		      	 	             |	РегистрСведений.ТБК_ПокупкиСотрудников КАК ТБК_ПокупкиСотрудников
		      	 	             |ГДЕ
		      	 	             |	ТБК_ПокупкиСотрудников.Чек = &Чек");
		Запрос.УстановитьПараметр("Чек",НужныйЧек.ЧекККМПродажа);
		
		Если НЕ Запрос.Выполнить().Пустой() тогда
			ЗаписатьДанныеОПокупкеСотрудника(НужныйЧек);
		КонецЕсли;
	КонецЕсли;    	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеОПокупкеСотрудника(НужныйЧек)
	Рег 			= РегистрыСведений.ТБК_ПокупкиСотрудников.СоздатьМенеджерЗаписи();
	Если ЗначениеЗаполнено(НужныйЧек.Продавец) тогда
		Рег.Продавец	=	НужныйЧек.Продавец;
	ИначеЕсли ЗначениеЗаполнено(Объект.Продавец) тогда
		Рег.Продавец	=	Объект.Продавец;
	ИначеЕсли НужныйЧек.Товары.Количество() >0 тогда 
		Рег.Продавец	=	НужныйЧек.Товары[0].Продавец;	
	КонецЕсли;
	
	Рег.Чек			=	НужныйЧек;
	Рег.Записать();	
КонецПроцедуры

&НаКлиенте
&Вместо("ОповещениеОткрытьФормуВыбораЧекаПриВозврате")
Процедура ТБКОповещениеОткрытьФормуВыбораЧекаПриВозврате(РезультатОткрытияФормы, ДополнительныеПараметры)
	// &ЗамерПроизводительности  
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
	Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ВыборЧекаПриВозврате");	
	
	Если РезультатОткрытияФормы <> Неопределено Тогда
		
		ЧекККМПродажаОснование = РезультатОткрытияФормы.ЧекККМ;
		//Вик 2021-11-18
		Если ЗначениеЗаполнено(ЧекККМПродажаОснование) Тогда
			Если не ОбщегоНазначенияВызовСервера.ПроверитьЧекНаНаличиеСкидок(ЧекККМПродажаОснование) тогда
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Возврат чека не возможен","В выбранном чеке присутсвует уцененный товар!");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		//КонецВик
		
		ДополнительныеПараметры = Новый Структура;
		Если ЗначениеЗаполнено(ЧекККМПродажаОснование) Тогда
			ДополнительныеПараметры.Вставить("ЧекККМПродажаОснование", ЧекККМПродажаОснование);
		Иначе
			ДополнительныеПараметры.Вставить("ЧекККМПродажаОснование",
				ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка"));
		КонецЕсли;
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВыбораПричиныВозврата", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораПричиныВозврата",,
			УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);

КонецПроцедуры

&НаКлиенте
Процедура ТБКDebug_ВнешнееСобытиеПосле(Команда)
	ТБКВнешнееСобытиеВместо("","Штрихкод",Debug_Марка);
КонецПроцедуры

//Вик 2021-12-02
&НаКлиенте
&После("НазначитьАвтоматическиеСкидкиКлиент")
Процедура ТБКНазначитьАвтоматическиеСкидкиКлиент(ТолькоСообщенияПослеОформления, НеВыводитьСообщения, ПараметрыДляОплаты)
	Попытка
		флНадо	=	Ложь;
		ОбработатьСкидкиИзУТ(флНадо);
		//Если флНадо тогда
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			ОбновитьФорму(); 	
		//КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
КонецПроцедуры

&НаСервере
Процедура ОбработатьСкидкиИзУТ(флНадо, ФлПринудительныйПересчет = Ложь)
	Если ЗначениеЗаполнено(КодАкции) тогда Возврат КонецЕсли;
	Если ПокупкаСотрудника тогда Возврат КонецЕсли;
	Для каждого Строка из Объект.Товары цикл
		Если ЗначениеЗаполнено(Строка.КодУценки) тогда Возврат КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ЗаказПокупателя) тогда Возврат КонецЕсли;
	КонецЦикла;
	
	
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ХранилищеСертификатов.Наименование КАК Наименование
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ХранилищеСертификатов КАК ХранилищеСертификатов
	      	 	             |ГДЕ
	      	 	             |	ХранилищеСертификатов.ДатаНачала <= &ТекДат
	      	 	             |	И ХранилищеСертификатов.ДатаОкончания >= &ТекДат
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	Наименование");
	Запрос.УстановитьПараметр("ТекДат",НачалоДня(ТекущаяДата()));
	Рез = запрос.Выполнить().Выгрузить();
	
	//Если рез.Количество() >0 тогда
	//	Для каждого СтрокаТовары Из Объект.Товары цикл //Отчищаем скидки
	//		СтрокаТовары.СуммаРучнойСкидки		=	0;
	//		СтрокаТовары.ПроцентРучнойСкидки	=	0;
	//		СтрокаТовары.Сумма					=	СтрокаТовары.Цена * СтрокаТовары.Количество;
	//	КонецЦикла;
	//КонецЕсли;

	Для каждого Строка из рез цикл
		Позиция1 = СтрНайти(Строка.Наименование,"/",,,1);
		Позиция2 = СтрНайти(Строка.Наименование,"/",,,2);
		Позиция3 = СтрНайти(Строка.Наименование,"/",,,3);
		Позиция4 = СтрНайти(Строка.Наименование,"/",,,4);
		Позиция5 = СтрНайти(Строка.Наименование,"/",,,5);
		Позиция6 = СтрНайти(Строка.Наименование,"/",,,6);
		Позиция7 = СтрНайти(Строка.Наименование,"/",,,7);
		
		ТипАкции				=	Сред(Строка.Наименование,1,Позиция1-1);
		Скидка					=	Сред(Строка.Наименование,Позиция1+1,Позиция2-Позиция1-1);
		ТоварВПодарок			=	Сред(Строка.Наименование,Позиция2+1,Позиция3-Позиция2-1);
		СуммаЧека				=	Сред(Строка.Наименование,Позиция3+1,Позиция4-Позиция3-1);
		КоличествоНоменклатуры	=	Сред(Строка.Наименование,Позиция4+1,Позиция5-Позиция4-1);
		Номенклатура			=	Сред(Строка.Наименование,Позиция5+1,Позиция6-Позиция5-1);
		КоличествоШагов			=	Сред(Строка.Наименование,Позиция6+1,Позиция7-Позиция6-1);

		
		Если ТипАкции = "Скидка на самую дешёвую позицию" тогда
			ОбработатьСкидкуНаСамуюДешевуюПозициюВЧеке(Скидка,КоличествоНоменклатуры,Номенклатура, флНадо);
		КонецЕсли;	
		
		Если ТипАкции = "Процентная скидка на товар" тогда
			ОбработатьСкидкуПроцентнаяСкидкаНаТовар(Скидка,Номенклатура, флНадо, ФлПринудительныйПересчет);
		КонецЕсли;
		
		Если ТипАкции = "Скидка на товары с шагом в процентах" тогда
			ОбработатьСкидкуНаТоварСШагомВПроцентах(Скидка, Число(КоличествоШагов), Номенклатура, флНадо, ФлПринудительныйПересчет);
		КонецЕсли;

	КонецЦикла; 	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСкидкуНаСамуюДешевуюПозициюВЧеке(Скидка,КоличествоНоменклатуры,Номенклатура, флНадо)
	//Проверяем выполняется ли условие по номенклатуре	
	СзНоменклатура = Новый СписокЗначений;

	КопияНом =  Номенклатура;
	Пока Найти(КопияНом,"_") цикл
		КДобавлению = Сред(КопияНом,1,11);
		СзНоменклатура.Добавить(КДобавлению);
		
		КопияНом	=	Сред(КопияНом,13);
	КонецЦикла;
	Если КопияНом <> "" тогда
		СзНоменклатура.Добавить(КопияНом);
	КонецЕсли;

		
	ВСегоПодходящихНоменклатур	=	0;
	ЦенаМин						=	1000000000;
	СамаяДешеваяСтрока			=	Неопределено;
	
	Для каждого СтрокаТовары Из Объект.Товары цикл
		ПК	=	СтрокаТовары.Номенклатура.ПолныйКод();
		
		Для каждого СтрокаСписка из СзНоменклатура цикл
			Если Найти(ПК,СтрокаСписка.Значение) тогда
				ВСегоПодходящихНоменклатур = ВСегоПодходящихНоменклатур + СтрокаТовары.КоличествоУпаковок;
				ЦенаМин	=	Мин(ЦенаМин,СтрокаТовары.цена);
				
				Если СтрокаТовары.цена <= ЦенаМин тогда
					СамаяДешеваяСтрока	=	СтрокаТовары;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	//
	
	Если ВСегоПодходящихНоменклатур >= Число(КоличествоНоменклатуры) тогда
		СуммаВозможнойСкидки	=	Окр((ЦенаМин/100) * Скидка,0);
		СуммаСкидкиУжеПроставлено	=	0;
		Если СамаяДешеваяСтрока.СуммаРучнойСкидки = 0 тогда //обнуляем скидки
			Для каждого СтрокаТовары Из Объект.Товары цикл 
				СтрокаТовары.СуммаРучнойСкидки		=	0;
				СтрокаТовары.ПроцентРучнойСкидки	=	0;
				СтрокаТовары.Сумма					=	СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок;
			КонецЦикла; 	
		иначе			
			
			Для каждого СтрокаТовары Из Объект.Товары цикл
				СуммаСкидкиУжеПроставлено = СуммаСкидкиУжеПроставлено + СтрокаТовары.СуммаРучнойСкидки;
			КонецЦикла; 	
		КонецЕсли;
		
		
		Если СуммаВозможнойСкидки <= СуммаСкидкиУжеПроставлено тогда//ничего делать не нужно
			Возврат;
		КонецЕсли;
		
		Для каждого СтрокаТовары Из Объект.Товары цикл //Отчищаем скидки
			СтрокаТовары.СуммаРучнойСкидки		=	0;
			СтрокаТовары.ПроцентРучнойСкидки	=	0;
			СтрокаТовары.Сумма					=	СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок;
		КонецЦикла;
		
		СамаяДешеваяСтрока.СуммаРучнойСкидки			=	СуммаВозможнойСкидки;
		СамаяДешеваяСтрока.Сумма						=	СамаяДешеваяСтрока.Сумма - СуммаВозможнойСкидки;
		СамаяДешеваяСтрока.флПроставленаСкидкаПоАкции	=	Истина;//При смене количества -  идет пересчет процента скидки. а После этого в зависимости от прцента идет пересчет суммы скидки. плохо сделано фирмой 1с
		флНадо	=	Истина;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСкидкуПроцентнаяСкидкаНаТовар(Скидка,Номенклатура, флНадо, ФлПринудительныйПересчет = Ложь)
	//Проверяем выполняется ли условие по номенклатуре	
	СзНоменклатура = Новый СписокЗначений;

	КопияНом =  Номенклатура;
	Пока Найти(КопияНом,"_") цикл
		КДобавлению = Сред(КопияНом,1,11);
		СзНоменклатура.Добавить(КДобавлению);
		
		КопияНом	=	Сред(КопияНом,13);
	КонецЦикла;
	
	Если КопияНом <> "" тогда
		СзНоменклатура.Добавить(КопияНом);
	КонецЕсли;
	
	СуммаСкидкиУжеПроставлено	=	0;
	СуммаВозможнойСкидки		=	0;
	Для каждого СтрокаТовары Из Объект.Товары цикл
		СуммаСкидкиУжеПроставлено = СуммаСкидкиУжеПроставлено + СтрокаТовары.СуммаРучнойСкидки;
	КонецЦикла;


	
	СЗ_СтрокиДляСкидки	=	Новый СписокЗначений;
	Для каждого СтрокаТовары Из Объект.Товары цикл
		ПК	=	СтрокаТовары.Номенклатура.ПолныйКод();
		
		Для каждого СтрокаСписка из СзНоменклатура цикл
			Если Найти(ПК,СтрокаСписка.Значение) тогда
				СуммаВозможнойСкидки	=	СуммаВозможнойСкидки + (СтрокаТовары.Цена/100 * Скидка) * СтрокаТовары.КоличествоУпаковок;
				СЗ_СтрокиДляСкидки.Добавить(СтрокаТовары); 
				   				
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
	Если не ФлПринудительныйПересчет тогда
		Если СуммаВозможнойСкидки <= СуммаСкидкиУжеПроставлено тогда//ничего делать не нужно
			Возврат;
		КонецЕсли;   
	КонецЕсли;
	
	Для каждого СтрокаТовары Из Объект.Товары цикл //Отчищаем скидки
		СтрокаТовары.СуммаРучнойСкидки		=	0;
		СтрокаТовары.ПроцентРучнойСкидки	=	0;
		СтрокаТовары.Сумма					=	СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок;
	КонецЦикла;

	
	Для каждого СтрокаТовары Из СЗ_СтрокиДляСкидки цикл
		СтрокаТовары.Значение.СуммаРучнойСкидки				=	Окр((СтрокаТовары.Значение.Цена/100) * Скидка,0) * СтрокаТовары.Значение.КоличествоУпаковок;
		СтрокаТовары.Значение.Сумма							=	СтрокаТовары.Значение.Сумма - СтрокаТовары.Значение.СуммаРучнойСкидки;
		СтрокаТовары.Значение.флПроставленаСкидкаПоАкции	=	Истина; //При смене количества -  идет пересчет процента скидки. а После этого в зависимости от прцента идет пересчет суммы скидки. плохо сделано фирмой 1с
		флНадо	=	Истина;
	КонецЦикла;
	
	//
КонецПроцедуры 

&НаСервере
Процедура ОбработатьСкидкуНаТоварСШагомВПроцентах(Скидка,КоличествоШагов, Номенклатура, флНадо, ФлПринудительныйПересчет = Ложь)
	
	
	//Проверяем выполняется ли условие по номенклатуре	
	СзНоменклатура = Новый СписокЗначений;

	КопияНом =  Номенклатура;
	Пока Найти(КопияНом,"_") цикл
		КДобавлению = Сред(КопияНом,1,11);
		СзНоменклатура.Добавить(КДобавлению);
		
		КопияНом	=	Сред(КопияНом,13);
	КонецЦикла;
	
	Если КопияНом <> "" тогда
		СзНоменклатура.Добавить(КопияНом);
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");

	Если не ФлПринудительныйПересчет тогда
		СуммаСкидкиУжеПроставлено	=	0;
		СуммаВозможнойСкидки		=	0;
		Для каждого СтрокаТовары Из Объект.Товары цикл
			СуммаСкидкиУжеПроставлено = СуммаСкидкиУжеПроставлено + СтрокаТовары.СуммаРучнойСкидки;
		КонецЦикла;
		
		СЗ_СтрокиДляСкидки	=	Новый СписокЗначений;
		
		СуммаВозможнойСкидки	=	ДокументОбъект.РассчитатьВозможнуюСкидкуПоШагу(Скидка, КоличествоШагов, СзНоменклатура);
		
		Если СуммаВозможнойСкидки <= СуммаСкидкиУжеПроставлено тогда//ничего делать не нужно
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Для каждого СтрокаТовары Из Объект.Товары цикл //Отчищаем скидки
		СтрокаТовары.СуммаРучнойСкидки		=	0;
		СтрокаТовары.ПроцентРучнойСкидки	=	0;
		СтрокаТовары.Сумма					=	СтрокаТовары.Цена * СтрокаТовары.Количество;
	КонецЦикла;

	ДокументОбъект.ПроставитьСкидкуПоШагу(Скидка, КоличествоШагов, СзНоменклатура, флНадо);
	
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры 

&НаКлиенте
Процедура ТБКТоварыПослеУдаленияПосле(Элемент)
	Попытка
		флНадо	=	Ложь;
		ОбработатьСкидкиИзУТ(флНадо, истина);
		//Если флНадо тогда
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			ОбновитьФорму(); 	
		//КонецЕсли;
	Исключение
	КонецПопытки; 
КонецПроцедуры

&НаКлиенте
&Вместо("ПересчитатьИлиОтменитьСкидкиИОплатуБонусами")
Процедура ТБКПересчитатьИлиОтменитьСкидкиИОплатуБонусами(ТолькоПересчет)
		
	Если Объект.Товары.Количество() > 0 Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
			//ПодготовитьОплатуБонусамиКСторнированию();
		Иначе
			НазначитьАвтоматическиеСкидкиКлиент(Ложь, Ложь);
		КонецЕсли;
	Иначе
		//Если (НЕ ТолькоПересчет) Тогда
		//	ОтменитьСкидкиИОплатуБонусамиСервер();
		//КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеОНевернойОрганизации(ПроверкаМаркиИНН,НужныйЧек, НомерСтроки)
	Рег = РегистрыСведений.ВременныеИдентификаторыЗапросов.СоздатьНаборЗаписей();
	Рег.Отбор.Идентификатор.Установить(Строка(НомерСтроки) + "; " + Строка(НужныйЧек) + "; " + ПроверкаМаркиИНН);
	НовСтр	=	Рег.Добавить();
	
	НовСтр.Идентификатор	=	Строка(НомерСтроки) + "; " + Строка(НужныйЧек) + "; " + ПроверкаМаркиИНН;
	НовСтр.Дата				=	ТекущаяДата();
	
	Значение	=	Новый Структура;
	Значение.Вставить("Магазин",НужныйЧек.Магазин);  
	Значение.Вставить("Организация",НужныйЧек.Организация);  
	Значение.Вставить("ИНН",НужныйЧек.Организация.ИНН);
	Значение.Вставить("Чек",НужныйЧек);      
	Значение.Вставить("ВидОперации",Строка(НужныйЧек.ВидОперации));
	Значение.Вставить("ПроверкаМаркиИНН",ПроверкаМаркиИНН);
	Значение.Вставить("НеверныйИНН",СокрЛП(Прав(ПроверкаМаркиИНН,11))); 
	
	МаркаСтр	=	СтрЗаменить(ПроверкаМаркиИНН,Значение.НеверныйИНН,"");
	МаркаСтр	=	СокрЛП(Сред(МаркаСтр,1,СтрДлина(МаркаСтр)-2));
	Значение.Вставить("Марка",МаркаСтр);	
	
	ХранЗнач		=	Новый ХранилищеЗначения(Значение);
	НовСтр.Запрос	=	ХранЗнач;
	
	Рег.Записать();
КонецПроцедуры

&НаКлиенте
Функция ПроверитьУценку()	
	ЕстьУценка	=	Ложь;
	Для каждого Строка из Объект.Товары цикл
		Если ЗначениеЗаполнено(Строка.КодУценки) тогда
			ЕстьУценка = Истина;
			Прервать;
		КонецЕсли;		
	КонецЦикла;	
	
	Если ЕстьУценка тогда
		Если Объект.Товары.Итог("Количество") <>1 тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Внимание!!","Уцененные товары нужно пробивать отдельным чеком!");
			Возврат Ложь;
		КонецЕсли; 	
	КонецЕсли;
	
	Возврат истина;
КонецФункции

&НаКлиенте
&Вместо("ВыполнитьЧО05Наличные")
Процедура ТБКВыполнитьЧО05Наличные()
	//Вик 2022_03_21
	флВсеХорошо	=	ПроверитьУценку();
	Если не флВсеХорошо тогда Возврат КонецЕсли;
	//КонецВик

	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьЧО07СложнаяОплата")
Процедура ТБКВыполнитьЧО07СложнаяОплата()
	//Вик 2022_03_21
	флВсеХорошо	=	ПроверитьУценку();
	Если не флВсеХорошо тогда Возврат КонецЕсли;
	//КонецВик

	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьЧО06ПлатежнаяКарта")
Процедура ТБКВыполнитьЧО06ПлатежнаяКарта()
	//Вик 2022_03_21
	флВсеХорошо	=	ПроверитьУценку();
	Если не флВсеХорошо тогда Возврат КонецЕсли;
	//КонецВик
	
	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
Процедура ТБКОткрытьПочтуПосле(Команда)
	ЗапуститьПриложение("www.e.mail.ru");
КонецПроцедуры


&НаКлиенте
Процедура ТБКПолучитьЦеныПокупкаСотрудникаПосле(Команда)
	Если не ПокупкаСотрудника тогда
		Сообщить("Не установлена галочка Покупка сотрудника!");
		Возврат	
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 тогда
		Сообщить("Нет товаров!");
		Возврат	
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 5 тогда
		Сообщить("Запрещено запрашивать цены более 5 товаров!");
		Возврат	
	КонецЕсли;

	
	Для каждого СтрокаТовары из Объект.Товары цикл
		//Если ОбщегоНазначенияВызовСервера.ЭтоМаркированнаяНоменклатураСервер(СтрокаТовары.Номенклатура) тогда
		НужХар	=	Неопределено;
		Попытка
			НужХар = Число(Строка(СтрокаТовары.Характеристика));	
		Исключение
		КонецПопытки;
		
		Если НужХар <> Неопределено тогда
			Сообщить("Сотрудникам нельзя покупать для себя сигареты и стики!");
			Возврат
		КонецЕсли;		
	КонецЦикла; 

	ВвестиПарольИОбработать();
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьПО14Продавец")
Процедура ТБКВыполнитьПО14Продавец()
	Если Объект.Товары.Количество() > 0 тогда
		Сообщить("В чеке присутствуют товары! Смена продавца невозможна!");
		Возврат;
	КонецЕсли;
	
	ИсполняемаяОперацияЛогирования = "ВыбранПродавец";
	Если ЗначениеЗаполнено(Объект.Продавец) Тогда
		ЛогированиеВводаПродавца(
			Неопределено, Объект.Продавец, ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"));
		Объект.Продавец = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		УстановитьЗаголовок();
	Иначе
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
						Истина, "Справочник.ФизическиеЛица.Форма.ФормаВыбораВРМК.Открытие");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПродавца", ЭтотОбъект);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Сотрудник" , Истина);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбораВРМК",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ВвестиПарольИОбработать()
	Пароль = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьПарольИОбработатьЦеныДляСотрудников", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещения, Пароль, "Введите пароль: ");		
КонецПроцедуры

&НаСервере
Процедура ПолучитьПарольИОбработатьЦеныДляСотрудников(ПолученноеЗначение, ПереданныеПараметры) экспорт
	//Подключение
	//Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User", "http://mx.tbkon.ru:1776/vape/ws/tbk?wsdl");
	Попытка
		Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User", "http://vws.tbkon.ru/tbk?wsdl");
	Исключение
		Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User", "http://mx.tbkon.ru:1776/vape/ws/tbk?wsdl");
	КонецПопытки;
	Если Прокси = Неопределено тогда
		Сообщить("Не удалось подключиться к УТ для получения цен. Попробуйте выполнить действие позже.");
		Возврат
	КонецЕсли;
	
	//Проверка паролей
	Если Объект.Продавец.Пустая() тогда
		Объект.Продавец = Объект.Товары[0].Продавец;
	КонецЕсли;
	
	СтруктураПарольЛимитСотрудника	=	Прокси.GetPasswordAndLimit(СокрЛП(Строка(Объект.Продавец)));
	СтруктураПарольЛимитСотрудника	=	ОбщегоНазначения.jsonВСтруктура_Общая(СтруктураПарольЛимитСотрудника);	
	
	ПарольСотрудника				=	СтруктураПарольЛимитСотрудника[0].ПарольСотрудника;
	ЛимитСотрудника					=	Число(СтруктураПарольЛимитСотрудника[0].ЛимитСотрудника);
	ИзрасходованныйЛимит			=	Число(СтруктураПарольЛимитСотрудника[0].ИзрасходованныйЛимит);
	ПроцентНаценки					=	Число(СтруктураПарольЛимитСотрудника[0].ПроцентНаценки);
	
	//Добавляем не отправленные в ут
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ЕСТЬNULL(ТБК_ПокупкиСотрудников.Чек.СуммаДокумента, 0) КАК СуммаЧека
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_ПокупкиСотрудников КАК ТБК_ПокупкиСотрудников
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ПокупкиСотрудников.ОтправленВУТ
	      	 	             |	И ТБК_ПокупкиСотрудников.Продавец = &Продавец");
	Запрос.УстановитьПараметр("Продавец",Объект.Продавец);
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого Строка из Рез цикл
		ИзрасходованныйЛимит	=	ИзрасходованныйЛимит + Строка.СуммаЧека;	
	КонецЦикла;
	
	Если ПарольСотрудника =  "Не найден" тогда
		Сообщить("Ошибка! Пользователь не найден в УТ");
		Возврат
	КонецЕсли;
	
	Если ПарольСотрудника <> "" и ПарольСотрудника <> ПолученноеЗначение тогда
		Сообщить("Неверный пароль!");
		Возврат;
	КонецЕсли;	
		
	//Получение Цен
	Результат = Новый Массив;
	нЗапись   = Новый Структура();

	Для каждого СтрокаТовары из Объект.Товары цикл
		нЗапись.Вставить("НоменклатураКод" + Строка(СтрокаТовары.НомерСтроки),СокрЛП(СтрокаТовары.Номенклатура.Код));		
	КонецЦикла; 
	
	Результат.Добавить(нЗапись);	
	СтрJSON		=	ОбщегоНазначения.СтруктураВjson_Общая(Результат);			
	
	Ответ	= Прокси.GetPriceWorker(СтрJSON);
	Прокси	=	Неопределено;
	
	Если Ответ = "" тогда
		Сообщить("Не удалось получить цены из УТ! Попробуйте выполнить действие позже.");
		Возврат
	КонецЕсли;   
	
	СтруктураОтвета	= ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);     	
	
	Если СтруктураОтвета[0].количество() = 0 тогда
		Сообщить("Не удалось получить цены из УТ. Попробуйте выполнить действие позже.");
		Возврат
	КонецЕсли; 
	
	//Обработка ответа
	
	//1) Проверка лимитов
	СуммаЧека	=	0;
	
	Для каждого Строка из СтруктураОтвета цикл
		Для i=1 по 10000 цикл
			Если Строка.Свойство("Цена"+Строка(i)) тогда
				ЦенаЗакуп			=	"";
				Строка.Свойство("Цена"	+ Строка(i), ЦенаЗакуп);
				
				ЦенаЗакуп	=	Число (ЦенаЗакуп);
				
				СуммаЧека	=	СуммаЧека + ЦенаЗакуп * Объект.Товары[i-1].Количество;
			иначе
				Прервать;
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	Если ЛимитСотрудника < СуммаЧека + ИзрасходованныйЛимит тогда
		Сообщить("Превышен лимит!");
		Прокси = Неопределено;
		Возврат
	КонецЕсли;	
	
	//2) Изменяем ТЧ
	Для каждого Строка из СтруктураОтвета цикл
		Для i=1 по 10000 цикл
			Если Строка.Свойство("Цена"+Строка(i)) тогда
				ЦенаЗакуп			=	"";
				Строка.Свойство("Цена"	+ Строка(i), ЦенаЗакуп);
				
				ЦенаЗакуп	=	Число (ЦенаЗакуп);
				ЦенаЗакуп	=	ЦенаЗакуп + (ЦенаЗакуп/100)*ПроцентНаценки;
				
				Объект.Товары[i-1].Цена					=	ЦенаЗакуп;
				Объект.Товары[i-1].Сумма				=	Объект.Товары[i-1].Цена * Объект.Товары[i-1].Количество;
				Объект.Товары[i-1].СуммаРучнойСкидки	=	0;
				Объект.Товары[i-1].СуммаВсего			=	Объект.Товары[i-1].Сумма;
			иначе
				Прервать;
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ПересчитатьСуммуНДСВТЧСервер(
		Объект.Товары, ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));	
		
	Элементы.ПокупкаСотрудника.Доступность	=	Ложь;
	Элементы.Товары.Доступность				=	Ложь;
	Элементы.КартинкаЧО03РедактированиеСтроки.Доступность	=	Ложь;
КонецПроцедуры


&НаКлиенте
&Вместо("ВыполнитьЧО03РедактированиеСтроки")
Процедура ТБКВыполнитьЧО03РедактированиеСтроки()
	Если ПокупкаСотрудника тогда Возврат КонецЕсли;//Вик 2022-05-04
	
	ДанныеСтрокиТовары = Элементы.Товары.ТекущиеДанные;
	
	Если ДанныеСтрокиТовары <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтрокиТовары.ДоговорКонтрагента)
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			
			СтруктураПараметровКлиента = Новый Структура;
			СтруктураПараметровКлиента.Вставить("УчетХарактеристик", Ложь);
			СтруктураПараметровКлиента.Вставить("ПересчиталиЦену", Истина);
			СтруктураПараметровКлиента.Вставить("НеУдалятьСтроку", Истина);
			СтруктураПараметровКлиента.Вставить("ПредупреждениеНулевойЦены", НСтр("ru = 'Введите сумму платежа.'"));
			СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", Истина);
			СтруктураПараметровКлиента.Вставить("ИдентификаторСтроки", ДанныеСтрокиТовары.ПолучитьИдентификатор());
			СтруктураПараметровКлиента.Вставить("ПрекратитьДействия", Ложь);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия", СтруктураПараметровКлиента);
			
			ОбработчикОповещения = Новый ОписаниеОповещения(
				"ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите сумму платежа.'"), ОбработчикОповещения);
			
		Иначе
			
			Если НЕ ДанныеСтрокиТовары.НомерСтроки = Объект.Товары.Количество()
				И НЕ НаборПравИНастроек.РазрешитьРедактироватьНабранныйЧек 
				И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
				Возврат;
			КонецЕсли;
			
			ОбработатьРедактированиеСтроки(ДанныеСтрокиТовары, "");
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
&Вместо("ВыполнитьПО04ОтложитьЧек")
Процедура ТБКВыполнитьПО04ОтложитьЧек()
	Если не ПокупкаСотрудника тогда
		Если ОтменитьОплатуПК Тогда
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
			ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
			Возврат;
		КонецЕсли;
	
		ОповещениеОтложитьЧек();
	иначе
		Сообщить("Невозможно для покупок для себя");	
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
&Вместо("ВыполнитьПО15ПродолжитьЧек")
Процедура ТБКВыполнитьПО15ПродолжитьЧек()
	Если не ПокупкаСотрудника тогда  
		Если ОтменитьОплатуПК Тогда
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеПродолжитьЧек", ЭтотОбъект);
			ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
			Возврат;
		КонецЕсли;
		
		ОповещениеПродолжитьЧек();
	иначе
		Сообщить("Невозможно для покупок для себя");	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьПО22РучныеСкидки")
Процедура ТБКВыполнитьПО22РучныеСкидки()
	Если не ПокупкаСотрудника тогда  

		Если ОшибкаРасчетаСкидокПоЗаказуПокупателя() Тогда
			Возврат;
		КонецЕсли;
		
		Если ОшибкаРасчетаСкидокПоДокументуРасчета() Тогда
			Возврат;
		КонецЕсли;
		
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
						Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаРучныхСкидок.Открытие");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуРучныхСкидок", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаРучныхСкидок",
			, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	иначе
		Сообщить("Невозможно для покупок для себя");	
	КонецЕсли;
КонецПроцедуры
//КонецВик



















//Samosale
&НаСервере
Процедура Расш_SamosaleПроверитьБаллыПослеНаСервере(ИзменениеSamosale_Списать)

    Если ЭтаФорма.Samosale_НомерТелефона <> 0 Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);	
		//Соединение = Новый HTTPСоединение("app.samosale.ru/api/cash-box/search?value="+ЭтаФорма.Samosale_НомерТелефона+"&type=phone",443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		ЗаголовокЗапросаHTTP = Новый Соответствие();
		ЗаголовокЗапросаHTTP.Вставить("Authorization", "Bearer "+Объект.Магазин.Расш_SamosaleApiКлюч);
		Запрос = Новый HTTPЗапрос("api/cash-box/search?value="+ЭтаФорма.Samosale_НомерТелефона+"&type=phone",ЗаголовокЗапросаHTTP);
		Результат = Соединение.Получить(Запрос);
		Если Результат.КодСостояния = 200 Тогда
			КоличествоБонусов = 0;
			КоличествоБонусовПоПромокоду = 0;
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
			Структура = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
			Чтение.Закрыть();
			Если Структура.status <> "not found" Тогда
				айдиклиента = Структура.client.id;
				Промо = Структура.promo.haspromo;
				Если Структура.promo.haspromo = Истина Тогда
					//ЭтаФорма.Элементы.Samosale_Промокод.Видимость = Истина;		
				КонецЕсли;
				    ssl = Новый ЗащищенноеСоединениеOpenSSL();
					Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
					//Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
					Заголовки = Новый Соответствие;
					Заголовки.Вставить("Authorization", "Bearer "+Объект.Магазин.Расш_SamosaleApiКлюч);
					Заголовки.Вставить("Content-Type", "application/json");
					Запрос = Новый HTTPЗапрос("api/cash-box/calculate-payment", Заголовки);
					
					СтруктураДляJSON = Новый Структура;
				    СтруктураДляJSON.Вставить("clientId", айдиклиента);
					
					СтруктураМагазин = Новый Структура;
					СтруктураМагазин.Вставить("uid",Объект.Магазин.Код);
					СтруктураМагазин.Вставить("name",Объект.Магазин.Наименование);
					СтруктураДляJSON.Вставить("shop",СтруктураМагазин);
					
					СтруктураПродавец = Новый Структура;
					СтруктураПродавец.Вставить("uid",Объект.Продавец.Наименование);
					СтруктураПродавец.Вставить("name",Объект.Продавец.Наименование);
					СтруктураДляJSON.Вставить("cashier",СтруктураПродавец);
					
					ТекГод = Строка(Формат(ТекущаяДата(),"ДФ=гггг"));
					ТекМесяц= Строка(Формат(ТекущаяДата(),"ДФ=ММ"));
					ТекДень = Строка(Формат(ТекущаяДата(),"ДФ=дд"));
					ТекЧас = Строка(Формат(ТекущаяДата(),"ДФ=ЧЧ"));
					ТекМинута = Строка(Формат(ТекущаяДата(),"ДФ=мм"));
					ТекСекунда = Строка(Формат(ТекущаяДата(),"ДФ=сс"));
					СтруктураДляJSON.Вставить("commitAt", ТекГод+"-"+ТекМесяц+"-"+ТекДень + " "+ ТекЧас + ":" + ТекМинута + ":"+ ТекСекунда + "+03:00");
					
					ОбщееКоличество = 0;
					ОбщаяСумма = 0;
					ОбщаяРучнаяСкидка = 0;
					ВыходнойМассив = Новый Массив;
					Для Каждого стр Из Объект.Товары Цикл
						СтруктураТовары = Новый Структура("extId,title,price");
						СтруктураТовары.extId = Строка(Прав(стр.Номенклатура.Код,6));
						СтруктураТовары.title = стр.Номенклатура.НаименованиеПолное;
						СтруктураТовары.price = стр.Цена;
						
						ОбщееКоличество = ОбщееКоличество + стр.Количество;
						ОбщаяСумма = ОбщаяСумма + стр.Количество*стр.Цена;
						ОбщаяРучнаяСкидка = ОбщаяРучнаяСкидка + стр.СуммаАвтоматическойСкидки + стр.СуммаРучнойСкидки;
						
						СтруктураМассивТЧ = Новый Структура("product");
						СтруктураМассивТЧ.Вставить("product",СтруктураТовары);
						
						ВыходнаяСтруктура = Новый Структура("product,quantity,manualDiscount");
						ВыходнаяСтруктура.Вставить("product",СтруктураТовары);
						ВыходнаяСтруктура.Вставить("quantity",стр.Количество);
						ВыходнаяСтруктура.Вставить("manualDiscount",стр.СуммаРучнойСкидки);
						ВыходнойМассив.Добавить(ВыходнаяСтруктура);
						
						СтруктураДляJSON.Вставить("items",ВыходнойМассив);
					КонецЦикла;
					СтруктураДляJSON.Вставить("totalSum",ОбщаяСумма);
					Если ИзменениеSamosale_Списать = Истина Тогда
						СтруктураДляJSON.Вставить("totalBonusOutlay",0);	
					Иначе
						СтруктураДляJSON.Вставить("totalBonusOutlay",ЭтаФорма.Samosale_Списать);
					КонецЕсли;
					Если Структура.promo.haspromo = Истина Тогда
						СтруктураДляJSON.Вставить("promoId", СокрЛП(ЭтаФорма.Samosale_Промокод));		
					КонецЕсли;
					
					Запись = Новый ЗаписьJSON;
				    Запись.УстановитьСтроку();
				    ЗаписатьJSON(Запись,СтруктураДляJSON);
				    ТелоЗапроса = Запись.Закрыть();
				    Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
					ОтветПречек = Соединение.ОтправитьДляОбработки(Запрос);
					
					Чтение = Новый ЧтениеJSON;
					Чтение.УстановитьСтроку(ОтветПречек.ПолучитьТелоКакСтроку());
					СтруктураПречек = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
					Чтение.Закрыть();
					Если СтруктураПречек.status <> 400 Тогда
						КоличествоБонусов = КоличествоБонусов + СтруктураПречек.totalMaxBonusOutlay;
						КоличествоБонусовПоПромокоду = КоличествоБонусовПоПромокоду + СтруктураПречек.totalPromoDiscount;
						ЭтаФорма.Элементы.ПроверитьБаллы.Видимость = Ложь;
						Если ЭтаФорма.Samosale_Списать = 0 Тогда 
							ЭтаФорма.Samosale_Списать = Число(СтруктураПречек.totalMaxBonusOutlay);
						КонецЕсли;
						Samosale_МожноСписать = Число(СтруктураПречек.totalMaxBonusOutlay); 					
					Иначе
						КоличествоБонусов = 0;
						КоличествоБонусовПоПромокоду = 0;
						ЭтаФорма.Элементы.ПроверитьБаллы.Видимость = Ложь;
					КонецЕсли;
					
					ЧтениеJson=Новый ЧтениеJSON;
					ЧтениеJson.УстановитьСтроку(ОтветПречек.ПолучитьТелоКакСтроку());
					Данные=ПрочитатьJSON(ЧтениеJSON);
					
					ЭтаФорма.Samosale_КоличествоПоПромокоду = Число(КоличествоБонусовПоПромокоду);
					Если ИзменениеSamosale_Списать = Истина Тогда  
						ЭтаФорма.Samosale_Списать = Число(КоличествоБонусов);
					КонецЕсли;
					//ЭтаФорма.Элементы.ГруппаОК.Видимость = Истина;
					ЭтаФорма.Элементы.Samosale_Списать.Видимость = Истина;
					//ЭтаФорма.Элементы.КоличествоБаллов.Видимость = Истина;
					ЭтаФорма.Элементы.СписатьБаллы.Видимость = Истина;
					Если Структура.promo.hasPromo = Истина Тогда
						//ЭтаФорма.Элементы.Samosale_КоличествоПоПромокоду.Видимость = Истина;
						//ЭтаФорма.Элементы.Samosale_КоличествоПоПромокоду.Доступность = Ложь;
						//ЭтаФорма.Элементы.Samosale_Промокод.Доступность = Истина;
						//ЭтаФорма.Элементы.Samosale_Промокод.Видимость = Истина;
					КонецЕсли;				
				Иначе
				ЭтаФорма.Элементы.СоздатьКлиента.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Расш_SamosaleПроверитьБаллыПосле(Команда)
	Расш_SamosaleПроверитьБаллыПослеНаСервере(Истина);
КонецПроцедуры

&НаСервере
Процедура Расш_SamosaleСоздатьКлиентаПослеНаСервере()
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
	
	Заголовки = Новый Соответствие;
	SamosaleТокен = "mTn7MrOkqdPLAHEVpwFXTxqAqN7JMvmTKp3FkST1EUla6h8knjW06C2kGS76UDVR";
	Заголовки.Вставить("Authorization", "Bearer "+SamosaleТокен);//+Объект.Магазин.Расш_SamosaleApiКлюч);
	Заголовки.Вставить("Content-Type", "application/json");
	
	Запрос = Новый HTTPЗапрос("api/cash-box/create-client", Заголовки);
	
	
	СтруктураДляJSON = Новый Структура;
    СтруктураДляJSON.Вставить("phone", ЭтаФорма.Samosale_НомерТелефона);
	
	Запись = Новый ЗаписьJSON;
    Запись.УстановитьСтроку();
    ЗаписатьJSON(Запись,СтруктураДляJSON);
    ТелоЗапроса = Запись.Закрыть();
    Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
   		
	Результат = Соединение.ОтправитьДляОбработки(Запрос);
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
	Структура = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
	Чтение.Закрыть();
	
	Если Результат.КодСостояния >= 300 Тогда
		Сообщить(Строка(Результат.КодСостояния) + ". Возникла ошибка при создании клиента в системе Samosale. Клиент не зарегистрирован.");
	ИначеЕсли Результат.КодСостояния = 200 Тогда
		Сообщить("Клиент успешно зарегистрирован в системе Samosale.");
		//ЭтаФорма.Элементы.СоздатьКлиента.Видимость = Ложь;
	КонецЕсли;
	//ЭтаФорма.Элементы.СоздатьКлиента.Видимость = Ложь;
	Расш_SamosaleНайтиКлиентаПослеНаСервере();
	ЭтаФорма.Элементы.Samosale_Списать.Видимость = Истина;
	ЭтаФорма.Элементы.СписатьБаллы.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Расш_SamosaleСоздатьКлиентаПосле(Команда)
	
	
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФорма_ЗарегистрироватьКлиентаВПрограммеЛояльности",
				,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
	//ЭтаФорма.Элементы.СоздатьКлиента.Видимость = Ложь;
	//Расш_SamosaleНайтиКлиентаПослеНаСервере();
	//ЭтаФорма.Элементы.Samosale_Списать.Видимость = Истина;
	//ЭтаФорма.Элементы.СписатьБаллы.Видимость = Истина;	
	//Расш_SamosaleСоздатьКлиентаПослеНаСервере();
КонецПроцедуры 

&НаСервере
Процедура Расш_SamosaleСписатьБаллыПослеНаСервере()
	Если ЭтаФорма.Samosale_НомерТелефона <> "" Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
		//Соединение = Новый HTTPСоединение("app.samosale.ru/api/cash-box/search?value="+ЭтаФорма.Samosale_НомерТелефона+"&type=phone",443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		ЗаголовокЗапросаHTTP = Новый Соответствие(); 
		ЗаголовокЗапросаHTTP.Вставить("Authorization", "Bearer "+Объект.Магазин.Расш_SamosaleApiКлюч);
		Запрос = Новый HTTPЗапрос("api/cash-box/search?value="+ЭтаФорма.Samosale_НомерТелефона+"&type=phone",ЗаголовокЗапросаHTTP);
		Результат = Соединение.Получить(Запрос);
		Если Результат.КодСостояния = 200 Тогда
			КоличествоБонусов = 0;
			КоличествоБонусовПоПромокоду = 0;
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
			Структура = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
			Чтение.Закрыть();
			Если Структура.status <> "not found" Тогда
				айдиклиента = Структура.client.id;
				Промо = Структура.promo.haspromo;
				Если Структура.promo.haspromo = Истина Тогда
					ЭтаФорма.Элементы.Samosale_Промокод.Видимость = Истина;		
				КонецЕсли;
				    ssl = Новый ЗащищенноеСоединениеOpenSSL();
					Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
					//Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
					Заголовки = Новый Соответствие;
					Заголовки.Вставить("Authorization", "Bearer "+Объект.Магазин.Расш_SamosaleApiКлюч);
					Заголовки.Вставить("Content-Type", "application/json");
					Запрос = Новый HTTPЗапрос("api/cash-box/calculate-payment", Заголовки);
					
					СтруктураДляJSON = Новый Структура;
				    СтруктураДляJSON.Вставить("clientId", айдиклиента);
					
					СтруктураМагазин = Новый Структура;
					СтруктураМагазин.Вставить("uid",Объект.Магазин.Код);
					СтруктураМагазин.Вставить("name",Объект.Магазин.Наименование);
					СтруктураДляJSON.Вставить("shop",СтруктураМагазин);
					
					СтруктураПродавец = Новый Структура;
					СтруктураПродавец.Вставить("uid",Объект.Продавец.Наименование);
					СтруктураПродавец.Вставить("name",Объект.Продавец.Наименование);
					СтруктураДляJSON.Вставить("cashier",СтруктураПродавец);
					
					ТекГод = Строка(Формат(ТекущаяДата(),"ДФ=гггг"));
					ТекМесяц= Строка(Формат(ТекущаяДата(),"ДФ=ММ"));
					ТекДень = Строка(Формат(ТекущаяДата(),"ДФ=дд"));
					ТекЧас = Строка(Формат(ТекущаяДата(),"ДФ=ЧЧ"));
					ТекМинута = Строка(Формат(ТекущаяДата(),"ДФ=мм"));
					ТекСекунда = Строка(Формат(ТекущаяДата(),"ДФ=сс"));
					СтруктураДляJSON.Вставить("commitAt", ТекГод+"-"+ТекМесяц+"-"+ТекДень + " "+ ТекЧас + ":" + ТекМинута + ":"+ ТекСекунда + "+03:00");
					
					ОбщееКоличество = 0;
					ОбщаяСумма = 0;
					ОбщаяРучнаяСкидка = 0;
					ВыходнойМассив = Новый Массив;
					Для Каждого стр Из Объект.Товары Цикл
						СтруктураТовары = Новый Структура("extId,title,price");
						СтруктураТовары.extId = Строка(Прав(стр.Номенклатура.Код,6));
						СтруктураТовары.title = стр.Номенклатура.НаименованиеПолное;
						СтруктураТовары.price = стр.Цена;
						
						ОбщееКоличество = ОбщееКоличество + стр.Количество;
						ОбщаяСумма = ОбщаяСумма + стр.Количество*стр.Цена;
						ОбщаяРучнаяСкидка = ОбщаяРучнаяСкидка + стр.СуммаАвтоматическойСкидки + стр.СуммаРучнойСкидки;
						
						СтруктураМассивТЧ = Новый Структура("product");
						СтруктураМассивТЧ.Вставить("product",СтруктураТовары);
						
						ВыходнаяСтруктура = Новый Структура("product,quantity,manualDiscount");
						ВыходнаяСтруктура.Вставить("product",СтруктураТовары);
						ВыходнаяСтруктура.Вставить("quantity",стр.Количество);
						ВыходнаяСтруктура.Вставить("manualDiscount",стр.СуммаРучнойСкидки);
						ВыходнойМассив.Добавить(ВыходнаяСтруктура);
						
						СтруктураДляJSON.Вставить("items",ВыходнойМассив);
					КонецЦикла;
					СтруктураДляJSON.Вставить("totalSum",ОбщаяСумма);
					СтруктураДляJSON.Вставить("totalBonusOutlay",ЭтаФорма.Samosale_Списать);
					Если Структура.promo.haspromo = Истина Тогда
						СтруктураДляJSON.Вставить("promoId", СокрЛП(ЭтаФорма.Samosale_Промокод));		
					КонецЕсли;
					
					Запись = Новый ЗаписьJSON;
				    Запись.УстановитьСтроку();
				    ЗаписатьJSON(Запись,СтруктураДляJSON);
				    ТелоЗапроса = Запись.Закрыть();
				    Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
					ОтветПречек = Соединение.ОтправитьДляОбработки(Запрос);
					
					Чтение = Новый ЧтениеJSON;
					Чтение.УстановитьСтроку(ОтветПречек.ПолучитьТелоКакСтроку());
					СтруктураПречек = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
					Чтение.Закрыть();
					Если СтруктураПречек.status <> 400 Тогда
						КоличествоБонусов = КоличествоБонусов + СтруктураПречек.totalBonusOutlay;
						КоличествоБонусовПоПромокоду = КоличествоБонусовПоПромокоду + СтруктураПречек.totalPromoDiscount;

					ЭтаФорма.Элементы.ПроверитьБаллы.Видимость = Ложь;
					
					ПромокодНаСтроку = КоличествоБонусовПоПромокоду / Объект.Товары.Количество();
					
					ЧтениеJson=Новый ЧтениеJSON;
					ЧтениеJson.УстановитьСтроку(ОтветПречек.ПолучитьТелоКакСтроку());
					Данные=ПрочитатьJSON(ЧтениеJSON);
	
			ТЗПречек = Новый ТаблицаЗначений;
			ТЗПречек.Колонки.Добавить("нстр");
			ТЗПречек.Колонки.Добавить("manualDiscount");
			ТЗПречек.Колонки.Добавить("promoDiscount");
			ТЗПречек.Колонки.Добавить("bonusOutlay");
			ТЗПречек.Колонки.Добавить("maxBonusOutlay");
			ТЗПречек.Колонки.Добавить("minBonusReward");
			ТЗПречек.Колонки.Добавить("maxBonusReward");
			ТЗПречек.Колонки.Добавить("hasBonusOutlay");
			ТЗПречек.Колонки.Добавить("hasBonusReward");
			ТЗПречек.Колонки.Добавить("hasPromoDiscount");
			нстр = 1;
			Для Каждого стрДанные Из Данные.items Цикл
				стрТЗПречек = ТЗПречек.Добавить();
				ЗаполнитьЗначенияСвойств(стрТЗПречек,стрДанные);
				стрТЗПречек.нстр = нстр;
				нстр = нстр + 1;
			КонецЦикла;
			СкидкаБаллами = 0;				
			Для Каждого стрТовары Из Объект.Товары Цикл
				Для Каждого стрТЗПречек1 Из ТЗПречек Цикл
					Если стрТЗПречек1.нстр = стрТовары.НомерСтроки Тогда            
						стрТовары.СуммаСкидкиОплатыБонусом = стрТЗПречек1.promoDiscount+ стрТЗПречек1.bonusOutlay;// + стрТЗПречек1.manualDiscount;
						стрТовары.Сумма = стрТовары.Цена * стрТовары.Количество - стрТЗПречек1.promoDiscount - стрТЗПречек1.BonusOutlay;// - стрТЗПречек1.manualDiscount ;
						стрТовары.СуммаВсего = стрТовары.Цена * стрТовары.Количество;	
						СкидкаБаллами = СкидкаБаллами + стрТЗПречек1.BonusOutlay;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			этаформа.СуммаСкидки = СтруктураПречек.totalSum - СтруктураПречек.totalPaidSum;
			этаформа.СуммаКОплате = СтруктураПречек.totalPaidSum;
			Иначе
				Сообщить(Строка(СтруктураПречек.message));
			КонецЕсли;
		КонецЕсли;
		КонецЕсли;
		КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура Расш_SamosaleСписатьБаллыПосле(Команда)
	Расш_SamosaleСписатьБаллыПослеНаСервере();
	//Расш_SamosaleОбновитьТаблоНоменклатуры();
	Расш_SamosaleОбновитьИнформациюПоСуммам();
	ЭтаФорма.Элементы.Товары.Доступность = Ложь;
	ЭтаФорма.Элементы.СписатьБаллы.Доступность = Ложь;
	ЭтаФорма.Элементы.Товары.ИзменятьСоставСтрок = Ложь;
	ЭтаФорма.Элементы.КартинкаЧО01Меню.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаЧО02Поиск.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаЧО03РедактированиеСтроки.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаЧО04Возврат.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаЧО09ОперацияДС.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаЧО08ОплатаБонусами.Доступность = Ложь;
	//ЭтаФорма.Элементы.КартинкаЧО12ЭСНСПК.Доступность = Ложь;
	
	ЭтаФорма.Элементы.КартинкаПО01БыстрыеТовары.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО02ВвестиВнесениеДенег.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО03ЗаменитьПрава.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаЧО01Меню.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО06ВвестиШтрихкод.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО07ОткрытьДенежныйЯщик.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО08РасчетСкидок.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО09Печать.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО10НапечататьПоследнийСлипЧек.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО12ПолучитьВес.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО13ВвестиВыемкаДенег.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО14Продавец.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО15ПродолжитьЧек.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО16ВвестиВозвратТовараОтРозничногоПокупателя.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО17ВвестиИнформационнуюКарту.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО18ОткрытьПодарочныеСертификаты.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО19УправляемыеСкидки.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО20ЗаменаКарты.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО21ПробитьЧек.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО22РучныеСкидки.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО23ВвестиСерии.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО24ПолучитьИзТСД.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО25ПечатьПробитогоЧека.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО26ОтчетБезГашения.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО27ПродажаПоЗаказу.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО28ПросмотрНакоплений.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО29ОтменитьОплатуБонусами.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО30ВозвратПоследнегоЧека.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО31ПолучитьДокументРасчета.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО32АкцизныеМарки.Доступность = Ложь;
	ЭтаФорма.Элементы.КартинкаПО33ПоискПоНаименованию.Доступность = Ложь;
	//ЭтаФорма.Элементы.КартинкаПО34ВыборКассыККМ.Доступность = Ложь;
	//ЭтаФорма.Элементы.КартинкаПО35ЗаявлениеНаВозврат.Доступность = Ложь;
	Samosale_ЗапретДобавленияСтрок = Истина;
	//ЭтаФорма.Элементы.Samosale_НомерТелефона.Доступность = Ложь;
	//ЭтаФорма.Элементы.Samosale_Промокод.Доступность = Ложь;
	//ЭтаФорма.Элементы.Samosale_Списать.Доступность = Ложь;
	//ЭтаФорма.Элементы.Samosale_КоличествоПоПромокоду.Доступность = Ложь;
	//ЭтаФорма.Элементы.НайтиКлиента.Доступность = Ложь;
	ЭтаФорма.Samosale_СписываемыеБаллы = ЭтаФорма.Samosale_Списать; 
КонецПроцедуры

&НаСервере
Процедура Расш_SamosaleSamosale_СписатьПриИзмененииПослеНаСервере()
	Если Samosale_Списать > 0 Тогда	
		МожноСписать = Samosale_МожноСписать;	
		Если Samosale_Списать > МожноСписать Тогда
			Сообщить("Количество списываемых баллов больше доступных для данного чека " + Строка(МожноСписать) + ", списание невозможно.");
			ЭтаФорма.Элементы.СписатьБаллы.Доступность = Ложь;
		Иначе
			Расш_SamosaleПроверитьБаллыПослеНаСервере(Ложь);
			ЭтаФорма.Элементы.СписатьБаллы.Доступность = Истина;
		КОнецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Расш_SamosaleSamosale_СписатьПриИзмененииПосле(Элемент)
	Расш_SamosaleSamosale_СписатьПриИзмененииПослеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Расш_SamosaleОбновитьТаблоНоменклатуры()
	
	СтруктураДанных = РозничныеПродажиКлиентСервер.СтруктураДляОбновленияТаблоНоменклатурыРМК();
	СтруктураДанных.ВыведеныЧеки            = ВыведеныЧеки;
	СтруктураДанных.ОставлятьФлагТаблоСдачи = ОставлятьФлагТаблоСдачи;
	СтруктураДанных.ВыведенаСдача           = ВыведенаСдача;
	СтруктураДанных.ДисконтнаяКарта         = Объект.ДисконтнаяКарта;
	СтруктураДанных.ВладелецДисконтнойКарты = Объект.ВладелецДисконтнойКарты;
	СтруктураДанных.Телефон           		= Объект.Телефон;
	СтруктураДанных.АдресЭП         		= Объект.АдресЭП;
	СтруктураДанных.НеПечататьБумажныйЧек	= Ложь; // по-умолчанию не печатаем
	
	РозничныеПродажиКлиент.ОбновитьТаблоНоменклатуры(Объект,
		Элементы,
		СтруктураДанных,
		НадписьИнформацияОТоваре,
		НадписьТекущаяСумма);
		//ДанныеSMSИлиEmail);
	
КонецПроцедуры

&НаКлиенте
Процедура Расш_SamosaleОбновитьИнформациюПоСуммам()
	
	Если Объект.ОперацияСДенежнымиСредствами И Объект.Товары.Количество() = 0 
		И (НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")) Тогда
		СуммаВсего = СуммаОстаткаДокументаРасчета;
		СуммаДокументаБезСкидок = 0;
		СуммаСкидкиРасчет = 0;
		СуммаСкидки = 0;
	Иначе		
		СуммаВсего = Объект.Товары.Итог("СуммаВсего") - Объект.Товары.Итог("СуммаСкидкиОплатыБонусом") - Объект.Товары.Итог("СуммаРучнойСкидки");
		СуммаДокументаБезСкидок = ПолучитьСуммуДокументаБезСкидки();
		СуммаСкидкиРасчет = СуммаДокументаБезСкидок - СуммаВсего;
		СуммаСкидки = ?(СуммаСкидкиРасчет > 0, СуммаСкидкиРасчет, - СуммаСкидкиРасчет);
	КонецЕсли;

	СуммаКОплате = СуммаВсего;
	
	Если СуммаСкидкиРасчет < 0 Тогда
		Элементы.СуммаСкидки.ЦветТекста = WebЦвета.Красный;
	ИначеЕсли СуммаСкидкиРасчет > 0 Тогда
		Элементы.СуммаСкидки.ЦветТекста = WebЦвета.Зеленый;
	Иначе
		Элементы.СуммаСкидки.ЦветТекста = Новый Цвет();
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОтправитьЧекБезИнета(СтруктураДляJSON, ПробитыйЧек)
	Рег = РегистрыСведений.ТБК_ИсторияПокупокSamosaleЧекиОфлаин.СоздатьМенеджерЗаписи();
	Рег.Samosale_НомерТелефона	=	"+7"+Формат(ЭтаФорма.Samosale_НомерТелефона, "ЧГ=0");
	Рег.Чек						=	ПробитыйЧек;					
	Рег.АкцияУтилизация  	    =	АкцияУтилизация;
	Рег.Промокод                =   ЭтаФорма.Samosale_Промокод;
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись,СтруктураДляJSON);
	ТелоЗапроса = Запись.Закрыть();
	
	Рег.JsonДляСтруктуры		= 	ТелоЗапроса;
	Попытка
		Рег.Записать();	
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка записи данный для отправки в Samosale. Причина: " + ОписаниеОшибки();
		Сообщение.Сообщить(); 	
	КонецПопытки;
КонецПроцедуры // ()

&НаСервере
Процедура ОтправитьЧек(СтруктураДляJSON,ПробитыйЧек)
		
	СписатьПоПромокоду = 0;
	СписываетсяБаллов = 0;
	ОплатыБонусом = 0;	
	Если ПробитыйЧек.АналитикаХозяйственнойОперации.Наименование = "Возврат от покупателя" Тогда
		внешид = ПробитыйЧек.ЧекККМПродажа.УникальныйИдентификаторПлатежа;
		ssl = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);	
		//Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Authorization", "Bearer "+Объект.Магазин.Расш_SamosaleApiКлюч);
		Заголовки.Вставить("Content-Type", "application/json");
		ЗапросПоиск = Новый HTTPЗапрос("api/cash-box/get-payment-receipt?extId="+внешид, Заголовки);
		Результат = Соединение.Получить(ЗапросПоиск);
		Если Результат.КодСостояния = 200 Тогда
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
			Структура = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
			Чтение.Закрыть();
			Попытка
				totalBonusOutlay = Структура.totalBonusOutlay;
			    totalBonusReward = Структура.totalBonusReward;
			Исключение
				Сообщить("В системе Samosale не найден чек.");
				Возврат;
			КонецПопытки;
			
			Запрос = Новый HTTPЗапрос("api/cash-box/create-refund", Заголовки);
			Результат = Соединение.Получить(Запрос);
			
			СтруктураДляJSON = Новый Структура;
			СтруктураДляJSON.Вставить("id", Структура.id);
			
			СтруктураМагазин = Новый Структура;
			СтруктураМагазин.Вставить("uid",ПробитыйЧек.ЧекККМПродажа.Магазин.Код);
			СтруктураМагазин.Вставить("name",ПробитыйЧек.ЧекККМПродажа.Магазин.Наименование);
			СтруктураДляJSON.Вставить("shop",СтруктураМагазин);     
			
			
			Если ПробитыйЧек.Продавец.Наименование = "" Тогда
					СтруктураПродавец = Новый Структура;
					СтруктураПродавец.Вставить("uid","Продавец");
					СтруктураПродавец.Вставить("name","Продавец");
					СтруктураДляJSON.Вставить("cashier",СтруктураПродавец);	
			Иначе
					СтруктураПродавец = Новый Структура;
					СтруктураПродавец.Вставить("uid",ПробитыйЧек.Продавец.Наименование);
					СтруктураПродавец.Вставить("name",ПробитыйЧек.Продавец.Наименование);
					СтруктураДляJSON.Вставить("cashier",СтруктураПродавец);
			КонецЕсли;
			
			ТекГод = Строка(Формат(ТекущаяДата(),"ДФ=гггг"));
			ТекМесяц= Строка(Формат(ТекущаяДата(),"ДФ=ММ"));
			ТекДень = Строка(Формат(ТекущаяДата(),"ДФ=дд"));
			ТекЧас = Строка(Формат(ТекущаяДата(),"ДФ=ЧЧ"));
			ТекМинута = Строка(Формат(ТекущаяДата(),"ДФ=мм"));
			ТекСекунда = Строка(Формат(ТекущаяДата(),"ДФ=сс"));
			СтруктураДляJSON.Вставить("commitAt", ТекГод+"-"+ТекМесяц+"-"+ТекДень + " "+ ТекЧас + ":" + ТекМинута + ":"+ ТекСекунда + "+03:00");
			
			ОбщееКоличество = 0;
			ОбщаяСумма = 0;
			ОбщаяРучнаяСкидка = 0;
			ВыходнойМассив = Новый Массив;
			Для Каждого стр Из ПробитыйЧек.Товары Цикл
				СтруктураТовары = Новый Структура("extId,title,price");
				СтруктураТовары.extId = Строка(Прав(стр.Номенклатура.Код,6));
				СтруктураТовары.title = стр.Номенклатура.НаименованиеПолное;
				СтруктураТовары.price = стр.Цена;
				
				ОбщееКоличество = ОбщееКоличество + стр.Количество;
				ОбщаяСумма = ОбщаяСумма + стр.Сумма;
				ОбщаяРучнаяСкидка = ОбщаяРучнаяСкидка + стр.СуммаАвтоматическойСкидки + стр.СуммаРучнойСкидки;
				
				СтруктураМассивТЧ = Новый Структура("product");
				СтруктураМассивТЧ.Вставить("product",СтруктураТовары);
				
				ВыходнаяСтруктура = Новый Структура("product,quantity");
				ВыходнаяСтруктура.Вставить("product",СтруктураТовары);
				ВыходнаяСтруктура.Вставить("quantity",стр.Количество);
				ВыходнойМассив.Добавить(ВыходнаяСтруктура);
				
				СтруктураДляJSON.Вставить("items",ВыходнойМассив);
			КонецЦикла; 
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись,СтруктураДляJSON);
			ТелоЗапроса = Запись.Закрыть();
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
			   	
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			
			//Марк 2023-11-21
				Если Истина Тогда//Ответ.КодСостояния <> 200 Тогда                             
					Рег = РегистрыСведений.ТБК_ИсторияПокупокSamosaleЧекиОфлаин.СоздатьМенеджерЗаписи();
					Рег.Samosale_НомерТелефона	=	"+7"+Формат(Samosale_НомерТелефона, "ЧГ=0");
					Рег.Чек						=	ПробитыйЧек;					
					Рег.АкцияУтилизация  	    =	АкцияУтилизация;
					Рег.Промокод                =   ЭтаФорма.Samosale_Промокод;
					Рег.JsonДляСтруктуры		= 	ТелоЗапроса;
					Попытка
						Рег.Записать();	
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Ошибка записи данный для отправки в Samosale. Причина: " + ОписаниеОшибки();
						Сообщение.Сообщить(); 	
					КонецПопытки;
					Возврат;

				КонецЕсли;
			//КонецМарк	
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			СтруктураПречек = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
			Чтение.Закрыть();
			Возврат;	
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	Если ЭтаФорма.Samosale_НомерТелефона <> 0 Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
		//Соединение = Новый HTTPСоединение("app.samosale.ru/api/cash-box/search?value="+ЭтаФорма.Samosale_НомерТелефона+"&type=phone",443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		ЗаголовокЗапросаHTTP = Новый Соответствие(); 
		ЗаголовокЗапросаHTTP.Вставить("Authorization", "Bearer "+Объект.Магазин.Расш_SamosaleApiКлюч);
		Запрос = Новый HTTPЗапрос("api/cash-box/search?value="+ЭтаФорма.Samosale_НомерТелефона+"&type=phone",ЗаголовокЗапросаHTTP);
		Результат = Соединение.Получить(Запрос);
		Если Результат.КодСостояния = 200 Тогда
			КоличествоБонусов = 0;
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
			Структура = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
			Чтение.Закрыть();
			
			айдиклиента = Структура.client.id;
			Промо = Структура.promo.haspromo;
			
			    ssl = Новый ЗащищенноеСоединениеOpenSSL();
				Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
				//Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
				Заголовки = Новый Соответствие;
				Заголовки.Вставить("Authorization", "Bearer "+Объект.Магазин.Расш_SamosaleApiКлюч);
				Заголовки.Вставить("Content-Type", "application/json");
				Запрос = Новый HTTPЗапрос("api/cash-box/create-payment", Заголовки);
				
				//СтруктураДляJSON = Новый Структура;
			    СтруктураДляJSON.Вставить("clientId", айдиклиента);
				
				//СтруктураМагазин = Новый Структура;
				//СтруктураМагазин.Вставить("uid",Объект.Магазин.Код);
				//СтруктураМагазин.Вставить("name",Объект.Магазин.Наименование);
				//СтруктураДляJSON.Вставить("shop",СтруктураМагазин);
				//Если ПробитыйЧек.Продавец.Наименование = "" Тогда
				//	СтруктураПродавец = Новый Структура;
				//	СтруктураПродавец.Вставить("uid","Продавец");
				//	СтруктураПродавец.Вставить("name","Продавец");
				//	СтруктураДляJSON.Вставить("cashier",СтруктураПродавец);	
				//Иначе
				//	СтруктураПродавец = Новый Структура;
				//	СтруктураПродавец.Вставить("uid",ПробитыйЧек.Продавец.Наименование);
				//	СтруктураПродавец.Вставить("name",ПробитыйЧек.Продавец.Наименование);
				//	СтруктураДляJSON.Вставить("cashier",СтруктураПродавец);
				//КонецЕсли;
				//
				//ТекГод = Строка(Формат(ТекущаяДата(),"ДФ=гггг"));
				//ТекМесяц= Строка(Формат(ТекущаяДата(),"ДФ=ММ"));
				//ТекДень = Строка(Формат(ТекущаяДата(),"ДФ=дд"));
				//ТекЧас = Строка(Формат(ТекущаяДата(),"ДФ=ЧЧ"));
				//ТекМинута = Строка(Формат(ТекущаяДата(),"ДФ=мм"));
				//ТекСекунда = Строка(Формат(ТекущаяДата(),"ДФ=сс"));
				//СтруктураДляJSON.Вставить("commitAt", ТекГод+"-"+ТекМесяц+"-"+ТекДень + " "+ ТекЧас + ":" + ТекМинута + ":"+ ТекСекунда + "+03:00");
				//
				//ОбщееКоличество = 0;
				//ОбщаяСумма = 0;
				//ОбщаяРучнаяСкидка = 0;
				//СуммаБонусов = 0;
				//ВыходнойМассив = Новый Массив;
				//Для Каждого стр Из Объект.Товары Цикл
				//	СтруктураТовары = Новый Структура("extId,title,price");
				//	СтруктураТовары.extId = Строка(Прав(стр.Номенклатура.Код,6));
				//	СтруктураТовары.title = стр.Номенклатура.НаименованиеПолное;
				//	СтруктураТовары.price = стр.Цена;
				//	
				//	ОбщееКоличество = ОбщееКоличество + стр.Количество;
				//	ОбщаяСумма = ОбщаяСумма + стр.Сумма;
				//	ОбщаяРучнаяСкидка = ОбщаяРучнаяСкидка + стр.СуммаАвтоматическойСкидки + стр.СуммаРучнойСкидки;
				//	СуммаБонусов = СуммаБонусов + стр.СуммаРучнойСкидки;
				//	СтруктураМассивТЧ = Новый Структура("product");
				//	СтруктураМассивТЧ.Вставить("product",СтруктураТовары);
				//	
				//	ВыходнаяСтруктура = Новый Структура("product,quantity,manualDiscount");
				//	ВыходнаяСтруктура.Вставить("product",СтруктураТовары);
				//	ВыходнаяСтруктура.Вставить("quantity",стр.Количество);
				//	ВыходнаяСтруктура.Вставить("manualDiscount",стр.СуммаРучнойСкидки + стр.СуммаАвтоматическойСкидки);
				//	ВыходнойМассив.Добавить(ВыходнаяСтруктура);
				//		
				//	СтруктураДляJSON.Вставить("items",ВыходнойМассив);
				//КонецЦикла;
				//СтруктураДляJSON.Вставить("totalPaidSum",ОбщаяСумма);
				//
				//СтруктураДляJSON.Вставить("totalBonusOutlay",ЭтаФорма.Samosale_СписываемыеБаллы);
				Если Структура.promo.haspromo = Истина Тогда
					СтруктураДляJSON.Вставить("promoId", СокрЛП(ЭтаФорма.Samosale_Промокод));		
				КонецЕсли;
				//СтруктураДляJSON.Вставить("extId",ПробитыйЧек.УникальныйИдентификаторПлатежа);
				//СтруктураДляJSON.Вставить("additionalInformation","Номер чека в 1С: " + ПробитыйЧек.Номер + ", номер смены: " + Строка(ПробитыйЧек.НомерСменыККМ));
				
				Запись = Новый ЗаписьJSON;
			    Запись.УстановитьСтроку();
			    ЗаписатьJSON(Запись,СтруктураДляJSON);
			    ТелоЗапроса = Запись.Закрыть();
				Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
				ОтветПречек = Соединение.ОтправитьДляОбработки(Запрос);
				
				//Марк 2023-11-21
				Если ОтветПречек.КодСостояния <> 200 Тогда                             
					Рег = РегистрыСведений.ТБК_ИсторияПокупокSamosaleЧекиОфлаин.СоздатьМенеджерЗаписи();
					Рег.Samosale_НомерТелефона	=	"+7"+Формат(Samosale_НомерТелефона, "ЧГ=0");
					Рег.Чек						=	ПробитыйЧек;					
					Рег.АкцияУтилизация  	    =	АкцияУтилизация;
					Рег.Промокод                =   ЭтаФорма.Samosale_Промокод;
					Рег.JsonДляСтруктуры		= 	ТелоЗапроса;
					Попытка
						Рег.Записать();	
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Ошибка записи данный для отправки в Samosale. Причина: " + ОписаниеОшибки();
						Сообщение.Сообщить(); 	
					КонецПопытки;
					
					ЭтаФорма.Samosale_СписываемыеБаллы = 0;
					АкцияУтилизация = Ложь;
					//элементы.АкцияУтилизация.Видимость = Ложь;
					Возврат;

				КонецЕсли;
				//КонецМарк
				//Чтение = Новый ЧтениеJSON;
				//Чтение.УстановитьСтроку(ОтветПречек.ПолучитьТелоКакСтроку());
				//СтруктураПречек = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
				//Чтение.Закрыть();
				
				ЭтаФорма.Samosale_СписываемыеБаллы = 0;
		КонецЕсли;
	КонецЕсли;
	
	//Вик 2022-11-01
	Если АкцияУтилизация тогда
		Если не ПробитыйЧек.АналитикаХозяйственнойОперации.Наименование = "Возврат от покупателя" Тогда

			СуммаБонусов	=	Окр((ПробитыйЧек.СуммаДокумента/100) * 8,0); // доп 4 процента
			ИмяАкции		=	"Акция утилизация";
			ТекстСообщения	=	"Поздравляем! Вам начислено: "+СуммаБонусов + " балла(ов) по акции Утилизация!";
			
			Телефон = "+7"+Формат(ЭтаФорма.Samosale_НомерТелефона,"ЧГ=0"); 
			ТБКНачислитьБаллыПослеНаСервере(СуммаБонусов, ИмяАкции, ТекстСообщения);
			АкцияУтилизация = Ложь;
			//элементы.АкцияУтилизация.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Расш_SamosaleОбновитьЭлементыSamosaleПослеНаСервере()
	ЭтаФорма.Samosale_КоличествоБаллов = 0;
	ЭтаФорма.Samosale_НомерТелефона = "";
	ЭтаФорма.Samosale_Списать = 0;
	ЭтаФорма.Samosale_КоличествоПоПромокоду = 0;
	ЭтаФорма.Samosale_Промокод = "";
	ЭтаФорма.Samosale_ФИО = "";
	//ЭтаФорма.Элементы.Samosale_Промокод.Видимость = Ложь;
	//ЭтаФорма.Элементы.Samosale_Промокод.Доступность = Истина;
	//ЭтаФорма.Элементы.КоличествоБаллов.Видимость = Ложь;
	ЭтаФорма.Элементы.Samosale_Списать.Видимость = Ложь;
	ЭтаФорма.Элементы.СписатьБаллы.Видимость = Ложь;
	//ЭтаФорма.Элементы.СоздатьКлиента.Видимость = Ложь;
	//ЭтаФорма.Элементы.ПроверитьБаллы.Видимость = Ложь;
	//ЭтаФорма.Элементы.Samosale_ФИО.Видимость = Ложь;
	////Марк 2023-11-20
	//ЭтаФорма.Элементы.Samosale_Бонус.Видимость = Ложь;
	Samosale_Бонус = Справочники.ТБКSamosale_ДопБалы.ПустаяСсылка();
	//ЭтаФорма.Элементы.НачислитьБаллы.Видимость = Ложь;
	//ЭтаФорма.Элементы.НачислитьБаллы.Доступность = Истина;
	//ЭтаФорма.Элементы.АкцияУтилизация.Видимость = Ложь;
	////КонецМарк
	//ЭтаФорма.Элементы.Samosale_Кэшбек.Видимость = Ложь;
	//ЭтаФорма.Элементы.Samosale_СледующийУровень.Видимость = Ложь;
	ЭтаФорма.Элементы.НайтиКлиента.ЦветФона = Новый Цвет(16,163,84);
	ЭтаФорма.Элементы.НайтиКлиента.ЦветТекста = WebЦвета.Белый;
	ЭтаФорма.СуммаСкидки = 0;
	ЭтаФорма.СуммаКОплате = ЭтаФорма.СуммаДокументаБезСкидок;
	ЭтаФорма.Samosale_СписываемыеБаллы = 0;
	
	Для Каждого стр Из ЭтаФорма.Объект.Товары Цикл
		стр.СуммаСкидкиОплатыБонусом = 0;
		стр.СуммаРучнойСкидки = 0;
		стр.Сумма = стр.Количество * стр.Цена; 	
	КонецЦикла;
	
	
	ЭтаФорма.Элементы.Товары.Доступность = Истина;
		ЭтаФорма.Элементы.СписатьБаллы.Доступность = Истина;
		ЭтаФорма.Элементы.Товары.ИзменятьСоставСтрок = Истина;
		
		ЭтаФорма.Элементы.КартинкаЧО01Меню.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаЧО02Поиск.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаЧО03РедактированиеСтроки.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаЧО04Возврат.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаЧО09ОперацияДС.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаЧО08ОплатаБонусами.Доступность = Истина;
		
		ЭтаФорма.Элементы.КартинкаПО01БыстрыеТовары.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО02ВвестиВнесениеДенег.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО03ЗаменитьПрава.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаЧО01Меню.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО06ВвестиШтрихкод.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО07ОткрытьДенежныйЯщик.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО08РасчетСкидок.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО09Печать.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО10НапечататьПоследнийСлипЧек.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО12ПолучитьВес.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО13ВвестиВыемкаДенег.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО14Продавец.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО15ПродолжитьЧек.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО16ВвестиВозвратТовараОтРозничногоПокупателя.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО17ВвестиИнформационнуюКарту.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО18ОткрытьПодарочныеСертификаты.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО19УправляемыеСкидки.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО20ЗаменаКарты.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО21ПробитьЧек.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО22РучныеСкидки.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО23ВвестиСерии.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО24ПолучитьИзТСД.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО25ПечатьПробитогоЧека.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО26ОтчетБезГашения.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО27ПродажаПоЗаказу.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО28ПросмотрНакоплений.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО29ОтменитьОплатуБонусами.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО30ВозвратПоследнегоЧека.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО31ПолучитьДокументРасчета.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО32АкцизныеМарки.Доступность = Истина;
		ЭтаФорма.Элементы.КартинкаПО33ПоискПоНаименованию.Доступность = Истина;
		Samosale_ЗапретДобавленияСтрок = Ложь;
		ЭтаФорма.Элементы.ОбновитьЭлементыSamosale.Доступность = Истина;
		//ЭтаФорма.Элементы.Samosale_НомерТелефона.Доступность = Истина;
		//ЭтаФорма.Элементы.Samosale_Промокод.Доступность = Истина;
		//ЭтаФорма.Элементы.Samosale_Списать.Доступность = Истина;
		//ЭтаФорма.Элементы.Samosale_КоличествоПоПромокоду.Видимость = Ложь;
		ЭтаФорма.Элементы.НайтиКлиента.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Расш_SamosaleОбновитьЭлементыSamosaleПосле(Команда)
	Расш_SamosaleОбновитьЭлементыSamosaleПослеНаСервере();
КонецПроцедуры

&НаКлиенте
&Вместо("ПроверитьСтатусЧека")
Процедура Расш_SamosaleПроверитьСтатусЧека(СтруктураJSON,ПробитыйЧек)
	Попытка
		ОтправитьЧек(СтруктураJSON,ПробитыйЧек);	
	Исключение
	    ОтправитьЧекБезИнета(СтруктураJSON, ПробитыйЧек); 
	КонецПопытки; 
	//Вик 2022-10-25
	ТелСтрокой	=	СтрЗаменить(Строка(ЭтаФорма.Samosale_НомерТелефона),Символы.НПП,"");
	Если СтрДлина(ТелСтрокой) = 10 тогда
		ЗаписатьНомертелефонаВЧек(ПробитыйЧек,ТелСтрокой);
	КонецЕсли;	
	//КонецВик
	
		//УдалитьПробитыеЧекиИзНабораИОтменитьНеПробитые(Истина);
		//ПробитьЧекОчередиЗавершение(МассивСсылокЧеков, Отказ);
	ЭтаФорма.Samosale_КоличествоБаллов = 0;
	ЭтаФорма.Samosale_НомерТелефона = "";
	ЭтаФорма.Samosale_Списать = 0;
	ЭтаФорма.Samosale_КоличествоПоПромокоду = 0;
	//ЭтаФорма.Элементы.Samosale_КоличествоПоПромокоду.Видимость = Ложь;
	//ЭтаФорма.Элементы.Samosale_Промокод.Видимость = Ложь;
	//ЭтаФорма.Элементы.КоличествоБаллов.Видимость = Ложь;
	ЭтаФорма.Элементы.Samosale_Списать.Видимость = Ложь;
	ЭтаФорма.Элементы.СписатьБаллы.Видимость = Ложь;
	//ЭтаФорма.Элементы.СоздатьКлиента.Видимость = Ложь;
	//ЭтаФорма.Элементы.Samosale_ФИО.Видимость = Ложь;
	//ЭтаФорма.Элементы.Samosale_Бонус.Видимость = Ложь;
	//ЭтаФорма.Элементы.НачислитьБаллы.Видимость = Ложь;
	//Этаформа.Элементы.АкцияУтилизация.Видимость = Ложь;

	//
	//ЭтаФорма.Элементы.Samosale_Кэшбек.Видимость = Ложь;
	//ЭтаФорма.Элементы.Samosale_СледующийУровень.Видимость = Ложь;
	ЭтаФорма.Элементы.Товары.Доступность = Истина;
	ЭтаФорма.Элементы.СписатьБаллы.Доступность = Истина;
	ЭтаФорма.Элементы.Товары.ИзменятьСоставСтрок = Истина;
	ЭтаФорма.Элементы.НайтиКлиента.ЦветФона = Новый Цвет(16,163,84);
	ЭтаФорма.Элементы.НайтиКлиента.ЦветТекста = WebЦвета.Белый;
	
	ЭтаФорма.Элементы.КартинкаЧО01Меню.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаЧО02Поиск.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаЧО03РедактированиеСтроки.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаЧО04Возврат.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаЧО09ОперацияДС.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаЧО08ОплатаБонусами.Доступность = Истина;
	
	ЭтаФорма.Элементы.КартинкаПО01БыстрыеТовары.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО02ВвестиВнесениеДенег.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО03ЗаменитьПрава.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаЧО01Меню.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО06ВвестиШтрихкод.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО07ОткрытьДенежныйЯщик.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО08РасчетСкидок.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО09Печать.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО10НапечататьПоследнийСлипЧек.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО12ПолучитьВес.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО13ВвестиВыемкаДенег.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО14Продавец.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО15ПродолжитьЧек.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО16ВвестиВозвратТовараОтРозничногоПокупателя.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО17ВвестиИнформационнуюКарту.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО18ОткрытьПодарочныеСертификаты.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО19УправляемыеСкидки.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО20ЗаменаКарты.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО21ПробитьЧек.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО22РучныеСкидки.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО23ВвестиСерии.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО24ПолучитьИзТСД.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО25ПечатьПробитогоЧека.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО26ОтчетБезГашения.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО27ПродажаПоЗаказу.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО28ПросмотрНакоплений.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО29ОтменитьОплатуБонусами.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО30ВозвратПоследнегоЧека.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО31ПолучитьДокументРасчета.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО32АкцизныеМарки.Доступность = Истина;
	ЭтаФорма.Элементы.КартинкаПО33ПоискПоНаименованию.Доступность = Истина;
	Samosale_ЗапретДобавленияСтрок = Ложь;
	ЭтаФорма.Элементы.ОбновитьЭлементыSamosale.Доступность = Истина;
	ЭтаФорма.Элементы.Samosale_НомерТелефона.Доступность = Истина;
	ЭтаФорма.Элементы.Samosale_Промокод.Доступность = Истина;
	ЭтаФорма.Элементы.Samosale_Списать.Доступность = Истина;
	ЭтаФорма.Элементы.НайтиКлиента.Доступность = Истина;
КонецПроцедуры

&НаСервере
Процедура Расш_SamosaleНайтиКлиентаПослеНаСервере()
	Если СтрДлина(ЭтаФорма.Samosale_НомерТелефона) < 10 Тогда
		Сообщить("Некорректно указан номер телефона! Введите номер телефона длиной в 10 символов формата '9371234567'. ");
	ИначеЕсли ЭтаФорма.Samosale_НомерТелефона <> "" Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
	 	//Соединение = Новый HTTPСоединение("app.samosale.ru/api/cash-box/search?value="+ЭтаФорма.Samosale_НомерТелефона+"&type=phone",443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		ЗаголовокЗапросаHTTP = Новый Соответствие(); 
		SamosaleТокен	=	"_u2byml67gDNlFqGS6jf-BdadAd4ft4bC5tJt52K7qlu7hLbzr_Bev58frKQB-HE";
		ЗаголовокЗапросаHTTP.Вставить("Authorization", "Bearer "+SamosaleТокен);
		Запрос = Новый HTTPЗапрос("api/cash-box/search?value="+ЭтаФорма.Samosale_НомерТелефона+"&type=phone",ЗаголовокЗапросаHTTP);
		Результат = Соединение.Получить(Запрос);
		Если Результат.КодСостояния = 200 Тогда
			КоличествоБонусов = 0;
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
			Структура = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
			Чтение.Закрыть(); 			
			Если Структура.status <> "not found" Тогда
				ЭтаФорма.Samosale_КоличествоБаллов = Число(Структура.loyalty.availableBonusSum);
		    	ЭтаФорма.Элементы.ГруппаОК.Видимость = Истина;				
				ЭтаФорма.Элементы.Samosale_Списать.Видимость = Ложь;
				//ЭтаФорма.Элементы.ПроверитьБаллы.Видимость = Ложь;
				ЭтаФорма.Элементы.СписатьБаллы.Видимость = Ложь;
				//
				//ЭтаФорма.Элементы.Samosale_ФИО.Видимость = Истина;
				//ЭтаФорма.Элементы.КоличествоБаллов.Видимость = Истина;
				//ЭтаФорма.Элементы.Samosale_Бонус.Видимость = Истина;
				//ЭтаФорма.Элементы.НачислитьБаллы.Видимость = Истина;
				//ЭтаФорма.Элементы.НачислитьБаллы.Доступность = Истина;
				//ЭтаФорма.Элементы.Samosale_Кэшбек.Видимость = Истина;
				//ЭтаФорма.Элементы.Samosale_СледующийУровень.Видимость = Истина;
				//ЭтаФорма.Элементы.КоличествоБаллов.Видимость = Истина;
				ЭтаФорма.Samosale_ФИО = Строка(Структура.client.fio);
				ЭтаФорма.Samosale_Кэшбек = Строка(Структура.loyalty.cashbackPercent);
				ЭтаФорма.Samosale_СледующийУровень = Строка(Структура.loyalty.nextLevelMissingSum);
				//ЭтаФорма.Элементы.СоздатьКлиента.Видимость = Ложь;
				//ЭтаФорма.Элементы.АкцияУтилизация.Видимость = Истина;
				
				//Марк 2023-11-20
				Запрос = Новый Запрос("ВЫБРАТЬ
				                      |	ТБКРегистрацияКлиентов.Имя КАК Имя
				                      |ИЗ
				                      |	РегистрСведений.ТБКРегистрацияКлиентов КАК ТБКРегистрацияКлиентов
				                      |ГДЕ
				                      |	ТБКРегистрацияКлиентов.Телефон ПОДОБНО &Телефон
				                      |	И ТБКРегистрацияКлиентов.Зарегестрирован");
				Запрос.УстановитьПараметр("Телефон", "%"+Формат(Samosale_НомерТелефона, "ЧГ=0")+"%");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Samosale_ФИО = Выборка.Имя;	
				Иначе
					Samosale_ФИО = "Клиент";	
				КонецЕсли; 
				
				//КонецМарк

			Иначе
				//ЭтаФорма.Элементы.НачислитьБаллы.Видимость = Ложь;
				//ЭтаФорма.Элементы.СоздатьКлиента.Видимость = Истина;
				//ЭтаФорма.Элементы.ЗарегистрироватьКлиентаВПрограммеЛояльностиОфлаин.Видимость = Истина;
				//ЭтаФорма.Элементы.ПроверитьБаллы.Видимость = Ложь;
				//ЭтаФорма.Элементы.Samosale_Промокод.Видимость = Ложь;
				//
				//ЭтаФорма.Элементы.Samosale_ФИО.Видимость = Ложь;
				//ЭтаФорма.Элементы.КоличествоБаллов.Видимость = Ложь;
				//ЭтаФорма.Элементы.Samosale_Бонус.Видимость = Ложь;
				//ЭтаФорма.Элементы.КоличествоБаллов.Видимость = Ложь;
				//ЭтаФорма.Элементы.Samosale_Кэшбек.Видимость = Ложь;
				//ЭтаФорма.Элементы.Samosale_СледующийУровень.Видимость = Ложь;
				//ЭтаФорма.Элементы.Samosale_Промокод.Видимость = Ложь;
				//ЭтаФорма.Элементы.Samosale_КоличествоПоПромокоду.Видимость = Ложь; 
				ЭтаФорма.Элементы.Samosale_Списать.Видимость = Ложь;
				ЭтаФОрма.Элементы.СписатьБаллы.Видимость = Ложь;
				//ЭтаФорма.Элементы.АкцияУтилизация.Видимость = Ложь;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Структура.message;
				Сообщение.Сообщить(); 
				Возврат;
			КонецЕсли;
			Если Структура.promo.hasPromo = Истина Тогда
				ЭтаФорма.Элементы.ГруппаОК.Видимость = Истина;
				//ЭтаФорма.Элементы.Samosale_Промокод.Видимость = Истина;
		    	ЭтаФорма.Samosale_Списать = 0;
		    	
				ЭтаФорма.Элементы.Samosale_Списать.Видимость = Ложь;
				//ЭтаФорма.Элементы.ПроверитьБаллы.Видимость = Ложь;
				ЭтаФорма.Элементы.СписатьБаллы.Видимость = Ложь;
				//ЭтаФорма.Элементы.Samosale_КоличествоПоПромокоду.Видимость = Истина;
			Иначе
				//ЭтаФорма.Элементы.Samosale_Промокод.Видимость = Ложь;
				//ЭтаФорма.Элементы.Samosale_КоличествоПоПромокоду.Видимость = Ложь;
				ЭтаФорма.Samosale_Промокод = "";
			КонецЕсли; 
			Расш_SamosaleПроверитьБаллыПослеНаСервере(Ложь);
		Иначе
			Сообщить("Ошибка при соединении с сервером Samosale.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Расш_SamosaleНайтиКлиентаПосле(Команда)
	Расш_SamosaleНайтиКлиентаПослеНаСервере(); 
	ЭтаФорма.Элементы.НайтиКлиента.ЦветФона = WebЦвета.Белый;
	ЭтаФорма.Элементы.НайтиКлиента.ЦветТекста = WebЦвета.Черный;
КонецПроцедуры

&НаКлиенте
Процедура Расш_SamosaleSamosale_НомерТелефонаПриИзмененииПосле(Элемент)
	стрТелефон = СтрЗаменить(Строка(ЭтаФорма.Samosale_НомерТелефона),Символы.НПП,"");
	Если Число(стрТелефон) > 10 Тогда
		ЭтаФорма.Samosale_НомерТелефона = Лев(стрТелефон,10);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Расш_SamosaleТоварыПриАктивизацииСтрокиВместо(Элемент)
	//ПодключитьОбработчикОжидания("ОбновитьФормуНаКлиенте", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Расш_SamosaleSamosale_ПромокодПриИзмененииВместо(Элемент)
	ЭтаФорма.Samosale_Списать = 0;
	Расш_SamosaleПроверитьБаллыПослеНаСервере(Ложь);
	ПрименитьПромокод();
	//ЭтаФорма.Элементы.Samosale_Промокод.Доступность = Ложь;
КонецПроцедуры

&НаСервере
Процедура ПрименитьПромокод()
	Если ЭтаФорма.Samosale_НомерТелефона <> "" Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
	 	//Соединение = Новый HTTPСоединение("app.samosale.ru/api/cash-box/search?value="+ЭтаФорма.Samosale_НомерТелефона+"&type=phone",443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		ЗаголовокЗапросаHTTP = Новый Соответствие(); 
		ЗаголовокЗапросаHTTP.Вставить("Authorization", "Bearer "+Объект.Магазин.Расш_SamosaleApiКлюч);
		Запрос = Новый HTTPЗапрос("api/cash-box/search?value="+ЭтаФорма.Samosale_НомерТелефона+"&type=phone",ЗаголовокЗапросаHTTP);
		Результат = Соединение.Получить(Запрос);
		Если Результат.КодСостояния = 200 Тогда
			КоличествоБонусов = 0;
			КоличествоБонусовПоПромокоду = 0;
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
			Структура = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
			Чтение.Закрыть();
			Если Структура.status <> "not found" Тогда
				айдиклиента = Структура.client.id;
				Промо = Структура.promo.haspromo;
				Если Структура.promo.haspromo = Истина Тогда
					//ЭтаФорма.Элементы.Samosale_Промокод.Видимость = Истина;		
				КонецЕсли;
				    ssl = Новый ЗащищенноеСоединениеOpenSSL();
					Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
					//Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
					Заголовки = Новый Соответствие;
					Заголовки.Вставить("Authorization", "Bearer "+Объект.Магазин.Расш_SamosaleApiКлюч);
					Заголовки.Вставить("Content-Type", "application/json");
					Запрос = Новый HTTPЗапрос("api/cash-box/calculate-payment", Заголовки);
					
					СтруктураДляJSON = Новый Структура;
				    СтруктураДляJSON.Вставить("clientId", айдиклиента);
					
					СтруктураМагазин = Новый Структура;
					СтруктураМагазин.Вставить("uid",Объект.Магазин.Код);
					СтруктураМагазин.Вставить("name",Объект.Магазин.Наименование);
					СтруктураДляJSON.Вставить("shop",СтруктураМагазин);
					
					СтруктураПродавец = Новый Структура;
					СтруктураПродавец.Вставить("uid",Объект.Продавец.Наименование);
					СтруктураПродавец.Вставить("name",Объект.Продавец.Наименование);
					СтруктураДляJSON.Вставить("cashier",СтруктураПродавец);
					
					ТекГод = Строка(Формат(ТекущаяДата(),"ДФ=гггг"));
					ТекМесяц= Строка(Формат(ТекущаяДата(),"ДФ=ММ"));
					ТекДень = Строка(Формат(ТекущаяДата(),"ДФ=дд"));
					ТекЧас = Строка(Формат(ТекущаяДата(),"ДФ=ЧЧ"));
					ТекМинута = Строка(Формат(ТекущаяДата(),"ДФ=мм"));
					ТекСекунда = Строка(Формат(ТекущаяДата(),"ДФ=сс"));
					СтруктураДляJSON.Вставить("commitAt", ТекГод+"-"+ТекМесяц+"-"+ТекДень + " "+ ТекЧас + ":" + ТекМинута + ":"+ ТекСекунда + "+03:00");
					
					ОбщееКоличество = 0;
					ОбщаяСумма = 0;
					ОбщаяРучнаяСкидка = 0;
					ВыходнойМассив = Новый Массив;
					Для Каждого стр Из Объект.Товары Цикл
						СтруктураТовары = Новый Структура("extId,title,price");
						СтруктураТовары.extId = Строка(Прав(стр.Номенклатура.Код,6));
						СтруктураТовары.title = стр.Номенклатура.НаименованиеПолное;
						СтруктураТовары.price = стр.Цена;
						
						ОбщееКоличество = ОбщееКоличество + стр.Количество;
						ОбщаяСумма = ОбщаяСумма + стр.Количество*стр.Цена;
						ОбщаяРучнаяСкидка = ОбщаяРучнаяСкидка + стр.СуммаАвтоматическойСкидки + стр.СуммаРучнойСкидки;
						
						СтруктураМассивТЧ = Новый Структура("product");
						СтруктураМассивТЧ.Вставить("product",СтруктураТовары);
						
						ВыходнаяСтруктура = Новый Структура("product,quantity");
						ВыходнаяСтруктура.Вставить("product",СтруктураТовары);
						ВыходнаяСтруктура.Вставить("quantity",стр.Количество);
						ВыходнойМассив.Добавить(ВыходнаяСтруктура);
						
						СтруктураДляJSON.Вставить("items",ВыходнойМассив);
					КонецЦикла;
					СтруктураДляJSON.Вставить("totalSum",ОбщаяСумма);
					СтруктураДляJSON.Вставить("totalBonusOutlay",ЭтаФорма.Samosale_Списать);
					Если Структура.promo.haspromo = Истина Тогда
						СтруктураДляJSON.Вставить("promoId", СокрЛП(ЭтаФорма.Samosale_Промокод));		
					КонецЕсли;
					
					Запись = Новый ЗаписьJSON;
				    Запись.УстановитьСтроку();
				    ЗаписатьJSON(Запись,СтруктураДляJSON);
				    ТелоЗапроса = Запись.Закрыть();
				    Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
					ОтветПречек = Соединение.ОтправитьДляОбработки(Запрос);
					
					Чтение = Новый ЧтениеJSON;
					Чтение.УстановитьСтроку(ОтветПречек.ПолучитьТелоКакСтроку());
					СтруктураПречек = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
					Чтение.Закрыть();
					Если СтруктураПречек.status <> 400 Тогда
						КоличествоБонусовПоПромокоду = КоличествоБонусовПоПромокоду + СтруктураПречек.totalPromoDiscount;

					ЭтаФорма.Элементы.ПроверитьБаллы.Видимость = Ложь;
					
					ПромокодНаСтроку = КоличествоБонусовПоПромокоду / Объект.Товары.Количество();
					
					ЧтениеJson=Новый ЧтениеJSON;
					ЧтениеJson.УстановитьСтроку(ОтветПречек.ПолучитьТелоКакСтроку());
					Данные=ПрочитатьJSON(ЧтениеJSON);
	
			ТЗПречек = Новый ТаблицаЗначений;
			ТЗПречек.Колонки.Добавить("нстр");
			ТЗПречек.Колонки.Добавить("manualDiscount");
			ТЗПречек.Колонки.Добавить("promoDiscount");
			ТЗПречек.Колонки.Добавить("bonusOutlay");
			ТЗПречек.Колонки.Добавить("maxBonusOutlay");
			ТЗПречек.Колонки.Добавить("minBonusReward");
			ТЗПречек.Колонки.Добавить("maxBonusReward");
			ТЗПречек.Колонки.Добавить("hasBonusOutlay");
			ТЗПречек.Колонки.Добавить("hasBonusReward");
			ТЗПречек.Колонки.Добавить("hasPromoDiscount");
			нстр = 1;
			Для Каждого стрДанные Из Данные.items Цикл
				стрТЗПречек = ТЗПречек.Добавить();
				ЗаполнитьЗначенияСвойств(стрТЗПречек,стрДанные);
				стрТЗПречек.нстр = нстр;
				нстр = нстр + 1;
			КонецЦикла;
			СкидкаБаллами = 0;				
			Для Каждого стрТовары Из Объект.Товары Цикл
				Для Каждого стрТЗПречек1 Из ТЗПречек Цикл
					Если стрТЗПречек1.нстр = стрТовары.НомерСтроки Тогда          
						стрТовары.СуммаСкидкиОплатыБонусом = стрТЗПречек1.promoDiscount;
						стрТовары.Сумма = стрТовары.Сумма - стрТЗПречек1.promoDiscount;
						СкидкаБаллами = СкидкаБаллами + стрТЗПречек1.promoDiscount;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			этаформа.СуммаСкидки = СкидкаБаллами;
			этаформа.СуммаКОплате = этаформа.СуммаВсего - этаформа.СуммаСкидки;
			Иначе
				Сообщить(Строка(СтруктураПречек.message));				
			КонецЕсли;
		КонецЕсли;
		КонецЕсли;
		КонецЕсли;	КонецПроцедуры
	
&НаКлиенте
Процедура Расш_SamosaleТоварыПриИзмененииПосле(Элемент)
	Расш_SamosaleПроверитьБаллыПослеНаСервере(Истина);
КонецПроцедуры

&НаСервере
&После("НазначитьРучнуюСкидку")
Процедура Расш_SamosaleНазначитьРучнуюСкидку(СуммаСкидкиНаценки)
	//Расш_SamosaleРучнаяСкидкаПослеНаСервере(Истина);
КонецПроцедуры

&НаСервере
Процедура Расш_SamosaleРучнаяСкидкаПослеНаСервере(ИзменениеSamosale_Списать)
	Если ЭтаФорма.Samosale_НомерТелефона <> 0 Тогда 
		ssl = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
	 	//Соединение = Новый HTTPСоединение("app.samosale.ru/api/cash-box/search?value="+ЭтаФорма.Samosale_НомерТелефона+"&type=phone",443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		ЗаголовокЗапросаHTTP = Новый Соответствие(); 
		ЗаголовокЗапросаHTTP.Вставить("Authorization", "Bearer "+Объект.Магазин.Расш_SamosaleApiКлюч);
		Запрос = Новый HTTPЗапрос("api/cash-box/search?value="+ЭтаФорма.Samosale_НомерТелефона+"&type=phone",ЗаголовокЗапросаHTTP);
		Результат = Соединение.Получить(Запрос);
		Если Результат.КодСостояния = 200 Тогда
			КоличествоБонусов = 0;
			КоличествоБонусовПоПромокоду = 0;
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
			Структура = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
			Чтение.Закрыть();
			Если Структура.status <> "not found" Тогда
				айдиклиента = Структура.client.id;
				Промо = Структура.promo.haspromo;
				Если Структура.promo.haspromo = Истина Тогда
					//ЭтаФорма.Элементы.Samosale_Промокод.Видимость = Истина;		
				КонецЕсли;
				    ssl = Новый ЗащищенноеСоединениеOpenSSL();
					Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
					//Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
					Заголовки = Новый Соответствие;
					Заголовки.Вставить("Authorization", "Bearer "+Объект.Магазин.Расш_SamosaleApiКлюч);
					Заголовки.Вставить("Content-Type", "application/json");
					Запрос = Новый HTTPЗапрос("api/cash-box/calculate-payment", Заголовки);
					
					СтруктураДляJSON = Новый Структура;
				    СтруктураДляJSON.Вставить("clientId", айдиклиента);
					
					СтруктураМагазин = Новый Структура;
					СтруктураМагазин.Вставить("uid",Объект.Магазин.Код);
					СтруктураМагазин.Вставить("name",Объект.Магазин.Наименование);
					СтруктураДляJSON.Вставить("shop",СтруктураМагазин);
					
					СтруктураПродавец = Новый Структура;
					СтруктураПродавец.Вставить("uid",Объект.Продавец.Наименование);
					СтруктураПродавец.Вставить("name",Объект.Продавец.Наименование);
					СтруктураДляJSON.Вставить("cashier",СтруктураПродавец);
					
					ТекГод = Строка(Формат(ТекущаяДата(),"ДФ=гггг"));
					ТекМесяц= Строка(Формат(ТекущаяДата(),"ДФ=ММ"));
					ТекДень = Строка(Формат(ТекущаяДата(),"ДФ=дд"));
					ТекЧас = Строка(Формат(ТекущаяДата(),"ДФ=ЧЧ"));
					ТекМинута = Строка(Формат(ТекущаяДата(),"ДФ=мм"));
					ТекСекунда = Строка(Формат(ТекущаяДата(),"ДФ=сс"));
					СтруктураДляJSON.Вставить("commitAt", ТекГод+"-"+ТекМесяц+"-"+ТекДень + " "+ ТекЧас + ":" + ТекМинута + ":"+ ТекСекунда + "+03:00");
					
					ОбщееКоличество = 0;
					ОбщаяСумма = 0;
					ОбщаяРучнаяСкидка = 0;
					ВыходнойМассив = Новый Массив;
					Для Каждого стр Из Объект.Товары Цикл
						СтруктураТовары = Новый Структура("extId,title,price");
						СтруктураТовары.extId = Строка(Прав(стр.Номенклатура.Код,6));
						СтруктураТовары.title = стр.Номенклатура.НаименованиеПолное;
						СтруктураТовары.price = стр.Цена;
						
						ОбщееКоличество = ОбщееКоличество + стр.Количество;
						ОбщаяСумма = ОбщаяСумма + стр.Количество*стр.Цена;
						ОбщаяРучнаяСкидка = ОбщаяРучнаяСкидка + стр.СуммаАвтоматическойСкидки + стр.СуммаРучнойСкидки;
						
						СтруктураМассивТЧ = Новый Структура("product");
						СтруктураМассивТЧ.Вставить("product",СтруктураТовары);
						
						ВыходнаяСтруктура = Новый Структура("product,quantity,manualDiscount");
						ВыходнаяСтруктура.Вставить("product",СтруктураТовары);
						ВыходнаяСтруктура.Вставить("quantity",стр.Количество);
						ВыходнаяСтруктура.Вставить("manualDiscount",стр.СуммаРучнойСкидки);
						ВыходнойМассив.Добавить(ВыходнаяСтруктура);
						
						СтруктураДляJSON.Вставить("items",ВыходнойМассив);
					КонецЦикла;
					СтруктураДляJSON.Вставить("totalSum",ОбщаяСумма);
					Если ИзменениеSamosale_Списать = Истина Тогда
						СтруктураДляJSON.Вставить("totalBonusOutlay",0);	
					Иначе
						СтруктураДляJSON.Вставить("totalBonusOutlay",ЭтаФорма.Samosale_Списать);
					КонецЕсли;
					Если Структура.promo.haspromo = Истина Тогда
						СтруктураДляJSON.Вставить("promoId", СокрЛП(ЭтаФорма.Samosale_Промокод));		
					КонецЕсли;
					
					Запись = Новый ЗаписьJSON;
				    Запись.УстановитьСтроку();
				    ЗаписатьJSON(Запись,СтруктураДляJSON);
				    ТелоЗапроса = Запись.Закрыть();
				    Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
					ОтветПречек = Соединение.ОтправитьДляОбработки(Запрос);
					
					Чтение = Новый ЧтениеJSON;
					Чтение.УстановитьСтроку(ОтветПречек.ПолучитьТелоКакСтроку());
					СтруктураПречек = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
					Чтение.Закрыть();
					Если СтруктураПречек.status <> 400 Тогда
						КоличествоБонусов = КоличествоБонусов + СтруктураПречек.totalMaxBonusOutlay;
						КоличествоБонусовПоПромокоду = КоличествоБонусовПоПромокоду + СтруктураПречек.totalPromoDiscount;
						ЭтаФорма.Элементы.ПроверитьБаллы.Видимость = Ложь;
						Если ЭтаФорма.Samosale_Списать = 0 Тогда 
							ЭтаФорма.Samosale_Списать = Число(СтруктураПречек.totalMaxBonusOutlay);
						КонецЕсли;
						Samosale_МожноСписать = Число(СтруктураПречек.totalMaxBonusOutlay); 					
					Иначе
						КоличествоБонусов = 0;
						КоличествоБонусовПоПромокоду = 0;
						ЭтаФорма.Элементы.ПроверитьБаллы.Видимость = Ложь;
					КонецЕсли;
					
					ЧтениеJson=Новый ЧтениеJSON;
					ЧтениеJson.УстановитьСтроку(ОтветПречек.ПолучитьТелоКакСтроку());
					Данные=ПрочитатьJSON(ЧтениеJSON);
					
					ЭтаФорма.Samosale_КоличествоПоПромокоду = Число(КоличествоБонусовПоПромокоду);
					Если ИзменениеSamosale_Списать = Истина Тогда  
						ЭтаФорма.Samosale_Списать = Число(КоличествоБонусов);
					КонецЕсли;
					ЭтаФорма.СуммаКОплате = СтруктураПречек.totalPaidSum;
					ЭтаФорма.СуммаСкидки = СтруктураПречек.totalPromoDiscount + СтруктураПречек.totalManualDiscount;
			    	ЭтаФорма.Элементы.ГруппаОК.Видимость = Истина;
					ЭтаФорма.Элементы.Samosale_Списать.Видимость = Истина;
					//ЭтаФорма.Элементы.КоличествоБаллов.Видимость = Истина;
					ЭтаФорма.Элементы.СписатьБаллы.Видимость = Истина;
					Если Структура.promo.hasPromo = Истина Тогда
						//ЭтаФорма.Элементы.Samosale_КоличествоПоПромокоду.Видимость = Истина;
						//ЭтаФорма.Элементы.Samosale_КоличествоПоПромокоду.Доступность = Ложь;
						//ЭтаФорма.Элементы.Samosale_Промокод.Доступность = Истина;
						//ЭтаФорма.Элементы.Samosale_Промокод.Видимость = Истина;
					КонецЕсли;
					
				Иначе
				ЭтаФорма.Элементы.СоздатьКлиента.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
&После("ОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВЧеке")
Процедура Расш_SamosaleОповещениеОткрытьФормуВводаЧислаИзменитьПроцентРучнойСкидкиНаценкиВЧеке(РезультатОткрытияФормы, ДополнительныеПараметры)
	Расш_SamosaleРучнаяСкидкаПослеНаСервере(Истина);
КонецПроцедуры


&НаКлиенте
&Вместо("ПродолжитьОплатуТоваров")
//Процедура Расш_SamosaleПродолжитьОплатуТоваров(ПараметрыОплаты)
Процедура Расш_SamosaleПродолжитьОплатуТоваров(ИмяФормыОплаты, ОплатаПлатежнойКартой, Печать)
	Перем ПараметрыИнформации;
	
	Отказ = Ложь;
	//Изменил Вик 2022-10-25
	//ИмяФормыОплаты = ПараметрыОплаты.ИмяФормыОплаты;
	//ОплатаПлатежнойКартой = ПараметрыОплаты.ОплатаПлатежнойКартой;
	//ОплатаПлатежнойСистемой = ПараметрыОплаты.ОплатаПлатежнойСистемой;
	//Печать = ПараметрыОплаты.Печать;
	//ОплатаЭСНСПК = ПараметрыОплаты.ОплатаЭСНСПК;
	//ОплатаТолькоНаличными = ИмяФормыОплаты = "ФормаПростойОплаты";
	//ОплатаЯндексКассой = ИмяФормыОплаты = "ФормаОплатыЯндексКасса";
	//ПроверитьКассовыеСмены(Отказ, ПараметрыИнформации);
	//ПроверитьКонтрагентаФизЛицо(Отказ, ПараметрыИнформации);
	ИмяФормыОплаты = ИмяФормыОплаты;
	ОплатаПлатежнойКартой = ОплатаПлатежнойКартой;
	ОплатаПлатежнойСистемой = ложь;
	ОплатаЭСНСПК = Ложь;
	ОплатаТолькоНаличными = ИмяФормыОплаты = "ФормаПростойОплаты";
	ОплатаЯндексКассой = ИмяФормыОплаты = "ФормаОплатыЯндексКасса";
	ПроверитьКассовыеСмены(Отказ, ПараметрыИнформации);
	ПроверитьКонтрагентаФизЛицо(Отказ, ПараметрыИнформации);

	
	Если Отказ Тогда
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности  
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
		Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ПодготовкаОплатыРМК");
	
	// Скидки
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("Отказ", Отказ);
	ПараметрыДействия.Вставить("ПараметрыИнформации", ПараметрыИнформации);
	ПараметрыДействия.Вставить("ИмяФормыОплаты", ИмяФормыОплаты);
	ПараметрыДействия.Вставить("ОплатаПлатежнойКартой", ОплатаПлатежнойКартой);
	ПараметрыДействия.Вставить("ОплатаТолькоНаличными", ОплатаТолькоНаличными);
	ПараметрыДействия.Вставить("ОплатаПлатежнойСистемой", ОплатаПлатежнойСистемой);
	ПараметрыДействия.Вставить("ОплатаЭСНСПК", ОплатаЭСНСПК);
	ПараметрыДействия.Вставить("ОплатаЯндексКассой", ОплатаЯндексКассой);
	ПараметрыДействия.Вставить("Печать", Печать);
	ПараметрыДействия.Вставить("ИмяОбработкиОповещения", "ОплатитьТоварыПослеВыводаСообщений");
	ПараметрыДействия.Вставить("НадписьЗаголовок", НадписьЗаголовок);
	ПараметрыДействия.Вставить("ЦветТекстаЗаголовка", Элементы.НадписьЗаголовок.ЦветТекста);
	ПараметрыДействия.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыДействия.Вставить("ОперацияСДенежнымиСредствами", Объект.ОперацияСДенежнымиСредствами);
	ПараметрыДействия.Вставить("СуммаОстаткаДокументаРасчета", СуммаОстаткаДокументаРасчета);
	ПараметрыДействия.Вставить("ЭтоЗачетАванса", ЭтоЗачетАванса);
	ПараметрыДействия.Вставить("ЭтоВозвратАванса", ЭтоВозвратАванса);
	ПараметрыДействия.Вставить("ЭтоОплатаРассрочки", ЭтоОплатаРассрочки);
	ПараметрыДействия.Вставить("ИзменятьКонтрагента",
		НЕ ЗначениеЗаполнено(Объект.ДокументРасчета) И НЕ ЗначениеЗаполнено(Объект.ЗаказПокупателя));
	
	ЭтоАвансБезРасшифровкиПоТоварам = Объект.ОперацияСДенежнымиСредствами 
		И (Объект.Товары.Количество() = 0)
		И НЕ ЗначениеЗаполнено(Объект.ДокументРасчета);
	ЭтоАванс = Объект.ОперацияСДенежнымиСредствами И НЕ ЗначениеЗаполнено(Объект.ДокументРасчета);
	ПараметрыДействия.Вставить("ЭтоАвансБезРасшифровкиПоТоварам", ЭтоАвансБезРасшифровкиПоТоварам);
	ПараметрыДействия.Вставить("ЭтоАванс", ЭтоАванс);
	
	Если НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") 
		И НЕ Объект.СкидкиРассчитаны
		И НЕ Объект.ПродажаПоЗаказу Тогда
		//Для Каждого стрФ Из ЭтаФорма.Объект.Товары Цикл
		//	Если стрФ.ПроцентРучнойСкидки > 0 Или стрФ.СуммаРучнойСкидки > 0 Тогда
		//		стрФ.ПроцентРучнойСкидки = 0;
		//		стрФ.СуммаРучнойСкидки = 0;
		//	КонецЕсли;
		//КонецЦикла;
		НазначитьАвтоматическиеСкидкиКлиент(,, ПараметрыДействия);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		
		ПодготовитьОплатуБонусамиКСторнированию();
	КонецЕсли;
	
	Если ПараметрыДействия.Свойство("ВыведеныСообщения") Тогда
		Возврат;
	Иначе
		ОплатитьТоварыПослеВыводаСообщений(Неопределено, ПараметрыДействия);
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
КонецПроцедуры


&НаКлиенте
&Вместо("ЗавершитьОплатуТоваровПослеВыводаСдачи")
Процедура Расш_SamosaleЗавершитьОплатуТоваровПослеВыводаСдачи()
	Попытка
		// &ЗамерПроизводительности
		Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
			Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ЗавершениеОплатыИСозданиеЧековРМК");
		
		НазначитьАвтоматическиеСкидкиКлиент(Истина);
		
		Отказ = Ложь;
		СнятьОтборТоваров();
		
		СоздатьЧеки(Отказ, ПечатьПослеПробитияЧека);	
		
		Если НЕ ЭтотОбъект.Доступность Тогда
			ЭтотОбъект.Доступность = Истина;
		КонецЕсли;
		Если ДанныеОтправленыВПлатежнуюСистему Тогда
			ОтменитьОплатуВПлатежнойСистемеПоЧеку();
		КонецЕсли;
		ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	Исключение
		Если НЕ ЭтотОбъект.Доступность Тогда
			ЭтотОбъект.Доступность = Истина;
		КонецЕсли;
		ЗаголовокИнформации = НСтр("ru = 'Не удалось создать чеки'"); 
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(
			ЗаголовокИнформации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки; 		
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуру(ПробитыйЧек)
	СтруктураДляJSON = Новый Структура;
			    //СтруктураДляJSON.Вставить("clientId", айдиклиента);
				
				СтруктураМагазин = Новый Структура;
				СтруктураМагазин.Вставить("uid",Объект.Магазин.Код);
				СтруктураМагазин.Вставить("name",Объект.Магазин.Наименование);
				СтруктураДляJSON.Вставить("shop",СтруктураМагазин);
				Если ПробитыйЧек.Продавец.Наименование = "" Тогда
					СтруктураПродавец = Новый Структура;
					СтруктураПродавец.Вставить("uid","Продавец");
					СтруктураПродавец.Вставить("name","Продавец");
					СтруктураДляJSON.Вставить("cashier",СтруктураПродавец);	
				Иначе
					СтруктураПродавец = Новый Структура;
					СтруктураПродавец.Вставить("uid",ПробитыйЧек.Продавец.Наименование);
					СтруктураПродавец.Вставить("name",ПробитыйЧек.Продавец.Наименование);
					СтруктураДляJSON.Вставить("cashier",СтруктураПродавец);
				КонецЕсли;
				
				ТекГод = Строка(Формат(ТекущаяДата(),"ДФ=гггг"));
				ТекМесяц= Строка(Формат(ТекущаяДата(),"ДФ=ММ"));
				ТекДень = Строка(Формат(ТекущаяДата(),"ДФ=дд"));
				ТекЧас = Строка(Формат(ТекущаяДата(),"ДФ=ЧЧ"));
				ТекМинута = Строка(Формат(ТекущаяДата(),"ДФ=мм"));
				ТекСекунда = Строка(Формат(ТекущаяДата(),"ДФ=сс"));
				СтруктураДляJSON.Вставить("commitAt", ТекГод+"-"+ТекМесяц+"-"+ТекДень + " "+ ТекЧас + ":" + ТекМинута + ":"+ ТекСекунда + "+03:00");
				
				ОбщееКоличество = 0;
				ОбщаяСумма = 0;
				ОбщаяРучнаяСкидка = 0;
				СуммаБонусов = 0;
				ВыходнойМассив = Новый Массив;
				Для Каждого стр Из Объект.Товары Цикл
					СтруктураТовары = Новый Структура("extId,title,price");
					СтруктураТовары.extId = Строка(Прав(стр.Номенклатура.Код,6));
					СтруктураТовары.title = стр.Номенклатура.НаименованиеПолное;
					СтруктураТовары.price = стр.Цена - стр.СуммаАвтоматическойСкидки;
					
					ОбщееКоличество = ОбщееКоличество + стр.Количество;
					ОбщаяСумма = ОбщаяСумма + стр.Сумма;
					ОбщаяРучнаяСкидка = ОбщаяРучнаяСкидка + стр.СуммаАвтоматическойСкидки + стр.СуммаРучнойСкидки;
					СуммаБонусов = СуммаБонусов + стр.СуммаРучнойСкидки;
					СтруктураМассивТЧ = Новый Структура("product");
					СтруктураМассивТЧ.Вставить("product",СтруктураТовары);
					
					ВыходнаяСтруктура = Новый Структура("product,quantity,manualDiscount");
					ВыходнаяСтруктура.Вставить("product",СтруктураТовары);
					ВыходнаяСтруктура.Вставить("quantity",стр.Количество);
					ВыходнаяСтруктура.Вставить("manualDiscount",стр.СуммаРучнойСкидки);
					ВыходнойМассив.Добавить(ВыходнаяСтруктура);
						
					СтруктураДляJSON.Вставить("items",ВыходнойМассив);
				КонецЦикла;
				СтруктураДляJSON.Вставить("totalPaidSum",ОбщаяСумма);
				
				СтруктураДляJSON.Вставить("totalBonusOutlay",ЭтаФорма.Samosale_СписываемыеБаллы);
				//Если Структура.promo.haspromo = Истина Тогда
				//	СтруктураДляJSON.Вставить("promoId", СокрЛП(ЭтаФорма.Samosale_Промокод));		
				//КонецЕсли;
				СтруктураДляJSON.Вставить("extId",ПробитыйЧек.УникальныйИдентификаторПлатежа);
				СтруктураДляJSON.Вставить("additionalInformation","Номер чека в 1С: " + ПробитыйЧек.Номер + ", номер смены: " + Строка(ПробитыйЧек.НомерСменыККМ));
			Возврат СтруктураДляJSON;
КонецФункции


&НаКлиенте
&Вместо("СоздатьЧеки")
Процедура Расш_SamosaleСоздатьЧеки(Отказ, Печать)  
	Перем Ответ;
	
	Ответ = "";
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
		ПроверитьЧтоНетОплатыПодарочнымСертификатом("Оплата", Отказ, Ответ, Истина);
		Если Отказ Тогда
			ОбработатьОтказОтОплаты();
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Ошибка возврат товара'"), Ответ);
			Возврат;
		КонецЕсли;
	Иначе
		ПроверитьДвиженияСерийныхНомеровДляПогашения(Отказ, Ответ, ОбщегоНазначенияКлиент.ДатаСеанса());
		Если Отказ Тогда
			ОбработатьОтказОтОплаты();
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(
				НСтр("ru = 'Ошибки погашения подарочных сертификатов'"), Ответ);
			Если ДанныеОтправленыВБанк Тогда 
				ОбработатьОшибочноеПробитиеЧека();
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПечатьПакетаДокументовВозврат = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат")
		И ИспользоватьНастройкуРМК И НаборПравИНастроек.ПриВозвратеРаспечатыватьПакетДокументов);
	
	МассивСсылокЧеков = Новый Массив;
	
	Если ТабличноеПолеЧеков.Количество() > 1 Тогда
		
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("ПечатьПакетаДокументовВозврат", ПечатьПакетаДокументовВозврат);
		ПараметрыОперации.Вставить("Отказ", Отказ);
		ПараметрыОперации.Вставить("Печать", Печать);
		ПараметрыОперации.Вставить("МассивСсылокЧеков", МассивСсылокЧеков); 
		ПараметрыОперации.Вставить("ПерваяОрганизация", Истина); 
		ПараметрыОперации.Вставить("ЧекККМСсылка", Неопределено);
		ПараметрыОперации.Вставить("ТабличноеПолеЧеков", ТабличноеПолеЧеков); 
		ПараметрыОперации.Вставить("КоличествоЧеков", ТабличноеПолеЧеков.Количество()); 
		ПараметрыОперации.Вставить("ТекущийЧек", 0); 
		
		ЭтотОбъект.Доступность = Ложь;
		ПробитьЧекККМСложныйСлучайЗавершение(Неопределено, ПараметрыОперации);
		
	Иначе
		// Простой случай
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("ПечатьПакетаДокументовВозврат", ПечатьПакетаДокументовВозврат);
		ПараметрыОперации.Вставить("Отказ", Отказ);
		ПараметрыОперации.Вставить("Печать", Печать);
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
		
		ЧекККМСсылка = ЗаписатьЧекККМПоВсемДанным(ТабличноеПолеЧеков[0].Организация, ПараметрыОперации, ПараметрыИнформации);
		ТабличноеПолеЧеков[0].ЧекККМСсылка = ЧекККМСсылка;
		Если ПараметрыОперации.Отказ Тогда
			Отказ = ПараметрыОперации.Отказ;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
			Если ДанныеОтправленыВБанк Тогда 
				ОбработатьОшибочноеПробитиеЧека();
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		СтатусЧекаККМ = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.ПустаяСсылка");
		
		ПараметрыЗаполненияЧекаККМ = Новый Структура;
		
		ПараметрыОперации.Вставить("ЧекККМСсылка", ЧекККМСсылка);
		ПараметрыОперации.Вставить("МассивСсылокЧеков", МассивСсылокЧеков); 
		
		ЭтотОбъект.Доступность = Ложь;
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекККМПростойСлучайЗавершение", ЭтотОбъект, ПараметрыОперации);
		СтруктураJSON = ПолучитьСтруктуру(ЧекККМСсылка);
		ПробитьЧекККМ(Оповещение, ЧекККМСсылка, ТабличноеПолеЧеков[0].КассаККМ, ПараметрыЗаполненияЧекаККМ);
		Расш_SamosaleПроверитьСтатусЧека(СтруктураJSON,ЧекККМСсылка);
	КонецЕсли;
	
	Отказ = ПараметрыОперации.Отказ;
КонецПроцедуры
               
&НаСервере
Процедура ЗаписатьНомертелефонаВЧек(ПробитыйЧек,Samosale_НомерТелефона);//Вик 2022-10-25
	Рег = РегистрыСведений.ТБК_ИсторияПокупокSamosale.СоздатьМенеджерЗаписи();
	Рег.Samosale_НомерТелефона	=	Samosale_НомерТелефона;
	Рег.Чек						=	ПробитыйЧек;
	Рег.Дата					=	ТекущаяДата();
	Рег.Товары					=	Новый ХранилищеЗначения(ПробитыйЧек.Товары.Выгрузить());
	Рег.Сумма					=	ПробитыйЧек.СуммаДокумента;
	Рег.СписаноБаллов			=	ПробитыйЧек.Товары.Итог("СуммаСкидкиОплатыБонусом");
	Рег.ВидОперации				=	ПробитыйЧек.ВидОперации;

	Попытка
		Рег.Записать();	
	Исключение
		
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТБКНачислитьБаллыПосле(Команда) //Марк 2023-11-21
	Если НЕ Samosale_Бонус.Пустая() Тогда
		ТБКНачислитьБаллыПослеПсле();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран бонун";
		Сообщение.Поле = "Samosale_Бонус";
		Сообщение.УстановитьДанные(Samosale_Бонус);
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ТБКНачислитьБаллыПослеПсле()
	
		СуммаБаллов = ПолучитьКолБаллов(Samosale_Бонус);
		Телефон = "+7"+Формат(ЭтаФорма.Samosale_НомерТелефона,"ЧГ=0");
		
		Если Справочники.ТБКSamosale_ДопБалы.НайтиПоНаименованию("Подписка в VK и/или Telegram (50)") = Samosale_Бонус Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
									|	ТБК_SamosaleДопБаллы.Телефон КАК Телефон
									|ИЗ
									|	РегистрСведений.ТБК_SamosaleДопБаллы КАК ТБК_SamosaleДопБаллы
									|ГДЕ
									|	ТБК_SamosaleДопБаллы.Телефон = &Телефон
									|	И ТБК_SamosaleДопБаллы.ИмяАкции = &ИмяАкции");
			
			Запрос.УстановитьПараметр("Телефон", Телефон);
			Запрос.УстановитьПараметр("ИмяАкции", Строка(Samosale_Бонус));
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				Сообщить(Строка(Samosale_Бонус) + " - уже начислена на телефон " + Телефон);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Справочники.ТБКSamosale_ДопБалы.НайтиПоНаименованию("Отзыв на картах (50)") = Samosale_Бонус Тогда
			запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ТБК_SamosaleДопБаллы.Телефон КАК Телефон
			                      |ИЗ
			                      |	РегистрСведений.ТБК_SamosaleДопБаллы КАК ТБК_SamosaleДопБаллы
			                      |ГДЕ
			                      |	ТБК_SamosaleДопБаллы.Телефон = &Телефон
			                      |	И ТБК_SamosaleДопБаллы.ИмяАкции = &ИмяАкции
			                      |	И ТБК_SamosaleДопБаллы.ТекстСообщения = &ТекстСообщения");
			Запрос.УстановитьПараметр("Телефон", Телефон);
			Запрос.УстановитьПараметр("ИмяАкции", Строка(Samosale_Бонус));
			Запрос.УстановитьПараметр("ТекстСообщения", Строка(Объект.Магазин));
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Сообщить(Строка(Samosale_Бонус) + " на магазин " + Объект.Магазин + " - уже начислена на телефон " + Телефон);			
				Возврат;	
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрДлина(Телефон) = 12 Тогда
			Попытка
				ТБКНачислитьБаллыПослеНаСервере(СуммаБаллов, Строка(Samosale_Бонус), Строка(Объект.Магазин));
			Исключение
				Рег = РегистрыСведений.ТБК_SamosaleДопБаллы.СоздатьМенеджерЗаписи();		
			    Рег.Телефон = "+7" + Формат(Samosale_НомерТелефона,"ЧГ=0");
				Рег.СуммаБаллов = СуммаБаллов;
				рег.ИмяАкции = Строка(Samosale_Бонус);
				Рег.ТекстСообщения = Строка(Объект.Магазин);
				Рег.Записать();
				Сообщить("Проблемы с интернатом. " + Строка(Samosale_Бонус) + " - будут начислены птом");	
			КонецПопытки;
			
		иначе
			Сообщить("Телефон введен неправильно");
		КонецЕсли;
	
КонецПроцедуры // ()

&НаСервере
Процедура ТБКНачислитьБаллыПослеНаСервере(СуммаБаллов, ИмяАкции = "" , ТекстСообщения = "")
	Если Samosale_НомерТелефона = 0 Тогда Возврат КонецЕсли;

	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
	ЗаголовокЗапросаHTTP = Новый Соответствие();
	ЗаголовокЗапросаHTTP.Вставить("Authorization", "Bearer "+Объект.Магазин.Расш_SamosaleApiКлюч);
	Запрос = Новый HTTPЗапрос("api/cash-box/search?value="+ЭтаФорма.Samosale_НомерТелефона+"&type=phone",ЗаголовокЗапросаHTTP);
	Результат = Соединение.Получить(Запрос);
	Если Результат.КодСостояния = 200 Тогда
		
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
		Структура = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
		Чтение.Закрыть();
		Если Структура.status <> "not found" Тогда
			
			айдиклиента = Структура.client.id;
			
			ssl = Новый ЗащищенноеСоединениеOpenSSL();
			Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Authorization", "Bearer "+Объект.Магазин.Расш_SamosaleApiКлюч);
			Заголовки.Вставить("Content-Type", "application/json");
			Запрос = Новый HTTPЗапрос("api/cash-box/change-bonus-balance", Заголовки);
			
			СтруктураДляJSON = Новый Структура;
		    СтруктураДляJSON.Вставить("clientId", айдиклиента); 				
			СтруктураДляJSON.Вставить("bonusSum", СуммаБаллов);	
			СтруктураДляJSON.Вставить("description", Строка(ИмяАкции));
			
			Если ТекстСообщения <> "" тогда
				СтруктураУведомление = Новый Структура;
				СтруктураУведомление.Вставить("hasNotify",Истина);
				СтруктураУведомление.Вставить("message",ТекстСообщения);
				СтруктураДляJSON.Вставить("notify",СтруктураУведомление);
			КонецЕсли;


			Запись = Новый ЗаписьJSON;
		    Запись.УстановитьСтроку();
		    ЗаписатьJSON(Запись,СтруктураДляJSON);
		    ТелоЗапроса = Запись.Закрыть();
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
			ОтветПречек = Соединение.ОтправитьДляОбработки(Запрос);
			
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(ОтветПречек.ПолучитьТелоКакСтроку());
			СтруктураПречек = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);
			Чтение.Закрыть();

			Если ОтветПречек.КодСостояния = 200 Тогда
			    Сообщить("" + ИмяАкции + " - Начислено");
				Рег = РегистрыСведений.ТБК_SamosaleДопБаллы.СоздатьМенеджерЗаписи();		
			    Рег.Телефон = "+7" + Формат(Samosale_НомерТелефона,"ЧГ=0");
				Рег.СуммаБаллов = СуммаБаллов;
				рег.ИмяАкции = ИмяАкции;
				Рег.ТекстСообщения = ТекстСообщения;
				Рег.Начислено = Истина;
				Рег.Записать();
			иначе	
				Рег = РегистрыСведений.ТБК_SamosaleДопБаллы.СоздатьМенеджерЗаписи();		
			    Рег.Телефон = "+7" + Формат(Samosale_НомерТелефона,"ЧГ=0");
				Рег.СуммаБаллов = СуммаБаллов;
				рег.ИмяАкции = ИмяАкции;
				Рег.ТекстСообщения = ТекстСообщения;
				Рег.Записать();
				Сообщить("" + ИмяАкции + " - Начислено");	
			КонецЕсли;
			
		КонецЕсли;			
	КонецЕсли;

КонецПроцедуры
 

&НаСервереБезКонтекста
Функция ПолучитьКолБаллов(Samosale_Бонус)

	Возврат Samosale_Бонус.Баллы;	

КонецФункции // ()
 


&НаКлиенте
&Вместо("ПробитьЧекККМЗавершение")
Процедура ТБКПробитьЧекККМЗавершение(РезультатВыполнения, ПараметрыОперации)
	ПараметрыЗаполнения = ПараметрыОперации.ПараметрыЗаполнения;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		ПараметрыЗаполнения.Вставить("СтатусЧекаККМ", ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробитый"));
		ПараметрыЗаполнения.Вставить("Дата", ОбщегоНазначенияКлиент.ДатаСеанса());
		ПараметрыЗаполнения.Вставить("НомерСменыККМ", РезультатВыполнения.ВыходныеПараметры[0]);
		ПараметрыЗаполнения.Вставить("НомерЧекаККМ" , РезультатВыполнения.ВыходныеПараметры[1]);
		
		Если НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.НомерЧекаККМ) Тогда
			Если НомерДокументаКассыККМ[ПараметрыОперации.КассаККМ] <> Неопределено Тогда
				НомерЧекаККМ  = НомерДокументаКассыККМ[ПараметрыОперации.КассаККМ];
			Иначе
				НомерЧекаККМ  = ПорядковыйНомерПродажи;
			КонецЕсли;
			
			ПараметрыЗаполнения.Вставить("НомерЧекаККМ", НомерЧекаККМ);
		КонецЕсли;
		
	Иначе
		ЗаголовокИнформации = НСтр("ru = 'При печати чека произошла ошибка.'");
		ТекстСообщения = НСтр("ru = 'Чек не напечатан на устройстве для печати чеков.
		                            |Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		//Марк 2023-09-19
		Если Найти(ТекстСообщения,"Порт занят") тогда
			ТекстСообщения	=	"У вас запущено 2 программы 1с! Закройте одну из них. Если не помогло - перезагрузите компьютер." + Символы.ПС + Символы.ПС + ТекстСообщения
			+ Символы.ПС + Символы.ПС + "У вас запущено 2 программы 1с! Закройте одну из них. Если не помогло - перезагрузите компьютер.";
			
		ИначеЕсли Найти(ТекстСообщения,"Порт недоступен") тогда
			ТекстСообщения	=	"Проверьте включен ли фискальник (должна гореть зеленая лампочка)" + Символы.ПС + Символы.ПС + ТекстСообщения
			+ Символы.ПС + Символы.ПС + "Проверьте включен ли фискальник (должна гореть зеленая лампочка)" ;
		КонецЕсли;
		ОбщегоНазначенияВызовСервера.ЗаписатьВЛог(ТекстСообщения);
		//КонецМ
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
		
	КонецЕсли;
	
	ПараметрыЗаполнения.ЧекПробит = РезультатВыполнения.Результат;
	
	ВыполнитьОбработкуОповещения(ПараметрыОперации.ОповещениеПриЗавершении, ПараметрыЗаполнения);

	//ПродолжитьВызов(РезультатВыполнения, ПараметрыОперации);
КонецПроцедуры


&НаКлиенте
Процедура ТБКЗарегистрироватьКлиентаВПрограммеЛояльностиОфлаинПосле(Команда)
	
	  //  Оповещение = Новый ОписаниеОповещения("ПослеОткрытияФормы_ЗарегистрироватьКлиентаВПрограммеЛояльности", 
	  //ЭтотОбъект);


	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФорма_ЗарегистрироватьКлиентаВПрограммеЛояльности",
						Неопределено,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

	
КонецПроцедуры

&НаКлиенте
&Вместо("ДобавитьНоменклатуруВТабЧастьКлиент")
Процедура ТБКДобавитьНоменклатуруВТабЧастьКлиент(СтруктураПараметров, Знач ОткрыватьРедактированиеСтроки)
	// Вставить содержимое метода.
		Если СтруктураПараметров.Свойство("Количество") Тогда 
		КоличествоУпаковок = СтруктураПараметров.Количество;
	Иначе
		КоличествоУпаковок = 1;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Цена") тогда
		ТБКДобавитьНоменклатуруВТабЧасть(
			СтруктураПараметров.Номенклатура,
			СтруктураПараметров.Характеристика,
			СтруктураПараметров.Упаковка,
			КоличествоУпаковок,
			СтруктураПараметров.Цена,
			Истина,,
			ОткрыватьРедактированиеСтроки);
	иначе
		ДобавитьНоменклатуруВТабЧасть(
			СтруктураПараметров.Номенклатура,
			СтруктураПараметров.Характеристика,
			СтруктураПараметров.Упаковка,
			КоличествоУпаковок,
			Истина,,
			ОткрыватьРедактированиеСтроки);

	КонецЕсли;

	//ПродолжитьВызов(СтруктураПараметров, ОткрыватьРедактированиеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТБКДобавитьНоменклатуруВТабЧасть(Знач Номенклатура, Знач Характеристика, Знач Упаковка, Знач Количество, Знач цена, Знач ПерейтиНаКоличество, Знач СерийныйНомер, ОткрыватьРедактированиеСтроки)
	// Уточняем значение характеристики товара.
	Если Характеристика = Неопределено Тогда
		Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
	// Проверить необходимость объединять товары.
	Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
		Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
	МассивТоваров = Объект.Товары.НайтиСтроки(
		Новый Структура("Номенклатура, Характеристика, Упаковка", Номенклатура, Характеристика, Упаковка));
	
	ТекстЗапретаПродаж = "";
	Если НельзяПродавать(Номенклатура, ТекстЗапретаПродаж) Тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(НСтр("ru = 'Запрет продаж.'"), ТекстЗапретаПродаж);
		Возврат;
	КонецЕсли;
	
	ДобавленаСтрока = Ложь;
	Если ИзменитьТекущуюСтроку(Номенклатура, МассивТоваров.Количество()) Тогда 
		
		ПоследнееРедактированиеКоличество = МассивТоваров[0].КоличествоУпаковок;
		МассивТоваров[0].КоличествоУпаковок = МассивТоваров[0].КоличествоУпаковок + Количество;
		ТекущаяСтрока = МассивТоваров[0];
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		
	Иначе
		Если Объект.Товары.Количество() = 0 Тогда
			Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		ТекущаяСтрока = Объект.Товары.Добавить();
		ТекущаяСтрока.Номенклатура = Номенклатура;
		ТекущаяСтрока.Характеристика = Характеристика;
		ТекущаяСтрока.Упаковка = Упаковка;
		ТекущаяСтрока.КоличествоУпаковок = Количество;
		ТекущаяСтрока.Цена = Цена;
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		
		ДобавленаСтрока = Истина;
		
		ОбработкаТабличнойЧастиТоварыКлиент.ОбновитьКэшированныеЗначенияДляУчетаСерий(
			Элементы.Товары, КэшированныеЗначения, ПараметрыУказанияСерий, Ложь);
	КонецЕсли;
	
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ОткрытаБлокирующаяФорма", Ложь);
	ПараметрДействия.Вставить("ДобавитьСерийныйНомерИОткрытьВводСерии", СерийныйНомер);
	ПараметрДействия.Вставить("ОбновлениеДисплеяПокупателяДобавлениеТовара");
	ПараметрДействия.Вставить("ТоварыПриИзмененииНаСервере");
	ПараметрДействия.Вставить("ЗапретПродажиПроверен", Истина);
	ПараметрДействия.Вставить("ЗаполнитьПредставлениеТабло", НаборПравИНастроек.ЗапросТабло);
	
	Если ДобавленаСтрока Тогда
		ТоварыПриИзмененииНоменклатуры(ТекущаяСтрока, ПерейтиНаКоличество, ПараметрДействия, ОткрыватьРедактированиеСтроки);
	Иначе
		ТоварыПриИзмененииКоличестваУпаковок(ТекущаяСтрока, ПоследнееРедактированиеКоличество);
	КонецЕсли;
	
	Если НЕ ПараметрДействия.ОткрытаБлокирующаяФорма Тогда
		ДобавитьСерийныйНомерИОткрытьВводСерии(ТекущаяСтрока, СерийныйНомер, ОткрыватьРедактированиеСтроки);
		ОбновлениеДисплеяПокупателяДобавлениеТовара(ТекущаяСтрока);
		ПересчитатьИлиОтменитьСкидкиИОплатуБонусами();
		ОбновитьФорму();
	Иначе
		ОткрыватьРедактированиеСтроки = Ложь;
	КонецЕсли;
	
	Если ОткрыватьРедактированиеСтроки Тогда
		ПодключитьОбработчикОжидания("РедактированиеСтрокиКлиент", 0.1, Истина);
	КонецЕсли;
	//ПродолжитьВызов(Номенклатура, Характеристика, Упаковка, Количество, ПерейтиНаКоличество, СерийныйНомер, ОткрыватьРедактированиеСтроки);
КонецПроцедуры

