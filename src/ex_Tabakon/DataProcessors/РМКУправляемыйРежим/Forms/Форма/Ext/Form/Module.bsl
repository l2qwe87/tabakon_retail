&НаКлиенте
Перем флЭтоВнешнийЭквайринг;

&НаКлиенте
Перем МассивКассККМКлиент_оригинал;

&НаСервереБезКонтекста
Функция ПолучитьТекущегоПродавца()
	текущийПользователь = Пользователи.ТекущийПользователь();
	Возврат текущийПользователь.ФизическоеЛицо;
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьТрейдИн()
	результ = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	замены.Номенклатура КАК Владелец,
	               |	замены.Комплектующая КАК Номенклатура,
	               |	замены.ХарактеристикаКомплектующей КАК Характеристика,
	               |	замены.ДоляСтоимости КАК Доплата
	               |ИЗ
	               |	РегистрСведений.КомплектующиеНоменклатуры КАК замены
	               |ИТОГИ ПО
	               |	Владелец";
	
	прототипСтруктуры = "Владелец,Номенклатура,Характеристика,Доплата";
	
	резЗамены = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока резЗамены.Следующий() Цикл
		
		резКомплект = резЗамены.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		мВарианты = Новый Массив();
		Пока резКомплект.Следующий() Цикл
			
			стр = Новый Структура(прототипСтруктуры);
			ЗаполнитьЗначенияСвойств(стр,резКомплект);
			мВарианты.Добавить(стр);
		КонецЦикла;
		
		результ.Вставить(резЗамены.Владелец , мВарианты);
	Конеццикла;
	
	
	возврат результ;
КонецФункции

&НаКлиенте
&После("ОбновитьФорму")
Процедура ТБКОбновитьФорму()
	// Вставить содержимое метода.
	текущегоПродавца = ПолучитьТекущегоПродавца();
	
	трейдИн = ПолучитьТрейдИн();
	Если ЛОЖЬ Тогда трейдИн = Новый Соответствие(); КонецЕсли;
	
	Для Каждого стр из Объект.Товары Цикл
		
		Если не ЗначениеЗаполнено(стр.Продавец) Тогда
			стр.Продавец = текущегоПродавца;
		КонецЕсли;
		
		Если НЕ ПроверкаНапредметПустогоНаименованияТовара(стр.Номенклатура) Тогда
			оповещение = Новый ОписаниеОповещения("ОбработкаЗавершения_ПроверкаНапредметПустогоНаименованияТовара",ЭтотОбъект, стр);
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаСообщениеОПлохойНоменклатуре",неопределено,неопределено
					,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
					
			возврат;			
		КонецЕсли; 		
		
		
		Если ЗначениеЗаполнено(стр.Номенклатура) и ЗначениеЗаполнено(стр.Цена) Тогда
			Если (трейдИн.Получить(стр.Номенклатура) <> неопределено) Тогда
				параметрыВыбора = Новый Структура();
				параметрыВыбора.Вставить("ТрейдИн", трейдИн.Получить(стр.Номенклатура));
				
				оповещение = Новый ОписаниеОповещения("ОбработкаЗавершенияВыбораЗамены",ЭтотОбъект, стр);
				
				ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаВыборЗамены",параметрыВыбора,УникальныйИдентификатор
					,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			КонецЕсли;
			
		конецЕсли;		
	КонецЦикла;
	
	Если Объект.Товары.Количество()=0 тогда
		УправляемыеСкидки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбработкаЗавершения_ПроверкаНапредметПустогоНаименованияТовара(РезультатОткрытияФормы, стр)ЭКСПОРТ
	Объект.Товары.Удалить(стр);	
	ОбновитьФорму();
КонецФУнкции


&НаКлиенте
Функция ОбработкаЗавершенияВыбораЗамены(РезультатОткрытияФормы, стр)ЭКСПОРТ
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		стр.Номенклатура = РезультатОткрытияФормы.Номенклатура;
		стр.Характеристика = РезультатОткрытияФормы.Характеристика;
		стр.Цена = РезультатОткрытияФормы.Доплата;
		
		
		стр.Цена = ?(стр.Цена=1,
					0.01,
					стр.Цена
		);
		
		
		стр.Сумма = стр.Цена;
		стр.СуммаВсего = стр.Сумма;
		
	Иначе
		Объект.Товары.Удалить(стр);
	КонецЕсли;
	
	
	ОбновитьФорму();
КонецФУнкции

&НаСервере
&Вместо("ПроверитьЗаполнениеТабличнойЧасти")
Процедура ТБКПроверитьЗаполнениеТабличнойЧасти(Отказ, ПараметрыИнформации, ОплатаТолькоНаличными)
	// Вставить содержимое метода.
	
	Для Каждого стр из Объект.Товары Цикл
		Если СтрДлина(стр.Штрихкод) <= 13 Тогда
			стр.МаркируемаяПродукция = ложь;
		КонецЕсли;
	КонецЦикла;
	
	ПродолжитьВызов(Отказ, ПараметрыИнформации, ОплатаТолькоНаличными);
КонецПроцедуры

&НаКлиенте
Процедура ТБКПрименитьВаучерПосле(Команда)
	// Вставить содержимое обработчика.
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивУправляемыеСкидкиДокумента", УправляемыеСкидки.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуУправляемыхСкидок", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаВаучер",
		ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
КонецПроцедуры

&НаКлиенте
Процедура ТБКПриОткрытииПосле(Отказ)
	//Вставить содержимое обработчика
	
	МассивКассККМКлиент_оригинал = новый Массив;
	
	Для Каждого эл из МассивКассККМКлиент цикл 
		ЭтаФорма.Элементы.ТекущаяКассаККМ.СписокВыбора.Добавить(эл);
		МассивКассККМКлиент_оригинал.Добавить(эл);
	КонецЦикла;
	
	Для Каждого стр из Этаформа.ТаблицаКассККМОрганизаций Цикл
		нстр = Этаформа.ТаблицаКассККМОрганизаций_оригинал.Добавить();
		ЗаполнитьЗначенияСвойств(нстр,стр);
	КонецЦикла;
	
	Этаформа.ТекущаяКассаККМ = МассивКассККМКлиент_оригинал[0];
	
	ТБКТекущаяКассаККМПриИзмененииПосле(неопределено);
	
	Версия = ПолучитьВерсиюКонфигурации();
	Элементы.ВерсияР.Заголовок = Версия;
	
	УстановитьЦветКнопкиОтключитьЭквайринг();
	Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный тогда
		флЭтоВнешнийЭквайринг = Истина;
	иначе
		флЭтоВнешнийЭквайринг = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьВерсиюКонфигурации()
	Возврат ОбщегоНазначения.ПолучитьВерсиюРасширения();	
КонецФункции

&НаКлиенте
Процедура ТБКТекущаяКассаККМПриИзмененииПосле(Элемент)
	// Вставить содержимое обработчика.
	МассивКассККМКлиент.Очистить();
	МассивКассККМКлиент.Добавить(Этаформа.ТекущаяКассаККМ);	
	
	//ТБКТекущаяКассаККМПриИзмененииПослеСервер();
	
	Этаформа.ТаблицаКассККМОрганизаций.Очистить();
	
	Для каждого стр из Этаформа.ТаблицаКассККМОрганизаций_оригинал Цикл
		Если стр.КассаККМ = Этаформа.ТекущаяКассаККМ Тогда
			нстр = Этаформа.ТаблицаКассККМОрганизаций.Добавить();
			ЗаполнитьЗначенияСвойств(нстр,стр);
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
		Объект.Организация = ТаблицаКассККМОрганизаций[0].Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТБКТекущаяКассаККМПриИзмененииПослеСервер()
	
	
		
КонецФункции



//Ложь - номенклатура плохая, Истина - Номенклатура хорошая
&НаКлиенте
Функция ПроверкаНапредметПустогоНаименованияТовара(Номенклатура)
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		возврат Ложь;
	КонецЕсли;
	
	наименование = ПолучитьЗначениеРеквизита(Номенклатура,"Наименование");
	Если наименование = неопределено Тогда
		возврат Ложь;
	КонецЕсли;
	
	наименование = СтрЗаменить(наименование,"<","");
	наименование = СтрЗаменить(наименование,">","");
	наименование = СтрЗаменить(наименование,"	","");
	наименование = СтрЗаменить(наименование,"  ","");
	наименование = СтрЗаменить(наименование,"","");
	
	
	Возврат ЗначениеЗаполнено(наименование);
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка,ИмяРеквизита)
	Попытка
		Возврат Ссылка[ИмяРеквизита];
	Исключение
		Возврат неопределено;
	Конецпопытки
КонецФункции

&НаСервере
&После("ЗаполнитьОстаткиСервер")
Процедура ТБКЗаполнитьОстаткиСервер()
	ЗапасыСервер.ЗаполнитьОстаткиНоменклатурыБезУчетаХарактеристик(Объект, "Товары")
КонецПроцедуры

&НаКлиенте
Процедура ТБКDebug_ОбработатьМаркуПосле(Команда)
	ДанныеШтрихкода = Новый Структура;
	ДанныеШтрихкода.Вставить("Количество", 1);
	ДанныеШтрихкода.Вставить("Штрихкод"  , ЭтаФорма.Debug_Марка);
	
	ОбработатьКодМаркировки(ДанныеШтрихкода);

КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя")
Процедура ВместоВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя()
	Если не ОбщегоНазначенияВызовСервера.ПроверитьВозможностьРедактирования_Общая()  тогда
		
		ЗаголовокИнформации = НСтр("ru = 'Запрет возврата без основания'");
		ТекстСообщения = НСтр("ru = 'Для возврата за прошлый период в форме меню нажмите Чеки -> Ввести на основании -> Возврат от покупателя -> кнопка Нал или Карта '");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);

		Возврат;
	КонецЕсли;
КонецПроцедуры


&НаСервере
&Вместо("ОткрытьЗакрытьМенюПрочихОпераций")
Процедура ТБК_ОткрытьЗакрытьМенюПрочихОпераций()
	
	Элементы.ГруппаПрочихОпераций.Видимость = НЕ Элементы.ГруппаПрочихОпераций.Видимость;
	Элементы.ГруппаТБК.Видимость			= НЕ Элементы.ГруппаТБК.Видимость;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереключитьЭквайрингСервер(РабочееМесто)
	
	ТЗНужныйТерминал = ПолучитьРаботающийТерминал(РабочееМесто);	
	
	Если ТЗНужныйТерминал <> Неопределено тогда
		Для каждого Строка из ТЗНужныйТерминал цикл
			Об = Строка.Ссылка.ПолучитьОбъект();
			Об.ИспользоватьБезПодключенияОборудования = не Об.ИспользоватьБезПодключенияОборудования;
			Об.ПодключаемоеОборудование 			  = Строка.ПодключаемоеОборудование;
			Об.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРаботающийТерминал(РабочееМесто) 	
	СписокУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам( , , РабочееМесто);
	
	Для каждого Строка из СписокУстройств цикл
		Если Строка.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал тогда
			
			Запрос	=	Новый запрос("ВЫБРАТЬ
			      	 	             |	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
			      	 	             |ГДЕ
			      	 	             |	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
			      	 	             |	И (ЭквайринговыеТерминалы.ПодключаемоеОборудование = &ПодключаемоеОборудование
			      	 	             |			ИЛИ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)");
			Запрос.УстановитьПараметр("ПодключаемоеОборудование",Строка.Ссылка);
			
			Рез = Запрос.Выполнить().Выгрузить();
			Если Рез.Количество() > 0 тогда
				ТЗВозврата = Новый ТаблицаЗначений;
				ТЗВозврата.Колонки.Добавить("Ссылка");
				ТЗВозврата.Колонки.Добавить("ИспользоватьБезПодключенияОборудования");
				ТЗВозврата.Колонки.Добавить("ПодключаемоеОборудование");

				Для каждого СтрокаТерминал из Рез цикл
					
					НоваяСтрока = ТЗВозврата.Добавить();
					НоваяСтрока.Ссылка									=	СтрокаТерминал.Ссылка;
					НоваяСтрока.ИспользоватьБезПодключенияОборудования	=	СтрокаТерминал.Ссылка.ИспользоватьБезПодключенияОборудования;
					НоваяСтрока.ПодключаемоеОборудование				=	Строка.Ссылка;
				КонецЦикла;
				 
				Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗВозврата); 
			иначе
				Возврат Неопределено;
			КонецЕсли;  
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура УстановитьЦветКнопкиОтключитьЭквайринг()
	ТЗНужныйТерминал =    ПолучитьРаботающийТерминал(Объект.РабочееМесто);
	
	Если ТЗНужныйТерминал <> Неопределено тогда
		флЕстьРаботающий = Ложь;
		
		Для каждого Строка из ТЗНужныйТерминал цикл
			Если не Строка.ИспользоватьБезПодключенияОборудования тогда
				флЕстьРаботающий = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		
		Если флЕстьРаботающий тогда 
			Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Черный;
			Элементы.КнопкаОтключитьЭквайринг.Заголовок  = "Отключить"+Символы.ПС+"эквайринг";
		иначе
			Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный;
			Элементы.КнопкаОтключитьЭквайринг.Заголовок  = "Включить"+Символы.ПС+"эквайринг"; 
		КонецЕсли;
	иначе
		Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный;
		Элементы.КнопкаОтключитьЭквайринг.Заголовок  = "Включить"+Символы.ПС+"эквайринг";

	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура ТБКОтключитьЭквайрингПосле(Команда)
	Если Объект.Товары.Количество() > 0 тогда
		ЗаголовокИнформации = НСтр("ru = 'Отключение эквайринга'"); 
		ТекстИнформации = НСтр("ru = 'Перед отключением эквайринга необходимо пробить, аннулировать или отложить текущий чек.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Пароль = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводСтроки", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещения, Пароль, "Введите пароль: "); 

КонецПроцедуры

&НаКлиенте
Процедура ВводСтроки(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если ПолученноеЗначение = "0000" тогда 
		ПереключитьЭквайрингСервер(Объект.РабочееМесто);
		УстановитьЦветКнопкиОтключитьЭквайринг();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
&После("ОбработатьУспешноеПробитиеЧека")
Процедура ТБКОбработатьУспешноеПробитиеЧека()
	Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный и не флЭтоВнешнийЭквайринг тогда 
		ПереключитьЭквайрингСервер(Объект.РабочееМесто);
		УстановитьЦветКнопкиОтключитьЭквайринг();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьЧО04Возврат")
Процедура ТБКВыполнитьЧО04Возврат()
	Если НЕ ПроверитьВозможностьВозврата() тогда
		Возврат;		
	КонецЕсли;
	
	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьВозвратПоследнегоЧека")
Процедура ТБКВыполнитьВозвратПоследнегоЧека()
	Если НЕ ПроверитьВозможностьВозврата() тогда
		Возврат;		
	КонецЕсли;
	
	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьВозврата()
	Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный и не флЭтоВнешнийЭквайринг тогда
		Если не ОбщегоНазначенияВызовСервера.ПроверитьВозможностьРедактирования_Общая()  тогда
			ЗаголовокИнформации = НСтр("ru = 'Запрет возврата при отключенном терминале'");
			ТекстСообщения = НСтр("ru = 'Для возврата необходимо включить терминал '");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
			Возврат ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;	
КонецФункции 

&НаКлиенте
Процедура ТБКТоварыПриАктивизацииСтрокиПосле(Элемент)
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если не Прав(СокрЛП(Строка(ТекСтрока.Номенклатура)),3)=" БК" тогда
	    	Элементы.ТоварыЦена.ТолькоПросмотр	 	 = Истина;
			Элементы.ТоварыСумма.ТолькоПросмотр		 = Истина;
			Элементы.ТоварыСуммаВсего.ТолькоПросмотр = Истина;
			Элементы.ТоварыСуммаНДС.ТолькоПросмотр	 = Истина;
			Элементы.ТоварыСтавкаНДС.ТолькоПросмотр	 = Истина;
		иначе
		   	Элементы.ТоварыЦена.ТолькоПросмотр	 	 = Ложь;
			Элементы.ТоварыСумма.ТолькоПросмотр		 = Ложь;
			Элементы.ТоварыСуммаВсего.ТолькоПросмотр = Ложь;
			Элементы.ТоварыСуммаНДС.ТолькоПросмотр	 = Ложь;
			Элементы.ТоварыСтавкаНДС.ТолькоПросмотр	 = Ложь;	
		КонецЕсли;
    КонецЕсли; 
КонецПроцедуры
