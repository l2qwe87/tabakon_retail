&НаКлиенте
Перем флЭтоВнешнийЭквайринг;

&НаКлиенте
Перем МассивКассККМКлиент_оригинал;


&НаСервереБезКонтекста
Функция ПолучитьТекущегоПродавца()
	текущийПользователь = Пользователи.ТекущийПользователь();
	Возврат текущийПользователь.ФизическоеЛицо;
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьТрейдИн()
	результ = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	замены.Номенклатура КАК Владелец,
	               |	замены.Комплектующая КАК Номенклатура,
	               |	замены.ХарактеристикаКомплектующей КАК Характеристика,
	               |	замены.ДоляСтоимости КАК Доплата
	               |ИЗ
	               |	РегистрСведений.КомплектующиеНоменклатуры КАК замены
	               |ИТОГИ ПО
	               |	Владелец";
	
	прототипСтруктуры = "Владелец,Номенклатура,Характеристика,Доплата";
	
	резЗамены = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока резЗамены.Следующий() Цикл
		
		резКомплект = резЗамены.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		мВарианты = Новый Массив();
		Пока резКомплект.Следующий() Цикл
			
			стр = Новый Структура(прототипСтруктуры);
			ЗаполнитьЗначенияСвойств(стр,резКомплект);
			мВарианты.Добавить(стр);
		КонецЦикла;
		
		результ.Вставить(резЗамены.Владелец , мВарианты);
	Конеццикла;
	
	
	возврат результ;
КонецФункции

&НаКлиенте
&После("ОбновитьФорму")
Процедура ТБКОбновитьФорму()
	// Вставить содержимое метода.
	текущегоПродавца = ПолучитьТекущегоПродавца();
	
	трейдИн = ПолучитьТрейдИн();
	Если ЛОЖЬ Тогда трейдИн = Новый Соответствие(); КонецЕсли;
	
	Для Каждого стр из Объект.Товары Цикл
		
		Если не ЗначениеЗаполнено(стр.Продавец) Тогда
			стр.Продавец = текущегоПродавца;
		КонецЕсли;
		
		Если НЕ ПроверкаНапредметПустогоНаименованияТовара(стр.Номенклатура) Тогда
			оповещение = Новый ОписаниеОповещения("ОбработкаЗавершения_ПроверкаНапредметПустогоНаименованияТовара",ЭтотОбъект, стр);
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаСообщениеОПлохойНоменклатуре",неопределено,неопределено
					,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
					
			возврат;			
		КонецЕсли; 		
		
		//Вик 2021_08_31
		Если ПроверкаНаПометку(стр.Номенклатура)  Тогда
			ПараметрыОткр	=	новый Структура;
			ПараметрыОткр.Вставить("ИзменитьЗаголовок",истина);
			
			оповещение = Новый ОписаниеОповещения("ОбработкаЗавершения_ПроверкаНапредметПустогоНаименованияТовара",ЭтотОбъект, стр);//эта подходит
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаСообщениеОПлохойНоменклатуре",ПараметрыОткр,неопределено
					,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
					
			возврат;			
		КонецЕсли; 
		//КонецВик
		
		
		Если ЗначениеЗаполнено(стр.Номенклатура) и ЗначениеЗаполнено(стр.Цена) Тогда
			Если (трейдИн.Получить(стр.Номенклатура) <> неопределено) Тогда
				параметрыВыбора = Новый Структура();
				параметрыВыбора.Вставить("ТрейдИн", трейдИн.Получить(стр.Номенклатура));
				
				оповещение = Новый ОписаниеОповещения("ОбработкаЗавершенияВыбораЗамены",ЭтотОбъект, стр);
				
				ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаВыборЗамены",параметрыВыбора,УникальныйИдентификатор
					,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			КонецЕсли;
			
		конецЕсли;		
	КонецЦикла;
	
	Если Объект.Товары.Количество()=0 тогда
		УправляемыеСкидки.Очистить();
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Функция ОбработкаЗавершения_ПроверкаНапредметПустогоНаименованияТовара(РезультатОткрытияФормы, стр)ЭКСПОРТ
	Объект.Товары.Удалить(стр);	
	ОбновитьФорму();
КонецФУнкции


&НаКлиенте
Функция ОбработкаЗавершенияВыбораЗамены(РезультатОткрытияФормы, стр)ЭКСПОРТ
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		стр.Номенклатура = РезультатОткрытияФормы.Номенклатура;
		стр.Характеристика = РезультатОткрытияФормы.Характеристика;
		стр.Цена = РезультатОткрытияФормы.Доплата;
		
		
		стр.Цена = ?(стр.Цена=1,
					0.01,
					стр.Цена
		);
		
		
		стр.Сумма = стр.Цена;
		стр.СуммаВсего = стр.Сумма;
		
	Иначе
		Объект.Товары.Удалить(стр);
	КонецЕсли;
	
	
	ОбновитьФорму();
КонецФУнкции

&НаСервере
&Вместо("ПроверитьЗаполнениеТабличнойЧасти")
Процедура ТБКПроверитьЗаполнениеТабличнойЧасти(Отказ, ПараметрыИнформации, ОплатаТолькоНаличными)
	// Вставить содержимое метода.
	
	Для Каждого стр из Объект.Товары Цикл
		Если СтрДлина(стр.Штрихкод) <= 13 Тогда
			стр.МаркируемаяПродукция = ложь;
		КонецЕсли;
	КонецЦикла;
	
	//Вик 2021_07_01
	Для Каждого Стр из Объект.Товары Цикл
		Если ЗначениеЗаполнено(Стр.Характеристика) и Стр.Цена <108 тогда
			Отказ = Истина;
			Сообщить("Для продажи сигарет < 108р. воспользуйтесь БК");
		КонецЕсли;
	КонецЦикла;;
	//КонецВик
	
	ПродолжитьВызов(Отказ, ПараметрыИнформации, ОплатаТолькоНаличными);
КонецПроцедуры

&НаКлиенте
Процедура ТБКПрименитьВаучерПосле(Команда)
	// Вставить содержимое обработчика.
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивУправляемыеСкидкиДокумента", УправляемыеСкидки.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуУправляемыхСкидок", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаВаучер",
		ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
КонецПроцедуры

&НаКлиенте
Процедура ТБКПриОткрытииПосле(Отказ)
	//Вставить содержимое обработчика
	
	МассивКассККМКлиент_оригинал = новый Массив;
	
	Для Каждого эл из МассивКассККМКлиент цикл 
		ЭтаФорма.Элементы.ТекущаяКассаККМ.СписокВыбора.Добавить(эл);
		МассивКассККМКлиент_оригинал.Добавить(эл);
	КонецЦикла;
	
	Для Каждого стр из Этаформа.ТаблицаКассККМОрганизаций Цикл
		нстр = Этаформа.ТаблицаКассККМОрганизаций_оригинал.Добавить();
		ЗаполнитьЗначенияСвойств(нстр,стр);
	КонецЦикла;
	
	Этаформа.ТекущаяКассаККМ = МассивКассККМКлиент_оригинал[0];
	
	ТБКТекущаяКассаККМПриИзмененииПосле(неопределено);
	
	Версия = ПолучитьВерсиюКонфигурации();
	Элементы.ВерсияР.Заголовок = Версия;
	
	УстановитьЦветКнопкиОтключитьЭквайринг();
	Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный тогда
		флЭтоВнешнийЭквайринг = Истина;
	иначе
		флЭтоВнешнийЭквайринг = Ложь;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработатьИнтернетЗаказы_Клиент",30);//Вик 2021_08_13
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьВерсиюКонфигурации()
	Возврат ОбщегоНазначения.ПолучитьВерсиюРасширения();	
КонецФункции

&НаКлиенте
Процедура ТБКТекущаяКассаККМПриИзмененииПосле(Элемент)
	// Вставить содержимое обработчика.
	МассивКассККМКлиент.Очистить();
	МассивКассККМКлиент.Добавить(Этаформа.ТекущаяКассаККМ);	
	
	//ТБКТекущаяКассаККМПриИзмененииПослеСервер();
	
	Этаформа.ТаблицаКассККМОрганизаций.Очистить();
	
	Для каждого стр из Этаформа.ТаблицаКассККМОрганизаций_оригинал Цикл
		Если стр.КассаККМ = Этаформа.ТекущаяКассаККМ Тогда
			нстр = Этаформа.ТаблицаКассККМОрганизаций.Добавить();
			ЗаполнитьЗначенияСвойств(нстр,стр);
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
		Объект.Организация = ТаблицаКассККМОрганизаций[0].Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТБКТекущаяКассаККМПриИзмененииПослеСервер()
	
	
		
КонецФункции



//Ложь - номенклатура плохая, Истина - Номенклатура хорошая
&НаКлиенте
Функция ПроверкаНапредметПустогоНаименованияТовара(Номенклатура)
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		возврат Ложь;
	КонецЕсли;
	
	наименование = ПолучитьЗначениеРеквизита(Номенклатура,"Наименование");
	Если наименование = неопределено Тогда
		возврат Ложь;
	КонецЕсли;
	
	наименование = СтрЗаменить(наименование,"<","");
	наименование = СтрЗаменить(наименование,">","");
	наименование = СтрЗаменить(наименование,"	","");
	наименование = СтрЗаменить(наименование,"  ","");
	наименование = СтрЗаменить(наименование,"","");
	
	
	Возврат ЗначениеЗаполнено(наименование);
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка,ИмяРеквизита)
	Попытка
		Возврат Ссылка[ИмяРеквизита];
	Исключение
		Возврат неопределено;
	Конецпопытки
КонецФункции

&НаСервере
&После("ЗаполнитьОстаткиСервер")
Процедура ТБКЗаполнитьОстаткиСервер()
	ЗапасыСервер.ЗаполнитьОстаткиНоменклатурыБезУчетаХарактеристик(Объект, "Товары")
КонецПроцедуры

&НаКлиенте
Процедура ТБКDebug_ОбработатьМаркуПосле(Команда)
	ДанныеШтрихкода = Новый Структура;
	ДанныеШтрихкода.Вставить("Количество", 1);
	ДанныеШтрихкода.Вставить("Штрихкод"  , ЭтаФорма.Debug_Марка);
	
	ОбработатьКодМаркировки(ДанныеШтрихкода);

КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя")
Процедура ВместоВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя()
	Если не ОбщегоНазначенияВызовСервера.ПроверитьВозможностьРедактирования_Общая()  тогда
		
		ЗаголовокИнформации = НСтр("ru = 'Запрет возврата без основания'");
		ТекстСообщения = НСтр("ru = 'Для возврата за прошлый период в форме меню нажмите Чеки -> Ввести на основании -> Возврат от покупателя -> кнопка Нал или Карта '");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);

		Возврат;
	КонецЕсли;
КонецПроцедуры


&НаСервере
&Вместо("ОткрытьЗакрытьМенюПрочихОпераций")
Процедура ТБК_ОткрытьЗакрытьМенюПрочихОпераций()
	
	Элементы.ГруппаПрочихОпераций.Видимость = НЕ Элементы.ГруппаПрочихОпераций.Видимость;
	Элементы.ГруппаТБК.Видимость			= НЕ Элементы.ГруппаТБК.Видимость;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереключитьЭквайрингСервер(РабочееМесто)
	
	ТЗНужныйТерминал = ПолучитьРаботающийТерминал(РабочееМесто);	
	
	Если ТЗНужныйТерминал <> Неопределено тогда
		Для каждого Строка из ТЗНужныйТерминал цикл
			Об = Строка.Ссылка.ПолучитьОбъект();
			Об.ИспользоватьБезПодключенияОборудования = не Об.ИспользоватьБезПодключенияОборудования;
			Об.ПодключаемоеОборудование 			  = Строка.ПодключаемоеОборудование;
			Об.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРаботающийТерминал(РабочееМесто) 	
	СписокУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам( , , РабочееМесто);
	
	Для каждого Строка из СписокУстройств цикл
		Если Строка.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал тогда
			
			Запрос	=	Новый запрос("ВЫБРАТЬ
			      	 	             |	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
			      	 	             |ГДЕ
			      	 	             |	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
			      	 	             |	И (ЭквайринговыеТерминалы.ПодключаемоеОборудование = &ПодключаемоеОборудование
			      	 	             |			ИЛИ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)");
			Запрос.УстановитьПараметр("ПодключаемоеОборудование",Строка.Ссылка);
			
			Рез = Запрос.Выполнить().Выгрузить();
			Если Рез.Количество() > 0 тогда
				ТЗВозврата = Новый ТаблицаЗначений;
				ТЗВозврата.Колонки.Добавить("Ссылка");
				ТЗВозврата.Колонки.Добавить("ИспользоватьБезПодключенияОборудования");
				ТЗВозврата.Колонки.Добавить("ПодключаемоеОборудование");

				Для каждого СтрокаТерминал из Рез цикл
					
					НоваяСтрока = ТЗВозврата.Добавить();
					НоваяСтрока.Ссылка									=	СтрокаТерминал.Ссылка;
					НоваяСтрока.ИспользоватьБезПодключенияОборудования	=	СтрокаТерминал.Ссылка.ИспользоватьБезПодключенияОборудования;
					НоваяСтрока.ПодключаемоеОборудование				=	Строка.Ссылка;
				КонецЦикла;
				 
				Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗВозврата); 
			иначе
				Возврат Неопределено;
			КонецЕсли;  
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура УстановитьЦветКнопкиОтключитьЭквайринг()
	ТЗНужныйТерминал =    ПолучитьРаботающийТерминал(Объект.РабочееМесто);
	
	Если ТЗНужныйТерминал <> Неопределено тогда
		флЕстьРаботающий = Ложь;
		
		Для каждого Строка из ТЗНужныйТерминал цикл
			Если не Строка.ИспользоватьБезПодключенияОборудования тогда
				флЕстьРаботающий = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		
		Если флЕстьРаботающий тогда 
			Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Черный;
			Элементы.КнопкаОтключитьЭквайринг.Заголовок  = "Отключить"+Символы.ПС+"эквайринг";
		иначе
			Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный;
			Элементы.КнопкаОтключитьЭквайринг.Заголовок  = "Включить"+Символы.ПС+"эквайринг"; 
		КонецЕсли;
	иначе
		Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный;
		Элементы.КнопкаОтключитьЭквайринг.Заголовок  = "Включить"+Символы.ПС+"эквайринг";

	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура ТБКОтключитьЭквайрингПосле(Команда)
	Если Объект.Товары.Количество() > 0 тогда
		ЗаголовокИнформации = НСтр("ru = 'Отключение эквайринга'"); 
		ТекстИнформации = НСтр("ru = 'Перед отключением эквайринга необходимо пробить, аннулировать или отложить текущий чек.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Пароль = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводСтроки", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещения, Пароль, "Введите пароль: "); 

КонецПроцедуры

&НаКлиенте
Процедура ВводСтроки(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если ПолученноеЗначение = "0000" тогда 
		ПереключитьЭквайрингСервер(Объект.РабочееМесто);
		УстановитьЦветКнопкиОтключитьЭквайринг();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
&После("ОбработатьУспешноеПробитиеЧека")
Процедура ТБКОбработатьУспешноеПробитиеЧека()
	Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный и не флЭтоВнешнийЭквайринг тогда 
		ПереключитьЭквайрингСервер(Объект.РабочееМесто);
		УстановитьЦветКнопкиОтключитьЭквайринг();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьЧО04Возврат")
Процедура ТБКВыполнитьЧО04Возврат()
	Если НЕ ПроверитьВозможностьВозврата() тогда
		Возврат;		
	КонецЕсли;
	
	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьВозвратПоследнегоЧека")
Процедура ТБКВыполнитьВозвратПоследнегоЧека()
	Если НЕ ПроверитьВозможностьВозврата() тогда
		Возврат;		
	КонецЕсли;
	
	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьВозврата()
	Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный и не флЭтоВнешнийЭквайринг тогда
		Если не ОбщегоНазначенияВызовСервера.ПроверитьВозможностьРедактирования_Общая()  тогда
			ЗаголовокИнформации = НСтр("ru = 'Запрет возврата при отключенном терминале'");
			ТекстСообщения = НСтр("ru = 'Для возврата необходимо включить терминал '");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
			Возврат ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;	
КонецФункции 

&НаКлиенте
Процедура ТБКТоварыПриАктивизацииСтрокиПосле(Элемент)
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если не Прав(СокрЛП(Строка(ТекСтрока.Номенклатура)),3)=" БК" тогда
	    	Элементы.ТоварыЦена.ТолькоПросмотр	 	 = Истина;
			Элементы.ТоварыСумма.ТолькоПросмотр		 = Истина;
			Элементы.ТоварыСуммаВсего.ТолькоПросмотр = Истина;
			Элементы.ТоварыСуммаНДС.ТолькоПросмотр	 = Истина;
			Элементы.ТоварыСтавкаНДС.ТолькоПросмотр	 = Истина;
		иначе
		   	Элементы.ТоварыЦена.ТолькоПросмотр	 	 = Ложь;
			Элементы.ТоварыСумма.ТолькоПросмотр		 = Ложь;
			Элементы.ТоварыСуммаВсего.ТолькоПросмотр = Ложь;
			Элементы.ТоварыСуммаНДС.ТолькоПросмотр	 = Ложь;
			Элементы.ТоварыСтавкаНДС.ТолькоПросмотр	 = Ложь;	
		КонецЕсли;
    КонецЕсли; 
КонецПроцедуры

&НаСервере
&Перед("ПровестиЧекККМПередПробитием")
Процедура ТБКПровестиЧекККМПередПробитием(ОбъектЧекККМ, ПараметрыОперации, ПараметрыИнформации)
	Если не ЗначениеЗаполнено(ОбъектЧекККМ.КассаККМ) тогда
		ОбъектЧекККМ.КассаККМ	=	ТекущаяКассаККМ;	
	КонецЕсли;
	
	//Вик 2021_06_02
	Для каждого Строка из  ОбъектЧекККМ.Товары цикл
		Если Строка.Сумма = 0 тогда
			
			Для каждого Строка2 из  ОбъектЧекККМ.Товары цикл
				Если Строка2.Сумма > 1 тогда 	
					Строка2.Сумма	 = Строка2.Сумма - (0.01 * Строка.Количество);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Строка.Сумма 				 = Строка.Сумма + (0.01 * Строка.Количество) ;
		КонецЕсли;
	КонецЦикла;
	//конецВик
КонецПроцедуры

//Вик 2021_08_13  для интернет заказов
&НаКлиенте
Процедура ОбработатьИнтернетЗаказы_Клиент()
	ОбработатьИнтернетЗаказы();
	
	флНужноВключитьИндикацию					= ПроверкаНеобходимостиИндикации();
	флНужноВключитьИндикациюОтмененныхЗаказов	= ПроверкаНеобходимостиИндикацииОтменыЗаказов();

	ОбработкаИндикации(флНужноВключитьИндикацию, флНужноВключитьИндикациюОтмененныхЗаказов);   
КонецПроцедуры

&НаСервере
Процедура ОбработатьИнтернетЗаказы()	
	Если АдресВХ = "" тогда Возврат КонецЕсли;
	
	Массив = ПолучитьИзВременногоХранилища(АдресВХ);
	КаталогНаСервере	=	Массив[0];
	Соединение			=	Массив[1];
	
	Попытка
    	Файлы	=	Соединение.НайтиФайлы(КаталогНаСервере+"/ZAKAZ","*.json");
	Исключение
		Возврат;
	КонецПопытки;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Для каждого Файл Из Файлы цикл
		ВремФайл = ПолучитьИмяВременногоФайла("json");
    	Соединение.Получить(Файл.Полноеимя,ВремФайл);
		
		ЧтениеJSON.ОткрытьФайл(ВремФайл);
		Мас	=	 ПрочитатьJSON(ЧтениеJSON, Ложь);//Массив
		Если Мас.количество() = 1 тогда
			СтруктураЗаказа	= Мас[0];
			//далее создаем заказ или ищем его
			ОбработатьЗаказ(СтруктураЗаказа);					
		КонецЕсли;
		
		ЧтениеJSON.Закрыть();
		
        УдалитьФайлы(ВремФайл);  				
	КонецЦикла;  
	
	ОбработатьОтменыЗаказов(Соединение,КаталогНаСервере);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьЗаказ(СтруктураЗаказа); 	 					
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	ЗаказПокупателя.НомерЗаказаНаСайте = &НомерЗаказаНаСайте
	      	 	             |	И НЕ ЗаказПокупателя.ПометкаУдаления");
	Запрос.УстановитьПараметр("НомерЗаказаНаСайте",СокрЛП(СтруктураЗаказа.СайтНомер));
	рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() = 0 тогда  		
		СоздатьНовыйИнтернетЗаказ(СтруктураЗаказа);  			
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьНовыйИнтернетЗаказ(СтруктураЗаказа);
	НовыйДок	=	Документы.ЗаказПокупателя.СоздатьДокумент();
	НовыйДок.НомерЗаказаНаСайте	=	СокрЛП(СтруктураЗаказа.СайтНомер);
	

	НовыйДок.Дата			=	Дата(СтруктураЗаказа.Дата);
	НовыйДок.Номер			=	СтруктураЗаказа.НомерЗаказаУТ;
	НовыйДок.Комментарий	=	"Оплачен: "    		+ СтруктураЗаказа.Оплачен + Символы.ПС +
								"Тип оплаты: " 		+ СтруктураЗаказа.СайтТипОплаты + Символы.ПС +
								"Доп. информация: " + СтруктураЗаказа.СайтДопИнфо;
	
	НовыйДок.Статус			=	Перечисления.СтатусыЗаказовПокупателей.НеСогласован;
	НовыйДок.ИнтернетЗаказ	=	Истина;
	
	Если ЗначениеЗаполнено(СтруктураЗаказа.ДатаОтгрузки) тогда
		НовыйДок.ЖелаемаяДатаПродажи	=	Дата(СтруктураЗаказа.ДатаОтгрузки);
	КонецЕсли;
	
	//товары
	Для Ном =1 по 100 цикл
		Если СтруктураЗаказа.Свойство("Количество"+Строка(Ном)) тогда
			НоваяСтрока	=	НовыйДок.Товары.Добавить();
			
			НужХар		=	"";
			НужйШК		=	"";
			НужКол		=	"";
			НужЦена		=	"";
			НужСумма	=	"";
			НужПроц	=	"";
			
			СтруктураЗаказа.Свойство("Количество"			+	Строка(Ном),	НужКол);
			СтруктураЗаказа.Свойство("Характеристика"		+	Строка(Ном),	НужХар);
			СтруктураЗаказа.Свойство("Штрихкод"				+	Строка(Ном),	НужйШК);
			СтруктураЗаказа.Свойство("Цена"					+	Строка(Ном),	НужЦена);
			СтруктураЗаказа.Свойство("Сумма"				+	Строка(Ном),	НужСумма);
			СтруктураЗаказа.Свойство("ПроцентСкидкиНаценки"	+	Строка(Ном),	НужПроц);
			
			НужЦена		=	СтрЗаменить(НужЦена,Символы.НПП,"");
			НужСумма	=	СтрЗаменить(НужСумма,Символы.НПП,"");
			НужКол		=	СтрЗаменить(НужКол,Символы.НПП,"");

			
			Запрос	=	новый запрос("ВЫБРАТЬ
			      	 	             |	Штрихкоды.Владелец КАК Владелец,
			      	 	             |	Штрихкоды.Упаковка КАК Упаковка
			      	 	             |ИЗ
			      	 	             |	РегистрСведений.Штрихкоды КАК Штрихкоды
			      	 	             |ГДЕ
			      	 	             |	Штрихкоды.Штрихкод = &Штрихкод");
			
			Запрос.УстановитьПараметр("Штрихкод",НужйШК);
			
			Рез	=	Запрос.Выполнить().Выгрузить();
			
			Если Рез.Количество() >0 тогда
				НоваяСтрока.Номенклатура		=	Рез[0].Владелец;	
				Если ЗначениеЗаполнено(НужХар) тогда
					Запрос	=	Новый запрос("ВЫБРАТЬ
					      	 	             |	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
					      	 	             |ИЗ
					      	 	             |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
					      	 	             |ГДЕ
					      	 	             |	ХарактеристикиНоменклатуры.Наименование = &Наименование
					      	 	             |	И ХарактеристикиНоменклатуры.Владелец = &Владелец");
					Запрос.УстановитьПараметр("Владелец",НоваяСтрока.Номенклатура);
					Запрос.УстановитьПараметр("Наименование",НужХар);
					Рез = Запрос.Выполнить().Выгрузить();
					
					Если Рез.Количество() >0 тогда
						НоваяСтрока.Характеристика		=	Рез[0].Ссылка;
					КонецЕсли;
				КонецЕсли;

				
				
				НоваяСтрока.Количество			=	Число(СтрЗаменить(НужКол,",","."));
				НоваяСтрока.КоличествоУпаковок	=	НоваяСтрока.Количество;
				НоваяСтрока.Цена				=	Число(СтрЗаменить(НужЦена,",","."));
				НоваяСтрока.Сумма				=	Число(СтрЗаменить(НужСумма,",","."));
				НоваяСтрока.ПроцентРучнойСкидки	=	Число(СтрЗаменить(НужПроц,",",".")); 
			КонецЕсли; 		
			
		иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйДок.Записать();
	
	//Доп
	Если СтруктураЗаказа.Оплачен = "Да" тогда
		Рег	=	РегистрыСведений.СостояниеОплатыЗаказаПокупателя.СоздатьМенеджерЗаписи();
		Рег.ЗаказПокупателя	=	НовыйДок.Ссылка;
		Рег.Состояние		=	Перечисления.СостоянияОплатыЗаказаПокупателя.ОплаченПолностью;
		Рег.Период			=	НовыйДок.Дата;
		Рег.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ОбработатьОтменыЗаказов(Соединение,КаталогНаСервере)
	//Обрабатываем заказы за последние две недели
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте,
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	ЗаказПокупателя.Дата >= &Дата
	      	 	             |	И НЕ ЗаказПокупателя.ПометкаУдаления");
	Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()) - 14*24*60*60);
	
	рез = Запрос.Выполнить().Выгрузить();
	Для каждого Строка из Рез цикл
		Файлы	=	Соединение.НайтиФайлы(КаталогНаСервере+"/ZAKAZ",СокрЛП(Строка.НомерЗаказаНаСайте) + ".json");
		Если Файлы.количество() = 0 тогда
			Об = Строка.Ссылка.ПолучитьОбъект();
			Об.Номер	=	"";
			Об.Комментарий	= Об.Комментарий + " ОТМЕНЕН В ОФИСЕ";	
			Об.Записать();
			//Об.УстановитьПометкуУдаления(истина);
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПроверкаНеобходимостиИндикации()
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	НЕ ЗаказПокупателя.ПометкаУдаления
	      	 	             |	И ЗаказПокупателя.Статус = &Статус");
	Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыЗаказовПокупателей.НеСогласован);
	
	Возврат не запрос.Выполнить().Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция  ПроверкаНеобходимостиИндикацииОтменыЗаказов()
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	НЕ ЗаказПокупателя.ПометкаУдаления
	      	 	             |	И ЗаказПокупателя.Комментарий ПОДОБНО &Комментарий");
	Запрос.УстановитьПараметр("Комментарий","%ОТМЕНЕН В ОФИСЕ%");
	
	Возврат не запрос.Выполнить().Пустой();
КонецФункции


&НаКлиенте
Процедура ОбработкаИндикации(флНужноВключитьИндикацию, флНужноВключитьИндикациюОтмененныхЗаказов)
	Если флНужноВключитьИндикацию тогда
		Элементы.ЗаказыПокупателей.ЦветТекста = WebЦвета.Красный;
	иначе
		Элементы.ЗаказыПокупателей.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;
	
	Если флНужноВключитьИндикациюОтмененныхЗаказов тогда
		Элементы.ЗаказыДляОтмены.ЦветТекста = WebЦвета.Красный;
	иначе
		Элементы.ЗаказыДляОтмены.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;   	
КонецПроцедуры


&НаКлиенте
Процедура ТБКЗаказыПокупателейПосле(Команда)
	//ЗначениеОтбора  = Новый Структура("Номер", "333");
	//Параметрыотбора = Новый Структура("Отбор", ЗначениеОтбора);
	

	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеОткрытияЗаказов",ЭтотОбъект); 
	Форма	=	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаСписка",,,,,,Оповещение); 
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПометкаУдаления"); 
	ОтборВладелец.ПравоеЗначение 	= Ложь;   
	
	СЗ	=	ПолучитьСЗ_Статусов();
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Статус"); 
	ОтборВладелец.ПравоеЗначение 	= СЗ; 
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеСодержит; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Комментарий"); 
	ОтборВладелец.ПравоеЗначение 	= "ОТМЕНЕН В ОФИСЕ";
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеОткрытияЗаказов(РезультатОткрытияФормы, стр) экспорт
	флНужноВключитьИндикацию					= ПроверкаНеобходимостиИндикации();
	флНужноВключитьИндикациюОтмененныхЗаказов	= ПроверкаНеобходимостиИндикацииОтменыЗаказов();

	ОбработкаИндикации(флНужноВключитьИндикацию,флНужноВключитьИндикациюОтмененныхЗаказов);   
КонецПроцедуры


&НаКлиенте
Процедура ТБКЗаказыДляОтменыПосле(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеОткрытияЗаказов",ЭтотОбъект); 
	Форма	=	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаСписка",,,,,,Оповещение); 
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПометкаУдаления"); 
	ОтборВладелец.ПравоеЗначение 	= Ложь;   
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Содержит; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Комментарий"); 
	ОтборВладелец.ПравоеЗначение 	= "ОТМЕНЕН В ОФИСЕ";  
КонецПроцедуры


&НаСервере
Процедура ТБКПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	Попытка
		СтруктураПодключения	=	ОбщегоНазначения.ПолучитьСтруктуруПодключенияFTP();
	Исключение
		Сообщить("Нет данных для подключения по фтп!!");
		Возврат;
	КонецПопытки;
	
	Если СтруктураПодключения = Неопределено тогда
		Сообщить("Нет данных для подключения по фтп!");
	иначе
		Попытка
			КаталогНаСервере		=	СтруктураПодключения.КаталогНаСервере;  		
			Соединение = Новый FTPСоединение(СтруктураПодключения.ИмяFTPСервера, СтруктураПодключения.Порт,
										СтруктураПодключения.Пользователь, СтруктураПодключения.Пароль, , Истина);
										
										
			Массив	=	новый Массив;
			Массив.Добавить(КаталогНаСервере);
			Массив.Добавить(Соединение);
		
			АдресВХ	=	ПоместитьВоВременноеХранилище(Массив,ЭтаФорма.УникальныйИдентификатор);
		Исключение
			Соединение = Неопределено;
		КонецПопытки;
	КонецЕсли;										
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ТБКПриЗакрытииПослеНаСервере()
	Соединение = Неопределено
КонецПроцедуры


&НаКлиенте
Процедура ТБКПриЗакрытииПосле(ЗавершениеРаботы)
	ТБКПриЗакрытииПослеНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСЗ_Статусов()
	СЗ	=	Новый СписокЗначений;
	СЗ.Добавить(Перечисления.СтатусыЗаказовПокупателей.НеСогласован);
	СЗ.Добавить(Перечисления.СтатусыЗаказовПокупателей.Согласован);  
	
	Возврат СЗ;
КонецФункции

&НаСервере
Функция ПроверкаНаПометку(Номенклатура)
	Возврат Номенклатура.ПометкаУдаления;
КонецФункции
//КонецВик

