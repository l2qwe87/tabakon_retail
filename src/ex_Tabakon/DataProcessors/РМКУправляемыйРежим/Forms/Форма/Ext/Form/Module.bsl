&НаКлиенте
Перем флЭтоВнешнийЭквайринг;

&НаКлиенте
Перем МассивКассККМКлиент_оригинал;


&НаСервереБезКонтекста
Функция ПолучитьТекущегоПродавца()
	текущийПользователь = Пользователи.ТекущийПользователь();
	Возврат текущийПользователь.ФизическоеЛицо;
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьТрейдИн()
	результ = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	замены.Номенклатура КАК Владелец,
	               |	замены.Комплектующая КАК Номенклатура,
	               |	замены.ХарактеристикаКомплектующей КАК Характеристика,
	               |	замены.ДоляСтоимости КАК Доплата
	               |ИЗ
	               |	РегистрСведений.КомплектующиеНоменклатуры КАК замены
	               |ИТОГИ ПО
	               |	Владелец";
	
	прототипСтруктуры = "Владелец,Номенклатура,Характеристика,Доплата";
	
	резЗамены = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока резЗамены.Следующий() Цикл
		
		резКомплект = резЗамены.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		мВарианты = Новый Массив();
		Пока резКомплект.Следующий() Цикл
			
			стр = Новый Структура(прототипСтруктуры);
			ЗаполнитьЗначенияСвойств(стр,резКомплект);
			мВарианты.Добавить(стр);
		КонецЦикла;
		
		результ.Вставить(резЗамены.Владелец , мВарианты);
	Конеццикла;
	
	
	возврат результ;
КонецФункции

&НаКлиенте
&После("ОбновитьФорму")
Процедура ТБКОбновитьФорму()
	// Вставить содержимое метода.
	текущегоПродавца = ПолучитьТекущегоПродавца();
	
	трейдИн = ПолучитьТрейдИн();
	Если ЛОЖЬ Тогда трейдИн = Новый Соответствие(); КонецЕсли;
	
	Элементы.КартинкаПО22РучныеСкидки.Доступность			=	Истина;
	Элементы.ПрограммноКартинкаПО22РучныеСкидки.Доступность	=	Истина;
	
	флЕстьГЛОсоСкидкой	=	Ложь;
	Для Каждого стр из Объект.Товары Цикл
		
		Если не ЗначениеЗаполнено(стр.Продавец) Тогда
			стр.Продавец = текущегоПродавца;
		КонецЕсли;
		
		Если НЕ ПроверкаНапредметПустогоНаименованияТовара(стр.Номенклатура) Тогда
			оповещение = Новый ОписаниеОповещения("ОбработкаЗавершения_ПроверкаНапредметПустогоНаименованияТовара",ЭтотОбъект, стр);
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаСообщениеОПлохойНоменклатуре",неопределено,неопределено
					,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
					
			возврат;			
		КонецЕсли; 		
		
		//Вик 2021_08_31
		Если ПроверкаНаПометку(стр.Номенклатура)  Тогда
			ПараметрыОткр	=	новый Структура;
			ПараметрыОткр.Вставить("ИзменитьЗаголовок",истина);
			
			оповещение = Новый ОписаниеОповещения("ОбработкаЗавершения_ПроверкаНапредметПустогоНаименованияТовара",ЭтотОбъект, стр);//эта подходит
			ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаСообщениеОПлохойНоменклатуре",ПараметрыОткр,неопределено
					,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
					
			возврат;			
		КонецЕсли; 
		//КонецВик
		
		
		Если ЗначениеЗаполнено(стр.Номенклатура) и ЗначениеЗаполнено(стр.Цена) Тогда
			Если не Найти(ПолноеНаименованиеНоменклатуры(стр.Номенклатура),"Напиток") Тогда//Вик 2022_04_12  
				Если (трейдИн.Получить(стр.Номенклатура) <> неопределено) Тогда
					параметрыВыбора = Новый Структура();
					параметрыВыбора.Вставить("ТрейдИн", трейдИн.Получить(стр.Номенклатура));
					
					оповещение = Новый ОписаниеОповещения("ОбработкаЗавершенияВыбораЗамены",ЭтотОбъект, стр);
					
					ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаВыборЗамены",параметрыВыбора,УникальныйИдентификатор
						,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				КонецЕсли;
			КонецЕсли;			
		конецЕсли;
		
		Если ЭтоГЛО(стр.Номенклатура) тогда //Вик 2021_09_28 по просьбе Козьминой
			Элементы.КартинкаПО22РучныеСкидки.Доступность			=	Ложь;
			Элементы.ПрограммноКартинкаПО22РучныеСкидки.Доступность	=	Ложь;
			Если стр.СуммаРучнойСкидки > 0 тогда
				флЕстьГЛОсоСкидкой = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стр.Номенклатура) и не ЗначениеЗаполнено(стр.НомерБукета) и Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			Если Найти(ПолноеНаименованиеНоменклатуры(стр.Номенклатура),"Произвольный букет") Тогда//Вик 2022_04_12  
				ПараметрыОткр	=	новый Структура;
				ПараметрыОткр.Вставить("ИзменитьЗаголовок",истина);
				ПараметрыОткр.Вставить("НовыйЗаголовок","Нельзя продавать произвольные букеты без номера");
				
				оповещение = Новый ОписаниеОповещения("ОбработкаЗавершения_ПроверкаНапредметПустогоНаименованияТовара",ЭтотОбъект, стр);//эта подходит
				ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаСообщениеОПлохойНоменклатуре",ПараметрыОткр,неопределено
						,,,,оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

			КонецЕсли;			
		конецЕсли;


		
		
		
	КонецЦикла;
	Если не флЕстьГЛОсоСкидкой тогда
		КодАкции = "";
	КонецЕсли;
	
	Если Объект.Товары.Количество()=0 тогда
		УправляемыеСкидки.Очистить();
		ПокупкаСотрудника						=	Ложь;
		Элементы.ПокупкаСотрудника.Доступность	=	Истина;
		Элементы.Товары.Доступность				=	Истина;
	КонецЕсли; 

	Если ДоступнаПроверкаОрганизаций тогда
		синхронно = ЛОЖЬ;
		Если синхронно Тогда
			ПроверитьСтатусыМарок_СерверСинхронно();
			ПроверитьСтатусыМарок_Результат();
		Иначе
			ПроверитьСтатусыМарок();
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолноеНаименованиеНоменклатуры(Номенклатура)
	Возврат Номенклатура.НаименованиеПолное;
КонецФункции

&НаКлиенте
Процедура ПроверитьСтатусыМарок() ЭКСПОРТ
	
	Если ЗначениеЗаполнено(ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок) Тогда
		ПодключитьОбработчикОжидания("ПроверитьСтатусыМарок",0.5,ИСТИНА);
		возврат;
	КонецЕсли;
	
	//ПроверитьСтатусыМарок_Сервер();
	//Если ЗначениеЗаполнено(ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок) Тогда
	Если ПроверитьСтатусыМарок_Сервер() Тогда
		ПодключитьОбработчикОжидания("ПроверитьСтатусыМарок_Результат",1,ЛОЖЬ);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция ПроверитьСтатусыМарок_СерверСинхронно()
	
	марки = ПолучитьМаркиНаПроверку();
	
	Если марки.Количество() = 0 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок = ПоместитьВоВременноеХранилище(неопределено);
	
	адресРезультата = ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок;
	
	рез = Обработки.ТБК_Маркировка.ПолучитьВладельцаМарок(марки);
	ПоместитьВоВременноеХранилище(рез, адресРезультата);
КонецФункции
&НаСервере
Функция ПроверитьСтатусыМарок_Сервер()
	
	марки = ПолучитьМаркиНаПроверку();
	
	Если марки.Количество() = 0 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	//йй = Обработки.ТБК_Маркировка.ПолучитьВладельцаМарок(марки); 
	
	//коммент Вик 2022_01_31
	//Если ЗначениеЗаполнено(ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок) Тогда
	//	Возврат ЛОЖЬ;
	//КонецЕсли;     
	//Вик
	
	
	ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок = ПоместитьВоВременноеХранилище(неопределено);
			
	ТекстФоновойПроцедуры = "
	| Попытка
	|	рез = Обработки.ТБК_Маркировка.ПолучитьВладельцаМарок(марки);
	|	ПоместитьВоВременноеХранилище(рез, адресРезультата);
	| Исключение                     
	|   информацияОбОшибке = ИнформацияОбОшибке();
	| 	ПоместитьВоВременноеХранилище(информацияОбОшибке, адресРезультата);
	| КонецПопытки;
	|";
	
	ФоновоеВыполнение.ЗапуститьФоновоеВыполнение(ТекстФоновойПроцедуры,Новый Структура("марки,адресРезультата",марки, ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок));
	
	Возврат ИСТИНА;
КонецФункции


&НаКлиенте
Функция ПолучитьАкцизныеМаркиПоКлючСвязи(ключСвязи)
	мРезультат = новый Массив;
	
	Для Каждого стр из Объект.АкцизныеМарки Цикл
		Если стр.КлючСвязи = ключСвязи Тогда
			мРезультат.Добавить(стр);
		КонецЕсли;
	КонецЦикла;
	
	Возврат мРезультат;
КонецФункции

&НаСервере
Функция ПолучитьТоварыПоКлючСвязи(ключСвязи)
	Для Каждого стр из Объект.Товары Цикл
		Если стр.КлючСвязи = ключСвязи Тогда
			Возврат стр;
		КонецЕсли;
	КонецЦикла;
КонецФункции



&НаСервере
Функция ПолучитьМаркиНаПроверку()
	марки = новый Массив;
	Для Каждого стр из Объект.АкцизныеМарки Цикл
		
		стрТовары = ПолучитьТоварыПоКлючСвязи(стр.КлючСвязи);
		Если (стрТовары <> неопределено)И ЗначениеЗаполнено(стрТовары.Номенклатура) И ОбщегоНазначения.ЭтоМаркированнаяНоменклатура(стрТовары.Номенклатура) тогда
			Если стр.ПроверкаМаркиСтатус = 0 Тогда
				марки.Добавить(стр.КодАкцизнойМарки);
				стрТовары.ПроверкаМаркиСтатус = 0;
			КонецЕсли;
		Иначе
			стр.ПроверкаМаркиСтатус = -1;
			Если (стрТовары <> неопределено) Тогда
				стрТовары.ПроверкаМаркиСтатус = -1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат марки;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИзВременногоХранилища_Сервер(адрес)
	Попытка
		Возврат ПолучитьИзВременногоХранилища(адрес);
	Исключение
		Возврат неопределено;
	КонецПопытки;
КонецФункции


&НаКлиенте
Процедура ПроверитьСтатусыМарок_Результат() ЭКСПОРТ
	статусыМарок = ПолучитьИзВременногоХранилища_Сервер(ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок);
	//Если (статусыМарок = неопределено) ИЛИ (не ЗначениеЗаполнено(статусыМарок)) Тогда
	Если статусыМарок = неопределено или статусыМарок = "" или Строка(статусыМарок) = "ИнформацияОбОшибке" Тогда
		Возврат
	КонецЕсли; 
	
	//Доп Вик 2022_01_31
	ОтборСтр	=	Новый Структура();
	ОтборСтр.Вставить("ПроверкаМаркиСтатус",0);
	Строки =  Объект.АкцизныеМарки.НайтиСтроки(ОтборСтр);
	Если Строки.количество() <> статусыМарок.Количество() тогда  
		ПроверитьСтатусыМарок_Сервер();
		Возврат
	КонецЕсли;
	//КонецВик	
	
	ОтключитьОбработчикОжидания("ПроверитьСтатусыМарок_Результат");
	
	инн = СокрЛП(ПолучитьЗначениеРеквизита(ЭтаФорма.Объект.Организация, "ИНН"));
	                          
	Если ЛОЖЬ Тогда статусыМарок = Новый Соответствие; КонецЕсли;
	Для Каждого стр из Объект.АкцизныеМарки Цикл
		Если стр.ПроверкаМаркиСтатус = 0 Тогда
			//Если длина = 25 тогда необходимо отбросить 4 последних символа про МРЦ)
			//это спроведливо только для пачки
			мкрка = ?(СтрДлина(стр.КодАкцизнойМарки = 25),Лев(стр.КодАкцизнойМарки, 25 - 4),стр.КодАкцизнойМарки);
			статус = статусыМарок.Получить(мкрка);
			Если статус = неопределено Тогда
				стр.ПроверкаМаркиСтатус = 2;
			Иначе
				Если статус.ИНН = инн Тогда 
					стр.ПроверкаМаркиСтатус = 1;	
				Иначе
					стр.ПроверкаМаркиСтатус = 2;
					стр.ПроверкаМаркиИНН = статус.ИНН;
				КонецЕсли;
				
				//ПодключитьОбработчикОжидания("ПроверитьСтатусыМарок_Результат",1,ЛОЖЬ);
				//Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Обновить данные в общей таблице
	Для Каждого стр из Объект.Товары Цикл
		Если стр.ПроверкаМаркиСтатус < 0 Тогда
			ПРОДОЛЖИТЬ;
		КонецЕсли;
		Если не стр.МаркируемаяПродукция тогда Продолжить; КонецЕсли;		
		
		строкиМарки = ПолучитьАкцизныеМаркиПоКлючСвязи(стр.КлючСвязи);
		минСтатус = 99;
		максСтатус = 0;
		агрегатИНН = "";
		
		Для Каждого стрМарка из строкиМарки Цикл
			минСтатус = Мин(минСтатус, стрМарка.ПроверкаМаркиСтатус);
			максСтатус = Макс(максСтатус, стрМарка.ПроверкаМаркиСтатус);
			
			агрегатИНН = 
				агрегатИНН + Символы.ПС + 
				стрМарка.КодАкцизнойМарки + " : " + ?(ЗначениеЗаполнено(стрМарка.ПроверкаМаркиИНН),стрМарка.ПроверкаМаркиИНН,"V"); 
			
		КонецЦикла;
		
		стр.ПроверкаМаркиИНН = "";
		Если (минСтатус > 0) и (максСтатус > 1) Тогда 
			стр.ПроверкаМаркиИНН = СокрЛП(агрегатИНН);
		КонецЕсли;
		
		Если минСтатус = максСтатус Тогда
			стр.ПроверкаМаркиСтатус = минСтатус;
		ИначеЕсли минСтатус > 0 Тогда
			стр.ПроверкаМаркиСтатус = 3;
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма.адресРезультата_ПроверитьСтатусыМарок = "";
		
КонецПроцедуры


&НаКлиенте
Процедура ТБКТоварыВыборПосле(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Строка=Элементы.Товары.ТекущиеДанные;
	ПроверкаМаркиИНН = Строка.ПроверкаМаркиИНН;	
	Если ЗначениеЗаполнено(ПроверкаМаркиИНН) Тогда
		//ПоказатьОповещениеПользователя(,,ПроверкаМаркиИНН);
		тд = Новый ТекстовыйДокумент;
		тд.УстановитьТекст(ПроверкаМаркиИНН);
		тд.Показать("Проверка "+Строка.Номенклатура);
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Функция ОбработкаЗавершения_ПроверкаНапредметПустогоНаименованияТовара(РезультатОткрытияФормы, стр)ЭКСПОРТ
	Объект.Товары.Удалить(стр);	
	ОбновитьФорму();
КонецФУнкции


&НаКлиенте
Функция ОбработкаЗавершенияВыбораЗамены(РезультатОткрытияФормы, стр)ЭКСПОРТ
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		стр.Номенклатура = РезультатОткрытияФормы.Номенклатура;
		стр.Характеристика = РезультатОткрытияФормы.Характеристика;
		стр.Цена = РезультатОткрытияФормы.Доплата;
		
		
		стр.Цена = ?(стр.Цена=1,
					0.01,
					стр.Цена
		);
		
		
		стр.Сумма = стр.Цена;
		стр.СуммаВсего = стр.Сумма;
		
	Иначе
		Объект.Товары.Удалить(стр);
	КонецЕсли;
	
	
	ОбновитьФорму();
КонецФУнкции

&НаСервере
&Вместо("ПроверитьЗаполнениеТабличнойЧасти")
Процедура ТБКПроверитьЗаполнениеТабличнойЧасти(Отказ, ПараметрыИнформации, ОплатаТолькоНаличными)
	// Вставить содержимое метода.
	
	Для Каждого стр из Объект.Товары Цикл
		Если СтрДлина(стр.Штрихкод) <= 13 Тогда
			стр.МаркируемаяПродукция = ложь;
		КонецЕсли;
	КонецЦикла;
	
	//Вик 2021_07_01
	Для Каждого Стр из Объект.Товары Цикл
		Если ЗначениеЗаполнено(Стр.Характеристика) и Стр.Цена <108 тогда
			Отказ = Истина;
			Сообщить("Для продажи сигарет < 108р. воспользуйтесь БК");
		ИначеЕсли ТекущаяДата() > '20220401' и ЗначениеЗаполнено(Стр.Характеристика) и Стр.Цена < 112 тогда
			Отказ = Истина;
			Сообщить("Для продажи сигарет < 112р. воспользуйтесь БК");
		КонецЕсли;
		
		//25_04_2022 группы - БК стики гло и БК стики Айкос. Часто ставят цены блоков - поэтому контроль. по просьбе Волковой
		Если Стр.Цена >300 и ( Найти(Стр.Номенклатура.ПолныйКод(),"Ю2-00015938") или Найти(Стр.Номенклатура.ПолныйКод(),"Ю2-00015939") ) тогда 
			Отказ = Истина;
			Сообщить("Нельзя пробивать стики дороже 300р. Возможно вы пробиваете блок");
		КонецЕсли;
	КонецЦикла;;
	//КонецВик
	
	ПродолжитьВызов(Отказ, ПараметрыИнформации, ОплатаТолькоНаличными);
КонецПроцедуры

&НаКлиенте
Процедура ТБКПрименитьВаучерПосле(Команда)
	// Вставить содержимое обработчика.
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивУправляемыеСкидкиДокумента", УправляемыеСкидки.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("Магазин", Объект.Магазин);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуУправляемыхСкидок", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ТБКФормаВаучер",
		ПараметрыФормы,,,,, ОбработчикОповещения, Режим);
КонецПроцедуры

&НаКлиенте
Процедура ТБКПриОткрытииПосле(Отказ)
	//Вставить содержимое обработчика
	
	МассивКассККМКлиент_оригинал = новый Массив;
	
	Для Каждого эл из МассивКассККМКлиент цикл 
		ЭтаФорма.Элементы.ТекущаяКассаККМ.СписокВыбора.Добавить(эл);
		МассивКассККМКлиент_оригинал.Добавить(эл);
	КонецЦикла;
	
	Для Каждого стр из Этаформа.ТаблицаКассККМОрганизаций Цикл
		нстр = Этаформа.ТаблицаКассККМОрганизаций_оригинал.Добавить();
		ЗаполнитьЗначенияСвойств(нстр,стр);
	КонецЦикла;
	
	Этаформа.ТекущаяКассаККМ = МассивКассККМКлиент_оригинал[0];
	
	ТБКТекущаяКассаККМПриИзмененииПосле(неопределено);
	
	Версия = ПолучитьВерсиюКонфигурации();
	Элементы.ВерсияР.Заголовок = Версия;
	
	УстановитьЦветКнопкиОтключитьЭквайринг();
	Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный тогда
		флЭтоВнешнийЭквайринг = Истина;
	иначе
		флЭтоВнешнийЭквайринг = Ложь;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработатьИнтернетЗаказы_Клиент",120);//Вик 2021_08_13
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьВерсиюКонфигурации()
	Возврат ОбщегоНазначения.ПолучитьВерсиюРасширения();	
КонецФункции

&НаКлиенте
Процедура ТБКТекущаяКассаККМПриИзмененииПосле(Элемент)
	// Вставить содержимое обработчика.
	МассивКассККМКлиент.Очистить();
	МассивКассККМКлиент.Добавить(Этаформа.ТекущаяКассаККМ);	
	
	//ТБКТекущаяКассаККМПриИзмененииПослеСервер();
	
	Этаформа.ТаблицаКассККМОрганизаций.Очистить();
	
	Для каждого стр из Этаформа.ТаблицаКассККМОрганизаций_оригинал Цикл
		Если стр.КассаККМ = Этаформа.ТекущаяКассаККМ Тогда
			нстр = Этаформа.ТаблицаКассККМОрганизаций.Добавить();
			ЗаполнитьЗначенияСвойств(нстр,стр);
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаКассККМОрганизаций.Количество() = 1 Тогда
		Объект.Организация = ТаблицаКассККМОрганизаций[0].Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТБКТекущаяКассаККМПриИзмененииПослеСервер()
	
	
		
КонецФункции



//Ложь - номенклатура плохая, Истина - Номенклатура хорошая
&НаСервереБезКонтекста
Функция ПроверкаНапредметПустогоНаименованияТовара(Номенклатура)
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		возврат Ложь;
	КонецЕсли;
	
	наименование = ПолучитьЗначениеРеквизита(Номенклатура,"Наименование");
	Если наименование = неопределено Тогда
		возврат Ложь;
	КонецЕсли;
	
	наименование = СтрЗаменить(наименование,"<","");
	наименование = СтрЗаменить(наименование,">","");
	наименование = СтрЗаменить(наименование,"	","");
	наименование = СтрЗаменить(наименование,"  ","");
	наименование = СтрЗаменить(наименование,"","");
	
	
	Возврат ЗначениеЗаполнено(наименование);
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка,ИмяРеквизита)
	Попытка
		Возврат Ссылка[ИмяРеквизита];
	Исключение
		Возврат неопределено;
	Конецпопытки
КонецФункции

&НаСервере
&После("ЗаполнитьОстаткиСервер")
Процедура ТБКЗаполнитьОстаткиСервер()
	ЗапасыСервер.ЗаполнитьОстаткиНоменклатурыБезУчетаХарактеристик(Объект, "Товары")
КонецПроцедуры

&НаКлиенте
Процедура ТБКDebug_ОбработатьМаркуПосле(Команда)
	ДанныеШтрихкода = Новый Структура;
	ДанныеШтрихкода.Вставить("Количество", 1);
	ДанныеШтрихкода.Вставить("Штрихкод"  , ЭтаФорма.Debug_Марка);
	
	ОбработатьКодМаркировки(ДанныеШтрихкода);

КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя")
Процедура ВместоВыполнитьПО16ВвестиВозвратТовараОтРозничногоПокупателя()
	Если не ОбщегоНазначенияВызовСервера.ПроверитьВозможностьРедактирования_Общая()  тогда
		
		ЗаголовокИнформации = НСтр("ru = 'Запрет возврата без основания'");
		ТекстСообщения = НСтр("ru = 'Для возврата за прошлый период в форме меню нажмите Чеки -> Ввести на основании -> Возврат от покупателя -> кнопка Нал или Карта '");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);

		Возврат;
	КонецЕсли;
КонецПроцедуры


&НаСервере
&Вместо("ОткрытьЗакрытьМенюПрочихОпераций")
Процедура ТБК_ОткрытьЗакрытьМенюПрочихОпераций()
	
	Элементы.ГруппаПрочихОпераций.Видимость = НЕ Элементы.ГруппаПрочихОпераций.Видимость;
	Элементы.ГруппаТБК.Видимость			= НЕ Элементы.ГруппаТБК.Видимость;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереключитьЭквайрингСервер(РабочееМесто)
	
	ТЗНужныйТерминал = ПолучитьРаботающийТерминал(РабочееМесто);	
	
	Если ТЗНужныйТерминал <> Неопределено тогда
		Для каждого Строка из ТЗНужныйТерминал цикл
			Об = Строка.Ссылка.ПолучитьОбъект();
			Об.ИспользоватьБезПодключенияОборудования = не Об.ИспользоватьБезПодключенияОборудования;
			Об.ПодключаемоеОборудование 			  = Строка.ПодключаемоеОборудование;
			Об.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРаботающийТерминал(РабочееМесто) 	
	СписокУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам( , , РабочееМесто);
	
	Для каждого Строка из СписокУстройств цикл
		Если Строка.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал тогда
			
			Запрос	=	Новый запрос("ВЫБРАТЬ
			      	 	             |	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
			      	 	             |ГДЕ
			      	 	             |	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
			      	 	             |	И (ЭквайринговыеТерминалы.ПодключаемоеОборудование = &ПодключаемоеОборудование
			      	 	             |			ИЛИ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)");
			Запрос.УстановитьПараметр("ПодключаемоеОборудование",Строка.Ссылка);
			
			Рез = Запрос.Выполнить().Выгрузить();
			Если Рез.Количество() > 0 тогда
				ТЗВозврата = Новый ТаблицаЗначений;
				ТЗВозврата.Колонки.Добавить("Ссылка");
				ТЗВозврата.Колонки.Добавить("ИспользоватьБезПодключенияОборудования");
				ТЗВозврата.Колонки.Добавить("ПодключаемоеОборудование");

				Для каждого СтрокаТерминал из Рез цикл
					
					НоваяСтрока = ТЗВозврата.Добавить();
					НоваяСтрока.Ссылка									=	СтрокаТерминал.Ссылка;
					НоваяСтрока.ИспользоватьБезПодключенияОборудования	=	СтрокаТерминал.Ссылка.ИспользоватьБезПодключенияОборудования;
					НоваяСтрока.ПодключаемоеОборудование				=	Строка.Ссылка;
				КонецЦикла;
				 
				Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗВозврата); 
			иначе
				Возврат Неопределено;
			КонецЕсли;  
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура УстановитьЦветКнопкиОтключитьЭквайринг()
	ТЗНужныйТерминал =    ПолучитьРаботающийТерминал(Объект.РабочееМесто);
	
	Если ТЗНужныйТерминал <> Неопределено тогда
		флЕстьРаботающий = Ложь;
		
		Для каждого Строка из ТЗНужныйТерминал цикл
			Если не Строка.ИспользоватьБезПодключенияОборудования тогда
				флЕстьРаботающий = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		
		Если флЕстьРаботающий тогда 
			Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Черный;
			Элементы.КнопкаОтключитьЭквайринг.Заголовок  = "Отключить"+Символы.ПС+"эквайринг";
		иначе
			Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный;
			Элементы.КнопкаОтключитьЭквайринг.Заголовок  = "Включить"+Символы.ПС+"эквайринг"; 
		КонецЕсли;
	иначе
		Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный;
		Элементы.КнопкаОтключитьЭквайринг.Заголовок  = "Включить"+Символы.ПС+"эквайринг";

	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура ТБКОтключитьЭквайрингПосле(Команда)
	Если Объект.Товары.Количество() > 0 тогда
		ЗаголовокИнформации = НСтр("ru = 'Отключение эквайринга'"); 
		ТекстИнформации = НСтр("ru = 'Перед отключением эквайринга необходимо пробить, аннулировать или отложить текущий чек.'");
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстИнформации);
		Возврат;
	КонецЕсли;
	
	Пароль = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводСтроки", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещения, Пароль, "Введите пароль: "); 

КонецПроцедуры

&НаКлиенте
Процедура ВводСтроки(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если ПолученноеЗначение = "0000" тогда 
		ПереключитьЭквайрингСервер(Объект.РабочееМесто);
		УстановитьЦветКнопкиОтключитьЭквайринг();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
&После("ОбработатьУспешноеПробитиеЧека")
Процедура ТБКОбработатьУспешноеПробитиеЧека()
	Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный и не флЭтоВнешнийЭквайринг тогда 
		ПереключитьЭквайрингСервер(Объект.РабочееМесто);
		УстановитьЦветКнопкиОтключитьЭквайринг();
	КонецЕсли;
	
	//Вик 2021_09_13
	Если ЗначениеЗаполнено(КодАкции) тогда
		ПогастьКод(КодАкции);
		КодАкции = "";
	КонецЕсли;
	
	Для каждого Строка из Объект.Товары цикл
		Если ЗначениеЗаполнено(Строка.НомерБукета) тогда
			ПогаситьБукет(Строка.НомерБукета);
		КонецЕсли;
	КонецЦикла;
	//
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьЧО04Возврат")
Процедура ТБКВыполнитьЧО04Возврат()
	Если НЕ ПроверитьВозможностьВозврата() тогда
		Возврат;		
	КонецЕсли;
	
	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьВозвратПоследнегоЧека")
Процедура ТБКВыполнитьВозвратПоследнегоЧека()
	Если НЕ ПроверитьВозможностьВозврата() тогда
		Возврат;		
	КонецЕсли;
	
	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьВозврата()
	Если Элементы.КнопкаОтключитьЭквайринг.ЦветТекста = WebЦвета.Красный и не флЭтоВнешнийЭквайринг тогда
		Если не ОбщегоНазначенияВызовСервера.ПроверитьВозможностьРедактирования_Общая()  тогда
			ЗаголовокИнформации = НСтр("ru = 'Запрет возврата при отключенном терминале'");
			ТекстСообщения = НСтр("ru = 'Для возврата необходимо включить терминал '");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
			Возврат ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;	
КонецФункции 

&НаКлиенте
Процедура ТБКТоварыПриАктивизацииСтрокиПосле(Элемент)
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если не Прав(СокрЛП(Строка(ТекСтрока.Номенклатура)),3)=" БК" тогда
	    	Элементы.ТоварыЦена.ТолькоПросмотр	 	 = Истина;
			Элементы.ТоварыСумма.ТолькоПросмотр		 = Истина;
			Элементы.ТоварыСуммаВсего.ТолькоПросмотр = Истина;
			Элементы.ТоварыСуммаНДС.ТолькоПросмотр	 = Истина;
			Элементы.ТоварыСтавкаНДС.ТолькоПросмотр	 = Истина;
		иначе
		   	Элементы.ТоварыЦена.ТолькоПросмотр	 	 = Ложь;
			Элементы.ТоварыСумма.ТолькоПросмотр		 = Ложь;
			Элементы.ТоварыСуммаВсего.ТолькоПросмотр = Ложь;
			Элементы.ТоварыСуммаНДС.ТолькоПросмотр	 = Ложь;
			Элементы.ТоварыСтавкаНДС.ТолькоПросмотр	 = Ложь;	
		КонецЕсли;
    КонецЕсли; 
КонецПроцедуры

&НаСервере
&Перед("ПровестиЧекККМПередПробитием")
Процедура ТБКПровестиЧекККМПередПробитием(ОбъектЧекККМ, ПараметрыОперации, ПараметрыИнформации)
	Если не ЗначениеЗаполнено(ОбъектЧекККМ.КассаККМ) тогда
		ОбъектЧекККМ.КассаККМ	=	ТекущаяКассаККМ;	
	КонецЕсли;
	
	//Вик 2021_06_02
	Для каждого Строка из  ОбъектЧекККМ.Товары цикл
		Если Строка.Сумма = 0 тогда
			
			Для каждого Строка2 из  ОбъектЧекККМ.Товары цикл
				Если Строка2.Сумма > 1 тогда 	
					Строка2.Сумма	 = Строка2.Сумма - (0.01 * Строка.Количество);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Строка.Сумма 				 = Строка.Сумма + (0.01 * Строка.Количество) ;
		КонецЕсли;
	КонецЦикла;
	//конецВик
КонецПроцедуры

//Вик 2021_08_13  для интернет заказов
&НаКлиенте
Процедура ОбработатьИнтернетЗаказы_Клиент()
	Попытка
		ОбработатьИнтернетЗаказы();
	Исключение
	КонецПопытки;
	
	флНужноВключитьИндикацию					= ПроверкаНеобходимостиИндикации();
	флНужноВключитьИндикациюОтмененныхЗаказов	= ПроверкаНеобходимостиИндикацииОтменыЗаказов();
	флНужноВключитьИндикациюЗаявок				= ПроверкаНеобходимостиИндикацииЗаявок();

	ОбработкаИндикации(флНужноВключитьИндикацию, флНужноВключитьИндикациюОтмененныхЗаказов, флНужноВключитьИндикациюЗаявок);   
КонецПроцедуры

&НаСервере
Процедура ОбработатьИнтернетЗаказы()	
	Если АдресВХ = "" тогда Возврат КонецЕсли;
	
	Массив = ПолучитьИзВременногоХранилища(АдресВХ);
	КаталогНаСервере	=	Массив[0];
	Соединение			=	Массив[1];
	
	Попытка
    	Файлы	=	Соединение.НайтиФайлы(КаталогНаСервере+"/ZAKAZ","*.json");
	Исключение
		Возврат;
	КонецПопытки;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Для каждого Файл Из Файлы цикл
		ВремФайл = ПолучитьИмяВременногоФайла("json");
    	Соединение.Получить(Файл.Полноеимя,ВремФайл);
		
		ЧтениеJSON.ОткрытьФайл(ВремФайл);
		Мас	=	 ПрочитатьJSON(ЧтениеJSON, Ложь);//Массив
		Если Мас.количество() = 1 тогда
			СтруктураЗаказа	= Мас[0];
			//далее создаем заказ или ищем его
			ОбработатьЗаказ(СтруктураЗаказа);					
		КонецЕсли;
		
		ЧтениеJSON.Закрыть();
		
        УдалитьФайлы(ВремФайл);  				
	КонецЦикла;  
	
	ОбработатьОтменыЗаказов(Соединение,КаталогНаСервере);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьЗаказ(СтруктураЗаказа); 	 					
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	ЗаказПокупателя.НомерЗаказаНаСайте = &НомерЗаказаНаСайте");
	Запрос.УстановитьПараметр("НомерЗаказаНаСайте",СокрЛП(СтруктураЗаказа.СайтНомер));
	рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() = 0 тогда  		
		СоздатьНовыйИнтернетЗаказ(СтруктураЗаказа);  			
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьНовыйИнтернетЗаказ(СтруктураЗаказа);
	НовыйДок	=	Документы.ЗаказПокупателя.СоздатьДокумент();
	НовыйДок.НомерЗаказаНаСайте	=	СокрЛП(СтруктураЗаказа.СайтНомер);
	

	НовыйДок.Дата			=	Дата(СтруктураЗаказа.Дата);
	НовыйДок.Номер			=	СтруктураЗаказа.НомерЗаказаУТ;
	НовыйДок.Комментарий	=	"Оплачен: "    		+ СтруктураЗаказа.Оплачен + Символы.ПС +
								"Тип оплаты: " 		+ СтруктураЗаказа.СайтТипОплаты + Символы.ПС +
								"Доп. информация: " + СтруктураЗаказа.СайтДопИнфо;
	
	НовыйДок.Статус			=	Перечисления.СтатусыЗаказовПокупателей.НеСогласован;
	НовыйДок.ИнтернетЗаказ	=	Истина;
	
	Если ЗначениеЗаполнено(СтруктураЗаказа.ДатаОтгрузки) тогда
		НовыйДок.ЖелаемаяДатаПродажи	=	Дата(СтруктураЗаказа.ДатаОтгрузки);
	КонецЕсли;
	
	//товары
	Для Ном =1 по 100 цикл
		Если СтруктураЗаказа.Свойство("Количество"+Строка(Ном)) тогда
			НоваяСтрока	=	НовыйДок.Товары.Добавить();
			
			НужХар		=	"";
			НужйШК		=	"";
			НужКол		=	"";
			НужЦена		=	"";
			НужСумма	=	"";
			НужПроц	=	"";
			
			СтруктураЗаказа.Свойство("Количество"			+	Строка(Ном),	НужКол);
			СтруктураЗаказа.Свойство("Характеристика"		+	Строка(Ном),	НужХар);
			СтруктураЗаказа.Свойство("Штрихкод"				+	Строка(Ном),	НужйШК);
			СтруктураЗаказа.Свойство("Цена"					+	Строка(Ном),	НужЦена);
			СтруктураЗаказа.Свойство("Сумма"				+	Строка(Ном),	НужСумма);
			СтруктураЗаказа.Свойство("ПроцентСкидкиНаценки"	+	Строка(Ном),	НужПроц);
			
			НужЦена		=	СтрЗаменить(НужЦена,Символы.НПП,"");
			НужСумма	=	СтрЗаменить(НужСумма,Символы.НПП,"");
			НужКол		=	СтрЗаменить(НужКол,Символы.НПП,"");

			
			Запрос	=	новый запрос("ВЫБРАТЬ
			      	 	             |	Штрихкоды.Владелец КАК Владелец,
			      	 	             |	Штрихкоды.Упаковка КАК Упаковка
			      	 	             |ИЗ
			      	 	             |	РегистрСведений.Штрихкоды КАК Штрихкоды
			      	 	             |ГДЕ
			      	 	             |	Штрихкоды.Штрихкод = &Штрихкод");
			
			Запрос.УстановитьПараметр("Штрихкод",НужйШК);
			
			Рез	=	Запрос.Выполнить().Выгрузить();
			
			Если Рез.Количество() >0 тогда
				НоваяСтрока.Номенклатура		=	Рез[0].Владелец;	
				Если ЗначениеЗаполнено(НужХар) тогда
					Запрос	=	Новый запрос("ВЫБРАТЬ
					      	 	             |	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
					      	 	             |ИЗ
					      	 	             |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
					      	 	             |ГДЕ
					      	 	             |	ХарактеристикиНоменклатуры.Наименование = &Наименование
					      	 	             |	И ХарактеристикиНоменклатуры.Владелец = &Владелец");
					Запрос.УстановитьПараметр("Владелец",НоваяСтрока.Номенклатура);
					Запрос.УстановитьПараметр("Наименование",НужХар);
					Рез = Запрос.Выполнить().Выгрузить();
					
					Если Рез.Количество() >0 тогда
						НоваяСтрока.Характеристика		=	Рез[0].Ссылка;
					КонецЕсли;
				КонецЕсли;

				
				
				НоваяСтрока.Количество			=	Число(СтрЗаменить(НужКол,",","."));
				НоваяСтрока.КоличествоУпаковок	=	НоваяСтрока.Количество;
				НоваяСтрока.Цена				=	Число(СтрЗаменить(НужЦена,",","."));
				НоваяСтрока.Сумма				=	Число(СтрЗаменить(НужСумма,",","."));
				НоваяСтрока.ПроцентРучнойСкидки	=	Число(СтрЗаменить(НужПроц,",",".")); 
			КонецЕсли; 		
			
		иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		НовыйДок.Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	//Доп
	Если СтруктураЗаказа.Оплачен = "Да" тогда
		Рег	=	РегистрыСведений.СостояниеОплатыЗаказаПокупателя.СоздатьМенеджерЗаписи();
		Рег.ЗаказПокупателя	=	НовыйДок.Ссылка;
		Рег.Состояние		=	Перечисления.СостоянияОплатыЗаказаПокупателя.ОплаченПолностью;
		Рег.Период			=	НовыйДок.Дата;
		Рег.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ОбработатьОтменыЗаказов(Соединение,КаталогНаСервере)
	//Обрабатываем заказы за последние две недели
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте,
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	ЗаказПокупателя.Дата >= &Дата
	      	 	             |	И НЕ ЗаказПокупателя.ПометкаУдаления");
	Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()) - 14*24*60*60);
	
	рез = Запрос.Выполнить().Выгрузить();
	Для каждого Строка из Рез цикл
		Файлы	=	Соединение.НайтиФайлы(КаталогНаСервере+"/ZAKAZ",СокрЛП(Строка.НомерЗаказаНаСайте) + ".json");
		Если Файлы.количество() = 0 тогда
			Об = Строка.Ссылка.ПолучитьОбъект();
			Об.Номер	=	"";
			Об.Комментарий	= Об.Комментарий + " ОТМЕНЕН В ОФИСЕ";	
			Об.Записать();
			//Об.УстановитьПометкуУдаления(истина);
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПроверкаНеобходимостиИндикации()
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	НЕ ЗаказПокупателя.ПометкаУдаления
	      	 	             |	И ЗаказПокупателя.Статус = &Статус");
	Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыЗаказовПокупателей.НеСогласован);
	
	Возврат не запрос.Выполнить().Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция  ПроверкаНеобходимостиИндикацииОтменыЗаказов()
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	НЕ ЗаказПокупателя.ПометкаУдаления
	      	 	             |	И ЗаказПокупателя.Комментарий ПОДОБНО &Комментарий");
	Запрос.УстановитьПараметр("Комментарий","%ОТМЕНЕН В ОФИСЕ%");
	
	Возврат не запрос.Выполнить().Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция  ПроверкаНеобходимостиИндикацииЗаявок()
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ЗаявкаОтМагазина.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ТБК_ЗаявкаОтМагазина КАК ТБК_ЗаявкаОтМагазина
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ЗаявкаОтМагазина.ПометкаУдаления
	      	 	             |	И ТБК_ЗаявкаОтМагазина.ПризнакОбновление = 0");
	Возврат не запрос.Выполнить().Пустой();
КонецФункции

&НаКлиенте
Процедура ОбработкаИндикации(флНужноВключитьИндикацию, флНужноВключитьИндикациюОтмененныхЗаказов, флНужноВключитьИндикациюЗаявок = Ложь)
	Если флНужноВключитьИндикацию тогда
		Элементы.ЗаказыПокупателей.ЦветТекста = WebЦвета.Красный;
	иначе
		Элементы.ЗаказыПокупателей.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;
	
	Если флНужноВключитьИндикациюОтмененныхЗаказов тогда
		Элементы.ЗаказыДляОтмены.ЦветТекста = WebЦвета.Красный;
	иначе
		Элементы.ЗаказыДляОтмены.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;   
	
	
	Если флНужноВключитьИндикациюЗаявок тогда
		Элементы.ЗаявкиМагазина.ЦветТекста = WebЦвета.Красный;
	иначе
		Элементы.ЗаявкиМагазина.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТБКЗаказыПокупателейПосле(Команда)
	//ЗначениеОтбора  = Новый Структура("Номер", "333");
	//Параметрыотбора = Новый Структура("Отбор", ЗначениеОтбора);
	

	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеОткрытияЗаказов",ЭтотОбъект); 
	Форма	=	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаСписка",,,,,,Оповещение); 
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПометкаУдаления"); 
	ОтборВладелец.ПравоеЗначение 	= Ложь;   
	
	СЗ	=	ПолучитьСЗ_Статусов();
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Статус"); 
	ОтборВладелец.ПравоеЗначение 	= СЗ; 
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеСодержит; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Комментарий"); 
	ОтборВладелец.ПравоеЗначение 	= "ОТМЕНЕН В ОФИСЕ";
КонецПроцедуры

&НаКлиенте
Процедура ТБКЗаявкиМагазинаПосле(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеОткрытияЗаказов",ЭтотОбъект); 
	Форма	=	ОткрытьФорму("Документ.ТБК_ЗаявкаОтМагазина.ФормаСписка",,,,,,Оповещение); 
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьПослеОткрытияЗаказов(РезультатОткрытияФормы, стр) экспорт
	флНужноВключитьИндикацию					= ПроверкаНеобходимостиИндикации();
	флНужноВключитьИндикациюОтмененныхЗаказов	= ПроверкаНеобходимостиИндикацииОтменыЗаказов();
	флНужноВключитьИндикациюЗаявок				= ПроверкаНеобходимостиИндикацииЗаявок();

	ОбработкаИндикации(флНужноВключитьИндикацию, флНужноВключитьИндикациюОтмененныхЗаказов, флНужноВключитьИндикациюЗаявок);   
КонецПроцедуры


&НаКлиенте
Процедура ТБКЗаказыДляОтменыПосле(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеОткрытияЗаказов",ЭтотОбъект); 
	Форма	=	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаСписка",,,,,,Оповещение); 
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПометкаУдаления"); 
	ОтборВладелец.ПравоеЗначение 	= Ложь;   
	
	ОтборВладелец 					= Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборВладелец.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Содержит; 
	ОтборВладелец.Использование	 	= Истина; 
	ОтборВладелец.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Комментарий"); 
	ОтборВладелец.ПравоеЗначение 	= "ОТМЕНЕН В ОФИСЕ";  
КонецПроцедуры


&НаСервере
Процедура ТБКПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	Попытка
		СтруктураПодключения	=	ОбщегоНазначения.ПолучитьСтруктуруПодключенияFTP();
	Исключение
		Сообщить("Нет данных для подключения по фтп!!");
		Возврат;
	КонецПопытки;
	
	Если СтруктураПодключения = Неопределено тогда
		Сообщить("Нет данных для подключения по фтп!");
	иначе
		Попытка
			КаталогНаСервере		=	СтруктураПодключения.КаталогНаСервере;  	
			Соединение = Новый FTPСоединение(СтруктураПодключения.ИмяFTPСервера, СтруктураПодключения.Порт,
										СтруктураПодключения.Пользователь, СтруктураПодключения.Пароль, , Истина,10);
										
			Если Соединение <> Неопределено тогда							
				Массив	=	новый Массив;
				Массив.Добавить(КаталогНаСервере);
				Массив.Добавить(Соединение);
			
				АдресВХ	=	ПоместитьВоВременноеХранилище(Массив,ЭтаФорма.УникальныйИдентификатор);
			КонецЕсли;
		Исключение
			Соединение = Неопределено;
		КонецПопытки;
	КонецЕсли;	
	
	ДоступнаНефискальнаяПечать = Ложь;
	КонстантаДоступнаНефискальнаяПечать	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ДоступнаНефискальнаяПечать");
	Если КонстантаДоступнаНефискальнаяПечать <> Неопределено тогда
		ДоступнаНефискальнаяПечать =   КонстантаДоступнаНефискальнаяПечать;
	КонецЕсли;
	
	ДоступнаПроверкаОрганизаций = Ложь;
	КонстантаДоступнаПроверкаОрганизаций	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ДоступнаПроверкаОрганизаций");
	Если КонстантаДоступнаПроверкаОрганизаций <> Неопределено тогда
		ДоступнаПроверкаОрганизаций =   КонстантаДоступнаПроверкаОрганизаций;
	КонецЕсли;


КонецПроцедуры


&НаСервереБезКонтекста
Процедура ТБКПриЗакрытииПослеНаСервере()
	Соединение = Неопределено
КонецПроцедуры


&НаКлиенте
Процедура ТБКПриЗакрытииПосле(ЗавершениеРаботы)
	ТБКПриЗакрытииПослеНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСЗ_Статусов()
	СЗ	=	Новый СписокЗначений;
	СЗ.Добавить(Перечисления.СтатусыЗаказовПокупателей.НеСогласован);
	СЗ.Добавить(Перечисления.СтатусыЗаказовПокупателей.Согласован);  
	
	Возврат СЗ;
КонецФункции

&НаСервереБезКонтекста
Функция ПроверкаНаПометку(Номенклатура)
	Возврат ПолучитьЗначениеРеквизита(Номенклатура,"ПометкаУдаления");
	//Возврат Номенклатура.ПометкаУдаления;
КонецФункции

&НаКлиенте
Процедура ТБКВнешнееСобытиеВместо(Источник, Событие, Данные)
	Если ВводДоступен() Тогда
		
		// &ЗамерПроизводительности
		Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(Ложь,
			"Обработка.РМКУправляемыйРежим.Форма.Форма.ВнешнееСобытие");
		
		Если Объект.Товары.Количество() = 0 Тогда
			Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		
		Если (Событие = "Штрихкод" Или Событие = "ПолученШтрихкод") Тогда
			//Вик 2021_09_10
			Если Найти(Данные,"Akciya") тогда
				ОбработатьКодАкции(Данные);
				Возврат;
			КонецЕсли;				
			//КонецВик			
			
			//Вик 2021_11_17
			Если Найти(Данные,"tbkskidka") тогда
				ОбработатьУценку(Данные);
				Возврат;
			КонецЕсли;				
			//КонецВик
			
			//Вик 2021_12_17
			Если Найти(Данные,"tbk_iqos_001") тогда //Скидка на iqos.Продаем за 1 коп. Это замена неработающих устройсв за счет поставщика 
				ОбработатьЗаменуАйкос(Данные);
				Возврат;
			КонецЕсли;				
			//КонецВик
			
			//Вик 2021_12_28
			Если Найти(Данные,"www.gosuslugi.ru") тогда  
				ЗапуститьПриложение(Данные);
				Возврат;
			КонецЕсли;				
			//КонецВик


			//Вик 2021_12_07       
			Данные	=	СтрЗаменить(Данные,Символ(29),"");
			Если СтрДлина(Данные) > 29 и ИспользоватьПробитиеБлока тогда //этоБлок
			//Если ШтрихкодированиеМОТПКлиентСервер.ЭтоКодУпаковки(Данные) тогда
				Попытка
					флВсеХорошо	=	Истина;
					ОбработатьБлок(Данные,флВсеХорошо);
					Если флВсеХорошо тогда
						Возврат;
					КонецЕсли;
				Исключение
					ЗаголовокИнформации =	НСтр("ru = 'Ошибка!'");
					ТекстСообщения 		=	ОписаниеОшибки();
					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
	                Возврат; 
				КонецПопытки;
			КонецЕсли;				
			//КонецВик
			

			
			ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(
				ЭтотОбъект, 
				Источник, 
				Событие, 
				Данные);
				
			Если ДанныеСоСканераСтруктура = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
			
		Иначе
			ПодключаемоеОборудованиеРТКлиент.ВнешнееСобытиеОборудования(ЭтотОбъект, Источник, Событие, Данные);
		КонецЕсли;
		
		ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьБлок(Данные, флВсеХорошо)	
	марки = Новый Массив();
	марки.Добавить(Данные);   
	Попытка
		сведенияМарок	=	ПолучитьСведенияМарок_Сервер(марки);
	Исключение
		флВсеХорошо	=	Ложь;
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(сведенияМарок) = Тип("Массив") Тогда
		Если сведенияМарок.Количество() = 1 Тогда
			сведения = сведенияМарок[0]; 
			Если сведения.cisInfo.Свойство("maxRetailPrice") тогда //на табаки нет МРЦ
				Попытка
					ДочерниеМарки_Массив	=	сведения.cisInfo.child; 
					МРЦБлока				=	Число(сведения.cisInfo.maxRetailPrice/10);//в копейках      
					МРЦБлокаКодированнная	=	ШтрихкодированиеИСКлиентСервер.ЗакодироватьМРЦ(МРЦБлока);	
				Исключение  
					флВсеХорошо = ложь;
					//ЗаголовокИнформации = НСтр("ru = 'Не удалось получить данные марок в блоке'");
					//ТекстСообщения = НСтр("ru = 'Не удалось получить данные марок в блоке! возможно сервис не доступен '");
					//ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
	                Возврат;
				КонецПопытки;
			иначе
				Попытка
					ДочерниеМарки_Массив	=	сведения.cisInfo.child;
					МРЦБлокаКодированнная 	= "";
				Исключение
					флВсеХорошо = ложь;
					//ЗаголовокИнформации = НСтр("ru = 'Не удалось получить данные марок в блоке'");
					//ТекстСообщения = НСтр("ru = 'Не удалось получить данные марок в блоке! возможно сервис не доступен '");
					//ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстСообщения);
	                Возврат;  	
				КонецПопытки;				
			КонецЕсли;
			
			Для каждого ДочерняяМарка из ДочерниеМарки_Массив цикл 
				ДанныеШтрихкода = Новый Структура;
				ДанныеШтрихкода.Вставить("Количество", 1);
				ДанныеШтрихкода.Вставить("Штрихкод"  ,	ДочерняяМарка + МРЦБлокаКодированнная);				
				ОбработатьКодМаркировки(ДанныеШтрихкода);
			КонецЦикла;   
		КонецЕсли;
	КонецЕсли; 	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция  ПолучитьСведенияМарок_Сервер(марки)  
	Возврат Обработки.ТБК_Маркировка.ПолучитьСведенияМарок(марки);	
КонецФункции

&НаКлиенте
Процедура ОбработатьКодАкции(Данные)
	Если ПокупкаСотрудника тогда Возврат КонецЕсли;

	Если Найти(Данные,"GLO") тогда
		флЭтоАкцияГЛО	=	Истина;
	иначе
		флЭтоАкцияГЛО	=	Ложь;
	КонецЕсли;
	
	Для каждого Строка из Объект.Товары цикл
		Если флЭтоАкцияГЛО тогда 
			флЭтоГло = ЭтоГЛО(Строка.Номенклатура);
			Если флЭтоГло тогда
				//Если Строка.количество <> 1 тогда
				//	ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Количество акционного товара должно быть 1","Количество акционного товара должно быть 1. Остальные акционные товары пробивайте отдельным чеком");
				//	Возврат;
				//КонецЕсли;
				
				Если Строка.СуммаРучнойСкидки > 0 тогда
					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка уже проставлена","Скидка уже проставлена!");
					Возврат;
				КонецЕсли;
				
				ДанныеПоКоду = ПолучитьДанныеПоКоду(Данные);
				
				Если ДанныеПоКоду = Неопределено тогда
					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Не удалось получить данные по коду!","Не удалось получить данные по коду! Возможно отсутствует соединение с сервером");
					Возврат;
				КонецЕсли;
				
				Если не ДанныеПоКоду.Валиден тогда
					ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Код уже погашен","Этот код уже был использован! Повторное использование кода не допускается.");
					Возврат;
				КонецЕсли;
				
				КодНом						=	ПолучитьКодНоменклатуры(Строка.Номенклатура);
				КодАкции					=	Данные + КодНом;
				Строка.СуммаРучнойСкидки	=	ДанныеПоКоду.Скидка;
				Строка.Сумма				=	Строка.Сумма - Строка.СуммаРучнойСкидки;			
				ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);		
				ОбновитьФорму();
				
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУценку(Данные)
	Если ПокупкаСотрудника тогда Возврат КонецЕсли;
	ТекСтрока	=	Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока = Неопределено тогда Возврат КонецЕсли;
	
	Если ТекСтрока.Количество <>1 тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","Количество должно равняться 1");
		Возврат;
	КонецЕсли;
	
	//В чеке должна быть 1 позиция
	Если Объект.Товары.Итог("Количество") <>1 тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","В чеке должна быть только 1 штука");
		Возврат;
	КонецЕсли; 	
	
	ПК			=	ПолучитьПолныйКод(ТекСтрока.Номенклатура);	
	
	Поз1	=	СтрНайти(Данные,"/",,,1);
	Поз2	=	СтрНайти(Данные,"/",,,2);
	Поз3	=	СтрНайти(Данные,"/",,,3);
	
	НужныйКод	=	Сред(Данные,Поз3+1,11);
	НужныйКод	=	СтрЗаменить(НужныйКод,"u","Ю");
	НужныйКод	=	СтрЗаменить(НужныйКод,"mp","МП");
	
	Если не Найти(Строка(ТекСтрока.Номенклатура)," БК") тогда
		Если не Найти(ПК,НужныйКод) тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","QR не принадлежит этой номенклатуре. Возможно необходимо встать на соответствующую позицию товаров");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекСтрока.СуммаРучнойСкидки >0 тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","Скидка уже проставлена");
		Возврат;
	КонецЕсли;
	
	ПроцентСкидки	=	Сред(Данные,Поз1+1,Поз2-Поз1-1);
	Если найти(ПроцентСкидки,"r") тогда
		СуммаСкидки	=	Число(СтрЗаменить(ПроцентСкидки,"r",""));		
	иначе
		СуммаСкидки	=	окр((ТекСтрока.Цена/100) * ПроцентСкидки,2);
	КонецЕсли;
	
	ТекСтрока.КодУценки 		=	Данные;
	ТекСтрока.СуммаРучнойСкидки	=	СуммаСкидки;
	ТекСтрока.Сумма				=	ТекСтрока.Сумма - ТекСтрока.СуммаРучнойСкидки;			
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);		
	ОбновитьФорму(); 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗаменуАйкос(Данные)
	ТекСтрока	=	Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока = Неопределено тогда Возврат КонецЕсли;
		
	//В чеке должна быть 1 позиция
	Если Объект.Товары.Итог("Количество") <>1 тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","В чеке должна быть только 1 штука");
		Возврат;
	КонецЕсли;
	
	Если не ЭтоАйкос(ТекСтрока.Номенклатура) тогда
		ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Скидка не проставлена","На этот товар скидка по замене Айкос - невозможна");
		Возврат;	
	КонецЕсли;
	
	ТекСтрока.КодУценки = Данные;
	
	СуммаСкидки	=	ТекСтрока.Сумма - 0.01;
	
	ТекСтрока.СуммаРучнойСкидки	=	СуммаСкидки;
	ТекСтрока.Сумма				=	ТекСтрока.Сумма - ТекСтрока.СуммаРучнойСкидки;			
	ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);		
	ОбновитьФорму();	
КонецПроцедуры


&НаСервере
Функция ПолучитьПолныйКод(Номенклатура)
	Возврат Номенклатура.ПолныйКод();
КонецФункции  

&НаСервереБезКонтекста
Функция ЭтоГЛО(Номенклатура)
	Возврат Найти(Номенклатура.ПолныйКод(),"Ю2-00007720") или Найти(Номенклатура.ПолныйКод(),"Ю2-00007721");
КонецФункции

&НаСервере
Функция ЭтоАйкос(Номенклатура)
	Возврат Найти(Номенклатура.ПолныйКод(),"Ю2-00014185") или Найти(Номенклатура.ПолныйКод(),"00048208784");
КонецФункции


&НаСервере
Функция ПолучитьКодНоменклатуры(Номенклатура)
	Возврат Номенклатура.код;
КонецФункции


&НаСервере
Функция ПолучитьДанныеПоКоду(Данные)
	Если АдресВХ = "" тогда Возврат Неопределено КонецЕсли;
	
	Массив = ПолучитьИзВременногоХранилища(АдресВХ);
	КаталогНаСервере	=	Массив[0];
	Соединение			=	Массив[1];
	
	Попытка
		НужныйПуть	=	Лев(КаталогНаСервере,10) + СтрЗаменить(Лев(Данные,15),"_","/");
    	Файлы		=	Соединение.НайтиФайлы(НужныйПуть,"*");
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если Файлы.Количество() = 0 тогда
		 Возврат Неопределено;
	КонецЕсли;
	 
	Для каждого Файл из Файлы цикл 
		
		Если Файл.ИмяБезРасширения = "KODS" тогда
	
			ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
		    Соединение.Получить(Файл.ПолноеИмя,ПутьКФайлу);
			
			ТабДок = Новый ТабличныйДокумент;
			Попытка
				ТабДок.Прочитать(ПутьКФайлу);
			Исключение
				Возврат Неопределено;
			КонецПопытки;

			ТаблицаДанных	= ОбщегоНазначения.ПолучитьТЗИзМакета(ТабДок);
			
			НужнаяСтрока	=	ТаблицаДанных.Найти(Данные);
			
			Если НужнаяСтрока = Неопределено тогда
				Возврат Неопределено;
			КонецЕсли;
			
			СтруктураВозврата	=	Новый Структура;
			СтруктураВозврата.Вставить("Скидка",Число(НужнаяСтрока.Скидка));
			
			Если НужнаяСтрока.Флаг = "1" тогда
				СтруктураВозврата.Вставить("Валиден",ложь);
			иначе
				СтруктураВозврата.Вставить("Валиден",истина);
			КонецЕсли;
			
			УдалитьФайлы(ПутьКФайлу);
		ИначеЕсли Файл.ИмяБезРасширения = Данные тогда //погашенные коды - это текстовые файлы где  имя файла = сам код
			СтруктураВозврата	=	Новый Структура;
			СтруктураВозврата.Вставить("Валиден",ложь);
			Возврат СтруктураВозврата;
		КонецЕсли; 		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
КонецФункции 

&НаСервере
Процедура ПогастьКод(Данные)
	Рег = РегистрыСведений.КомментарииСтатистики.СоздатьМенеджерЗаписи();//нужно было куда-то еще записать, а создавать новый рег.св. - это монополия которую хотелось избежать
	Рег.ХешНаименования	=	Строка(ТекущаяДата());
	Рег.Наименование	=	Данные;
	Рег.Записать();
	
	КодНом	=	Сред(Данные, СтрДлина(Данные)-10);
	Данные	=	Сред(Данные,1, СтрДлина(Данные)-11);
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("txt");
	
	Док = Новый ТекстовыйДокумент();
	Док.ДобавитьСтроку(Строка(ТекущаяКассаККМ));
	Док.ДобавитьСтроку(КодНом);
	Док.Записать(ПутьКФайлу, "windows-1251");  
	
	Если АдресВХ = "" тогда 
		Рег.ХешНаименования	=	Рег.ХешНаименования + "_ошибка";
		Рег.Записать();
		Возврат; 
	КонецЕсли;
	
	Массив = ПолучитьИзВременногоХранилища(АдресВХ);
	КаталогНаСервере	=	Массив[0];
	Соединение			=	Массив[1];
	
	НужныйПуть	=	Лев(КаталогНаСервере,10) + СтрЗаменить(Лев(Данные,15),"_","/");
	
	Попытка
		Соединение.Записать(ПутьКФайлу, НужныйПуть + Данные+".txt");
	Исключение
		Рег.ХешНаименования	=	Рег.ХешНаименования + "_ошибка";
		Рег.Записать();
		Возврат; 
	КонецПопытки;

	УдалитьФайлы(ПутьКФайлу);

	
	//Можно так но долго.. 10000 - 30 сек при записи
	//Если АдресВХ = "" тогда Возврат КонецЕсли;
	//
	//Массив = ПолучитьИзВременногоХранилища(АдресВХ);
	//КаталогНаСервере	=	Массив[0];
	//Соединение			=	Массив[1];
	//
	//Попытка
	//	НужныйПуть	=	Лев(КаталогНаСервере,10) + СтрЗаменить(Лев(Данные,15),"_","/");
	//	Файлы		=	Соединение.НайтиФайлы(НужныйПуть,"*.xlsx");
	//Исключение
	//	Возврат;
	//КонецПопытки;
	//
	//Если Файлы.Количество() = 0 тогда
	//	 Возврат;
	//КонецЕсли;
	//
	//ПутьКФайлу	=	Файлы[0].ПолноеИмя;
	//
	//ПутьКФайлу = ПолучитьИмяВременногоФайла("xlsx");
	//Соединение.Получить(Файлы[0].ПолноеИмя,ПутьКФайлу);
	//
	//ТабДок = Новый ТабличныйДокумент;
	//Попытка
	//	ТабДок.Прочитать(ПутьКФайлу);
	//Исключение
	//	Возврат;
	//КонецПопытки;

	//ТаблицаДанных	= ОбщегоНазначения.ПолучитьТЗИзМакета(ТабДок);
	//
	//НужнаяСтрока	=	ТаблицаДанных.Найти(Данные);
	//
	//Если НужнаяСтрока = Неопределено тогда
	//	Возврат;
	//КонецЕсли;
	//
	//НужнаяСтрока.Флаг	=	"1";
	//
	//Постр							=	новый ПостроительОтчета;
	//Постр.ВыводитьЗаголовокОтчета	= 	Ложь;	
	//Постр.ИсточникДанных			=	новый ОписаниеИсточникаДанных(ТаблицаДанных);
	//ТабДок							=	новый ТабличныйДокумент;	
	//Постр.Вывести(ТабДок); 
	//Область = ТабДок.Область(1,1,10000,1);
	//ТабДок.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоГоризонтали);	
	//
	//ТабДок.Записать(ПутьКФайлу,ТипФайлаТабличногоДокумента.XLSX);
	//
	//Соединение.Записать(ПутьКФайлу, НужныйПуть+"KODS.xlsx");

	//УдалитьФайлы(ПутьКФайлу);
КонецПроцедуры 

&НаКлиенте
&Вместо("ОповещениеОткрытьФормуОплатыНаличными")
Процедура ТБКОповещениеОткрытьФормуОплатыНаличными(РезультатОткрытияФормы, ДополнительныеПараметры)
	//// Вставить содержимое метода.
	//ПродолжитьВызов(РезультатОткрытияФормы, ДополнительныеПараметры);
	
	ЛогированиеБезДополнительныхДанных("ОплатаНаличными");
	
	Если РезультатОткрытияФормы = Неопределено Тогда
		ОбработатьОтказОтОплаты();
		Возврат;
	//Вик	
	ИначеЕсли ДоступнаНефискальнаяПечать тогда
	    ДобавитьТаблицуОплат(РезультатОткрытияФормы);

		Если НужноПечататьНеФискально(РезультатОткрытияФормы) тогда
			СоздатьНефискальныйЧек();
		Иначе
			ЗавершитьОплатуТоваров(ДополнительныеПараметры.Печать);
		КонецЕсли;
	//КонецВик	
	Иначе
		ДобавитьТаблицуОплат(РезультатОткрытияФормы);
		ЗавершитьОплатуТоваров(ДополнительныеПараметры.Печать);
	КонецЕсли;

КонецПроцедуры

Функция НужноПечататьНеФискально(РезультатОткрытияФормы) 
	//наличные
	АдресТаблицы  	= РезультатОткрытияФормы.АдресТаблицыОплата;
	ТЗ 				= ПолучитьИзВременногоХранилища(АдресТаблицы);
	Для каждого Строка из ТЗ цикл
		Если Строка(Строка.ВидОплаты) <> "Наличные" тогда
			Возврат ложь;
		КонецЕсли;
	КонецЦикла;   
	
	//без марок
	Для каждого Строка из Объект.Товары цикл
		Если ОбщегоНазначения.ЭтоМаркированнаяНоменклатура(Строка.Номенклатура) тогда 
			Возврат ложь;
		КонецЕсли;
	КонецЦикла;
	
	//По времени
	ДеньТД				=	ДеньНедели(ТекущаяДата());
	ЧасТД				=	Час(ТекущаяДата());
	
	ЧасНачалаПоУмолчанию	=	19;
	ЧасНачалаКонстанта	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ЧасНачалаНефискальнаяПечать");
	Если ЧасНачалаКонстанта <> Неопределено тогда
		ЧасНачала	=	ЧасНачалаКонстанта;
	иначе
		ЧасНачала	=	ЧасНачалаПоУмолчанию;
	КонецЕсли;
	
	
	Если ДеньТД <> 6 и ДеньТД <> 7 тогда // на выходных - целый день
		Если ЧасТД < ЧасНачала тогда
			Возврат ложь;
		КонецЕсли;
	КонецЕсли;   
		
	Возврат истина;     
КонецФункции

&НаКлиенте
Процедура СоздатьНефискальныйЧек()
	НовыйЧекККМ	=	СоздатьЧекККМ();
	Если НовыйЧекККМ = Неопределено тогда 
		Возврат;
	КонецЕсли;

	
	Сдача 			= Макс(Объект.Оплата.Итог("Сумма") - Объект.Товары.Итог("СуммаВсего"),0); 	
	ВыведенаСдача = Истина;
	ОставлятьФлагТаблоСдачи = Истина;
	Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаСдача;
	НадписьСуммаСдачи = Формат(Сдача, "ЧЦ=15; ЧДЦ=2; ЧН=0.00");
	
	Если СокрЛП(Строка(Объект.Организация)) = "ИП Пинкасович Д.В." тогда
		СНО	=	"Общая";	
	иначе
		СНО	=	"УСН доход-расход";
	КонецЕсли;
	
	
	Если не  ЗначениеЗаполнено(Объект.Ответственный) тогда
		НужныйКассир	=	Строка(ПолучитьТекущегоПродавца());
	иначе
		НужныйКассир	=	Строка(Объект.Ответственный);
	КонецЕсли;
	ТБКНеФискальнаяПечать.НапечататьЧек(Объект.Товары, Сдача, СНО , Объект.Магазин, НужныйКассир);
		
	Объект.Товары.Очистить();
	Объект.Оплата.Очистить();
КонецПроцедуры

&НаСервере
Функция СоздатьЧекККМ()
	
	НовыйДокументЧек = Документы.ЧекККМ.СоздатьДокумент();
	НовыйДокументЧек.КассаККМ		=	ТекущаяКассаККМ;
	НовыйДокументЧек.Магазин		=	ТекущаяКассаККМ.Магазин;
	НовыйДокументЧек.Комментарий	=   "Чек н.ф.";
	
	НовыйДокументЧек.Дата	=	ТекущаяДата(); 
	НовыйДокументЧек.УстановитьНовыйНомер();
	
	НовыйДокументЧек.СтатусЧекаККМ			=	Перечисления.СтатусыЧековККМ.Аннулированный;
	НовыйДокументЧек.ВидОперации			=	Перечисления.ВидыОперацийЧекККМ.Продажа;
	
	НовыйДокументЧек.Товары.Очистить();
	НовыйДокументЧек.Оплата.Очистить();
	
	Для каждого СтрокаТовары из Объект.Товары цикл
		НоваяСтрока = НовыйДокументЧек.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовары);	
	КонецЦикла;
	
	НоваяСтрока = НовыйДокументЧек.Оплата.Добавить();
	НоваяСтрока.ВидОплаты				=	Справочники.ВидыОплатЧекаККМ.НайтиПоНаименованию("Наличные");
	НоваяСтрока.Сумма					=	Объект.Товары.Итог("СуммаВсего"); 
	
	Попытка
		Если НовыйДокументЧек.ПроверитьЗаполнение()  Тогда
			НовыйДокументЧек.мЗакрытиеСмены	=	Истина;
			НовыйДокументЧек.Записать(РежимЗаписиДокумента.Проведение); 
		иначе
			ТекстСообщения = "Ошибка при формировании чека н.ф.!";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;    
		КонецЕсли;
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено; 
	КонецПопытки; 
	
	Возврат НовыйДокументЧек.Ссылка;	
КонецФункции

&НаСервереБезКонтекста
Процедура ПогаситьКодУценкиНаСервере(КодУценки,НужныйЧек)
	Рег = РегистрыСведений.КомментарииСтатистики.СоздатьМенеджерЗаписи();
	Рег.Наименование	=	КодУценки;
	Рег.ХешНаименования	=	ТекущаяДата();
	
	
	Если ЗначениеЗаполнено(НужныйЧек) тогда
		Рег.Наименование	=	Рег.Наименование + "/"+НужныйЧек.Номер;
		
		Для каждого Строка из НужныйЧек.Товары цикл
			Рег.Наименование =   Рег.Наименование + "/"+Строка.Номенклатура.Код + "/" + Строка.СуммаРучнойСкидки;
		КонецЦикла;
	КонецЕсли;
	
	Рег.Записать();
КонецПроцедуры

&НаКлиенте
&Перед("СоздатьЧекиЗавершение")
Процедура ТБКСоздатьЧекиЗавершение1(Отказ, ПечатьПакетаДокументовВозврат, МассивСсылокЧеков, Печать)
	Если МассивСсылокЧеков.количество() = 1 тогда
		НужныйЧек	=	МассивСсылокЧеков[0];
	иначе
		НужныйЧек = Неопределено;
	КонецЕсли;
	
	Для каждого Строка из Объект.Товары цикл
		Если ЗначениеЗаполнено(Строка.КодУценки) тогда
			ПогаситьКодУценкиНаСервере(Строка.КодУценки,НужныйЧек);			
		КонецЕсли;
		
		//Вик 2022_03_09
		//Записываем данные о неверной организации в марке
		Если ЗначениеЗаполнено(Строка.ПроверкаМаркиИНН) Тогда
			ЗаписатьДанныеОНевернойОрганизации(Строка.ПроверкаМаркиИНН,НужныйЧек, СТрока.НомерСтроки);	
		КонецЕсли;		
		//КонецВик
	КонецЦикла;
	
	//Вик 2022_04_22
	Если ПокупкаСотрудника и НужныйЧек <> Неопределено тогда
		ПокупкаСотрудника	=	ложь;
		ЗаписатьДанныеОПокупкеСотрудника(НужныйЧек);
	КонецЕсли;
	ПроверитьВозвратНаПокупкуСотрудника(НужныйЧек);
	//       
КонецПроцедуры 

&НаСервере
Процедура ПроверитьВозвратНаПокупкуСотрудника(НужныйЧек);
	Если ЗначениеЗаполнено(НужныйЧек.ЧекККМПродажа) тогда
		Запрос	=	Новый Запрос("ВЫБРАТЬ
		      	 	             |	ТБК_ПокупкиСотрудников.Чек КАК Чек
		      	 	             |ИЗ
		      	 	             |	РегистрСведений.ТБК_ПокупкиСотрудников КАК ТБК_ПокупкиСотрудников
		      	 	             |ГДЕ
		      	 	             |	ТБК_ПокупкиСотрудников.Чек = &Чек");
		Запрос.УстановитьПараметр("Чек",НужныйЧек.ЧекККМПродажа);
		
		Если НЕ Запрос.Выполнить().Пустой() тогда
			ЗаписатьДанныеОПокупкеСотрудника(НужныйЧек);
		КонецЕсли;
	КонецЕсли;    	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеОПокупкеСотрудника(НужныйЧек)
	Рег 			= РегистрыСведений.ТБК_ПокупкиСотрудников.СоздатьМенеджерЗаписи();
	Если ЗначениеЗаполнено(НужныйЧек.Продавец) тогда
		Рег.Продавец	=	НужныйЧек.Продавец;
	ИначеЕсли ЗначениеЗаполнено(Объект.Продавец) тогда
		Рег.Продавец	=	Объект.Продавец;
	ИначеЕсли НужныйЧек.Товары.Количество() >0 тогда 
		Рег.Продавец	=	НужныйЧек.Товары[0].Продавец;	
	КонецЕсли;
	
	Рег.Чек			=	НужныйЧек;
	Рег.Записать();	
КонецПроцедуры

&НаКлиенте
&Вместо("ОповещениеОткрытьФормуВыбораЧекаПриВозврате")
Процедура ТБКОповещениеОткрытьФормуВыбораЧекаПриВозврате(РезультатОткрытияФормы, ДополнительныеПараметры)
	// &ЗамерПроизводительности  
	Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
	Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.ВыборЧекаПриВозврате");	
	
	Если РезультатОткрытияФормы <> Неопределено Тогда
		
		ЧекККМПродажаОснование = РезультатОткрытияФормы.ЧекККМ;
		//Вик 2021-11-18
		Если ЗначениеЗаполнено(ЧекККМПродажаОснование) Тогда
			Если не ОбщегоНазначенияВызовСервера.ПроверитьЧекНаНаличиеСкидок(ЧекККМПродажаОснование) тогда
				ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Возврат чека не возможен","В выбранном чеке присутсвует уцененный товар!");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		//КонецВик
		
		ДополнительныеПараметры = Новый Структура;
		Если ЗначениеЗаполнено(ЧекККМПродажаОснование) Тогда
			ДополнительныеПараметры.Вставить("ЧекККМПродажаОснование", ЧекККМПродажаОснование);
		Иначе
			ДополнительныеПараметры.Вставить("ЧекККМПродажаОснование",
				ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка"));
		КонецЕсли;
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОповещениеОткрытьФормуВыбораПричиныВозврата", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаВыбораПричиныВозврата",,
			УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	КонецЕсли;
	
	ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);

КонецПроцедуры

&НаКлиенте
Процедура ТБКDebug_ВнешнееСобытиеПосле(Команда)
	ТБКВнешнееСобытиеВместо("","Штрихкод",Debug_Марка);
КонецПроцедуры

//Вик 2021-12-02
&НаКлиенте
&После("НазначитьАвтоматическиеСкидкиКлиент")
Процедура ТБКНазначитьАвтоматическиеСкидкиКлиент(ТолькоСообщенияПослеОформления, НеВыводитьСообщения, ПараметрыДляОплаты)
	Попытка
		флНадо	=	Ложь;
		ОбработатьСкидкиИзУТ(флНадо);
		//Если флНадо тогда
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			ОбновитьФорму(); 	
		//КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
КонецПроцедуры

&НаСервере
Процедура ОбработатьСкидкиИзУТ(флНадо, ФлПринудительныйПересчет = Ложь)
	Если ЗначениеЗаполнено(КодАкции) тогда Возврат КонецЕсли;
	Если ПокупкаСотрудника тогда Возврат КонецЕсли;
	Для каждого Строка из Объект.Товары цикл
		Если ЗначениеЗаполнено(Строка.КодУценки) тогда Возврат КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ЗаказПокупателя) тогда Возврат КонецЕсли;
	КонецЦикла;
	
	
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ХранилищеСертификатов.Наименование КАК Наименование
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ХранилищеСертификатов КАК ХранилищеСертификатов
	      	 	             |ГДЕ
	      	 	             |	ХранилищеСертификатов.ДатаНачала <= &ТекДат
	      	 	             |	И ХранилищеСертификатов.ДатаОкончания >= &ТекДат
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	Наименование");
	Запрос.УстановитьПараметр("ТекДат",НачалоДня(ТекущаяДата()));
	Рез = запрос.Выполнить().Выгрузить();
	
	//Если рез.Количество() >0 тогда
	//	Для каждого СтрокаТовары Из Объект.Товары цикл //Отчищаем скидки
	//		СтрокаТовары.СуммаРучнойСкидки		=	0;
	//		СтрокаТовары.ПроцентРучнойСкидки	=	0;
	//		СтрокаТовары.Сумма					=	СтрокаТовары.Цена * СтрокаТовары.Количество;
	//	КонецЦикла;
	//КонецЕсли;

	Для каждого Строка из рез цикл
		Позиция1 = СтрНайти(Строка.Наименование,"/",,,1);
		Позиция2 = СтрНайти(Строка.Наименование,"/",,,2);
		Позиция3 = СтрНайти(Строка.Наименование,"/",,,3);
		Позиция4 = СтрНайти(Строка.Наименование,"/",,,4);
		Позиция5 = СтрНайти(Строка.Наименование,"/",,,5);
		Позиция6 = СтрНайти(Строка.Наименование,"/",,,6);
		Позиция7 = СтрНайти(Строка.Наименование,"/",,,7);
		
		ТипАкции				=	Сред(Строка.Наименование,1,Позиция1-1);
		Скидка					=	Сред(Строка.Наименование,Позиция1+1,Позиция2-Позиция1-1);
		ТоварВПодарок			=	Сред(Строка.Наименование,Позиция2+1,Позиция3-Позиция2-1);
		СуммаЧека				=	Сред(Строка.Наименование,Позиция3+1,Позиция4-Позиция3-1);
		КоличествоНоменклатуры	=	Сред(Строка.Наименование,Позиция4+1,Позиция5-Позиция4-1);
		Номенклатура			=	Сред(Строка.Наименование,Позиция5+1,Позиция6-Позиция5-1);
		КоличествоШагов			=	Сред(Строка.Наименование,Позиция6+1,Позиция7-Позиция6-1);

		
		Если ТипАкции = "Скидка на самую дешёвую позицию" тогда
			ОбработатьСкидкуНаСамуюДешевуюПозициюВЧеке(Скидка,КоличествоНоменклатуры,Номенклатура, флНадо);
		КонецЕсли;	
		
		Если ТипАкции = "Процентная скидка на товар" тогда
			ОбработатьСкидкуПроцентнаяСкидкаНаТовар(Скидка,Номенклатура, флНадо, ФлПринудительныйПересчет);
		КонецЕсли;
		
		Если ТипАкции = "Скидка на товары с шагом в процентах" тогда
			ОбработатьСкидкуНаТоварСШагомВПроцентах(Скидка, Число(КоличествоШагов), Номенклатура, флНадо, ФлПринудительныйПересчет);
		КонецЕсли;

	КонецЦикла; 	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСкидкуНаСамуюДешевуюПозициюВЧеке(Скидка,КоличествоНоменклатуры,Номенклатура, флНадо)
	//Проверяем выполняется ли условие по номенклатуре	
	СзНоменклатура = Новый СписокЗначений;

	КопияНом =  Номенклатура;
	Пока Найти(КопияНом,"_") цикл
		КДобавлению = Сред(КопияНом,1,11);
		СзНоменклатура.Добавить(КДобавлению);
		
		КопияНом	=	Сред(КопияНом,13);
	КонецЦикла;
	Если КопияНом <> "" тогда
		СзНоменклатура.Добавить(КопияНом);
	КонецЕсли;

		
	ВСегоПодходящихНоменклатур	=	0;
	ЦенаМин						=	1000000000;
	СамаяДешеваяСтрока			=	Неопределено;
	
	Для каждого СтрокаТовары Из Объект.Товары цикл
		ПК	=	СтрокаТовары.Номенклатура.ПолныйКод();
		
		Для каждого СтрокаСписка из СзНоменклатура цикл
			Если Найти(ПК,СтрокаСписка.Значение) тогда
				ВСегоПодходящихНоменклатур = ВСегоПодходящихНоменклатур + СтрокаТовары.КоличествоУпаковок;
				ЦенаМин	=	Мин(ЦенаМин,СтрокаТовары.цена);
				
				Если СтрокаТовары.цена <= ЦенаМин тогда
					СамаяДешеваяСтрока	=	СтрокаТовары;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	//
	
	Если ВСегоПодходящихНоменклатур >= Число(КоличествоНоменклатуры) тогда
		СуммаВозможнойСкидки	=	Окр((ЦенаМин/100) * Скидка,0);
		СуммаСкидкиУжеПроставлено	=	0;
		Если СамаяДешеваяСтрока.СуммаРучнойСкидки = 0 тогда //обнуляем скидки
			Для каждого СтрокаТовары Из Объект.Товары цикл 
				СтрокаТовары.СуммаРучнойСкидки		=	0;
				СтрокаТовары.ПроцентРучнойСкидки	=	0;
				СтрокаТовары.Сумма					=	СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок;
			КонецЦикла; 	
		иначе			
			
			Для каждого СтрокаТовары Из Объект.Товары цикл
				СуммаСкидкиУжеПроставлено = СуммаСкидкиУжеПроставлено + СтрокаТовары.СуммаРучнойСкидки;
			КонецЦикла; 	
		КонецЕсли;
		
		
		Если СуммаВозможнойСкидки <= СуммаСкидкиУжеПроставлено тогда//ничего делать не нужно
			Возврат;
		КонецЕсли;
		
		Для каждого СтрокаТовары Из Объект.Товары цикл //Отчищаем скидки
			СтрокаТовары.СуммаРучнойСкидки		=	0;
			СтрокаТовары.ПроцентРучнойСкидки	=	0;
			СтрокаТовары.Сумма					=	СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок;
		КонецЦикла;
		
		СамаяДешеваяСтрока.СуммаРучнойСкидки			=	СуммаВозможнойСкидки;
		СамаяДешеваяСтрока.Сумма						=	СамаяДешеваяСтрока.Сумма - СуммаВозможнойСкидки;
		СамаяДешеваяСтрока.флПроставленаСкидкаПоАкции	=	Истина;//При смене количества -  идет пересчет процента скидки. а После этого в зависимости от прцента идет пересчет суммы скидки. плохо сделано фирмой 1с
		флНадо	=	Истина;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСкидкуПроцентнаяСкидкаНаТовар(Скидка,Номенклатура, флНадо, ФлПринудительныйПересчет = Ложь)
	//Проверяем выполняется ли условие по номенклатуре	
	СзНоменклатура = Новый СписокЗначений;

	КопияНом =  Номенклатура;
	Пока Найти(КопияНом,"_") цикл
		КДобавлению = Сред(КопияНом,1,11);
		СзНоменклатура.Добавить(КДобавлению);
		
		КопияНом	=	Сред(КопияНом,13);
	КонецЦикла;
	
	Если КопияНом <> "" тогда
		СзНоменклатура.Добавить(КопияНом);
	КонецЕсли;
	
	СуммаСкидкиУжеПроставлено	=	0;
	СуммаВозможнойСкидки		=	0;
	Для каждого СтрокаТовары Из Объект.Товары цикл
		СуммаСкидкиУжеПроставлено = СуммаСкидкиУжеПроставлено + СтрокаТовары.СуммаРучнойСкидки;
	КонецЦикла;


	
	СЗ_СтрокиДляСкидки	=	Новый СписокЗначений;
	Для каждого СтрокаТовары Из Объект.Товары цикл
		ПК	=	СтрокаТовары.Номенклатура.ПолныйКод();
		
		Для каждого СтрокаСписка из СзНоменклатура цикл
			Если Найти(ПК,СтрокаСписка.Значение) тогда
				СуммаВозможнойСкидки	=	СуммаВозможнойСкидки + (СтрокаТовары.Цена/100 * Скидка) * СтрокаТовары.КоличествоУпаковок;
				СЗ_СтрокиДляСкидки.Добавить(СтрокаТовары); 
				   				
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
	Если не ФлПринудительныйПересчет тогда
		Если СуммаВозможнойСкидки <= СуммаСкидкиУжеПроставлено тогда//ничего делать не нужно
			Возврат;
		КонецЕсли;   
	КонецЕсли;
	
	Для каждого СтрокаТовары Из Объект.Товары цикл //Отчищаем скидки
		СтрокаТовары.СуммаРучнойСкидки		=	0;
		СтрокаТовары.ПроцентРучнойСкидки	=	0;
		СтрокаТовары.Сумма					=	СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок;
	КонецЦикла;

	
	Для каждого СтрокаТовары Из СЗ_СтрокиДляСкидки цикл
		СтрокаТовары.Значение.СуммаРучнойСкидки				=	Окр((СтрокаТовары.Значение.Цена/100) * Скидка,0) * СтрокаТовары.Значение.КоличествоУпаковок;
		СтрокаТовары.Значение.Сумма							=	СтрокаТовары.Значение.Сумма - СтрокаТовары.Значение.СуммаРучнойСкидки;
		СтрокаТовары.Значение.флПроставленаСкидкаПоАкции	=	Истина; //При смене количества -  идет пересчет процента скидки. а После этого в зависимости от прцента идет пересчет суммы скидки. плохо сделано фирмой 1с
		флНадо	=	Истина;
	КонецЦикла;
	
	//
КонецПроцедуры 

&НаСервере
Процедура ОбработатьСкидкуНаТоварСШагомВПроцентах(Скидка,КоличествоШагов, Номенклатура, флНадо, ФлПринудительныйПересчет = Ложь)
	
	
	//Проверяем выполняется ли условие по номенклатуре	
	СзНоменклатура = Новый СписокЗначений;

	КопияНом =  Номенклатура;
	Пока Найти(КопияНом,"_") цикл
		КДобавлению = Сред(КопияНом,1,11);
		СзНоменклатура.Добавить(КДобавлению);
		
		КопияНом	=	Сред(КопияНом,13);
	КонецЦикла;
	
	Если КопияНом <> "" тогда
		СзНоменклатура.Добавить(КопияНом);
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");

	Если не ФлПринудительныйПересчет тогда
		СуммаСкидкиУжеПроставлено	=	0;
		СуммаВозможнойСкидки		=	0;
		Для каждого СтрокаТовары Из Объект.Товары цикл
			СуммаСкидкиУжеПроставлено = СуммаСкидкиУжеПроставлено + СтрокаТовары.СуммаРучнойСкидки;
		КонецЦикла;
		
		СЗ_СтрокиДляСкидки	=	Новый СписокЗначений;
		
		СуммаВозможнойСкидки	=	ДокументОбъект.РассчитатьВозможнуюСкидкуПоШагу(Скидка, КоличествоШагов, СзНоменклатура);
		
		Если СуммаВозможнойСкидки <= СуммаСкидкиУжеПроставлено тогда//ничего делать не нужно
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Для каждого СтрокаТовары Из Объект.Товары цикл //Отчищаем скидки
		СтрокаТовары.СуммаРучнойСкидки		=	0;
		СтрокаТовары.ПроцентРучнойСкидки	=	0;
		СтрокаТовары.Сумма					=	СтрокаТовары.Цена * СтрокаТовары.Количество;
	КонецЦикла;

	ДокументОбъект.ПроставитьСкидкуПоШагу(Скидка, КоличествоШагов, СзНоменклатура, флНадо);
	
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры 

&НаКлиенте
Процедура ТБКТоварыПослеУдаленияПосле(Элемент)
	Попытка
		флНадо	=	Ложь;
		ОбработатьСкидкиИзУТ(флНадо, истина);
		//Если флНадо тогда
			ОбработкаТабличнойЧастиТоварыКлиентСервер.ЗаполнитьСуммуВсегоВТаблице(Объект.Товары, Объект.ЦенаВключаетНДС);
			ОбновитьФорму(); 	
		//КонецЕсли;
	Исключение
	КонецПопытки; 
КонецПроцедуры

&НаКлиенте
&Вместо("ПересчитатьИлиОтменитьСкидкиИОплатуБонусами")
Процедура ТБКПересчитатьИлиОтменитьСкидкиИОплатуБонусами(ТолькоПересчет)
		
	Если Объект.Товары.Количество() > 0 Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Возврат") Тогда
			//ПодготовитьОплатуБонусамиКСторнированию();
		Иначе
			НазначитьАвтоматическиеСкидкиКлиент(Ложь, Ложь);
		КонецЕсли;
	Иначе
		//Если (НЕ ТолькоПересчет) Тогда
		//	ОтменитьСкидкиИОплатуБонусамиСервер();
		//КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеОНевернойОрганизации(ПроверкаМаркиИНН,НужныйЧек, НомерСтроки)
	Рег = РегистрыСведений.ВременныеИдентификаторыЗапросов.СоздатьНаборЗаписей();
	Рег.Отбор.Идентификатор.Установить(Строка(НомерСтроки) + "; " + Строка(НужныйЧек) + "; " + ПроверкаМаркиИНН);
	НовСтр	=	Рег.Добавить();
	
	НовСтр.Идентификатор	=	Строка(НомерСтроки) + "; " + Строка(НужныйЧек) + "; " + ПроверкаМаркиИНН;
	НовСтр.Дата				=	ТекущаяДата();
	
	Значение	=	Новый Структура;
	Значение.Вставить("Магазин",НужныйЧек.Магазин);  
	Значение.Вставить("Организация",НужныйЧек.Организация);  
	Значение.Вставить("ИНН",НужныйЧек.Организация.ИНН);
	Значение.Вставить("Чек",НужныйЧек);      
	Значение.Вставить("ВидОперации",Строка(НужныйЧек.ВидОперации));
	Значение.Вставить("ПроверкаМаркиИНН",ПроверкаМаркиИНН);
	Значение.Вставить("НеверныйИНН",СокрЛП(Прав(ПроверкаМаркиИНН,11))); 
	
	МаркаСтр	=	СтрЗаменить(ПроверкаМаркиИНН,Значение.НеверныйИНН,"");
	МаркаСтр	=	СокрЛП(Сред(МаркаСтр,1,СтрДлина(МаркаСтр)-2));
	Значение.Вставить("Марка",МаркаСтр);	
	
	ХранЗнач		=	Новый ХранилищеЗначения(Значение);
	НовСтр.Запрос	=	ХранЗнач;
	
	Рег.Записать();
КонецПроцедуры

&НаКлиенте
Функция ПроверитьУценку()	
	ЕстьУценка	=	Ложь;
	Для каждого Строка из Объект.Товары цикл
		Если ЗначениеЗаполнено(Строка.КодУценки) тогда
			ЕстьУценка = Истина;
			Прервать;
		КонецЕсли;		
	КонецЦикла;	
	
	Если ЕстьУценка тогда
		Если Объект.Товары.Итог("Количество") <>1 тогда
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой("Внимание!!","Уцененные товары нужно пробивать отдельным чеком!");
			Возврат Ложь;
		КонецЕсли; 	
	КонецЕсли;
	
	Возврат истина;
КонецФункции

&НаКлиенте
&Вместо("ВыполнитьЧО05Наличные")
Процедура ТБКВыполнитьЧО05Наличные()
	//Вик 2022_03_21
	флВсеХорошо	=	ПроверитьУценку();
	Если не флВсеХорошо тогда Возврат КонецЕсли;
	//КонецВик

	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьЧО07СложнаяОплата")
Процедура ТБКВыполнитьЧО07СложнаяОплата()
	//Вик 2022_03_21
	флВсеХорошо	=	ПроверитьУценку();
	Если не флВсеХорошо тогда Возврат КонецЕсли;
	//КонецВик

	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьЧО06ПлатежнаяКарта")
Процедура ТБКВыполнитьЧО06ПлатежнаяКарта()
	//Вик 2022_03_21
	флВсеХорошо	=	ПроверитьУценку();
	Если не флВсеХорошо тогда Возврат КонецЕсли;
	//КонецВик
	
	ПродолжитьВызов();
КонецПроцедуры

&НаКлиенте
Процедура ТБКОткрытьПочтуПосле(Команда)
	ЗапуститьПриложение("www.e.mail.ru");
КонецПроцедуры


&НаКлиенте
Процедура ТБКПолучитьЦеныПокупкаСотрудникаПосле(Команда)
	Если не ПокупкаСотрудника тогда
		Сообщить("Не установлена галочка Покупка сотрудника!");
		Возврат	
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 тогда
		Сообщить("Нет товаров!");
		Возврат	
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 5 тогда
		Сообщить("Запрещено запрашивать цены более 5 товаров!");
		Возврат	
	КонецЕсли;

	
	Для каждого СтрокаТовары из Объект.Товары цикл
		//Если ОбщегоНазначенияВызовСервера.ЭтоМаркированнаяНоменклатураСервер(СтрокаТовары.Номенклатура) тогда
		НужХар	=	Неопределено;
		Попытка
			НужХар = Число(Строка(СтрокаТовары.Характеристика));	
		Исключение
		КонецПопытки;
		
		Если НужХар <> Неопределено тогда
			Сообщить("Сотрудникам нельзя покупать для себя сигареты и стики!");
			Возврат
		КонецЕсли;		
	КонецЦикла; 

	ВвестиПарольИОбработать();
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьПО14Продавец")
Процедура ТБКВыполнитьПО14Продавец()
	Если Объект.Товары.Количество() > 0 тогда
		Сообщить("В чеке присутствуют товары! Смена продавца невозможна!");
		Возврат;
	КонецЕсли;
	
	ИсполняемаяОперацияЛогирования = "ВыбранПродавец";
	Если ЗначениеЗаполнено(Объект.Продавец) Тогда
		ЛогированиеВводаПродавца(
			Неопределено, Объект.Продавец, ПредопределенноеЗначение("Справочник.ИнформационныеКарты.ПустаяСсылка"));
		Объект.Продавец = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		УстановитьЗаголовок();
	Иначе
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
						Истина, "Справочник.ФизическиеЛица.Форма.ФормаВыбораВРМК.Открытие");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПродавца", ЭтотОбъект);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Сотрудник" , Истина);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбораВРМК",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ВвестиПарольИОбработать()
	Пароль = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьПарольИОбработатьЦеныДляСотрудников", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещения, Пароль, "Введите пароль: ");		
КонецПроцедуры

&НаСервере
Процедура ПолучитьПарольИОбработатьЦеныДляСотрудников(ПолученноеЗначение, ПереданныеПараметры) экспорт
	//Подключение
	Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User", "http://mx.tabakon.ru:1777/ut/ws/tbk?wsdl");
	Если Прокси = Неопределено тогда
		Сообщить("Не удалось подключиться к УТ для получения цен. Попробуйте выполнить действие позже.");
		Возврат
	КонецЕсли;
	
	//Проверка паролей
	Если Объект.Продавец.Пустая() тогда
		Объект.Продавец = Объект.Товары[0].Продавец;
	КонецЕсли;
	
	СтруктураПарольЛимитСотрудника	=	Прокси.GetPasswordAndLimit(СокрЛП(Строка(Объект.Продавец)));
	СтруктураПарольЛимитСотрудника	=	ОбщегоНазначения.jsonВСтруктура_Общая(СтруктураПарольЛимитСотрудника);	
	
	ПарольСотрудника				=	СтруктураПарольЛимитСотрудника[0].ПарольСотрудника;
	ЛимитСотрудника					=	Число(СтруктураПарольЛимитСотрудника[0].ЛимитСотрудника);
	ИзрасходованныйЛимит			=	Число(СтруктураПарольЛимитСотрудника[0].ИзрасходованныйЛимит);
	ПроцентНаценки					=	Число(СтруктураПарольЛимитСотрудника[0].ПроцентНаценки);
	
	//Добавляем не отправленные в ут
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ЕСТЬNULL(ТБК_ПокупкиСотрудников.Чек.СуммаДокумента, 0) КАК СуммаЧека
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_ПокупкиСотрудников КАК ТБК_ПокупкиСотрудников
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ПокупкиСотрудников.ОтправленВУТ
	      	 	             |	И ТБК_ПокупкиСотрудников.Продавец = &Продавец");
	Запрос.УстановитьПараметр("Продавец",Объект.Продавец);
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого Строка из Рез цикл
		ИзрасходованныйЛимит	=	ИзрасходованныйЛимит + Строка.СуммаЧека;	
	КонецЦикла;
	
	Если ПарольСотрудника =  "Не найден" тогда
		Сообщить("Ошибка! Пользователь не найден в УТ");
		Возврат
	КонецЕсли;
	
	Если ПарольСотрудника <> "" и ПарольСотрудника <> ПолученноеЗначение тогда
		Сообщить("Неверный пароль!");
		Возврат;
	КонецЕсли;	
		
	//Получение Цен
	Результат = Новый Массив;
	нЗапись   = Новый Структура();

	Для каждого СтрокаТовары из Объект.Товары цикл
		нЗапись.Вставить("НоменклатураКод" + Строка(СтрокаТовары.НомерСтроки),СокрЛП(СтрокаТовары.Номенклатура.Код));		
	КонецЦикла; 
	
	Результат.Добавить(нЗапись);	
	СтрJSON		=	ОбщегоНазначения.СтруктураВjson_Общая(Результат);			
	
	Ответ	= Прокси.GetPriceWorker(СтрJSON);
	Прокси	=	Неопределено;
	
	Если Ответ = "" тогда
		Сообщить("Не удалось получить цены из УТ! Попробуйте выполнить действие позже.");
		Возврат
	КонецЕсли;   
	
	СтруктураОтвета	= ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);     	
	
	Если СтруктураОтвета[0].количество() = 0 тогда
		Сообщить("Не удалось получить цены из УТ. Попробуйте выполнить действие позже.");
		Возврат
	КонецЕсли; 
	
	//Обработка ответа
	
	//1) Проверка лимитов
	СуммаЧека	=	0;
	
	Для каждого Строка из СтруктураОтвета цикл
		Для i=1 по 10000 цикл
			Если Строка.Свойство("Цена"+Строка(i)) тогда
				ЦенаЗакуп			=	"";
				Строка.Свойство("Цена"	+ Строка(i), ЦенаЗакуп);
				
				ЦенаЗакуп	=	Число (ЦенаЗакуп);
				
				СуммаЧека	=	СуммаЧека + ЦенаЗакуп * Объект.Товары[i-1].Количество;
			иначе
				Прервать;
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	Если ЛимитСотрудника < СуммаЧека + ИзрасходованныйЛимит тогда
		Сообщить("Превышен лимит!");
		Прокси = Неопределено;
		Возврат
	КонецЕсли;	
	
	//2) Изменяем ТЧ
	Для каждого Строка из СтруктураОтвета цикл
		Для i=1 по 10000 цикл
			Если Строка.Свойство("Цена"+Строка(i)) тогда
				ЦенаЗакуп			=	"";
				Строка.Свойство("Цена"	+ Строка(i), ЦенаЗакуп);
				
				ЦенаЗакуп	=	Число (ЦенаЗакуп);
				ЦенаЗакуп	=	ЦенаЗакуп + (ЦенаЗакуп/100)*ПроцентНаценки;
				
				Объект.Товары[i-1].Цена					=	ЦенаЗакуп;
				Объект.Товары[i-1].Сумма				=	Объект.Товары[i-1].Цена * Объект.Товары[i-1].Количество;
				Объект.Товары[i-1].СуммаРучнойСкидки	=	0;
				Объект.Товары[i-1].СуммаВсего			=	Объект.Товары[i-1].Сумма;
			иначе
				Прервать;
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	ОбработкаТабличнойЧастиТоварыСервер.ПересчитатьСуммуНДСВТЧСервер(
		Объект.Товары, ОбработкаТабличнойЧастиТоварыКлиентСервер.СтруктураПересчетаСуммыНДСВСтрокеТЧ(Объект));	
		
	Элементы.ПокупкаСотрудника.Доступность	=	Ложь;
	Элементы.Товары.Доступность				=	Ложь;
	Элементы.КартинкаЧО03РедактированиеСтроки.Доступность	=	Ложь;
КонецПроцедуры


&НаКлиенте
&Вместо("ВыполнитьЧО03РедактированиеСтроки")
Процедура ТБКВыполнитьЧО03РедактированиеСтроки()
	Если ПокупкаСотрудника тогда Возврат КонецЕсли;//Вик 2022-05-04
	
	ДанныеСтрокиТовары = Элементы.Товары.ТекущиеДанные;
	
	Если ДанныеСтрокиТовары <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтрокиТовары.ДоговорКонтрагента)
			И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
			
			СтруктураПараметровКлиента = Новый Структура;
			СтруктураПараметровКлиента.Вставить("УчетХарактеристик", Ложь);
			СтруктураПараметровКлиента.Вставить("ПересчиталиЦену", Истина);
			СтруктураПараметровКлиента.Вставить("НеУдалятьСтроку", Истина);
			СтруктураПараметровКлиента.Вставить("ПредупреждениеНулевойЦены", НСтр("ru = 'Введите сумму платежа.'"));
			СтруктураПараметровКлиента.Вставить("ОткрытаБлокирующаяФорма", Истина);
			СтруктураПараметровКлиента.Вставить("ИдентификаторСтроки", ДанныеСтрокиТовары.ПолучитьИдентификатор());
			СтруктураПараметровКлиента.Вставить("ПрекратитьДействия", Ложь);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрДействия", СтруктураПараметровКлиента);
			
			ОбработчикОповещения = Новый ОписаниеОповещения(
				"ОповещениеОткрытьФормуВводаЧислаТоварыПриИзмененииНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьИнтерактивноЧисло(НСтр("ru = 'Введите сумму платежа.'"), ОбработчикОповещения);
			
		Иначе
			
			Если НЕ ДанныеСтрокиТовары.НомерСтроки = Объект.Товары.Количество()
				И НЕ НаборПравИНастроек.РазрешитьРедактироватьНабранныйЧек 
				И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЧекККМ.Продажа") Тогда
				Возврат;
			КонецЕсли;
			
			ОбработатьРедактированиеСтроки(ДанныеСтрокиТовары, "");
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
&Вместо("ВыполнитьПО04ОтложитьЧек")
Процедура ТБКВыполнитьПО04ОтложитьЧек()
	Если не ПокупкаСотрудника тогда
		Если ОтменитьОплатуПК Тогда
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОтложитьЧек", ЭтотОбъект);
			ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
			Возврат;
		КонецЕсли;
	
		ОповещениеОтложитьЧек();
	иначе
		Сообщить("Невозможно для покупок для себя");	
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
&Вместо("ВыполнитьПО15ПродолжитьЧек")
Процедура ТБКВыполнитьПО15ПродолжитьЧек()
	Если не ПокупкаСотрудника тогда  
		Если ОтменитьОплатуПК Тогда
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеПродолжитьЧек", ЭтотОбъект);
			ВывестиПредупреждениеОбОтменеОплаты(ОбработчикОповещения);
			Возврат;
		КонецЕсли;
		
		ОповещениеПродолжитьЧек();
	иначе
		Сообщить("Невозможно для покупок для себя");	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
&Вместо("ВыполнитьПО22РучныеСкидки")
Процедура ТБКВыполнитьПО22РучныеСкидки()
	Если не ПокупкаСотрудника тогда  

		Если ОшибкаРасчетаСкидокПоЗаказуПокупателя() Тогда
			Возврат;
		КонецЕсли;
		
		Если ОшибкаРасчетаСкидокПоДокументуРасчета() Тогда
			Возврат;
		КонецЕсли;
		
		// &ЗамерПроизводительности
		ОценкаПроизводительностиРТКлиент.НачатьЗамер(
						Истина, "Обработка.РМКУправляемыйРежим.Форма.ФормаРучныхСкидок.Открытие");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуРучныхСкидок", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Обработка.РМКУправляемыйРежим.Форма.ФормаРучныхСкидок",
			, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	иначе
		Сообщить("Невозможно для покупок для себя");	
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ТБКВвестиНомерБукетаПослеНаСервере(ПолученноеЗначение, ПереданныеПараметры) экспорт
	Если ПолученноеЗначение >0 тогда
		Запрос	=	Новый Запрос("ВЫБРАТЬ
		      	 	             |	ТБК_ДанныеПоПроизвольнымБукетам.Цена КАК Цена,
		      	 	             |	ТБК_ДанныеПоПроизвольнымБукетам.Продан КАК Продан
		      	 	             |ИЗ
		      	 	             |	РегистрСведений.ТБК_ДанныеПоПроизвольнымБукетам КАК ТБК_ДанныеПоПроизвольнымБукетам
		      	 	             |ГДЕ
		      	 	             |	ТБК_ДанныеПоПроизвольнымБукетам.НомерБукета = &НомерБукета");
		Запрос.УстановитьПараметр("НомерБукета",ПолученноеЗначение);
		Рез = Запрос.Выполнить().Выгрузить();
		
		Если рез.Количество() >0 тогда
			Если рез[0].Продан тогда
				Сообщить("Букет уже продан. номер: "+ПолученноеЗначение);  	
			иначе				
				НоваяСтрока	=	Объект.Товары.Добавить();
				НоваяСтрока.Номенклатура 		= Справочники.Номенклатура.НайтиПоНаименованию("Произвольный букет");
				НоваяСтрока.Продавец 			= Объект.Продавец;
				НоваяСтрока.Организация			= Объект.Организация;
				НоваяСтрока.Количество			= 1;
				НоваяСтрока.КоличествоУпаковок	= 1;
				НоваяСтрока.Цена				= рез[0].Цена;
				НоваяСтрока.Сумма				= рез[0].Цена; 
				НоваяСтрока.Склад				= Объект.Магазин.СкладПродажи;
				НоваяСтрока.НомерБукета         = ПолученноеЗначение;	
				НоваяСтрока.ВидНалога			= Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход;
				НоваяСтрока.СтавкаНДС			= Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;			
		иначе
			Сообщить("Не найден букет с номером: "+ПолученноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТБКВвестиНомерБукетаПосле(Команда)
	НомерБукета = 0;
	ОписаниеОповещения = Новый ОписаниеОповещения("ТБКВвестиНомерБукетаПослеНаСервере", ЭтаФорма);
	ПоказатьВводЧисла(ОписаниеОповещения, НомерБукета, "Введите номер букета: ");	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПогаситьБукет(НомерБукета)
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ДанныеПоПроизвольнымБукетам.Комплектация КАК Комплектация,
	      	 	             |	ТБК_ДанныеПоПроизвольнымБукетам.НомерБукета КАК НомерБукета,
	      	 	             |	ТБК_ДанныеПоПроизвольнымБукетам.Цена КАК Цена
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_ДанныеПоПроизвольнымБукетам КАК ТБК_ДанныеПоПроизвольнымБукетам
	      	 	             |ГДЕ
	      	 	             |	ТБК_ДанныеПоПроизвольнымБукетам.НомерБукета = &НомерБукета");
	Запрос.УстановитьПараметр("НомерБукета",НомерБукета);
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() >0 тогда	
		Рег	=	РегистрыСведений.ТБК_ДанныеПоПроизвольнымБукетам.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Рег,Рез[0]);
		
		Рег.Продан	=	Истина;
		Рег.Записать();		
	КонецЕсли;
	
	
КонецПроцедуры
//КонецВик
