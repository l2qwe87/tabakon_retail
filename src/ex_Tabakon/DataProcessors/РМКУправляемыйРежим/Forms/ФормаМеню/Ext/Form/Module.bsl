


&НаКлиенте
&После("ОповещениеОткрытьФормуЗакрытияКассовойСмены")
Процедура ОповещениеОткрытьФормуЗакрытияКассовойСменыПосле(//Вставить содержимое обработчика
РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	//ДополнительныеПараметры.КассаККМ
	//параметрыЗакрытия = новый Структура;
	//параметрыЗакрытия.Вставить("КассаККМ",ДополнительныеПараметры.КассаККМ);
	//ОткрытьФорму("Документ.ТБК_ВедомостьОПродажахЗаДень.Форма",параметрыЗакрытия);
КонецПроцедуры


&НаКлиенте
Процедура ТБКВыполнитьОбменПосле(Команда)
	Элементы.ВыполнитьОбмен.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	
	//файл_apply_cfe = Новый Файл("C:\app\database\apply_cfe.cmd");
	файл_exRetailOle = Новый Файл("C:\app\database\exRetailOle.cmd");
	
	//Если файл_apply_cfe.Существует() И файл_exRetailOle.Существует() Тогда
	Если файл_exRetailOle.Существует() Тогда
		
		WshShell=Новый COMОбъект("WScript.Shell");
		//WshShell.Run("C:\app\database\apply_cfe.cmd",2);
		//Пауза(10);	
		WshShell.Run("C:\app\database\exRetailOle.cmd",2);
	КонецЕсли;
		
	Элементы.ВыполнитьОбмен.Картинка = БиблиотекаКартинок.СинхронизацияДанныхВыполнение;
КонецПроцедуры



&НаСервереБезКонтекста
Функция Пауза(сек)
	ОбщегоНазначенияБТС.Пауза(сек);	
КонецФункции

&НаКлиенте
&После("ОбработкаОповещения")
Процедура ТБКОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// Вставить содержимое метода.
	ОбновитьСостояниеКассККМ();
	Если ИмяСобытия = "ИзменениеСостоянияКассовойСмены" Тогда
		СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(Параметр);
		Если НЕ СтруктураСостояниеКассовойСмены.СменаОткрыта Тогда
			параметрыЗакрытия = новый Структура;
			параметрыЗакрытия.Вставить("КассаККМ",Параметр);
			Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			ОткрытьФорму("Документ.ТБК_ВедомостьОПродажахЗаДень.Форма.ФормаДокумента",параметрыЗакрытия,,,,,,Режим);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОбновитьСостояниеКассККМ()
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КассыККМ.Ссылка КАК КассаККМ,
	               |	КассыККМ.Магазин КАК Магазин,
	               |	КассыККМ.Магазин.СкладПродажи КАК Склад
	               |ИЗ
	               |	Справочник.КассыККМ КАК КассыККМ
	               |ГДЕ
	               |	КассыККМ.РабочееМесто = &РабочееМесто
	               |	И КассыККМ.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("РабочееМесто",РабочееМесто);
	
	Рез = запрос.Выполнить().Выгрузить();
	
	ЭтаФорма.Элементы.ККМ_ФР1.Видимость = рез.Количество() > 0; 
	ЭтаФорма.Элементы.ККМ_ФР2.Видимость = рез.Количество() > 1; 
	//ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
	
	инд = 0;
	Для Каждого стр из рез Цикл
		
		инд = инд + 1;
		СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(стр.КассаККМ);

		ЭтаФорма.Элементы["КассаККМ_ФР"+инд+"_Название"].Заголовок = Строка(стр.КассаККМ);
		
		ЭтаФорма.Элементы["КассаККМ_ФР"+инд+"_Открыта"].Видимость = СтруктураСостояниеКассовойСмены.СменаОткрыта;
		ЭтаФорма.Элементы["КассаККМ_ФР"+инд+"_Закрыта"].Видимость = НЕ СтруктураСостояниеКассовойСмены.СменаОткрыта;
		
	КонецЦикла;
КонецФункции

&НаСервереБезКонтекста 
Функция ПолучитьСостояниеКассовойСмены(КассаККМ)
	Возврат РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(	КассаККМ);
КонецФункции

&НаКлиенте
&После("ПолучитьРабочееМесто")
Процедура ТБКПолучитьРабочееМесто()
	// Вставить содержимое метода.
	ОбновитьСостояниеКассККМ();
КонецПроцедуры

&НаКлиенте
&Вместо("ДекорацияЗавершениеРаботыНажатие")
Процедура ТБКДекорацияЗавершениеРаботыНажатие(Элемент)
	// Вставить содержимое метода.
	//ТБКВыполнитьОбменПосле(неопределено);
	ПродолжитьВызов(Элемент);
КонецПроцедуры

&НаКлиенте
&Вместо("ДекорацияЗакрытьНажатие")
Процедура ТБКДекорацияЗакрытьНажатие(Элемент)
	// Вставить содержимое метода.
	//ТБКВыполнитьОбменПосле(неопределено);
	ПродолжитьВызов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТБКВыгрузитьПродажиЗаПериодПосле(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("Обработка.ТБК_ВыгрузкаПродажДляИнвентаризации.Форма.Форма",,ЭтаФорма,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТБКПоказатьЧекиПосле(Команда)
	СтруктураСтатусВидОперации =  ПолучитьСтвтусИВидОперацииНаСервере();
	
	УсловияОтбора = Новый Структура("СтатусЧекаККМ",СтруктураСтатусВидОперации.Статус);
	УсловияОтбора.Вставить("ВидОперации",СтруктураСтатусВидОперации.ВидОперации);

	ПараметрыФормы = Новый Структура("Отбор",УсловияОтбора);
	ОткрытьФорму("Документ.ЧекККМ.ФормаСписка",ПараметрыФормы);
КонецПроцедуры

&НаСервере
Функция ПолучитьСтвтусИВидОперацииНаСервере()
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Статус",Перечисления.СтатусыЧековККМ.Архивный);
	СтруктураВозврата.Вставить("ВидОперации",Перечисления.ВидыОперацийЧекККМ.Продажа);
	Возврат СтруктураВозврата;	
конецФункции

&НаКлиенте
Процедура ТБКПриОткрытииПосле(Отказ)
	// Вставить содержимое обработчика.
	_имяКомпьютера = ИмяКомпьютера();
	_настройкаРМК = ПолучитьТекущуюНастройкуРМКСервер(_имяКомпьютера);
	Если НЕ ЗначениеЗаполнено(_настройкаРМК) Тогда
	//Если ИСТИНА Тогда
		_настройкаРМК = СгенерироватьИлиУстановитьНастройкРМКСервер(_имяКомпьютера);
	КонецЕсли;
	
	Если НЕ ПолучитьРквизит(_настройкаРМК,"НазначатьЦенуТоварамСНулевойЦеной") Тогда
		УстановитьРеквизит_НазначатьЦенуТоварамСНулевойЦеной(_настройкаРМК);
	КонецЕсли;
	
	Версия = ПолучитьВерсиюКонфигурации();
	Элементы.ВерсияР.Заголовок = Версия;
	
	ПроверкаНовыхНовостей();
	ПодключитьОбработчикОжидания("ПроверкаНовыхНовостей",10); 
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьВерсиюКонфигурации()
	Возврат ОбщегоНазначения.ПолучитьВерсиюРасширения();	
КонецФункции


&НаСервереБезКонтекста
Функция СгенерироватьИлиУстановитьНастройкРМКСервер(мИмяКомпьютера)
	УстановитьПривилегированныйРежим(Истина);
	
	
	выборка = Справочники.НастройкиРМК.Выбрать();
	настройкаРМК = неопределено;
	Пока Выборка.Следующий() Цикл
		Если выборка.ПометкаУдаления = ИСТИНА Тогда
			Продолжить;
		КонецЕсли;
		
		настройкаРМК = Выборка.Ссылка;
		BREAK;
	конецЦикла;
	
	Если настройкаРМК = Неопределено Тогда
	//Если ИСТИНА Тогда
		настройкаРМК = Справочники.НастройкиРМК.СоздатьЭлемент();
		
		настройкаРМК.Наименование = мИмяКомпьютера;
		настройкаРМК.НазначатьЦенуТоварамСНулевойЦеной = Истина;
		настройкаРМК.ИспользоватьРасширеннуюНастройкуКнопокНижнейПанели = Истина;
		настройкаРМК.МаксимальноеКоличествоКнопокВОдномРяду = 10;
		
		Макет = Справочники.НастройкиРМК.ПолучитьМакет("СтандартныеДействияКнопокНижнейПанели");		
		КолСтрок = Макет.ВысотаТаблицы;		
		Для НомерСтрокиМакета = 2 По КолСтрок Цикл			
			поУмолчанию = Булево(Макет.Область(НомерСтрокиМакета,10,НомерСтрокиМакета,10).Текст);
			Если поУмолчанию тогда
				СтрокаТаблицы = настройкаРМК.КнопкиНижнейПанели.Добавить();
				СтрокаТаблицы.ПредставлениеКнопки = Макет.Область(НомерСтрокиМакета,1,НомерСтрокиМакета,1).Текст;
				СтрокаТаблицы.ИмяКоманды          = Макет.Область(НомерСтрокиМакета,2,НомерСтрокиМакета,2).Текст;
				СтрокаТаблицы.ИмяКнопки           = Макет.Область(НомерСтрокиМакета,3,НомерСтрокиМакета,3).Текст;
				СтрокаТаблицы.ЗаголовокКнопки     = Макет.Область(НомерСтрокиМакета,4,НомерСтрокиМакета,4).Текст;
				СтрокаТаблицы.ПроцедураКнопки     = Макет.Область(НомерСтрокиМакета,5,НомерСтрокиМакета,5).Текст;
				СтрокаТаблицы.Клавиша             = Макет.Область(НомерСтрокиМакета,6,НомерСтрокиМакета,6).Текст;
				СтрокаТаблицы.АкселераторAlt      = Булево(Макет.Область(НомерСтрокиМакета,7,НомерСтрокиМакета,7).Текст);
				СтрокаТаблицы.АкселераторCtrl     = Булево(Макет.Область(НомерСтрокиМакета,8,НомерСтрокиМакета,8).Текст);
				СтрокаТаблицы.АкселераторShift    = Булево(Макет.Область(НомерСтрокиМакета,9,НомерСтрокиМакета,9).Текст);
			КонецЕсли;
		КонецЦикла;

		
		настройкаРМК.ОбменДанными.Загрузка = Истина;		
		настройкаРМК.Записать();		
		настройкаРМК = настройкаРМК.Ссылка;
	КонецЕсли;
	
	МенеджерРегистраНастройкаРМК = РегистрыСведений.НастройкаРМКНаКомпьютере.СоздатьМенеджерЗаписи();
	МенеджерРегистраНастройкаРМК.Компьютер    = мИмяКомпьютера;
	МенеджерРегистраНастройкаРМК.НастройкаРМК = НастройкаРМК;
	МенеджерРегистраНастройкаРМК.Записать(Истина);

	Возврат настройкаРМК;
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьРеквизит_НазначатьЦенуТоварамСНулевойЦеной(настройкаРМК)
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЛОЖЬ Тогда настройкаРМК=Справочники.НастройкиРМК.ПустаяСсылка(); КонецЕсли;
	настройкаРМК = настройкаРМК.ПолучитьОбъект();
	настройкаРМК.НазначатьЦенуТоварамСНулевойЦеной = Истина;
	настройкаРМК.ИспользоватьРасширеннуюНастройкуКнопокНижнейПанели = Истина;
	настройкаРМК.ОбменДанными.Загрузка = Истина;
	настройкаРМК.Записать();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРквизит(эл, имяРеквизита)
	Возврат эл[имяРеквизита];
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекущуюНастройкуРМКСервер(мИмяКомпьютера)
	
	НастройкаРМК = ПродажиСервер.ТекущаяНастройкаРМКСервер(мИмяКомпьютера);
	
КонецФункции

&НаКлиенте
Процедура ТБКПоказатьВозвратыПосле(Команда)
	ОткрытьФорму("Документ.ВозвратТоваровОтПокупателя.ФормаСписка",);
КонецПроцедуры

&НаКлиенте
&Перед("ДекорацияЗакрытиеСменыНажатие")
Процедура ТБКДекорацияЗакрытиеСменыНажатиеПеред(Элемент)
	Попытка
		ПроверкаЧековСПустымиКассами();		
		ПроверкаВозвратовОтПокупателейБезДвижений();
		ПроверкаСумм_ДляВыемки();

	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаЧековСПустымиКассами()
	текущаяДата = Дата(1990,01,01);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	MAX(ДатыЗапретаИзменения.ДатаЗапрета) КАК ДатаЗапрета
	               |ИЗ
	               |	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения";
	рез =Запрос.Выполнить().Выбрать();
	Если рез.Следующий() Тогда
		текущаяДата = рез.ДатаЗапрета;
	Конецесли;

	
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ЧекККМ.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЧекККМ КАК ЧекККМ
	      	 	             |ГДЕ
	      	 	             |	ЧекККМ.Проведен
	      	 	             |	И ЧекККМ.КассаККМ = &КассаККМ
	      	 	             |	И ЧекККМ.Дата >= &Дата
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	ЧекККМ.Дата");
	Запрос.УстановитьПараметр("Дата",текущаяДата);
	Запрос.УстановитьПараметр("КассаККМ",Справочники.КассыККМ.ПустаяСсылка());
	рез = Запрос.Выполнить().Выгрузить();
	Для каждого Строка из рез цикл
		Об = Строка.Ссылка.ПолучитьОбъект();
		Попытка
			Об.мЗакрытиеСмены	=	истина;
			Об.записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение			
		КонецПопытки;
	КонецЦикла;
	
	
КонецФункции

&НаСервереБезКонтекста
Процедура  ПроверкаСумм_ДляВыемки()
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КассоваяСмена.Дата КАК Дата,
	               |	КассоваяСмена.КассаККМ КАК КассаККМ
	               |ИЗ
	               |	Документ.КассоваяСмена КАК КассоваяСмена
	               |ГДЕ
	               |	КассоваяСмена.Проведен
	               |	И КассоваяСмена.Статус = &Статус
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КассоваяСмена.Дата УБЫВ";
	Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыКассовойСмены.Открыта);
	
	РезПоСменам = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаПоСменам из РезПоСменам цикл
		
		Запрос	=	Новый запрос("ВЫБРАТЬ
		      	 	             |	КорректировкаРегистров.Ссылка КАК Ссылка
		      	 	             |ИЗ
		      	 	             |	Документ.КорректировкаРегистров КАК КорректировкаРегистров
		      	 	             |ГДЕ
		      	 	             |	КорректировкаРегистров.Дата >= &Дата
		      	 	             |	И КорректировкаРегистров.Комментарий ПОДОБНО &Комментарий");
		Запрос.УстановитьПараметр("Дата",СтрокаПоСменам.Дата);
		Запрос.УстановитьПараметр("Комментарий","Создан автоматически. Починить выемку "+СокрЛП(Строка(СтрокаПоСменам.КассаККМ)));
		Если не запрос.Выполнить().Пустой() тогда
			Продолжить;
		КонецЕсли;
		
		Запрос	=	Новый запрос("ВЫБРАТЬ
		      	 	             |	СУММА(ДенежныеСредстваККМОстатки.СуммаОстаток) КАК Сумма,
		      	 	             |	ДенежныеСредстваККМОстатки.КассаККМ КАК КассаККМ
		      	 	             |ИЗ
		      	 	             |	РегистрНакопления.ДенежныеСредстваККМ.Остатки(&Дата, ) КАК ДенежныеСредстваККМОстатки
		      	 	             |ГДЕ
		      	 	             |	ДенежныеСредстваККМОстатки.КассаККМ = &КассаККМ
		      	 	             |
		      	 	             |СГРУППИРОВАТЬ ПО
		      	 	             |	ДенежныеСредстваККМОстатки.КассаККМ");
		Запрос.УстановитьПараметр("КассаККМ",СтрокаПоСменам.КассаККМ);
		Запрос.УстановитьПараметр("Дата",СтрокаПоСменам.Дата);
		
		//Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
		
		Рез = Запрос.Выполнить().Выгрузить();
		
		
		Сумма1с = 0;
		Если Рез.Количество() > 0 тогда
			Сумма1с	=	Рез[0].Сумма;
		иначе
			Продолжить;
		КонецЕсли;
		
		Корректировка = Документы.КорректировкаРегистров.СоздатьДокумент();
		Корректировка.Дата			= 	ТекущаяДата();

		Рег							= Корректировка.ТаблицаРегистров.Добавить();
		Рег.Имя 					= "ДенежныеСредстваККМ";
		
		Корректировка.Комментарий = "Создан автоматически. Починить выемку "+СокрЛП(Строка(СтрокаПоСменам.КассаККМ));		
		
		СтрокаРег	=	Корректировка.Движения.ДенежныеСредстваККМ.Добавить();
		
		СтрокаРег.Регистратор	=	Корректировка;
		СтрокаРег.ВидДвижения	=	ВидДвиженияНакопления.Расход;	
		СтрокаРег.Активность	=	Истина;
		СтрокаРег.Период		=	НачалоДня(ТекущаяДата());
		
		СтрокаРег.КассаККМ	=	Рез[0].КассаККМ;
		СтрокаРег.Сумма		=	Сумма1с;
		
		Попытка
			Корректировка.Записать();	
		исключение
		КонецПопытки;
		
	КонецЦикла;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПроверкаВозвратовОтПокупателейБезДвижений()
	текущаяДата = Дата(1990,01,01);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	MAX(ДатыЗапретаИзменения.ДатаЗапрета) КАК ДатаЗапрета
	               |ИЗ
	               |	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения";
	рез =Запрос.Выполнить().Выбрать();
	Если рез.Следующий() Тогда
		текущаяДата = рез.ДатаЗапрета;
	Конецесли;

	
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка
	      	 	             |ПОМЕСТИТЬ Возвраты
	      	 	             |ИЗ
	      	 	             |	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	      	 	             |ГДЕ
	      	 	             |	ВозвратТоваровОтПокупателя.Проведен
	      	 	             |	И ВозвратТоваровОтПокупателя.Дата >= &Дата
	      	 	             |
	      	 	             |СГРУППИРОВАТЬ ПО
	      	 	             |	ВозвратТоваровОтПокупателя.Ссылка
	      	 	             |;
	      	 	             |
	      	 	             |////////////////////////////////////////////////////////////////////////////////
	      	 	             |ВЫБРАТЬ
	      	 	             |	Возвраты.Ссылка КАК Ссылка,
	      	 	             |	ТоварыНаСкладах.Регистратор КАК Регистратор
	      	 	             |ПОМЕСТИТЬ Итог
	      	 	             |ИЗ
	      	 	             |	Возвраты КАК Возвраты
	      	 	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	      	 	             |		ПО Возвраты.Ссылка = ТоварыНаСкладах.Регистратор
	      	 	             |;
	      	 	             |
	      	 	             |////////////////////////////////////////////////////////////////////////////////
	      	 	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      	 	             |	Итог.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Итог КАК Итог
	      	 	             |ГДЕ
	      	 	             |	Итог.Регистратор ЕСТЬ NULL");
	Запрос.УстановитьПараметр("Дата",текущаяДата);
	
	рез = Запрос.Выполнить().Выгрузить();
	Для каждого Строка из рез цикл
		Об = Строка.Ссылка.ПолучитьОбъект();
		Попытка
			Об.записать(РежимЗаписиДокумента.Проведение);
		Исключение			
		КонецПопытки;
	КонецЦикла;
	
	
КонецФункции

&НаКлиенте
Процедура ТБКПоказатьЗаказыПосле(Команда)
	ОткрытьФорму("Документ.ЗаказПокупателя.ФормаСписка",);
КонецПроцедуры

&НаКлиенте
&Перед("ОткрытьСмену")
Процедура ТБКОткрытьСмену(КассаККМ)
	МенеджерОборудованияКлиент.СинхронизироватьСДатойКомпьютера();
КонецПроцедуры


&НаКлиенте
Процедура ТБКОткрытьПочтуПосле(Команда)
	ЗапуститьПриложение("www.e.mail.ru");
КонецПроцедуры

&НаКлиенте
Процедура ТБКПоказатьЗаявкиПосле(Команда)
	ОткрытьФорму("Документ.ТБК_ЗаявкаОтМагазина.ФормаСписка",);
КонецПроцедуры

&НаКлиенте
Процедура ТБКПоказатьЗаявкиНаЦенникиПосле(Команда)
	ОткрытьФорму("Документ.ТБК_ЗаявкаНаЦенники.ФормаСписка",);
КонецПроцедуры

&НаКлиенте
&Вместо("ОткрытьСменуЗавершение")
Процедура ТБКОткрытьСменуЗавершение(РезультатВыполнения, Параметры)
	
	ЭтаФорма.Доступность = Истина;
	
	ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
	ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка открытия смены'");
	
	Если РезультатВыполнения.Результат Тогда 
		
		ОписаниеОшибки = "";
		ТекстПереходящегоОстатка = "";  
		
		Результат = ОткрытьКассовуюСменуСервер(Параметры.КассаККМ, ОписаниеОшибки, ТекстПереходящегоОстатка);
		Если Не Результат Тогда
			ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
		                            |Смена не открыта.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
			
			//Вик 2022-11-23
			Если Найти(ТекстСообщения,"Порт занят") тогда
				ТекстСообщения	=	"У вас запущено 2 программы 1с! Закройте одну из них. Если не помогло - перезагрузите компьютер." + Символы.ПС + Символы.ПС + ТекстСообщения
				+ Символы.ПС + Символы.ПС + "У вас запущено 2 программы 1с! Закройте одну из них. Если не помогло - перезагрузите компьютер.";
				
			ИначеЕсли Найти(ТекстСообщения,"Порт недоступен") тогда
				ТекстСообщения	=	"Проверьте включен ли фискальник (должна гореть зеленая лампочка)" + Символы.ПС + Символы.ПС + ТекстСообщения
				 + Символы.ПС + Символы.ПС + "Проверьте включен ли фискальник (должна гореть зеленая лампочка)" ;
			КонецЕсли;
			//КонецВик		
		
			ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
			ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
		ИначеЕсли ЗначениеЗаполнено(ТекстПереходящегоОстатка) Тогда
			ЗаголовокИнформации = НСтр("ru = 'Кассовая смена в системе открыта'");
			ОбщегоНазначенияРТКлиент.ВывестиИнформациюДляРМКУправляемой(ЗаголовокИнформации, ТекстПереходящегоОстатка);
		КонецЕсли;
		
		Оповестить("ИзменениеСостоянияКассовойСмены", Параметры.КассаККМ);
	
	Иначе
		ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
						|%ОписаниеОшибки%
						|Смена не открыта на фискальном устройстве.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
				
		//Вик 2022-11-23
		Если Найти(ТекстСообщения,"Порт занят") тогда
			ТекстСообщения	=	"У вас запущено 2 программы 1с! Закройте одну из них. Если не помогло - перезагрузите компьютер." + Символы.ПС + Символы.ПС + ТекстСообщения
			+ Символы.ПС + Символы.ПС + "У вас запущено 2 программы 1с! Закройте одну из них. Если не помогло - перезагрузите компьютер.";
			
		ИначеЕсли Найти(ТекстСообщения,"Порт недоступен") тогда
			ТекстСообщения	=	"Проверьте включен ли фискальник (должна гореть зеленая лампочка)" + Символы.ПС + Символы.ПС + ТекстСообщения
			 + Символы.ПС + Символы.ПС + "Проверьте включен ли фискальник (должна гореть зеленая лампочка)" ;
		КонецЕсли;
		//КонецВик	
		
		ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
&Вместо("НапечататьОтчетБезГашенияЗавершение")
Процедура ТБКНапечататьОтчетБезГашенияЗавершение(РезультатВыполнения, Параметры)
		ЭтаФорма.Доступность = Истина;
	
	Если НЕ РезультатВыполнения.Результат Тогда 
		
		ТекстСообщения = НСтр("ru = 'При снятии отчета на фискальном устройсве произошла ошибка.
						|%ОписаниеОшибки%
						|Отчет на фискальном регистраторе не сформирован.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		
		//Вик 2022-11-23
		Если Найти(ТекстСообщения,"Порт занят") тогда
			ТекстСообщения	=	"У вас запущено 2 программы 1с! Закройте одну из них. Если не помогло - перезагрузите компьютер." + Символы.ПС + Символы.ПС + ТекстСообщения
			+ Символы.ПС + Символы.ПС + "У вас запущено 2 программы 1с! Закройте одну из них. Если не помогло - перезагрузите компьютер.";
			
		ИначеЕсли Найти(ТекстСообщения,"Порт недоступен") тогда
			ТекстСообщения	=	"Проверьте включен ли фискальник (должна гореть зеленая лампочка)" + Символы.ПС + Символы.ПС + ТекстСообщения
			 + Символы.ПС + Символы.ПС + "Проверьте включен ли фискальник (должна гореть зеленая лампочка)" ;
		КонецЕсли;
		//КонецВик	
		
		ПараметрыИнформации = ОбщегоНазначенияРТКлиентСервер.ВыводимаяВРМКИнформация();
		ПараметрыИнформации.ЗаголовокИнформации = НСтр("ru = 'Ошибка печати отчета без гашения'");
		ПараметрыИнформации.ТекстИнформации = ТекстСообщения;
		
		ОбщегоНазначенияРТКлиент.ОткрытьФормуИнформацииДляРМКУправляемой(ПараметрыИнформации);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ТБКПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка) 
	Попытка
		ЗагрузкаИнструкций();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;  
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузкаИнструкций()
	ПутьОбщий	=	"C:\app\database\manual\Постоянные\";
	Каталог = Новый Файл(ПутьОбщий);
	Если Не Каталог.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	флЕстьНовыеИнструкции	=	Ложь;
	
	Файлы = НайтиФайлы(ПутьОбщий,"*");
	
	Для каждого Файл из Файлы цикл  
	   Расширение = ВРЕГ(Файл.Расширение);
        Если НЕ (
            Расширение = ".DOC"
            ИЛИ Расширение = ".DOCX"
            ИЛИ Расширение = ".PDF"
            ) Тогда
            Продолжить;
		КонецЕсли;    
		
		НужИмя	=	Файл.ИмяБезРасширения;   
			
		Спр	=	Справочники.ТБК_Инструкции.НайтиПоРеквизиту("СсылкаНаФайл",Файл.ПолноеИмя);
			
		Если Спр.Пустая() тогда
			НовыйЭл	=	Справочники.ТБК_Инструкции.СоздатьЭлемент();
						
			НовыйЭл.Наименование	=	НужИмя;
			НовыйЭл.СсылкаНаФайл	=	Файл.ПолноеИмя;
			
			НовыйЭл.Записать();	
		КонецЕсли;		
	КонецЦикла;  
	
	
	//Обратный цикл, пока не включаю
	Спр = Справочники.ТБК_Инструкции.Выбрать();
	Пока Спр.Следующий() цикл
		Файл = новый Файл(Спр.СсылкаНаФайл);
		
		Если НЕ Файл.Существует() тогда
			Об = Спр.Ссылка.ПолучитьОбъект();
			Об.Удалить();
		КонецЕсли;		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ТБКОткрытьИнструкцииПосле(Команда)
	ОткрытьФорму("Справочник.ТБК_Инструкции.ФормаСписка",); 
КонецПроцедуры

&НаКлиенте
Процедура ТБКПоказатьНовостиПосле(Команда)
	ОткрытьФорму("Справочник.ТБКНовости.ФормаСписка",); 
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНовыхНовостей()   
	Попытка
		ПутьОбщий	=	"C:\app\database\manual\Временные\";
		Каталог = Новый Файл(ПутьОбщий);
		Если Не Каталог.Существует() Тогда
			Возврат;
		КонецЕсли;
		
		флЕстьНовыеНовости	=	Ложь;
		
		Файлы = НайтиФайлы(ПутьОбщий,"*");
		
		Для каждого Файл из Файлы цикл  
		   Расширение = ВРЕГ(Файл.Расширение);
	        Если НЕ (
	            Расширение = ".DOC"
	            ИЛИ Расширение = ".DOCX"
	            ИЛИ Расширение = ".PDF"
	            ) Тогда
	            Продолжить;
			КонецЕсли;    
			
			НужИмя	=	Файл.ИмяБезРасширения;
			
			Если Найти(Файл.ИмяБезРасширения, "_") тогда
				Поз1	=	СтрНайти(Файл.ИмяБезРасширения,"_");
				Поз2	=	СтрНайти(Файл.ИмяБезРасширения,"_",,,2);
				
				ДатаНач					=	Сред(Файл.ИмяБезРасширения,Поз1+1,8);
				ДатаКон					=	Сред(Файл.ИмяБезРасширения,Поз2+1,8);
				
				НужИмя	=	СтрЗаменить(НужИмя,ДатаНач,"");
				НужИмя	=	СтрЗаменить(НужИмя,ДатаКон,"");
				НужИмя	=	СтрЗаменить(НужИмя,"_","");
			КонецЕсли;   
				
			флЕстьНовыеНовости	= СоздатьНовостьСервер(флЕстьНовыеНовости,НужИмя, Файл.ПолноеИмя,Файл.ИмяБезРасширения, ДатаНач, ДатаКон); 		
		КонецЦикла;  
		
		
		//Обратный цикл
		ОтметкаНеактуальныхНовостей();
		
		Если флЕстьНовыеНовости тогда
			Элементы.ПоказатьНовости.ЦветТекста = WebЦвета.Красный;
		иначе
			Элементы.ПоказатьНовости.ЦветТекста = Элементы.ОТкрытьЗаявкиНаЦенники.ЦветТекста;
		КонецЕсли;   
	Исключение
		сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьНовостьСервер(флЕстьНовыеНовости, НужИмя,ПолноеИмя,ИмяБезРасширения, ДатаНач, ДатаКон)
	Спр	=	Справочники.ТБКНовости.НайтиПоРеквизиту("СсылкаНаФайл",ПолноеИмя);
		
	Если Спр.Пустая() тогда
		флЕстьНовыеНовости	=	Истина;
		НовыйЭл	=	Справочники.ТБКНовости.СоздатьЭлемент();
		
		Если Найти(ИмяБезРасширения, "_") тогда
			НовыйЭл.ДатаНачала		=	Дата(ДатаНач);
			НовыйЭл.ДатаОкончания	=	Дата(ДатаКон);
			НовыйЭл.ТипНовости	=	"Акция"; 
			
		ИначеЕсли Найти(ИмяБезРасширения, "Инструкция") тогда
			НовыйЭл.ТипНовости	=	"Инструкция";	
		иначе
		    НовыйЭл.ТипНовости	=	"Прочее";
		КонецЕсли;
		
		НовыйЭл.Наименование	=	НужИмя;
		НовыйЭл.СсылкаНаФайл	=	ПолноеИмя;
		
		НовыйЭл.Записать();
	Иначе
		//Проверка что нужно отобразиить   
		Строка	=	 Спр.ПользователиОзнакомились.Найти(Пользователи.ТекущийПользователь());
		Если не Строка = Неопределено тогда
			Если не Строка.Ознакомился тогда
				флЕстьНовыеНовости = Истина;	
			КонецЕсли; 
		иначе
			флЕстьНовыеНовости = Истина;
		КонецЕсли;
	КонецЕсли;   
	
	Возврат флЕстьНовыеНовости;
			
КонецФункции

&НаСервереБезКонтекста
Процедура ОтметкаНеактуальныхНовостей()
	Спр = Справочники.ТБКНовости.Выбрать();
	Пока Спр.Следующий() цикл
		Файл = новый Файл(Спр.СсылкаНаФайл);
		
		Если НЕ Файл.Существует() тогда
			Об = Спр.Ссылка.ПолучитьОбъект();
			Об.УстановитьПометкуУдаления(Истина);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры
