&НаСервере
Перем ОкладМобильный, ОкладЗамена;	 
	 
	 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//проставляем значения

	Период				=	НачалоМесяца(ТекущаяДата());
	ПериодСписок		=	Формат(ТекущаяДата(), "ДФ=MMMM");
	
	//Если Не ЗначениеЗаполнено(Продавец) тогда
	//	Продавец	=	Пользователи.ТекущийПользователь().ФизическоеЛицо;
	//КонецЕсли;
	
	КоличествоСмен						=	ПолучитьКоличествоСмен(Продавец, Период);
	Элементы.КолСменСтрока.Заголовок	=	"Смены:" + Строка(КоличествоСмен);
	
	
	ПроставитьСписокПродавцов(Период);	
	//

	ВариантМотивации	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ВариантМотивации");
	
	//Если ВариантМотивации = 1 тогда
	//	ЗаполнитьВариантПлановойМотивации();
	//	
	//ИначеЕсли ВариантМотивации = 2 тогда
	//	Элементы.Переключатель.Видимость	= Ложь;
	//	//ЗаполнитьВариантПроцентнойМотивации();
	//	ЗаполнитьВариантПроцентнойМотивации_Личный();
	//	
	//ИначеЕсли ВариантМотивации = 3 тогда
	//	ЗаполнитьВариантПроцентнойМотивации();//он такой же в общем варианте, отличается только в личном
	//	
	//ИначеЕсли ВариантМотивации = 4 тогда
	//	ЗаполнитьВариантОбщейМотивации();
	//	
	//ИначеЕсли ВариантМотивации = 5 тогда
	//	ЗаполнитьВариантНовойМотивации();

	//	
	//ИначеЕсли ВариантМотивации = 6 тогда
		ЗаполнитьВариантНовойМотивации_2();

	//КонецЕсли;
	
	Переключатель	=	0;
	
	Если Параметры.Свойство("Развернуть") тогда
		флразвернуть	=	Истина;
	КонецЕсли;
КонецПроцедуры

#Область НоваяМотивация_2
&НаСервере
Процедура ЗаполнитьВариантНовойМотивации_2()
	//Элементы.ПремииВычеты.Видимость	= ложь;
	
	//Вик 2024-10-21
	ТЗЗамены.Очистить();
	ИтогоЗПЗамена		=	0;
	ОкладМобильный		=	0;
	ОкладЗамена			=	0;
	ИтогоЗППремииВычеты	=	0;
	
	Если НачалоМесяца(Период) >= '20241101' и ЗначениеЗаполнено(Продавец) тогда
		
		Если Адрес_ВебСоединение  = "" тогда
			Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User_tbk", "http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl");
			
			Массив	=	новый Массив;
			Массив.Добавить(Прокси);
	
			Адрес_ВебСоединение	=	ПоместитьВоВременноеХранилище(Массив,ЭтаФорма.УникальныйИдентификатор); 
		иначе
			
			Попытка
				Массив = ПолучитьИзВременногоХранилища(Адрес_ВебСоединение);
				Прокси	=	Массив[0]; 
				
				Если Прокси = Неопределено тогда//повторное подключение
					Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User_tbk", "http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl");
					
					Массив	=	новый Массив;    					
					Массив.Добавить(Прокси);
	
					Адрес_ВебСоединение	=	ПоместитьВоВременноеХранилище(Массив,ЭтаФорма.УникальныйИдентификатор); 

				КонецЕсли;
			Исключение
				Сообщить("Не удалось подключиться к УТ. Попробуйте выполнить действие позже.");
				Возврат; 
			КонецПопытки;

		КонецЕсли;
		
		// Толстоухов 19.09.2025 ++
		ТекущийПользователь = Пользователи.ТекущийПользователь().ФизическоеЛицо;  
		флНадоПроверитьПродавца	=	Ложь;
		
		Если ТекущийПользователь <> Продавец тогда
			флНадоПроверитьПродавца	=	Истина;	
		КонецЕсли;
		// Толстоухов 19.09.2025 --
		
		Если Прокси <> Неопределено тогда
		
			НужСклад	= СокрЛП(Строка(ОбщегоНазначения.ПолучитьСкладИзООРП()));
			
			Структура = Новый Структура;
			
			Если ПереключательМесяцДень = 0 тогда	
				Структура.Вставить("ДатаНач",Строка(НачалоМесяца(Период)));
				Структура.Вставить("ДатаКон",Строка(КонецМесяца(Период)));  
			иначе
				Структура.Вставить("ДатаНач",Строка(НачалоДня(Период)));
				Структура.Вставить("ДатаКон",Строка(КонецДня(Период)));
			КонецЕсли;

			Структура.Вставить("Продавец", 	            Строка(Продавец));
			Структура.Вставить("Магазин", 	            Строка(НужСклад)); 
			Структура.Вставить("ТекущийПользователь", 	Строка(ТекущийПользователь)); 
			
			JS = ОбщегоНазначения.СтруктураВjson_Общая(Структура);

			//1. Проставляем замены
			Ответ	=	Прокси.get_zpprodavca_zameni(JS);
			
			Если ЗначениеЗаполнено(Ответ) тогда
				Если не Найти(Ответ,"Внимание!") тогда 
				
					ОтветМассив	=	ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//В массив

					НомСч	=	0;
					Для каждого СтрокаМассива из ОтветМассив цикл //добавляем
						
						Если НомСч = 0 тогда //В первом элементе массива передаю оклады замен и мобильных
							ОкладМобильный	=	Число(СтрокаМассива.ОкладМобильный);
							ОкладЗамена		=	Число(СтрокаМассива.ОкладЗамена);
							
							// Толстоухов 19.09.2025 +
							// проверка на текущего пользователя замена
							Если (Число(СтрокаМассива.ОкладЗамена) = 0  и Число(СтрокаМассива.ОкладМобильный) = 0 И Булево(СтрокаМассива.флТекущийПользователь_ЭтоЗамена) = Истина) Или
								((Число(СтрокаМассива.ОкладЗамена) > 0 или Число(СтрокаМассива.ОкладМобильный) > 0) И Булево(СтрокаМассива.флТекущийПользователь_ЭтоЗамена) = Ложь) Тогда
								Сообщить("Вам запрещено просматривать данные других продавцов!");
								Возврат;
							КонецЕсли; 
							// Толстоухов 19.09.2025 -
							
							НомСч = НомСч+1;
							Продолжить;
						КонецЕсли;

						НоваяЗапись	=	ТЗЗамены.Добавить();
							
						ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаМассива);
						
						ИтогоЗПЗамена = ИтогоЗПЗамена + Число(СтрокаМассива.Итог);
					КонецЦикла; 
				иначе
					Сообщить(Ответ); 				
				КонецЕсли;
			КонецЕсли;
		иначе
			Сообщить("Не удалось подключится к УТ. Информация по заменам не актуальна!");
			
			Если флНадоПроверитьПродавца = Истина тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли; 
		
		////2. Проставляем премии и вычеты
		//Ответ	=	Прокси.get_premii_vicheti(JS);
		//
		//Если ЗначениеЗаполнено(Ответ) тогда
		//	Если не Найти(Ответ,"Внимание!") тогда 
		//	
		//		ОтветМассив	=	ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//В массив

		//		Для каждого СтрокаМассива из ОтветМассив цикл //добавляем
		//			
		//			НоваяЗапись	=	ТЗ_Премии_Вычеты.Добавить();
		//				
		//			ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаМассива);
		//			
		//			Если СтрокаМассива.Тип	=	"Премия" тогда
		//				ИтогоЗППремииВычеты = ИтогоЗППремииВычеты + Число(СтрокаМассива.Сумма);
		//			иначе
		//				ИтогоЗППремииВычеты = ИтогоЗППремииВычеты - Число(СтрокаМассива.Сумма);
		//			КонецЕсли;
		//			
		//		КонецЦикла; 
		//	иначе
		//		Сообщить(Ответ); 				
		//	КонецЕсли;
		//КонецЕсли; 
		
	КонецЕсли;
	//
	
	ЗаполнитьФокусныеПремииОбщаяМотивация(); //фокус остается старый

	
	Элементы.Переключатель.Видимость	= Ложь;	
	Элементы.Группа3.Видимость			= Ложь;
	Элементы.Группа4.Видимость			= Ложь;
	Элементы.Основная.Видимость			= Ложь;
	Элементы.Группа2.Видимость			= Ложь; 
	
	
	Элементы.Новая.Видимость			= Ложь; 
	Элементы.Фокусная.Видимость			= Истина;
	Элементы.Новая_2.Видимость			= Истина; 


	ЦветСиний	=	WebЦвета.КоролевскиГолубой;
	ЦветКрасный	=	WebЦвета.Малиновый;
	
		
	//Оклад
	Если ОкладЗамена>0 или ОкладМобильный>0 тогда         
		
		Если НачалоМесяца(Период) = НачалоМесяца(ТекущаяДата()) тогда
			СтруктураОкладВремя				=	ПолучитьДанныеПоОкладу(Продавец, 1, ТекущаяДата());    
			КоличествоСмен = 1;	
			Элементы.КолСменСтрока.Заголовок	=	"Кол.смен: "+Строка(КоличествоСмен); 
		иначе
			СтруктураОкладВремя	=	новый Структура;
			СтруктураОкладВремя.Вставить("СуммаОклада",		0);
			СтруктураОкладВремя.Вставить("КоличествоЧасов",	0);
			СтруктураОкладВремя.Вставить("ЧасыВсего",		0);      
			КоличествоСмен = 0;	
			Элементы.КолСменСтрока.Заголовок	=	"Кол.смен: "+Строка(КоличествоСмен);
		КонецЕсли;
	
		СтруктураОкладВремя_ДляЧасов	=	ПолучитьДанныеПоОкладу(Продавец, ПереключательМесяцДень, Период);//чтобы получить общее число часов на этом магазине
	иначе
		СтруктураОкладВремя	=	ПолучитьДанныеПоОкладу(Продавец, ПереключательМесяцДень, Период);
	КонецЕсли;
	
	
	Если ОкладЗамена>0 тогда //Если продавец смотрит на основном магазине то ОкладЗамена = 0, если на другом то >0 
		СтруктураОкладВремя.СуммаОклада	=	СтруктураОкладВремя.КоличествоЧасов * ОкладЗамена;		
	КонецЕсли;
	
	Если ОкладМобильный>0 тогда //Если продавец НЕ мобильный тогда ОкладМобильный = 0 
		СтруктураОкладВремя.СуммаОклада	=	СтруктураОкладВремя.КоличествоЧасов * ОкладМобильный;		
	КонецЕсли; 
	
	
	Если ПереключательМесяцДень = 1 и СтруктураОкладВремя.КоличествоЧасов>0 тогда
		КоличествоСмен	=	1;	
		Элементы.КолСменСтрока.Заголовок	=	"Смены:" + Строка(КоличествоСмен);
	КонецЕсли;

	СтрокаЧасы	=	ПолучитьСклоненияСтрокиПоЧислу("", Строка(СтруктураОкладВремя.КоличествоЧасов),   "час", "ЧС=Количественное", "ПД=Винительный; ");
	СтрокаЧасы	=	СтрокаЧасы[0];
	СтрокаЧасы	=	Сред(СтрокаЧасы, СтрНайти(СтрокаЧасы, Строка(СтруктураОкладВремя.КоличествоЧасов))+ СтрДлина(Строка(СтруктураОкладВремя.КоличествоЧасов) )); 	

	СтрокаСмены	=	ПолучитьСклоненияСтрокиПоЧислу("", Строка(КоличествоСмен),   "смена", "ЧС=Количественное", "ПД=Винительный; ");
	СтрокаСмены	=	СтрокаСмены[0];
	СтрокаСмены	=	Сред(СтрокаСмены, СтрНайти(СтрокаСмены, Строка(КоличествоСмен))+ СтрДлина(Строка(КоличествоСмен) ));
	
	
	
	МассЧастей = Новый Массив;
	МассЧастей.Добавить(Новый ФорматированнаяСтрока("За этот период вы отработали: ", 				, ЦветСиний));
	МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(КоличествоСмен), 						, ЦветКрасный));
	МассЧастей.Добавить(Новый ФорматированнаяСтрока(" "+СтрокаСмены+", ", 							, ЦветСиний));	
	МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(СтруктураОкладВремя.КоличествоЧасов), 	, ЦветКрасный));
	МассЧастей.Добавить(Новый ФорматированнаяСтрока(СтрокаЧасы +" Сумма оклада: ", 					, ЦветСиний));
	МассЧастей.Добавить(Новый ФорматированнаяСтрока(""+СтруктураОкладВремя.СуммаОклада+"р.", 		, ЦветКрасный));
	
    Элементы.ДекорацияНадписьОклад2.Заголовок = Новый ФорматированнаяСтрока(МассЧастей);  // Оклад
		
	СуммаОклада						=	СтруктураОкладВремя.СуммаОклада;
	
	//ОбщийПлан
	СтруктураОбщийПлан	=	ПолучитьДанныеПоОбщемуПлану_2(Период);
	ЛичнаяПремияЗавыполнениеПлана	=	0; 
	
	Если СтруктураОкладВремя_ДляЧасов<> Неопределено тогда //для замен и мобильных
		Если СтруктураОкладВремя_ДляЧасов.ЧасыВсего>0 тогда 
			ЛичнаяПремияЗавыполнениеПлана	=	Окр( (СтруктураОбщийПлан.СуммаПремияЗаОбщий / СтруктураОкладВремя_ДляЧасов.ЧасыВсего) * СтруктураОкладВремя_ДляЧасов.КоличествоЧасов, 0 );
		КонецЕсли;
		
	иначе
		Если СтруктураОкладВремя.ЧасыВсего>0 тогда 
			ЛичнаяПремияЗавыполнениеПлана	=	Окр( (СтруктураОбщийПлан.СуммаПремияЗаОбщий / СтруктураОкладВремя.ЧасыВсего) * СтруктураОкладВремя.КоличествоЧасов, 0 );
		КонецЕсли;
	КонецЕсли;

	
	Если Не ЗначениеЗаполнено(Продавец) тогда ПремияЗаОбщий=0 КонецЕсли;
	
	МассЧастей = Новый Массив;
	МассЧастей.Добавить(Новый ФорматированнаяСтрока("План магазина за выбранный месяц: " + СтруктураОбщийПлан.СуммаПлана+"р."+ 
													" Факт. продаж: " + СтруктураОбщийПлан.СуммаФакт + "р. Что составляет: ",, ЦветСиний));
													
	МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(СтруктураОбщийПлан.ПроцентВыполнения), 	, ЦветКрасный));
	МассЧастей.Добавить(Новый ФорматированнаяСтрока("% плана." + Символы.ПС + "Сумма премии магазина: ", 		, ЦветСиний));
	
	МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(СтруктураОбщийПлан.СуммаПремияЗаОбщий)+ "р.", 	, ЦветКрасный));
	МассЧастей.Добавить(Новый ФорматированнаяСтрока(" Ваша премия: " , 		, ЦветСиний));
	МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(ЛичнаяПремияЗавыполнениеПлана)+ "р.", 	, ЦветКрасный));
	
	Элементы.ДекорацияНадписьОбщийПлан2.Заголовок = Новый ФорматированнаяСтрока(МассЧастей);
	
	ВыводДиаграммыПоПланам_2(СтруктураОбщийПлан);
	ВыводДиаграммыПоПланамЗаСегодня_2(СтруктураОбщийПлан);	
	
	//Премия за проценты. 

	Если НЕ ЗначениеЗаполнено(Продавец) тогда
		СтруктураПремииЗаПроцент	=	новый Структура;
		СтруктураПремииЗаПроцент.Вставить("СуммаПродажОсновной",			0);
		СтруктураПремииЗаПроцент.Вставить("ПремияОсновной",					0);   
		СтруктураПремииЗаПроцент.Вставить("ПроцентПремии",					0);   
		
		СтруктураПремииЗаПроцент.Вставить("ПроцентПремииСувениры",			0);       
		СтруктураПремииЗаПроцент.Вставить("ПремияОсновнойСувениры",			0); 
	иначе
		Если ОкладЗамена>0 или ОкладМобильный>0 тогда 
			СтруктураПремииЗаПроцент	=	ПолучитьДанныеПоПремиямЗаПроцент_2(Продавец, 1, ТекущаяДата());
		иначе
			СтруктураПремииЗаПроцент	=	ПолучитьДанныеПоПремиямЗаПроцент_2(Продавец, ПереключательМесяцДень, Период);
		КонецЕсли;
		
	КонецЕсли;
	
		
	Если СтруктураПремииЗаПроцент.ПроцентПремииСувениры >0 тогда
		МассЧастей = Новый Массив;
		
		МассЧастей.Добавить(Новый ФорматированнаяСтрока("Процент за продажи электронка: " 									,, ЦветСиний));	
		МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(СтруктураПремииЗаПроцент.ПроцентПремии)+"%."					,, ЦветКрасный));
		
		МассЧастей.Добавить(Новый ФорматированнаяСтрока("Процент за продажи сувениры: " 									,, ЦветСиний));	
		МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(СтруктураПремииЗаПроцент.ПроцентПремииСувениры)+"%."			,, ЦветКрасный));
		
		МассЧастей.Добавить(Новый ФорматированнаяСтрока(Символы.ПС + "Сумма ваших личных продаж электронка: "							,, ЦветСиний));   	
		МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(Окр(СтруктураПремииЗаПроцент.СуммаПродажОсновной,0))+ "р."	,, ЦветКрасный)); 
		
		МассЧастей.Добавить(Новый ФорматированнаяСтрока("Сумма ваших личных продаж сувениры: "										,, ЦветСиний));   	
		МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(Окр(СтруктураПремииЗаПроцент.СуммаПродажОсновнойСувениры,0))+ "р."	,, ЦветКрасный));

		
		МассЧастей.Добавить(Новый ФорматированнаяСтрока(Символы.ПС + "Сумма премии электронка: "							,, ЦветСиний));  	
		МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(Окр(СтруктураПремииЗаПроцент.ПремияОсновной,0))+ "р."		,, ЦветКрасный));
		
		
		МассЧастей.Добавить(Новый ФорматированнаяСтрока("Сумма премии сувениры: "										,, ЦветСиний));  	
		МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(Окр(СтруктураПремииЗаПроцент.ПремияОсновнойСувениры,0))+ "р."		,, ЦветКрасный));

		Элементы.ДекорацияНадписьПремияЗаПроцент2.Заголовок = Новый ФорматированнаяСтрока(МассЧастей);	
		
	иначе
		
		
		МассЧастей = Новый Массив;
		Если СтруктураПремииЗаПроцент.ПроцентПремии > 0 тогда
			МассЧастей.Добавить(Новый ФорматированнаяСтрока("Процент за продажи: " 												,, ЦветСиний));	
			МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(СтруктураПремииЗаПроцент.ПроцентПремии)+"%."					,, ЦветКрасный));
		КонецЕсли;

		МассЧастей.Добавить(Новый ФорматированнаяСтрока("Сумма ваших личных продаж: "										,, ЦветСиний));   	
		МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(Окр(СтруктураПремииЗаПроцент.СуммаПродажОсновной,0))+ "р."	,, ЦветКрасный));
		МассЧастей.Добавить(Новый ФорматированнаяСтрока(Символы.ПС + "Сумма премии: "										,, ЦветСиний));  	
		МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(Окр(СтруктураПремииЗаПроцент.ПремияОсновной,0))+ "р."		,, ЦветКрасный));

		Элементы.ДекорацияНадписьПремияЗаПроцент2.Заголовок = Новый ФорматированнаяСтрока(МассЧастей);	
			
	КонецЕсли;

	
	МассЧастей.Добавить(Новый ФорматированнаяСтрока("Сумма ваших личных продаж: "										,, ЦветСиний));   	
	МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(Окр(СтруктураПремииЗаПроцент.СуммаПродажОсновной,0))+ "р."	,, ЦветКрасный));
	МассЧастей.Добавить(Новый ФорматированнаяСтрока(Символы.ПС + "Сумма премии: "										,, ЦветСиний));  	
	МассЧастей.Добавить(Новый ФорматированнаяСтрока(Строка(Окр(СтруктураПремииЗаПроцент.ПремияОсновной,0))+ "р."		,, ЦветКрасный));
	
	Элементы.ДекорацияНадписьПремияЗаПроцент2.Заголовок = Новый ФорматированнаяСтрока(МассЧастей);	
	
	ПремиязаПроцент			=	СтруктураПремииЗаПроцент.ПремияОсновной;  
	ПремиязаПроцентСувениры	=	СтруктураПремииЗаПроцент.ПремияОсновнойСувениры;  	
	
	
	ВыводДиаграммыПоВысокомаржинальномуТовару();
	
	//Итоги
	Итог	=	СуммаОклада + ЛичнаяПремияЗаВыполнениеПлана + ПремиязаПроцент + ПремиязаПроцентСувениры;
	Всего	=	Итог + ИтогоПремииФокус; 
	//Всего	=	Итог + ИтогоЗППремииВычеты; 
	
	Если ИтогоЗПЗамена> 0 тогда
		Всего	=	Всего + ИтогоЗПЗамена; 
		
		Элементы.ДекорацияИтог2.Заголовок	=	"Итого оклад + премии: " + Итог  			+" рублей."+Символы.ПС+
											"Итого за фокус. группы: "   + ИтогоПремииФокус	+" рублей."+Символы.ПС+
											"Итого за замены: " 		 + ИтогоЗПЗамена	+" рублей."+Символы.ПС+
											//"Итого за премии/вычеты: " 	 + ИтогоЗППремииВычеты	+" рублей."+Символы.ПС+
											"Всего: "+ Всего + " рублей." ;
	
	иначе
		Элементы.ДекорацияИтог2.Заголовок	=	"Итого оклад + премии: " + Итог  			+" рублей."+Символы.ПС+
											"Итого за фокус. группы: "   + ИтогоПремииФокус	+" рублей."+Символы.ПС+
											//"Итого за премии/вычеты: " 	 + ИтогоЗППремииВычеты	+" рублей."+Символы.ПС+
											"Всего: "+ Всего + " рублей." ;
	КонецЕсли;
	
		
	
КонецПроцедуры

//Функции получения данных
&НаСервере
Функция ПолучитьДанныеПоОбщемуПлану_2(Период)
	СуммаПлана				=	0;
	СуммаПремияЗаОбщий		=	0;
	
	ТЗ_ПремияМоглаБыть	=	Новый ТаблицаЗначений;
	ТЗ_ПремияМоглаБыть.Колонки.Добавить("СуммаПремии");
	ТЗ_ПремияМоглаБыть.Колонки.Добавить("НужноВыполнитьПланНа");

	ТЗ_Интервалы = Новый ТаблицаЗначений();
	ТЗ_Интервалы.Колонки.Добавить("ПроцентС");
	ТЗ_Интервалы.Колонки.Добавить("ПроцентДо");
	
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ТБКПланыМагазинаПоМесяцам.Период КАК Период,
	      	 	             |	ТБКПланыМагазинаПоМесяцам.ТипПлана КАК ТипПлана,
	      	 	             |	ТБКПланыМагазинаПоМесяцам.Сумма КАК Сумма
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКПланыМагазинаПоМесяцам КАК ТБКПланыМагазинаПоМесяцам
	      	 	             |ГДЕ
	      	 	             |	ТБКПланыМагазинаПоМесяцам.Период МЕЖДУ &ПериодН И &ПериодК
	      	 	             |	И ТБКПланыМагазинаПоМесяцам.ТипПлана = &ТипПлана
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	ТипПлана");

	Запрос.УстановитьПараметр("ПериодН", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ПериодК", КонецМесяца(Период));
	
    // Толстоухов 22.09.2025 ++
	ТипПлана = ?(НачалоМесяца(Период) >= Дата('2025.10.01'), "ПланВМТ", "План ТО");
	Запрос.УстановитьПараметр("ТипПлана", ТипПлана);  
    // Толстоухов 22.09.2025 --
	
	
	Рез = запрос.Выполнить().Выбрать(); 
	Если Рез.Следующий()  Тогда
		СуммаПлана		=	Рез.Сумма;	
	КонецЕсли;

	Если ТипПлана = "План ТО" тогда
		СуммаФакт			=	ПолучитьСуммуФактПоТипуПлана("План ТО");
	иначе
		СуммаФакт = ПолучитьДанныеСуммаФакт_ВМТ(); // Толстоухов 22.09.2025 ++
	КонецЕсли;


	ПроцентВыполнения	=	0;
	
	Если СуммаПлана>0 тогда
		ПроцентВыполнения	=	Окр((СуммаФакт/СуммаПлана)*100,2);		
	КонецЕсли;
	
	Запрос	=	Новый запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	ТБКОкладыПремииИПроцентыНоваяМотивация.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Справочник.ТБКОкладыПремииИПроцентыНоваяМотивация КАК ТБКОкладыПремииИПроцентыНоваяМотивация
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	ТБКОкладыПремииИПроцентыНоваяМотивация.Период УБЫВ");
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() тогда	
		Для каждого Строка Из Рез.Ссылка.Проценты Цикл
			
			Если не (Строка.ПроцентС = 0 и 	Строка.ПроцентДо = 0) тогда
				НовСтрока_Инт	=	ТЗ_Интервалы.Добавить();
				НовСтрока_Инт.ПроцентС	=	Строка.ПроцентС;
				НовСтрока_Инт.ПроцентДо	=	Строка.ПроцентДо;
			КонецЕсли;
			
			
			Если Строка.ПроцентС = 0 и 	Строка.ПроцентДо = 0 тогда
				СуммаПремияЗаОбщий	=	Строка.СуммаПремии;
				
			иначеЕсли ПроцентВыполнения > Строка.ПроцентС тогда
				СуммаПремияЗаОбщий	=	Строка.СуммаПремии;
				
			Иначе
				НовСтрока	=	ТЗ_ПремияМоглаБыть.Добавить();	
				НовСтрока.СуммаПремии			=	Строка.СуммаПремии;
				НовСтрока.НужноВыполнитьПланНа	=	Строка.ПроцентС;
			КонецЕсли;	
		КонецЦикла; 
	КонецЕсли;
		
	Струк	=	новый Структура;
	Струк.Вставить("СуммаПлана",			Окр(СуммаПлана,0)); 
	Струк.Вставить("СуммаФакт",				Окр(СуммаФакт,0));
	Струк.Вставить("ПроцентВыполнения",		Окр(ПроцентВыполнения,2));
	Струк.Вставить("СуммаПремияЗаОбщий",	Окр(СуммаПремияЗаОбщий,0));
	Струк.Вставить("ТЗ_ПремияМоглаБыть",	ТЗ_ПремияМоглаБыть);
	Струк.Вставить("ТЗ_Интервалы",			ТЗ_Интервалы);
	
	Возврат Струк;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоПремиямЗаПроцент_2(Продавец_, ПереключательМесяцДень, Период)
		//Исключения
	НоменклатураИсключения	=	Новый СписокЗначений;
	запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	ТБКОкладыПремииИПроцентыНоваяМотивация.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Справочник.ТБКОкладыПремииИПроцентыНоваяМотивация КАК ТБКОкладыПремииИПроцентыНоваяМотивация
	      	 	             |ГДЕ
	      	 	             |	ТБКОкладыПремииИПроцентыНоваяМотивация.Период <= &Период
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	ТБКОкладыПремииИПроцентыНоваяМотивация.Период УБЫВ"); 
	Запрос.УстановитьПараметр("Период", Период);
	
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() цикл
		Для каждого Строка Из Рез.Ссылка.ГруппыИсключений Цикл
			НоменклатураИсключения.Добавить(Строка.Номенклатура);	
		КонецЦикла; 
	КонецЦикла; 
	
	
	//Процент премии
	ПроцентПремии 					=	0;
	ПроцентПремииСувениры			=	0;
	
	запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	ТБКОкладыПремииИПроцентыНоваяМотивация.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Справочник.ТБКОкладыПремииИПроцентыНоваяМотивация КАК ТБКОкладыПремииИПроцентыНоваяМотивация
	      	 	             |ГДЕ
	      	 	             |	ТБКОкладыПремииИПроцентыНоваяМотивация.Период <= &Период
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	ТБКОкладыПремииИПроцентыНоваяМотивация.Период УБЫВ");   
	Запрос.УстановитьПараметр("Период", Период);

	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() цикл
		Для каждого Строка Из Рез.Ссылка.Проценты Цикл
			Если не (Строка.ПроцентС = 0 и 	Строка.ПроцентДо = 0) тогда
				
				ПроцентПремии				=	Строка.ПроцентПремии; 
				ПроцентПремииСувениры		=	Строка.ПроцентПремииСувениры;
				Прервать;
				
			КонецЕсли;		
		КонецЦикла; 
	КонецЦикла; 
	

	
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	НАЧАЛОПЕРИОДА(ТБКСменыСотрудников.КассоваяСмена.Дата, ДЕНЬ) КАК День,
	      	 	             |	МАКСИМУМ(ТБКСменыСотрудников.ВремяСмены) КАК ВремяСмены,
	      	 	             |	ТБКСменыСотрудников.Продавец КАК Продавец
	      	 	             |ПОМЕСТИТЬ ОбщаяПоДням
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКСменыСотрудников КАК ТБКСменыСотрудников
	      	 	             |ГДЕ
	      	 	             |	ТБКСменыСотрудников.КассоваяСмена.Дата МЕЖДУ &ДатаНач И &ДатаКон
	      	 	             |
	      	 	             |СГРУППИРОВАТЬ ПО
	      	 	             |	НАЧАЛОПЕРИОДА(ТБКСменыСотрудников.КассоваяСмена.Дата, ДЕНЬ),
	      	 	             |	ТБКСменыСотрудников.Продавец
	      	 	             |;
	      	 	             |
	      	 	             |////////////////////////////////////////////////////////////////////////////////
	      	 	             |ВЫБРАТЬ
	      	 	             |	ОбщаяПоДням.День КАК День,
	      	 	             |	СУММА(ОбщаяПоДням.ВремяСмены) КАК ВсегоЧасовВДень
	      	 	             |ПОМЕСТИТЬ ВсегоЧасовПоДням
	      	 	             |ИЗ
	      	 	             |	ОбщаяПоДням КАК ОбщаяПоДням
	      	 	             |
	      	 	             |СГРУППИРОВАТЬ ПО
	      	 	             |	ОбщаяПоДням.День
	      	 	             |;
	      	 	             |
	      	 	             |////////////////////////////////////////////////////////////////////////////////
	      	 	             |ВЫБРАТЬ
	      	 	             |	НАЧАЛОПЕРИОДА(ТБКСменыСотрудников.КассоваяСмена.Дата, ДЕНЬ) КАК День,
	      	 	             |	ТБКСменыСотрудников.Продавец КАК Продавец,
	      	 	             |	МАКСИМУМ(ТБКСменыСотрудников.ВремяСмены) КАК ВремяСмены
	      	 	             |ПОМЕСТИТЬ ДниЭтогоПродавца
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКСменыСотрудников КАК ТБКСменыСотрудников
	      	 	             |ГДЕ
	      	 	             |	ТБКСменыСотрудников.КассоваяСмена.Дата МЕЖДУ &ДатаНач И &ДатаКон
	      	 	             |	И ТБКСменыСотрудников.Продавец = &Продавец
	      	 	             |	И НЕ ТБКСменыСотрудников.ПродавецНаЗамену
	      	 	             |
	      	 	             |СГРУППИРОВАТЬ ПО
	      	 	             |	НАЧАЛОПЕРИОДА(ТБКСменыСотрудников.КассоваяСмена.Дата, ДЕНЬ),
	      	 	             |	ТБКСменыСотрудников.Продавец
	      	 	             |;
	      	 	             |
	      	 	             |////////////////////////////////////////////////////////////////////////////////
	      	 	             |ВЫБРАТЬ
	      	 	             |	ЕСТЬNULL(СУММА(ВЫБОР
	      	 	             |				КОГДА ЧекККМТовары.Ссылка.ВидОперации = &ВидПродажа
	      	 	             |					ТОГДА ЕСТЬNULL(ЧекККМТовары.Сумма, 0)
	      	 	             |				ИНАЧЕ ЕСТЬNULL(-ЧекККМТовары.Сумма, 0)
	      	 	             |			КОНЕЦ), 0) КАК СуммаЧеки,
	      	 	             |	НАЧАЛОПЕРИОДА(ЧекККМТовары.Ссылка.Дата, ДЕНЬ) КАК День
	      	 	             |ПОМЕСТИТЬ ПродажиПоДням
	      	 	             |ИЗ
	      	 	             |	Документ.ЧекККМ.Товары КАК ЧекККМТовары,
	      	 	             |	ДниЭтогоПродавца КАК ДниЭтогоПродавца
	      	 	             |ГДЕ
	      	 	             |	ЧекККМТовары.Ссылка.Проведен
	      	 	             |	И ЧекККМТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	      	 	             |	И (ЧекККМТовары.Ссылка.СтатусЧекаККМ = &СтатусЧекаККМ
	      	 	             |			ИЛИ ЧекККМТовары.Ссылка.СтатусЧекаККМ = &СтатусЧекаККМ1)
	      	 	             |	И НЕ ЧекККМТовары.Номенклатура В ИЕРАРХИИ (&НоменклатураИсключения)
	      	 	             |	И НАЧАЛОПЕРИОДА(ЧекККМТовары.Ссылка.Дата, ДЕНЬ) В (ДниЭтогоПродавца.День)
	      	 	             |	И НЕ(ЧекККМТовары.Ссылка.Комментарий ПОДОБНО &Комментарий
	      	 	             |				ИЛИ ЧекККМТовары.Ссылка.Комментарий ПОДОБНО &Комментарий1)
	      	 	             |	И НЕ ЧекККМТовары.Номенклатура В ИЕРАРХИИ (&НоменклатураСувениры)
	      	 	             |
	      	 	             |СГРУППИРОВАТЬ ПО
	      	 	             |	НАЧАЛОПЕРИОДА(ЧекККМТовары.Ссылка.Дата, ДЕНЬ)
	      	 	             |;
	      	 	             |
	      	 	             |////////////////////////////////////////////////////////////////////////////////
	      	 	             |ВЫБРАТЬ
	      	 	             |	ДниЭтогоПродавца.День КАК День,
	      	 	             |	ДниЭтогоПродавца.Продавец КАК Продавец,
	      	 	             |	ДниЭтогоПродавца.ВремяСмены КАК ВремяСмены,
	      	 	             |	ВсегоЧасовПоДням.ВсегоЧасовВДень КАК ВсегоЧасовВДень,
	      	 	             |	ВЫБОР
	      	 	             |		КОГДА ВсегоЧасовПоДням.ВсегоЧасовВДень > 0
	      	 	             |			ТОГДА ДниЭтогоПродавца.ВремяСмены / ВсегоЧасовПоДням.ВсегоЧасовВДень
	      	 	             |		ИНАЧЕ 0
	      	 	             |	КОНЕЦ КАК Коэф
	      	 	             |ПОМЕСТИТЬ ДниСКоэффициентом
	      	 	             |ИЗ
	      	 	             |	ДниЭтогоПродавца КАК ДниЭтогоПродавца
	      	 	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсегоЧасовПоДням КАК ВсегоЧасовПоДням
	      	 	             |		ПО ДниЭтогоПродавца.День = ВсегоЧасовПоДням.День
	      	 	             |;
	      	 	             |
	      	 	             |////////////////////////////////////////////////////////////////////////////////
	      	 	             |ВЫБРАТЬ
	      	 	             |	СУММА(ЕСТЬNULL(ПродажиПоДням.СуммаЧеки * ДниСКоэффициентом.Коэф, 0)) КАК СуммаПродажПродавца,
	      	 	             |	ДниСКоэффициентом.День КАК День
	      	 	             |ИЗ
	      	 	             |	ДниСКоэффициентом КАК ДниСКоэффициентом
	      	 	             |		ЛЕВОЕ СОЕДИНЕНИЕ ПродажиПоДням КАК ПродажиПоДням
	      	 	             |		ПО ДниСКоэффициентом.День = ПродажиПоДням.День
	      	 	             |
	      	 	             |СГРУППИРОВАТЬ ПО
	      	 	             |	ДниСКоэффициентом.День");
	
	Если ПроцентПремииСувениры > 0 тогда
		Запрос.УстановитьПараметр("НоменклатураСувениры",Справочники.Номенклатура.НайтиПоКоду("00048218449") ); //папка сувенирная продукция  
		
		ЗапросСувениры	=	Новый Запрос();
		ЗапросСувениры.Текст	=	Запрос.Текст;
		ЗапросСувениры.Текст	=	СтрЗаменить(ЗапросСувениры.Текст, "И НЕ ЧекККМТовары.Номенклатура В ИЕРАРХИИ (&НоменклатураСувениры)", "И ЧекККМТовары.Номенклатура В ИЕРАРХИИ (&НоменклатураСувениры)");	

	иначе
		Запрос.Текст	=	СтрЗаменить(Запрос.Текст, "И НЕ ЧекККМТовары.Номенклатура В ИЕРАРХИИ (&НоменклатураСувениры)", "");	
	КонецЕсли;
		
	
	Если ПереключательМесяцДень = 0 тогда	
		Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Период));
		Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(Период));
	иначе
		Запрос.УстановитьПараметр("ДатаНач",НачалоДня(Период));
		Запрос.УстановитьПараметр("ДатаКон",КонецДня(Период));  	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Продавец",Продавец_);  	
	Запрос.УстановитьПараметр("НоменклатураИсключения",НоменклатураИсключения.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Продавец",Продавец_);
	Запрос.УстановитьПараметр("СтатусЧекаККМ",Перечисления.СтатусыЧековККМ.Пробитый);
	Запрос.УстановитьПараметр("СтатусЧекаККМ1",Перечисления.СтатусыЧековККМ.Архивный);
	Запрос.УстановитьПараметр("ВидПродажа",Перечисления.ВидыОперацийЧекККМ.Продажа);
	Запрос.УстановитьПараметр("Комментарий", "Чек н.ф.");
	Запрос.УстановитьПараметр("Комментарий1", "Добавлен в ООРП");
	
	Итог	=	Запрос.Выполнить().Выгрузить();
	Итог.Колонки.Добавить("ПремиязаПроцент");  
	
	
	Если ПроцентПремииСувениры > 0 тогда
		Запрос.УстановитьПараметр("НоменклатураСувениры",Справочники.Номенклатура.НайтиПоКоду("00048218449") ); //папка сувенирная продукция  
		
		ЗапросСувениры	= Запрос;
		ЗапросСувениры.Текст	=	СтрЗаменить(ЗапросСувениры.Текст, "И НЕ ЧекККМТовары.Номенклатура В ИЕРАРХИИ (&НоменклатураСувениры)", "И ЧекККМТовары.Номенклатура В ИЕРАРХИИ (&НоменклатураСувениры)");	
		
		ИтогСувениры			=	ЗапросСувениры.Выполнить().Выгрузить();
	иначе
		Запрос.Текст	=	СтрЗаменить(Запрос.Текст, "И НЕ ЧекККМТовары.Номенклатура В ИЕРАРХИИ (&НоменклатураСувениры)", "");	
	КонецЕсли;

	
	ПремияОсновной			=	0;
	СуммаПродажОсновной		=	0;

	ПремияОсновнойСувениры			=	0;
	СуммаПродажОсновнойСувениры		=	0;

	//УЧЕТ по дням
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ПроцентыПремийПоДням.День КАК День,
	      	 	             |	ТБК_ПроцентыПремийПоДням.Процент КАК Процент
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_ПроцентыПремийПоДням КАК ТБК_ПроцентыПремийПоДням
	      	 	             |ГДЕ
	      	 	             |	ТБК_ПроцентыПремийПоДням.День МЕЖДУ &ДатаНач И &ДатаКон");
	Если ПереключательМесяцДень = 0 тогда	
		Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Период));
		Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(Период));
	иначе
		Запрос.УстановитьПараметр("ДатаНач",НачалоДня(Период));
		Запрос.УстановитьПараметр("ДатаКон",КонецДня(Период));  	
	КонецЕсли;
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() = 0 тогда
		Итог.Свернуть("","СуммаПродажПродавца");
		
		Для каждого Строка из Итог цикл 			
			ПремияОсновной				=	Окр((Строка.СуммаПродажПродавца/100)*ПроцентПремии,0);
			СуммаПродажОсновной			=	Строка.СуммаПродажПродавца; 		
		КонецЦикла;
		
		Если ПроцентПремииСувениры > 0 тогда
			ИтогСувениры.Свернуть("","СуммаПродажПродавца");
			
			Для каждого Строка из ИтогСувениры цикл 			
				ПремияОсновнойСувениры				=	Окр((Строка.СуммаПродажПродавца/100)*ПроцентПремииСувениры,0);
				СуммаПродажОсновнойСувениры			=	Строка.СуммаПродажПродавца; 		
			КонецЦикла;      
			
		КонецЕсли;	

	иначе
		
		Для каждого Строка из Итог цикл 	
			СтрокаПоДням	=	Рез.Найти(Строка.День);
			
			Если СтрокаПоДням <> Неопределено тогда
				ПремияОсновной				=	ПремияОсновной + Окр((Строка.СуммаПродажПродавца/100) * СтрокаПоДням.Процент,0);
			иначе 			
				ПремияОсновной				=	ПремияОсновной + Окр((Строка.СуммаПродажПродавца/100) * ПроцентПремии,0);
			КонецЕсли;
			
			СуммаПродажОсновной			=	СуммаПродажОсновной + Строка.СуммаПродажПродавца; 

		КонецЦикла; 
		
		ПроцентПремии = 0;   //если есть проценты по дням, тогда НЕ выводим процент, чтобы не было вопросов почему не сходится
	КонецЕсли; 	
	//   
			
	Струк	=	новый Структура;           	
	Струк.Вставить("СуммаПродажОсновной",			СуммаПродажОсновной);
	Струк.Вставить("ПремияОсновной",				ПремияОсновной);
	Струк.Вставить("ПроцентПремии",					ПроцентПремии);
	
	Если ПроцентПремииСувениры > 0 тогда
		Струк.Вставить("СуммаПродажОсновнойСувениры",			СуммаПродажОсновнойСувениры);
		Струк.Вставить("ПремияОсновнойСувениры",				ПремияОсновнойСувениры);
		Струк.Вставить("ПроцентПремииСувениры",					ПроцентПремииСувениры);  
	иначе
		Струк.Вставить("СуммаПродажОсновнойСувениры",			0);
		Струк.Вставить("ПремияОсновнойСувениры",				0);
		Струк.Вставить("ПроцентПремииСувениры",					0);  
	КонецЕсли;

	Возврат Струк;		
КонецФункции

Процедура ВыводДиаграммыПоПланам_2(СтруктураОбщийПлан);
	//1 СПИДОМЕТР
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Диаграмма"));
	ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов); 	
	
	НазваниеДиаграммы	= "ПланДиаграмма";
	НДиаг1         		= Новый РеквизитФормы(НазваниеДиаграммы, ДопустимыеТипы);
	НДиаг1.Заголовок	= "Выполнение магазина %";
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НДиаг1);  	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);  

	Диаг 						= ЭтаФорма.Элементы.Добавить(НазваниеДиаграммы, Тип("ПолеФормы"), Элементы.ГруппаДиаграммыПоМагазину_Общая);		
	Диаг.Вид					= ВидПоляФормы.ПолеДиаграммы; 
	Диаг.ПутьКДанным			= НазваниеДиаграммы;
	Диаг.ЦветТекстаЗаголовка	= WebЦвета.Синий;

	НДиаг1	=	ЭтаФорма[НазваниеДиаграммы];
	НДиаг1.Серии.Добавить("Факт");
	НДиаг1.ТипДиаграммы			=	ТипДиаграммы.Измерительная;
	//НДиаг1.ТипДиаграммы			=	ТипДиаграммы.КольцеваяОбъемная;


	// Создать полосы.
	Ном = 1;
	
	Для каждого Строка из СтруктураОбщийПлан.ТЗ_Интервалы цикл 
		Если Строка.ПроцентС = 0 тогда
			Полосы = НДиаг1.ПолосыИзмерительнойДиаграммы;
			НоваяПолоса = Полосы.Добавить();
			НоваяПолоса.Начало 		= 0;
			НоваяПолоса.Конец  		= Строка.ПроцентДо;
			НоваяПолоса.ЦветФона 	= WebЦвета.Красный;			
			Продолжить;
		КонецЕсли;
		
		Если Строка.ПроцентДо = 0 тогда
			Полосы = НДиаг1.ПолосыИзмерительнойДиаграммы;
			НоваяПолоса = Полосы.Добавить();
			НоваяПолоса.Начало = Строка.ПроцентС;
			НоваяПолоса.Конец  = 150;
			//НоваяПолоса.ЦветФона = Новый Цвет(148, 225, 109); 
			НоваяПолоса.ЦветФона = WebЦвета.ЗеленаяЛужайка;
			Продолжить;
		КонецЕсли;
		
		
		Полосы = НДиаг1.ПолосыИзмерительнойДиаграммы;
		НоваяПолоса = Полосы.Добавить();
		НоваяПолоса.Начало = Строка.ПроцентС;
		НоваяПолоса.Конец  = Строка.ПроцентДо;
		Если Ном = 1 тогда
			НоваяПолоса.ЦветФона = WebЦвета.БледноКрасноФиолетовый;
		ИначеЕсли  Ном = 2 тогда 
			НоваяПолоса.ЦветФона = WebЦвета.Желтый;
		КонецЕсли;
		
		Ном	=	Ном+1;
	КонецЦикла;
	//

	ТочкаФакт 	 	 			= НДиаг1.УстановитьТочку("Факт");	
	ТочкаФакт.ПриоритетЦвета	= Истина;  	
	ТочкаФакт.Цвет 				= WebЦвета.КоролевскиГолубой; 	
	
	НДиаг1.УстановитьЗначение(ТочкаФакт
		, НДиаг1.Серии[0]
		, СтруктураОбщийПлан.ПроцентВыполнения
		, Неопределено
		, "Факт: " + СтруктураОбщийПлан.ПроцентВыполнения);   		
		
		
	НДиаг1.ОтображатьЛегенду		= Ложь;	 		
	НДиаг1.ВидПодписей				=	ВидПодписейКДиаграмме.Значение;
	НДиаг1.АвтоМаксимальноеЗначение	=	Ложь;
	НДиаг1.АвтоМинимальноеЗначение	=	Ложь;
	НДиаг1.МинимальноеЗначение		=	0; 	
	НДиаг1.МаксимальноеЗначение		=	150;
	НДиаг1.ОтображениеЗначенияИзмерительнойДиаграммы	=	ОтображениеЗначенияИзмерительнойДиаграммы.Сектор;	
	НДиаг1.Рамка										=	новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	НДиаг1.ОсьЗначений.СпособОпределенияМинимальногоЗначения	=	 СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначение;

	Диаг.Высота						=	8;
	Диаг.Ширина						= 	40;
	Диаг.ВертикальноеПоложение		=	ВертикальноеПоложениеЭлемента.Верх;
	Диаг.АвтоМаксимальнаяВысота		=	Ложь;
	
	//2Столбики
	ВыводДиаграммыПоПремиям_2(СтруктураОбщийПлан);
КонецПроцедуры

Процедура ВыводДиаграммыПоПремиям_2(СтруктураОбщийПлан);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Диаграмма"));
	ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов); 	
	
	НазваниеДиаграммы	= "ПланПремияМагазина";
	НДиаг1         		= Новый РеквизитФормы(НазваниеДиаграммы, ДопустимыеТипы);
	НДиаг1.Заголовок	= "Премия магазина";
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НДиаг1);  	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);  

	Диаг 						= ЭтаФорма.Элементы.Добавить(НазваниеДиаграммы, Тип("ПолеФормы"), Элементы.ГруппаДиаграммыПоМагазину_Общая);		
	Диаг.Вид					= ВидПоляФормы.ПолеДиаграммы; 
	Диаг.ПутьКДанным			= НазваниеДиаграммы;
	Диаг.ЦветТекстаЗаголовка	= WebЦвета.Синий;

	НДиаг1	=	ЭтаФорма[НазваниеДиаграммы];
	НДиаг1.Серии.Добавить("ТекущаяПремия");

	
	ТочкаТекущаяПремия 	 	= НДиаг1.УстановитьТочку("Тек. премия");
	
	МаксимальноеЗначение	=	СтруктураОбщийПлан.СуммаПремияЗаОбщий;
	
	Для каждого Строка из СтруктураОбщийПлан.ТЗ_ПремияМоглаБыть цикл
		ТочкаПремия_МоглаБыть 	 	= НДиаг1.УстановитьТочку("Премия могла быть, при выполнении плана на " + Строка.НужноВыполнитьПланНа+"%");
		ТочкаПремия_МоглаБыть.Текст	=	"Премия при вып. на " + Строка.НужноВыполнитьПланНа+"%";	
		
		НДиаг1.УстановитьЗначение(ТочкаПремия_МоглаБыть
			, НДиаг1.Серии[0]
			, Строка.СуммаПремии
			, Неопределено
			, "Премия могла быть: " + Строка.СуммаПремии+" При выполнении плана на " + Строка.НужноВыполнитьПланНа+"%");
				
		ТочкаПремия_МоглаБыть.ПриоритетЦвета	 = Истина;   		
		ТочкаПремия_МоглаБыть.Цвет 				 = WebЦвета.БледноКрасноФиолетовый; 	
		
		МаксимальноеЗначение	=	 Строка.СуммаПремии;
	КонецЦикла;
	
		
	
	ТочкаТекущаяПремия.ПриоритетЦвета	= Истина;  	
	ТочкаТекущаяПремия.Цвет 			= WebЦвета.КоролевскиГолубой; 	
	
	НДиаг1.УстановитьЗначение(ТочкаТекущаяПремия
		, НДиаг1.Серии[0]
		, СтруктураОбщийПлан.СуммаПремияЗаОбщий
		, Неопределено
		, "Текущая премия " + СтруктураОбщийПлан.СуммаПремияЗаОбщий);   		
		
		
		
	НДиаг1.ОтображатьЛегенду		= Ложь;	 		
	НДиаг1.ВидПодписей				=	ВидПодписейКДиаграмме.Значение;
	НДиаг1.АвтоМаксимальноеЗначение	=	Ложь;
	НДиаг1.АвтоМинимальноеЗначение	=	Ложь;
	НДиаг1.МинимальноеЗначение		=	0; 	
	НДиаг1.МаксимальноеЗначение		=	МаксимальноеЗначение*1.2; 	
	НДиаг1.ОсьЗначений.СпособОпределенияМинимальногоЗначения	=	 СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначение;
	
	Диаг.Высота						=	8;
	Диаг.Ширина						= 	70;
КонецПроцедуры

Процедура ВыводДиаграммыПоПланамЗаСегодня_2(СтруктураОбщийПлан);
	//1 СПИДОМЕТР
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Диаграмма"));
	ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов); 	
	
	НазваниеДиаграммы	= "ПланДиаграммаСегодня";
	НДиаг1         		= Новый РеквизитФормы(НазваниеДиаграммы, ДопустимыеТипы);
	НДиаг1.Заголовок	= "Выполнение плана за сегодняшний день";
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НДиаг1);  	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);  

	Диаг 						= ЭтаФорма.Элементы.Добавить(НазваниеДиаграммы, Тип("ПолеФормы"), Элементы.ГруппаДиаграммыПоМагазину_Сегодня);		
	Диаг.Вид					= ВидПоляФормы.ПолеДиаграммы; 
	Диаг.ПутьКДанным			= НазваниеДиаграммы;
	Диаг.ЦветТекстаЗаголовка	= WebЦвета.Синий;

	НДиаг1	=	ЭтаФорма[НазваниеДиаграммы];
	НДиаг1.Серии.Добавить("Факт");
	НДиаг1.ТипДиаграммы			=	ТипДиаграммы.Измерительная;
	//НДиаг1.ТипДиаграммы			=	ТипДиаграммы.КольцеваяОбъемная;

	КоличествоДней	=	Число(Сред(КонецМесяца(ТекущаяДата()), 1, 2));
	ПланСегодня		=	Окр(СтруктураОбщийПлан.СуммаПлана /  КоличествоДней,0);
	//ПланСегодня		=	Строка(Окр(СтруктураОбщийПлан.СуммаПлана /  КоличествоДней,0));
	//ПланСегодня		=	Число( Сред(ПланСегодня,1, СтрДлина(ПланСегодня) - 2) + "00") ;

	// Создать четыре полосы.
	Полосы = НДиаг1.ПолосыИзмерительнойДиаграммы;
	НоваяПолоса = Полосы.Добавить();
	НоваяПолоса.Начало = 0;
	НоваяПолоса.Конец = (ПланСегодня/100)*25;
	НоваяПолоса.ЦветФона = WebЦвета.Красный;

	НоваяПолоса = Полосы.Добавить();
	НоваяПолоса.Начало = (ПланСегодня/100)*25;
	НоваяПолоса.Конец = (ПланСегодня/100)*50;
	НоваяПолоса.ЦветФона = WebЦвета.БледноКрасноФиолетовый;

	НоваяПолоса = Полосы.Добавить();
	НоваяПолоса.Начало = (ПланСегодня/100)*50;
	НоваяПолоса.Конец = (ПланСегодня/100)*75;
	//НоваяПолоса.ЦветФона = Новый Цвет(225, 221, 19);
	НоваяПолоса.ЦветФона = WebЦвета.Желтый;
	
	НоваяПолоса = Полосы.Добавить();
	НоваяПолоса.Начало = (ПланСегодня/100)*75;
	НоваяПолоса.Конец = ПланСегодня;
	//НоваяПолоса.ЦветФона = Новый Цвет(148, 225, 109);
	НоваяПолоса.ЦветФона = WebЦвета.ЗеленаяЛужайка;
	

	Если ТекущаяДата() < Дата('2025.10.01') Тогда
		СуммаФактСегодня	=	ПолучитьСуммуФактПоТипуПлана("План ТО", ,Истина);
	Иначе
		СуммаФактСегодня	=	ПолучитьДанныеСуммаФакт_ВМТ(Истина); // Толстоухов 22.09.2025 ++
	КонецЕсли;
	
	ТочкаФакт 	 	 			= НДиаг1.УстановитьТочку("Факт");	
	ТочкаФакт.ПриоритетЦвета	= Истина;  	
	ТочкаФакт.Цвет 				= WebЦвета.КоролевскиГолубой; 	
	
	НДиаг1.УстановитьЗначение(ТочкаФакт
		, НДиаг1.Серии[0]
		, СуммаФактСегодня
		, Неопределено
		, "Факт: " + СуммаФактСегодня+" План дня: "+ПланСегодня);   		
		

	
	НДиаг1.ОтображатьЛегенду		= Ложь;	 		
	НДиаг1.ВидПодписей				=	ВидПодписейКДиаграмме.Нет;
	НДиаг1.АвтоМаксимальноеЗначение	=	Ложь;
	НДиаг1.АвтоМинимальноеЗначение	=	Ложь;
	НДиаг1.МинимальноеЗначение		=	0; 	
	НДиаг1.МаксимальноеЗначение		=	ПланСегодня;
	НДиаг1.ОтображениеЗначенияИзмерительнойДиаграммы	=	ОтображениеЗначенияИзмерительнойДиаграммы.Сектор;	
	НДиаг1.Рамка										=	новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	НДиаг1.ОсьЗначений.СпособОпределенияМинимальногоЗначения	=	 СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначение;

	Диаг.Высота						=	8;
	Диаг.Ширина						= 	40;
	Диаг.ВертикальноеПоложение		=	ВертикальноеПоложениеЭлемента.Верх;
	Диаг.АвтоМаксимальнаяВысота		=	Ложь;
КонецПроцедуры

Процедура ВыводДиаграммыПоВысокомаржинальномуТовару();    
	
	Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	ТБКПланыМагазинаПоМесяцам.Период КАК Период,
	      	 	             |	ТБКПланыМагазинаПоМесяцам.ТипПлана КАК ТипПлана,
	      	 	             |	ТБКПланыМагазинаПоМесяцам.Сумма КАК Сумма
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКПланыМагазинаПоМесяцам КАК ТБКПланыМагазинаПоМесяцам
	      	 	             |ГДЕ
	      	 	             |	ТБКПланыМагазинаПоМесяцам.ТипПлана = ""ПланВМТ""
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	Период УБЫВ");

	Рез = запрос.Выполнить().Выбрать(); 
	Если Рез.Следующий()  Тогда
		СуммаПлана_ВМТ		=	Рез.Сумма;
	иначе  
		СуммаПлана_ВМТ	=	0;
		//Элементы.ГруппаДиаграммыПоМагазину_Сегодня.РастягиватьПоГоризонтали	= Ложь;
		//Возврат
	КонецЕсли;	
	
	Если ПереключательМесяцДень <> 0 тогда	
		КолДнейВМесяце	=	День(КонецМесяца(Период));
       	СуммаПлана_ВМТ	=	окр(СуммаПлана_ВМТ / КолДнейВМесяце,0);
	КонецЕсли;
	
	
	СуммаФакт_ВМТ = ПолучитьДанныеСуммаФакт_ВМТ();  // Толстоухов 22.09.2025 ++
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Диаграмма"));
	ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов); 	
	
	НазваниеДиаграммы	= "ПланВМТ";
	НДиаг1         		= Новый РеквизитФормы(НазваниеДиаграммы, ДопустимыеТипы);
	НДиаг1.Заголовок	= "Высокомаржинальный товар";
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НДиаг1);  	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);  

	Диаг 						= ЭтаФорма.Элементы.Добавить(НазваниеДиаграммы, Тип("ПолеФормы"), Элементы.ГруппаДиаграммыПоМагазину_Сегодня);		
	Диаг.Вид					= ВидПоляФормы.ПолеДиаграммы; 
	Диаг.ПутьКДанным			= НазваниеДиаграммы;
	Диаг.ЦветТекстаЗаголовка	= WebЦвета.Синий;

	НДиаг1	=	ЭтаФорма[НазваниеДиаграммы];
	НДиаг1.Серии.Добавить("ТекущаяПремия");

	ТочкаПлан 	 	= НДиаг1.УстановитьТочку("План");	 
	
	ТочкаПлан.ПриоритетЦвета	= Истина;  	
	ТочкаПлан.Цвет 			= WebЦвета.КоролевскиГолубой; 	
	
	НДиаг1.УстановитьЗначение(ТочкаПлан
	, НДиаг1.Серии[0]
	, СуммаПлана_ВМТ
	, Неопределено
	, "План" + СуммаПлана_ВМТ);  	
	
	ТочкаФакт 	 	= НДиаг1.УстановитьТочку("Факт");	 

	ТочкаФакт.ПриоритетЦвета	= Истина;  	
	ТочкаФакт.Цвет 			= WebЦвета.БледноКрасноФиолетовый; 	
	
	НДиаг1.УстановитьЗначение(ТочкаФакт
		, НДиаг1.Серии[0]
		, СуммаФакт_ВМТ
		, Неопределено
		, "Факт" + СуммаФакт_ВМТ);  
		
		
		
	МаксимальноеЗначение	= Макс(СуммаПлана_ВМТ,СуммаФакт_ВМТ) ; 
				
	
	НДиаг1.ОтображатьЛегенду		= Ложь;	 		
	НДиаг1.ВидПодписей				=	ВидПодписейКДиаграмме.Значение;
	НДиаг1.АвтоМаксимальноеЗначение	=	Ложь;
	НДиаг1.АвтоМинимальноеЗначение	=	Ложь;
	НДиаг1.МинимальноеЗначение		=	0; 	
	НДиаг1.МаксимальноеЗначение		=	МаксимальноеЗначение*1.2; 	
	НДиаг1.ОсьЗначений.СпособОпределенияМинимальногоЗначения	=	 СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначение;
	
	Диаг.Высота						=	8;
	Диаг.Ширина						= 	70;
КонецПроцедуры

// Толстоухов 22.09.2025 ++
Функция ПолучитьДанныеСуммаФакт_ВМТ(ЗаСегодня = Ложь)
	
	НоменклатураИсключения	=	Новый СписокЗначений;
	запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	ТБКОкладыПремииИПроцентыНоваяМотивация.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Справочник.ТБКОкладыПремииИПроцентыНоваяМотивация КАК ТБКОкладыПремииИПроцентыНоваяМотивация
	      	 	             |ГДЕ
	      	 	             |	ТБКОкладыПремииИПроцентыНоваяМотивация.Период <= &Период
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	ТБКОкладыПремииИПроцентыНоваяМотивация.Период УБЫВ"); 
	Запрос.УстановитьПараметр("Период", Период);
	
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() цикл
		Для каждого Строка Из Рез.Ссылка.ГруппыИсключений Цикл
			НоменклатураИсключения.Добавить(Строка.Номенклатура);	
		КонецЦикла; 
	КонецЦикла;
	
	
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ЕСТЬNULL(СУММА(ВЫБОР
	      	 	             |				КОГДА ЧекККМТовары.Ссылка.ВидОперации = &ВидПродажа
	      	 	             |					ТОГДА ЕСТЬNULL(ЧекККМТовары.Сумма, 0)
	      	 	             |				ИНАЧЕ ЕСТЬNULL(-ЧекККМТовары.Сумма, 0)
	      	 	             |			КОНЕЦ), 0) КАК СуммаЧеки
	      	 	             |ИЗ
	      	 	             |	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	      	 	             |ГДЕ
	      	 	             |	ЧекККМТовары.Ссылка.Проведен
	      	 	             |	И ЧекККМТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	      	 	             |	И (ЧекККМТовары.Ссылка.СтатусЧекаККМ = &СтатусЧекаККМ
	      	 	             |			ИЛИ ЧекККМТовары.Ссылка.СтатусЧекаККМ = &СтатусЧекаККМ1)
	      	 	             |	И НЕ ЧекККМТовары.Номенклатура В ИЕРАРХИИ (&НоменклатураИсключения)
	      	 	             |	И НЕ(ЧекККМТовары.Ссылка.Комментарий ПОДОБНО &Комментарий
	      	 	             |				ИЛИ ЧекККМТовары.Ссылка.Комментарий ПОДОБНО &Комментарий1)");
	
	Если ПереключательМесяцДень = 0 тогда	
		Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Период));
		Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(Период));  						
	иначе
		Запрос.УстановитьПараметр("ДатаНач",НачалоДня(Период));
		Запрос.УстановитьПараметр("ДатаКон",КонецДня(Период)); 
	КонецЕсли;
	
	Если ЗаСегодня тогда
		Запрос.УстановитьПараметр("ДатаНач",НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("ДатаКон",КонецДня(ТекущаяДата())); 	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НоменклатураИсключения",НоменклатураИсключения.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("СтатусЧекаККМ",Перечисления.СтатусыЧековККМ.Пробитый);
	Запрос.УстановитьПараметр("СтатусЧекаККМ1",Перечисления.СтатусыЧековККМ.Архивный);
	Запрос.УстановитьПараметр("ВидПродажа",Перечисления.ВидыОперацийЧекККМ.Продажа);
	Запрос.УстановитьПараметр("Комментарий", "Чек н.ф.");
	Запрос.УстановитьПараметр("Комментарий1", "Добавлен в ООРП");
	
	Рез1	=	Запрос.Выполнить().Выбрать();
	
	Если Рез1.Следующий() тогда    
		СуммаФакт_ВМТ	=	Рез1.СуммаЧеки;	
	иначе    
		СуммаФакт_ВМТ = 0; 
	КонецЕсли;
	
	Возврат СуммаФакт_ВМТ;

КонецФункции	


#КонецОбласти

#область ДопФункции
&НаСервереБезКонтекста
Функция ПолучитьКоличествоСмен(Продавец, Период)
	Запрос			=	Новый Запрос("ВЫБРАТЬ
		      			 	             |	НАЧАЛОПЕРИОДА(ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Дата, ДЕНЬ) КАК Поле1,
		      			 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец КАК Продавец
		      			 	             |ПОМЕСТИТЬ ПродавцыСмены
		      			 	             |ИЗ
		      			 	             |	Документ.ТБК_ВедомостьОПродажахЗаДень.Продавцы КАК ТБК_ВедомостьОПродажахЗаДеньПродавцы
		      			 	             |ГДЕ
		      			 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Проведен
		      			 	             //|	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.ТипПродавца = &ТипПродавца
		      			 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		      			 	             |	И НЕ ТБК_ВедомостьОПродажахЗаДеньПродавцы.ПродавецНаЗамену
		      			 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец = &Продавец
		      			 	             |
		      			 	             |СГРУППИРОВАТЬ ПО
		      			 	             |	НАЧАЛОПЕРИОДА(ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Дата, ДЕНЬ),
		      			 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец
		      			 	             |;
		      			 	             |
		      			 	             |////////////////////////////////////////////////////////////////////////////////
		      			 	             |ВЫБРАТЬ
		      			 	             |	ПродавцыСмены.Продавец КАК Продавец,
		      			 	             |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродавцыСмены.Поле1) КАК КолСмен
		      			 	             |ИЗ
		      			 	             |	ПродавцыСмены КАК ПродавцыСмены
		      			 	             |
		      			 	             |СГРУППИРОВАТЬ ПО
		      			 	             |	ПродавцыСмены.Продавец");
	Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТипПродавца",Перечисления.ТБКТипыПродавцов.ОсновнойПродавец);
	Запрос.УстановитьПараметр("Продавец",Продавец);

	ПродавцыСмены	=	Запрос.Выполнить().Выбрать();
	
	КолСмен	=	0;
	Если ПродавцыСмены.Следующий() тогда
		КолСмен	=	ПродавцыСмены.КолСмен;
	КонецЕсли; 
	
	
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБКСменыСотрудников.КассоваяСмена КАК КассоваяСмена
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКСменыСотрудников КАК ТБКСменыСотрудников
	      	 	             |ГДЕ
	      	 	             |	ТБКСменыСотрудников.Продавец = &Продавец
	      	 	             |	И ТБКСменыСотрудников.КассоваяСмена.Статус = &Статус
	      	 	             |	И НЕ ТБКСменыСотрудников.ПродавецНаЗамену");
	      	 	             //|	И ТБКСменыСотрудников.ТипПродавца = &ТипПродавца");
	Запрос.УстановитьПараметр("ТипПродавца",Перечисления.ТБКТипыПродавцов.ОсновнойПродавец);
	Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыКассовойСмены.Открыта);
	Запрос.УстановитьПараметр("Продавец",Продавец);
	
	ОткрытыеСмены	=	Запрос.Выполнить().Выбрать();

	Если ОткрытыеСмены.Следующий() тогда
		КолСмен	=	КолСмен + 1;
	КонецЕсли; 

	
	Возврат КолСмен;  	
КонецФункции

&НаКлиенте
Процедура ПереключательПриИзменении(Элемент)
	//Если ВариантМотивации = 1 тогда
	//	Если Переключатель = 0 тогда
	//		ЗаполнитьВариантПлановойМотивации();	
	//	Иначе
	//		ЗаполнитьВариантПлановойМотивации_Личный();
	//	КонецЕсли; 		
	//иначеЕсли ВариантМотивации = 2 тогда
	//	Если Переключатель = 0 тогда
	//		ЗаполнитьВариантПроцентнойМотивации();	
	//	Иначе
	//		ЗаполнитьВариантПроцентнойМотивации_Личный();
	//	КонецЕсли; 
	//	
	//иначеЕсли ВариантМотивации = 3 тогда
	//	Если Переключатель = 0 тогда
	//		ЗаполнитьВариантПроцентнойМотивации();//он такой же	
	//	Иначе
	//		ЗаполнитьВариантФокуснойМотивации();
	//	КонецЕсли; 
	//	
	//иначеЕсли ВариантМотивации = 5 тогда
	//	ЗаполнитьВариантНовойМотивации();
	//	
	//иначеЕсли ВариантМотивации = 6 тогда
		ЗаполнитьВариантНовойМотивации_2();
	//КонецЕсли;
	
	
КонецПроцедуры

Процедура ВывестиТаблицу(Родитель, ТаблицаРасшифровка, ИтогоБонус, Продавец, СЧ);
	//Родитель.Заголовок				=	Строка(Продавец) + "; Кол. смен: " + КоличествоСмен + 
	//												"; Сумма премии: "+ИтогоБонус + "р.";  				
	Родитель.ОтображатьЗаголовок	=	Истина; 
			
	// добавим таблицу: сначала саму таблицу, потом колонку.
	Реквизиты = Новый Массив;

		
	Реквизиты.Добавить(Новый РеквизитФормы("ТаблицаНаФорме"+СЧ, Новый ОписаниеТипов("ТаблицаЗначений")));
	Для Каждого Ст ИЗ ТаблицаРасшифровка.Колонки Цикл
		Реквизиты.Добавить(Новый РеквизитФормы(Ст.Имя, Ст.ТипЗначения, "ТаблицаНаФорме"+СЧ,Ст.заголовок));
	КонецЦикла;

	// добавим реквизиты на форму
	ИзменитьРеквизиты(Реквизиты);

	// добавим элементы формы
	Таб = Элементы.Добавить("ТаблицаНаФорме"+СЧ, Тип("ТаблицаФормы"),Родитель);
	Таб.ПутьКДанным = "ТаблицаНаФорме"+СЧ;
	Таб.Высота		=	11;
	//Таб.Ширина	=	200;
	// запретим менять положение строк и сами строки, отключим командную панель
	Таб.ИзменятьСоставСтрок = Ложь;
	Таб.ИзменятьПорядокСтрок = Ложь;
	Таб.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;

	Для Каждого Ст ИЗ ТаблицаРасшифровка.Колонки Цикл
		Если Ст.Имя = "Заголовок" тогда Продолжить; КонецЕсли;
		
		Рек = Элементы.Добавить("Колонка" + Ст.Имя+сч, Тип("ПолеФормы"), Таб);
		Рек.Вид = ВидПоляФормы.ПолеНадписи;
		Рек.ПутьКДанным = "ТаблицаНаФорме"+СЧ + "." + Ст.Имя;
		Рек.Заголовок = Ст.заголовок;
		Если  Ст.Имя	= "ФокусГруппа" тогда
			Рек.Ширина	= 30;	
		иначе
			Рек.Ширина	= 15;
		КонецЕсли;
	КонецЦикла;

	// заполним таблицу
	ЗначениеВРеквизитФормы(ТаблицаРасшифровка, "ТаблицаНаФорме"+СЧ);
	УстановитьДействиеПриАктивизацииСтрокиНаФорме();

КонецПроцедуры

&НаСервере
Процедура УстановитьДействиеПриАктивизацииСтрокиНаФорме()
	Элементы["ТаблицаНаФорме0"].УстановитьДействие("ПриАктивизацииСтроки", "ПриАктивизацииСтрокиТаблицы");   
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииСтрокиТаблицы();
	Если Элементы["ТаблицаНаФорме0"].ТекущиеДанные <> Неопределено тогда
		Элементы.Декорация1.Заголовок	=	Элементы["ТаблицаНаФорме0"].ТекущиеДанные.Заголовок;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроставитьСписокПродавцов(Период)
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец КАК Продавец
	      	 	             |ИЗ
	      	 	             |	Документ.ТБК_ВедомостьОПродажахЗаДень.Продавцы КАК ТБК_ВедомостьОПродажахЗаДеньПродавцы
	      	 	             |ГДЕ
	      	 	             //|	ТБК_ВедомостьОПродажахЗаДеньПродавцы.ТипПродавца = &ТипПродавца
	      	 	             |	 ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	      	 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Проведен
	      	 	             |
	      	 	             |СГРУППИРОВАТЬ ПО
	      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец");  
	
	Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТекДата",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СтатусЧекаККМ",Перечисления.СтатусыЧековККМ.Пробитый);
	Запрос.УстановитьПараметр("ТипПродавца",Перечисления.ТБКТипыПродавцов.ОсновнойПродавец);
	РезВсеПродавцы	=	Запрос.Выполнить().Выгрузить();    
	РезВсеПродавцы.Свернуть("Продавец");
	
	
	Элементы.Продавец.СписокВыбора.Очистить();
	Для каждого Строка из РезВсеПродавцы цикл 	
		Элементы.Продавец.СписокВыбора.Добавить(Строка.Продавец);
	КонецЦикла;
	
	
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБКСменыСотрудников.КассоваяСмена КАК КассоваяСмена,
	      	 	             |	ТБКСменыСотрудников.Продавец КАК Продавец
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКСменыСотрудников КАК ТБКСменыСотрудников
	      	 	             |ГДЕ
	      	 	             |	ТБКСменыСотрудников.КассоваяСмена.Статус = &Статус");
	      	 	             //|	И ТБКСменыСотрудников.ТипПродавца = &ТипПродавца");
	Запрос.УстановитьПараметр("ТипПродавца",Перечисления.ТБКТипыПродавцов.ОсновнойПродавец);
	Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыКассовойСмены.Открыта);
	
	ОткрытыеСмены	=	Запрос.Выполнить().Выбрать();

	Пока ОткрытыеСмены.Следующий() цикл
		Если Элементы.Продавец.СписокВыбора.НайтиПоЗначению(ОткрытыеСмены.Продавец) = Неопределено тогда
			Элементы.Продавец.СписокВыбора.Добавить(ОткрытыеСмены.Продавец);
		КонецЕсли;
	КонецЦикла;; 


КонецФункции



Процедура УдалитьРеквизиты(флТолькоПоФокусу = Ложь)
	УдаляемыеРеквизиты = Новый Массив;
	
	
	Если флТолькоПоФокусу тогда
		Для каждого элемент из ЭтаФорма.ПолучитьРеквизиты() цикл
		    Если (Найти(элемент.Имя, "ФокусДиаграмма") или Найти(элемент.Имя, "ТаблицаНаФорме")) и не  Найти(элемент.Имя, "фл") тогда
				УдаляемыеРеквизиты.Добавить(элемент.Имя);  	
			КонецЕсли;
		КонецЦикла;  
		
	иначе
		Для каждого элемент из ЭтаФорма.ПолучитьРеквизиты() цикл
		    Если (Найти(элемент.Имя, "План") или Найти(элемент.Имя, "ТаблицаНаФорме")) и не  Найти(элемент.Имя, "фл") тогда
				УдаляемыеРеквизиты.Добавить(элемент.Имя);  	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	ЭтаФорма.ИзменитьРеквизиты(,УдаляемыеРеквизиты);    
КонецПроцедуры


&НаКлиенте
Процедура ПериодПриИзменении(Элемент)      
	//Период = НачалоМесяца(Период);
	фПостроенаПлановаяОбщая	=	Ложь;
	флПостроенаПлановаяЛичная	=	ложь;

	УдалитьРеквизиты();

	
	//		
	//Если ВариантМотивации = 1 тогда
	//	Если Переключатель = 0 тогда		
	//		ЗаполнитьВариантПлановойМотивации();
	//	иначе
	//		ЗаполнитьВариантПлановойМотивации_Личный();
	//	КонецЕсли;	
	//	
	//ИначеЕсли ВариантМотивации = 2 тогда
	//	ЗаполнитьВариантПроцентнойМотивации_Личный();
	//	
	//ИначеЕсли ВариантМотивации = 3 тогда
	//	Если Переключатель = 0 тогда
	//		ЗаполнитьВариантПроцентнойМотивации();//он такой же в общем варианте, отличается только в личном
	//	иначе
	//		ЗаполнитьВариантФокуснойМотивации();
	//	КонецЕсли;
	//	
	//ИначеЕсли ВариантМотивации = 4 тогда
	//	ЗаполнитьВариантОбщейМотивации();
	//	
	//ИначеЕсли ВариантМотивации = 5 тогда
	//	ЗаполнитьВариантНовойМотивации();
	//	
	//ИначеЕсли ВариантМотивации = 6 тогда
		ЗаполнитьВариантНовойМотивации_2();

	//КонецЕсли;
	

	
	ПроставитьСписокПродавцов(Период);	
	КоличествоСмен						=	ПолучитьКоличествоСмен(Продавец, Период);
	Элементы.КолСменСтрока.Заголовок	=	"Кол.смен: " + Строка(КоличествоСмен);  
	
	ОбновитьНадписиКоличествоЧеков();
КонецПроцедуры

&НаКлиенте
Процедура ПериодСписокПриИзменении(Элемент)
	Если ПериодСписок = "Январь" тогда Период	=	Дата(Год(текущаяДата()),1,1) КонецЕсли;
	Если ПериодСписок = "Февраль" тогда Период	=	Дата(Год(текущаяДата()),2,1) КонецЕсли;
	Если ПериодСписок = "Март" тогда Период		=	Дата(Год(текущаяДата()),3,1) КонецЕсли;
	Если ПериодСписок = "Апрель" тогда Период	=	Дата(Год(текущаяДата()),4,1) КонецЕсли;
	Если ПериодСписок = "Май" тогда Период		=	Дата(Год(текущаяДата()),5,1) КонецЕсли;
	Если ПериодСписок = "Июнь" тогда Период		=	Дата(Год(текущаяДата()),6,1) КонецЕсли;
	Если ПериодСписок = "Июль" тогда Период		=	Дата(Год(текущаяДата()),7,1) КонецЕсли;
	Если ПериодСписок = "Август" тогда Период	=	Дата(Год(текущаяДата()),8,1) КонецЕсли;
	Если ПериодСписок = "Сентябрь" тогда Период	=	Дата(Год(текущаяДата()),9,1) КонецЕсли;
	Если ПериодСписок = "Октябрь" тогда Период	=	Дата(Год(текущаяДата()),10,1) КонецЕсли;
	Если ПериодСписок = "Ноябрь" тогда Период	=	Дата(Год(текущаяДата()),11,1) КонецЕсли;
	Если ПериодСписок = "Декабрь" тогда Период	=	Дата(Год(текущаяДата()),12,1) КонецЕсли;

	ПериодПриИзменении(Неопределено);

КонецПроцедуры                                                         


&НаКлиенте
Процедура ПродавецПриИзменении(Элемент)
	КоличествоСмен	=	ПолучитьКоличествоСмен(Продавец, Период);
	Элементы.КолСменСтрока.Заголовок	=	"Кол.смен: "+Строка(КоличествоСмен);
	
	УдалитьРеквизиты();

	//Если ВариантМотивации = 1 тогда
	//	Если Переключатель = 0 тогда		
	//		ЗаполнитьВариантПлановойМотивации();
	//	иначе
	//		ЗаполнитьВариантПлановойМотивации_Личный();
	//	КонецЕсли;	
	//	
	//ИначеЕсли ВариантМотивации = 2 тогда
	//	ЗаполнитьВариантПроцентнойМотивации_Личный();
	//	
	//ИначеЕсли ВариантМотивации = 3 тогда
	//	Если Переключатель = 0 тогда
	//		ЗаполнитьВариантПроцентнойМотивации();//он такой же в общем варианте, отличается только в личном
	//	иначе
	//		ЗаполнитьВариантФокуснойМотивации();
	//	КонецЕсли;
	//	
	//ИначеЕсли ВариантМотивации = 4 тогда
	//	ЗаполнитьВариантОбщейМотивации();
	//	
	//ИначеЕсли ВариантМотивации = 5 тогда
	//	ЗаполнитьВариантНовойМотивации();   

	//ИначеЕсли ВариантМотивации = 6 тогда
		ЗаполнитьВариантНовойМотивации_2();
	//КонецЕсли; 
	
	ОбновитьНадписиКоличествоЧеков(); 
КонецПроцедуры

&НаКлиенте
Процедура ПереключательМесяцДеньПриИзменении(Элемент)
	Если ПереключательМесяцДень = 0 тогда
		ПериодСписокПриИзменении(Неопределено);
	иначе
		Период	=	ТекущаяДата();
	КонецЕсли;
	
	УдалитьРеквизиты();
	
	
	//
	//Если ВариантМотивации = 1 тогда
	//	ЗаполнитьВариантПлановойМотивации();
	//	
	//ИначеЕсли ВариантМотивации = 2 тогда
	//	Элементы.Переключатель.Видимость	= Ложь;
	//	//ЗаполнитьВариантПроцентнойМотивации();
	//	ЗаполнитьВариантПроцентнойМотивации_Личный();
	//	
	//ИначеЕсли ВариантМотивации = 3 тогда
	//	ЗаполнитьВариантПроцентнойМотивации();//он такой же в общем варианте, отличается только в личном
	//	
	//ИначеЕсли ВариантМотивации = 4 тогда
	//	ЗаполнитьВариантОбщейМотивации();
	//	
	//ИначеЕсли ВариантМотивации = 5 тогда
	//	ЗаполнитьВариантНовойМотивации();
	//	
	//ИначеЕсли ВариантМотивации = 6 тогда
		ЗаполнитьВариантНовойМотивации_2();
	//КонецЕсли; 
	

КонецПроцедуры

&НаКлиенте
Процедура ПереключательТаблицаДиаграммаПриИзменении(Элемент)
	УдалитьРеквизиты(истина);
	//ЗаполнитьВариантОбщейМотивации(); 
	ЗаполнитьФокусныеПремииОбщаяМотивация();
	
	Если ПереключательТаблицаДиаграмма	=	0 тогда
		Элементы.Декорация1.Видимость			=	Истина;
		//ЭтаФорма.Высота	=	30;
	иначе
		Элементы.Декорация1.Видимость			=	Ложь;
		//ЭтаФорма.Высота	=	45;
	КонецЕсли;

КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьДанныеПоУценке(ПереключательМесяцДень, Период, Продавец)	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	КомментарииСтатистики.ХешНаименования КАК ХешНаименования,
	      	 	             |	КомментарииСтатистики.Наименование КАК Наименование
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.КомментарииСтатистики КАК КомментарииСтатистики
	      	 	             |ГДЕ
	      	 	             |	КомментарииСтатистики.Наименование ПОДОБНО &НаименованиеТБК
	      	 	             |	И ПОДСТРОКА(КомментарииСтатистики.ХешНаименования, 4, 2) = &Месяц
	      	 	             |	И ПОДСТРОКА(КомментарииСтатистики.ХешНаименования, 7, 4) = &Год
	      	 	             |	И ПОДСТРОКА(КомментарииСтатистики.ХешНаименования, 1, 2) = &День");
	Запрос.УстановитьПараметр("НаименованиеТБК","%tbkskidka%");

	ДеньСтрока	=	Строка(День(Период));
	МесяцСтрока	=	Строка(Месяц(Период));
	ГодСтрока	=	ОбщегоНазначения.УдалениеНезначимыхСимволов(Строка(Год(Период)));

	Если СтрДлина(МесяцСтрока) = 1 тогда МесяцСтрока = "0"+ МесяцСтрока; КонецЕсли;
	
	Запрос.УстановитьПараметр("Месяц",МесяцСтрока);
	Запрос.УстановитьПараметр("Год",ГодСтрока);
	
	Если ПереключательМесяцДень = 1 тогда
		Если СтрДлина(ДеньСтрока) = 1 тогда ДеньСтрока = "0"+ ДеньСтрока; КонецЕсли;
		Запрос.УстановитьПараметр("День",ДеньСтрока);   
	иначе
		Запрос.Текст	=	СтрЗаменить(Запрос.Текст,"И ПОДСТРОКА(КомментарииСтатистики.ХешНаименования, 1, 2) = &День","");		
	КонецЕсли;
	
	МассивВозврата	=	Новый Массив;
	
	
	ПроданоТабак	=	0;
	ПроданоСувениры	=	0;
	ПремияТабак		=	0;
	ПремияСувениры	=	0;
	СуммаТабак		=	0;
	СуммаСувениры	=	0;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого Строка из рез цикл
		//изменения 20240205
		Если ЗначениеЗаполнено(Продавец) и ТекущаяДата() > '20240301' тогда
			НомерЧека	=	Прав(Строка.ХешНаименования,11);
			
			СтрокаДата	=	Лев(Строка.ХешНаименования,19); 
			Если Прав(СтрокаДата,1) = ";" тогда
				СтрокаДата	=	Лев(СтрокаДата,18);	
			КонецЕсли;   			
			ДатаЧека	=	Дата(СтрокаДата);

			НужЧек		=	Документы.ЧекККМ.НайтиПоНомеру(НомерЧека, ДатаЧека);
			
			Если Не НужЧек.Пустая() тогда
				Если НужЧек.Товары.Количество() >0 тогда
					Если НужЧек.Товары[0].Продавец <> Продавец тогда
						
						Продолжить;
						
					КонецЕсли;					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Данные		=	Строка.Наименование;		
		Поз3		=	СтрНайти(Данные,"/",,,3);
		Поз9		=	СтрНайти(Данные,"/",,,9);
		Поз10		=	СтрНайти(Данные,"/",,,10);
		ПозЗагружен	=	СтрНайти(Данные,"загружен");
		
		КодГруппы	=	Сред(Данные,Поз3+1,11);
		
		КодГруппы	=	СтрЗаменить(КодГруппы,"u","Ю");
		
		Попытка
			Если Поз10 = 0 тогда 
				Если ПозЗагружен >0 тогда
					Сумма		=	Сред(Данные,Поз9+1, ПозЗагружен-Поз9-1);
				иначе
					Сумма		=	Сред(Данные,Поз9+1);
				КонецЕсли;
				Сумма	=	Число(Сумма);
				
			иначе
				Если ПозЗагружен >0 тогда
					Сумма		=	Сред(Данные,Поз10+1, ПозЗагружен-Поз10-1);
				иначе
					Сумма		=	Сред(Данные,Поз10+1);
				КонецЕсли;
				Сумма	=	Число(Сумма);
			КонецЕсли;
			
		Исключение
			Продолжить;
		КонецПопытки;


		ПК			=	Справочники.Номенклатура.НайтиПоКоду(КодГруппы).ПолныйКод();
		Если найти(ПК, "00048205349") тогда //Это Табак
			ПроданоТабак	=	ПроданоТабак +1;
			ПремияТабак		=	ПремияТабак + (Сумма/100)*10;	
			Попытка
				СуммаТабак		=	СуммаТабак + Сумма;
			Исключение
			КонецПопытки;
		иначе
			ПроданоСувениры	=	ПроданоСувениры + 1;
			ПремияСувениры	=	ПремияСувениры  +  (Сумма/100)*20;	
			Попытка
				СуммаСувениры	=	СуммаСувениры + Сумма;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПремийУценка	=	Новый Структура;
	СтруктураПремийУценка.Вставить("ПроданоТабак", 		ПроданоТабак);
	СтруктураПремийУценка.Вставить("ПроданоСувениры", 	ПроданоСувениры);
	СтруктураПремийУценка.Вставить("СуммаТабак", 		СуммаТабак);
	СтруктураПремийУценка.Вставить("СуммаСувениры", 	СуммаСувениры);
	СтруктураПремийУценка.Вставить("ПремияТабак", 		ПремияТабак);
	СтруктураПремийУценка.Вставить("ПремияСувениры", 	ПремияСувениры);
	
	
	Возврат СтруктураПремийУценка;
	
	
КонецФункции

&НаКлиенте
Процедура Группа8ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.заголовок = "Основная" тогда
		ТекущаяСтраница.РастягиватьПоВертикали	=	Ложь;
		//ТекущаяСтраница.Высота					=	45;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.Основная.РастягиватьПоВертикали	=	Ложь;
	Если флразвернуть тогда
		Попытка
			WSHShell = Новый COMОбъект("WScript.Shell");
			WSHShell.SendKeys("% ");
			WSHShell.SendKeys("{DOWN}{DOWN}{DOWN}{DOWN}{ENTER}");

		Исключение
		КонецПопытки;
	КонецЕсли;

	ОбновитьНадписиКоличествоЧеков();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписиКоличествоЧеков()
	Если ПереключательМесяцДень = 0 тогда	
		ДатаНач	=	НачалоМесяца(Период);
		ДатаКон	=	КонецМесяца(Период);
	иначе
		ДатаНач	=	НачалоДня(Период);
		ДатаКон	=	КонецДня(Период);
	КонецЕсли;

	СтруктураКолЧеков	=	ОбщегоНазначенияВызовСервера.ПолучитьКоличествоЧеков(ДатаНач, ДатаКон, Продавец);
	
	Процент	=	?(СтруктураКолЧеков.КолЧеков>0, окр(СтруктураКолЧеков.КолЧековЛояльность/СтруктураКолЧеков.КолЧеков*100,1), 0) ;
	Элементы.КолЧековВсего.Заголовок			=	"Всего чеков: "		+ СтруктураКолЧеков.КолЧеков;
	Элементы.КолЧековЛояльность.Заголовок		=	"По лояльности: " 	+ СтруктураКолЧеков.КолЧековЛояльность+";  "+Процент+"%";		
КонецПроцедуры


Процедура ЗаполнитьФокусныеПремииОбщаяМотивация()
	ИтогоПремииФокус = 0;                
	Если ОкладЗамена>0 или ОкладМобильный>0 тогда
		ТаблицаРасшифровка	=		Обработки.РМКУправляемыйРежим.ПолучитьТаблицуПоФокуснойМотивации(ИтогоПремииФокус, ТекущаяДата(), 1, Продавец);
	иначе
		ТаблицаРасшифровка	=		Обработки.РМКУправляемыйРежим.ПолучитьТаблицуПоФокуснойМотивации(ИтогоПремииФокус, Период, ПереключательМесяцДень, Продавец);
	КонецЕсли;

	
	
	Если ПереключательТаблицаДиаграмма = 0 тогда
		ВывестиТаблицу(Элементы.Группа9, ТаблицаРасшифровка, ИтогоПремииФокус, Продавец, 0);			
	иначе
		//ВЫВОД В ВИДЕ ДИАГРАММ. ФОКУСНАЯ МОТИВАЦИЯ
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Диаграмма"));
		ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов); 	

		СЧ = 0;
		Для каждого СтрокаТЗ из ТаблицаРасшифровка цикл   
			НазваниеДиаграммы	=	"ПланФокусДиаграмма" + СЧ;
			НДиаг         		= Новый РеквизитФормы(НазваниеДиаграммы, ДопустимыеТипы);
			НДиаг.Заголовок		= Строка(СтрокаТЗ.ФокусГруппа) +Символы.ПС+ "Премия: " + СтрокаТЗ.СуммаПремии;

			ДобавляемыеРеквизиты = Новый Массив;
			ДобавляемыеРеквизиты.Добавить(НДиаг);  	
			ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);  

			Если СЧ<5 Тогда  // максимум 5 диаграмм в каждой группе
				НужГруппа	=	Элементы.ФокусДиаграммы1;
			ИначеЕсли СЧ<10 Тогда
				НужГруппа	=	Элементы.ФокусДиаграммы2;
			ИначеЕсли СЧ<15 Тогда
				НужГруппа	=	Элементы.ФокусДиаграммы3;
			ИначеЕсли СЧ<20 Тогда
				НужГруппа	=	Элементы.ФокусДиаграммы4; 
			КонецЕсли;
			
			Диаг 							= ЭтаФорма.Элементы.Добавить(НазваниеДиаграммы, Тип("ПолеФормы"), НужГруппа);		
			Диаг.Вид						= ВидПоляФормы.ПолеДиаграммы; 
			Диаг.ПутьКДанным				= НазваниеДиаграммы;
			Диаг.ЦветТекстаЗаголовка		= WebЦвета.Синий;
			//Диаг.Ширина						= 30;
			Диаг.РастягиватьПоГоризонтали	= Ложь;

			НДиаг				=	ЭтаФорма[НазваниеДиаграммы];
			//НДиаг.ТипДиаграммы	=	ТипДиаграммы.ГистограммаГоризонтальнаяОбъемная;
			НДиаг.Серии.Добавить("План");
			
			//определяем точки
			Если СтрокаТЗ.ПланПродаж >0 тогда
				ТочкаКолПлан = НДиаг.УстановитьТочку("План");	
				ТочкаКолПлан.ПриоритетЦвета	= Истина;   		
				ТочкаКолПлан.Цвет	=	WebЦвета.КоролевскиГолубой;  

				НДиаг.УстановитьЗначение(ТочкаКолПлан
					, НДиаг.Серии[0]
					, СтрокаТЗ.ПланПродаж
					, Неопределено
					, СтрокаТЗ.ПланПродаж);
					
					
			КонецЕсли;
				
			ТочкаКолФакт = НДиаг.УстановитьТочку("Продажи");						
			ТочкаКолФакт.ПриоритетЦвета	= Истина;   		
			ТочкаКолФакт.Цвет	=	WebЦвета.БледноКрасноФиолетовый;  

			Если Найти(СтрокаТЗ.Заголовок,"Процент премии") тогда // выводим Сумму
				ТочкаКолФакт.Текст			=	"Сумма продаж";

				НДиаг.УстановитьЗначение(ТочкаКолФакт
					, НДиаг.Серии[0]
					, СтрокаТЗ.СуммаФакт
					, Неопределено
					, Сред(СтрокаТЗ.Заголовок,Найти(СтрокаТЗ.Заголовок, Символы.ПС)+1));	
			иначе
				ТочкаКолФакт.Текст			=	"Продажи шт.";

				НДиаг.УстановитьЗначение(ТочкаКолФакт
					, НДиаг.Серии[0]
					, СтрокаТЗ.ФактПродаж
					, Неопределено
					, Сред(СтрокаТЗ.Заголовок,Найти(СтрокаТЗ.Заголовок, Символы.ПС)+1));
			КонецЕсли;
					

			Сч = Сч+1;
			
			НДиаг.ОтображатьЛегенду	= Ложь;	 		
			НДиаг.ВидПодписей		=	ВидПодписейКДиаграмме.Значение;
			НДиаг.АвтоМаксимальноеЗначение	=	Ложь;
			НДиаг.АвтоМинимальноеЗначение	=	Ложь;
			НДиаг.МинимальноеЗначение		=	0; 
			НДиаг.МаксимальноеЗначение		=	СтрокаТЗ.ФактПродаж +1; 

		КонецЦикла; 	
	КонецЕсли;	

	Элементы.ИтогоФокус.Заголовок	=	"Итого: "+ ИтогоПремииФокус;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоОкладу(Продавец_, ПереключательМесяцДень, Период)
	СуммаОклада	=	0;
	Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	ТБКОкладыПремииИПроцентыНоваяМотивация.Оклад КАК Оклад
	      	 	             |ИЗ
	      	 	             |	Справочник.ТБКОкладыПремииИПроцентыНоваяМотивация КАК ТБКОкладыПремииИПроцентыНоваяМотивация
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	ТБКОкладыПремииИПроцентыНоваяМотивация.Период УБЫВ");
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда	
		СуммаОклада = рез.Оклад;
	КонецЕсли;
	
	КоличествоЧасов	=	0;
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	МАКСИМУМ(ЕСТЬNULL(ТБКСменыСотрудников.ВремяСмены, 0)) КАК ВремяСмены,
	      	 	             |	ДЕНЬ(ТБКСменыСотрудников.КассоваяСмена.Дата) КАК Поле1
	      	 	             |ПОМЕСТИТЬ ПоДням
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКСменыСотрудников КАК ТБКСменыСотрудников
	      	 	             |ГДЕ
	      	 	             |	ТБКСменыСотрудников.Продавец = &Продавец
	      	 	             |	И ТБКСменыСотрудников.КассоваяСмена.Дата МЕЖДУ &ДатаНач И &ДатаКон
	      	 	             |	И НЕ ТБКСменыСотрудников.ПродавецНаЗамену
	      	 	             |
	      	 	             |СГРУППИРОВАТЬ ПО
	      	 	             |	ДЕНЬ(ТБКСменыСотрудников.КассоваяСмена.Дата)
	      	 	             |;
	      	 	             |
	      	 	             |////////////////////////////////////////////////////////////////////////////////
	      	 	             |ВЫБРАТЬ
	      	 	             |	ЕСТЬNULL(СУММА(ПоДням.ВремяСмены), 0) КАК ВремяСмены
	      	 	             |ИЗ
	      	 	             |	ПоДням КАК ПоДням");
	
	Если ПереключательМесяцДень = 0 тогда	
		Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Период));
		Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(Период));
	иначе
		Запрос.УстановитьПараметр("ДатаНач",НачалоДня(Период));
		Запрос.УстановитьПараметр("ДатаКон",КонецДня(Период));  	
	КонецЕсли;
	Запрос.УстановитьПараметр("Продавец",Продавец_);
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда	
		КоличествоЧасов = рез.ВремяСмены;
	КонецЕсли; 
	
	//ЧасыВсего
	ЧасыВсего	=	0;
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	МАКСИМУМ(ЕСТЬNULL(ТБКСменыСотрудников.ВремяСмены, 0)) КАК ВремяСмены,
	      	 	             |	ДЕНЬ(ТБКСменыСотрудников.КассоваяСмена.Дата) КАК Поле1,
	      	 	             |	ТБКСменыСотрудников.Продавец КАК Продавец
	      	 	             |ПОМЕСТИТЬ ПоДням
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКСменыСотрудников КАК ТБКСменыСотрудников
	      	 	             |ГДЕ
	      	 	             |	ТБКСменыСотрудников.КассоваяСмена.Дата МЕЖДУ &ДатаНач И &ДатаКон
	      	 	             |
	      	 	             |СГРУППИРОВАТЬ ПО
	      	 	             |	ДЕНЬ(ТБКСменыСотрудников.КассоваяСмена.Дата),
	      	 	             |	ТБКСменыСотрудников.Продавец
	      	 	             |;
	      	 	             |
	      	 	             |////////////////////////////////////////////////////////////////////////////////
	      	 	             |ВЫБРАТЬ
	      	 	             |	ЕСТЬNULL(СУММА(ПоДням.ВремяСмены), 0) КАК ВремяСмены
	      	 	             |ИЗ
	      	 	             |	ПоДням КАК ПоДням");
	
	Если ПереключательМесяцДень = 0 тогда	
		Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Период));
		Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(Период));
	иначе
		Запрос.УстановитьПараметр("ДатаНач",НачалоДня(Период));
		Запрос.УстановитьПараметр("ДатаКон",КонецДня(Период));  	
	КонецЕсли;
	Рез = Запрос.Выполнить().Выбрать();
	
	Если Рез.Следующий() Тогда	
		ЧасыВсего = рез.ВремяСмены;
	КонецЕсли; 

	
	Струк	=	новый Структура;
	Струк.Вставить("СуммаОклада",СуммаОклада * КоличествоЧасов);
	Струк.Вставить("КоличествоЧасов",КоличествоЧасов);
	Струк.Вставить("ЧасыВсего",ЧасыВсего);

	Возврат Струк;
	
КонецФункции

&НаСервере
Функция ПолучитьСуммуФактПоТипуПлана(ТипПлана, ЗаДень = Ложь, ЗаСегодня = Ложь)     	
	//Личный
	Если ТипПлана = "План личный" тогда
		Запрос	=	Новый Запрос("ВЫБРАТЬ
		      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка КАК Ссылка
		      	 	             |ПОМЕСТИТЬ Доки
		      	 	             |ИЗ
		      	 	             |	Документ.ТБК_ВедомостьОПродажахЗаДень.Продавцы КАК ТБК_ВедомостьОПродажахЗаДеньПродавцы
		      	 	             |ГДЕ
		      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Проведен
		      	 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец = &Продавец
		      	 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.ТипПродавца = &ТипПродавца
		      	 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		      	 	             |	И НЕ ТБК_ВедомостьОПродажахЗаДеньПродавцы.ПродавецНаЗамену
		      	 	             |;
		      	 	             |
		      	 	             |////////////////////////////////////////////////////////////////////////////////
		      	 	             |ВЫБРАТЬ
		      	 	             |	ЕСТЬNULL(СУММА(ТБК_ВедомостьОПродажахЗаДень.ВыручкаЗаСменуПоКассе - ТБК_ВедомостьОПродажахЗаДень.ВозвратОтПокупателяНал - ТБК_ВедомостьОПродажахЗаДень.ВозвратОтПокупателяБезНал), 0) КАК СуммаВедомости
		      	 	             |ИЗ
		      	 	             |	Доки КАК Доки
		      	 	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТБК_ВедомостьОПродажахЗаДень КАК ТБК_ВедомостьОПродажахЗаДень
		      	 	             |		ПО Доки.Ссылка = ТБК_ВедомостьОПродажахЗаДень.Ссылка
		      	 	             |;
		      	 	             |
		      	 	             |////////////////////////////////////////////////////////////////////////////////
		      	 	             |ВЫБРАТЬ
		      	 	             |	ЕСТЬNULL(СУММА(ВЫБОР
		      	 	             |				КОГДА ЧекККМТовары.Ссылка.ВидОперации = &ВидПродажа
		      	 	             |					ТОГДА ЕСТЬNULL(ЧекККМТовары.Сумма, 0)
		      	 	             |				ИНАЧЕ ЕСТЬNULL(-ЧекККМТовары.Сумма, 0)
		      	 	             |			КОНЕЦ), 0) КАК СуммаЧеки
		      	 	             |ИЗ
		      	 	             |	Документ.ЧекККМ.Товары КАК ЧекККМТовары
		      	 	             |ГДЕ
		      	 	             |	ЧекККМТовары.Ссылка.Проведен
		      	 	             |	И ЧекККМТовары.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		      	 	             |	И ЧекККМТовары.Ссылка.СтатусЧекаККМ = &СтатусЧекаККМ
		      	 	             |	И ЧекККМТовары.Продавец = &Продавец");
		
		Если не ЗаДень тогда                                                 	
			Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Период));
			Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(Период));
		иначе
			Запрос.УстановитьПараметр("ДатаНач",НачалоДня(Период));
			Запрос.УстановитьПараметр("ДатаКон",КонецДня(Период)); 			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТипПродавца",Перечисления.ТБКТипыПродавцов.ОсновнойПродавец);
		Запрос.УстановитьПараметр("Продавец",Продавец);
		Запрос.УстановитьПараметр("СтатусЧекаККМ",Перечисления.СтатусыЧековККМ.Пробитый);
		Запрос.УстановитьПараметр("ВидПродажа",Перечисления.ВидыОперацийЧекККМ.Продажа);
		
		Рез = Запрос.ВыполнитьПакет();
		
		СуммаФАкт	=	Рез[1].Выгрузить()[0].СуммаВедомости + Рез[2].Выгрузить()[0].СуммаЧеки;
				
		//Запрос			=	Новый Запрос("ВЫБРАТЬ
		//	      			 	             |	НАЧАЛОПЕРИОДА(ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Дата, ДЕНЬ) КАК Поле1,
		//	      			 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец КАК Продавец
		//	      			 	             |ПОМЕСТИТЬ ПродавцыСмены
		//	      			 	             |ИЗ
		//	      			 	             |	Документ.ТБК_ВедомостьОПродажахЗаДень.Продавцы КАК ТБК_ВедомостьОПродажахЗаДеньПродавцы
		//	      			 	             |ГДЕ
		//	      			 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Проведен
		//	      			 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.ТипПродавца = &ТипПродавца
		//	      			 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		//	      			 	             |	И НЕ ТБК_ВедомостьОПродажахЗаДеньПродавцы.ПродавецНаЗамену
		//	      			 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец = &Продавец
		//	      			 	             |
		//	      			 	             |СГРУППИРОВАТЬ ПО
		//	      			 	             |	НАЧАЛОПЕРИОДА(ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Дата, ДЕНЬ),
		//	      			 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец
		//	      			 	             |;
		//	      			 	             |
		//	      			 	             |////////////////////////////////////////////////////////////////////////////////
		//	      			 	             |ВЫБРАТЬ
		//	      			 	             |	ПродавцыСмены.Продавец КАК Продавец,
		//	      			 	             |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродавцыСмены.Поле1) КАК КолСмен
		//	      			 	             |ИЗ
		//	      			 	             |	ПродавцыСмены КАК ПродавцыСмены
		//	      			 	             |
		//	      			 	             |СГРУППИРОВАТЬ ПО
		//	      			 	             |	ПродавцыСмены.Продавец");
		//Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Период));
		//Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(Период));
		//Запрос.УстановитьПараметр("ТипПродавца",Перечисления.ТБКТипыПродавцов.ОсновнойПродавец);
		//Запрос.УстановитьПараметр("Продавец",Продавец);

		//ТЗПродавцыСмены	=	Запрос.Выполнить().Выгрузить();
		//Если ТЗПродавцыСмены.Количество() = 0 тогда 
		//	КолСмен	=	1;	
		//иначе
		//	Если НачалоМесяца(Период) = НачалоМесяца(ТекущаяДата()) тогда
		//		КолСмен	=	ТЗПродавцыСмены[0].КолСмен +1;	
		//	иначе
		//		КолСмен	=	ТЗПродавцыСмены[0].КолСмен;	
		//	КонецЕсли;
		//КонецЕсли;
		
		//СуммаФАкт	=	СуммаЗаДень * КоличествоСмен;
			
		Возврат СуммаФАкт;
	КонецЕсли;
	
	//Общий
	Если ТипПлана = "План ТО" тогда
		Запрос	=	Новый Запрос("ВЫБРАТЬ
		      	 	             |	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот), 0) КАК Сумма
		      	 	             |ИЗ
		      	 	             |	РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, , ) КАК ПродажиОбороты
		      	 	             |ГДЕ
		      	 	             |	ТИПЗНАЧЕНИЯ(ПродажиОбороты.ДокументПродажи) <> ТИП(Документ.РеализацияТоваров)");
		Если не ЗаДень тогда
			Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Период));
			Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(Период));
		иначе
			Запрос.УстановитьПараметр("ДатаНач",НачалоДня(Период));
			Запрос.УстановитьПараметр("ДатаКон",КонецДня(Период)); 			
		КонецЕсли;
		
		Если ЗаСегодня тогда
			Запрос.УстановитьПараметр("ДатаНач",НачалоДня(ТекущаяДата()));
			Запрос.УстановитьПараметр("ДатаКон",КонецДня(ТекущаяДата())); 	
		КонецЕсли;
		
		Рез = Запрос.Выполнить().Выбрать();
		Если Рез.Следующий() тогда
			Возврат Рез.сумма;
		иначе
			Возврат 0;
		КонецЕсли;

	КонецЕсли;

	//По группам товаров. Не используется 
	//Запрос	=	Новый Запрос("ВЫБРАТЬ
	//      	 	             |	ТБКГруппыНоменклатурыДляПланов.Номенклатура КАК Номенклатура
	//      	 	             |ИЗ
	//      	 	             |	Справочник.ТБКГруппыНоменклатурыДляПланов КАК ТБКГруппыНоменклатурыДляПланов
	//      	 	             |ГДЕ
	//      	 	             |	ТБКГруппыНоменклатурыДляПланов.ТипПлана = &ТипПлана");
	//Запрос.УстановитьПараметр("ТипПлана",ТипПлана);
	//Рез = Запрос.Выполнить().Выгрузить();

	//
	//Запрос	=	Новый Запрос("ВЫБРАТЬ
	//      	 	             |	ЕСТЬNULL(СУММА(ПродажиОбороты.СтоимостьОборот), 0) КАК Сумма
	//      	 	             |ИЗ
	//      	 	             |	РегистрНакопления.Продажи.Обороты(&ДатаНач, &ДатаКон, , Номенклатура В ИЕРАРХИИ (&Номенклатура)) КАК ПродажиОбороты
	//      	 	             |ГДЕ
	//      	 	             |	ТИПЗНАЧЕНИЯ(ПродажиОбороты.ДокументПродажи) <> ТИП(Документ.РеализацияТоваров)");
	//
	//Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Период));
	//Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(Период));
	//Запрос.УстановитьПараметр("Номенклатура",Рез.ВыгрузитьКолонку("Номенклатура"));
	//
	//Рез = Запрос.Выполнить().Выбрать();
	//
	//Если рез.Следующий() тогда
	//	Возврат Рез.Сумма;
	//иначе
	//	Возврат 0;
	//КонецЕсли;

КонецФункции


&НаСервере
Процедура ЗаполнитьВариантПлановойМотивации()
	Элементы.Группа3.Видимость	= Ложь;
	Элементы.Группа4.Видимость	= Ложь;
	Элементы.Основная.Видимость	= Истина;
	Элементы.Группа2.Видимость	= Истина; 
	
	Если флПостроенаПлановаяОбщая тогда Возврат КонецЕсли;
	
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ПланыМагазинаПоМесяцамСрезПоследних.Период КАК Период,
	      	 	             |	ПланыМагазинаПоМесяцамСрезПоследних.ТипПлана КАК ТипПлана,
	      	 	             |	ПланыМагазинаПоМесяцамСрезПоследних.Сумма КАК Сумма
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКПланыМагазинаПоМесяцам.СрезПоследних КАК ПланыМагазинаПоМесяцамСрезПоследних
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	ТипПлана");
	рез = запрос.Выполнить().Выбрать();
	
	

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Диаграмма"));
	ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов); 	
	
	Ном = 1;
	Пока рез.Следующий() цикл	
		СуммаФакт	=	ПолучитьСуммуФактПоТипуПлана(Рез.ТипПлана);
				
		НазваниеДиаграммы	=	ОбщегоНазначения.УдалениеНезначимыхСимволов(Строка(Рез.ТипПлана));
		
		НДиаг         	= Новый РеквизитФормы(НазваниеДиаграммы, ДопустимыеТипы);

		НДиаг.Заголовок	=	Строка(Рез.ТипПлана);
		
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(НДиаг);  	
		ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);  

		Если Найти(НРег(Строка(Рез.ТипПлана)),"личный") или Найти(НРег(Строка(Рез.ТипПлана)),"план то") тогда
			Диаг 				= ЭтаФорма.Элементы.Добавить(НазваниеДиаграммы, Тип("ПолеФормы"), Элементы.Группа2);	
		иначе
			Диаг 				= ЭтаФорма.Элементы.Добавить(НазваниеДиаграммы, Тип("ПолеФормы"), Элементы.Основная);	
		КонецЕсли;
		
		
		Диаг.Вид					= ВидПоляФормы.ПолеДиаграммы; 
		Диаг.ПутьКДанным			= НазваниеДиаграммы;
		Диаг.ЦветТекстаЗаголовка	= WebЦвета.Синий;

		НДиаг	=	ЭтаФорма[НазваниеДиаграммы];
		НДиаг.Серии.Добавить("План");

		ТочкаПоПлану = НДиаг.УстановитьТочку("План");
		
		Если НачалоМесяца(ТекущаяДата()) = НачалоМесяца(Период) тогда
			Если Рез.ТипПлана <> "План личный" тогда 
				ТочкаПоПлану_Сегодня 				= НДиаг.УстановитьТочку("План_НаСегодня");		
				ТочкаПоПлану_Сегодня.текст			=	"План на сегодня";
				ТочкаПоПлану_Сегодня.ПриоритетЦвета	=	Истина;  
			КонецЕсли;
		КонецЕсли;

		ТочкаПоФакту = НДиаг.УстановитьТочку("Факт");
		
		ТочкаПоФакту.ПриоритетЦвета	=Истина;   		
		ТочкаПоПлану.ПриоритетЦвета	=Истина;	
		ТочкаПоПлану.Цвет	=	WebЦвета.БледноКрасноФиолетовый;
		
		НужСумма	=	рез.Сумма;
		
		//пришлось умножать на кол. смен
		Если Рез.ТипПлана = "План личный" тогда
			Запрос			=	Новый Запрос("ВЫБРАТЬ
			      			 	             |	НАЧАЛОПЕРИОДА(ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Дата, ДЕНЬ) КАК Поле1,
			      			 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец КАК Продавец
			      			 	             |ПОМЕСТИТЬ ПродавцыСмены
			      			 	             |ИЗ
			      			 	             |	Документ.ТБК_ВедомостьОПродажахЗаДень.Продавцы КАК ТБК_ВедомостьОПродажахЗаДеньПродавцы
			      			 	             |ГДЕ
			      			 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Проведен
			      			 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.ТипПродавца = &ТипПродавца
			      			 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
			      			 	             |	И НЕ ТБК_ВедомостьОПродажахЗаДеньПродавцы.ПродавецНаЗамену
			      			 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец = &Продавец
			      			 	             |
			      			 	             |СГРУППИРОВАТЬ ПО
			      			 	             |	НАЧАЛОПЕРИОДА(ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Дата, ДЕНЬ),
			      			 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец
			      			 	             |;
			      			 	             |
			      			 	             |////////////////////////////////////////////////////////////////////////////////
			      			 	             |ВЫБРАТЬ
			      			 	             |	ПродавцыСмены.Продавец КАК Продавец,
			      			 	             |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродавцыСмены.Поле1) КАК КолСмен
			      			 	             |ИЗ
			      			 	             |	ПродавцыСмены КАК ПродавцыСмены
			      			 	             |
			      			 	             |СГРУППИРОВАТЬ ПО
			      			 	             |	ПродавцыСмены.Продавец");
			Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Период));
			Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(Период));
			Запрос.УстановитьПараметр("Продавец",Продавец);
			Запрос.УстановитьПараметр("ТипПродавца",Перечисления.ТБКТипыПродавцов.ОсновнойПродавец);

			ТЗПродавцыСмены	=	Запрос.Выполнить().Выгрузить();
			НужСтрока	=	ТЗПродавцыСмены.Найти(Продавец) ;
			Если НужСтрока <> Неопределено тогда 
				
				Если НачалоМесяца(Период) = НачалоМесяца(ТекущаяДата()) тогда
					КолСмен	=	НужСтрока.КолСмен + 1;
				иначе
					КолСмен	=	НужСтрока.КолСмен;
				КонецЕсли;

			иначе
				КолСмен	=	1;	
			КонецЕсли;       
		
			НужСумма = НужСумма * КолСмен;
		КонецЕсли; 			
       	//
		
		Если СуммаФакт >  НужСумма тогда	
			ТочкаПоФакту.Цвет	=	WebЦвета.ЗеленаяЛужайка;
		иначе
			ТочкаПоФакту.Цвет	=	WebЦвета.Бирюзовый;
		КонецЕсли;
		
		ПроцентВыполнения	=	Окр((СуммаФакт / НужСумма) * 100,2);
		
		НДиаг.УстановитьЗначение(ТочкаПоПлану
				, НДиаг.Серии[0]
				, НужСумма
				, Неопределено
				, Рез.ТипПлана + " "+НужСумма);
				
		Если НачалоМесяца(ТекущаяДата()) = НачалоМесяца(Период) тогда
			Если Рез.ТипПлана <> "План личный" тогда 
				КолДней			=	День(Период);
				КолДнейВМесяце	=	День(КонецМесяца(Период));
				
				СуммаПланНаСегодня	=	Окр(НужСумма / КолДнейВМесяце,2);
				СуммаПланНаСегодня	=	СуммаПланНаСегодня *  КолДней;
				
				НДиаг.УстановитьЗначение(ТочкаПоПлану_Сегодня
					, НДиаг.Серии[0]
					, СуммаПланНаСегодня
					, Неопределено
					, Рез.ТипПлана + "(на сег.день) "+ СуммаПланНаСегодня);
					
				Если СуммаФакт >  СуммаПланНаСегодня тогда	
					ТочкаПоФакту.Цвет	=	WebЦвета.ЗеленаяЛужайка;
				иначе
					ТочкаПоФакту.Цвет	=	WebЦвета.Бирюзовый;
				КонецЕсли;     
			КонецЕсли;    
		КонецЕсли;
		

		НДиаг.УстановитьЗначение(ТочкаПоФакту
			, НДиаг.Серии[0]
			, СуммаФакт
			, Неопределено
			, "Факт. продажи" + " " + СуммаФакт + "; Процент выполнения:"+ПроцентВыполнения+"%");  		
			
			
		НДиаг.ОтображатьЛегенду	= Ложь;	 		
		НДиаг.ВидПодписей		=	ВидПодписейКДиаграмме.Значение;
		НДиаг.АвтоМаксимальноеЗначение	=	Ложь;
		НДиаг.АвтоМинимальноеЗначение	=	Ложь;
		НДиаг.МаксимальноеЗначение		=	Макс(НужСумма, СуммаФакт) + НужСумма/10;
		НДиаг.МинимальноеЗначение		=	-0.01; 

	КонецЦикла; 
	
	флПостроенаПлановаяОбщая = Истина;
КонецПроцедуры


#КонецОбласти
 

	////Выводим Суммы ФОКУС мотивации БЕЗ ПЛАНА! для примера гистограммы с накоплением
	//Запрос	=	Новый Запрос("ВЫБРАТЬ
	//      	 	             |	ТБКФокуснаяМотивация.Период КАК Период,
	//      	 	             |	ТБКФокуснаяМотивация.Номенклатура КАК Номенклатура,
	//      	 	             |	ТБКФокуснаяМотивация.Процент КАК Процент,
	//      	 	             |	ТБКФокуснаяМотивация.Сумма КАК Сумма
	//      	 	             |ИЗ
	//      	 	             |	РегистрСведений.ТБКФокуснаяМотивация КАК ТБКФокуснаяМотивация
	//      	 	             |ГДЕ
	//      	 	             |	ТБКФокуснаяМотивация.Период МЕЖДУ &ДатаНач И &ДатаКон
	//      	 	             |	И ТБКФокуснаяМотивация.ПланКоличество = 0");
	//
	//Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Период));
	//Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(Период));
	//Рез = Запрос.Выполнить().Выбрать();
	//
	//НазваниеДиаграммы	=	"ПланФокус";
	//НДиаг         		= Новый РеквизитФормы(НазваниеДиаграммы, ДопустимыеТипы);
	//
	//ДобавляемыеРеквизиты = Новый Массив;
	//ДобавляемыеРеквизиты.Добавить(НДиаг);  	
	//ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);  

	//Диаг 						= ЭтаФорма.Элементы.Добавить(НазваниеДиаграммы, Тип("ПолеФормы"), Элементы.Группа2);		
	//Диаг.Вид					= ВидПоляФормы.ПолеДиаграммы; 
	//Диаг.ПутьКДанным			= НазваниеДиаграммы;
	//Диаг.ЦветТекстаЗаголовка	= WebЦвета.Синий;
	//Диаг.Ширина					=	15;
	//
	//НДиаг						=	ЭтаФорма[НазваниеДиаграммы];
	//НДиаг.ТипДиаграммы			=	ТипДиаграммы.ГистограммаСНакоплениемОбъемная;

	//ТочкаСуммаПремии 			=	НДиаг.УстановитьТочку("Премии");

	//СуммаИтог	=	0;
	//Ном = 0;
	//Пока Рез.Следующий() цикл
	//	
	//	//СтрокаФокусГруппа	=	ТЗ_Премии.найти(Строка(Рез.Номенклатура));
	//	//Если СтрокаФокусГруппа<>Неопределено тогда
	//	//	СуммаПремииФокус	=	СтрокаФокусГруппа.СуммаОборот;
	//	//иначе
	//	//	Продолжить;
	//	//КонецЕсли; 
	//	
	//	ТЗПродано	=	ПолучитьКоличествоПродажПоГруппе(Продавец, Рез.Номенклатура,  Истина);	
	//	Если ТЗПродано.Количество() = 0 тогда Продолжить; КонецЕсли;
	//	
	//	Если Рез.Процент>0 тогда
	//		СуммаПремииФокус	=	(ТЗПродано[0].Сумма/100) * Рез.Процент;
	//	иначе
	//		СуммаПремииФокус	=	ТЗПродано[0].Количество * Рез.Сумма;
	//	КонецЕсли;
	//	
	//	СуммаИтог			=	СуммаИтог + СуммаПремииФокус;		

	//	НДиаг.Серии.Добавить(Строка(Рез.Номенклатура));
	//	
	//	//определяем точки

	//	НДиаг.УстановитьЗначение(ТочкаСуммаПремии
	//					, НДиаг.Серии[Ном]
	//					, СуммаПремииФокус
	//					, Неопределено
	//					, "Премия за " + Строка(Рез.Номенклатура)+" "+СуммаПремииФокус);
	//					

	//	Ном	=	Ном+1;
	//	
	//	ИтогоПремии	=	ИтогоПремии +  СуммаПремииФокус;
	//КонецЦикла;
	//Диаг.Заголовок		= "Премии по фокус.группам: " + СуммаИтог;
