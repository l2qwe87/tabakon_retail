

Функция НакатитьМиграции() ЭКСПОРТ
	
	Попытка
		Для Каждого миграция из Метаданные.Обработки.ТБК_Миграции.Команды Цикл
			//миграция.
			
			НакатитьМиграцию(миграция.Имя);
		КонецЦикла
	Исключение
		Сообщить("АААА");
	КонецПопытки;
	
КонецФункции



Функция НакатитьМиграцию(идентификатор)
	
	нз = РегистрыСведений.ТБКМиграции.СоздатьНаборЗаписей();
	нз.Отбор.Идентификатор.Установить(идентификатор,Истина);
	
	нз.Прочитать();
	

	Попытка
		Если нз.Количество() = 0 Тогда
			

			Выполнить(""+идентификатор+"();");
			
			запись= нз.Добавить();
			запись.ДатаПрименения = ТекущаяДата();
			запись.Применена = 1;
			запись.Идентификатор = идентификатор;
			нз.Записать(Истина);
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецФункции




Функция М_00001_ДатаЗапретИзменениеДанных20200701()
	Если НЕ Константы.ИспользоватьДатыЗапретаИзменения.Получить() Тогда
		Константы.ИспользоватьДатыЗапретаИзменения.Установить(Истина);
	КонецЕсли;
	
	дляВсехПользователей=Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
	
	нз = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	нз.Отбор.Пользователь.Установить(дляВсехПользователей,истина);
	
	запись = нз.Добавить();
	запись.Пользователь = дляВсехПользователей;
	запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.Раздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.ДатаЗапрета = Дата(2020,06,30);
	
	нз.Записать(Истина);
КонецФункции

Функция М_00002_ПКО_До_20200706()
	
	выборкаВед = Документы.ТБК_ВедомостьОПродажахЗаДень.Выбрать(Дата(2020,07,01),Дата(2020,07,07));
	
	пока выборкаВед.Следующий() Цикл
		
		Для Каждого стр из выборкаВед.ВыемкаДенежныхСредств Цикл
			Если ЗначениеЗаполнено(стр.ПКО) Тогда
				об = стр.ПКО.ПолучитьОбъект();
				об.Приложение="1.1 Торговая розничная выручка - НАЛ";
				об.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(выборкаВед.ВедомостьПродажНеУчтено_ПКО) Тогда
			об = выборкаВед.ВедомостьПродажНеУчтено_ПКО.ПолучитьОбъект();
			об.Приложение="1.4 Торговая выручка - НЕУЧТЕНКА";
			об.Записать(РежимЗаписиДокумента.Запись);
		Конецесли;
		
	КонецЦикла;
	
КонецФункции

Функция М_00003_ДатаЗапретИзменениеДанных20200701()
	Если НЕ Константы.ИспользоватьДатыЗапретаИзменения.Получить() Тогда
		Константы.ИспользоватьДатыЗапретаИзменения.Установить(Истина);
	КонецЕсли;
	
	дляВсехПользователей=Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
	
	нз = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	нз.Отбор.Пользователь.Установить(дляВсехПользователей,истина);
	
	запись = нз.Добавить();
	запись.Пользователь = дляВсехПользователей;
	запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.Раздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.ДатаЗапрета = Дата(2020,06,30);
	
	нз.Записать(Истина);
КонецФункции

Функция М_00004_ПКО_До_20200708()
	
	
	Если НЕ Константы.ИспользоватьДатыЗапретаИзменения.Получить() Тогда
		Константы.ИспользоватьДатыЗапретаИзменения.Установить(Истина);
	КонецЕсли;
	
	дляВсехПользователей=Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
	
	нз = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	нз.Отбор.Пользователь.Установить(дляВсехПользователей,истина);
	
	запись = нз.Добавить();
	запись.Пользователь = дляВсехПользователей;
	запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.Раздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.ДатаЗапрета = Дата(2020,06,30);
	
	нз.Записать(Истина);

	
	выборкаВед = Документы.ТБК_ВедомостьОПродажахЗаДень.Выбрать(Дата(2020,07,01),Дата(2020,07,08));
	
	пока выборкаВед.Следующий() Цикл
		
		Если ЗначениеЗаполнено(выборкаВед.ВедомостьПродажНеУчтено_ПКО) Тогда
			Если выборкаВед.ВыемкаДенежныхСредств.Количество() > 0 Тогда
				об = выборкаВед.ВедомостьПродажНеУчтено_ПКО.ПолучитьОбъект();
				об.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ;			
				об.КассаККМ = выборкаВед.КассаККМ;
				об.ДокументОснование = выборкаВед.ВыемкаДенежныхСредств[0].Выемка;
				об.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Конецесли;
		
	КонецЦикла;
	
КонецФункции

Функция М_00005_ДатаЗапрета_Документ_Ваучеры()
	
	актуальнаДатаЗапрета = Дата(2020,06,30);
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета);
КонецФункции

Функция М_00006_РКО_ДДС_Поставщику()
	выборкаВед = Документы.ТБК_ВедомостьОПродажахЗаДень.Выбрать(Дата(2020,07,01),Дата(2020,09,01));
	
	Пока выборкаВед.Следующий() Цикл
		
		Для Каждого стр из выборкаВед.ОплатаПоставщику Цикл
			Если ЗначениеЗаполнено(стр.РКО) Тогда
				об = стр.РКО.ПолучитьОбъект();
				об.Приложение=Документы.ТБК_ВедомостьОПродажахЗаДень.ПолучитьСтатьяДДСОплатаПоставщику();
				об.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецФункции

Функция М_00007_ДатаЗапретИзменениеДанных20200712()
	
	актуальнаДатаЗапрета = Дата(2020,07,12);
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета);
КонецФункции

Функция М_00008_ЧисткаШтрихкодов()
	РегистрыСведений.Штрихкоды.ОбработатьТипыШтрихкодов();	
	РегистрыСведений.Штрихкоды.ЧисткаШтрихкодов();
КонецФункции


Функция М_00009_ДатаЗапретИзменениеДанных20200731()
	актуальнаДатаЗапрета = Дата(2020,07,31);
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 
КонецФункции


Функция М_00010_ВаучерыНаВесьЧек()
	выборкаСкидки = Справочники.СкидкиНаценки.Выбрать();
	
	Пока выборкаСкидки.Следующий() Цикл
		скидка = выборкаСкидки.Ссылка;
		Если скидка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		обСкидка= скидка.ПолучитьОбъект();
		обСкидка.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
		обСкидка.ОбменДанными.Загрузка = Истина;
		обСкидка.Записать();
	КонецЦикла;
	
	
	выборкаУсловияСкидок = Справочники.УсловияПредоставленияСкидокНаценок.Выбрать();
	Пока выборкаУсловияСкидок.Следующий() Цикл
		условиСкидка = выборкаУсловияСкидок.Ссылка;
		Если условиСкидка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если условиСкидка.УсловиеПредоставления <> Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
			Продолжить;
		КонецЕсли;
		
		обУсловиеСкидок = условиСкидка.ПолучитьОбъект();
		обУсловиеСкидок.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
		обУсловиеСкидок.Наименование = "Сумма в документе не менее 0 руб.";
		обУсловиеСкидок.ОбменДанными.Загрузка = Истина;
		обУсловиеСкидок.Записать();
	КонецЦикла;
	
	
КонецФункции

Функция М_00011_ПроведениеСписаний()
	
	актуальнаДатаЗапрета = Дата(2020,07,31);
	
	макет = ПолучитьМакет("М_00011");
	мНомераДокументов =	СтрРазделить(макет.ПолучитьТекст(),Символы.ПС);
		
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого номер из мНомераДокументов цикл
		сДок = Документы.СписаниеТоваров.НайтиПоНомеру(номер,Дата(2020,07,01));
		
		Если ЗначениеЗаполнено(сДок)И(НЕ сДок.Проведен) Тогда 
		//Если ЗначениеЗаполнено(сДок) Тогда 
			сДок.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);	
			Если сДок.Дата < (КонецДня(актуальнаДатаЗапрета)+1) Тогда
				снятьСРегистрацииКОбменуСсылку(сДок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  	
	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 

КонецФункции

Функция М_00012_ПроведениеСписаний_Дубль()
	М_00011_ПроведениеСписаний();
КонецФункции

Функция снятьСРегистрацииКОбменуСсылку(ссылка)
	планы = ПланыОбмена.ОбменРозницаУправлениеТорговлей103.Выбрать();
	Пока планы.Следующий() Цикл
		Если планы.НомерПринятого > 0 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,ссылка);
		КонецЕсли;
	Конеццикла;

КонецФункции

Функция М_00013_ПроставитьПредметРасчета()
	Запрос	=	новый Запрос("ВЫБРАТЬ
	      	 	             |	ВидыНоменклатуры.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	      	 	             |ГДЕ
	      	 	             |	ВидыНоменклатуры.ПризнакПредметаРасчета = &ПризнакПредметаРасчета");
	Запрос.УстановитьПараметр("ПризнакПредметаРасчета",Справочники.ПризнакиПредметовРасчета.ПустаяСсылка());
	Рез = Запрос.Выполнить().Выгрузить();
	
	ПирзнакТовар = Справочники.ПризнакиПредметовРасчета.НайтиПоНаименованию("Товар");
	
	флВсеХорошо = Истина;    
	
	Для каждого Строка из Рез цикл
		Об = Строка.Ссылка.ПолучитьОбъект();
		Об.ПризнакПредметаРасчета = ПирзнакТовар;
		
		Попытка
			Об.Записать();
		Исключение
			#Если Клиент тогда
				Сообщить("Не удалось записать: "+Строка(Об));
			#КонецЕсли 			
			флВсеХорошо = Ложь;
		КонецПопытки; 		
	КонецЦикла;
	
	Если не флВсеХорошо тогда 
		ВызватьИсключение НСтр("ru = 'Ошибка при записи Виды Номенклатуры)'");
	КонецЕсли;
	
КонецФункции

Функция М_00025_ЗагрузкаВаучеров()
	ДокМА	=	Документы.МаркетинговаяАкция.Выбрать();
	Если ДокМА.Следующий() тогда
		Об = ДокМА.ПолучитьОбъект();
		
		Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		      	 	             |	СкидкиНаценки.Ссылка КАК Ссылка,
		      	 	             |	СкидкиНаценки.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
		      	 	             |ИЗ
		      	 	             |	Справочник.СкидкиНаценки КАК СкидкиНаценки
		      	 	             |ГДЕ
		      	 	             |	НЕ СкидкиНаценки.ПометкаУдаления
		      	 	             |
		      	 	             |УПОРЯДОЧИТЬ ПО
		      	 	             |	РеквизитДопУпорядочивания УБЫВ");
		Рез = Запрос.Выполнить().Выгрузить();
		Если Рез.Количество() >0 тогда
			Порядок		=	Рез[0].РеквизитДопУпорядочивания + 1;
			СоздатьВаучерИДобавить("BUYNOW",500,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("BUYNOW+РЕФКОД",500,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 500 Рекомендации",500,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 750 Рекомендации",750,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 1000 Рекомендации",1000,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 500 Переключение",500,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 700 Д.Р.",700,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 500 Д.Р.",500,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 200 рублей",200,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 170 рублей",170,Рез[0].Ссылка,Порядок,ОБ);
			
			Об.Записать();
		КонецЕсли;   		
		
	КонецЕсли;	
КонецФункции

Процедура  СоздатьВаучерИДобавить(Наименование,Сумма,СсылкаВаучер,Порядок,ОБ)
	
	Попытка 
		НовыйВаучер = Справочники.СкидкиНаценки.НайтиПоНаименованию(Наименование);
		Если НовыйВаучер.Пустая() тогда
			НовыйВаучер = Справочники.СкидкиНаценки.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НовыйВаучер,СсылкаВаучер,"Управляемая,СтатусДействия,СпособПредоставления,ОбластьПредоставления");
			
			НовыйВаучер.РеквизитДопУпорядочивания	=	Порядок;
			НовыйВаучер.ЗначениеСкидкиНаценки		=	Сумма;
			НовыйВаучер.Наименование				=	Наименование;
			НовыйВаучер.Записать();
		КонецЕсли;
		
		если об.СкидкиНаценки.Найти(НовыйВаучер,"СкидкаНаценка") = Неопределено тогда
			новаяСтрока	=	Об.СкидкиНаценки.Добавить();
			новаяСтрока.ДатаНачала		=	'20200101';
			новаяСтрока.СкидкаНаценка	=	НовыйВаучер.Ссылка;
		КонецЕсли;
	Исключение
		Сообщить("Не удалось записать ваучер: "+ОписаниеОшибки());
		ВызватьИсключение НСтр("ru = 'Ошибка при записи Скидки Наценки'");
	КонецПопытки;
	
КонецПроцедуры