

Функция НакатитьМиграции() ЭКСПОРТ
	
	Попытка
		Для Каждого миграция из Метаданные.Обработки.ТБК_Миграции.Команды Цикл
			//миграция.
			
			КолПроходов = 1;
			Если ЗначениеЗаполнено(миграция.Комментарий) тогда
				Попытка
					КолПроходов = Число(миграция.Комментарий)
				Исключение
					КолПроходов = 1;
				КонецПопытки;				
			КонецЕсли;
			
			НакатитьМиграцию(миграция.Имя,КолПроходов);
		КонецЦикла
	Исключение
		Сообщить("АААА");
	КонецПопытки;
	
КонецФункции



Функция НакатитьМиграцию(идентификатор, КолПроходов = 1)
	
	нз = РегистрыСведений.ТБКМиграции.СоздатьНаборЗаписей();
	нз.Отбор.Идентификатор.Установить(идентификатор,Истина);
	
	нз.Прочитать();
	

	Попытка
		Если нз.Количество() = 0 Тогда
			

			Выполнить(""+идентификатор+"();");
			
			запись= нз.Добавить();
			запись.ДатаПрименения = ТекущаяДата();
			запись.Применена = 1;
			запись.Идентификатор = идентификатор;
			нз.Записать(Истина);
			
		ИначеЕсли КолПроходов <> 1 и КолПроходов < 99 тогда
			Если нз[0].Применена <> КолПроходов тогда
				Выполнить(""+идентификатор+"();");
			
				 нз[0].Применена = КолПроходов;
				 нз[0].ДатаПрименения = ТекущаяДата();

				 нз.Записать(Истина);
			КонецЕсли;
				
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецФункции




Функция М_00001_ДатаЗапретИзменениеДанных20200701()
	Если НЕ Константы.ИспользоватьДатыЗапретаИзменения.Получить() Тогда
		Константы.ИспользоватьДатыЗапретаИзменения.Установить(Истина);
	КонецЕсли;
	
	дляВсехПользователей=Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
	
	нз = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	нз.Отбор.Пользователь.Установить(дляВсехПользователей,истина);
	
	запись = нз.Добавить();
	запись.Пользователь = дляВсехПользователей;
	запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.Раздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.ДатаЗапрета = Дата(2020,06,30);
	
	нз.Записать(Истина);
КонецФункции

Функция М_00002_ПКО_До_20200706()
	
	выборкаВед = Документы.ТБК_ВедомостьОПродажахЗаДень.Выбрать(Дата(2020,07,01),Дата(2020,07,07));
	
	пока выборкаВед.Следующий() Цикл
		
		Для Каждого стр из выборкаВед.ВыемкаДенежныхСредств Цикл
			Если ЗначениеЗаполнено(стр.ПКО) Тогда
				об = стр.ПКО.ПолучитьОбъект();
				об.Приложение="1.1 Торговая розничная выручка - НАЛ";
				об.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(выборкаВед.ВедомостьПродажНеУчтено_ПКО) Тогда
			об = выборкаВед.ВедомостьПродажНеУчтено_ПКО.ПолучитьОбъект();
			об.Приложение="1.4 Торговая выручка - НЕУЧТЕНКА";
			об.Записать(РежимЗаписиДокумента.Запись);
		Конецесли;
		
	КонецЦикла;
	
КонецФункции

Функция М_00003_ДатаЗапретИзменениеДанных20200701()
	Если НЕ Константы.ИспользоватьДатыЗапретаИзменения.Получить() Тогда
		Константы.ИспользоватьДатыЗапретаИзменения.Установить(Истина);
	КонецЕсли;
	
	дляВсехПользователей=Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
	
	нз = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	нз.Отбор.Пользователь.Установить(дляВсехПользователей,истина);
	
	запись = нз.Добавить();
	запись.Пользователь = дляВсехПользователей;
	запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.Раздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.ДатаЗапрета = Дата(2020,06,30);
	
	нз.Записать(Истина);
КонецФункции

Функция М_00004_ПКО_До_20200708()
	
	
	Если НЕ Константы.ИспользоватьДатыЗапретаИзменения.Получить() Тогда
		Константы.ИспользоватьДатыЗапретаИзменения.Установить(Истина);
	КонецЕсли;
	
	дляВсехПользователей=Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
	
	нз = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	нз.Отбор.Пользователь.Установить(дляВсехПользователей,истина);
	
	запись = нз.Добавить();
	запись.Пользователь = дляВсехПользователей;
	запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.Раздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.ДатаЗапрета = Дата(2020,06,30);
	
	нз.Записать(Истина);

	
	выборкаВед = Документы.ТБК_ВедомостьОПродажахЗаДень.Выбрать(Дата(2020,07,01),Дата(2020,07,08));
	
	пока выборкаВед.Следующий() Цикл
		
		Если ЗначениеЗаполнено(выборкаВед.ВедомостьПродажНеУчтено_ПКО) Тогда
			Если выборкаВед.ВыемкаДенежныхСредств.Количество() > 0 Тогда
				об = выборкаВед.ВедомостьПродажНеУчтено_ПКО.ПолучитьОбъект();
				об.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ;			
				об.КассаККМ = выборкаВед.КассаККМ;
				об.ДокументОснование = выборкаВед.ВыемкаДенежныхСредств[0].Выемка;
				об.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Конецесли;
		
	КонецЦикла;
	
КонецФункции

Функция М_00005_ДатаЗапрета_Документ_Ваучеры()
	
	актуальнаДатаЗапрета = Дата(2020,06,30);
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета);
КонецФункции

Функция М_00006_РКО_ДДС_Поставщику()
	выборкаВед = Документы.ТБК_ВедомостьОПродажахЗаДень.Выбрать(Дата(2020,07,01),Дата(2020,09,01));
	
	Пока выборкаВед.Следующий() Цикл
		
		Для Каждого стр из выборкаВед.ОплатаПоставщику Цикл
			Если ЗначениеЗаполнено(стр.РКО) Тогда
				об = стр.РКО.ПолучитьОбъект();
				об.Приложение=Документы.ТБК_ВедомостьОПродажахЗаДень.ПолучитьСтатьяДДСОплатаПоставщику();
				об.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецФункции

Функция М_00007_ДатаЗапретИзменениеДанных20200712()
	
	актуальнаДатаЗапрета = Дата(2020,07,12);
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета);
КонецФункции

Функция М_00008_ЧисткаШтрихкодов()
	РегистрыСведений.Штрихкоды.ОбработатьТипыШтрихкодов();	
	РегистрыСведений.Штрихкоды.ЧисткаШтрихкодов();
КонецФункции


Функция М_00009_ДатаЗапретИзменениеДанных20200731()
	актуальнаДатаЗапрета = Дата(2020,07,31);
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 
КонецФункции


Функция М_00010_ВаучерыНаВесьЧек()
	выборкаСкидки = Справочники.СкидкиНаценки.Выбрать();
	
	Пока выборкаСкидки.Следующий() Цикл
		скидка = выборкаСкидки.Ссылка;
		Если скидка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		обСкидка= скидка.ПолучитьОбъект();
		обСкидка.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
		обСкидка.ОбменДанными.Загрузка = Истина;
		обСкидка.Записать();
	КонецЦикла;
	
	
	выборкаУсловияСкидок = Справочники.УсловияПредоставленияСкидокНаценок.Выбрать();
	Пока выборкаУсловияСкидок.Следующий() Цикл
		условиСкидка = выборкаУсловияСкидок.Ссылка;
		Если условиСкидка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если условиСкидка.УсловиеПредоставления <> Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
			Продолжить;
		КонецЕсли;
		
		обУсловиеСкидок = условиСкидка.ПолучитьОбъект();
		обУсловиеСкидок.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
		обУсловиеСкидок.Наименование = "Сумма в документе не менее 0 руб.";
		обУсловиеСкидок.ОбменДанными.Загрузка = Истина;
		обУсловиеСкидок.Записать();
	КонецЦикла;
	
	
КонецФункции

Функция М_00011_ПроведениеСписаний()
	
	актуальнаДатаЗапрета = Дата(2020,07,31);
	
	макет = ПолучитьМакет("М_00011");
	мНомераДокументов =	СтрРазделить(макет.ПолучитьТекст(),Символы.ПС);
		
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого номер из мНомераДокументов цикл
		сДок = Документы.СписаниеТоваров.НайтиПоНомеру(номер,Дата(2020,07,01));
		
		Если ЗначениеЗаполнено(сДок)И(НЕ сДок.Проведен) Тогда 
		//Если ЗначениеЗаполнено(сДок) Тогда 
			сДок.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);	
			Если сДок.Дата < (КонецДня(актуальнаДатаЗапрета)+1) Тогда
				снятьСРегистрацииКОбменуСсылку(сДок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  	
	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 

КонецФункции

Функция М_00012_ПроведениеСписаний_Дубль()
	М_00011_ПроведениеСписаний();
КонецФункции

Функция снятьСРегистрацииКОбменуСсылку(ссылка)
	планы = ПланыОбмена.ОбменРозницаУправлениеТорговлей103.Выбрать();
	Пока планы.Следующий() Цикл
		Если планы.НомерПринятого > 0 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,ссылка);
		КонецЕсли;
	Конеццикла;

КонецФункции

Функция М_00013_ПроставитьПредметРасчета()
	Запрос	=	новый Запрос("ВЫБРАТЬ
	      	 	             |	ВидыНоменклатуры.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	      	 	             |ГДЕ
	      	 	             |	ВидыНоменклатуры.ПризнакПредметаРасчета = &ПризнакПредметаРасчета");
	Запрос.УстановитьПараметр("ПризнакПредметаРасчета",Справочники.ПризнакиПредметовРасчета.ПустаяСсылка());
	Рез = Запрос.Выполнить().Выгрузить();
	
	ПирзнакТовар = Справочники.ПризнакиПредметовРасчета.НайтиПоНаименованию("Товар");
	
	флВсеХорошо = Истина;    
	
	Для каждого Строка из Рез цикл
		Об = Строка.Ссылка.ПолучитьОбъект();
		Об.ПризнакПредметаРасчета = ПирзнакТовар;
		
		Попытка
			Об.Записать();
		Исключение
			#Если Клиент тогда
				Сообщить("Не удалось записать: "+Строка(Об));
			#КонецЕсли 			
			флВсеХорошо = Ложь;
		КонецПопытки; 		
	КонецЦикла;
	
	Если не флВсеХорошо тогда 
		ВызватьИсключение НСтр("ru = 'Ошибка при записи Виды Номенклатуры)'");
	КонецЕсли;
	
КонецФункции


Функция М_00014_ГенерацияПользователей()
	Справочники.ФизическиеЛица.ГенерацияЮзеровДляФЛ();
КонецФункции


Функция М_00015_ИнициализацияКонстант()
	
	РегистрыСведений.ТБК_Константы.Установить_Магазин(ОбщегоНазначения.ПолучитьМагазинИзООРП());
	
	РегистрыСведений.ТБК_Константы.Установить_РежимРаботыРасширения("Release");
	
КонецФункции

Функция М_00016_SetBeta()
	
	РегистрыСведений.ТБК_Константы.Установить_Магазин(ОбщегоНазначения.ПолучитьМагазинИзООРП());
	
	//РегистрыСведений.ТБК_Константы.Установить_РежимРаботыРасширения("Beta");
	
КонецФункции

Функция М_00017_SetRelease()
	
	РегистрыСведений.ТБК_Константы.Установить_Магазин(ОбщегоНазначения.ПолучитьМагазинИзООРП());
	
	//РегистрыСведений.ТБК_Константы.Установить_РежимРаботыРасширения("Release");
	
КонецФункции

Функция М_00018_ГенерацияПользователей()
	Справочники.ФизическиеЛица.ГенерацияЮзеровДляФЛ();	
КонецФункции


Функция М_00018_ДатаЗапретИзменениеДанных20200831()
	актуальнаДатаЗапрета = Дата(2020,08,31);
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 
КонецФункции


Функция М_00019_ОтключениеРегламентныхЗаданий()
	Константы.РазрешенаРаботаСНовостями.Установить(Ложь);
	
	ТекущиеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	Для каждого ТекЗ из ТекущиеЗадания цикл
		Если ТекЗ.Использование тогда
			ТекЗ.Использование = Ложь;
			ТекЗ.Записать();
		КонецЕсли;		
	КонецЦикла;

КонецФункции


Функция М_00020_ReadConfiguration()
	
	РежимРаботыРасширения = "Release";
	
	Попытка
		док = Новый ТекстовыйДокумент();
		//док.УстановитьТекст(режимРаботыРасширения);
		док.Прочитать("c:\app\database\Tabakon.Configuration.txt");
		РежимРаботыРасширения = СокрЛП(док.ПолучитьТекст());
	Исключение
	КонецПопытки;
	
	РегистрыСведений.ТБК_Константы.Установить_РежимРаботыРасширения(РежимРаботыРасширения);

КонецФункции

Функция М_00021_RemoveBadDataMart()
	
	РегистрыСведений.Штрихкоды.УдалитьНеВерные_ШтрихкодыУпаковокТоваров();
	
КонецФункции

Функция М_00022_ЧисткаШтрихкодов()
	РегистрыСведений.Штрихкоды.ЧисткаШтрихкодов();
КонецФункции

Функция М_00023_ЧисткаДублейХарактеристик()
	РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ЧисткаДублейХарактеристик();
КонецФункции


Функция М_00024_СозданиеНовойСтатьиВозвратОтПокупателя()
	СтатьяВозврата	=	Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Возврат оплаты покупателю");

	Если не ЗначениеЗаполнено(СтатьяВозврата) тогда
		НоваяСтатья							= Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		НоваяСтатья.Наименование			= "Возврат оплаты покупателю";
		НоваяСтатья.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя;
		Попытка
			НоваяСтатья.Записать();
		Исключение
			ВызватьИсключение НСтр("ru = 'Ошибка при записи СтатьиДвиженияДенежныхСредств)'");
		КонецПопытки;
	КонецЕсли;

КонецФункции


Функция М_00020_ДатаЗапретИзменениеДанных20200930()
	
	актуальнаДатаЗапрета = Дата(2020,09,30);
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 

КонецФункции

Функция М_00023_БлокировкаПользователейБезПароля()
	_пользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();	
	
	Для Каждого пользователь из _Пользователи Цикл
		ЕСЛИ ЛОЖЬ ТОГДА пользователь = ПользователиИнформационнойБазы.НайтиПоИмени(""); КонецЕсли;
		
		если Пользователь.Имя = "Админ"  Тогда
			Продолжить;
		КонецЕсли;
		
		блокируем = ложь;
		
		Если СтрДлина(Пользователь.Имя) < 3 Тогда
			блокируем = истина;
		Иначе
			хвост = СокрЛП(Прав(Пользователь.Имя,2));
			Попытка 
				ч = Число(хвост);
			Исключение
				блокируем = истина;
			Конецпопытки;
		КонецЕсли;
		
		Если блокируем = истина Тогда
			Пользователь.Пароль = "159753";
			Пользователь.ПоказыватьВСпискеВыбора = ложь;
			Пользователь.АутентификацияСтандартная=ЛОЖЬ;
			пользователь.Записать();
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция М_00025_ЗагрузкаВаучеров()
	ДокМА	=	Документы.МаркетинговаяАкция.Выбрать();
	Если ДокМА.Следующий() тогда
		Об = ДокМА.ПолучитьОбъект();
		
		Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		      	 	             |	СкидкиНаценки.Ссылка КАК Ссылка,
		      	 	             |	СкидкиНаценки.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
		      	 	             |ИЗ
		      	 	             |	Справочник.СкидкиНаценки КАК СкидкиНаценки
		      	 	             |ГДЕ
		      	 	             |	НЕ СкидкиНаценки.ПометкаУдаления
		      	 	             |
		      	 	             |УПОРЯДОЧИТЬ ПО
		      	 	             |	РеквизитДопУпорядочивания УБЫВ");
		Рез = Запрос.Выполнить().Выгрузить();
		Если Рез.Количество() >0 тогда
			Порядок		=	Рез[0].РеквизитДопУпорядочивания + 1;
			СоздатьВаучерИДобавить("BUYNOW",500,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("BUYNOW+РЕФКОД",500,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 500 Рекомендации",500,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 750 Рекомендации",750,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 1000 Рекомендации",1000,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 500 Переключение",500,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 700 Д.Р.",700,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 500 Д.Р.",500,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 200 рублей",200,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 170 рублей",170,Рез[0].Ссылка,Порядок,ОБ);
			
			Об.Записать();
		КонецЕсли;   		
		
	КонецЕсли;	
КонецФункции

Процедура  СоздатьВаучерИДобавить(Наименование,Сумма,СсылкаВаучер,Порядок,ОБ)
	
	Попытка 
		НовыйВаучер = Справочники.СкидкиНаценки.НайтиПоНаименованию(Наименование);
		Если НовыйВаучер.Пустая() тогда
			НовыйВаучер = Справочники.СкидкиНаценки.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НовыйВаучер,СсылкаВаучер,"Управляемая,СтатусДействия,СпособПредоставления,ОбластьПредоставления");
			
			НовыйВаучер.РеквизитДопУпорядочивания	=	Порядок;
			НовыйВаучер.ЗначениеСкидкиНаценки		=	Сумма;
			НовыйВаучер.Наименование				=	Наименование;
			НовыйВаучер.Записать();
		КонецЕсли;
		
		если об.СкидкиНаценки.Найти(НовыйВаучер,"СкидкаНаценка") = Неопределено тогда
			новаяСтрока	=	Об.СкидкиНаценки.Добавить();
			новаяСтрока.ДатаНачала		=	'20200101';
			новаяСтрока.СкидкаНаценка	=	НовыйВаучер.Ссылка;
		КонецЕсли;
	Исключение
		Сообщить("Не удалось записать ваучер: "+ОписаниеОшибки());
		ВызватьИсключение НСтр("ru = 'Ошибка при записи Скидки Наценки'");
	КонецПопытки;
	
КонецПроцедуры


Функция М_00026_ОбнулитьЦеныБК()
	Пл = ПланыОбмена.ОбменРозницаУправлениеТорговлей103.НайтиПоКоду("УТ");
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	
	запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения");
	РезДата = Запрос.Выполнить().Выгрузить();
	Если РезДата.Количество() = 0 тогда
		актуальнаДатаЗапрета = Дата(2020,09,30);;
	иначе
		актуальнаДатаЗапрета = РезДата[0].ДатаЗапрета;
	КонецЕсли;


	запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	Номенклатура.Ссылка КАК Ссылка
	      	 	             |ПОМЕСТИТЬ Номенклат
	      	 	             |ИЗ
	      	 	             |	Справочник.Номенклатура КАК Номенклатура
	      	 	             |ГДЕ
	      	 	             |	Номенклатура.Наименование ПОДОБНО ""% БК%""
	      	 	             |;
	      	 	             |
	      	 	             |////////////////////////////////////////////////////////////////////////////////
	      	 	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      	 	             |	ПрименениеЦенНоменклатурыТовары.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ПрименениеЦенНоменклатуры.Товары КАК ПрименениеЦенНоменклатурыТовары,
	      	 	             |	Номенклат КАК Номенклат
	      	 	             |ГДЕ
	      	 	             |	ПрименениеЦенНоменклатурыТовары.Ссылка.Проведен
	      	 	             |	И ПрименениеЦенНоменклатурыТовары.Номенклатура В (Номенклат.Ссылка)
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	ПрименениеЦенНоменклатурыТовары.Ссылка.Дата");
	Рез = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка из Рез цикл
		Об = Строка.Ссылка.ПолучитьОбъект();
		флНадоПровести = Ложь;
		
		Индекс = Об.Товары.Количество() - 1; 
		Пока Индекс >= 0 Цикл
			флНашли = Ложь;
			
			Для каждого СтрокаТовары Из Об.Товары цикл
				Если Прав(СтрокаТовары.Номенклатура.Наименование,3)=" БК" тогда
					Об.Товары.Удалить(СтрокаТовары);
					флНадоПровести	= Истина;
					флНашли			= Истина;
					Прервать;
					
				КонецЕсли;				
			КонецЦикла;
			
			Если не флНашли тогда Прервать; КонецЕсли;
			
			Индекс = Индекс - 1; 
		КонецЦикла;
		
		Если флНадоПровести тогда 
			Попытка
				НачатьТранзакцию();
					Об.Записать(РежимЗаписиДокумента.Проведение);

					ПланыОбмена.УдалитьРегистрациюИзменений(пл,Об.ссылка);
				ЗафиксироватьТранзакцию();

			Исключение
				сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли; 		
	КонецЦикла; 
	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета);
КонецФункции


Функция М_00026_TABAKON_122_ШокМарс()
	//номен = Справочники.Номенклатура.НайтиПоКоду("00048218317");
	//
	//нз = РегистрыСведений.ТБК_Штрихкоды.СоздатьНаборЗаписей();
	//нз.Отбор.Владелец.Установить(номен);
	//нз.Записать(Истина);
	//
	//нз = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	//нз.Отбор.Владелец.Установить(номен);
	//нз.Записать(Истина);

КонецФункции

Функция М_00026_TABAKON_122_ШокМарс_2()
	номен = Справочники.Номенклатура.НайтиПоКоду("00046120055");
	
	нз = РегистрыСведений.ТБК_Штрихкоды.СоздатьНаборЗаписей();
	нз.Отбор.Владелец.Установить(номен);
	нз.Записать(Истина);
	
	нз = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	нз.Отбор.Владелец.Установить(номен);
	нз.Записать(Истина);

КонецФункции


Функция М_00026_TABAKON_122_ШокМарс_3()
	
	мПлохихНоменклатур = Новый Массив;
	мПлохихНоменклатур.Добавить("00046120055");
	мПлохихНоменклатур.Добавить("00046120056");
	мПлохихНоменклатур.Добавить("00046120057");
	
	Для Каждого кодНомн из мПлохихНоменклатур Цикл
		
		номен = Справочники.Номенклатура.НайтиПоКоду(кодНомн);
	
		нз = РегистрыСведений.ТБК_Штрихкоды.СоздатьНаборЗаписей();
		нз.Отбор.Владелец.Установить(номен);
		нз.Записать(Истина);
		
		нз = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		нз.Отбор.Владелец.Установить(номен);
		нз.Записать(Истина);
		
	КонеццИкла;
	

КонецФункции

Функция М_00027_ДатаЗапретИзменениеДанных20201031()
	
	актуальнаДатаЗапрета = Дата(2020,10,31);
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 

КонецФункции

Функция М_00020_ОтчисткаСправочников()	
	Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	ПриходныйКассовыйОрдер.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	      	 	             |ГДЕ
	      	 	             |	ПриходныйКассовыйОрдер.Проведен
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	ПриходныйКассовыйОрдер.Дата УБЫВ");
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() >0 тогда
	
		НужнаяОрганизация = Рез[0].Ссылка.Организация;
		
		Если ЗначениеЗаполнено(НужнаяОрганизация) тогда
			Орг = Справочники.Организации.Выбрать();
			Пока Орг.Следующий() цикл
				Если СокрЛП(Орг.код) = СокрЛП(НужнаяОрганизация.Код) 
					или СокрЛП(Орг.Наименование) = СокрЛП(НужнаяОрганизация.Наименование) тогда
					Продолжить;
				КонецЕсли;
				
				Об = Орг.ПолучитьОбъект();
				Об.Удалить();
			КонецЦикла;
		иначе
			ВызватьИсключение НСтр("ru = 'Ошибка! Не найдена организация'");
		КонецЕсли;
					
		Кассы = Справочники.Кассы.Выбрать();
		Пока Кассы.Следующий() цикл
			Если ЗначениеЗаполнено(Кассы.Магазин) тогда
				Продолжить;	
			КонецЕсли;
			
			Об = Кассы.ПолучитьОбъект();
			Об.Удалить();
		КонецЦикла; 
		
		НужныйМаг = Неопределено;
		
		КассыККМ = Справочники.КассыККМ.Выбрать();
		Пока КассыККМ.Следующий() цикл
			Если ЗначениеЗаполнено(КассыККМ.Магазин) тогда
				НужныйМаг = КассыККМ.Магазин;
				Продолжить;	
			КонецЕсли;
			
			Об = КассыККМ.ПолучитьОбъект();
			Об.Удалить();
		КонецЦикла; 
		
		Маг = Справочники.Магазины.Выбрать();
		Пока Маг.Следующий() цикл
			Если Маг.ИспользоватьПрименениеЦен или НужныйМаг = Маг.Ссылка тогда
				Продолжить;
			КонецЕсли;
			//фикс транзитов
			Запрос	=	Новый запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			      	 	             |	ПеремещениеТоваров.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
			      	 	             |ГДЕ
			      	 	             |	ПеремещениеТоваров.Проведен
			      	 	             |	И (ПеремещениеТоваров.МагазинОтправитель = &Магазин
			      	 	             |			ИЛИ ПеремещениеТоваров.МагазинПолучатель = &Магазин)
			      	 	             |
			      	 	             |УПОРЯДОЧИТЬ ПО
			      	 	             |	ПеремещениеТоваров.Дата УБЫВ");
			Запрос.УстановитьПараметр("Магазин",Маг.Ссылка);
			Если не запрос.Выполнить().Пустой() тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(Маг.Наименование,"Центральный") >0
					или Найти(Маг.Наименование,"Транзит")>0 или Найти(Маг.Наименование,"Офис")>0 тогда
				Продолжить;
			КонецЕсли;

			//        			
			Об = Маг.ПолучитьОбъект();
			Об.Удалить();
		КонецЦикла;	
		
		Склады = Справочники.Склады.Выбрать();
		Пока Склады.Следующий() цикл
			Если Склады.ЭтоГруппа тогда
				Продолжить;
			КонецЕсли;
			
			Запрос	=	Новый запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			      	 	             |	ПеремещениеТоваров.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
			      	 	             |ГДЕ
			      	 	             |	ПеремещениеТоваров.Проведен
			      	 	             |	И (ПеремещениеТоваров.СкладОтправитель = &Склад
			      	 	             |			ИЛИ ПеремещениеТоваров.СкладПолучатель = &Склад)
			      	 	             |
			      	 	             |УПОРЯДОЧИТЬ ПО
			      	 	             |	ПеремещениеТоваров.Дата УБЫВ");
			Запрос.УстановитьПараметр("Склад",Склады.Ссылка);
			если не запрос.Выполнить().Пустой() тогда Продолжить; КонецЕсли;
			
			Запрос	=	Новый запрос("ВЫБРАТЬ
			      	 	             |	Магазины.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Справочник.Магазины КАК Магазины
			      	 	             |ГДЕ
			      	 	             |	(Магазины.СкладПродажи = &Склад
			      	 	             |			ИЛИ Магазины.СкладПоступления = &Склад)");
			Запрос.УстановитьПараметр("Склад",Склады.Ссылка);
			если не запрос.Выполнить().Пустой() тогда Продолжить; КонецЕсли;

			Об = Склады.ПолучитьОбъект();
			Попытка
				Об.Удалить();
			Исключение
				Сообщить(Об);
				ВызватьИсключение НСтр("ru = 'Не удалось удалить склад'");
			КонецПопытки;
		КонецЦикла;
		
	иначе
		ВызватьИсключение НСтр("ru = 'Нет приходников'");
	КонецЕсли;
КонецФункции

Функция М_00027_ФиксВаучеров()
	ДокМА	=	Документы.МаркетинговаяАкция.Выбрать();
	Если ДокМА.Следующий() тогда
		ОбДок = ДокМА.ПолучитьОбъект();

		УслПред	=	Справочники.УсловияПредоставленияСкидокНаценок.НайтиПоНаименованию("Сумма в документе не менее 0 руб.");

		ТБК_ПраваДоступа.СнятьДатуЗапрета();
		
		запрос	=	Новый запрос("ВЫБРАТЬ
		      	 	             |	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета
		      	 	             |ИЗ
		      	 	             |	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения");
		РезДата = Запрос.Выполнить().Выгрузить();
		Если РезДата.Количество() = 0 тогда
			актуальнаДатаЗапрета = Дата(2020,10,30);;
		иначе
			актуальнаДатаЗапрета = РезДата[0].ДатаЗапрета;
		КонецЕсли;
		
		//
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("BUYNOW");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	500;
			Об.Наименование	=	"Ваучер "+об.Наименование;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			об.Записать();
		КонецЕсли;
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("BUYNOW+РЕФКОД");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	500;
			Об.Наименование	=	"Ваучер "+об.Наименование;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;

			об.Записать();
		КонецЕсли;
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 500 Рекомендации");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	500;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
		
			об.Записать();
		КонецЕсли;
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 750 Рекомендации");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	750;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			
			об.Записать();
		КонецЕсли;	
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 1000 Рекомендации");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	1000;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			
			об.Записать();
		КонецЕсли;	
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 500 Переключение");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;			
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	500;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			
			об.Записать();
		КонецЕсли;	
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 700 Д.Р.");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма; 			
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	700;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			
			об.Записать();
		КонецЕсли;	
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 500 Д.Р.");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	500;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			
			об.Записать();
		КонецЕсли;
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 200 рублей");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	200;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			
			об.Записать();
		КонецЕсли;
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 170 рублей");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	170;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			
			об.Записать();
		КонецЕсли;		
		//	
		ОбДок.Записать(РежимЗаписиДокумента.Проведение);
		
		
		ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета);
	КонецЕсли;
КонецФункции


Функция М_00021_СменаСНО_20210101()
	ОрганизацияПДВ	=	Справочники.Организации.НайтиПоНаименованию("ИП Пинкасович Д.В.");
	
	СпрОрганизация	=	Справочники.Организации.Выбрать();
	флВсеХорошо = Истина;
	Пока СпрОрганизация.Следующий() цикл
		
		Если СпрОрганизация.Ссылка	=	ОрганизацияПДВ.Ссылка тогда
			МенеджерЗаписи = РегистрыСведений.ПрименениеСистемНалогообложения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период 					= '20210101';
			МенеджерЗаписи.Организация 				= СпрОрганизация.Ссылка;
			МенеджерЗаписи.СистемаНалогообложения 	= Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
			МенеджерЗаписи.ОсвобожденОтНДС			= Ложь;
			Попытка
				МенеджерЗаписи.Записать(Истина); 	
			Исключение
				#Если Клиент тогда
					Сообщить(ОписаниеОшибки());
				#КонецЕсли 
				флВсеХорошо = Ложь;;
			КонецПопытки;
		иначе
			МенеджерЗаписи = РегистрыСведений.ПрименениеСистемНалогообложения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период 					= '20210101';
			МенеджерЗаписи.Организация 				= СпрОрганизация.Ссылка;
			МенеджерЗаписи.СистемаНалогообложения 	= Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход;
			МенеджерЗаписи.ОсвобожденОтНДС			= Истина;
			Попытка
				МенеджерЗаписи.Записать(Истина); 	
			Исключение
				#Если Клиент тогда
					Сообщить(ОписаниеОшибки());
				#КонецЕсли 
				флВсеХорошо = ложь;;
			КонецПопытки;
			
		КонецЕсли;    	
	КонецЦикла;
	
	Если не флВсеХорошо тогда 
		ВызватьИсключение НСтр("ru = 'Ошибка при записи СНО'");
	КонецЕсли;
КонецФункции

Функция М_00028_СозданиеПрофиляТБК_Кассир()
	НоваяРоль	=	Справочники.ИдентификаторыОбъектовРасширений.НайтиПоНаименованию("ТБК кассир (Роль)");
	
	Если ЗначениеЗаполнено(НоваяРоль) тогда
	
		ПрофильТБК = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию("ТБК_Кассир");
		
		Если ПрофильТБК.Пустая() тогда		
			ПрофильК = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию("Кассир");
			
			НовыйЭЛ = ПрофильК.Скопировать();
			НовыйЭЛ.Наименование = "ТБК_Кассир";
			
			НР = НовыйЭЛ.Роли.Добавить();
			НР.Роль = НоваяРоль;

			НовыйЭЛ.Записать();			
			ПрофильТБК =  НовыйЭЛ.Ссылка;
		КонецЕсли; 
		
		//Изменение групп доступа
		//1 Удаляем из админов всех кроме админов
		Админ 						= Справочники.Пользователи.НайтиПоНаименованию("Админ");
		ГруппаДоступа 				= Справочники.ГруппыДоступа.НайтиПоНаименованию("Администраторы").ПолучитьОбъект();
		ГруппаДоступа.Пользователи.Очистить();
		НоваяСтрока					= ГруппаДоступа.Пользователи.Добавить();
		НоваяСтрока.Пользователь 	= Админ;
		ГруппаДоступа.Записать();

		//2 Добавляем всех в кассиры
		ГруппаДоступа 				= Справочники.ГруппыДоступа.НайтиПоНаименованию("Кассир");
		Если ГруппаДоступа.Пустая() тогда
			ГруппаДоступа = Справочники.ГруппыДоступа.СоздатьЭлемент();
			ГруппаДоступа.Наименование	= "Кассир";
			ГруппаДоступа.Профиль		= ПрофильТБК;
			ГруппаДоступа.Записать();
		иначе
			ГруппаДоступа = ГруппаДоступа.ПолучитьОбъект();
		КонецЕсли;
		
		ГруппаДоступа.Пользователи.Очистить();
		СпрПользователи = Справочники.Пользователи.Выбрать();
		Пока СпрПользователи.Следующий() цикл
			Если СпрПользователи.Ссылка = Админ или СпрПользователи.ПометкаУдаления тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока					= ГруппаДоступа.Пользователи.Добавить();
			НоваяСтрока.Пользователь 	= СпрПользователи.Ссылка; 	
		КонецЦикла;
		ГруппаДоступа.Профиль	=	ПрофильТБК;
		ГруппаДоступа.Записать();
	иначе
		ВызватьИсключение НСтр("ru = 'Не найдена роль: ТБК кассир (Роль)'");
	КонецЕсли;                   	
	
КонецФункции


Функция М_00029_ДатаЗапретИзменениеДанных20201130()
	
	текущаяДата = Дата(1990,01,01);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	MAX(ДатыЗапретаИзменения.ДатаЗапрета) КАК ДатаЗапрета
	               |ИЗ
	               |	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения";
	рез =Запрос.Выполнить().Выбрать();
	Если рез.Следующий() Тогда
		текущаяДата = рез.ДатаЗапрета;
	Конецесли;
	
	актуальнаДатаЗапрета = Дата(2020,11,30);
	
	Если текущаяДата>актуальнаДатаЗапрета Тогда
		актуальнаДатаЗапрета=текущаяДата;
	КонецЕсли;
	
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 

	
КонецФункции

Функция М_00030_УдалениеНеверныхШтрихкодов()

	ТЗНеверныеШК = Новый ТаблицаЗначений;
	ТЗНеверныеШК.Колонки.Добавить("НеверныйШК");
	ТЗНеверныеШК.Колонки.Добавить("НевернаяНоменклатура");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "7460402100396";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Сигариллы Captain Black (8) Tip Dark cream");
	
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46241597";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Vogue Классик Моментс");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46241580";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Vogue Микс Моментс");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46233240";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Kent Nanotek 2.0 White");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "4606203102662";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Табак Bali Mellow Virginia (40 гр)");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46209368";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Glamour №1 Amber");

	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "4012922851611";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Chapman Brown");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46233219";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Кент HDI Силвер");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46233202";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Кент HDI Блуе");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278678567";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Ягодный Рай");

	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278678604";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Персиковый Рай");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278679762";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Кокосовое Молоко");

	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278678574";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Банановый Лёд");

	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278679793";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Фруктовый Чай");

	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278678529";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Ананасовый Лёд");

	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278679724";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Лёд Гуавы");

	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278678512";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Фруктовый Взрыв");
		
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278678550";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Манговый Лёд"); 
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "8050847748438";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Дисплей с 9 солнцезащитными очками OBP-9A ПРОМО"); 
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "2900054656957";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Сигариллы Биг Фут(5*8) БК");

	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46233585";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Ява Золотая Классика");   
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "4606203096541";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Честерфильд Блю");	
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46233585";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Ява Белое золото Классическая 100"); 	
	
	
	Для каждого Строка из ТЗНеверныеШК цикл
		нз = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	
		нз.Отбор.Штрихкод.Установить(Строка.НеверныйШК);
		нз.Отбор.Владелец.Установить(Строка.НевернаяНоменклатура);
		нз.Записать(); 
		
		нз = РегистрыСведений.ТБК_Штрихкоды.СоздатьНаборЗаписей();
	
		нз.Отбор.Штрихкод.Установить(Строка.НеверныйШК);
		нз.Отбор.Владелец.Установить(Строка.НевернаяНоменклатура);
		нз.Записать(); 
	КонецЦикла;  	
КонецФункции

Функция М_00031_ЗагрузкаПравилКорреспондента()
	МакетПравил = ПолучитьМакет("ПравилаОбменаКорреспондента");

	// Получаем имя временного файла в локальной ФС на сервере.
	ИмяВременногоФайлаКорреспондента = ПолучитьИмяВременногоФайла("xml");
	
	// Получаем файл правил для зачитки.
	//ДвоичныеДанныеКорреспондента = ДвоичныеДанныеИзМакетаКонфигурации(Отказ, Запись.ИмяПланаОбмена, Запись.ИмяМакетаПравилКорреспондента);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml"); 
	МакетПравил.Записать(ИмяВременногоФайла);
	
	ДвоичныеДанныеКорреспондента = Новый ДвоичныеДанные(ИмяВременногоФайла);
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);


	ДвоичныеДанныеКорреспондента.Записать(ИмяВременногоФайлаКорреспондента);
	
	// Зачитываем правила конвертации.
	КонвертацияОбъектовИнформационныхБаз = Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
	
	// свойства обработки
	КонвертацияОбъектовИнформационныхБаз.РежимОбмена = "Загрузка";
	КонвертацияОбъектовИнформационныхБаз.ИмяПланаОбменаВРО = "ОбменРозницаУправлениеТорговлей103";
	КонвертацияОбъектовИнформационныхБаз.КлючСообщенияЖурналаРегистрации = ОбменДаннымиСервер.СобытиеЖурналаРегистрацииЗагрузкаПравилДляОбменаДанными();
	
	// методы обработки
	ПравилаЗачитанныеКорреспондента = КонвертацияОбъектовИнформационныхБаз.ПравилаОбмена(ИмяВременногоФайлаКорреспондента);
	
	УдалитьФайлы(ИмяВременногоФайлаКорреспондента);

	//Запись
	Запись = РегистрыСведений.ПравилаДляОбменаДанными.СоздатьНаборЗаписей();
	Запись.Отбор.ВидПравил.Установить(Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов);
	Запись.Прочитать();
	
	Запись[0].ПравилаXMLКорреспондента = Новый ХранилищеЗначения(ДвоичныеДанныеКорреспондента, Новый СжатиеДанных());
	Запись[0].ПравилаЗачитанныеКорреспондента = Новый ХранилищеЗначения(ПравилаЗачитанныеКорреспондента);
	
	Запись.Записать();
	
КонецФункции

Функция М_00032_ДатаЗапретИзменениеДанныхОбщая()
	
	текущаяДата = Дата(1990,01,01);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	MAX(ДатыЗапретаИзменения.ДатаЗапрета) КАК ДатаЗапрета
	               |ИЗ
	               |	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения";
	рез =Запрос.Выполнить().Выбрать();
	Если рез.Следующий() Тогда
		текущаяДата = рез.ДатаЗапрета;
	Конецесли;
	
	актуальнаДатаЗапрета = Дата(2023,04,30);
	
	Если текущаяДата>актуальнаДатаЗапрета Тогда
		актуальнаДатаЗапрета=текущаяДата;
	КонецЕсли;
	
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 

	
КонецФункции


Функция М_00033_УбратьНДСИзНоменклатуры()
	СтавкаБезНДС =  Перечисления.СтавкиНДС.БезНДС;
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	Номенклатура.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Справочник.Номенклатура КАК Номенклатура
	      	 	             |ГДЕ
	      	 	             |	Номенклатура.СтавкаНДС <> &СтавкаНДС
	      	 	             |	И НЕ Номенклатура.ПометкаУдаления");
	Запрос.УстановитьПараметр("СтавкаНДС",СтавкаБезНДС);
	
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого Строка из рез цикл
		Попытка
			Об = Строка.Ссылка.ПолучитьОбъект();
			Об.СтавкаНДС	=	СтавкаБезНДС;
			Об.Записать();
		Исключение
			ВызватьИсключение НСтр("ru = 'Не удалось записать номенклатуру!'"); 
		КонецПопытки;
	КонецЦикла;
	
КонецФункции

Функция М_00034_ОбнулениеОстатков()
	НужнаяДата = '20210305';

	
	Корректировка				=	Документы.КорректировкаРегистров.СоздатьДокумент();
	Корректировка.Дата			= 	НужнаяДата;
	Корректировка.Комментарий 	= "Обнуление регистра ТоварыНаСкладах на дату: "+НужнаяДата;
	Корректировка.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("Админ");
	
	Рег							= Корректировка.ТаблицаРегистров.Добавить();
	Рег.Имя 					= "ТоварыНаСкладах";
	
	запрос	=	новый запрос;
	Запрос.Текст	=	"ВЫБРАТЬ
	            	 	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	            	 	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	            	 	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	            	 	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
	            	 	|ИЗ
	            	 	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&дата, ) КАК ТоварыНаСкладахОстатки";

	Запрос.УстановитьПараметр("Дата",НужнаяДата);

	Рез	=	Запрос.Выполнить().Выгрузить();
	
	Ном	=	0;
	Для каждого строка из Рез цикл
		Ном=Ном+1;		
				
		СтрокаРег	=	Корректировка.Движения.ТоварыНаСкладах.Добавить();
		
		СтрокаРег.Регистратор	=	Корректировка;
		СтрокаРег.ВидДвижения	=	ВидДвиженияНакопления.Расход;	
		СтрокаРег.Активность	=	Истина;
		СтрокаРег.Период		=	НужнаяДата;
		
		ЗаполнитьЗначенияСвойств(СтрокаРег,Строка); 		
	КонецЦикла;
	
	Попытка
		Корректировка.Записать(); 		
		Сообщить("Записана корректировка "+Корректировка);
		//Форма=Корректировка.ПолучитьФорму("ФормаДокумента");
		//Форма.Открыть();
	Исключение
		ВызватьИсключение НСтр("ru = 'Не удалось записать корректировку по обнулению остатков!'");
	КонецПопытки;

	
КонецФункции

Функция М_00035_ПровестиОприходованиеПоОстаткам()
	//Запрос	=	Новый запрос("ВЫБРАТЬ
	//      	 	             |	ОприходованиеТоваров.Ссылка КАК Ссылка
	//      	 	             |ИЗ
	//      	 	             |	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
	//      	 	             |ГДЕ
	//      	 	             |	ОприходованиеТоваров.Комментарий ПОДОБНО &Комментарий
	//      	 	             |	И НЕ ОприходованиеТоваров.ПометкаУдаления");
	//Запрос.УстановитьПараметр("Комментарий","Выравнивание остатков"); 	
	//Рез = Запрос.Выполнить().Выгрузить();
	//
	//Если Рез.Количество() <> 1 тогда
	//	ВызватьИсключение НСтр("ru = 'Не найдено оприходование'");
	//иначе		
	//	
	//	Об = рез[0].Ссылка.ПолучитьОбъект();
	//	Если Об.Проведен тогда
	//		Попытка
	//			Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//		Исключение
	//			ВызватьИсключение НСтр("ru = 'Не удалось распровести оприходование!'");
	//		КонецПопытки;
	//	КонецЕсли;
	//	
	//	Запрос	=	новый запрос("ВЫБРАТЬ
	//	      	 	             |	КорректировкаРегистров.Ссылка КАК Ссылка
	//	      	 	             |ИЗ
	//	      	 	             |	Документ.КорректировкаРегистров КАК КорректировкаРегистров
	//	      	 	             |ГДЕ
	//	      	 	             |	КорректировкаРегистров.Комментарий ПОДОБНО &Комментарий");
	//	Запрос.УстановитьПараметр("Комментарий","Выравнивание остатков");
	//	
	//	Если не запрос.Выполнить().Пустой() тогда 
	//		//ВызватьИсключение НСтр("ru = 'Корректировка уже существует!'");
	//		Возврат истина;
	//	КонецЕсли;
	//		
	//	НужнаяДата = рез[0].Ссылка.дата;
	//
	//	Корректировка				=	Документы.КорректировкаРегистров.СоздатьДокумент();
	//	Корректировка.Дата			= 	НужнаяДата;
	//	Корректировка.Комментарий 	= 	"Выравнивание остатков";
	//	Корректировка.Ответственный = 	 Справочники.Пользователи.НайтиПоНаименованию("Админ");
	//	
	//	Рег							= Корректировка.ТаблицаРегистров.Добавить();
	//	Рег.Имя 					= "ТоварыНаСкладах";
	//	
	//	Для каждого строка из рез[0].Ссылка.Товары цикл
	//				
	//		СтрокаРег	=	Корректировка.Движения.ТоварыНаСкладах.Добавить();
	//		
	//		СтрокаРег.Регистратор	=	Корректировка;
	//		СтрокаРег.ВидДвижения	=	ВидДвиженияНакопления.Приход;	
	//		СтрокаРег.Активность	=	Истина;
	//		СтрокаРег.Период		=	НужнаяДата;
	//		СтрокаРег.Склад			=	рез[0].Ссылка.Склад;
	//		
	//		ЗаполнитьЗначенияСвойств(СтрокаРег,Строка); 		
	//	КонецЦикла;
	//	
	//	Попытка
	//		Корректировка.Записать(); 		
	//		Сообщить("Записана корректировка "+Корректировка);
	//		//Форма=Корректировка.ПолучитьФорму("ФормаДокумента");
	//		//Форма.Открыть();
	//	Исключение
	//		ВызватьИсключение НСтр("ru = 'Не удалось записать корректировку по обнулению остатков!'");
	//	КонецПопытки;

	//	
	//КонецЕсли;  

	
КонецФункции

Функция М_00036_ВводЗаказовПокупателей()
	Константы.ИспользоватьЗаказыПокупателей.Установить(Истина);
	Константы.ИспользоватьОбменССайтом.Установить(Истина);	
	
	Запрос	=	новый Запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	НЕ ЗаказПокупателя.ИнтернетЗаказ");
	рез = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка из Рез цикл
		Об = Строка.Ссылка.ПолучитьОбъект();
		Об.УстановитьНовыйНомер();
		Попытка
			Об.записать();
			об.УстановитьПометкуУдаления(Истина);
		Исключение
		КонецПопытки;  		
	КонецЦикла;
КонецФункции

Функция М_00037_ЗагрузкаПравилОбмена()
	
	МакетПравил = ПолучитьМакет("ПравилаОбмена");

	// Получаем имя временного файла в локальной ФС на сервере.
	ИмяВременногоФайла_Правила = ПолучитьИмяВременногоФайла("xml");
	
	// Получаем файл правил для зачитки.
	//ДвоичныеДанныеКорреспондента = ДвоичныеДанныеИзМакетаКонфигурации(Отказ, Запись.ИмяПланаОбмена, Запись.ИмяМакетаПравилКорреспондента);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml"); 
	МакетПравил.Записать(ИмяВременногоФайла);
	
	ДвоичныеДанные_Правила = Новый ДвоичныеДанные(ИмяВременногоФайла);
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);


	ДвоичныеДанные_Правила.Записать(ИмяВременногоФайла_Правила);
	
	// Зачитываем правила конвертации.
	КонвертацияОбъектовИнформационныхБаз = Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
	
	// свойства обработки
	//КонвертацияОбъектовИнформационныхБаз.РежимОбмена = "Загрузка";
	КонвертацияОбъектовИнформационныхБаз.ИмяПланаОбменаВРО = "ОбменРозницаУправлениеТорговлей103";
	КонвертацияОбъектовИнформационныхБаз.КлючСообщенияЖурналаРегистрации = ОбменДаннымиСервер.СобытиеЖурналаРегистрацииЗагрузкаПравилДляОбменаДанными();
	
	// методы обработки
	ПравилаЗачитанные_Правила = КонвертацияОбъектовИнформационныхБаз.ПравилаОбмена(ИмяВременногоФайла_Правила);
	
	УдалитьФайлы(ИмяВременногоФайла_Правила);

	//Запись
	Запись = РегистрыСведений.ПравилаДляОбменаДанными.СоздатьНаборЗаписей();
	Запись.Отбор.ВидПравил.Установить(Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов);
	Запись.Прочитать();
	
	Запись[0].ПравилаXML = Новый ХранилищеЗначения(ДвоичныеДанные_Правила, Новый СжатиеДанных());
	Запись[0].ПравилаЗачитанные = Новый ХранилищеЗначения(ПравилаЗачитанные_Правила);
	
	Запись.Записать();
КонецФункции

Функция М_00038_ПроставитьКонстантуИспользоватьАвтоСкидки()
	Константы.ИспользоватьАвтоматическиеСкидкиВПродажах.Установить(Истина);
КонецФункции

Функция М_00039_ФиксУценки()
	Рег = РегистрыСведений.КомментарииСтатистики.СоздатьНаборЗаписей();
	Рег.Прочитать();
	
	Для каждого СТрока из Рег цикл
		Строка.Наименование	=	СтрЗаменить(Строка.Наименование,"загружен","");
	КонецЦикла;
	
	Рег.Записать();	
КонецФункции

Функция М_00040_УдалитьНеНужнуюКорректировку()
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	КорректировкаРегистров.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.КорректировкаРегистров КАК КорректировкаРегистров
	      	 	             |ГДЕ
	      	 	             |	КорректировкаРегистров.Дата = &Дата
	      	 	             |	И КорректировкаРегистров.Комментарий ПОДОБНО &Комментарий");
	Запрос.УстановитьПараметр("Комментарий","Выравнивание остатков");
	Запрос.УстановитьПараметр("Дата",'20220505');
	Рез = Запрос.Выполнить().Выгрузить();
	Если рез.Количество() = 1 тогда
		Об	=	рез[0].Ссылка.ПолучитьОбъект();
		Об.Удалить();
	КонецЕсли;

КонецФункции

Функция М_00041_ИзменитьПутьFTP()
	Рег = РегистрыСведений.НастройкиТранспортаОбменаДанными.СоздатьНаборЗаписей();
	Рег.Прочитать();
	
	Для каждого Строка из Рег цикл
		Строка.FTPСоединениеПуть	=	СтрЗаменить(Строка.FTPСоединениеПуть,"tabakon","tbkon");		
	КонецЦикла;
	Рег.Записать();
КонецФункции

Функция М_00042_СформироватьВедомости()
	
	датаН = '20220926';
	датаК = '20220927';

	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	      	 	             |ГДЕ
	      	 	             |	ОтчетОРозничныхПродажах.Дата МЕЖДУ &ДатаНач И &ДатаКон
	      	 	             |	И ОтчетОРозничныхПродажах.Проведен");
	Запрос.УстановитьПараметр("ДатаНач",НачалоДня(датаН));
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(ДатаК));
	
	Рез = Запрос.Выполнить().Выгрузить();

	Для каждого СТрока из Рез цикл
		
		ЗапросВед	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		         	 	             |	ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.Ссылка КАК Ссылка
		         	 	             |ИЗ
		         	 	             |	Документ.ТБК_ВедомостьОПродажахЗаДень.ОтчетыОРозничныхПродажах КАК ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах
		         	 	             |ГДЕ
		         	 	             |	ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах = &ОтчетОРозничныхПродажах
		         	 	             |	И НЕ ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.Ссылка.ПометкаУдаления
		         	 	             |
		         	 	             |УПОРЯДОЧИТЬ ПО
		         	 	             |	ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.Ссылка.Дата");
		ЗапросВед.УстановитьПараметр("ОтчетОРозничныхПродажах",СТрока.Ссылка);
		Если ЗапросВед.Выполнить().Пустой() тогда
			НовыйДок = Документы.ТБК_ВедомостьОПродажахЗаДень.СоздатьДокумент();
			НовыйДок.Дата			=	КонецДня(датаН);
			НовыйДок.кассаККМ		= СТрока.Ссылка.КассаККМ;	
			НовыйДок.Магазин		= СТрока.Ссылка.Магазин; 
			НовыйДок.Склад			= СТрока.Ссылка.Магазин.СкладПродажи; 

			
			Запрос = Новый Запрос;
		
			Запрос.Текст = "";
		               
		
			Запрос.Текст = "ВЫБРАТЬ
			               |	ОтчетОРозничныхПродажах.Ссылка КАК ОтчетОРозничныхПродажах,
			               |	ОтчетОРозничныхПродажах.СуммаДокумента КАК СуммаДокумента,
			               |	ЕСТЬNULL(ОтчетОРозничныхПродажах.СуммаВозвратов, 0) - ЕСТЬNULL(-ПоБанку.Возврат, 0) КАК ВозвратОтПокупателяНал,
			               |	ОтчетОРозничныхПродажах.СуммаОплатыНаличных КАК ОплатаНаличными,
			               |	ПоБанку.Оплата КАК ОплатаПоБанковскимКартам,
			               |	-ПоБанку.Возврат КАК ВозвратОтПокупателяБезНал
			               |ИЗ
			               |	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
			               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			               |			ОплатаПоБанку.Ссылка КАК Ссылка,
			               |			СУММА(ВЫБОР
			               |					КОГДА ОплатаПоБанку.Сумма > 0
			               |						ТОГДА ОплатаПоБанку.Сумма
			               |					ИНАЧЕ 0
			               |				КОНЕЦ) КАК Оплата,
			               |			СУММА(ВЫБОР
			               |					КОГДА ОплатаПоБанку.Сумма < 0
			               |						ТОГДА ОплатаПоБанку.Сумма
			               |					ИНАЧЕ 0
			               |				КОНЕЦ) КАК Возврат
			               |		ИЗ
			               |			Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОплатаПоБанку
			               |		
			               |		СГРУППИРОВАТЬ ПО
			               |			ОплатаПоБанку.Ссылка) КАК ПоБанку
			               |		ПО (ПоБанку.Ссылка = ОтчетОРозничныхПродажах.Ссылка)
			               |ГДЕ
			               |	ОтчетОРозничныхПродажах.Проведен = ИСТИНА
			               |	И ОтчетОРозничныхПродажах.Дата >= &ДатаН
			               |	И ОтчетОРозничныхПродажах.Дата <= &ДатаК
			               |	И ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ";
			
			Запрос.УстановитьПараметр("ДатаН",НачалоДня(НовыйДок.Дата));
			Запрос.УстановитьПараметр("ДатаК",КонецДня(НовыйДок.Дата));
			Запрос.УстановитьПараметр("КассаККМ",НовыйДок.КассаККМ);
			
			НовыйДок.ОтчетыОРозничныхПродажах.Очистить();
			
			отчетыПоПродажам = Запрос.Выполнить().Выгрузить();
			//Изменил Вик 2022-09-23
			//Объект.ОтчетыОРозничныхПродажах.Загрузить(отчетыПоПродажам);
			Для каждого Строка из отчетыПоПродажам цикл
				Запрос	=	Новый Запрос("ВЫБРАТЬ
				      	 	             |	ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.Ссылка КАК Ссылка
				      	 	             |ИЗ
				      	 	             |	Документ.ТБК_ВедомостьОПродажахЗаДень.ОтчетыОРозничныхПродажах КАК ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах
				      	 	             |ГДЕ
				      	 	             |	ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах = &ОтчетОРозничныхПродажах
				      	 	             |	И ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.Ссылка.Ссылка <> &Ссылка
				      	 	             |	И НЕ ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.Ссылка.ПометкаУдаления");
				
				Запрос.УстановитьПараметр("Ссылка",НовыйДок.Ссылка);
				Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах",Строка.ОтчетОРозничныхПродажах);
				
				Если Запрос.Выполнить().Пустой() тогда
					НоваяСтрока	=	НовыйДок.ОтчетыОРозничныхПродажах.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				КонецЕсли;		
			КонецЦикла;	
			Запрос.Текст="ВЫБРАТЬ
				             |	ВозвратТоваровОтПокупателя.Ссылка КАК Ссылка
				             |ИЗ
				             |	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
				             |ГДЕ
				             |	ВозвратТоваровОтПокупателя.Проведен = ИСТИНА
				             |	И ВозвратТоваровОтПокупателя.Дата >= &ДатаН
				             |	И ВозвратТоваровОтПокупателя.Дата <= &ДатаК
				             |	И ВозвратТоваровОтПокупателя.КассаККМ = &КассаККМ";
			Запрос.УстановитьПараметр("ДатаН",НачалоДня(НовыйДок.Дата));
			Запрос.УстановитьПараметр("ДатаК",КонецДня(НовыйДок.Дата));
			Запрос.УстановитьПараметр("КассаККМ",НовыйДок.КассаККМ);

			
			Рез = Запрос.Выполнить().Выгрузить();
			возвратОтПокупателяНАЛ 		= 0;
			возвратОтПокупателяКарта	= 0;
			Для каждого Строка из Рез цикл		
				возвратОтПокупателяНАЛ   = возвратОтПокупателяНАЛ   + ПолучитьСуммуНал(Строка.Ссылка);
				возвратОтПокупателяКарта = возвратОтПокупателяКарта + ПолучитьСуммуКарта(Строка.Ссылка);
			КонецЦикла;	
			
			отчетыПоПродажам.Свернуть("","СуммаДокумента,ВозвратОтПокупателяНал,ОплатаНаличными,ОплатаПоБанковскимКартам,ВозвратОтПокупателяБезНал");
			
			Если отчетыПоПродажам.Количество() = 1 Тогда
				ЗаполнитьЗначенияСвойств(НовыйДок, отчетыПоПродажам[0],"ВозвратОтПокупателяНал,ОплатаНаличными,ОплатаПоБанковскимКартам,ВозвратОтПокупателяБезНал");
				
				
				//Изменил Вик 2021-11-15
				// возвратОтПокупателяНАЛ и возвратОтПокупателяКарта не должны попадать в выручку
				//Объект.ВыручкаЗаСменуПоКассе = 
				//	Объект.ОплатаНаличными -Объект.ВозвратОтПокупателяНал 
				//   +Объект.ОплатаПоБанковскимКартам - Объект.ВозвратОтПокупателяБезНал
				//;
				//Объект.ВозвратОтПокупателяНал 		= Объект.ВозвратОтПокупателяНал    + возвратОтПокупателяНАЛ;
				//Объект.ВозвратОтПокупателяБезНал 	= Объект.ВозвратОтПокупателяБезНал + возвратОтПокупателяКарта;

				
				НовыйДок.ВыручкаЗаСменуПоКассе = 
					НовыйДок.ОплатаНаличными 
				   +НовыйДок.ОплатаПоБанковскимКартам - НовыйДок.ВозвратОтПокупателяБезНал
				; 
				НовыйДок.ОплатаПоБанковскимКартам		= НовыйДок.ОплатаПоБанковскимКартам - НовыйДок.ВозвратОтПокупателяБезНал;
				
				НовыйДок.ВозвратОтПокупателяНал 		= возвратОтПокупателяНАЛ;
				НовыйДок.ВозвратОтПокупателяБезНал 	= возвратОтПокупателяКарта;
				//КонецВик
			КонецЕсли;
		
			Запрос = Новый Запрос;
		
			Запрос.Текст = "";

			Запрос.УстановитьПараметр("ДатаН",НачалоДня(НовыйДок.Дата));
			Запрос.УстановитьПараметр("ДатаК",КонецДня(НовыйДок.Дата));
			Запрос.УстановитьПараметр("КассаККМ",НовыйДок.КассаККМ);
			Запрос.УстановитьПараметр("Неучтенка", "1.4 Торговая выручка - НЕУЧТЕНКА");
			
			ЗаполнитьВыемку(НовыйДок);

		
		
			СуммаВыемки = 0;
			Для Каждого стр из НовыйДок.ВыемкаДенежныхСредств Цикл
				Если НЕ ЗначениеЗаполнено(стр.ПКО) Тогда
					
					СтруктураОснования = Новый Структура;
					СтруктураОснования.Вставить("ДокументОснования", стр.Выемка);
					СтруктураОснования.Вставить("Касса", НовыйДок.КассаККМ);
					
					//СоздатьПКО_ВыручкаНаличка(1,СтруктураОснования);
					стр.ПКО = СоздатьПКО_ВыручкаНаличка(
						НовыйДок.Дата,
						НовыйДок.КассаККМ, 
						стр.Выемка,
						стр.Сумма, 
						НовыйДок.ВыручкаЗаСменуПоКассе_Комментарий);
					//стр.ПКО = нПКО.Ссылка;
				КонецЕсли;
				СуммаВыемки = СуммаВыемки + стр.Сумма;
			КонецЦикла;
			ЗаполнитьВыемку(НовыйДок);
		
			НовыйДок.НаличныеКСдаче = 0
			+НовыйДок.ОплатаНаличными        //1
			+НовыйДок.ВедомостьПродажНеУчтено      //2
			-НовыйДок.ВозвратОтПокупателяНал       //4
			-НовыйДок.РасходыОтдела			     //5
			-НовыйДок.ЗП_Продавца;				     //6

			
			
			Если НовыйДок.Продавцы.Количество() = 0 тогда
				Для каждого СтрокаООРП из НовыйДок.ОтчетыОРозничныхПродажах цикл
					Запрос	=	Новый Запрос("ВЫБРАТЬ
					      	 	             |	ОтчетОРозничныхПродажахТовары.Продавец КАК Продавец,
					      	 	             |	ВЫБОР
					      	 	             |		КОГДА ОтчетОРозничныхПродажахТовары.Продавец = ОтчетОРозничныхПродажахТовары.Ссылка.Ответственный.ФизическоеЛицо
					      	 	             |			ТОГДА ИСТИНА
					      	 	             |		ИНАЧЕ ЛОЖЬ
					      	 	             |	КОНЕЦ КАК ЭтоГлавныйПродавец
					      	 	             |ИЗ
					      	 	             |	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
					      	 	             |ГДЕ
					      	 	             |	ОтчетОРозничныхПродажахТовары.Ссылка = &Ссылка
					      	 	             |
					      	 	             |СГРУППИРОВАТЬ ПО
					      	 	             |	ОтчетОРозничныхПродажахТовары.Продавец,
					      	 	             |	ВЫБОР
					      	 	             |		КОГДА ОтчетОРозничныхПродажахТовары.Продавец = ОтчетОРозничныхПродажахТовары.Ссылка.Ответственный.ФизическоеЛицо
					      	 	             |			ТОГДА ИСТИНА
					      	 	             |		ИНАЧЕ ЛОЖЬ
					      	 	             |	КОНЕЦ");
					Запрос.УстановитьПараметр("Ссылка",СтрокаООРП.ОтчетОРозничныхПродажах);
					
					Рез = Запрос.Выполнить().Выгрузить();
					Для каждого СтрокаРез из Рез цикл
						НоваяСтрока = НовыйДок.Продавцы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРез);
					КонецЦикла;
				КонецЦикла;		
			КонецЕсли;
			НовыйДок.записать(РежимЗаписиДокумента.Проведение); 
		КонецЕсли;		
	КонецЦикла;

КонецФункции

Функция ПолучитьСуммуНал(Ссылка)
	
	Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	      	 	             |	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента
	      	 	             |ИЗ
	      	 	             |	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	      	 	             |ГДЕ
	      	 	             |	РасходныйКассовыйОрдер.Проведен
	      	 	             |	И РасходныйКассовыйОрдер.ДокументОснование = &ДокументОснование");
	Запрос.УстановитьПараметр("ДокументОснование",Ссылка);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() >0 тогда
		Возврат Рез[0].СуммаДокумента;
	иначе
		Возврат 0;
	КонецЕсли; 	
КонецФункции

Функция ПолучитьСуммуКарта(Ссылка)
	
	Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	ОплатаОтПокупателяПлатежнойКартой.Ссылка КАК Ссылка,
	      	 	             |	ОплатаОтПокупателяПлатежнойКартой.СуммаДокумента КАК СуммаДокумента
	      	 	             |ИЗ
	      	 	             |	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
	      	 	             |ГДЕ
	      	 	             |	ОплатаОтПокупателяПлатежнойКартой.Проведен
	      	 	             |	И ОплатаОтПокупателяПлатежнойКартой.ДокументОснование = &ДокументОснование");
	Запрос.УстановитьПараметр("ДокументОснование",Ссылка);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() >0 тогда
		Возврат Рез[0].СуммаДокумента;
	иначе
		Возврат 0;
	КонецЕсли; 	
КонецФункции

Функция СоздатьПКО_ВыручкаНаличка(дата,кассаККМ, выемка, сумма, комментарий)
	
	док = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	док.Касса = кассаККМ;
	док.Организация = док.Касса.Владелец;
	док.СуммаДокумента = сумма;
	док.Дата = дата;
	
	док.Комментарий = комментарий;
	//док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы;
	док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ;
	док.КассаККМ = КассаККМ;
	док.ДокументОснование = Выемка;
	
	док.Приложение="1.1 Торговая розничная выручка - НАЛ";
		
	стр = док.РасшифровкаПлатежа.Добавить();
	стр.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Прочие доходы");
	стр.Сумма = сумма;
	
	док.Записать(РежимЗаписиДокумента.Запись);
	
	возврат док.Ссылка;
КонецФункции

функция	ЗаполнитьВыемку(НовыйДок)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "";

	Запрос.УстановитьПараметр("ДатаН",НачалоДня(НовыйДок.Дата));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(НовыйДок.Дата));
	Запрос.УстановитьПараметр("КассаККМ",НовыйДок.КассаККМ);
	Запрос.УстановитьПараметр("Неучтенка", "1.4 Торговая выручка - НЕУЧТЕНКА");
	
	
	Запрос .Текст = "ВЫБРАТЬ
	                |	док.Ссылка КАК Выемка,
	                |	док.СуммаДокумента КАК Сумма,
	                |	ПКО.Ссылка КАК ПКО
	                |ИЗ
	                |	Документ.ВыемкаДенежныхСредствИзКассыККМ КАК док
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер КАК ПКО
	                |		ПО (ПКО.ДокументОснование = док.Ссылка)
	                |			И (НЕ ПКО.ПометкаУдаления)
	                |			И (ПКО.Приложение <> &Неучтенка)
	                |ГДЕ
	                |	док.Проведен = ИСТИНА
	                |	И док.Дата >= &ДатаН
	                |	И док.Дата <= &ДатаК
	                |	И док.КассаККМ = &КассаККМ
	                |	И док.СуммаДокумента <> 0";
	
	
	НовыйДок.ВыемкаДенежныхСредств.Очистить();
	НовыйДок.ВыемкаДенежныхСредств.Загрузить(Запрос.Выполнить().Выгрузить());

КонецФункции

Функция М_00043_ОтправитьданныеПоСуммамЗаНоябрь()
	НачалоПрошлогоДня = '20221101';
	Рег = РегистрыСведений.БуферОперацийСтатистики.СоздатьНаборЗаписей();
	Рег.Записать();
	
	Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User", "http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl", 10);
	
	Пока НачалоПрошлогоДня < '20221130' цикл
		ДатаЧисло			= Число(Лев(СтрЗаменить(Строка(НачалоПрошлогоДня),".",""),8));
		Запрос	=	Новый Запрос("ВЫБРАТЬ
		      	 	             |	БуферОперацийСтатистики.ДатаЗаписи КАК ДатаЗаписи
		      	 	             |ИЗ
		      	 	             |	РегистрСведений.БуферОперацийСтатистики КАК БуферОперацийСтатистики
		      	 	             |ГДЕ
		      	 	             |	БуферОперацийСтатистики.ДатаЗаписи = &ДатаЗаписи");
		Запрос.УстановитьПараметр("ДатаЗаписи",ДатаЧисло);
		Если не запрос.Выполнить().Пустой() тогда 
			НачалоПрошлогоДня	=	НачалоПрошлогоДня + 24*60*60;
			Продолжить; 
		КонецЕсли;
		

		Запрос	=	новый запрос("ВЫБРАТЬ
		      	 	             |	СУММА(ЧекККМОплата.Сумма) КАК Сумма,
		      	 	             |	ЧекККМОплата.Ссылка.ВидОперации КАК ВидОперации,
		      	 	             |	ЧекККМОплата.ВидОплаты.Наименование КАК ВидОплатыНаименование,
		      	 	             |	ЧекККМОплата.Ссылка.Магазин КАК Магазин
		      	 	             |ИЗ
		      	 	             |	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
		      	 	             |ГДЕ
		      	 	             |	ЧекККМОплата.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		      	 	             |	И ЧекККМОплата.Ссылка.Проведен
		      	 	             |	И (ЧекККМОплата.Ссылка.СтатусЧекаККМ = &СтатусАрхивный
		      	 	             |			ИЛИ ЧекККМОплата.Ссылка.СтатусЧекаККМ = &СтатусПробитый)
		      	 	             |
		      	 	             |СГРУППИРОВАТЬ ПО
		      	 	             |	ЧекККМОплата.Ссылка.ВидОперации,
		      	 	             |	ЧекККМОплата.ВидОплаты.Наименование,
		      	 	             |	ЧекККМОплата.Ссылка.Магазин");
		Запрос.УстановитьПараметр("ДатаНач",НачалоПрошлогоДня);//выгружаем за предыдущий день
		Запрос.УстановитьПараметр("ДатаКон",КонецДня(НачалоПрошлогоДня));	
		Запрос.УстановитьПараметр("СтатусАрхивный",Перечисления.СтатусыЧековККМ.Архивный);	
		Запрос.УстановитьПараметр("СтатусПробитый",Перечисления.СтатусыЧековККМ.Пробитый);	
		
		Рез = Запрос.Выполнить().Выгрузить();
		Если Рез.Количество() = 0 тогда
			НачалоПрошлогоДня	=	НачалоПрошлогоДня + 24*60*60; 					
			Продолжить; 
		КонецЕсли;

		Структура = Новый Структура;   	
		МассивВозврата	=	Новый Массив; 	
		
		эл	=	Новый Структура;
		эл.Вставить("Магазин",					СокрЛП(Строка(Рез[0].Магазин)));
		эл.Вставить("Дата",						СокрЛП(Строка(НачалоПрошлогоДня)));	
		
		эл.Вставить("СуммаНал",	"0");	
		эл.Вставить("СуммаБезнал",	"0");	
		эл.Вставить("СуммаВозвратовНал",	"0");	
		эл.Вставить("СуммаВозвратовБезНал","0");

		Для каждого Строка из Рез цикл 		
			Если Строка(Строка.ВидОперации) = "Продажа" и Строка.ВидОплатыНаименование = "Наличные" тогда
				эл.Вставить("СуммаНал",	Строка(Строка.Сумма));	
				
			ИначеЕсли  Строка(Строка.ВидОперации) = "Продажа" и Строка.ВидОплатыНаименование = "Платежная карта" тогда
				эл.Вставить("СуммаБезнал",	Строка(Строка.Сумма));	
				
			иначеЕсли Строка(Строка.ВидОперации) = "Возврат" и Строка.ВидОплатыНаименование = "Наличные" тогда
				эл.Вставить("СуммаВозвратовНал",	Строка(Строка.Сумма));	
				
			ИначеЕсли  Строка(Строка.ВидОперации) = "Возврат" и Строка.ВидОплатыНаименование = "Платежная карта" тогда
				эл.Вставить("СуммаВозвратовБезНал",	Строка(Строка.Сумма));	
			КонецЕсли; 		
		КонецЦикла;
		
		МассивВозврата.Добавить(эл);	
		JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);

		Ответ	=	Прокси.writepayment(JS);
		сообщить(Ответ);
		
		Если Ответ тогда
			Рег = РегистрыСведений.БуферОперацийСтатистики.СоздатьМенеджерЗаписи();
			Рег.ДатаЗаписи				=	ДатаЧисло;
			Рег.Записать();
		КонецЕсли; 
		
		НачалоПрошлогоДня	=	НачалоПрошлогоДня + 24*60*60;
	КонецЦикла;;


	прокси = Неопределено;

	
КонецФункции

Функция М_00044_ЗаполнениеСправочникаПроекты()
	
	//Возврат (Собирать) интернет-магазин
	//Возврат продтоваров
	//Возврат сувенирка
	//Возврат табаки
	//Возврат электронки
	//Заказ QR
	//Между магазинами
	//Неиспользованные QR
	//Объединить для ЭДО
	//Сроки годности продтовары
	//Сроки годности табаки
	//Сроки годности электронка
	//Сухой табак
	//ЭДО
	ссылка_проект = Справочники.ТБКПроекты.НайтиПоНаименованию("Заказ QR");
	Если ссылка_проект.Пустая() Тогда
		Спр	=	Справочники.ТБКПроекты.СоздатьЭлемент();
		Спр.Наименование	=	"Заказ QR";
		Спр.Записать();
	КонецЕсли;

	ссылка_проект = Справочники.ТБКПроекты.НайтиПоНаименованию("Возврат (Собирать) интернет-магазин");
	Если ссылка_проект.Пустая() Тогда
		Спр	=	Справочники.ТБКПроекты.СоздатьЭлемент();
		Спр.Наименование	=	"Возврат (Собирать) интернет-магазин";
		Спр.Записать();
	КонецЕсли;
	
	ссылка_проект = Справочники.ТБКПроекты.НайтиПоНаименованию("Возврат продтоваров");
	Если ссылка_проект.Пустая() Тогда
		Спр	=	Справочники.ТБКПроекты.СоздатьЭлемент();
		Спр.Наименование	=	"Возврат продтоваров";
		Спр.Записать();
	КонецЕсли;
	
	ссылка_проект = Справочники.ТБКПроекты.НайтиПоНаименованию("Возврат сувенирка");
	Если ссылка_проект.Пустая() Тогда
		Спр	=	Справочники.ТБКПроекты.СоздатьЭлемент();
		Спр.Наименование	=	"Возврат сувенирка";
		Спр.Записать();
	КонецЕсли;
	
	ссылка_проект = Справочники.ТБКПроекты.НайтиПоНаименованию("Возврат табаки");
	Если ссылка_проект.Пустая() Тогда
		Спр	=	Справочники.ТБКПроекты.СоздатьЭлемент();
		Спр.Наименование	=	"Возврат табаки";
		Спр.Записать();
	КонецЕсли;
	
	ссылка_проект = Справочники.ТБКПроекты.НайтиПоНаименованию("Возврат электронки");
	Если ссылка_проект.Пустая() Тогда
		Спр	=	Справочники.ТБКПроекты.СоздатьЭлемент();
		Спр.Наименование	=	"Возврат электронки";
		Спр.Записать();
	КонецЕсли;
	
	ссылка_проект = Справочники.ТБКПроекты.НайтиПоНаименованию("Между магазинами");
	Если ссылка_проект.Пустая() Тогда
		Спр	=	Справочники.ТБКПроекты.СоздатьЭлемент();
		Спр.Наименование	=	"Между магазинами";
		Спр.Записать();
	КонецЕсли;
	
	ссылка_проект = Справочники.ТБКПроекты.НайтиПоНаименованию("Объединить для ЭДО");
	Если ссылка_проект.Пустая() Тогда
		Спр	=	Справочники.ТБКПроекты.СоздатьЭлемент();
		Спр.Наименование	=	"Объединить для ЭДО";
		Спр.Записать();
	КонецЕсли;
	
	ссылка_проект = Справочники.ТБКПроекты.НайтиПоНаименованию("Сроки годности продтовары");
	Если ссылка_проект.Пустая() Тогда
		Спр	=	Справочники.ТБКПроекты.СоздатьЭлемент();
		Спр.Наименование	=	"Сроки годности продтовары";
		Спр.Записать();
	КонецЕсли;
	
	ссылка_проект = Справочники.ТБКПроекты.НайтиПоНаименованию("Сроки годности табаки");
	Если ссылка_проект.Пустая() Тогда
		Спр	=	Справочники.ТБКПроекты.СоздатьЭлемент();
		Спр.Наименование	=	"Сроки годности табаки";
		Спр.Записать();
	КонецЕсли;
	
	ссылка_проект = Справочники.ТБКПроекты.НайтиПоНаименованию("Сроки годности электронка");
	Если ссылка_проект.Пустая() Тогда
		Спр	=	Справочники.ТБКПроекты.СоздатьЭлемент();
		Спр.Наименование	=	"Сроки годности электронка";
		Спр.Записать();
	КонецЕсли;
	
	ссылка_проект = Справочники.ТБКПроекты.НайтиПоНаименованию("Сухой табак");
	Если ссылка_проект.Пустая() Тогда
		Спр	=	Справочники.ТБКПроекты.СоздатьЭлемент();
		Спр.Наименование	=	"Сухой табак";
		Спр.Записать();
	КонецЕсли;
	
	ссылка_проект = Справочники.ТБКПроекты.НайтиПоНаименованию("ЭДО");
	Если ссылка_проект.Пустая() Тогда
		Спр	=	Справочники.ТБКПроекты.СоздатьЭлемент();
		Спр.Наименование	=	"ЭДО";
		Спр.Записать();
	КонецЕсли;
	
	
КонецФункции

Функция М_00045_ПеренестиПапкуПрочее()
	//перенос на верхний уровень
	Об	=	Справочники.Номенклатура.НайтиПоКоду("Ю2-00007198").ПолучитьОбъект();
	Об.Родитель	=	Неопределено;
	Об.Записать();	
КонецФункции

Функция М_00046_ПроставитьПродавцовВчеки()
	Запрос	=	Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	      	 	             |	ЧекККМТовары.Ссылка КАК Ссылка,
	      	 	             |	ЧекККМТовары.Ссылка.Дата КАК Дата
	      	 	             |ИЗ
	      	 	             |	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	      	 	             |ГДЕ
	      	 	             |	ЧекККМТовары.Ссылка.Проведен
	      	 	             |	И ЧекККМТовары.Ссылка.Дата >= &Дата
	      	 	             |	И ЧекККМТовары.Продавец = &Продавец
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	ЧекККМТовары.Ссылка.Дата");
	Запрос.УстановитьПараметр("Дата", '20230401');
	Запрос.УстановитьПараметр("Продавец", Справочники.ФизическиеЛица.ПустаяСсылка());
	
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока рез.Следующий() цикл
		
		Запрос	=	Новый Запрос("ВЫБРАТЬ
		      	 	             |	ТБКСменыСотрудников.Продавец КАК Продавец
		      	 	             |ИЗ
		      	 	             |	РегистрСведений.ТБКСменыСотрудников КАК ТБКСменыСотрудников
		      	 	             |ГДЕ
		      	 	             |	ТБКСменыСотрудников.КассоваяСмена.Дата МЕЖДУ &ДатаНач И &ДатаКон
		      	 	             |	И ТБКСменыСотрудников.ТипПродавца = &ТипПродавца");
		
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(рез.Дата));
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(рез.Дата));
		Запрос.УстановитьПараметр("ТипПродавца", Перечисления.ТБКТипыПродавцов.ОсновнойПродавец);
		Рез1 = Запрос.Выполнить().Выбрать();
		если рез1.Следующий() тогда
			Нужпродавец = рез1.продавец;
		иначе
			Продолжить;
		КонецЕсли;

		Об = Рез.Ссылка.ПолучитьОбъект();
		
		Для каждого Строкатовары из Об.товары цикл
			СтрокаТовары.продавец = Нужпродавец;
		КонецЦикла;	
		Попытка
			об.записать()
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
КонецФункции

Функция М_00047_ГенерацияЮзеровСПолнымиПравами()
	МассивП = новый Массив;
	//МассивП.Добавить("Волкова Татьяна Евгеньевна");
	//МассивП.Добавить("Докторова Наталья Сергеевна");
	//МассивП.Добавить("Лапочкина Валерия Александровна");
	//МассивП.Добавить("Лебедева Светлана Юрьевна");
	//МассивП.Добавить("Петрова Екатерина Ивановна");
	//МассивП.Добавить("Фишер Полина Александровна");
	//МассивП.Добавить("Тикко Анна Владимировна");
	//МассивП.Добавить("Козьмина Татьяна Юрьевна");
	//МассивП.Добавить("obmen_new");
	//МассивП.Добавить("sys_ws");
	//МассивП.Добавить("ИТ");
	МассивП.Добавить("Николаенкова Ольга Александровна 19");
	
	 
	
	ГруппаДоступа 					= Справочники.ГруппыДоступа.НайтиПоНаименованию("Администраторы").ПолучитьОбъект();
	ГруппаДоступаКассир 			= Справочники.ГруппыДоступа.НайтиПоНаименованию("Кассир").ПолучитьОбъект();
	ГруппаДоступаВнешниеобработки 	= Справочники.ГруппыДоступа.НайтиПоНаименованию("Открытие внешних отчетов и обработок").ПолучитьОбъект();



	Для каждого Строка из МассивП цикл
		Запрос	=	Новый запрос("ВЫБРАТЬ
		      	 	             |	Пользователи.Ссылка КАК Ссылка
		      	 	             |ИЗ
		      	 	             |	Справочник.Пользователи КАК Пользователи
		      	 	             |ГДЕ
		      	 	             |	Пользователи.Наименование ПОДОБНО &Наименование");
		Запрос.УстановитьПараметр("Наименование", "%" + Строка + "%");
		Рез = Запрос.Выполнить().Выбрать();
		рез.Следующий();
		
		//Если Рез.Следующий() и Строка <> "ИТ" тогда //даем полные права  
			Если ГруппаДоступа.Пользователи.Найти(Рез.Ссылка) = Неопределено тогда			
				НоваяСтрока 				= ГруппаДоступа.Пользователи.Добавить();
				НоваяСтрока.Пользователь 	= Рез.Ссылка;
			КонецЕсли;
			
			Если ГруппаДоступаВнешниеобработки.Пользователи.Найти(Рез.Ссылка) = Неопределено тогда			
				НоваяСтрока 				= ГруппаДоступаВнешниеобработки.Пользователи.Добавить();
				НоваяСтрока.Пользователь 	= Рез.Ссылка;
			КонецЕсли;

			
			СтрокаТЧ	=	ГруппаДоступаКассир.Пользователи.Найти( Рез.Ссылка);
			Если СтрокаТЧ <> Неопределено тогда
				ГруппаДоступаКассир.Пользователи.Удалить(СтрокаТЧ);
				Продолжить;
			КонецЕсли;
	
		//ИначеЕсли Строка = "obmen_new" или Строка = "sys_ws" или Строка = "ИТ" тогда //создаем
		//	
		//	Если ПользователиИнформационнойБазы.НайтиПоИмени(Строка) = Неопределено тогда
		//		ОписаниеПользователяИБ            = Пользователи.НовоеОписаниеПользователяИБ();
		//		ПользовательИБСуществует          = Ложь;
		//		ДоступКИнформационнойБазеРазрешен = Ложь;
		//		
		//		// Заполнение начальных значений свойств пользователяИБ.
		//		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора   = Истина;
		//		ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;	
		//		
		//		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		//		ОписаниеПользователяИБ.Вставить("Имя", Строка);
		//		Если Строка = "ИТ" тогда
		//			ОписаниеПользователяИБ.Вставить("Пароль", "321321321");
		//		иначе
		//			ОписаниеПользователяИБ.Вставить("Пароль", "4753475347");
		//		КонецЕсли;

		//		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		//		НовыйПользователь.Наименование 	= Строка;

		//		НовыйПользователь.ДополнительныеСвойства.Вставить(
		//			"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		//		
		//		НовыйПользователь.Записать();
		//		
		//		НоваяСтрока 				= ГруппаДоступа.Пользователи.Добавить();
		//		НоваяСтрока.Пользователь 	= НовыйПользователь.Ссылка;
		//		
		//		
		//		Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		//		      	 	             |	ЗначенияДополнительныхПравПользователя.Пользователь КАК Пользователь
		//		      	 	             |ИЗ
		//		      	 	             |	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК ЗначенияДополнительныхПравПользователя");
		//		
		//		Рез1 = Запрос.Выполнить().Выгрузить();
		//		
		//		
		//		Если Рез1.Количество()>0 тогда 		
		//			//КопированиеВсехНастроек
		//			
		//			Запрос	=	Новый Запрос("ВЫБРАТЬ
		//			      	 	             |	ЗначенияДополнительныхПравПользователя.Пользователь КАК Пользователь,
		//			      	 	             |	ЗначенияДополнительныхПравПользователя.Право КАК Право,
		//			      	 	             |	ЗначенияДополнительныхПравПользователя.Значение КАК Значение
		//			      	 	             |ИЗ
		//			      	 	             |	РегистрСведений.ЗначенияДополнительныхПравПользователя КАК ЗначенияДополнительныхПравПользователя
		//			      	 	             |ГДЕ
		//			      	 	             |	ЗначенияДополнительныхПравПользователя.Пользователь = &Пользователь");
		//			Запрос.УстановитьПараметр("Пользователь",Рез1[0].Пользователь);
		//			
		//			РезПрава = Запрос.Выполнить().Выгрузить();
		//			
		//			Набор = РегистрыСведений.ЗначенияДополнительныхПравПользователя.СоздатьНаборЗаписей();
		//			Набор.Отбор.Пользователь.Установить(НовыйПользователь.Ссылка);
		//			Для каждого СтрокаПрава из РезПрава цикл
		//				НоваяСтрока = Набор.Добавить();
		//				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПрава);
		//				
		//				НоваяСтрока.Пользователь = НовыйПользователь.Ссылка; 
		//			КонецЦикла;
		//			Набор.Записать();

		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//        
		//КонецЕсли;		
		
	КонецЦикла;   	
	
	Для каждого СтрокаПользователь из ГруппаДоступа.Пользователи цикл	
		Если Не ЗначениеЗаполнено(СтрокаПользователь.Пользователь) тогда Продолжить; КонецЕсли;
		
		Если СтрокаПользователь.Пользователь.ПометкаУдаления тогда
			ГруппаДоступа.Пользователи.Удалить(СтрокаПользователь);	
		КонецЕсли;
	КонецЦикла;

			
	ГруппаДоступа.Записать();
    ГруппаДоступаКассир.Записать(); 
	ГруппаДоступаВнешниеобработки.Записать();

	
	////Смена пароля Админа
	//Польз = ПользователиИнформационнойБазы.НайтиПоИмени("Админ");  
	//Польз.Пароль	=	"4747534753";
	//
	//Польз.Записать();

	//
	////права для ит
	//Польз = ПользователиИнформационнойБазы.НайтиПоИмени("ИТ");  			
	//Польз.Роли.Добавить(Метаданные.Роли.ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок);	
	//Польз.Роли.Добавить(Метаданные.Роли.АдминистраторСистемы);		
	//Польз.Роли.Добавить(Метаданные.Роли.ПолныеПрава);	
	//
	//Защита	=	Новый ОписаниеЗащитыОтОпасныхДействий;
	//Защита.ПредупреждатьОбОпасныхДействиях = Ложь;
	//Польз.ЗащитаОтОпасныхДействий	=	Защита;
	//Польз.Записать();
КонецФункции

Функция М_00048_СбросКонстантыКлише()
	ОбщегоНазначенияВызовСервера.Установить_ЗначениеКонстанты_Общая("КлишеИзмененоУспешно", ложь);	
КонецФункции

Функция М_00049_УстановкаОбщейМотивации()
	ОбщегоНазначенияВызовСервера.Установить_ЗначениеКонстанты_Общая("ВариантМотивации", 4);				
КонецФункции

Функция М_00050_УдалитьПланыМотивации()
	Рег	=	РегистрыСведений.ТБКПланыМагазинаПоМесяцам.СоздатьНаборЗаписей();
	Рег.Отбор.Период.Установить('20231101');
	Рег.Записать();
	
	Рег	=	РегистрыСведений.ТБКФокуснаяМотивация.СоздатьНаборЗаписей();
	Рег.Отбор.Период.Установить('20231101');
	Рег.Записать();
	
КонецФункции

Функция М_00051_ВключитьПроверкуОрганизации()
	ОбщегоНазначения.УстановитьЗначениеТБККонстанты("ДоступнаПроверкаОрганизаций", Истина); 
КонецФункции

Функция М_00052_ПеревыгрузитьРезультатыФокуснойМотивации()
	Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User_tbk", "http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl"); 
		
	Для Ном = 1 по 2 цикл
		Если Ном = 1 тогда 
			Период				=	НачалоМесяца(НачалоМесяца(ТекущаяДата()) - 1) - 1; 	
		иначе
			Период				=	НачалоМесяца(ТекущаяДата()) - 1;	
		КонецЕсли;  
		
		Сообщить(Период);
		
		//ПОЛУЧАЕМ ПРОДАВЦОВ 	
		Запрос	=	Новый запрос("ВЫБРАТЬ
		      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец КАК Продавец,
		      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Магазин КАК Магазин
		      	 	             |ИЗ
		      	 	             |	Документ.ТБК_ВедомостьОПродажахЗаДень.Продавцы КАК ТБК_ВедомостьОПродажахЗаДеньПродавцы
		      	 	             |ГДЕ
		      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.ТипПродавца = &ТипПродавца
		      	 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		      	 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Проведен
		      	 	             |
		      	 	             |СГРУППИРОВАТЬ ПО
		      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец,
		      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Магазин");  
		
		Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Период));
		Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(Период));
		Запрос.УстановитьПараметр("ТипПродавца",Перечисления.ТБКТипыПродавцов.ОсновнойПродавец);
		РезВсеПродавцы	=	Запрос.Выполнить().Выгрузить();    
		//
		
		флОтправленоУспешно = Ложь; 
		
		ТаблицаРасшифровка_Общая = Новый ТаблицаЗначений;
		ТаблицаРасшифровка_Общая.Колонки.Добавить("ФокусГруппа",,		"Группа");
		ТаблицаРасшифровка_Общая.Колонки.Добавить("ПланПродаж",,		"План");
		ТаблицаРасшифровка_Общая.Колонки.Добавить("ФактПродаж",,		"Факт");
		ТаблицаРасшифровка_Общая.Колонки.Добавить("КоличествоСверх",,	"Количество сверх плана");
		ТаблицаРасшифровка_Общая.Колонки.Добавить("СуммаФакт",,		"Сумма факт");
		ТаблицаРасшифровка_Общая.Колонки.Добавить("СуммаСверх",,		"Сумма сверх плана");
		ТаблицаРасшифровка_Общая.Колонки.Добавить("СуммаПремии",,		"Сумма премии");
		ТаблицаРасшифровка_Общая.Колонки.Добавить("Заголовок",,		"Заголовок");
		ТаблицаРасшифровка_Общая.Колонки.Добавить("Продавец",,		"Продавец");
		
		Для каждого СтрокаПродавец из РезВсеПродавцы цикл
			ТаблицаРасшифровка	=	Обработки.РМКУправляемыйРежим.ПолучитьТаблицуПоФокуснойМотивации(0, Период,0 , СтрокаПродавец.Продавец);
			
			Для каждого Строка из ТаблицаРасшифровка цикл
				НовСтрока	=	ТаблицаРасшифровка_Общая.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
				НовСтрока.Продавец	=	СтрокаПродавец.Продавец;
			КонецЦикла;  	
		КонецЦикла;	
		
		МассивВозврата	=	Новый Массив;
			
		Для каждого Строка из РезВсеПродавцы цикл
			эл	=	Новый Структура;
			эл.Вставить("Продавец",		СокрЛП(Строка(Строка.Продавец)));	
			эл.Вставить("Магазин",		СокрЛП(Строка(Строка.Магазин)));
			эл.Вставить("Период",		Строка(Период));   
			Если Ном = 1 тогда
				эл.Вставить("Удалить",		"1");
			КонецЕсли;
			
			Отбор	=	Новый Структура;
			Отбор.Вставить("Продавец", Строка.Продавец);
			
			Строки =   ТаблицаРасшифровка_Общая.НайтиСтроки(Отбор);
			
			МассивДанные	=	Новый Массив;   
			
			
			Сообщить(Строка(Период)); 

									
			Для каждого СтрокаДанные из Строки цикл		
				Данные	=	Новый Структура;
				Данные.Вставить("ФокусГруппа",		Строка(СтрокаДанные.ФокусГруппа));
				Данные.Вставить("ПланПродаж", 		Строка(СтрокаДанные.ПланПродаж));
				Данные.Вставить("ФактПродаж", 		Строка(СтрокаДанные.ФактПродаж));
				Данные.Вставить("КоличествоСверх", 	Строка(СтрокаДанные.КоличествоСверх));
				Данные.Вставить("СуммаФакт", 		Строка(СтрокаДанные.СуммаФакт));
				Данные.Вставить("СуммаСверх", 		Строка(СтрокаДанные.СуммаСверх));
				Данные.Вставить("СуммаПремии", 		Строка(СтрокаДанные.СуммаПремии));
				
				МассивДанные.Добавить(Данные);   
				
						Сообщить(Строка(СтрокаДанные.ФокусГруппа)); 
			КонецЦикла;
			эл.Вставить("Данные", МассивДанные);

			
			МассивВозврата.Добавить(эл);
		КонецЦикла;
		
		JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
		
		Ответ	=	Прокси.writeFocusMotivation(JS); 
                                        
	//	Если Ответ тогда
	//		Рег = РегистрыСведений.ТБК_Константы.СоздатьНаборЗаписей();
	//		Рег.Отбор.ИмяКонстанты.Установить("ДатаОтправкиДанныхПоФокуснойМотивации");
	//		НоваяСтр	=	Рег.Добавить();
	//		НоваяСтр.ЗначениеКонстанты	=	ТекущаяДата();
	//		НоваяСтр.ИмяКонстанты		=	"ДатаОтправкиДанныхПоФокуснойМотивации";
	//		рег.Записать();
	//	КонецЕсли;
	//
		
		
		
		
	КонецЦикла;
	
	Прокси = Неопределено;
КонецФункции

функция М_00053_ИзменениеОбращенияК_FTP()
	Шаблон_путь_mx_tabakon_ru = "mx.tabakon.ru";
	шаблон_путь_замена = "mx.tbkon.ru";
	набор = РегистрыСведений.НастройкиТранспортаОбменаДанными.СоздатьНаборЗаписей();
	набор.Прочитать();
	
	для каждого строка из набор Цикл
		Если  СтрНайти(строка.FTPСоединениеПуть, Шаблон_путь_mx_tabakon_ru) тогда
			строка.FTPСоединениеПуть = СтрЗаменить(строка.FTPСоединениеПуть, Шаблон_путь_mx_tabakon_ru, шаблон_путь_замена);
		КонецЕсли;
	КонецЦикла;
	набор.Записать();
КонецФункции

Функция М_00054_ЗаполнениеСправочникаПричиныБрака()
	
	//Электронки - Течет, Не тянется, Срок годности, Горечь, изменение вкуса.
	//Табак - Сухой, Течет, Плесень, Срок годности, Дефект упаковки
	//Сувениры - Скол, Трещина, Срок годности, не хватает места.
	ТекстЗапроса = "ВЫБРАТЬ
	                      |	ТБКПричиныБрака.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ТБКПричиныБрака КАК ТБКПричиныБрака
	                      |ГДЕ
	                      |	ТБКПричиныБрака.Наименование = &Наименование
	                      |	И ТБКПричиныБрака.Вид = &Вид";
	//Общий вид
	Вид = "Общий";
	ссылка_ПричиныБрака = Справочники.ТБКПричиныБрака.НайтиПоНаименованию("Срок годности");
	Если ссылка_ПричиныБрака.Пустая() Тогда
		Спр	=	Справочники.ТБКПричиныБрака.СоздатьЭлемент();
		Спр.Наименование	=	"Срок годности";
		спр.Вид				= 	Вид;
		Спр.Записать();
	КонецЕсли;
	
	//Сувенирка
	Вид = "Сувениры";
	ссылка_ПричиныБрака = Справочники.ТБКПричиныБрака.НайтиПоНаименованию("Скол");
	Если ссылка_ПричиныБрака.Пустая() Тогда
		Спр	=	Справочники.ТБКПричиныБрака.СоздатьЭлемент();
		Спр.Наименование	=	"Скол";
		спр.Вид				= 	Вид;
		Спр.Записать();
	КонецЕсли;
	
	ссылка_ПричиныБрака = Справочники.ТБКПричиныБрака.НайтиПоНаименованию("Трещина");
	Если ссылка_ПричиныБрака.Пустая() Тогда
		Спр	=	Справочники.ТБКПричиныБрака.СоздатьЭлемент();
		Спр.Наименование	=	"Трещина";
		спр.Вид				= 	Вид;
		Спр.Записать();
	КонецЕсли;

	ссылка_ПричиныБрака = Справочники.ТБКПричиныБрака.НайтиПоНаименованию("Не хватает места");
	Если ссылка_ПричиныБрака.Пустая() Тогда
		Спр	=	Справочники.ТБКПричиныБрака.СоздатьЭлемент();
		Спр.Наименование	=	"Не хватает места";
		спр.Вид				= 	Вид;
		Спр.Записать();
	КонецЕсли;	
	
	//Электронки
	Вид = "Электронки";
	запрос = Новый Запрос(ТекстЗапроса);
	 
	запрос.УстановитьПараметр("Наименование", "Течет");
	запрос.УстановитьПараметр("Вид", Вид);
	КоличесткоЭлементов = Запрос.Выполнить().Выбрать().Количество();
	Если КоличесткоЭлементов = 0 Тогда
		Спр	=	Справочники.ТБКПричиныБрака.СоздатьЭлемент();
		Спр.Наименование	=	"Течет";
		спр.Вид				= 	Вид;
		Спр.Записать();
	КонецЕсли;
	
	ссылка_ПричиныБрака = Справочники.ТБКПричиныБрака.НайтиПоНаименованию("Не тянется");
	Если ссылка_ПричиныБрака.Пустая() Тогда
		Спр	=	Справочники.ТБКПричиныБрака.СоздатьЭлемент();
		Спр.Наименование	=	"Не тянется";
		спр.Вид				= 	Вид;
		Спр.Записать();
	КонецЕсли;
	
	ссылка_ПричиныБрака = Справочники.ТБКПричиныБрака.НайтиПоНаименованию("Горечь");
	Если ссылка_ПричиныБрака.Пустая() Тогда
		Спр	=	Справочники.ТБКПричиныБрака.СоздатьЭлемент();
		Спр.Наименование	=	"Горечь";
		спр.Вид				= 	Вид;
		Спр.Записать();
	КонецЕсли;
	
	ссылка_ПричиныБрака = Справочники.ТБКПричиныБрака.НайтиПоНаименованию("Изменение вкуса");
	Если ссылка_ПричиныБрака.Пустая() Тогда
		Спр	=	Справочники.ТБКПричиныБрака.СоздатьЭлемент();
		Спр.Наименование	=	"Изменение вкуса";
		спр.Вид				= 	Вид;
		Спр.Записать();
	КонецЕсли;
	
	ссылка_ПричиныБрака = Справочники.ТБКПричиныБрака.НайтиПоНаименованию("Течет");
	Если ссылка_ПричиныБрака.Пустая() Тогда
		Спр	=	Справочники.ТБКПричиныБрака.СоздатьЭлемент();
		Спр.Наименование	=	"Течет";
		спр.Вид				= 	Вид;
		Спр.Записать();
	КонецЕсли;
	
		запрос.УстановитьПараметр("Наименование", "Не заряжается");
	запрос.УстановитьПараметр("Вид", Вид);
	КоличесткоЭлементов = Запрос.Выполнить().Выбрать().Количество();
	Если КоличесткоЭлементов = 0 Тогда
		Спр	=	Справочники.ТБКПричиныБрака.СоздатьЭлемент();
		Спр.Наименование	=	"Не заряжается";
		спр.Вид				= 	Вид;
		Спр.Записать();
	КонецЕсли;
	
	запрос.УстановитьПараметр("Наименование", "Не включается");
	запрос.УстановитьПараметр("Вид", Вид);
	КоличесткоЭлементов = Запрос.Выполнить().Выбрать().Количество();
	Если КоличесткоЭлементов = 0 Тогда
		Спр	=	Справочники.ТБКПричиныБрака.СоздатьЭлемент();
		Спр.Наименование	=	"Не включается";
		спр.Вид				= 	Вид;
		Спр.Записать();
	КонецЕсли;
	
	запрос.УстановитьПараметр("Наименование", "Шипит");
	запрос.УстановитьПараметр("Вид", Вид);
	КоличесткоЭлементов = Запрос.Выполнить().Выбрать().Количество();
	Если КоличесткоЭлементов = 0 Тогда
		Спр	=	Справочники.ТБКПричиныБрака.СоздатьЭлемент();
		Спр.Наименование	=	"Шипит";
		спр.Вид				= 	Вид;
		Спр.Записать();
	КонецЕсли;

	
	//Табак
	Вид = "Табак";
	ссылка_ПричиныБрака = Справочники.ТБКПричиныБрака.НайтиПоНаименованию("Сухой");
	Если ссылка_ПричиныБрака.Пустая() Тогда
		Спр	=	Справочники.ТБКПричиныБрака.СоздатьЭлемент();
		Спр.Наименование	=	"Сухой";
		спр.Вид				= 	Вид;
		Спр.Записать();
	КонецЕсли;
	
	ссылка_ПричиныБрака = Справочники.ТБКПричиныБрака.НайтиПоНаименованию("Дефект упаковки");
	Если ссылка_ПричиныБрака.Пустая() Тогда
		Спр	=	Справочники.ТБКПричиныБрака.СоздатьЭлемент();
		Спр.Наименование	=	"Дефект упаковки";
		спр.Вид				= 	Вид;
		Спр.Записать();
	КонецЕсли;
	
	запрос = Новый Запрос(ТекстЗапроса);
	запрос.УстановитьПараметр("Наименование", "Течет");
	запрос.УстановитьПараметр("Вид", Вид);
	КоличесткоЭлементов = Запрос.Выполнить().Выбрать().Количество();
	Если КоличесткоЭлементов = 0 Тогда
		Спр	=	Справочники.ТБКПричиныБрака.СоздатьЭлемент();
		Спр.Наименование	=	"Течет";
		спр.Вид				= 	Вид;
		Спр.Записать();
	КонецЕсли;

КонецФункции

Функция М_00055_ПроведениеЧековМай2024()
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ЧекККМ.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЧекККМ КАК ЧекККМ
	      	 	             |ГДЕ
	      	 	             |	ЧекККМ.Дата МЕЖДУ &ДатаНач И &ДатаКон
	      	 	             |	И ЧекККМ.Проведен
	      	 	             |	И НЕ ЧекККМ.Комментарий ПОДОБНО &Комментарий
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	ЧекККМ.Дата");
	Запрос.УстановитьПараметр("ДатаНач", '20240501');
	Запрос.УстановитьПараметр("ДатаКон", '20240531235959');
	Запрос.УстановитьПараметр("Комментарий", "Перепроведен автоматически2");
	рез = Запрос.Выполнить().Выбрать();
	
	Пока рез.Следующий() цикл
		Об	=	рез.Ссылка.ПолучитьОбъект();
		Попытка
			Об.Комментарий	=	"Перепроведен автоматически2";
			Об.Записать(РежимЗаписиДокумента.Проведение);
		Исключение			
			сообщить(ОписаниеОшибки());
		КонецПопытки; 		
	КонецЦикла;  
	
КонецФункции