

Функция НакатитьМиграции() ЭКСПОРТ
	
	Попытка
		Для Каждого миграция из Метаданные.Обработки.ТБК_Миграции.Команды Цикл
			//миграция.
			
			КолПроходов = 1;
			Если ЗначениеЗаполнено(миграция.Комментарий) тогда
				Попытка
					КолПроходов = Число(миграция.Комментарий)
				Исключение
					КолПроходов = 1;
				КонецПопытки;				
			КонецЕсли;
			
			НакатитьМиграцию(миграция.Имя,КолПроходов);
		КонецЦикла
	Исключение
		Сообщить("АААА");
	КонецПопытки;
	
КонецФункции



Функция НакатитьМиграцию(идентификатор, КолПроходов = 1)
	
	нз = РегистрыСведений.ТБКМиграции.СоздатьНаборЗаписей();
	нз.Отбор.Идентификатор.Установить(идентификатор,Истина);
	
	нз.Прочитать();
	

	Попытка
		Если нз.Количество() = 0 Тогда
			

			Выполнить(""+идентификатор+"();");
			
			запись= нз.Добавить();
			запись.ДатаПрименения = ТекущаяДата();
			запись.Применена = 1;
			запись.Идентификатор = идентификатор;
			нз.Записать(Истина);
			
		ИначеЕсли КолПроходов <> 1 и КолПроходов < 99 тогда
			Если нз[0].Применена <> КолПроходов тогда
				Выполнить(""+идентификатор+"();");
			
				 нз[0].Применена = КолПроходов;
				 нз[0].ДатаПрименения = ТекущаяДата();

				 нз.Записать(Истина);
			КонецЕсли;
				
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецФункции




Функция М_00001_ДатаЗапретИзменениеДанных20200701()
	Если НЕ Константы.ИспользоватьДатыЗапретаИзменения.Получить() Тогда
		Константы.ИспользоватьДатыЗапретаИзменения.Установить(Истина);
	КонецЕсли;
	
	дляВсехПользователей=Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
	
	нз = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	нз.Отбор.Пользователь.Установить(дляВсехПользователей,истина);
	
	запись = нз.Добавить();
	запись.Пользователь = дляВсехПользователей;
	запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.Раздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.ДатаЗапрета = Дата(2020,06,30);
	
	нз.Записать(Истина);
КонецФункции

Функция М_00002_ПКО_До_20200706()
	
	выборкаВед = Документы.ТБК_ВедомостьОПродажахЗаДень.Выбрать(Дата(2020,07,01),Дата(2020,07,07));
	
	пока выборкаВед.Следующий() Цикл
		
		Для Каждого стр из выборкаВед.ВыемкаДенежныхСредств Цикл
			Если ЗначениеЗаполнено(стр.ПКО) Тогда
				об = стр.ПКО.ПолучитьОбъект();
				об.Приложение="1.1 Торговая розничная выручка - НАЛ";
				об.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(выборкаВед.ВедомостьПродажНеУчтено_ПКО) Тогда
			об = выборкаВед.ВедомостьПродажНеУчтено_ПКО.ПолучитьОбъект();
			об.Приложение="1.4 Торговая выручка - НЕУЧТЕНКА";
			об.Записать(РежимЗаписиДокумента.Запись);
		Конецесли;
		
	КонецЦикла;
	
КонецФункции

Функция М_00003_ДатаЗапретИзменениеДанных20200701()
	Если НЕ Константы.ИспользоватьДатыЗапретаИзменения.Получить() Тогда
		Константы.ИспользоватьДатыЗапретаИзменения.Установить(Истина);
	КонецЕсли;
	
	дляВсехПользователей=Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
	
	нз = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	нз.Отбор.Пользователь.Установить(дляВсехПользователей,истина);
	
	запись = нз.Добавить();
	запись.Пользователь = дляВсехПользователей;
	запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.Раздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.ДатаЗапрета = Дата(2020,06,30);
	
	нз.Записать(Истина);
КонецФункции

Функция М_00004_ПКО_До_20200708()
	
	
	Если НЕ Константы.ИспользоватьДатыЗапретаИзменения.Получить() Тогда
		Константы.ИспользоватьДатыЗапретаИзменения.Установить(Истина);
	КонецЕсли;
	
	дляВсехПользователей=Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
	
	нз = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	нз.Отбор.Пользователь.Установить(дляВсехПользователей,истина);
	
	запись = нз.Добавить();
	запись.Пользователь = дляВсехПользователей;
	запись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.Раздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	запись.ДатаЗапрета = Дата(2020,06,30);
	
	нз.Записать(Истина);

	
	выборкаВед = Документы.ТБК_ВедомостьОПродажахЗаДень.Выбрать(Дата(2020,07,01),Дата(2020,07,08));
	
	пока выборкаВед.Следующий() Цикл
		
		Если ЗначениеЗаполнено(выборкаВед.ВедомостьПродажНеУчтено_ПКО) Тогда
			Если выборкаВед.ВыемкаДенежныхСредств.Количество() > 0 Тогда
				об = выборкаВед.ВедомостьПродажНеУчтено_ПКО.ПолучитьОбъект();
				об.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ;			
				об.КассаККМ = выборкаВед.КассаККМ;
				об.ДокументОснование = выборкаВед.ВыемкаДенежныхСредств[0].Выемка;
				об.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Конецесли;
		
	КонецЦикла;
	
КонецФункции

Функция М_00005_ДатаЗапрета_Документ_Ваучеры()
	
	актуальнаДатаЗапрета = Дата(2020,06,30);
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета);
КонецФункции

Функция М_00006_РКО_ДДС_Поставщику()
	выборкаВед = Документы.ТБК_ВедомостьОПродажахЗаДень.Выбрать(Дата(2020,07,01),Дата(2020,09,01));
	
	Пока выборкаВед.Следующий() Цикл
		
		Для Каждого стр из выборкаВед.ОплатаПоставщику Цикл
			Если ЗначениеЗаполнено(стр.РКО) Тогда
				об = стр.РКО.ПолучитьОбъект();
				об.Приложение=Документы.ТБК_ВедомостьОПродажахЗаДень.ПолучитьСтатьяДДСОплатаПоставщику();
				об.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецФункции

Функция М_00007_ДатаЗапретИзменениеДанных20200712()
	
	актуальнаДатаЗапрета = Дата(2020,07,12);
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета);
КонецФункции

Функция М_00008_ЧисткаШтрихкодов()
	РегистрыСведений.Штрихкоды.ОбработатьТипыШтрихкодов();	
	РегистрыСведений.Штрихкоды.ЧисткаШтрихкодов();
КонецФункции


Функция М_00009_ДатаЗапретИзменениеДанных20200731()
	актуальнаДатаЗапрета = Дата(2020,07,31);
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 
КонецФункции


Функция М_00010_ВаучерыНаВесьЧек()
	выборкаСкидки = Справочники.СкидкиНаценки.Выбрать();
	
	Пока выборкаСкидки.Следующий() Цикл
		скидка = выборкаСкидки.Ссылка;
		Если скидка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		обСкидка= скидка.ПолучитьОбъект();
		обСкидка.ОбластьПредоставления = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
		обСкидка.ОбменДанными.Загрузка = Истина;
		обСкидка.Записать();
	КонецЦикла;
	
	
	выборкаУсловияСкидок = Справочники.УсловияПредоставленияСкидокНаценок.Выбрать();
	Пока выборкаУсловияСкидок.Следующий() Цикл
		условиСкидка = выборкаУсловияСкидок.Ссылка;
		Если условиСкидка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если условиСкидка.УсловиеПредоставления <> Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
			Продолжить;
		КонецЕсли;
		
		обУсловиеСкидок = условиСкидка.ПолучитьОбъект();
		обУсловиеСкидок.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
		обУсловиеСкидок.Наименование = "Сумма в документе не менее 0 руб.";
		обУсловиеСкидок.ОбменДанными.Загрузка = Истина;
		обУсловиеСкидок.Записать();
	КонецЦикла;
	
	
КонецФункции

Функция М_00011_ПроведениеСписаний()
	
	актуальнаДатаЗапрета = Дата(2020,07,31);
	
	макет = ПолучитьМакет("М_00011");
	мНомераДокументов =	СтрРазделить(макет.ПолучитьТекст(),Символы.ПС);
		
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого номер из мНомераДокументов цикл
		сДок = Документы.СписаниеТоваров.НайтиПоНомеру(номер,Дата(2020,07,01));
		
		Если ЗначениеЗаполнено(сДок)И(НЕ сДок.Проведен) Тогда 
		//Если ЗначениеЗаполнено(сДок) Тогда 
			сДок.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);	
			Если сДок.Дата < (КонецДня(актуальнаДатаЗапрета)+1) Тогда
				снятьСРегистрацииКОбменуСсылку(сДок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  	
	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 

КонецФункции

Функция М_00012_ПроведениеСписаний_Дубль()
	М_00011_ПроведениеСписаний();
КонецФункции

Функция снятьСРегистрацииКОбменуСсылку(ссылка)
	планы = ПланыОбмена.ОбменРозницаУправлениеТорговлей103.Выбрать();
	Пока планы.Следующий() Цикл
		Если планы.НомерПринятого > 0 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,ссылка);
		КонецЕсли;
	Конеццикла;

КонецФункции

Функция М_00013_ПроставитьПредметРасчета()
	Запрос	=	новый Запрос("ВЫБРАТЬ
	      	 	             |	ВидыНоменклатуры.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	      	 	             |ГДЕ
	      	 	             |	ВидыНоменклатуры.ПризнакПредметаРасчета = &ПризнакПредметаРасчета");
	Запрос.УстановитьПараметр("ПризнакПредметаРасчета",Справочники.ПризнакиПредметовРасчета.ПустаяСсылка());
	Рез = Запрос.Выполнить().Выгрузить();
	
	ПирзнакТовар = Справочники.ПризнакиПредметовРасчета.НайтиПоНаименованию("Товар");
	
	флВсеХорошо = Истина;    
	
	Для каждого Строка из Рез цикл
		Об = Строка.Ссылка.ПолучитьОбъект();
		Об.ПризнакПредметаРасчета = ПирзнакТовар;
		
		Попытка
			Об.Записать();
		Исключение
			#Если Клиент тогда
				Сообщить("Не удалось записать: "+Строка(Об));
			#КонецЕсли 			
			флВсеХорошо = Ложь;
		КонецПопытки; 		
	КонецЦикла;
	
	Если не флВсеХорошо тогда 
		ВызватьИсключение НСтр("ru = 'Ошибка при записи Виды Номенклатуры)'");
	КонецЕсли;
	
КонецФункции


Функция М_00014_ГенерацияПользователей()
	Справочники.ФизическиеЛица.ГенерацияЮзеровДляФЛ();
КонецФункции


Функция М_00015_ИнициализацияКонстант()
	
	РегистрыСведений.ТБК_Константы.Установить_Магазин(ОбщегоНазначения.ПолучитьМагазинИзООРП());
	
	РегистрыСведений.ТБК_Константы.Установить_РежимРаботыРасширения("Release");
	
КонецФункции

Функция М_00016_SetBeta()
	
	РегистрыСведений.ТБК_Константы.Установить_Магазин(ОбщегоНазначения.ПолучитьМагазинИзООРП());
	
	//РегистрыСведений.ТБК_Константы.Установить_РежимРаботыРасширения("Beta");
	
КонецФункции

Функция М_00017_SetRelease()
	
	РегистрыСведений.ТБК_Константы.Установить_Магазин(ОбщегоНазначения.ПолучитьМагазинИзООРП());
	
	//РегистрыСведений.ТБК_Константы.Установить_РежимРаботыРасширения("Release");
	
КонецФункции

Функция М_00018_ГенерацияПользователей()
	Справочники.ФизическиеЛица.ГенерацияЮзеровДляФЛ();	
КонецФункции


Функция М_00018_ДатаЗапретИзменениеДанных20200831()
	актуальнаДатаЗапрета = Дата(2020,08,31);
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 
КонецФункции


Функция М_00019_ОтключениеРегламентныхЗаданий()
	Константы.РазрешенаРаботаСНовостями.Установить(Ложь);
	
	ТекущиеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	Для каждого ТекЗ из ТекущиеЗадания цикл
		Если ТекЗ.Использование тогда
			ТекЗ.Использование = Ложь;
			ТекЗ.Записать();
		КонецЕсли;		
	КонецЦикла;

КонецФункции


Функция М_00020_ReadConfiguration()
	
	РежимРаботыРасширения = "Release";
	
	Попытка
		док = Новый ТекстовыйДокумент();
		//док.УстановитьТекст(режимРаботыРасширения);
		док.Прочитать("c:\app\database\Tabakon.Configuration.txt");
		РежимРаботыРасширения = СокрЛП(док.ПолучитьТекст());
	Исключение
	КонецПопытки;
	
	РегистрыСведений.ТБК_Константы.Установить_РежимРаботыРасширения(РежимРаботыРасширения);

КонецФункции

Функция М_00021_RemoveBadDataMart()
	
	РегистрыСведений.Штрихкоды.УдалитьНеВерные_ШтрихкодыУпаковокТоваров();
	
КонецФункции

Функция М_00022_ЧисткаШтрихкодов()
	РегистрыСведений.Штрихкоды.ЧисткаШтрихкодов();
КонецФункции

Функция М_00023_ЧисткаДублейХарактеристик()
	РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ЧисткаДублейХарактеристик();
КонецФункции


Функция М_00024_СозданиеНовойСтатьиВозвратОтПокупателя()
	СтатьяВозврата	=	Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Возврат оплаты покупателю");

	Если не ЗначениеЗаполнено(СтатьяВозврата) тогда
		НоваяСтатья							= Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		НоваяСтатья.Наименование			= "Возврат оплаты покупателю";
		НоваяСтатья.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.ВозвратОтПокупателя;
		Попытка
			НоваяСтатья.Записать();
		Исключение
			ВызватьИсключение НСтр("ru = 'Ошибка при записи СтатьиДвиженияДенежныхСредств)'");
		КонецПопытки;
	КонецЕсли;

КонецФункции


Функция М_00020_ДатаЗапретИзменениеДанных20200930()
	
	актуальнаДатаЗапрета = Дата(2020,09,30);
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 

КонецФункции

Функция М_00023_БлокировкаПользователейБезПароля()
	_пользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();	
	
	Для Каждого пользователь из _Пользователи Цикл
		ЕСЛИ ЛОЖЬ ТОГДА пользователь = ПользователиИнформационнойБазы.НайтиПоИмени(""); КонецЕсли;
		
		если Пользователь.Имя = "Админ"  Тогда
			Продолжить;
		КонецЕсли;
		
		блокируем = ложь;
		
		Если СтрДлина(Пользователь.Имя) < 3 Тогда
			блокируем = истина;
		Иначе
			хвост = СокрЛП(Прав(Пользователь.Имя,2));
			Попытка 
				ч = Число(хвост);
			Исключение
				блокируем = истина;
			Конецпопытки;
		КонецЕсли;
		
		Если блокируем = истина Тогда
			Пользователь.Пароль = "159753";
			Пользователь.ПоказыватьВСпискеВыбора = ложь;
			Пользователь.АутентификацияСтандартная=ЛОЖЬ;
			пользователь.Записать();
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция М_00025_ЗагрузкаВаучеров()
	ДокМА	=	Документы.МаркетинговаяАкция.Выбрать();
	Если ДокМА.Следующий() тогда
		Об = ДокМА.ПолучитьОбъект();
		
		Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		      	 	             |	СкидкиНаценки.Ссылка КАК Ссылка,
		      	 	             |	СкидкиНаценки.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
		      	 	             |ИЗ
		      	 	             |	Справочник.СкидкиНаценки КАК СкидкиНаценки
		      	 	             |ГДЕ
		      	 	             |	НЕ СкидкиНаценки.ПометкаУдаления
		      	 	             |
		      	 	             |УПОРЯДОЧИТЬ ПО
		      	 	             |	РеквизитДопУпорядочивания УБЫВ");
		Рез = Запрос.Выполнить().Выгрузить();
		Если Рез.Количество() >0 тогда
			Порядок		=	Рез[0].РеквизитДопУпорядочивания + 1;
			СоздатьВаучерИДобавить("BUYNOW",500,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("BUYNOW+РЕФКОД",500,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 500 Рекомендации",500,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 750 Рекомендации",750,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 1000 Рекомендации",1000,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 500 Переключение",500,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 700 Д.Р.",700,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 500 Д.Р.",500,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 200 рублей",200,Рез[0].Ссылка,Порядок,ОБ);
			СоздатьВаучерИДобавить("Ваучер 170 рублей",170,Рез[0].Ссылка,Порядок,ОБ);
			
			Об.Записать();
		КонецЕсли;   		
		
	КонецЕсли;	
КонецФункции

Процедура  СоздатьВаучерИДобавить(Наименование,Сумма,СсылкаВаучер,Порядок,ОБ)
	
	Попытка 
		НовыйВаучер = Справочники.СкидкиНаценки.НайтиПоНаименованию(Наименование);
		Если НовыйВаучер.Пустая() тогда
			НовыйВаучер = Справочники.СкидкиНаценки.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НовыйВаучер,СсылкаВаучер,"Управляемая,СтатусДействия,СпособПредоставления,ОбластьПредоставления");
			
			НовыйВаучер.РеквизитДопУпорядочивания	=	Порядок;
			НовыйВаучер.ЗначениеСкидкиНаценки		=	Сумма;
			НовыйВаучер.Наименование				=	Наименование;
			НовыйВаучер.Записать();
		КонецЕсли;
		
		если об.СкидкиНаценки.Найти(НовыйВаучер,"СкидкаНаценка") = Неопределено тогда
			новаяСтрока	=	Об.СкидкиНаценки.Добавить();
			новаяСтрока.ДатаНачала		=	'20200101';
			новаяСтрока.СкидкаНаценка	=	НовыйВаучер.Ссылка;
		КонецЕсли;
	Исключение
		Сообщить("Не удалось записать ваучер: "+ОписаниеОшибки());
		ВызватьИсключение НСтр("ru = 'Ошибка при записи Скидки Наценки'");
	КонецПопытки;
	
КонецПроцедуры


Функция М_00026_ОбнулитьЦеныБК()
	Пл = ПланыОбмена.ОбменРозницаУправлениеТорговлей103.НайтиПоКоду("УТ");
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	
	запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения");
	РезДата = Запрос.Выполнить().Выгрузить();
	Если РезДата.Количество() = 0 тогда
		актуальнаДатаЗапрета = Дата(2020,09,30);;
	иначе
		актуальнаДатаЗапрета = РезДата[0].ДатаЗапрета;
	КонецЕсли;


	запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	Номенклатура.Ссылка КАК Ссылка
	      	 	             |ПОМЕСТИТЬ Номенклат
	      	 	             |ИЗ
	      	 	             |	Справочник.Номенклатура КАК Номенклатура
	      	 	             |ГДЕ
	      	 	             |	Номенклатура.Наименование ПОДОБНО ""% БК%""
	      	 	             |;
	      	 	             |
	      	 	             |////////////////////////////////////////////////////////////////////////////////
	      	 	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	      	 	             |	ПрименениеЦенНоменклатурыТовары.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ПрименениеЦенНоменклатуры.Товары КАК ПрименениеЦенНоменклатурыТовары,
	      	 	             |	Номенклат КАК Номенклат
	      	 	             |ГДЕ
	      	 	             |	ПрименениеЦенНоменклатурыТовары.Ссылка.Проведен
	      	 	             |	И ПрименениеЦенНоменклатурыТовары.Номенклатура В (Номенклат.Ссылка)
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	ПрименениеЦенНоменклатурыТовары.Ссылка.Дата");
	Рез = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка из Рез цикл
		Об = Строка.Ссылка.ПолучитьОбъект();
		флНадоПровести = Ложь;
		
		Индекс = Об.Товары.Количество() - 1; 
		Пока Индекс >= 0 Цикл
			флНашли = Ложь;
			
			Для каждого СтрокаТовары Из Об.Товары цикл
				Если Прав(СтрокаТовары.Номенклатура.Наименование,3)=" БК" тогда
					Об.Товары.Удалить(СтрокаТовары);
					флНадоПровести	= Истина;
					флНашли			= Истина;
					Прервать;
					
				КонецЕсли;				
			КонецЦикла;
			
			Если не флНашли тогда Прервать; КонецЕсли;
			
			Индекс = Индекс - 1; 
		КонецЦикла;
		
		Если флНадоПровести тогда 
			Попытка
				НачатьТранзакцию();
					Об.Записать(РежимЗаписиДокумента.Проведение);

					ПланыОбмена.УдалитьРегистрациюИзменений(пл,Об.ссылка);
				ЗафиксироватьТранзакцию();

			Исключение
				сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли; 		
	КонецЦикла; 
	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета);
КонецФункции


Функция М_00026_TABAKON_122_ШокМарс()
	//номен = Справочники.Номенклатура.НайтиПоКоду("00048218317");
	//
	//нз = РегистрыСведений.ТБК_Штрихкоды.СоздатьНаборЗаписей();
	//нз.Отбор.Владелец.Установить(номен);
	//нз.Записать(Истина);
	//
	//нз = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	//нз.Отбор.Владелец.Установить(номен);
	//нз.Записать(Истина);

КонецФункции

Функция М_00026_TABAKON_122_ШокМарс_2()
	номен = Справочники.Номенклатура.НайтиПоКоду("00046120055");
	
	нз = РегистрыСведений.ТБК_Штрихкоды.СоздатьНаборЗаписей();
	нз.Отбор.Владелец.Установить(номен);
	нз.Записать(Истина);
	
	нз = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	нз.Отбор.Владелец.Установить(номен);
	нз.Записать(Истина);

КонецФункции


Функция М_00026_TABAKON_122_ШокМарс_3()
	
	мПлохихНоменклатур = Новый Массив;
	мПлохихНоменклатур.Добавить("00046120055");
	мПлохихНоменклатур.Добавить("00046120056");
	мПлохихНоменклатур.Добавить("00046120057");
	
	Для Каждого кодНомн из мПлохихНоменклатур Цикл
		
		номен = Справочники.Номенклатура.НайтиПоКоду(кодНомн);
	
		нз = РегистрыСведений.ТБК_Штрихкоды.СоздатьНаборЗаписей();
		нз.Отбор.Владелец.Установить(номен);
		нз.Записать(Истина);
		
		нз = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		нз.Отбор.Владелец.Установить(номен);
		нз.Записать(Истина);
		
	КонеццИкла;
	

КонецФункции

Функция М_00027_ДатаЗапретИзменениеДанных20201031()
	
	актуальнаДатаЗапрета = Дата(2020,10,31);
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 

КонецФункции

Функция М_00020_ОтчисткаСправочников()	
	Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	ПриходныйКассовыйОрдер.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	      	 	             |ГДЕ
	      	 	             |	ПриходныйКассовыйОрдер.Проведен
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	ПриходныйКассовыйОрдер.Дата УБЫВ");
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() >0 тогда
	
		НужнаяОрганизация = Рез[0].Ссылка.Организация;
		
		Если ЗначениеЗаполнено(НужнаяОрганизация) тогда
			Орг = Справочники.Организации.Выбрать();
			Пока Орг.Следующий() цикл
				Если СокрЛП(Орг.код) = СокрЛП(НужнаяОрганизация.Код) 
					или СокрЛП(Орг.Наименование) = СокрЛП(НужнаяОрганизация.Наименование) тогда
					Продолжить;
				КонецЕсли;
				
				Об = Орг.ПолучитьОбъект();
				Об.Удалить();
			КонецЦикла;
		иначе
			ВызватьИсключение НСтр("ru = 'Ошибка! Не найдена организация'");
		КонецЕсли;
					
		Кассы = Справочники.Кассы.Выбрать();
		Пока Кассы.Следующий() цикл
			Если ЗначениеЗаполнено(Кассы.Магазин) тогда
				Продолжить;	
			КонецЕсли;
			
			Об = Кассы.ПолучитьОбъект();
			Об.Удалить();
		КонецЦикла; 
		
		НужныйМаг = Неопределено;
		
		КассыККМ = Справочники.КассыККМ.Выбрать();
		Пока КассыККМ.Следующий() цикл
			Если ЗначениеЗаполнено(КассыККМ.Магазин) тогда
				НужныйМаг = КассыККМ.Магазин;
				Продолжить;	
			КонецЕсли;
			
			Об = КассыККМ.ПолучитьОбъект();
			Об.Удалить();
		КонецЦикла; 
		
		Маг = Справочники.Магазины.Выбрать();
		Пока Маг.Следующий() цикл
			Если Маг.ИспользоватьПрименениеЦен или НужныйМаг = Маг.Ссылка тогда
				Продолжить;
			КонецЕсли;
			//фикс транзитов
			Запрос	=	Новый запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			      	 	             |	ПеремещениеТоваров.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
			      	 	             |ГДЕ
			      	 	             |	ПеремещениеТоваров.Проведен
			      	 	             |	И (ПеремещениеТоваров.МагазинОтправитель = &Магазин
			      	 	             |			ИЛИ ПеремещениеТоваров.МагазинПолучатель = &Магазин)
			      	 	             |
			      	 	             |УПОРЯДОЧИТЬ ПО
			      	 	             |	ПеремещениеТоваров.Дата УБЫВ");
			Запрос.УстановитьПараметр("Магазин",Маг.Ссылка);
			Если не запрос.Выполнить().Пустой() тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(Маг.Наименование,"Центральный") >0
					или Найти(Маг.Наименование,"Транзит")>0 или Найти(Маг.Наименование,"Офис")>0 тогда
				Продолжить;
			КонецЕсли;

			//        			
			Об = Маг.ПолучитьОбъект();
			Об.Удалить();
		КонецЦикла;	
		
		Склады = Справочники.Склады.Выбрать();
		Пока Склады.Следующий() цикл
			Если Склады.ЭтоГруппа тогда
				Продолжить;
			КонецЕсли;
			
			Запрос	=	Новый запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			      	 	             |	ПеремещениеТоваров.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
			      	 	             |ГДЕ
			      	 	             |	ПеремещениеТоваров.Проведен
			      	 	             |	И (ПеремещениеТоваров.СкладОтправитель = &Склад
			      	 	             |			ИЛИ ПеремещениеТоваров.СкладПолучатель = &Склад)
			      	 	             |
			      	 	             |УПОРЯДОЧИТЬ ПО
			      	 	             |	ПеремещениеТоваров.Дата УБЫВ");
			Запрос.УстановитьПараметр("Склад",Склады.Ссылка);
			если не запрос.Выполнить().Пустой() тогда Продолжить; КонецЕсли;
			
			Запрос	=	Новый запрос("ВЫБРАТЬ
			      	 	             |	Магазины.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Справочник.Магазины КАК Магазины
			      	 	             |ГДЕ
			      	 	             |	(Магазины.СкладПродажи = &Склад
			      	 	             |			ИЛИ Магазины.СкладПоступления = &Склад)");
			Запрос.УстановитьПараметр("Склад",Склады.Ссылка);
			если не запрос.Выполнить().Пустой() тогда Продолжить; КонецЕсли;

			Об = Склады.ПолучитьОбъект();
			Попытка
				Об.Удалить();
			Исключение
				Сообщить(Об);
				ВызватьИсключение НСтр("ru = 'Не удалось удалить склад'");
			КонецПопытки;
		КонецЦикла;
		
	иначе
		ВызватьИсключение НСтр("ru = 'Нет приходников'");
	КонецЕсли;
КонецФункции

Функция М_00027_ФиксВаучеров()
	ДокМА	=	Документы.МаркетинговаяАкция.Выбрать();
	Если ДокМА.Следующий() тогда
		ОбДок = ДокМА.ПолучитьОбъект();

		УслПред	=	Справочники.УсловияПредоставленияСкидокНаценок.НайтиПоНаименованию("Сумма в документе не менее 0 руб.");

		ТБК_ПраваДоступа.СнятьДатуЗапрета();
		
		запрос	=	Новый запрос("ВЫБРАТЬ
		      	 	             |	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета
		      	 	             |ИЗ
		      	 	             |	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения");
		РезДата = Запрос.Выполнить().Выгрузить();
		Если РезДата.Количество() = 0 тогда
			актуальнаДатаЗапрета = Дата(2020,10,30);;
		иначе
			актуальнаДатаЗапрета = РезДата[0].ДатаЗапрета;
		КонецЕсли;
		
		//
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("BUYNOW");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	500;
			Об.Наименование	=	"Ваучер "+об.Наименование;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			об.Записать();
		КонецЕсли;
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("BUYNOW+РЕФКОД");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	500;
			Об.Наименование	=	"Ваучер "+об.Наименование;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;

			об.Записать();
		КонецЕсли;
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 500 Рекомендации");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	500;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
		
			об.Записать();
		КонецЕсли;
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 750 Рекомендации");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	750;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			
			об.Записать();
		КонецЕсли;	
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 1000 Рекомендации");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	1000;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			
			об.Записать();
		КонецЕсли;	
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 500 Переключение");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;			
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	500;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			
			об.Записать();
		КонецЕсли;	
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 700 Д.Р.");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма; 			
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	700;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			
			об.Записать();
		КонецЕсли;	
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 500 Д.Р.");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	500;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			
			об.Записать();
		КонецЕсли;
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 200 рублей");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	200;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			
			об.Записать();
		КонецЕсли;
		
		Вауч	=	Справочники.СкидкиНаценки.НайтиПоНаименованию("Ваучер 170 рублей");
		Если не Вауч.Пустая() тогда
			Об = Вауч.ПолучитьОбъект();
			Об.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
			Об.Управляемая			= Истина; 
			Об.ЗначениеСкидкиНаценки		=	170;
			Если не УслПред.Пустая() тогда
				НовСтрока		=	Об.УсловияПредоставления.Добавить();
				НовСтрока.УсловиеПредоставления	=	УслПред;
			КонецЕсли;
			
			об.Записать();
		КонецЕсли;		
		//	
		ОбДок.Записать(РежимЗаписиДокумента.Проведение);
		
		
		ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета);
	КонецЕсли;
КонецФункции


Функция М_00021_СменаСНО_20210101()
	ОрганизацияПДВ	=	Справочники.Организации.НайтиПоНаименованию("ИП Пинкасович Д.В.");
	
	СпрОрганизация	=	Справочники.Организации.Выбрать();
	флВсеХорошо = Истина;
	Пока СпрОрганизация.Следующий() цикл
		
		Если СпрОрганизация.Ссылка	=	ОрганизацияПДВ.Ссылка тогда
			МенеджерЗаписи = РегистрыСведений.ПрименениеСистемНалогообложения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период 					= '20210101';
			МенеджерЗаписи.Организация 				= СпрОрганизация.Ссылка;
			МенеджерЗаписи.СистемаНалогообложения 	= Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
			МенеджерЗаписи.ОсвобожденОтНДС			= Ложь;
			Попытка
				МенеджерЗаписи.Записать(Истина); 	
			Исключение
				#Если Клиент тогда
					Сообщить(ОписаниеОшибки());
				#КонецЕсли 
				флВсеХорошо = Ложь;;
			КонецПопытки;
		иначе
			МенеджерЗаписи = РегистрыСведений.ПрименениеСистемНалогообложения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период 					= '20210101';
			МенеджерЗаписи.Организация 				= СпрОрганизация.Ссылка;
			МенеджерЗаписи.СистемаНалогообложения 	= Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход;
			МенеджерЗаписи.ОсвобожденОтНДС			= Истина;
			Попытка
				МенеджерЗаписи.Записать(Истина); 	
			Исключение
				#Если Клиент тогда
					Сообщить(ОписаниеОшибки());
				#КонецЕсли 
				флВсеХорошо = ложь;;
			КонецПопытки;
			
		КонецЕсли;    	
	КонецЦикла;
	
	Если не флВсеХорошо тогда 
		ВызватьИсключение НСтр("ru = 'Ошибка при записи СНО'");
	КонецЕсли;
КонецФункции

Функция М_00028_СозданиеПрофиляТБК_Кассир()
	НоваяРоль	=	Справочники.ИдентификаторыОбъектовРасширений.НайтиПоНаименованию("ТБК кассир (Роль)");
	
	Если ЗначениеЗаполнено(НоваяРоль) тогда
	
		ПрофильТБК = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию("ТБК_Кассир");
		
		Если ПрофильТБК.Пустая() тогда		
			ПрофильК = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию("Кассир");
			
			НовыйЭЛ = ПрофильК.Скопировать();
			НовыйЭЛ.Наименование = "ТБК_Кассир";
			
			НР = НовыйЭЛ.Роли.Добавить();
			НР.Роль = НоваяРоль;

			НовыйЭЛ.Записать();			
			ПрофильТБК =  НовыйЭЛ.Ссылка;
		КонецЕсли; 
		
		//Изменение групп доступа
		//1 Удаляем из админов всех кроме админов
		Админ 						= Справочники.Пользователи.НайтиПоНаименованию("Админ");
		ГруппаДоступа 				= Справочники.ГруппыДоступа.НайтиПоНаименованию("Администраторы").ПолучитьОбъект();
		ГруппаДоступа.Пользователи.Очистить();
		НоваяСтрока					= ГруппаДоступа.Пользователи.Добавить();
		НоваяСтрока.Пользователь 	= Админ;
		ГруппаДоступа.Записать();

		//2 Добавляем всех в кассиры
		ГруппаДоступа 				= Справочники.ГруппыДоступа.НайтиПоНаименованию("Кассир");
		Если ГруппаДоступа.Пустая() тогда
			ГруппаДоступа = Справочники.ГруппыДоступа.СоздатьЭлемент();
			ГруппаДоступа.Наименование	= "Кассир";
			ГруппаДоступа.Профиль		= ПрофильТБК;
			ГруппаДоступа.Записать();
		иначе
			ГруппаДоступа = ГруппаДоступа.ПолучитьОбъект();
		КонецЕсли;
		
		ГруппаДоступа.Пользователи.Очистить();
		СпрПользователи = Справочники.Пользователи.Выбрать();
		Пока СпрПользователи.Следующий() цикл
			Если СпрПользователи.Ссылка = Админ или СпрПользователи.ПометкаУдаления тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока					= ГруппаДоступа.Пользователи.Добавить();
			НоваяСтрока.Пользователь 	= СпрПользователи.Ссылка; 	
		КонецЦикла;
		ГруппаДоступа.Профиль	=	ПрофильТБК;
		ГруппаДоступа.Записать();
	иначе
		ВызватьИсключение НСтр("ru = 'Не найдена роль: ТБК кассир (Роль)'");
	КонецЕсли;                   	
	
КонецФункции


Функция М_00029_ДатаЗапретИзменениеДанных20201130()
	
	текущаяДата = Дата(1990,01,01);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	MAX(ДатыЗапретаИзменения.ДатаЗапрета) КАК ДатаЗапрета
	               |ИЗ
	               |	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения";
	рез =Запрос.Выполнить().Выбрать();
	Если рез.Следующий() Тогда
		текущаяДата = рез.ДатаЗапрета;
	Конецесли;
	
	актуальнаДатаЗапрета = Дата(2020,11,30);
	
	Если текущаяДата>актуальнаДатаЗапрета Тогда
		актуальнаДатаЗапрета=текущаяДата;
	КонецЕсли;
	
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 

	
КонецФункции

Функция М_00030_УдалениеНеверныхШтрихкодов()

	ТЗНеверныеШК = Новый ТаблицаЗначений;
	ТЗНеверныеШК.Колонки.Добавить("НеверныйШК");
	ТЗНеверныеШК.Колонки.Добавить("НевернаяНоменклатура");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "7460402100396";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Сигариллы Captain Black (8) Tip Dark cream");
	
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46241597";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Vogue Классик Моментс");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46241580";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Vogue Микс Моментс");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46233240";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Kent Nanotek 2.0 White");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "4606203102662";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Табак Bali Mellow Virginia (40 гр)");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46209368";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Glamour №1 Amber");

	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "4012922851611";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Chapman Brown");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46233219";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Кент HDI Силвер");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46233202";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Кент HDI Блуе");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278678567";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Ягодный Рай");

	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278678604";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Персиковый Рай");
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278679762";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Кокосовое Молоко");

	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278678574";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Банановый Лёд");

	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278679793";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Фруктовый Чай");

	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278678529";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Ананасовый Лёд");

	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278679724";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Лёд Гуавы");

	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278678512";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Фруктовый Взрыв");
		
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "6970278678550";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Электронное устройство MASKKING HIGH Pro Манговый Лёд"); 
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "8050847748438";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Дисплей с 9 солнцезащитными очками OBP-9A ПРОМО"); 
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "2900054656957";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Сигариллы Биг Фут(5*8) БК");

	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46233585";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Ява Золотая Классика");   
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "4606203096541";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Честерфильд Блю");	
	
	НоваяСтрока = ТЗНеверныеШК.Добавить();
	НоваяСтрока.НеверныйШК = "46233585";
	НоваяСтрока.НевернаяНоменклатура = Справочники.Номенклатура.НайтиПоНаименованию("Ява Белое золото Классическая 100"); 	
	
	
	Для каждого Строка из ТЗНеверныеШК цикл
		нз = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	
		нз.Отбор.Штрихкод.Установить(Строка.НеверныйШК);
		нз.Отбор.Владелец.Установить(Строка.НевернаяНоменклатура);
		нз.Записать(); 
		
		нз = РегистрыСведений.ТБК_Штрихкоды.СоздатьНаборЗаписей();
	
		нз.Отбор.Штрихкод.Установить(Строка.НеверныйШК);
		нз.Отбор.Владелец.Установить(Строка.НевернаяНоменклатура);
		нз.Записать(); 
	КонецЦикла;  	
КонецФункции

Функция М_00031_ЗагрузкаПравилКорреспондента()
	МакетПравил = ПолучитьМакет("ПравилаОбменаКорреспондента");

	// Получаем имя временного файла в локальной ФС на сервере.
	ИмяВременногоФайлаКорреспондента = ПолучитьИмяВременногоФайла("xml");
	
	// Получаем файл правил для зачитки.
	//ДвоичныеДанныеКорреспондента = ДвоичныеДанныеИзМакетаКонфигурации(Отказ, Запись.ИмяПланаОбмена, Запись.ИмяМакетаПравилКорреспондента);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml"); 
	МакетПравил.Записать(ИмяВременногоФайла);
	
	ДвоичныеДанныеКорреспондента = Новый ДвоичныеДанные(ИмяВременногоФайла);
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);


	ДвоичныеДанныеКорреспондента.Записать(ИмяВременногоФайлаКорреспондента);
	
	// Зачитываем правила конвертации.
	КонвертацияОбъектовИнформационныхБаз = Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
	
	// свойства обработки
	КонвертацияОбъектовИнформационныхБаз.РежимОбмена = "Загрузка";
	КонвертацияОбъектовИнформационныхБаз.ИмяПланаОбменаВРО = "ОбменРозницаУправлениеТорговлей103";
	КонвертацияОбъектовИнформационныхБаз.КлючСообщенияЖурналаРегистрации = ОбменДаннымиСервер.СобытиеЖурналаРегистрацииЗагрузкаПравилДляОбменаДанными();
	
	// методы обработки
	ПравилаЗачитанныеКорреспондента = КонвертацияОбъектовИнформационныхБаз.ПравилаОбмена(ИмяВременногоФайлаКорреспондента);
	
	УдалитьФайлы(ИмяВременногоФайлаКорреспондента);

	//Запись
	Запись = РегистрыСведений.ПравилаДляОбменаДанными.СоздатьНаборЗаписей();
	Запись.Отбор.ВидПравил.Установить(Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов);
	Запись.Прочитать();
	
	Запись[0].ПравилаXMLКорреспондента = Новый ХранилищеЗначения(ДвоичныеДанныеКорреспондента, Новый СжатиеДанных());
	Запись[0].ПравилаЗачитанныеКорреспондента = Новый ХранилищеЗначения(ПравилаЗачитанныеКорреспондента);
	
	Запись.Записать();
	
КонецФункции

Функция М_00032_ДатаЗапретИзменениеДанныхОбщая()
	
	текущаяДата = Дата(1990,01,01);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	MAX(ДатыЗапретаИзменения.ДатаЗапрета) КАК ДатаЗапрета
	               |ИЗ
	               |	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения";
	рез =Запрос.Выполнить().Выбрать();
	Если рез.Следующий() Тогда
		текущаяДата = рез.ДатаЗапрета;
	Конецесли;
	
	актуальнаДатаЗапрета = Дата(2021,08,31);
	
	Если текущаяДата>актуальнаДатаЗапрета Тогда
		актуальнаДатаЗапрета=текущаяДата;
	КонецЕсли;
	
	датаКудаПеренести = КонецДня(актуальнаДатаЗапрета) + 1;
	
	ТБК_ПраваДоступа.СнятьДатуЗапрета();
	Документы.МаркетинговаяАкция.ПередвинутьДокументыНаДату(датаКудаПеренести);	
	ТБК_ПраваДоступа.УстановитьДатуЗапрета(актуальнаДатаЗапрета); 

	
КонецФункции


Функция М_00033_УбратьНДСИзНоменклатуры()
	СтавкаБезНДС =  Перечисления.СтавкиНДС.БезНДС;
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	Номенклатура.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Справочник.Номенклатура КАК Номенклатура
	      	 	             |ГДЕ
	      	 	             |	Номенклатура.СтавкаНДС <> &СтавкаНДС
	      	 	             |	И НЕ Номенклатура.ПометкаУдаления");
	Запрос.УстановитьПараметр("СтавкаНДС",СтавкаБезНДС);
	
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого Строка из рез цикл
		Попытка
			Об = Строка.Ссылка.ПолучитьОбъект();
			Об.СтавкаНДС	=	СтавкаБезНДС;
			Об.Записать();
		Исключение
			ВызватьИсключение НСтр("ru = 'Не удалось записать номенклатуру!'"); 
		КонецПопытки;
	КонецЦикла;
	
КонецФункции

Функция М_00034_ОбнулениеОстатков()
	НужнаяДата = '20210305';

	
	Корректировка				=	Документы.КорректировкаРегистров.СоздатьДокумент();
	Корректировка.Дата			= 	НужнаяДата;
	Корректировка.Комментарий 	= "Обнуление регистра ТоварыНаСкладах на дату: "+НужнаяДата;
	Корректировка.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("Админ");
	
	Рег							= Корректировка.ТаблицаРегистров.Добавить();
	Рег.Имя 					= "ТоварыНаСкладах";
	
	запрос	=	новый запрос;
	Запрос.Текст	=	"ВЫБРАТЬ
	            	 	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	            	 	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	            	 	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	            	 	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
	            	 	|ИЗ
	            	 	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&дата, ) КАК ТоварыНаСкладахОстатки";

	Запрос.УстановитьПараметр("Дата",НужнаяДата);

	Рез	=	Запрос.Выполнить().Выгрузить();
	
	Ном	=	0;
	Для каждого строка из Рез цикл
		Ном=Ном+1;		
				
		СтрокаРег	=	Корректировка.Движения.ТоварыНаСкладах.Добавить();
		
		СтрокаРег.Регистратор	=	Корректировка;
		СтрокаРег.ВидДвижения	=	ВидДвиженияНакопления.Расход;	
		СтрокаРег.Активность	=	Истина;
		СтрокаРег.Период		=	НужнаяДата;
		
		ЗаполнитьЗначенияСвойств(СтрокаРег,Строка); 		
	КонецЦикла;
	
	Попытка
		Корректировка.Записать(); 		
		Сообщить("Записана корректировка "+Корректировка);
		//Форма=Корректировка.ПолучитьФорму("ФормаДокумента");
		//Форма.Открыть();
	Исключение
		ВызватьИсключение НСтр("ru = 'Не удалось записать корректировку по обнулению остатков!'");
	КонецПопытки;

	
КонецФункции

Функция М_00035_ПровестиОприходованиеПоОстаткам()
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ОприходованиеТоваров.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
	      	 	             |ГДЕ
	      	 	             |	ОприходованиеТоваров.Комментарий ПОДОБНО &Комментарий
	      	 	             |	И НЕ ОприходованиеТоваров.ПометкаУдаления");
	Запрос.УстановитьПараметр("Комментарий","Выравнивание остатков"); 	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() <> 1 тогда
		ВызватьИсключение НСтр("ru = 'Не найдено оприходование'");
	иначе		
		
		Об = рез[0].Ссылка.ПолучитьОбъект();
		Если Об.Проведен тогда
			Попытка
				Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				ВызватьИсключение НСтр("ru = 'Не удалось распровести оприходование!'");
			КонецПопытки;
		КонецЕсли;
		
		Запрос	=	новый запрос("ВЫБРАТЬ
		      	 	             |	КорректировкаРегистров.Ссылка КАК Ссылка
		      	 	             |ИЗ
		      	 	             |	Документ.КорректировкаРегистров КАК КорректировкаРегистров
		      	 	             |ГДЕ
		      	 	             |	КорректировкаРегистров.Комментарий ПОДОБНО &Комментарий");
		Запрос.УстановитьПараметр("Комментарий","Выравнивание остатков");
		
		Если не запрос.Выполнить().Пустой() тогда 
			//ВызватьИсключение НСтр("ru = 'Корректировка уже существует!'");
			Возврат истина;
		КонецЕсли;
			
		НужнаяДата = рез[0].Ссылка.дата;
	
		Корректировка				=	Документы.КорректировкаРегистров.СоздатьДокумент();
		Корректировка.Дата			= 	НужнаяДата;
		Корректировка.Комментарий 	= 	"Выравнивание остатков";
		Корректировка.Ответственный = 	 Справочники.Пользователи.НайтиПоНаименованию("Админ");
		
		Рег							= Корректировка.ТаблицаРегистров.Добавить();
		Рег.Имя 					= "ТоварыНаСкладах";
		
		Для каждого строка из рез[0].Ссылка.Товары цикл
					
			СтрокаРег	=	Корректировка.Движения.ТоварыНаСкладах.Добавить();
			
			СтрокаРег.Регистратор	=	Корректировка;
			СтрокаРег.ВидДвижения	=	ВидДвиженияНакопления.Приход;	
			СтрокаРег.Активность	=	Истина;
			СтрокаРег.Период		=	НужнаяДата;
			СтрокаРег.Склад			=	рез[0].Ссылка.Склад;
			
			ЗаполнитьЗначенияСвойств(СтрокаРег,Строка); 		
		КонецЦикла;
		
		Попытка
			Корректировка.Записать(); 		
			Сообщить("Записана корректировка "+Корректировка);
			//Форма=Корректировка.ПолучитьФорму("ФормаДокумента");
			//Форма.Открыть();
		Исключение
			ВызватьИсключение НСтр("ru = 'Не удалось записать корректировку по обнулению остатков!'");
		КонецПопытки;

		
	КонецЕсли;  

	
КонецФункции


