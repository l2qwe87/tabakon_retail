
Процедура ВыполнитьОбмен() ЭКСПОРТ
	
	ТБК_Номенклатура.Установить_ОсобенностьУчетаДля_ТабачнаяПродукция();
  	РегистрыСведений.ТБК_Штрихкоды.СинхронизацияШтрихкодов();
		
	
	РегистрыСведений.Штрихкоды.ОбработатьТипыШтрихкодов();	
	РегистрыСведений.Штрихкоды.ЧисткаШтрихкодов();
		
	планы = ПланыОбмена.ОбменРозницаУправлениеТорговлей103.Выбрать();
	Пока планы.Следующий() Цикл
		Если планы.НомерПринятого > 0 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.РегистрыСведений.Штрихкоды);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.Номенклатура);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.ХарактеристикиНоменклатуры);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.УпаковкиНоменклатуры);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.БазовыеЕдиницыИзмерения);			
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.Магазины);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.ПланыВидовХарактеристик.ТипыШтрихкодов);
			
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.ФизическиеЛица);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.Пользователи);
			
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.Организации);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.Кассы);
			//ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.КассыККМ);
			
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.ВидыНоменклатуры);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Документы.ПеремещениеТоваров);
			
			//Марк 2024-12-12
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.ВидыОплатЧекаККМ);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Документы.ПоступлениеТоваров);
			//КонецМарк
			
		КонецЕсли;
	Конеццикла;
	
	сценарии = Справочники.СценарииОбменовДанными.Выбрать();
	Пока сценарии.Следующий() Цикл  
		Отказ = ложь;
		ОбменДаннымиСервер.ВыполнитьОбменДаннымиПоСценариюОбменаДанными(Отказ, сценарии.Ссылка);
	КонецЦикла;	

	Справочники.ФизическиеЛица.ГенерацияЮзеровДляФЛ();
	Справочники.ФизическиеЛица.ПроверкаФИО();
	
	//Марк 2025-02-03 
	ЗажержкаВыполненияВебСервисов();
	//КонецМарк
	
	ВыполнитьЗадачиПоВебСервису();
	ВыровнятьОстатки();//Вик 2022-05-04
	
	//Марк 2024-05-07
	//ОтправкаСообщенийВ_ТГ();
	//КонецМарк
	
	Если Час(ТекущаяДата()) > 0 и Час(ТекущаяДата()) <8 тогда 
		Справочники.Номенклатура.УдалитьПустую();
	КонецЕсли;
	
	//Марк 2024-12-12
	Обработки.ТБК_Миграции.М_00057_СделатьПользователяАдминистратором();
	//КонецМарк
	
КонецПроцедуры

Процедура ЗажержкаВыполненияВебСервисов()
	
	ТаймерЗадержкиВыполленияВебСерсисов = ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ТаймерЗадержкиВыполленияВебСерсисов");
	
	Если ТаймерЗадержкиВыполленияВебСерсисов = Неопределено Тогда
	
		Рег = РегистрыСведений.ТБК_Константы.СоздатьМенеджерЗаписи();	
	    Рег.ИмяКонстанты 		= "ТаймерЗадержкиВыполленияВебСерсисов";
		Рег.ЗначениеКонстанты 	= 180;
		Рег.Записать(); 
		
		ТаймерЗадержкиВыполленияВебСерсисов = 180; 
		
	КонецЕсли;
	
	РадомСкекунды = ОбщегоНазначения.ПолучитьСлучайноеЧисло(1,ТаймерЗадержкиВыполленияВебСерсисов);
	ДатаОжидания = ТекущаяДата() + РадомСкекунды;
	
	Пока ТекущаяДата() < ДатаОжидания Цикл  КонецЦикла;

КонецПроцедуры


Процедура ОтправкаСообщенийВ_ТГ()
	
	Токен	=	"5966721453:AAHn8QgTocNeVFZ0yiehFELLHPo1ay5oApg";
	ИДКРАША	=	"-1001403844951";
	Магазин = ОбщегоНазначения.ПолучитьМагазин();
	
	//Фокуская мотивация (поиск пустой группы) +++
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТБКФокуснаяМотивация.Период КАК Период,
	                      |	ТБКФокуснаяМотивация.Номенклатура КАК Номенклатура
	                      |ИЗ
	                      |	РегистрСведений.ТБКФокуснаяМотивация КАК ТБКФокуснаяМотивация
	                      |ГДЕ
	                      |	ТБКФокуснаяМотивация.Период МЕЖДУ &ПериодНач И &ПериодКон
	                      |	И ТБКФокуснаяМотивация.Номенклатура = &Номенклатура");
	
	Запрос.УстановитьПараметр("ПериодКон", ТекущаяДата());
	Запрос.УстановитьПараметр("ПериодНач", ТекущаяДата() - 5256000);
	Запрос.УстановитьПараметр("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	ПустойРезультат = Запрос.Выполнить().Пустой(); 
	Если НЕ ПустойРезультат Тогда
		
		ОбщегоНазначения.ОтправитьСообщениеВТелеграмм(Токен, ИДКРАША, "В фокусной мотивации имеется пустая номенклатура. Магазин: " + Магазин);
		
		
	КонецЕсли; 
	
	//Фокуская мотивация (поиск пустой группы) ---

КонецПроцедуры

Функция СнятьФлагиОрдернойСхемы()
	МассивСкладовПоОрдернойСхеме = ПолучитьМассивСкладовПоОрдернойСхеме();
	
	Запрос = Новый Запрос;
	ЗАпрос.Текст = "ВЫБРАТЬ
	               |	магазины.Ссылка КАК Ссылка,
				   |	магазины.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Магазины КАК магазины ГДЕ ИспользоватьОрдернуюСхемуПриПеремещении";
	
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		Если ЛОЖЬ Тогда Рез = Справочники.Магазины.ПустаяСсылка(); КонецЕсли;
		
		Если МассивСкладовПоОрдернойСхеме.Найти(нрег(рез.Наименование)) <> Неопределено тогда Продолжить КонецЕсли;
		
		об = Рез.Ссылка.ПолучитьОбъект();
		об.ИспользоватьОрдернуюСхемуПриПеремещении = ЛОЖЬ;
		об.ОбменДанными.Загрузка=Истина;
		об.Записать();
	КонецЦикла;
КонецФункции 

Функция ПолучитьМассивСкладовПоОрдернойСхеме()
	Массив = Новый Массив;
	Массив.Добавить(нрег("Интернет Магазин"));
	Массив.Добавить(нрег("Ленинский"));
	Массив.Добавить(нрег("БалканскаяПлПДВ"));
	Массив.Добавить(нрег("ГулливерСДП"));
	Массив.Добавить(нрег("ФиолентСДП"));
	Массив.Добавить(нрег("МиксерПДВ"));
	Массив.Добавить(нрег("Галерея1814СДП"));
	Массив.Добавить(нрег("Ленинский2ПДВ"));
	Массив.Добавить(нрег("Балкания Север"));
	Массив.Добавить(нрег("ДевяткиноПДВ"));
	
	//второй эшалон
	Массив.Добавить(нрег("Osinka"));
	Массив.Добавить(нрег("БайконурскийЛАФ"));
	Массив.Добавить(нрег("Бухарестская д.89"));
	Массив.Добавить(нрег("ДумскаяКИВ"));
	Массив.Добавить(нрег("Ларина15ПДВ"));
	Массив.Добавить(нрег("Линия7КИВ"));
	Массив.Добавить(нрег("ОКЕЙВТЕ"));
	Массив.Добавить(нрег("Смайл ТК"));
	Массив.Добавить(нрег("ТуканТК"));
	Массив.Добавить(нрег("Финляндский вокзал"));
	Массив.Добавить(нрег("Черная речка 1")); 
	
	//третий эшалон
	Массив.Добавить(нрег("БалканыРивГош2ЛИГ"));
	Массив.Добавить(нрег("Гашека5ПДВ"));
	Массив.Добавить(нрег("Димитрова11ПДВ"));
	Массив.Добавить(нрег("ДимитроваПДВ"));
	Массив.Добавить(нрег("Звездная2ПДВ"));
	Массив.Добавить(нрег("ЗвезднаяСЮБ"));
	Массив.Добавить(нрег("РадугаСЮБ"));
	Массив.Добавить(нрег("Универсам Южный"));
	Массив.Добавить(нрег("АтмосфераПДВ"));
	Массив.Добавить(нрег("КамышоваяПДВ"));
	Массив.Добавить(нрег("Кушелевская1ПДВ")); 	
	Массив.Добавить(нрег("Лесная"));
	Массив.Добавить(нрег("МеркурийСМА"));
	Массив.Добавить(нрег("МонпансьеБЮА")); 
	Массив.Добавить(нрег("ОкейБогатырскийПАО"));
	Массив.Добавить(нрег("Питерлэнд ТРЦ"));
	Массив.Добавить(нрег("ПятьОзёрВЛГ")); 
	
	//четвертый эшалон
	Массив.Добавить(нрег("БухарестскаяМВГ"));
	Массив.Добавить(нрег("ГатчинаКубусМВГ"));
	Массив.Добавить(нрег("ГринПаркПДВ"));
	Массив.Добавить(нрег("КировскСЮБ"));
	Массив.Добавить(нрег("КолпиноЛентаВЛГ"));
	Массив.Добавить(нрег("КолпиноМеркурийВЛГ"));
	Массив.Добавить(нрег("КолпиноОкейВЛГ"));
	Массив.Добавить(нрег("ЛиговВАА"));
	Массив.Добавить(нрег("ЛомоносовЛентаПАО"));
	Массив.Добавить(нрег("МеждународнаяМВС"));
	Массив.Добавить(нрег("МорозовапосГАМ")); 	
	Массив.Добавить(нрег("Москва Форт"));
	Массив.Добавить(нрег("МоскваКрасныйКитБОК"));
	Массив.Добавить(нрег("МоскваПринцПлазаБОК")); 
	Массив.Добавить(нрег("МоскваЯсеневоБДЮ"));
	Массив.Добавить(нрег("МосковскаяМВГ"));
	Массив.Добавить(нрег("ПаркПобедыМВС"));
	Массив.Добавить(нрег("РиоБЮА"));
	Массив.Добавить(нрег("Рыбацкое Находка"));
	Массив.Добавить(нрег("РыбацкоеПарадМВС"));
	Массив.Добавить(нрег("СлавянкаВТЕ"));
	Массив.Добавить(нрег("СосновыйБорПДВ"));
	Массив.Добавить(нрег("Тосно2ЛАФ"));
	Массив.Добавить(нрег("ТосноЛАФ"));
	Массив.Добавить(нрег("ЭлектраМВГ"));
	Массив.Добавить(нрег("ЮжныйПолюс2СМА"));
	Массив.Добавить(нрег("ЮжныйполюсПДВ"));
	Массив.Добавить(нрег("Кириши2ПДВ")); 
	
	//пятый эшалон
	Массив.Добавить(нрег("АкадемПарк2ПДВ"));
	Массив.Добавить(нрег("БестужевскийТЦ"));
	Массив.Добавить(нрег("ВасилеостровскаяПДВ"));
	Массив.Добавить(нрег("КиришиЛАФ"));
	Массив.Добавить(нрег("Лиговский53ПДВ"));
	Массив.Добавить(нрег("ЛьвовскаяСЮБ"));
	Массив.Добавить(нрег("МаксиСопотПДВ"));
	Массив.Добавить(нрег("Московский6ПДВ"));
	Массив.Добавить(нрег("Нарвский29ПДВ")); 	
	Массив.Добавить(нрег("НовочеркасскаяПДВ"));
	Массив.Добавить(нрег("ОхтаМоллЛИГ")); 	
	Массив.Добавить(нрег("Перинные ряды ПЕРЕКРЕСТОК"));
	Массив.Добавить(нрег("ПикПДВ"));
	Массив.Добавить(нрег("ПриморскаяПДВ")); 
	Массив.Добавить(нрег("РодеоЛАФ"));
	Массив.Добавить(нрег("ТихвинПАО"));
	Массив.Добавить(нрег("ТККубусВолховПАО"));
	Массив.Добавить(нрег("ТКСеннаяЛАФ"));
	Массив.Добавить(нрег("ЧкаловскаяКИВ"));
	Массив.Добавить(нрег("ШкиперскийКИВ"));
	Массив.Добавить(нрег("Шоссе Революции"));
	
	//шестой эшалон
	Массив.Добавить(нрег("АВТОВО"));
	Массив.Добавить(нрег("Большевиков пр. 32"));
	Массив.Добавить(нрег("БонусТКПДВ"));
	Массив.Добавить(нрег("Бронницкая2ПДВ"));
	
	Массив.Добавить(нрег("Ветеранов171ГАМ"));
	Массив.Добавить(нрег("ВсеволожскЮжныйГАМ"));
	Массив.Добавить(нрег("ВыборгскоешоссеУСВ"));
	Массив.Добавить(нрег("ГрандКаньонБЮА"));
	
	Массив.Добавить(нрег("Европейский3")); 	
	Массив.Добавить(нрег("ЖемчужинаВАА"));
	Массив.Добавить(нрег("ЗаневскийКаскадУСВ")); 	
	Массив.Добавить(нрег("ИюньПДВ"));
	
	Массив.Добавить(нрег("Кировский1УСВ"));
	Массив.Добавить(нрег("ЛондонМоллУСВ")); 
	Массив.Добавить(нрег("Мега Дыбенко"));
	Массив.Добавить(нрег("МегаДыбенкоПДВ"));
	
	Массив.Добавить(нрег("МегаПарнасПДВ"));
	Массив.Добавить(нрег("Московский42ПДВ"));
	Массив.Добавить(нрег("Невский2УСВ"));
	Массив.Добавить(нрег("НевскийПрезентальМВС"));
	
	Массив.Добавить(нрег("НордСМА"));
	Массив.Добавить(нрег("Озерки2ПДВ"));
	Массив.Добавить(нрег("Озерки3ПДВ"));
	Массив.Добавить(нрег("ОкейГерманаСДП"));
	
	Массив.Добавить(нрег("ПарнасСитиБЮА"));
	Массив.Добавить(нрег("ТетрисВТЕ"));
	Массив.Добавить(нрег("Тихая12ГАМ"));
	Массив.Добавить(нрег("Ульянка"));
	
	Массив.Добавить(нрег("Французский 2"));
	Массив.Добавить(нрег("Французский 3"));
	
	Возврат Массив;
КонецФункции

Процедура ВыполнитьЗадачиПоВебСервису()
	Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПроктиWStbk();
	Если Прокси = Неопределено тогда Возврат КонецЕсли; 
	
	Попытка
		УдалениеНеверныхШтрихкодов(Прокси);	
	Исключение   
	КонецПопытки;
	
	Попытка
		ОтправкаКодовСкидки(Прокси);
	Исключение   
	КонецПопытки;
	                                                                                 
	Попытка
		ЗагрузкаДанныхПоСкидкам(Прокси);
	Исключение   
	КонецПопытки;
	
	Попытка
		ОтправкаДанныхОНевернойОрганизации(Прокси);
	Исключение   
	КонецПопытки;
	
	Попытка
		ОтправкаДанныхОПокупкеСотрудников(Прокси); 
	Исключение   
	КонецПопытки;
	
	Попытка
		ОтправкаДанныхОЗаявкахМагазина(Прокси); 
	Исключение   
	КонецПопытки;
	
	Попытка
		ОтправкаДанныхПоЗарегистрированнымКлиентам();
	Исключение   
	КонецПопытки;
	
	Попытка
		ОтправкаДанныхИсторияПокупок(Прокси); 
	Исключение   
	КонецПопытки;
	
	Попытка
		ОтправкаДанныхСуммаОплат(Прокси); 
	Исключение   
	КонецПопытки;
	
	Попытка
		ОтправкаДанныхОЗаявкахНаЦенники(Прокси); 
	Исключение   
	КонецПопытки; 
	
	Попытка
		ЗагрузкаПлановПродаж(Прокси);
	Исключение   
	КонецПопытки;
	
	Попытка
		ОтправкаСтатусовЗаказовПокупателей(Прокси);
	Исключение   
	КонецПопытки;
	
	//Марк 31.07.2023
	Попытка
		ОтправкаДанныхЗаказовПокупателей(Прокси);
	Исключение
	КонецПопытки;
	//КонецМарк
	
	Попытка
		ОтправкаДанныхПоПодаркам(Прокси);
	Исключение
	КонецПопытки;
	
	//Вик 2023-12-18
	Попытка
		ОтправкаДанныхПоСертификатам(Прокси);
	Исключение
	КонецПопытки;
	//
	
	//Вик 2024-02-16
	Попытка
		ЗагрузкаУниверсальныхМарок(Прокси);
	Исключение
	КонецПопытки;
	//

	
	//Вик 2024-02-21
	Попытка
		ОтправитьДанныеФокуснаяМотивация(Прокси);
	Исключение
	КонецПопытки;
	//     

	//Вик 2024-10-21
	Попытка
		ОтправитьДанныеФокуснаяМотивация_ЗаДень(Прокси);
	Исключение
	КонецПопытки;
	//

	

	//Марк 2024-03-12
	Попытка
		ОтправитьДанныеРучныеСкидкиЗапись(Прокси);	
	Исключение
	КонецПопытки;
	//КонецМарк
		
	//ОтправкаДанныхОСканированииВПеремещениях(Прокси);
	
	//Вик 2024-03-20
	Попытка
		ОтправитьДанныеДолгиеЧеки(Прокси);
	Исключение
	КонецПопытки;
	//
	
	//Вик 2024-04-15
	Попытка
		ЗагрузкаСписанныхМарок(Прокси);
	Исключение
	КонецПопытки;
	//         

	
	//Вик 2024-04-22
	Попытка
		ОтправитьДанные_УценкаНовая(Прокси);
	Исключение
	КонецПопытки;
	// 
	
	//Марк 2024-09-17
	Попытка
		ОтправитьДанныеТБК_МаркиДляБК(Прокси);	
	Исключение
	КонецПопытки; 
	//КонецМарк 
	
	//Марк 2024-11-18
	Попытка
		ПолучитьПробитиеПоБК(Прокси);
	Исключение
	КонецПопытки;
	//КонецМарк
	
	//Марк
	Попытка
		ПолучитьШтрихкодаОбезличенныхМарок(Прокси);
	Исключение
	КонецПопытки; 
	
	//Попытка
	//
	//	Получить 
	//
	//Исключение
	//
	//КонецПопытки;

	Прокси = Неопределено;

КонецПроцедуры 

//Процедура ПолучитьЗадержку

Процедура ОтправитьДанныеТБК_МаркиДляБК(Прокси)
	
	МассивВозврата = Новый Массив;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТБКМаркиДляСписания.Чек КАК Чек,
	                      |	ТБКМаркиДляСписания.Номенклатура КАК Номенклатура,
	                      |	ТБКМаркиДляСписания.Марка КАК Марка,
	                      |	ТБКМаркиДляСписания.Ном КАК Ном
	                      |ИЗ
	                      |	РегистрСведений.ТБКМаркиДляСписания КАК ТБКМаркиДляСписания
	                      |ГДЕ
	                      |	НЕ ТБКМаркиДляСписания.ОтправленВ_УТ");
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого Выборка Из Результат Цикл
		
		эл = Новый Структура();
		эл.Вставить("Магазин", Строка(Выборка.Чек.Магазин));
		эл.Вставить("Чек", Строка(Выборка.Чек));
		эл.Вставить("Дата", Строка(Выборка.Чек.Дата));
		эл.Вставить("НоменклатураКод", Строка(Выборка.Номенклатура.Код));
		эл.Вставить("Марка", Строка(Выборка.Марка));
		
		МассивВозврата.Добавить(эл);
	
	КонецЦикла; 
		
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
	
	Ответ	=	Прокси.SendQr_BK(JS);
	
	Если Ответ Тогда
		
		Для каждого Выборка Из Результат Цикл
			
			Набор = РегистрыСведений.ТБКМаркиДляСписания.СоздатьНаборЗаписей();
			Набор.Отбор.Чек.Установить(Выборка.Чек);
			Набор.Отбор.Ном.Установить(Выборка.Ном);
			Набор.Прочитать();
			
			Набор[0].ОтправленВ_УТ = Истина;
			Набор.Записать();
		
		КонецЦикла; 
	
	КонецЕсли; 

	

КонецПроцедуры

Процедура ОтправкаКодовСкидки(Прокси)
	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	КомментарииСтатистики.ХешНаименования КАК ХешНаименования,
	      	 	             |	КомментарииСтатистики.Наименование КАК Наименование
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.КомментарииСтатистики КАК КомментарииСтатистики
	      	 	             |ГДЕ
	      	 	             |	КомментарииСтатистики.Наименование ПОДОБНО &НаименованиеТБК
	      	 	             |	И НЕ КомментарииСтатистики.Наименование ПОДОБНО &УжеЗагружен");
	Запрос.УстановитьПараметр("НаименованиеТБК","%tbk%");
	Запрос.УстановитьПараметр("УжеЗагружен","%загружен%");

	НужныйСклад			 = ОбщегоНазначения.ПолучитьСкладИзООРП();
	НужнаяКассаККМ		 = ОбщегоНазначения.ПолучитьКассаККМИзООРП();
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Дата",Строка.ХешНаименования);
		эл.Вставить("Склад",Строка(НужныйСклад));
		эл.Вставить("КассаККМ",Строка(НужнаяКассаККМ));
		
		Данные		=	Строка.Наименование;
		Поз3		=	СтрНайти(Данные,"/",,,3);
		Поз4		=	СтрНайти(Данные,"/",,,4);
		Поз5		=	СтрНайти(Данные,"/",,,5);
		Поз6		=	СтрНайти(Данные,"/",,,6);
		Поз7		=	СтрНайти(Данные,"/",,,7);
		Поз8		=	СтрНайти(Данные,"/",,,8);
		Поз9		=	СтрНайти(Данные,"/",,,9);
		Поз10		=	СтрНайти(Данные,"/",,,10);
		
		Если Найти(Строка.Наименование,"tbk_iqos") тогда
			Поз8	=	Поз3;
			Поз9	=	Поз4;
		КонецЕсли;
		
		Для ном = 0 по 100 цикл
			СуммаСкидки	=	Сред(Данные,Поз8+1,1);
			Если СуммаСкидки = "0" тогда
				Поз7	=	Поз7 + 14;
				Поз8	=	Поз8 + 14;
				Поз9	=	СтрНайти(Данные,"/",,Поз8+1);
			иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;

	
		КодГруппы	=	Сред(Данные,Поз3+1,11);		
		эл.Вставить("НоменклатурнаяГруппа",КодГруппы);		
		
		КодПричины	=	Сред(Данные,Поз5+1,Поз6-Поз5-1);
		эл.Вставить("Причина",КодПричины);
		
		эл.Вставить("Код",Данные);
		
		КодНом		=	Сред(Данные,Поз7+1,Поз8-Поз7-1);
		эл.Вставить("КодНом",КодНом);
		
		Если Поз10 = 0 тогда
			СуммаСкидки	=	Сред(Данные,Поз8+1,Поз9-Поз8-1);
			Сумма		=	Сред(Данные,Поз9+1);
		иначе
			СуммаСкидки	=	Сред(Данные,Поз8+1, Поз9-Поз8-1);
			Сумма		=	Сред(Данные,Поз9+1, Поз10-Поз9-1); 
		КонецЕсли;


		эл.Вставить("СуммаСкидки",СуммаСкидки);
		эл.Вставить("Сумма",Сумма);
		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
	
	Ответ	=	Прокси.WriteDiscountsQR(JS);
	
	Если Ответ тогда
		Для каждого Строка из рез цикл
			рег = РегистрыСведений.КомментарииСтатистики.СоздатьНаборЗаписей();
			рег.Отбор.ХешНаименования.Установить(Строка.ХешНаименования);
			рег.Прочитать();
			рег[0].Наименование = рег[0].Наименование + "загружен";
			рег.Записать();			
		КонецЦикла;
	КонецЕсли;

	
	//Сообщить(Ответ);	
КонецПроцедуры

Процедура УдалениеНеверныхШтрихкодов(Прокси)
	Ответ = Прокси.DelSHK();
	
	СтруктураОтвета	= ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//если пустой ответ - то пустой массив	
	
	Для каждого Строка из СтруктураОтвета цикл
		НевернаяНоменклатура	=	Справочники.Номенклатура.НайтиПоКоду(СокрЛП(Строка.КодНоменклатуры));
		Если НевернаяНоменклатура.Пустая() тогда Продолжить; КонецЕсли;
		
		
		НужЕд = Неопределено;
		Если ЗначениеЗаполнено(СокрЛП(Строка.ЕдиницаИзмерения)) тогда
			Если Найти(СокрЛП(Строка.ЕдиницаИзмерения),"шт") тогда
				НужНаим	=	"шт";
			ИначеЕсли  Найти(СокрЛП(Строка.ЕдиницаИзмерения),"упак") тогда
				НужНаим	=	"упак";				
			КонецЕсли;
			
			Запрос	=	Новый Запрос("ВЫБРАТЬ
			      	 	             |	УпаковкиНоменклатуры.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
			      	 	             |ГДЕ
			      	 	             |	УпаковкиНоменклатуры.Наименование ПОДОБНО &Наименование
			      	 	             |	И УпаковкиНоменклатуры.Владелец = &Владелец");
			Запрос.УстановитьПараметр("Наименование","%"+НужНаим+"%");
			Запрос.УстановитьПараметр("Владелец",НевернаяНоменклатура);
			
			РезЕдиница = Запрос.Выполнить().Выгрузить();
			Если РезЕдиница.Количество() >0 тогда
				НужЕд	=	РезЕдиница[0].Ссылка;	
			КонецЕсли;
		КонецЕсли;
					
		нз = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		
		нз.Отбор.Штрихкод.Установить(Строка.Штрихкод);
		нз.Отбор.Владелец.Установить(НевернаяНоменклатура);
		Если НужЕд <> Неопределено тогда
			Если НужНаим	=	"шт" тогда
				нз.Отбор.Упаковка.Установить(Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
			иначе
				нз.Отбор.Упаковка.Установить(НужЕд);
			КонецЕсли;
		КонецЕсли;
		
		нз.Записать();  
		
		//Вик 2024-10-31
		нз.Отбор.Штрихкод.Установить(Строка.Штрихкод);
		нз.Отбор.Владелец.Установить(НевернаяНоменклатура);
		Если НужЕд <> Неопределено тогда
			нз.Отбор.Упаковка.Установить(НужЕд);
		КонецЕсли;  	
		нз.Записать(); 
		//КонецВик
		
		Если НужЕд = Неопределено тогда
			нз = РегистрыСведений.ТБК_Штрихкоды.СоздатьНаборЗаписей();
			
			нз.Отбор.Штрихкод.Установить(Строка.Штрихкод);
			нз.Отбор.Владелец.Установить(НевернаяНоменклатура);
			нз.Записать(); 
		иначе
			Для каждого Ед из  РезЕдиница цикл
				нз = РегистрыСведений.ТБК_Штрихкоды.СоздатьНаборЗаписей();
				
				нз.Отбор.Штрихкод.Установить(Строка.Штрихкод);
				нз.Отбор.Владелец.Установить(НевернаяНоменклатура);
				нз.Отбор.Упаковка.Установить(Ед);
				нз.Записать();
				
			КонецЦикла;
		КонецЕсли;  
		
		Запрос	=	Новый Запрос("ВЫБРАТЬ
		      	 	             |	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
		      	 	             |ИЗ
		      	 	             |	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		      	 	             |ГДЕ
		      	 	             |	ШтрихкодыУпаковокТоваров.Номенклатура = &Номенклатура
		      	 	             |	И ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &Наименование");
		Запрос.УстановитьПараметр("Номенклатура", НевернаяНоменклатура);
		Запрос.УстановитьПараметр("Наименование", "%" + Строка.Штрихкод + "%");
		Рез = Запрос.Выполнить().Выбрать();
		Пока Рез.Следующий() цикл
			Об = Рез.Ссылка.ПолучитьОбъект();
			Попытка
				Об.Удалить();
			Исключение
			КонецПопытки;
		КонецЦикла;

	КонецЦикла; 

КонецПроцедуры

Процедура ЗагрузкаДанныхПоСкидкам(Прокси);
	КонстантаСкидкиИзУТСегодняЗагружены	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("СкидкиИзУТСегодняЗагружены");
	
	Если КонстантаСкидкиИзУТСегодняЗагружены <> Неопределено и КонстантаСкидкиИзУТСегодняЗагружены = НачалоДня(ТекущаяДата()) тогда
		Возврат
	КонецЕсли;

	
	Касса	=	ОбщегоНазначения.ПолучитьКассуИзПКО();
	Если не ЗначениеЗаполнено(Касса) тогда
		Запрос	=	Новый запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		      	 	             |	Кассы.Ссылка КАК Ссылка
		      	 	             |ИЗ
		      	 	             |	Справочник.Кассы КАК Кассы
		      	 	             |ГДЕ
		      	 	             |	НЕ Кассы.ПометкаУдаления");
		рез = Запрос.Выполнить().Выгрузить();
		
		Если рез.Количество() = 1 тогда
			Касса	=	рез[0].Ссылка;
		иначе
			Касса	=	"";
		КонецЕсли;
	КонецЕсли;
	
	Ответ	=	Прокси.PostDiscountsData(СокрЛП(Строка(Касса)));
	Если ЗначениеЗаполнено(Ответ) тогда
		ОтветМассив	=	ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//В массив
		
		Для каждого СтрокаМассива из ОтветМассив цикл //добавляем
			нз = РегистрыСведений.ХранилищеСертификатов.СоздатьНаборЗаписей();// этот регистр выбран чтобы не обновлять монопольно. в этом регистре есть даты для быстрого отбора + измерение в виде строки
			
			нз.Отбор.Идентификатор.Установить(СтрокаМассива.УИ); 
			НоваяЗапись	=	нз.Добавить();
			
			НоваяЗапись.ДатаНачала		=	СтрокаМассива.ПериодАкцииНачало;
			НоваяЗапись.ДатаОкончания	=	СтрокаМассива.ПериодАкцииКонец;
			НоваяЗапись.Идентификатор	=	СтрокаМассива.УИ;
			НоваяЗапись.ТипХранилища	=	Перечисления.ТипХранилищаСертификатов.ПерсональныеСертификаты;
			
			ДанныеАкции	=	СтрокаМассива.ТипАкции 					+ "/" + СтрокаМассива.Скидка 			+ "/" +
							СтрокаМассива.ТоварВПодарок 			+ "/" + СтрокаМассива.СуммаЧека 		+ "/" +
							СтрокаМассива.КоличествоНоменклатуры 	+ "/" + СтрокаМассива.Номенклатура		+ "/" +
							СтрокаМассива.КоличествоШагов			+ "/" + СтрокаМассива.КоличествоЧеков	+ "/" +	СтрокаМассива.НоменклатураИсключение;
							
							
			НоваяЗапись.Наименование	=	ДанныеАкции;
			НоваяЗапись.Сертификат		=	Новый ХранилищеЗначения(ДанныеАкции);
			
			нз.Записать();			
		КонецЦикла;
		
		ОбщегоНазначенияВызовСервера.Установить_ЗначениеКонстанты_Общая("СкидкиИзУТСегодняЗагружены", НачалоДня(ТекущаяДата()));				
	КонецЕсли;

КонецПроцедуры

Процедура ОтправкаДанныхОНевернойОрганизации(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
		      	 	             |	ВременныеИдентификаторыЗапросов.Идентификатор КАК Идентификатор,
		      	 	             |	ВременныеИдентификаторыЗапросов.Дата КАК Дата,
		      	 	             |	ВременныеИдентификаторыЗапросов.Запрос КАК Запрос
		      	 	             |ИЗ
		      	 	             |	РегистрСведений.ВременныеИдентификаторыЗапросов КАК ВременныеИдентификаторыЗапросов
		      	 	             |ГДЕ
		      	 	             |	НЕ ВременныеИдентификаторыЗапросов.Идентификатор ПОДОБНО &Идентификатор");
	Запрос.УстановитьПараметр("Идентификатор","%загружен%");

	Структура = Новый Структура;
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 тогда возврат КонецЕсли;
	
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Дата",Строка(Строка.Дата));		
		Данные		=	Строка.Запрос.Получить();
		
		эл.Вставить("Магазин",Строка(Данные.Магазин));
		эл.Вставить("Организация",Строка(Данные.Организация));
		эл.Вставить("ИНН",Данные.ИНН);
		эл.Вставить("Чек",Строка(Данные.Чек));
		эл.Вставить("ВидОперации",Данные.ВидОперации);
		эл.Вставить("ПроверкаМаркиИНН",Данные.ПроверкаМаркиИНН);
		эл.Вставить("НеверныйИНН",Данные.НеверныйИНН);
		эл.Вставить("Марка",Данные.Марка);
		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
	
	Ответ	=	Прокси.WriteWrongINN(JS);
	
	Если Ответ тогда
		Для каждого Строка из рез цикл
			рег = РегистрыСведений.ВременныеИдентификаторыЗапросов.СоздатьМенеджерЗаписи();
			рег.Идентификатор 	= "загружен " + Строка.Идентификатор;
			рег.Дата 			=  Строка.Дата;
			рег.Запрос			=  Строка.Запрос;
			рег.Записать();
			
			рег = РегистрыСведений.ВременныеИдентификаторыЗапросов.СоздатьНаборЗаписей();
			рег.Отбор.Идентификатор.Установить(Строка.Идентификатор);
			рег.Записать();			
		КонецЦикла;
	КонецЕсли; 
	
	//Сообщить(Ответ);	
КонецПроцедуры

Процедура ОтправкаДанныхОПокупкеСотрудников(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ПокупкиСотрудников.Чек КАК Чек,
	      	 	             |	ТБК_ПокупкиСотрудников.Продавец КАК Продавец
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_ПокупкиСотрудников КАК ТБК_ПокупкиСотрудников
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ПокупкиСотрудников.ОтправленВУТ");

	Структура = Новый Структура;
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 тогда возврат КонецЕсли;
	
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Чек",СокрЛП(Строка(Строка.Чек)));	
		Если Строка.Чек.ВидОперации =  Перечисления.ВидыОперацийЧекККМ.Возврат тогда
			эл.Вставить("СуммаЧека",Строка(-Строка.Чек.СуммаДокумента));
		иначе
			эл.Вставить("СуммаЧека",Строка(Строка.Чек.СуммаДокумента));
		КонецЕсли;	
		
		эл.Вставить("Сотрудник",СокрЛП(Строка(Строка.Продавец)));
		эл.Вставить("Дата",Строка(Строка.Чек.Дата));
		эл.Вставить("Магазин",Строка(Строка.Чек.Магазин));
		
		Для каждого СтрокаДанные из Строка.Чек.товары цикл			
			эл.Вставить("Номенклатура"				+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура));
			эл.Вставить("НоменклатураКод"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура.Код));
			эл.Вставить("Количество"				+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Количество));
			эл.Вставить("Цена"						+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Цена));
			эл.Вставить("Сумма"						+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Сумма));			
		КонецЦикла;
		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);

	Ответ	=	Прокси.WriteWorkerPurchases(JS);
	
	Если Ответ тогда
		Для каждого Строка из рез цикл 
			рег = РегистрыСведений.ТБК_ПокупкиСотрудников.СоздатьНаборЗаписей();
			рег.Отбор.Чек.Установить(Строка.Чек); 		

			НоваяСтрока					=	Рег.Добавить(); 
			НоваяСтрока.Чек	 			=	Строка.Чек;
			НоваяСтрока.Продавец 		=	Строка.Продавец;
			НоваяСтрока.ОтправленВУТ	=	истина;
			рег.Записать();		
		КонецЦикла;
	КонецЕсли;  
	//Сообщить(Ответ);	
КонецПроцедуры

Процедура ОтправкаДанныхОСканированииВПеремещениях(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	СохраненныеДанныеПомощникаПриемкиОтгрузки.ДокументРаспоряжение КАК ДокументРаспоряжение,
	      	 	             |	СохраненныеДанныеПомощникаПриемкиОтгрузки.ТоварыПеремещение КАК ТоварыПеремещение
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.СохраненныеДанныеПомощникаПриемкиОтгрузки КАК СохраненныеДанныеПомощникаПриемкиОтгрузки
	      	 	             |ГДЕ
	      	 	             |	НЕ СохраненныеДанныеПомощникаПриемкиОтгрузки.Операция ПОДОБНО &Операция");
	Запрос.УстановитьПараметр("Операция","%!%");

	Структура = Новый Структура;
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 тогда возврат КонецЕсли;
	
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Документ",Строка(Строка.ДокументРаспоряжение));		
		эл.Вставить("Номер",Строка(Строка.ДокументРаспоряжение.Номер));
		эл.Вставить("Дата",Строка(Строка.ДокументРаспоряжение.Дата));
		Данные		=	Строка.ТоварыПеремещение.Получить();
		Для каждого СтрокаДанные из Данные цикл			
			эл.Вставить("Номенклатура"				+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура));
			эл.Вставить("НоменклатураКод"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура.Код));
			эл.Вставить("Характеристика"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Характеристика));
			эл.Вставить("КоличествоФактРозница"		+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.КоличествоФакт)); 			
		КонецЦикла;
		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
	
	Ответ	=	Прокси.WriteSkanPer(JS);
	
	Если Ответ тогда
		Для каждого Строка из рез цикл
			рег = РегистрыСведений.СохраненныеДанныеПомощникаПриемкиОтгрузки.СоздатьНаборЗаписей();
			рег.Отбор.ДокументРаспоряжение.Установить(Строка.ДокументРаспоряжение);
			рег.Записать();	
			
			рег = РегистрыСведений.СохраненныеДанныеПомощникаПриемкиОтгрузки.СоздатьМенеджерЗаписи();
			рег.Операция	 			= рег.Операция + "!";
			рег.ДокументРаспоряжение 	=  Строка.ДокументРаспоряжение;
			рег.ТоварыПеремещение		=  Строка.ТоварыПеремещение;
			рег.Записать();		
		КонецЦикла;
	КонецЕсли;  
	//Сообщить(Ответ);	
КонецПроцедуры

Процедура ВыровнятьОстатки() 
	НужнаяДата = НачалоДня(ТекущаяДата());

	//поиск источника	
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ОприходованиеТоваров.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
	      	 	             |ГДЕ
	      	 	             |	ОприходованиеТоваров.Комментарий ПОДОБНО &Комментарий
	      	 	             |	И НЕ ОприходованиеТоваров.ПометкаУдаления
	      	 	             |	И ОприходованиеТоваров.Дата = &Дата");
	Запрос.УстановитьПараметр("Комментарий","Выравнивание остатков"); 	
	Запрос.УстановитьПараметр("Дата",НужнаяДата); 
	Рез_Опр = Запрос.Выполнить().Выгрузить();
	
	Если Рез_Опр.Количество() <>1 тогда
		Сообщить("Не найдено оприходование за эту дату!");
		Возврат;
	КонецЕсли;
	
	//проверка
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	КорректировкаРегистров.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.КорректировкаРегистров КАК КорректировкаРегистров
	      	 	             |ГДЕ
	      	 	             |	КорректировкаРегистров.Комментарий ПОДОБНО &Комментарий
	      	 	             |	И НЕ КорректировкаРегистров.ПометкаУдаления
	      	 	             |	И КорректировкаРегистров.Дата = &Дата");
	Запрос.УстановитьПараметр("Комментарий","%Выравнивание регистра ТоварыНаСкладах%"); 	
	Запрос.УстановитьПараметр("Дата",НужнаяДата); 

	Если не Запрос.Выполнить().Пустой() тогда
		Сообщить("Корректировка уже создана");
		Возврат;
	КонецЕсли;	
	

	//Списание
	НачатьТранзакцию();
	
	Корректировка				=	Документы.КорректировкаРегистров.СоздатьДокумент();
	Корректировка.Дата			= 	НужнаяДата;
	Корректировка.Комментарий 	= "Выравнивание регистра ТоварыНаСкладах на дату: "+НужнаяДата;
	Корректировка.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("Админ");
	
	Рег							= Корректировка.ТаблицаРегистров.Добавить();
	Рег.Имя 					= "ТоварыНаСкладах";
	
	запрос	=	новый запрос;
	Запрос.Текст	=	"ВЫБРАТЬ
	            	 	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	            	 	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	            	 	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	            	 	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
	            	 	|ИЗ
	            	 	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&дата, ) КАК ТоварыНаСкладахОстатки";

	Запрос.УстановитьПараметр("Дата",НужнаяДата);

	Рез	=	Запрос.Выполнить().Выгрузить();
	
	Ном	=	0;
	Для каждого строка из Рез цикл
		Ном=Ном+1;		
				
		СтрокаРег	=	Корректировка.Движения.ТоварыНаСкладах.Добавить();
		
		СтрокаРег.Регистратор	=	Корректировка;
		СтрокаРег.ВидДвижения	=	ВидДвиженияНакопления.Расход;	
		СтрокаРег.Активность	=	Истина;
		СтрокаРег.Период		=	НужнаяДата;
		
		ЗаполнитьЗначенияСвойств(СтрокаРег,Строка); 		
	КонецЦикла; 	

	//Оприходование
	Если Рез_Опр[0].Ссылка.Проведен тогда
		Об = Рез_Опр[0].Ссылка.ПолучитьОбъект();
		Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли; 

	Для каждого строка из Рез_Опр[0].Ссылка.Товары цикл  				
		СтрокаРег	=	Корректировка.Движения.ТоварыНаСкладах.Добавить();
		
		СтрокаРег.Регистратор	=	Корректировка;
		СтрокаРег.ВидДвижения	=	ВидДвиженияНакопления.Приход;	
		СтрокаРег.Активность	=	Истина;
		СтрокаРег.Период		=	НужнаяДата;
		СтрокаРег.Склад			=	Рез_Опр[0].Ссылка.Склад;
		
		ЗаполнитьЗначенияСвойств(СтрокаРег,Строка); 		
	КонецЦикла;

	Корректировка.Записать(); 		
	Сообщить("Записана корректировка "+Корректировка);
	
	ЗафиксироватьТранзакцию();	
КонецПроцедуры

Процедура ОтправкаДанныхОЗаявкахМагазина(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ДанныеПоЗаявкамМагазинов.Документ КАК Документ,
	      	 	             |	ТБК_ДанныеПоЗаявкамМагазинов.Экспедитор КАК Экспедитор,
	      	 	             |	ТБК_ДанныеПоЗаявкамМагазинов.Товары КАК Товары,
	      	 	             |	ТБК_ДанныеПоЗаявкамМагазинов.Документ.Проект КАК ДокументПроект
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_ДанныеПоЗаявкамМагазинов КАК ТБК_ДанныеПоЗаявкамМагазинов
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ДанныеПоЗаявкамМагазинов.Отправлен
	      	 	             |	И НЕ ТБК_ДанныеПоЗаявкамМагазинов.Документ.ПометкаУдаления");

	Структура = Новый Структура;
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();

	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Номер",Строка(Строка.Документ.Номер));
		эл.Вставить("Дата",Строка(Строка.Документ.Дата));
		эл.Вставить("Магазин",Строка(Строка.Документ.Магазин));
		эл.Вставить("ВидОперации",Строка(Строка.Документ.ВидОперации));
		эл.Вставить("Комментарий",Строка(Строка.Документ.Комментарий));
		эл.Вставить("ПричинаЗаявкиНаПоступление",Строка(Строка.Документ.ПричинаЗаявкиНаПоступление));
		эл.Вставить("Продавец",Строка(Строка.Документ.Продавец));
		эл.Вставить("Экспедитор",Строка(Строка.Документ.Экспедитор));
		эл.Вставить("Проект",Строка(Строка.Документ.Проект));
		эл.Вставить("КогдаЗабрали",Строка(Строка.Документ.КогдаЗабрали));
		эл.Вставить("Статус",Строка(Строка.Документ.Статус));
		эл.Вставить("ДатаСборкиФакт",Строка(Строка.Документ.ДатаСборкиФакт)); 		
		//Марк 2024-11-12
		эл.Вставить("КоличествоПакетов",Строка(Строка.Документ.КоличествоПакетов));
		//КонецМарк
		
		//Данные		=	Строка.Товары.Получить();
		//Для каждого СтрокаДанные из Данные цикл	
		НомСтр = 1; 
		
		Если Строка(Строка.ДокументПроект) = "Проверка марок" тогда
			
			Для каждого СтрокаДанные из Строка.Документ.МаркиНаПроверку цикл	
				
				Если СтрокаДанные.Проверена и не СтрокаДанные.Хорошая и СтрокаДанные.НашаОрганизация тогда
					эл.Вставить("Куар"						+	СтрЗаменить(Строка(НомСтр),Символы.НПП,"")  ,	Строка(СтрокаДанные.QR));
					эл.Вставить("НоменклатураКод"			+	Строка(НомСтр),	Строка(СтрокаДанные.Номенклатура.Код));
				КонецЕсли;
				
				НомСтр = НомСтр + 1;
			КонецЦикла; 
	
		иначе
			
			Для каждого СтрокаДанные из Строка.Документ.Товары цикл	
				
				эл.Вставить("Куар"						+	СтрЗаменить(Строка(НомСтр),Символы.НПП,"")  ,	Строка(СтрокаДанные.QR));

				
				Если СтрокаДанные.КоличествоФакт = 0 тогда
					Продолжить;
				КонецЕсли;
				
				эл.Вставить("Номенклатура"				+	Строка(НомСтр),	Строка(СтрокаДанные.Номенклатура));
				эл.Вставить("НоменклатураКод"			+	Строка(НомСтр),	Строка(СтрокаДанные.Номенклатура.Код));
				эл.Вставить("Характеристика"			+	Строка(НомСтр),	Строка(СтрокаДанные.Характеристика));
				эл.Вставить("Количество"				+	Строка(НомСтр),	Строка(СтрокаДанные.КоличествоФакт)); 
				эл.Вставить("СрокГодности"				+	Строка(НомСтр),	Строка(СтрокаДанные.СрокГодности));
				//Марк 2024-04-18
				эл.Вставить("ПричинаБрака"				+	Строка(НомСтр),	Строка(СтрокаДанные.ПричинаБрака));
				//КонецМарк
				                    
				НомСтр = НомСтр + 1;
			
			КонецЦикла;
		КонецЕсли;
		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	Если Рез.Количество() >0 тогда
		JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
		
		Ответ	=	Прокси.writerequests(JS);
		
		Если Ответ тогда
			Для каждого Строка из рез цикл
				рег = РегистрыСведений.ТБК_ДанныеПоЗаявкамМагазинов.СоздатьНаборЗаписей();
				рег.Отбор.Документ.Установить(Строка.Документ);
				
				НоваяСтрока	=	Рег.добавить();  
				НоваяСтрока.ОТправлен	 			=  истина;
				НоваяСтрока.Документ 				=  Строка.Документ;
				НоваяСтрока.Экспедитор 				=  Строка.Экспедитор;
				НоваяСтрока.Товары					=  Строка.Товары; 
				
				рег.Записать();	
				
				Если не (Строка.Документ.Статус	= "Собран" или Строка.Документ.Статус	= "Собирать" 
					ИЛИ Строка.Документ.Статус = "Нет в наличии" ИЛИ Строка.Документ.Статус = "Собран частично") тогда
					Об = Строка.Документ.ПолучитьОбъект();
					Об.Статус	=	"В работе";
					об.записать();
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;  
	КонецЕсли;

	
	//Обрабатываем ЗАЯВКИ "в работе"
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ЗаявкаОтМагазина.Ссылка КАК Документ
	      	 	             |ИЗ
	      	 	             |	Документ.ТБК_ЗаявкаОтМагазина КАК ТБК_ЗаявкаОтМагазина
	      	 	             |ГДЕ
	      	 	             |	ТБК_ЗаявкаОтМагазина.Проведен
	      	 	             |	И (ТБК_ЗаявкаОтМагазина.Статус = &Статус
	      	 	             |			ИЛИ ТБК_ЗаявкаОтМагазина.Статус = &Статус1)
	      	 	             |	И ТБК_ЗаявкаОтМагазина.ВидОперации = &ВидОперации");
	Запрос.УстановитьПараметр("Статус","В работе");
	Запрос.УстановитьПараметр("Статус1","");
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ТБК_ВидыОперацийЗаявокОтМагазина.ВозвратТовара);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Структура 		= Новый Структура;	
	МассивВозврата	=	Новый Массив;
	
	Если Рез.Количество() = 0 тогда возврат КонецЕсли;
	
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Номер",Строка(Строка.Документ.Номер));
		эл.Вставить("Дата",Строка(Строка.Документ.Дата));		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
	
	ОтветJS	=	Прокси.getrequests(JS);
	
	МассивПринятый	=	ОбщегоНазначения.jsonВСтруктура_Общая(ОтветJS);
	
	Для каждого Строка из МассивПринятый цикл 

		НомерДокумента		=	Строка.Номер;
		ДатаДокумента		=	ОбщегоНазначения.РазобратьДату(Строка.дата); 
		ДокументЗаявка		=	Документы.ТБК_ЗаявкаОтМагазина.НайтиПоНомеру(НомерДокумента,ДатаДокумента);
		
		Если ДокументЗаявка.Пустая() тогда 
			Продолжить; 
		КонецЕсли;
		
		Об	=	ДокументЗаявка.ПолучитьОбъект();
		Если Строка.Статус <>"" тогда 
			Об.Статус				=	Строка.Статус; 
		КонецЕсли;
		Об.ПричинаОтказа		=	Строка.Причина;
		Об.ПризнакОбновление	=	0;
		Об.Записать();   		
	КонецЦикла;

КонецПроцедуры

Процедура ОтправкаДанныхЗаказовПокупателей(Прокси) //Марк 31.07.2023
		
	//Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User_tbk", "http://192.168.0.22:1488/tradeold2020src/ws/tbk?wsdl");
		                                               
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	НЕ ЗаказПокупателя.ПометкаУдаления
		|	И ЗаказПокупателя.НаличиеНезарезервированныхСтрок
		|	И ЗаказПокупателя.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПокупателей.НеСогласован)
		|	И ЗаказПокупателя.НомерЗаказаНаСайте = """"";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		
		МассивВозврата = Новый Массив;
		
		Для каждого Документ Из РезультатЗапроса Цикл
			
			Эл = Новый Структура();
			Эл.Вставить("Номер", 					Строка(Документ.Ссылка.Номер));
			Эл.Вставить("Дата", 					Строка(Документ.Ссылка.Дата));
			
			Если Документ.Ссылка.КонтрагентТелефонЗначение <> "" Тогда
				
				СтруктураКонтрагентДанные = ОбщегоНазначения.jsonВСтруктура_Общая(Документ.Ссылка.КонтрагентТелефонЗначение);
				Если СтруктураКонтрагентДанные.Свойство("КлиентТелефон") Тогда
					Эл.Вставить("ТелефонКлиента", 				Строка(СтруктураКонтрагентДанные.КлиентТелефон));
				КонецЕсли; 
				Если СтруктураКонтрагентДанные.Свойство("КлиентИмя") Тогда
					Эл.Вставить("ИмяКлиента", 					Строка(СтруктураКонтрагентДанные.КлиентИмя)); 	
				КонецЕсли;
				Если  СтруктураКонтрагентДанные.Свойство("КомментарийСписокТоваров") Тогда
					Эл.Вставить("КомментарийСписокТоваров", 	Строка(СтруктураКонтрагентДанные.КомментарийСписокТоваров)); 	
				КонецЕсли; 
				
			КонецЕсли; 
			
			Эл.Вставить("Комментарий", 				Строка(Документ.Ссылка.Комментарий));
			Эл.Вставить("Магазин", 					Строка(Документ.Ссылка.Магазин));
			эл.Вставить("Продавец", 				Строка(Документ.Ссылка.Продавец));
			эл.Вставить("Склад", 					Строка(Документ.Ссылка.Склад));
			
			НомСтр = 1;
			
			Для каждого Строка Из Документ.Ссылка.Товары Цикл
				
				Эл.Вставить("НоменклатураКод" 		+Строка(НомСтр), Строка(Строка.Номенклатура.Код));
				Эл.Вставить("Характеристика" 		+Строка(НомСтр), Строка(Строка.Характеристика));
				Эл.Вставить("Количество"			+Строка(НомСтр), Строка(строка.Количество));
				Эл.Вставить("Цена"					+Строка(НомСтр), Строка(Строка.Цена));
				
				НомСтр = НомСтр + 1;
				
			КонецЦикла; 
			
			МассивВозврата.Добавить(эл);
			
		КонецЦикла;
		
		JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
		
		флУспех	=	Прокси.GetOrderBuyer(JS);
		
		Если НЕ Строка(флУспех) = "false" Тогда
			
			МассивПринятий = ТБК_WS.jsonВСтруктура(флУспех);
			
			Для каждого Документ Из МассивПринятий Цикл
				
				НомерДокумента		=	Документ.НомерДокумента;
				
				Если Сред(НомерДокумента,3,1) = "5" тогда
					НомерДокумента	=	лев(НомерДокумента,2) + "0" + Прав(НомерДокумента,6);
				КонецЕсли;   
				
				ДатаДокумента		=	ОбщегоНазначения.РазобратьДату(Документ.ДатаДокумента); 
				ДокументЗаказ		=	Документы.ЗаказПокупателя.НайтиПоНомеру(НомерДокумента,ДатаДокумента);
				
				
				ДокументЗаказ = ДокументЗаказ.ПолучитьОбъект();
				ДокументЗаказ.НомерЗаказаНаСайте = Документ.НомерСсайта; 
				ДокументЗаказ.НаличиеНезарезервированныхСтрок	= ложь;
				ДокументЗаказ.Записать();       
				
				Сообщить("Истина");
				
			КонецЦикла;
			
		иначе
			Сообщить("Ложь");
		КонецЕсли; 		
		
	КонецЕсли; 

КонецПроцедуры

Процедура ОтправкаДанныхИсторияПокупок(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ИсторияПокупокРозница.IDКлиента КАК IDКлиента,
	      	 	             |	ТБК_ИсторияПокупокРозница.Чек КАК Чек,
	      	 	             |	ТБК_ИсторияПокупокРозница.Отправлен КАК Отправлен,
	      	 	             |	ТБК_ИсторияПокупокРозница.Дата КАК Дата,
	      	 	             |	ТБК_ИсторияПокупокРозница.Товары КАК Товары,
	      	 	             |	ТБК_ИсторияПокупокРозница.Сумма КАК Сумма,
	      	 	             |	ТБК_ИсторияПокупокРозница.ВидОперации КАК ВидОперации,
	      	 	             |	ТБК_ИсторияПокупокРозница.КоличествоСписанныхБаллов КАК КоличествоСписанныхБаллов,
	      	 	             |	ТБК_ИсторияПокупокРозница.флНадоНачислить КАК флНадоНачислить
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_ИсторияПокупокРозница КАК ТБК_ИсторияПокупокРозница
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ИсторияПокупокРозница.Отправлен");

	Структура = Новый Структура;
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 тогда возврат КонецЕсли;
	
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Чек",						СокрЛП(Строка(Строка.Чек)));	
		эл.Вставить("СуммаЧека",				Строка(Строка.Сумма));		
		эл.Вставить("IDКлиента",				СокрЛП(Строка.IDКлиента));
		эл.Вставить("Дата",						Строка(Строка.Дата));
		эл.Вставить("Магазин",					Строка(Строка.Чек.Магазин));
		эл.Вставить("ВидОперации",				Строка(Строка.ВидОперации));
		эл.Вставить("КоличествоСписанныхБаллов",Строка(Строка.КоличествоСписанныхБаллов));
		эл.Вставить("флНадоНачислить",			Строка(Строка.флНадоНачислить));
		эл.Вставить("ДатаЧекККМПродажа",		Строка(Строка.Чек.ЧекККМПродажа.Дата));
		эл.Вставить("ЧекККМПродажа",			Строка(Строка.Чек.ЧекККМПродажа));  
		эл.Вставить("ГрупповоеНачисление",		"Истина"); 


		Данные		=	Строка.Товары.Получить();
		Для каждого СтрокаДанные из Данные цикл			
			эл.Вставить("Номенклатура"				+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура));
			эл.Вставить("НоменклатураКод"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура.Код));
			эл.Вставить("Характеристика"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Характеристика));
			эл.Вставить("КоличествоУпаковок"		+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.КоличествоУпаковок));
			эл.Вставить("Цена"						+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Цена));  
			эл.Вставить("Сумма"						+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Сумма)); 
			
			//Марк 2024-05-28 в старых записях ТБК_КоличествоБаллов не существует  
			Попытка
				эл.Вставить("СписанноБаллов"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.ТБК_КоличествоБаллов));  	
			Исключение
				эл.Вставить("СписанноБаллов"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(0));
			КонецПопытки;
			//КоенцМарк

		КонецЦикла;

		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);

	Ответ	=	Прокси.writehistorysales(JS);
	
	Если Ответ тогда
		Для каждого Строка из рез цикл 
			рег = РегистрыСведений.ТБК_ИсторияПокупокРозница.СоздатьНаборЗаписей();
			рег.Отбор.Чек.Установить(Строка.Чек); 
			рег.Отбор.IDКлиента.Установить(Строка.IDКлиента);
			рег.Прочитать();
			Рег[0].Отправлен	= Истина;			
			рег.Записать();		
		КонецЦикла;
	КонецЕсли;  
	//Сообщить(Ответ);	
КонецПроцедуры

Процедура ОтправкаДанныхСуммаОплат(Прокси)	
	НачалоПрошлогоДня	= НачалоДня(НачалоДня(ТекущаяДата())-1);
	ДатаЧисло			= Число(Лев(СтрЗаменить(Строка(НачалоПрошлогоДня),".",""),8));
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	БуферОперацийСтатистики.ДатаЗаписи КАК ДатаЗаписи
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.БуферОперацийСтатистики КАК БуферОперацийСтатистики
	      	 	             |ГДЕ
	      	 	             |	БуферОперацийСтатистики.ДатаЗаписи = &ДатаЗаписи");
	Запрос.УстановитьПараметр("ДатаЗаписи",ДатаЧисло);
	Если не запрос.Выполнить().Пустой() тогда Возврат КонецЕсли;
	

	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	СУММА(ЧекККМОплата.Сумма) КАК Сумма,
	      	 	             |	ЧекККМОплата.Ссылка.ВидОперации КАК ВидОперации,
	      	 	             |	ЧекККМОплата.ВидОплаты.Наименование КАК ВидОплатыНаименование,
	      	 	             |	ЧекККМОплата.Ссылка.Магазин КАК Магазин
	      	 	             |ИЗ
	      	 	             |	Документ.ЧекККМ.Оплата КАК ЧекККМОплата
	      	 	             |ГДЕ
	      	 	             |	ЧекККМОплата.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	      	 	             |	И ЧекККМОплата.Ссылка.Проведен
	      	 	             |	И (ЧекККМОплата.Ссылка.СтатусЧекаККМ = &СтатусАрхивный
	      	 	             |			ИЛИ ЧекККМОплата.Ссылка.СтатусЧекаККМ = &СтатусПробитый)
	      	 	             |
	      	 	             |СГРУППИРОВАТЬ ПО
	      	 	             |	ЧекККМОплата.Ссылка.ВидОперации,
	      	 	             |	ЧекККМОплата.ВидОплаты.Наименование,
	      	 	             |	ЧекККМОплата.Ссылка.Магазин");
	Запрос.УстановитьПараметр("ДатаНач",НачалоПрошлогоДня);//выгружаем за предыдущий день
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(НачалоПрошлогоДня));	
	Запрос.УстановитьПараметр("СтатусАрхивный",Перечисления.СтатусыЧековККМ.Архивный);	
	Запрос.УстановитьПараметр("СтатусПробитый",Перечисления.СтатусыЧековККМ.Пробитый);	
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 тогда возврат КонецЕсли;

	Структура = Новый Структура;   	
	МассивВозврата	=	Новый Массив; 	
	
	эл	=	Новый Структура;
	эл.Вставить("Магазин",					СокрЛП(Строка(Рез[0].Магазин)));
	эл.Вставить("Дата",						СокрЛП(Строка(НачалоПрошлогоДня)));	
	
	эл.Вставить("СуммаНал",	"0");	
	эл.Вставить("СуммаБезнал",	"0");	
	эл.Вставить("СуммаВозвратовНал",	"0");	
	эл.Вставить("СуммаВозвратовБезНал","0");

	Для каждого Строка из Рез цикл 		
		Если Строка(Строка.ВидОперации) = "Продажа" и Строка.ВидОплатыНаименование = "Наличные" тогда
			эл.Вставить("СуммаНал",	Строка(Строка.Сумма));	
			
		ИначеЕсли  Строка(Строка.ВидОперации) = "Продажа" и Строка.ВидОплатыНаименование = "Платежная карта" тогда
			эл.Вставить("СуммаБезнал",	Строка(Строка.Сумма));	
			
		иначеЕсли Строка(Строка.ВидОперации) = "Возврат" и Строка.ВидОплатыНаименование = "Наличные" тогда
			эл.Вставить("СуммаВозвратовНал",	Строка(Строка.Сумма));	
			
		ИначеЕсли  Строка(Строка.ВидОперации) = "Возврат" и Строка.ВидОплатыНаименование = "Платежная карта" тогда
			эл.Вставить("СуммаВозвратовБезНал",	Строка(Строка.Сумма));	
		КонецЕсли; 		
	КонецЦикла;
	
	МассивВозврата.Добавить(эл);	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);

	Ответ	=	Прокси.writepayment(JS);
	сообщить(Ответ);
	
	Если Ответ тогда
		Рег = РегистрыСведений.БуферОперацийСтатистики.СоздатьМенеджерЗаписи();
		Рег.ДатаЗаписи				=	ДатаЧисло;
		Рег.Записать();
	КонецЕсли;  
КонецПроцедуры

Процедура ОтправкаДанныхОЗаявкахНаЦенники(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ЗаявкаНаЦенники.Ссылка КАК Документ
	      	 	             |ИЗ
	      	 	             |	Документ.ТБК_ЗаявкаНаЦенники КАК ТБК_ЗаявкаНаЦенники
	      	 	             |ГДЕ
	      	 	             |	ТБК_ЗаявкаНаЦенники.Проведен
	      	 	             |	И ТБК_ЗаявкаНаЦенники.Сформирован
	      	 	             |	И НЕ ТБК_ЗаявкаНаЦенники.Отправлен");

	Структура = Новый Структура;
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();

	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Номер",Строка(Строка.Документ.Номер));
		эл.Вставить("Дата",Строка(Строка.Документ.Дата));
		эл.Вставить("Магазин",Строка(Строка.Документ.Магазин));
		эл.Вставить("Комментарий",Строка(Строка.Документ.Комментарий));
		эл.Вставить("Продавец",Строка(Строка.Документ.Продавец));
		эл.Вставить("ЭтоЦенники","Да");
		
		//Данные		=	Строка.Товары.Получить();
		//Для каждого СтрокаДанные из Данные цикл	
		Для каждого СтрокаДанные из Строка.Документ.Товары цикл	
			эл.Вставить("Номенклатура"				+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура));
			эл.Вставить("НоменклатураКод"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура.Код));
			эл.Вставить("Характеристика"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Характеристика));
			эл.Вставить("ТипЦенника"				+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.ТипЦенника)); 	
			эл.Вставить("Цена"						+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Цена)); 
		КонецЦикла;
		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	Если Рез.Количество() >0 тогда
		JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
		
		Ответ	=	Прокси.writerequests(JS);
		
		Если Ответ тогда
			Для каждого Строка из рез цикл
				Об = Строка.Документ.ПолучитьОбъект();
				Об.Статус		=	"В работе";
				Об.Отправлен	=	Истина;
				об.записать(); 
			КонецЦикла;
		КонецЕсли;  
	КонецЕсли;
	
	//Обрабатываем ЗАЯВКИ "в работе"
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ЗаявкаНаЦенники.Ссылка КАК Документ
	      	 	             |ИЗ
	      	 	             |	Документ.ТБК_ЗаявкаНаЦенники КАК ТБК_ЗаявкаНаЦенники
	      	 	             |ГДЕ
	      	 	             |	ТБК_ЗаявкаНаЦенники.Проведен
	      	 	             |	И ТБК_ЗаявкаНаЦенники.Статус = &Статус");
	Запрос.УстановитьПараметр("Статус","В работе");
	Рез = Запрос.Выполнить().Выгрузить();
	
	Структура 		= Новый Структура;	
	МассивВозврата	=	Новый Массив;
	
	Если Рез.Количество() = 0 тогда возврат КонецЕсли;
	
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Номер",Строка(Строка.Документ.Номер));
		эл.Вставить("Дата",Строка(Строка.Документ.Дата));	
		эл.Вставить("ЭтоЦенники","Да");		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
	
	ОтветJS	=	Прокси.getrequests(JS);
	
	МассивПринятый	=	ОбщегоНазначения.jsonВСтруктура_Общая(ОтветJS);
	
	Для каждого Строка из МассивПринятый цикл
		Если Строка.Статус	<>	"Выполнена" тогда Продолжить; КонецЕсли;

		НомерДокумента		=	Строка.Номер;
		ДатаДокумента		=	ОбщегоНазначения.РазобратьДату(Строка.дата); 
		ДокументЗаявка		=	Документы.ТБК_ЗаявкаНаЦенники.НайтиПоНомеру(НомерДокумента,ДатаДокумента);
		
		Если ДокументЗаявка.Пустая() тогда 
			Продолжить; 
		КонецЕсли;
		
		Если Строка.Статус	=	"" тогда Продолжить; КонецЕсли;
		
		Об	=	ДокументЗаявка.ПолучитьОбъект();
		Об.Статус	=	Строка.Статус;
		Об.Записать();   		
	КонецЦикла; 	
КонецПроцедуры

Процедура ЗагрузкаПлановПродаж(Прокси);
	//Для общей мотивации
	ФлПринудительнаяЗагрузка	=	Ложь;
	Ответ	=	Прокси.get_Need_Load_Motivation();	
	Если Ответ  тогда
		ФлПринудительнаяЗагрузка = истина;	
	КонецЕсли;
		
	НужСклад	= СокрЛП(Строка(ОбщегоНазначения.ПолучитьСкладИзООРП()));
	НачалоДня	= СокрЛП(Строка(НачалоДня(ТекущаяДата())));
		
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБКПланыМагазинаПоМесяцам.Период КАК Период
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКПланыМагазинаПоМесяцам КАК ТБКПланыМагазинаПоМесяцам
	      	 	             |ГДЕ
	      	 	             |	НАЧАЛОПЕРИОДА(ТБКПланыМагазинаПоМесяцам.Период, ДЕНЬ) = &Период");
	Запрос.УстановитьПараметр("Период", НачалоМесяца(ТекущаяДата()));
	Если Запрос.Выполнить().Пустой() или ФлПринудительнаяЗагрузка тогда  //Загрузка будет происходить 1 раз в месяц, при установке планов. чтобы изменить данные - только удалить вручную план из регистра в рознице
		//Загрузка планов    
		Ответ	=	Прокси.get_Plans(НужСклад, НачалоДня, "1");	
		
		Если ЗначениеЗаполнено(Ответ) и Ответ<>"[]"  тогда
			ОтветМассив	=	ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//В массив
			
			Для каждого СтрокаМассива из ОтветМассив цикл //добавляем
				нз = РегистрыСведений.ТБКПланыМагазинаПоМесяцам.СоздатьНаборЗаписей();
				
				нужПериод	=	Дата(СтрЗаменить(лев(СтрокаМассива.Период,10),"-",""));
				
				нз.Отбор.Период.Установить(нужПериод); 
				нз.Отбор.ТипПлана.Установить(СтрокаМассива.ТипПлана);
				
				НоваяЗапись	=	нз.Добавить();
				
				НоваяЗапись.Период		=	нужПериод;
				НоваяЗапись.ТипПлана	=	СтрокаМассива.ТипПлана;
				НоваяЗапись.Сумма		=	Число(СтрокаМассива.Сумма);		
				НоваяЗапись.СуммаПремии	=	Число(СтрокаМассива.СуммаПремии);			

				нз.Записать();			
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	//Загрузка данных по фокусной мотивации
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБКФокуснаяМотивация.Период КАК Период
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКФокуснаяМотивация КАК ТБКФокуснаяМотивация
	      	 	             |ГДЕ
	      	 	             |	НАЧАЛОПЕРИОДА(ТБКФокуснаяМотивация.Период, ДЕНЬ) = &Период");
	Запрос.УстановитьПараметр("Период", НачалоМесяца(ТекущаяДата()));
	Если запрос.Выполнить().Пустой() или ФлПринудительнаяЗагрузка  тогда 	
		Ответ	=	Прокси.get_Plans(НужСклад, НачалоДня, "3");
		
		
		Если ЗначениеЗаполнено(Ответ)  и Ответ<>"[]"  тогда
			ОтветМассив	=	ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//В массив
			
			нз = РегистрыСведений.ТБКФокуснаяМотивация.СоздатьНаборЗаписей();
			
			нужПериод	=	Дата(СтрЗаменить(лев(ОтветМассив[0].Период,10),"-",""));
			нз.Отбор.Период.Установить(нужПериод); 
			
			Для каждого СтрокаМассива из ОтветМассив цикл //добавляем
				НоваяЗапись	=	нз.Добавить();
				
				НоваяЗапись.Период			=	нужПериод;
				НоваяЗапись.Номенклатура	=	Справочники.Номенклатура.НайтиПоКоду(СтрокаМассива.НоменклатураКод);
				НоваяЗапись.ПланКоличество	=	Число(СтрокаМассива.ПланКоличество);	
				НоваяЗапись.Процент			=	Число(СтрокаМассива.Процент);
				НоваяЗапись.Сумма			=	Число(СтрокаМассива.Сумма);
				НоваяЗапись.Тип				=	СтрокаМассива.Тип;

				Если СтрокаМассива.СверхПлана	=	"Да" тогда
					НоваяЗапись.СверхПлана		=	Истина;
				КонецЕсли;
				
				нз.Записать();			
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;  
	
	//Загрузка данных по основным группам. Электронка, вэйп, сувениры
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБКГруппыИПроцентыДляПремийОбщаяМотивация.Период КАК Период
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКГруппыИПроцентыДляПремийОбщаяМотивация КАК ТБКГруппыИПроцентыДляПремийОбщаяМотивация
	      	 	             |ГДЕ
	      	 	             |	НАЧАЛОПЕРИОДА(ТБКГруппыИПроцентыДляПремийОбщаяМотивация.Период, ДЕНЬ) = &Период");
	Запрос.УстановитьПараметр("Период", НачалоМесяца(ТекущаяДата()));
	
	Если запрос.Выполнить().Пустой() или ФлПринудительнаяЗагрузка тогда 
		Ответ	=	Прокси.get_Plans(НужСклад, НачалоДня, "4");	
		Если ЗначениеЗаполнено(Ответ) тогда
			ОтветМассив	=	ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//В массив

			Для каждого СтрокаМассива из ОтветМассив цикл //добавляем

				НоваяЗапись	=	РегистрыСведений.ТБКГруппыИПроцентыДляПремийОбщаяМотивация.СоздатьМенеджерЗаписи();
					
				НоваяЗапись.Период			=	НачалоДня(ТекущаяДата());
				НоваяЗапись.Номенклатура	=	Справочники.Номенклатура.НайтиПоКоду(СтрокаМассива.НоменклатураКод);
				НоваяЗапись.ТипГруппы		=	СтрокаМассива.Группа;			
				НоваяЗапись.Процент			=	Число(СтрокаМассива.Процент);			
				НоваяЗапись.Записать();			
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	//+ исключения
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	СоставГруппДляПроцентов_Исключения.Период КАК Период
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКСоставГруппДляПроцентов_Исключения КАК СоставГруппДляПроцентов_Исключения
	      	 	             |ГДЕ
	      	 	             |	НАЧАЛОПЕРИОДА(СоставГруппДляПроцентов_Исключения.Период, ДЕНЬ) = &Период");
	Запрос.УстановитьПараметр("Период", НачалоМесяца(ТекущаяДата()));
	
	Если запрос.Выполнить().Пустой() или ФлПринудительнаяЗагрузка тогда 
		Ответ	=	Прокси.get_Plans(НужСклад, НачалоДня, "5");	
		Если ЗначениеЗаполнено(Ответ) тогда
			ОтветМассив	=	ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//В массив

			Для каждого СтрокаМассива из ОтветМассив цикл //добавляем

				НоваяЗапись	=	РегистрыСведений.ТБКСоставГруппДляПроцентов_Исключения.СоздатьМенеджерЗаписи();
					
				НоваяЗапись.Период			=	НачалоДня(ТекущаяДата());
				НоваяЗапись.Номенклатура	=	Справочники.Номенклатура.НайтиПоКоду(СтрокаМассива.НоменклатураКод);
				НоваяЗапись.Записать();			
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли; 
	
	//ДЛЯ НОВОЙ МОТИВАЦИИ
	//загрузка окладов, диапазонов процентов премий и групп исключений для начислений
	
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБКОкладыПремииИПроцентыНоваяМотивация.Период КАК Период
	      	 	             |ИЗ
	      	 	             |	Справочник.ТБКОкладыПремииИПроцентыНоваяМотивация КАК ТБКОкладыПремииИПроцентыНоваяМотивация
	      	 	             |ГДЕ
	      	 	             |	НАЧАЛОПЕРИОДА(ТБКОкладыПремииИПроцентыНоваяМотивация.Период, ДЕНЬ) = &Период");
	Запрос.УстановитьПараметр("Период", НачалоМесяца(ТекущаяДата()));
	
	Если запрос.Выполнить().Пустой() или ФлПринудительнаяЗагрузка тогда 
		Ответ	=	Прокси.get_Plans(НужСклад, НачалоДня, "oklads");
	
		Если ЗначениеЗаполнено(Ответ) тогда   			
			
			ОтветМассив	=	ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//В массив
	
			ЭлементСправочника	=	Справочники.ТБКОкладыПремииИПроцентыНоваяМотивация.НайтиПоРеквизиту("Период", НачалоМесяца(ТекущаяДата()));

			Если ЭлементСправочника.Пустая() тогда
				ЭлементСправочника	=	Справочники.ТБКОкладыПремииИПроцентыНоваяМотивация.СоздатьЭлемент();	
				ЭлементСправочника.Период		=	НачалоМесяца(ТекущаяДата());
				ЭлементСправочника.Наименование	=	НачалоМесяца(ТекущаяДата()); 
			иначе
				ЭлементСправочника	=	ЭлементСправочника.ПолучитьОбъект();
			КонецЕсли;

			
			Для каждого СтрокаМассива из ОтветМассив цикл
				//оклад
				ЭлементСправочника.Оклад	=	Число(СтрокаМассива.СуммаОклада);
				
				//прцоенты
				ЭлементСправочника.Проценты.Очистить();
			
				Для каждого СтрокаПроцент из СтрокаМассива.Проценты цикл
					новСтрока	=	ЭлементСправочника.Проценты.Добавить();
					новСтрока.ПроцентДо		=	Число(СтрокаПроцент.ПроцентДо);
					новСтрока.ПроцентС		=	Число(СтрокаПроцент.ПроцентС);
					новСтрока.ПроцентПремии	=	Число(СтрокаПроцент.ПроцентПремии);
					новСтрока.СуммаПремии	=	Число(СтрокаПроцент.СуммаПремии);
				КонецЦикла;				
				
				//исключения
				ЭлементСправочника.ГруппыИсключений.Очистить();
				
				Для каждого СтрокаИсключение из СтрокаМассива.МассивИсключений цикл
					новСтрока	=	ЭлементСправочника.ГруппыИсключений.Добавить();
					новСтрока.Номенклатура		=	Справочники.Номенклатура.НайтиПоКоду(СтрокаИсключение.Код);
				КонецЦикла;	  
				
			КонецЦикла; 
			ЭлементСправочника.Записать();
			
		КонецЕсли; 
		
		
		//Загрузка процентов по дням
		Ответ	=	Прокси.get_Plans(НужСклад, НачалоДня, "proc_po_dnyam");
	
		Если ЗначениеЗаполнено(Ответ) тогда   			
			
			ОтветМассив	=	ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//В массив

			Для каждого СтрокаМассива из ОтветМассив цикл //добавляем

				НоваяЗапись	=	РегистрыСведений.ТБК_ПроцентыПремийПоДням.СоздатьМенеджерЗаписи();
				
				//Марк 2024-12-28
				//НоваяЗапись.День			=	Дата(СтрЗаменить(лев(СтрокаМассива.День,10),"-",""));;
				НоваяЗапись.День			= 	Дата(СтрокаМассива.День);
				//КонецМарк
				НоваяЗапись.Процент			=	Число(СтрокаМассива.Процент);			
				НоваяЗапись.Записать();			
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли; 	
	// 
	
	

	
	
	
	//Коммент. грузим только для общей мотивации !	
	
	//ВариантМотивации	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ВариантМотивации");	
	
	//Если ВариантМотивации <>3 тогда
	//	//Заполняем группы номенклатуры для планов

	//	//Если Час(ТекущаяДата()) = 11 тогда //Чтобы не грузились при каждом обмене
	//		Запрос	=	Новый запрос("ВЫБРАТЬ
	//		      	 	             |	ТБКПланыМагазинаПоМесяцам.ТипПлана КАК ТипПлана
	//		      	 	             |ИЗ
	//		      	 	             |	РегистрСведений.ТБКПланыМагазинаПоМесяцам КАК ТБКПланыМагазинаПоМесяцам
	//		      	 	             |ГДЕ
	//		      	 	             |	НАЧАЛОПЕРИОДА(ТБКПланыМагазинаПоМесяцам.Период, ДЕНЬ) = &Период");
	//		Запрос.УстановитьПараметр("Период", НачалоМесяца(ТекущаяДата()));
	//		Рез_Планы	=	Запрос.Выполнить().Выгрузить();
	//		
	//		Если ВариантМотивации = 2 тогда
	//			НовСтр	=	Рез_Планы.Добавить();
	//			НовСтр.ТипПлана	=	"План табаки";
	//			
	//			НовСтр	=	Рез_Планы.Добавить();
	//			НовСтр.ТипПлана	=	"План сувенирка";
	//			
	//			НовСтр	=	Рез_Планы.Добавить();
	//			НовСтр.ТипПлана	=	"План вэйп"; 	
	//		КонецЕсли;

	//		ТЗ_НоменклатураУТ	=	Новый ТаблицаЗначений;
	//		ТЗ_НоменклатураУТ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//				
	//		Для каждого СтрокаРезПланы из  Рез_Планы цикл
	//			Ответ	=	Прокси.get_PlansGroups(СтрокаРезПланы.ТипПлана);
	//			
	//			Если ЗначениеЗаполнено(Ответ) и не Ответ = "[]" тогда
	//				ОтветМассив	=	ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);
	//				
	//				ТЗ_НоменклатураУТ.Очистить();
	//				Для каждого СтрокаМассива из ОтветМассив цикл 
	//					НужНом		=	Справочники.Номенклатура.НайтиПоКоду(СтрокаМассива.НоменклатураКод);
	//					
	//					Если не НужНом.Пустая() тогда
	//						НовСтрока				=	ТЗ_НоменклатураУТ.Добавить();
	//						НовСтрока.Номенклатура	=	НужНом;	
	//					КонецЕсли;
	//				КонецЦикла;
	//				
	//				Запрос	=	Новый Запрос("ВЫБРАТЬ
	//				      	 	             |	ТЗ_Номенклатура.Номенклатура КАК Номенклатура_УТ
	//				      	 	             |ПОМЕСТИТЬ ТЗ_УТ
	//				      	 	             |ИЗ
	//				      	 	             |	&ТЗ_Номенклатура КАК ТЗ_Номенклатура
	//				      	 	             |;
	//				      	 	             |
	//				      	 	             |////////////////////////////////////////////////////////////////////////////////
	//				      	 	             |ВЫБРАТЬ
	//				      	 	             |	ТБКГруппыНоменклатурыДляПланов.Номенклатура КАК Номенклатура,
	//				      	 	             |	ТБКГруппыНоменклатурыДляПланов.Ссылка КАК Ссылка
	//				      	 	             |ПОМЕСТИТЬ ТЗ_Розница
	//				      	 	             |ИЗ
	//				      	 	             |	Справочник.ТБКГруппыНоменклатурыДляПланов КАК ТБКГруппыНоменклатурыДляПланов
	//				      	 	             |ГДЕ
	//				      	 	             |	ТБКГруппыНоменклатурыДляПланов.ТипПлана = &ТипПлана
	//				      	 	             |;
	//				      	 	             |
	//				      	 	             |////////////////////////////////////////////////////////////////////////////////
	//				      	 	             |ВЫБРАТЬ
	//				      	 	             |	ЕСТЬNULL(ТЗ_Розница.Номенклатура, 0) КАК НоменклатураРозница,
	//				      	 	             |	ЕСТЬNULL(ТЗ_УТ.Номенклатура_УТ, 0) КАК НоменклатураУТ,
	//				      	 	             |	ТЗ_Розница.Ссылка КАК Ссылка
	//				      	 	             |ПОМЕСТИТЬ Итог
	//				      	 	             |ИЗ
	//				      	 	             |	ТЗ_УТ КАК ТЗ_УТ
	//				      	 	             |		ПОЛНОЕ СОЕДИНЕНИЕ ТЗ_Розница КАК ТЗ_Розница
	//				      	 	             |		ПО ТЗ_УТ.Номенклатура_УТ = ТЗ_Розница.Номенклатура
	//				      	 	             |;
	//				      	 	             |
	//				      	 	             |////////////////////////////////////////////////////////////////////////////////
	//				      	 	             |ВЫБРАТЬ
	//				      	 	             |	Итог.НоменклатураРозница КАК НоменклатураРозница,
	//				      	 	             |	Итог.НоменклатураУТ КАК НоменклатураУТ,
	//				      	 	             |	Итог.Ссылка КАК Ссылка
	//				      	 	             |ИЗ
	//				      	 	             |	Итог КАК Итог
	//				      	 	             |ГДЕ
	//				      	 	             |	(Итог.НоменклатураРозница = 0
	//				      	 	             |			ИЛИ Итог.НоменклатураУТ = 0)");
	//				Запрос.УстановитьПараметр("ТЗ_Номенклатура",ТЗ_НоменклатураУТ);
	//				Запрос.УстановитьПараметр("ТипПлана",СтрокаРезПланы.ТипПлана);
	//				
	//				Рез = запрос.Выполнить().Выбрать();
	//				Пока рез.Следующий() цикл
	//					Если Рез.НоменклатураРозница = 0 тогда // добавляем в справочник
	//						НовСпр				=	Справочники.ТБКГруппыНоменклатурыДляПланов.СоздатьЭлемент();
	//						НовСпр.Наименование	=	Рез.НоменклатураУТ;
	//						НовСпр.Номенклатура	=	Рез.НоменклатураУТ;
	//						НовСпр.ТипПлана		=	СтрокаРезПланы.ТипПлана;
	//						НовСпр.Записать();						
	//					иначе  //удаляем из справочника
	//						Об	=	Рез.Ссылка.получитьОбъект();
	//						Об.удалить(); 					
	//					КонецЕсли;					
	//				КонецЦикла;
	//				
	//			КонецЕсли;	
	//		КонецЦикла;
	//	//КонецЕсли;
	//КонецЕсли;

	////Загрузка планов
	//
	//Если ВариантМотивации = 1 тогда
	//	Запрос	=	Новый запрос("ВЫБРАТЬ
	//	      	 	             |	ТБКПланыМагазинаПоМесяцам.Период КАК Период
	//	      	 	             |ИЗ
	//	      	 	             |	РегистрСведений.ТБКПланыМагазинаПоМесяцам КАК ТБКПланыМагазинаПоМесяцам
	//	      	 	             |ГДЕ
	//	      	 	             |	НАЧАЛОПЕРИОДА(ТБКПланыМагазинаПоМесяцам.Период, ДЕНЬ) = &Период");
	//	Запрос.УстановитьПараметр("Период", НачалоМесяца(ТекущаяДата()));
	//	Если не запрос.Выполнить().Пустой() тогда Возврат КонецЕсли;
	//	
	//	НужСклад	= СокрЛП(Строка(ОбщегоНазначения.ПолучитьСкладИзООРП()));
	//	НачалоДня	= СокрЛП(Строка(НачалоДня(ТекущаяДата())));

	//	
	//	Ответ	=	Прокси.get_Plans(НужСклад, НачалоДня, "1");
	//	
	//	
	//	Если ЗначениеЗаполнено(Ответ) тогда
	//		ОтветМассив	=	ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//В массив
	//		
	//		Для каждого СтрокаМассива из ОтветМассив цикл //добавляем
	//			нз = РегистрыСведений.ТБКПланыМагазинаПоМесяцам.СоздатьНаборЗаписей();
	//			
	//			нужПериод	=	Дата(СтрЗаменить(лев(СтрокаМассива.Период,10),"-",""));
	//			
	//			нз.Отбор.Период.Установить(нужПериод); 
	//			нз.Отбор.ТипПлана.Установить(СтрокаМассива.ТипПлана);
	//			
	//			НоваяЗапись	=	нз.Добавить();
	//			
	//			НоваяЗапись.Период		=	нужПериод;
	//			НоваяЗапись.ТипПлана	=	СтрокаМассива.ТипПлана;
	//			НоваяЗапись.Сумма		=	Число(СтрокаМассива.Сумма);			
	//			нз.Записать();			
	//		КонецЦикла; 
	//	КонецЕсли;
	//	
	//ИначеЕсли ВариантМотивации = 2 или ВариантМотивации = 3 тогда
	//	
	//	Запрос	=	Новый запрос("ВЫБРАТЬ
	//	      	 	             |	ТБКПланыМагазинаПоМесяцам.Период КАК Период
	//	      	 	             |ИЗ
	//	      	 	             |	РегистрСведений.ТБКПланыМагазинаПоМесяцам КАК ТБКПланыМагазинаПоМесяцам
	//	      	 	             |ГДЕ
	//	      	 	             |	НАЧАЛОПЕРИОДА(ТБКПланыМагазинаПоМесяцам.Период, ДЕНЬ) = &Период");
	//	Запрос.УстановитьПараметр("Период", НачалоМесяца(ТекущаяДата()));
	//	Если не запрос.Выполнить().Пустой() тогда Возврат КонецЕсли;
	//	
	//	НужСклад	= СокрЛП(Строка(ОбщегоНазначения.ПолучитьСкладИзООРП()));
	//	НачалоДня	= СокрЛП(Строка(НачалоДня(ТекущаяДата())));

	//	
	//	Ответ	=	Прокси.get_Plans(НужСклад, НачалоДня, "2");
	//	
	//	
	//	Если ЗначениеЗаполнено(Ответ) тогда
	//		ОтветМассив	=	ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//В массив
	//		
	//		Для каждого СтрокаМассива из ОтветМассив цикл //добавляем
	//			нз = РегистрыСведений.ТБКПланыМагазинаПоМесяцам.СоздатьНаборЗаписей();
	//			
	//			нужПериод	=	Дата(СтрЗаменить(лев(СтрокаМассива.Период,10),"-",""));
	//			
	//			нз.Отбор.Период.Установить(нужПериод); 
	//			нз.Отбор.ТипПлана.Установить("План ТО");
	//			
	//			НоваяЗапись	=	нз.Добавить();
	//			
	//			НоваяЗапись.Период		=	нужПериод;
	//			НоваяЗапись.ТипПлана	=	"План ТО";
	//			НоваяЗапись.Сумма		=	Число(СтрокаМассива.ПланСумма);	
	//			НоваяЗапись.Процент		=	Число(СтрокаМассива.Процент);
	//			нз.Записать();			
	//		КонецЦикла; 
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ВариантМотивации = 3 тогда
	//	
	//	Запрос	=	Новый запрос("ВЫБРАТЬ
	//	      	 	             |	ТБКФокуснаяМотивация.Период КАК Период
	//	      	 	             |ИЗ
	//	      	 	             |	РегистрСведений.ТБКФокуснаяМотивация КАК ТБКФокуснаяМотивация
	//	      	 	             |ГДЕ
	//	      	 	             |	НАЧАЛОПЕРИОДА(ТБКФокуснаяМотивация.Период, ДЕНЬ) = &Период");
	//	Запрос.УстановитьПараметр("Период", НачалоМесяца(ТекущаяДата()));
	//	Если не запрос.Выполнить().Пустой() тогда Возврат КонецЕсли;
	//	
	//	НужСклад	= СокрЛП(Строка(ОбщегоНазначения.ПолучитьСкладИзООРП()));
	//	НачалоДня	= СокрЛП(Строка(НачалоДня(ТекущаяДата())));

	//	
	//	Ответ	=	Прокси.get_Plans(НужСклад, НачалоДня, "3");
	//	
	//	
	//	Если ЗначениеЗаполнено(Ответ) тогда
	//		ОтветМассив	=	ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//В массив
	//		
	//		нз = РегистрыСведений.ТБКФокуснаяМотивация.СоздатьНаборЗаписей();
	//		
	//		нужПериод	=	Дата(СтрЗаменить(лев(ОтветМассив[0].Период,10),"-",""));
	//		нз.Отбор.Период.Установить(нужПериод); 
	//		
	//		Для каждого СтрокаМассива из ОтветМассив цикл //добавляем
	//			НоваяЗапись	=	нз.Добавить();
	//			
	//			НоваяЗапись.Период			=	нужПериод;
	//			НоваяЗапись.Номенклатура	=	Справочники.Номенклатура.НайтиПоКоду(СтрокаМассива.НоменклатураКод);
	//			НоваяЗапись.ПланКоличество	=	Число(СтрокаМассива.ПланКоличество);	
	//			НоваяЗапись.Процент			=	Число(СтрокаМассива.Процент);
	//			нз.Записать();			
	//		КонецЦикла; 
	//	КонецЕсли;

	//
	//КонецЕсли;
		
КонецПроцедуры

Процедура ОтправкаСтатусовЗаказовПокупателей(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка,
	      	 	             |	ЗаказПокупателя.НомерЗаказаНаСайте КАК НомерЗаказаНаСайте,
	      	 	             |	ЗаказПокупателя.Статус КАК Статус
	      	 	             |ИЗ
	      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	      	 	             |ГДЕ
	      	 	             |	НЕ ЗаказПокупателя.ПометкаУдаления
	      	 	             |	И ЗаказПокупателя.НаличиеНезарезервированныхСтрок
	      	 	             |	И НЕ ЗаказПокупателя.Комментарий ПОДОБНО &Комментарий
	      	 	             |	И ЗаказПокупателя.Статус <> &СтатусОтменен
	      	 	             |	И ЗаказПокупателя.Дата >= &Дата
	      	 	             |	И ЗаказПокупателя.НомерЗаказаНаСайте <> """"");
	Запрос.УстановитьПараметр("Комментарий", "%ОТМЕНЕН В ОФИСЕ%");  
	Запрос.УстановитьПараметр("СтатусОтменен",Перечисления.СтатусыЗаказовПокупателей.ОтмененВОфисе);
	Запрос.УстановитьПараметр("Дата", '20230401');  


	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() цикл
		Структура = Новый Структура;

		Структура.Вставить("НомерЗаказаНаСайте", Рез.НомерЗаказаНаСайте);
		Структура.Вставить("Статус", Строка(Рез.Статус));
		Структура.Вставить("Дата",Строка(Рез.Ссылка.Дата));	

		
		JS = ОбщегоНазначения.СтруктураВjson_Общая(Структура);
		
		Ответ	=	Прокси.WritereStatusZakaza(JS);

		Если Ответ тогда
			Об = Рез.Ссылка.ПолучитьОбъект();
			Об.НаличиеНезарезервированныхСтрок	= Ложь;
			Об.ОбменДанными.Загрузка 			= Истина;
			Попытка
				Об.записать(); 
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОтправкаДанныхПоЗарегистрированнымКлиентам()
	Попытка
		Адрес			= "http://mx.tbkon.ru:1777/ut/ws/tbk_WebExchange?wsdl";
		Пользователь	= "WS_User";
		Пароль			= "123456";
		Таймаут			= 10;
		ТекстОшибки 	= "";
		ИмяСервиса 		= "tbk_WebExchange"; 
		ИмяСервисаСоап 	= "tbk_WebExchangeSoap";
		
		Определения = Новый WSОпределения(Адрес,Пользователь,Пароль, Таймаут);
		
		URI					=  "http://www.1c.ru/SaaS/1.0/WS_tbk_WebExchange";
		Прокси 				= Новый WSПрокси(Определения, URI, ИмяСервиса, ИмяСервисаСоап);
		Прокси.Пользователь = Пользователь;
		Прокси.Пароль 		= Пароль;	
	Исключение
		Сообщить("Не удалось подключиться к УТ. Попробуйте выполнить действие позже. "+ОписаниеОшибки());
		Возврат; 
	КонецПопытки; 	
	
	Запрос	=	новый запрос("ВЫБРАТЬ
      	 	             |	ТБКРегистрацияКлиентов.Телефон КАК Телефон,
      	 	             |	ТБКРегистрацияКлиентов.Имя КАК Имя,
      	 	             |	ТБКРегистрацияКлиентов.Почта КАК Почта,
      	 	             |	ТБКРегистрацияКлиентов.ДатаРождения КАК ДатаРождения,
      	 	             |	ТБКРегистрацияКлиентов.ОтправленВУТ КАК ОтправленВУТ
      	 	             |ИЗ
      	 	             |	РегистрСведений.ТБКРегистрацияКлиентов КАК ТБКРегистрацияКлиентов
      	 	             |ГДЕ
      	 	             |	НЕ ТБКРегистрацияКлиентов.ОтправленВУТ");
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() цикл

		МассивВозврата	=	Новый Массив; 	
		
		эл	=	Новый Структура;
		эл.Вставить("phone", 	СокрЛП(Рез.Телефон));
		эл.Вставить("update", 	"false");
		эл.Вставить("fio", 		Рез.Имя);
		эл.Вставить("email",	Рез.Почта);
		эл.Вставить("birthday", Строка(Рез.ДатаРождения));
		
		МассивВозврата.Добавить(эл);	
		JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);

		ОтветJS	=	Прокси.registration(JS);

		МассивПринятый	=	ОбщегоНазначения.jsonВСтруктура_Общая(ОтветJS);

		Для каждого Строка из МассивПринятый цикл 
			Результат	=	Строка.result;
			Если Результат = "false" тогда
				Если Строка.description = "Телефон уже зарегистрирован" тогда
					рег = РегистрыСведений.ТБКРегистрацияКлиентов.СоздатьНаборЗаписей();
					рег.Отбор.Телефон.Установить(Рез.Телефон); 		

					НоваяСтрока					=	Рег.Добавить(); 
					НоваяСтрока.Телефон 		=	Рез.Телефон;
					НоваяСтрока.Имя		 		=	Рез.Имя;
					НоваяСтрока.ДатаРождения 	=	Рез.ДатаРождения;
					НоваяСтрока.Почта		 	=	Рез.Почта;
					НоваяСтрока.ОтправленВУТ	=	истина;
					рег.Записать();	
					Продолжить;
				КонецЕсли;
				
				Сообщить("Не удалось зарегистрировать! "+Строка.description);
			иначе

				//регистрация в УТ прошла успешно. теперь регаем в самосейле
				ssl = Новый ЗащищенноеСоединениеOpenSSL();
				Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
				
				Токен	=	"_u2byml67gDNlFqGS6jf-BdadAd4ft4bC5tJt52K7qlu7hLbzr_Bev58frKQB-HE";	  
				
				Заголовки = Новый Соответствие;
				Заголовки.Вставить("Authorization", "Bearer " + Токен);
				Заголовки.Вставить("Content-Type", "application/json");
				
				Запрос = Новый HTTPЗапрос("api/cash-box/create-client", Заголовки);
				
				
				СтруктураДляJSON = Новый Структура;
			    СтруктураДляJSON.Вставить("phone", СокрЛП(Рез.Телефон));
			    //СтруктураДляJSON.Вставить("Куар", Куар);

				Запись = Новый ЗаписьJSON;
			    Запись.УстановитьСтроку();
			    ЗаписатьJSON(Запись,СтруктураДляJSON);
			    ТелоЗапроса = Запись.Закрыть();
			    Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
			   		
				Результат = Соединение.ОтправитьДляОбработки(Запрос);
				
				рег = РегистрыСведений.ТБКРегистрацияКлиентов.СоздатьНаборЗаписей();
				рег.Отбор.Телефон.Установить(Рез.Телефон); 		

				НоваяСтрока					=	Рег.Добавить(); 
				НоваяСтрока.Телефон 		=	Рез.Телефон;
				НоваяСтрока.Имя		 		=	Рез.Имя;
				НоваяСтрока.ДатаРождения 	=	Рез.ДатаРождения;
				НоваяСтрока.Почта		 	=	Рез.Почта;
				НоваяСтрока.ОтправленВУТ	=	истина;
				рег.Записать();	


			КонецЕсли; 		
		КонецЦикла;
	КонецЦикла;
	//Сообщить(Ответ);	
	
КонецПроцедуры

Процедура ОтправкаДанныхПоПодаркам(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	ТБКПодаркиПоАкциям.УидАкции КАК УидАкции,
	      	 	             |	ТБКПодаркиПоАкциям.ЧекККМ КАК ЧекККМ,
	      	 	             |	ТБКПодаркиПоАкциям.ОтправленоВУТ КАК ОтправленоВУТ,
	      	 	             |	ТБКПодаркиПоАкциям.ЧекККМ.Дата КАК Дата,
	      	 	             |	ТБКПодаркиПоАкциям.Подарок.Код КАК ПодарокКод
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКПодаркиПоАкциям КАК ТБКПодаркиПоАкциям
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБКПодаркиПоАкциям.ОтправленоВУТ");

	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() цикл
		Структура = Новый Структура;

		Структура.Вставить("УидАкции", 		Рез.УидАкции);
		Структура.Вставить("ПодарокКод", 	Строка(Рез.ПодарокКод));
		Структура.Вставить("Дата",			Строка(Рез.Дата));	
		Структура.Вставить("Магазин",		Строка(Рез.ЧекККМ.Магазин));	
		Структура.Вставить("Чек",			Строка(Рез.ЧекККМ));	
		
		JS = ОбщегоНазначения.СтруктураВjson_Общая(Структура);
		
		Ответ	=	Прокси.WritePodarki(JS);

		Если Ответ тогда
			рег = РегистрыСведений.ТБКПодаркиПоАкциям.СоздатьНаборЗаписей();
			рег.Отбор.УидАкции.Установить(Рез.УидАкции);	
			рег.Отбор.ЧекККМ.Установить(Рез.ЧекККМ);
			рег.Прочитать();
			рег[0].ОтправленоВУТ = Истина;
			рег.Записать();		
		КонецЕсли;
		
	КонецЦикла;		
КонецПроцедуры

Процедура ОтправкаДанныхПоСертификатам(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	ТБКПогашенныеСертификаты.Чек КАК Чек,
	      	 	             |	ТБКПогашенныеСертификаты.Сертификат КАК Сертификат,
	      	 	             |	ТБКПогашенныеСертификаты.Сумма КАК Сумма,
	      	 	             |	ТБКПогашенныеСертификаты.Чек.Дата КАК Дата
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКПогашенныеСертификаты КАК ТБКПогашенныеСертификаты
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБКПогашенныеСертификаты.ОтправленоВУТ");

	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() цикл
		Структура = Новый Структура;

		Структура.Вставить("Чек", 			Строка(Рез.Чек));
		Структура.Вставить("Сертификат", 	Строка(Рез.Сертификат));
		Структура.Вставить("Сумма",			Строка(Рез.Сумма));	
		Структура.Вставить("Магазин",		Строка(Рез.Чек.Магазин));	
		Структура.Вставить("Дата",			Строка(Рез.Дата));	

		
		JS = ОбщегоНазначения.СтруктураВjson_Общая(Структура);
		
		Ответ	=	Прокси.WriteCert(JS);

		Если Ответ тогда
			рег = РегистрыСведений.ТБКПогашенныеСертификаты.СоздатьНаборЗаписей();
			рег.Отбор.Сертификат.Установить(Рез.Сертификат);	

			рег.Прочитать();
			рег[0].ОтправленоВУТ = Истина;
			рег.Записать();		
		КонецЕсли;
		
	КонецЦикла;		
КонецПроцедуры

Процедура ЗагрузкаУниверсальныхМарок(Прокси)
	ДатаЗагрузки	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ДатаЗагрузкиУниверсальныхМарок");
	
	Если ДатаЗагрузки<>Неопределено тогда
		Если НачалоДня(ДатаЗагрузки) = НачалоДня(ТекущаяДата()) тогда
			Возврат
		КонецЕсли;
		Ответ	=	Прокси.getUniversalMarks("");	
	иначе
		Ответ	=	Прокси.getUniversalMarks("Все");// в первый раз грузим весь регистр	
	КонецЕсли;
	
	
	СтруктураОтвета	= ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//если пустой ответ - то пустой массив	
	
	Если СтруктураОтвета <> "" тогда
		Для каждого Строка из СтруктураОтвета цикл
			НужнаяНоменклатура	=	Справочники.Номенклатура.НайтиПоКоду(СокрЛП(Строка.НоменклатураКод));
			Если НужнаяНоменклатура.Пустая() тогда Продолжить; КонецЕсли;
			
			Рег	=	РегистрыСведений.ТБКУниверсальныеМарки.СоздатьМенеджерЗаписи();

			Рег.Марка			=	СокрЛП(Строка.Марка);
			Рег.Номенклатура	=	НужнаяНоменклатура;
			
			Рег.Записать();
		КонецЦикла; 	
		
		
		Рег = РегистрыСведений.ТБК_Константы.СоздатьНаборЗаписей();
		Рег.Отбор.ИмяКонстанты.Установить("ДатаЗагрузкиУниверсальныхМарок");
		НоваяСтр	=	Рег.Добавить();
		НоваяСтр.ЗначениеКонстанты	=	ТекущаяДата();
		НоваяСтр.ИмяКонстанты		=	"ДатаЗагрузкиУниверсальныхМарок";
		рег.Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ОтправитьДанныеФокуснаяМотивация(Прокси)
	ДатаОтправки	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ДатаОтправкиДанныхПоФокуснойМотивации");
	
	Если ДатаОтправки<>Неопределено тогда
		Если НачалоМесяца(ДатаОтправки) = НачалоМесяца(ТекущаяДата()) тогда
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	Период				=	НачалоМесяца(ТекущаяДата()) - 1;
	
	//ПОЛУЧАЕМ ПРОДАВЦОВ 	
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец КАК Продавец,
	      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Магазин КАК Магазин
	      	 	             |ИЗ
	      	 	             |	Документ.ТБК_ВедомостьОПродажахЗаДень.Продавцы КАК ТБК_ВедомостьОПродажахЗаДеньПродавцы
	      	 	             |ГДЕ
	      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.ТипПродавца = &ТипПродавца
	      	 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	      	 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Проведен
	      	 	             |
	      	 	             |СГРУППИРОВАТЬ ПО
	      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец,
	      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Магазин");  
	
	Запрос.УстановитьПараметр("ДатаНач",НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТипПродавца",Перечисления.ТБКТипыПродавцов.ОсновнойПродавец);
	РезВсеПродавцы	=	Запрос.Выполнить().Выгрузить();    
	//
	
	флОтправленоУспешно = Ложь; 
	
	ТаблицаРасшифровка_Общая = Новый ТаблицаЗначений;
	ТаблицаРасшифровка_Общая.Колонки.Добавить("ФокусГруппа",,		"Группа");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("ПланПродаж",,		"План");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("ФактПродаж",,		"Факт");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("КоличествоСверх",,	"Количество сверх плана");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("СуммаФакт",,		"Сумма факт");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("СуммаСверх",,		"Сумма сверх плана");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("СуммаПремии",,		"Сумма премии");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("Заголовок",,		"Заголовок");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("Продавец",,		"Продавец");
	
	Для каждого СтрокаПродавец из РезВсеПродавцы цикл
		ТаблицаРасшифровка	=	Обработки.РМКУправляемыйРежим.ПолучитьТаблицуПоФокуснойМотивации(0, Период,0 , СтрокаПродавец.Продавец);
		
		Для каждого Строка из ТаблицаРасшифровка цикл
			НовСтрока	=	ТаблицаРасшифровка_Общая.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			НовСтрока.Продавец	=	СтрокаПродавец.Продавец;
		КонецЦикла;  	
	КонецЦикла;	
	
	МассивВозврата	=	Новый Массив;
		
	Для каждого Строка из РезВсеПродавцы цикл
		эл	=	Новый Структура;
		эл.Вставить("Продавец",		СокрЛП(Строка(Строка.Продавец)));	
		эл.Вставить("Магазин",		СокрЛП(Строка(Строка.Магазин)));
		эл.Вставить("Период",		Строка(Период));

		
		Отбор	=	Новый Структура;
		Отбор.Вставить("Продавец", Строка.Продавец);
		
		Строки =   ТаблицаРасшифровка_Общая.НайтиСтроки(Отбор);
		
		МассивДанные	=	Новый Массив;
		Для каждого СтрокаДанные из Строки цикл		
			Данные	=	Новый Структура;
			Данные.Вставить("ФокусГруппа",		Строка(СтрокаДанные.ФокусГруппа));
			Данные.Вставить("ПланПродаж", 		Строка(СтрокаДанные.ПланПродаж));
			Данные.Вставить("ФактПродаж", 		Строка(СтрокаДанные.ФактПродаж));
			Данные.Вставить("КоличествоСверх", 	Строка(СтрокаДанные.КоличествоСверх));
			Данные.Вставить("СуммаФакт", 		Строка(СтрокаДанные.СуммаФакт));
			Данные.Вставить("СуммаСверх", 		Строка(СтрокаДанные.СуммаСверх));
			Данные.Вставить("СуммаПремии", 		Строка(СтрокаДанные.СуммаПремии));
			
			МассивДанные.Добавить(Данные);
		КонецЦикла;
		эл.Вставить("Данные", МассивДанные);

		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
	
	Ответ	=	Прокси.writeFocusMotivation(JS); 
	                                         
	Если Ответ тогда
		Рег = РегистрыСведений.ТБК_Константы.СоздатьНаборЗаписей();
		Рег.Отбор.ИмяКонстанты.Установить("ДатаОтправкиДанныхПоФокуснойМотивации");
		НоваяСтр	=	Рег.Добавить();
		НоваяСтр.ЗначениеКонстанты	=	ТекущаяДата();
		НоваяСтр.ИмяКонстанты		=	"ДатаОтправкиДанныхПоФокуснойМотивации";
		рег.Записать();
	КонецЕсли;

КонецПроцедуры


Процедура ОтправитьДанныеФокуснаяМотивация_ЗаДень(Прокси)
	ДатаОтправки	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ДатаОтправкиДанныхПоФокуснойМотивации_ЗаДень");
	
	Если ДатаОтправки<>Неопределено тогда
		Если НачалоДня(ДатаОтправки) = НачалоМесяца(ТекущаяДата()) тогда
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	Период				=	НачалоДня(ТекущаяДата()) - 1;
	
	//ПОЛУЧАЕМ ПРОДАВЦОВ 	
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец КАК Продавец,
	      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Магазин КАК Магазин
	      	 	             |ИЗ
	      	 	             |	Документ.ТБК_ВедомостьОПродажахЗаДень.Продавцы КАК ТБК_ВедомостьОПродажахЗаДеньПродавцы
	      	 	             |ГДЕ
	      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.ТипПродавца = &ТипПродавца
	      	 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	      	 	             |	И ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Проведен
	      	 	             |
	      	 	             |СГРУППИРОВАТЬ ПО
	      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Продавец,
	      	 	             |	ТБК_ВедомостьОПродажахЗаДеньПродавцы.Ссылка.Магазин");  
	
	Запрос.УстановитьПараметр("ДатаНач",НачалоДня(Период) );
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(Период)  );
	Запрос.УстановитьПараметр("ТипПродавца",Перечисления.ТБКТипыПродавцов.ОсновнойПродавец);
	РезВсеПродавцы	=	Запрос.Выполнить().Выгрузить();    
	//
	
	флОтправленоУспешно = Ложь; 
	
	ТаблицаРасшифровка_Общая = Новый ТаблицаЗначений;
	ТаблицаРасшифровка_Общая.Колонки.Добавить("ФокусГруппа",,		"Группа");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("ПланПродаж",,		"План");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("ФактПродаж",,		"Факт");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("КоличествоСверх",,	"Количество сверх плана");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("СуммаФакт",,		"Сумма факт");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("СуммаСверх",,		"Сумма сверх плана");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("СуммаПремии",,		"Сумма премии");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("Заголовок",,		"Заголовок");
	ТаблицаРасшифровка_Общая.Колонки.Добавить("Продавец",,		"Продавец");
	
	Для каждого СтрокаПродавец из РезВсеПродавцы цикл
		ТаблицаРасшифровка	=	Обработки.РМКУправляемыйРежим.ПолучитьТаблицуПоФокуснойМотивации(0, Период, 1, СтрокаПродавец.Продавец);
		
		Для каждого Строка из ТаблицаРасшифровка цикл
			НовСтрока	=	ТаблицаРасшифровка_Общая.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			НовСтрока.Продавец	=	СтрокаПродавец.Продавец;
		КонецЦикла;  	
	КонецЦикла;	
	
	МассивВозврата	=	Новый Массив;
		
	Для каждого Строка из РезВсеПродавцы цикл
		эл	=	Новый Структура;
		эл.Вставить("Продавец",		СокрЛП(Строка(Строка.Продавец)));	
		эл.Вставить("Магазин",		СокрЛП(Строка(Строка.Магазин)));
		эл.Вставить("Период",		Строка(Период));

		
		Отбор	=	Новый Структура;
		Отбор.Вставить("Продавец", Строка.Продавец);
		
		Строки =   ТаблицаРасшифровка_Общая.НайтиСтроки(Отбор);
		
		МассивДанные	=	Новый Массив;
		Для каждого СтрокаДанные из Строки цикл		
			Данные	=	Новый Структура;
			Данные.Вставить("ФокусГруппа",		Строка(СтрокаДанные.ФокусГруппа));
			Данные.Вставить("ПланПродаж", 		Строка(СтрокаДанные.ПланПродаж));
			Данные.Вставить("ФактПродаж", 		Строка(СтрокаДанные.ФактПродаж));
			Данные.Вставить("КоличествоСверх", 	Строка(СтрокаДанные.КоличествоСверх));
			Данные.Вставить("СуммаФакт", 		Строка(СтрокаДанные.СуммаФакт));
			Данные.Вставить("СуммаСверх", 		Строка(СтрокаДанные.СуммаСверх));
			Данные.Вставить("СуммаПремии", 		Строка(СтрокаДанные.СуммаПремии));
			
			МассивДанные.Добавить(Данные);
		КонецЦикла;
		эл.Вставить("Данные", МассивДанные);

		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
	
	Ответ	=	Прокси.writeFocusMotivation_day(JS); 
	                                         
	Если Ответ тогда
		Рег = РегистрыСведений.ТБК_Константы.СоздатьНаборЗаписей();
		Рег.Отбор.ИмяКонстанты.Установить("ДатаОтправкиДанныхПоФокуснойМотивации_ЗаДень");
		НоваяСтр	=	Рег.Добавить();
		НоваяСтр.ЗначениеКонстанты	=	ТекущаяДата();
		НоваяСтр.ИмяКонстанты		=	"ДатаОтправкиДанныхПоФокуснойМотивации_ЗаДень";
		рег.Записать();
	КонецЕсли;

КонецПроцедуры


Процедура ОтправитьДанныеРучныеСкидкиЗапись(Прокси)
	Запрос = Новый запрос("ВЫБРАТЬ
	                      |	ТБКРучныеСкидкиЗапись.Чек КАК Чек,
	                      |	ТБКРучныеСкидкиЗапись.РучнаяСкидка КАК РучнаяСкидка
	                      |ИЗ
	                      |	РегистрСведений.ТБКРучныеСкидкиЗапись КАК ТБКРучныеСкидкиЗапись
	                      |ГДЕ
	                      |	НЕ ТБКРучныеСкидкиЗапись.ОтправленоВ_Ут");
	                                                        
	Тз = Запрос.Выполнить().Выгрузить();
	МассивОтправки = Новый Массив;
	Для каждого Строка Из Тз Цикл
		
		чек = Строка.Чек;
		
		СтруктураЧека = Новый Структура();
		СтруктураЧека.Вставить("Чек", 			Строка(Чек));
		СтруктураЧека.Вставить("Дата", 			Строка(Чек.Дата));
		СтруктураЧека.Вставить("Магазин", 		Строка(Чек.Магазин));
		
		Если Чек.Товары.Количество() > 0 тогда
			СтруктураЧека.Вставить("Продавец", 	Строка(Чек.Товары[0].Продавец));
		иначе
			СтруктураЧека.Вставить("Продавец", 	Строка(Чек.Продавец));
		КонецЕсли;
		
		СтруктураЧека.Вставить("РучнаяСкидка", 	Строка(Строка.РучнаяСкидка));
		
		Для каждого СтрокаТовар из Чек.Товары цикл			
			СтруктураЧека.Вставить("Номенклатура"			+	Строка(СтрокаТовар.НомерСтроки),	Строка(СтрокаТовар.Номенклатура));
			СтруктураЧека.Вставить("НоменклатураКод"		+	Строка(СтрокаТовар.НомерСтроки),	Строка(СтрокаТовар.Номенклатура.Код));
			СтруктураЧека.Вставить("Характеристика"			+	Строка(СтрокаТовар.НомерСтроки),	Строка(СтрокаТовар.Характеристика));
			СтруктураЧека.Вставить("КоличествоУпаковок"		+	Строка(СтрокаТовар.НомерСтроки),	Строка(СтрокаТовар.КоличествоУпаковок));
			СтруктураЧека.Вставить("Цена"					+	Строка(СтрокаТовар.НомерСтроки),	Строка(СтрокаТовар.Цена));  
			СтруктураЧека.Вставить("Сумма"					+	Строка(СтрокаТовар.НомерСтроки),	Строка(СтрокаТовар.Сумма));  
		КонецЦикла;
		
		МассивОтправки.Добавить(СтруктураЧека);
		
	КонецЦикла;
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивОтправки);
	Результат = Прокси.SendManualDiscounts(JS);
	Если Результат Тогда
		
		Для каждого Строка Из тз Цикл
			Попытка
				
				Набор = РегистрыСведений.ТБКРучныеСкидкиЗапись.СоздатьНаборЗаписей();	
				Набор.Отбор.Чек.Установить(Строка.Чек);
				Набор.Прочитать();
				Если Набор.Количество() = 1 Тогда
					
					Набор[0].ОтправленоВ_Ут = Истина;
					Набор.Записать();
					
				КонецЕсли;	
				
			Исключение
				ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация,,, ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла; 	
		
	КонецЕсли;
КонецПроцедуры


Процедура ОтправитьДанныеДолгиеЧеки(Прокси)
	Запрос = Новый запрос("ВЫБРАТЬ
	                      |	ТБКДолгиеЧеки.Чек КАК Чек,
	                      |	ТБКДолгиеЧеки.ВремяНаЧек КАК ВремяНаЧек
	                      |ИЗ
	                      |	РегистрСведений.ТБКДолгиеЧеки КАК ТБКДолгиеЧеки
	                      |ГДЕ
	                      |	НЕ ТБКДолгиеЧеки.флОтправленВУт");
	                                                        
	Тз = Запрос.Выполнить().Выгрузить();
	МассивОтправки = Новый Массив;
	Для каждого Строка Из Тз Цикл
		
		чек = Строка.Чек;
		
		СтруктураЧека = Новый Структура();
		СтруктураЧека.Вставить("Чек", 			Строка(Чек));
		СтруктураЧека.Вставить("Дата", 			Строка(Чек.Дата));
		СтруктураЧека.Вставить("Магазин", 		Строка(Чек.Магазин));
		
		Если Чек.Товары.Количество() > 0 тогда
			СтруктураЧека.Вставить("Продавец", 		Строка(Чек.Товары[0].Продавец));
		иначе
			СтруктураЧека.Вставить("Продавец", 		Строка(Чек.Продавец));
		КонецЕсли;
		
		СтруктураЧека.Вставить("ВремяНаЧек", 	Строка(Строка.ВремяНаЧек));
		
		Для каждого СтрокаТовар из Чек.Товары цикл			
			СтруктураЧека.Вставить("Номенклатура"			+	Строка(СтрокаТовар.НомерСтроки),	Строка(СтрокаТовар.Номенклатура));
			СтруктураЧека.Вставить("НоменклатураКод"		+	Строка(СтрокаТовар.НомерСтроки),	Строка(СтрокаТовар.Номенклатура.Код));
			СтруктураЧека.Вставить("Характеристика"			+	Строка(СтрокаТовар.НомерСтроки),	Строка(СтрокаТовар.Характеристика));
			СтруктураЧека.Вставить("КоличествоУпаковок"		+	Строка(СтрокаТовар.НомерСтроки),	Строка(СтрокаТовар.КоличествоУпаковок));
			СтруктураЧека.Вставить("Цена"					+	Строка(СтрокаТовар.НомерСтроки),	Строка(СтрокаТовар.Цена));  
			СтруктураЧека.Вставить("Сумма"					+	Строка(СтрокаТовар.НомерСтроки),	Строка(СтрокаТовар.Сумма));  
		КонецЦикла;
		
		МассивОтправки.Добавить(СтруктураЧека);
		
	КонецЦикла;
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивОтправки);
	Результат = Прокси.SendDolgieCheki(JS);
	
	Если Результат Тогда
		
		Для каждого Строка Из тз Цикл
			Попытка
				
				Набор = РегистрыСведений.ТБКДолгиеЧеки.СоздатьНаборЗаписей();	
				Набор.Отбор.Чек.Установить(Строка.Чек);
				Набор.Прочитать();
				Если Набор.Количество() = 1 Тогда  					
					Набор[0].флОтправленВУт = Истина;
					Набор.Записать();   					
				КонецЕсли;					
			Исключение
				ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация,,, ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла; 	
		
	КонецЕсли;
КонецПроцедуры

Процедура ЗагрузкаСписанныхМарок(Прокси)
	ДатаЗагрузки	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ДатаЗагрузкиСписанныхМарок");
	
	Если ДатаЗагрузки<>Неопределено тогда
		Если НачалоДня(ДатаЗагрузки) = НачалоДня(ТекущаяДата()) тогда
			Возврат
		КонецЕсли;
		Ответ	=	Прокси.getWithDrawnMarks("");	
	иначе
		Ответ	=	Прокси.getWithDrawnMarks("Все");// в первый раз грузим весь регистр	
	КонецЕсли;
	
	
	СтруктураОтвета	= ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//если пустой ответ - то пустой массив	
	
	Если СтруктураОтвета <> "" тогда
		Для каждого Строка из СтруктураОтвета цикл
			
			Рег	=	РегистрыСведений.ТБКСписанныеМарки.СоздатьМенеджерЗаписи();
			Рег.Марка			=	СокрЛП(Строка.Марка);			
			Рег.Записать();
		КонецЦикла; 	
		
		
		Рег = РегистрыСведений.ТБК_Константы.СоздатьНаборЗаписей();
		Рег.Отбор.ИмяКонстанты.Установить("ДатаЗагрузкиСписанныхМарок");
		НоваяСтр	=	Рег.Добавить();
		НоваяСтр.ЗначениеКонстанты	=	ТекущаяДата();
		НоваяСтр.ИмяКонстанты		=	"ДатаЗагрузкиСписанныхМарок";
		рег.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьДанные_УценкаНовая(Прокси)
	Запрос = Новый запрос("ВЫБРАТЬ
	                      |	ТБКУценка_Новая.Чек КАК Чек,
	                      |	ТБКУценка_Новая.Номенклатура КАК Номенклатура,
	                      |	ТБКУценка_Новая.Код КАК Код,
	                      |	ТБКУценка_Новая.ПроцентСкидки КАК ПроцентСкидки,
	                      |	ТБКУценка_Новая.ПричинаУценки КАК ПричинаУценки,
	                      |	ТБКУценка_Новая.флОтправленВУт КАК флОтправленВУт,
	                      |	ТБКУценка_Новая.Цена КАК Цена
	                      |ИЗ
	                      |	РегистрСведений.ТБКУценка_Новая КАК ТБКУценка_Новая
	                      |ГДЕ
	                      |	НЕ ТБКУценка_Новая.флОтправленВУт");
	                                                        
	Тз = Запрос.Выполнить().Выгрузить();
	МассивОтправки = Новый Массив;
	Для каждого Строка Из Тз Цикл
		
		чек = Строка.Чек;
		
		СтруктураЧека = Новый Структура();
		СтруктураЧека.Вставить("Чек", 			Строка(Чек));
		СтруктураЧека.Вставить("Дата", 			Строка(Чек.Дата));
		СтруктураЧека.Вставить("Магазин", 		Строка(Чек.Магазин));
		СтруктураЧека.Вставить("ВидОперации",	Строка(Чек.ВидОперации));
		
		СтруктураЧека.Вставить("НоменклатураКод"		,	Строка(Строка.Номенклатура.Код));
		СтруктураЧека.Вставить("ПричинаУценки"			,	Строка(Строка.ПричинаУценки));
		СтруктураЧека.Вставить("ПроцентСкидки"			,	Строка(Строка.ПроцентСкидки));    
		СтруктураЧека.Вставить("Код"					,	Строка(Строка.Код));
		СтруктураЧека.Вставить("Цена"					,	Строка(Строка.Цена));
		
		МассивОтправки.Добавить(СтруктураЧека);
		
	КонецЦикла;
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивОтправки);
	Результат = Прокси.NewWriteYcenka(JS);
	
	Если Результат Тогда
		
		Для каждого Строка Из тз Цикл
			Попытка
				
				Набор = РегистрыСведений.ТБКУценка_Новая.СоздатьНаборЗаписей();	
				Набор.Отбор.Чек.Установить(Строка.Чек);
				Набор.Прочитать();
				Для каждого СтрокаН из Набор цикл  					
					СтрокаН.флОтправленВУт = Истина;
				КонецЦикла;
				Набор.Записать();   					

			Исключение
				ЗаписьЖурналаРегистрации("Информация", УровеньЖурналаРегистрации.Информация,,, ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла; 	
		
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьПробитиеПоБК(Прокси)
	
	ФлПринудительнаяЗагрузка	=	Ложь;
		Ответ = Прокси.get_locked_Bу_BK_forced();
	Если Ответ тогда
		ФлПринудительнаяЗагрузка = истина;	
	КонецЕсли;

	Если НЕ ФлПринудительнаяЗагрузка Тогда
		
		ДатаОтправки	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ДатаГруппыБитьПоБк");
		
		Если ДатаОтправки<>Неопределено тогда
			Если НачалоДня(ДатаОтправки) = НачалоДня(ТекущаяДата()) тогда
				Возврат;
			КонецЕсли;
		Иначе
			
			Рег = РегистрыСведений.ТБК_Константы.СоздатьНаборЗаписей();
			Рег.Отбор.ИмяКонстанты.Установить("ДатаГруппыБитьПоБк");
			НоваяСтр	=	Рег.Добавить();
			НоваяСтр.ЗначениеКонстанты	=	ТекущаяДата();
			НоваяСтр.ИмяКонстанты		=	"ДатаГруппыБитьПоБк";
			рег.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Ответ = Прокси.get_locked_Bу_BK();
	
	Если НЕ Ответ = Ложь Тогда
		
		Набор = РегистрыСведений.ПробиватьПоБК.СоздатьНаборЗаписей();	
		Набор.Записать();
		
		ОтветJSOON = ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);
		
		Для каждого Значение Из ОтветJSOON Цикл
			
			Рег = РегистрыСведений.ПробиватьПоБК.СоздатьМенеджерЗаписи();
			Рег.НоменклатурнаяГруппа = Справочники.Номенклатура.НайтиПоКоду(Значение.НоменклатурнаяГруппаКод);
			Рег.Дата = Дата(Значение.Дата);                                          
			Рег.Записать();
			
		КонецЦикла; 
		
		Рег = РегистрыСведений.ТБК_Константы.СоздатьНаборЗаписей();
		Рег.Отбор.ИмяКонстанты.Установить("ДатаГруппыБитьПоБк");
		НоваяСтр	=	Рег.Добавить();
		НоваяСтр.ЗначениеКонстанты	=	ТекущаяДата();
		НоваяСтр.ИмяКонстанты		=	"ДатаГруппыБитьПоБк";
		рег.Записать();
		
	КонецЕсли;


КонецПроцедуры

Процедура ПолучитьШтрихкодаОбезличенныхМарок(Прокси)

	ФлПринудительнаяЗагрузка	=	Ложь;
		Ответ = Прокси.ForcedВownloadDepersonalizedStamps();
	Если Ответ тогда
		ФлПринудительнаяЗагрузка = истина;	
	КонецЕсли;

	Если НЕ ФлПринудительнаяЗагрузка Тогда
		
		ДатаОтправки	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ДатаПолученияОбезличенныхМарок");
		
		Если ДатаОтправки<>Неопределено тогда
			Если НачалоДня(ДатаОтправки) = НачалоДня(ТекущаяДата()) тогда
				Возврат;
			КонецЕсли;
		Иначе
			
			Рег = РегистрыСведений.ТБК_Константы.СоздатьНаборЗаписей();
			Рег.Отбор.ИмяКонстанты.Установить("ДатаПолученияОбезличенныхМарок");
			НоваяСтр	=	Рег.Добавить();
			НоваяСтр.ЗначениеКонстанты	=	ТекущаяДата();
			НоваяСтр.ИмяКонстанты		=	"ДатаПолученияОбезличенныхМарок";
			рег.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Ответ = Прокси.GetDepersonalizedStamps();
	
	Если НЕ Ответ = Ложь Тогда
		
		Набор = РегистрыСведений.ТБКОбезличенныеМарки.СоздатьНаборЗаписей();	
		Набор.Записать();
		
		ОтветJSOON = ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);
		
		Для каждого Значение Из ОтветJSOON Цикл
			
			Рег = РегистрыСведений.ТБКОбезличенныеМарки.СоздатьМенеджерЗаписи();
			Рег.ШтрихкодОбезличеннойМарки = Значение.ШтрихкодОбезличеннойМарки;                                        
			Рег.Записать();
			
		КонецЦикла; 
		
		Рег = РегистрыСведений.ТБК_Константы.СоздатьНаборЗаписей();
		Рег.Отбор.ИмяКонстанты.Установить("ДатаПолученияОбезличенныхМарок");
		НоваяСтр	=	Рег.Добавить();
		НоваяСтр.ЗначениеКонстанты	=	ТекущаяДата();
		НоваяСтр.ИмяКонстанты		=	"ДатаПолученияОбезличенныхМарок";
		рег.Записать();
		
	КонецЕсли;
	

КонецПроцедуры

 