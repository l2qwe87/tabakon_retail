Функция УдалитьФункциюПослеСтартаВсехМагазов()
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ПрименениеЦенНоменклатуры.Ссылка КАК Ссылка
	             |ИЗ
	             |	Документ.ПрименениеЦенНоменклатуры КАК ПрименениеЦенНоменклатуры
	             |ГДЕ
	             |	ПрименениеЦенНоменклатуры.Номер ПОДОБНО ""%-00000001""";
	
	мДоки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	планы = ПланыОбмена.ОбменРозницаУправлениеТорговлей103.Выбрать();
	Пока планы.Следующий() Цикл
		Если планы.НомерПринятого > 0 Тогда
			Для Каждого Док из мДоки Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Док);
			КонецЦикла;
		КонецЕсли;
	Конеццикла;
КонецФункции

Процедура ВыполнитьОбмен() ЭКСПОРТ
	
	///!!!!!!!!!!!!!!!!!!!
	УдалитьФункциюПослеСтартаВсехМагазов();
	///!!!!!!!!!!!!!!!!!!!
	
	планы = ПланыОбмена.ОбменРозницаУправлениеТорговлей103.Выбрать();
	Пока планы.Следующий() Цикл
		Если планы.НомерПринятого > 0 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.РегистрыСведений.Штрихкоды);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.Номенклатура);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.ХарактеристикиНоменклатуры);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.УпаковкиНоменклатуры);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.Магазины);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.ПланыВидовХарактеристик.ТипыШтрихкодов);
			
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.ФизическиеЛица);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.Пользователи);
			
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.Организации);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.Кассы);
			//ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.КассыККМ);
			
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.ВидыНоменклатуры);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Документы.ПеремещениеТоваров);
		КонецЕсли;
	Конеццикла;
	
	сценарии = Справочники.СценарииОбменовДанными.Выбрать();
	Пока сценарии.Следующий() Цикл  
		Отказ = ложь;
		ОбменДаннымиСервер.ВыполнитьОбменДаннымиПоСценариюОбменаДанными(Отказ, сценарии.Ссылка);
	КонецЦикла;	
	
	ВыполнитьЗадачиПоВебСервису();
	ВыровнятьОстатки();//Вик 2022-05-04
	
	РегистрыСведений.ТБК_Штрихкоды.СинхронизацияШтрихкодов();
	
	//СнятьФлагиОрдернойСхемы(); //коммент от 2020_12_23. Все магазины переведены на ордерную схему
	
	ТБК_Номенклатура.Установить_ОсобенностьУчетаДля_ТабачнаяПродукция();
	
	РегистрыСведений.Штрихкоды.ОбработатьТипыШтрихкодов();	
	РегистрыСведений.Штрихкоды.ЧисткаШтрихкодов();
	
	
	Справочники.ФизическиеЛица.ГенерацияЮзеровДляФЛ();
	Справочники.ФизическиеЛица.ПроверкаФИО();
	
	//Марк 2023-11-21
	ЗарегестрироватьКлиентов_samosale();
	ОтправитьЧек_samosale();
	SamosaleДопБаллыНачислениеДопБалов();
	//КонецМарк

КонецПроцедуры


Функция СнятьФлагиОрдернойСхемы()
	МассивСкладовПоОрдернойСхеме = ПолучитьМассивСкладовПоОрдернойСхеме();
	
	Запрос = Новый Запрос;
	ЗАпрос.Текст = "ВЫБРАТЬ
	               |	магазины.Ссылка КАК Ссылка,
				   |	магазины.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Магазины КАК магазины ГДЕ ИспользоватьОрдернуюСхемуПриПеремещении";
	
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		Если ЛОЖЬ Тогда Рез = Справочники.Магазины.ПустаяСсылка(); КонецЕсли;
		
		Если МассивСкладовПоОрдернойСхеме.Найти(нрег(рез.Наименование)) <> Неопределено тогда Продолжить КонецЕсли;
		
		об = Рез.Ссылка.ПолучитьОбъект();
		об.ИспользоватьОрдернуюСхемуПриПеремещении = ЛОЖЬ;
		об.ОбменДанными.Загрузка=Истина;
		об.Записать();
	КонецЦикла;
КонецФункции 

Функция ПолучитьМассивСкладовПоОрдернойСхеме()
	Массив = Новый Массив;
	Массив.Добавить(нрег("Интернет Магазин"));
	Массив.Добавить(нрег("Ленинский"));
	Массив.Добавить(нрег("БалканскаяПлПДВ"));
	Массив.Добавить(нрег("ГулливерСДП"));
	Массив.Добавить(нрег("ФиолентСДП"));
	Массив.Добавить(нрег("МиксерПДВ"));
	Массив.Добавить(нрег("Галерея1814СДП"));
	Массив.Добавить(нрег("Ленинский2ПДВ"));
	Массив.Добавить(нрег("Балкания Север"));
	Массив.Добавить(нрег("ДевяткиноПДВ"));
	
	//второй эшалон
	Массив.Добавить(нрег("Osinka"));
	Массив.Добавить(нрег("БайконурскийЛАФ"));
	Массив.Добавить(нрег("Бухарестская д.89"));
	Массив.Добавить(нрег("ДумскаяКИВ"));
	Массив.Добавить(нрег("Ларина15ПДВ"));
	Массив.Добавить(нрег("Линия7КИВ"));
	Массив.Добавить(нрег("ОКЕЙВТЕ"));
	Массив.Добавить(нрег("Смайл ТК"));
	Массив.Добавить(нрег("ТуканТК"));
	Массив.Добавить(нрег("Финляндский вокзал"));
	Массив.Добавить(нрег("Черная речка 1")); 
	
	//третий эшалон
	Массив.Добавить(нрег("БалканыРивГош2ЛИГ"));
	Массив.Добавить(нрег("Гашека5ПДВ"));
	Массив.Добавить(нрег("Димитрова11ПДВ"));
	Массив.Добавить(нрег("ДимитроваПДВ"));
	Массив.Добавить(нрег("Звездная2ПДВ"));
	Массив.Добавить(нрег("ЗвезднаяСЮБ"));
	Массив.Добавить(нрег("РадугаСЮБ"));
	Массив.Добавить(нрег("Универсам Южный"));
	Массив.Добавить(нрег("АтмосфераПДВ"));
	Массив.Добавить(нрег("КамышоваяПДВ"));
	Массив.Добавить(нрег("Кушелевская1ПДВ")); 	
	Массив.Добавить(нрег("Лесная"));
	Массив.Добавить(нрег("МеркурийСМА"));
	Массив.Добавить(нрег("МонпансьеБЮА")); 
	Массив.Добавить(нрег("ОкейБогатырскийПАО"));
	Массив.Добавить(нрег("Питерлэнд ТРЦ"));
	Массив.Добавить(нрег("ПятьОзёрВЛГ")); 
	
	//четвертый эшалон
	Массив.Добавить(нрег("БухарестскаяМВГ"));
	Массив.Добавить(нрег("ГатчинаКубусМВГ"));
	Массив.Добавить(нрег("ГринПаркПДВ"));
	Массив.Добавить(нрег("КировскСЮБ"));
	Массив.Добавить(нрег("КолпиноЛентаВЛГ"));
	Массив.Добавить(нрег("КолпиноМеркурийВЛГ"));
	Массив.Добавить(нрег("КолпиноОкейВЛГ"));
	Массив.Добавить(нрег("ЛиговВАА"));
	Массив.Добавить(нрег("ЛомоносовЛентаПАО"));
	Массив.Добавить(нрег("МеждународнаяМВС"));
	Массив.Добавить(нрег("МорозовапосГАМ")); 	
	Массив.Добавить(нрег("Москва Форт"));
	Массив.Добавить(нрег("МоскваКрасныйКитБОК"));
	Массив.Добавить(нрег("МоскваПринцПлазаБОК")); 
	Массив.Добавить(нрег("МоскваЯсеневоБДЮ"));
	Массив.Добавить(нрег("МосковскаяМВГ"));
	Массив.Добавить(нрег("ПаркПобедыМВС"));
	Массив.Добавить(нрег("РиоБЮА"));
	Массив.Добавить(нрег("Рыбацкое Находка"));
	Массив.Добавить(нрег("РыбацкоеПарадМВС"));
	Массив.Добавить(нрег("СлавянкаВТЕ"));
	Массив.Добавить(нрег("СосновыйБорПДВ"));
	Массив.Добавить(нрег("Тосно2ЛАФ"));
	Массив.Добавить(нрег("ТосноЛАФ"));
	Массив.Добавить(нрег("ЭлектраМВГ"));
	Массив.Добавить(нрег("ЮжныйПолюс2СМА"));
	Массив.Добавить(нрег("ЮжныйполюсПДВ"));
	Массив.Добавить(нрег("Кириши2ПДВ")); 
	
	//пятый эшалон
	Массив.Добавить(нрег("АкадемПарк2ПДВ"));
	Массив.Добавить(нрег("БестужевскийТЦ"));
	Массив.Добавить(нрег("ВасилеостровскаяПДВ"));
	Массив.Добавить(нрег("КиришиЛАФ"));
	Массив.Добавить(нрег("Лиговский53ПДВ"));
	Массив.Добавить(нрег("ЛьвовскаяСЮБ"));
	Массив.Добавить(нрег("МаксиСопотПДВ"));
	Массив.Добавить(нрег("Московский6ПДВ"));
	Массив.Добавить(нрег("Нарвский29ПДВ")); 	
	Массив.Добавить(нрег("НовочеркасскаяПДВ"));
	Массив.Добавить(нрег("ОхтаМоллЛИГ")); 	
	Массив.Добавить(нрег("Перинные ряды ПЕРЕКРЕСТОК"));
	Массив.Добавить(нрег("ПикПДВ"));
	Массив.Добавить(нрег("ПриморскаяПДВ")); 
	Массив.Добавить(нрег("РодеоЛАФ"));
	Массив.Добавить(нрег("ТихвинПАО"));
	Массив.Добавить(нрег("ТККубусВолховПАО"));
	Массив.Добавить(нрег("ТКСеннаяЛАФ"));
	Массив.Добавить(нрег("ЧкаловскаяКИВ"));
	Массив.Добавить(нрег("ШкиперскийКИВ"));
	Массив.Добавить(нрег("Шоссе Революции"));
	
	//шестой эшалон
	Массив.Добавить(нрег("АВТОВО"));
	Массив.Добавить(нрег("Большевиков пр. 32"));
	Массив.Добавить(нрег("БонусТКПДВ"));
	Массив.Добавить(нрег("Бронницкая2ПДВ"));
	
	Массив.Добавить(нрег("Ветеранов171ГАМ"));
	Массив.Добавить(нрег("ВсеволожскЮжныйГАМ"));
	Массив.Добавить(нрег("ВыборгскоешоссеУСВ"));
	Массив.Добавить(нрег("ГрандКаньонБЮА"));
	
	Массив.Добавить(нрег("Европейский3")); 	
	Массив.Добавить(нрег("ЖемчужинаВАА"));
	Массив.Добавить(нрег("ЗаневскийКаскадУСВ")); 	
	Массив.Добавить(нрег("ИюньПДВ"));
	
	Массив.Добавить(нрег("Кировский1УСВ"));
	Массив.Добавить(нрег("ЛондонМоллУСВ")); 
	Массив.Добавить(нрег("Мега Дыбенко"));
	Массив.Добавить(нрег("МегаДыбенкоПДВ"));
	
	Массив.Добавить(нрег("МегаПарнасПДВ"));
	Массив.Добавить(нрег("Московский42ПДВ"));
	Массив.Добавить(нрег("Невский2УСВ"));
	Массив.Добавить(нрег("НевскийПрезентальМВС"));
	
	Массив.Добавить(нрег("НордСМА"));
	Массив.Добавить(нрег("Озерки2ПДВ"));
	Массив.Добавить(нрег("Озерки3ПДВ"));
	Массив.Добавить(нрег("ОкейГерманаСДП"));
	
	Массив.Добавить(нрег("ПарнасСитиБЮА"));
	Массив.Добавить(нрег("ТетрисВТЕ"));
	Массив.Добавить(нрег("Тихая12ГАМ"));
	Массив.Добавить(нрег("Ульянка"));
	
	Массив.Добавить(нрег("Французский 2"));
	Массив.Добавить(нрег("Французский 3"));
	
	Возврат Массив;
КонецФункции

Процедура ВыполнитьЗадачиПоВебСервису()
	//Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User", "http://mx.tbkon.ru:1776/vape/ws/tbk?wsdl");
	Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User", "http://vp.tbkon.ru:1776/vape/ws/tbk?wsdl");
	//Попытка
	//	Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User", "http://vws.tbkon.ru/tbk?wsdl");
	//Исключение
		//Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User", "http://mx.tbkon.ru:1776/vape/ws/tbk?wsdl");
	//КонецПопытки;
	//Если Прокси = Неопределено тогда Возврат КонецЕсли; 
	
	Попытка
		//УдалениеНеверныхШтрихкодов(Прокси);	
	Исключение   
	КонецПопытки;
	
	Попытка
		//ОтправкаКодовСкидки(Прокси);
	Исключение   
	КонецПопытки;
	
	Попытка
		ЗагрузкаДанныхПоСкидкам(Прокси);
	Исключение   
	КонецПопытки;
	
	Попытка
		//ОтправкаДанныхОНевернойОрганизации(Прокси);
	Исключение   
	КонецПопытки;
	
	Попытка
		//ОтправкаДанныхОПокупкеСотрудников(Прокси); 
	Исключение   
	КонецПопытки;
	
	Попытка
		ОтправкаДанныхОЗаявкахМагазина(Прокси); 
	Исключение   
	КонецПопытки;
	
	Попытка
		//ОтправкаДанныхИсторияПокупок(Прокси); 
	Исключение   
	КонецПопытки;

	Попытка
		ОтправкаДанныхИсторияПокупок_Самосейл(Прокси); 
	Исключение   
	КонецПопытки;
	
	Попытка
		ОтправитьИнформациюО_Бонусах(Прокси);
	Исключение
	КонецПопытки;
		
	//ОтправкаДанныхОСканированииВПеремещениях(Прокси);

	Прокси = Неопределено;

КонецПроцедуры

Процедура ОтправкаКодовСкидки(Прокси)
	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	КомментарииСтатистики.ХешНаименования КАК ХешНаименования,
	      	 	             |	КомментарииСтатистики.Наименование КАК Наименование
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.КомментарииСтатистики КАК КомментарииСтатистики
	      	 	             |ГДЕ
	      	 	             |	КомментарииСтатистики.Наименование ПОДОБНО &НаименованиеТБК
	      	 	             |	И НЕ КомментарииСтатистики.Наименование ПОДОБНО &УжеЗагружен");
	Запрос.УстановитьПараметр("НаименованиеТБК","%tbk%");
	Запрос.УстановитьПараметр("УжеЗагружен","%загружен%");

	НужныйСклад			 = ОбщегоНазначения.ПолучитьСкладИзООРП();
	НужнаяКассаККМ		 = ОбщегоНазначения.ПолучитьКассаККМИзООРП();
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Дата",Строка.ХешНаименования);
		эл.Вставить("Склад",Строка(НужныйСклад));
		эл.Вставить("КассаККМ",Строка(НужнаяКассаККМ));
		
		Данные		=	Строка.Наименование;
		Поз3		=	СтрНайти(Данные,"/",,,3);
		Поз4		=	СтрНайти(Данные,"/",,,4);
		Поз5		=	СтрНайти(Данные,"/",,,5);
		Поз6		=	СтрНайти(Данные,"/",,,6);
		Поз7		=	СтрНайти(Данные,"/",,,7);
		Поз8		=	СтрНайти(Данные,"/",,,8);
		Поз9		=	СтрНайти(Данные,"/",,,9);

		Если Найти(Строка.Наименование,"tbk_iqos") тогда
			Поз8	=	Поз3;
			Поз9	=	Поз4;
		КонецЕсли;
		
		Для ном = 0 по 100 цикл
			СуммаСкидки	=	Сред(Данные,Поз8+1,1);
			Если СуммаСкидки = "0" тогда
				Поз7	=	Поз7 + 14;
				Поз8	=	Поз8 + 14;
				Поз9	=	СтрНайти(Данные,"/",,Поз8+1);
			иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;

	
		КодГруппы	=	Сред(Данные,Поз3+1,11);		
		эл.Вставить("НоменклатурнаяГруппа",КодГруппы);		
		
		КодПричины	=	Сред(Данные,Поз5+1,Поз6-Поз5-1);
		эл.Вставить("Причина",КодПричины);
		
		эл.Вставить("Код",Данные);
		
		КодНом		=	Сред(Данные,Поз7+1,Поз8-Поз7-1);
		эл.Вставить("КодНом",КодНом);
		
		Если Поз9 = 0 тогда
			СуммаСкидки	=	Сред(Данные,Поз8+1);
		иначе
			СуммаСкидки	=	Сред(Данные,Поз8+1, Поз9-Поз8-1);
		КонецЕсли;

		эл.Вставить("СуммаСкидки",СуммаСкидки);
		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
	
	//Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User", "http://mx.tabakon.ru:1777/ut/ws/tbk?wsdl");
	Ответ	=	Прокси.WriteDiscountsQR(JS);
	
	Если Ответ тогда
		Для каждого Строка из рез цикл
			рег = РегистрыСведений.КомментарииСтатистики.СоздатьНаборЗаписей();
			рег.Отбор.ХешНаименования.Установить(Строка.ХешНаименования);
			рег.Прочитать();
			рег[0].Наименование = рег[0].Наименование + "загружен";
			рег.Записать();			
		КонецЦикла;
	КонецЕсли;

	
	//Сообщить(Ответ);	
КонецПроцедуры

Процедура УдалениеНеверныхШтрихкодов(Прокси)
	Ответ = Прокси.DelSHK();
	
	СтруктураОтвета	= ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//если пустой ответ - то пустой массив	
	
	Для каждого Строка из СтруктураОтвета цикл
		НевернаяНоменклатура	=	Справочники.Номенклатура.НайтиПоКоду(СокрЛП(Строка.КодНоменклатуры));
		Если НевернаяНоменклатура.Пустая() тогда Продолжить; КонецЕсли;
		
		
		НужЕд = Неопределено;
		Если ЗначениеЗаполнено(СокрЛП(Строка.ЕдиницаИзмерения)) тогда
			Если Найти(СокрЛП(Строка.ЕдиницаИзмерения),"шт") тогда
				НужНаим	=	"шт";
			ИначеЕсли  Найти(СокрЛП(Строка.ЕдиницаИзмерения),"упак") тогда
				НужНаим	=	"упак";				
			КонецЕсли;
			
			Запрос	=	Новый Запрос("ВЫБРАТЬ
			      	 	             |	УпаковкиНоменклатуры.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
			      	 	             |ГДЕ
			      	 	             |	УпаковкиНоменклатуры.Наименование ПОДОБНО &Наименование
			      	 	             |	И УпаковкиНоменклатуры.Владелец = &Владелец");
			Запрос.УстановитьПараметр("Наименование","%"+НужНаим+"%");
			Запрос.УстановитьПараметр("Владелец",НевернаяНоменклатура);
			
			РезЕдиница = Запрос.Выполнить().Выгрузить();
			Если РезЕдиница.Количество() >0 тогда
				НужЕд	=	РезЕдиница[0].Ссылка;	
			КонецЕсли;
		КонецЕсли;
					
		нз = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		
		нз.Отбор.Штрихкод.Установить(Строка.Штрихкод);
		нз.Отбор.Владелец.Установить(НевернаяНоменклатура);
		Если НужЕд <> Неопределено тогда
			Если НужНаим	=	"шт" тогда
				нз.Отбор.Упаковка.Установить(Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
			иначе
				нз.Отбор.Упаковка.Установить(НужЕд);
			КонецЕсли;
		КонецЕсли;
		
		нз.Записать(); 
		
		Если НужЕд = Неопределено тогда
			нз = РегистрыСведений.ТБК_Штрихкоды.СоздатьНаборЗаписей();
			
			нз.Отбор.Штрихкод.Установить(Строка.Штрихкод);
			нз.Отбор.Владелец.Установить(НевернаяНоменклатура);
			нз.Записать(); 
		иначе
			Для каждого Ед из  РезЕдиница цикл
				нз = РегистрыСведений.ТБК_Штрихкоды.СоздатьНаборЗаписей();
				
				нз.Отбор.Штрихкод.Установить(Строка.Штрихкод);
				нз.Отбор.Владелец.Установить(НевернаяНоменклатура);
				нз.Отбор.Упаковка.Установить(Ед);
				нз.Записать();
				
			КонецЦикла;
		КонецЕсли;  	
	КонецЦикла; 

КонецПроцедуры

Процедура ЗагрузкаДанныхПоСкидкам(Прокси);
	Касса	=	ОбщегоНазначения.ПолучитьКассуИзПКО();
	Если не ЗначениеЗаполнено(Касса) тогда
		Запрос	=	Новый запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		      	 	             |	Кассы.Ссылка КАК Ссылка
		      	 	             |ИЗ
		      	 	             |	Справочник.Кассы КАК Кассы
		      	 	             |ГДЕ
		      	 	             |	НЕ Кассы.ПометкаУдаления");
		рез = Запрос.Выполнить().Выгрузить();
		
		Если рез.Количество() = 1 тогда
			Касса	=	рез[0].Ссылка;
		иначе
			Касса	=	"";
		КонецЕсли;
	КонецЕсли;
	
	Ответ	=	Прокси.PostDiscountsData(СокрЛП(Строка(Касса)));
	Если ЗначениеЗаполнено(Ответ) тогда
		ОтветМассив	=	ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//В массив
		
		Для каждого СтрокаМассива из ОтветМассив цикл //добавляем
			нз = РегистрыСведений.ХранилищеСертификатов.СоздатьНаборЗаписей();// этот регистр выбран чтобы не обновлять монопольно. в этом регистре есть даты для быстрого отбора + измерение в виде строки
			
			нз.Отбор.Идентификатор.Установить(СтрокаМассива.УИ); 
			НоваяЗапись	=	нз.Добавить();
			
			НоваяЗапись.ДатаНачала		=	СтрокаМассива.ПериодАкцииНачало;
			НоваяЗапись.ДатаОкончания	=	СтрокаМассива.ПериодАкцииКонец;
			НоваяЗапись.Идентификатор	=	СтрокаМассива.УИ;
			НоваяЗапись.ТипХранилища	=	Перечисления.ТипХранилищаСертификатов.ПерсональныеСертификаты;
			
			ДанныеАкции	=	СтрокаМассива.ТипАкции 					+ "/" + СтрокаМассива.Скидка 			+ "/" +
							СтрокаМассива.ТоварВПодарок 			+ "/" + СтрокаМассива.СуммаЧека 		+ "/" +
							СтрокаМассива.КоличествоНоменклатуры 	+ "/" + СтрокаМассива.Номенклатура		+ "/" +
							СтрокаМассива.КоличествоШагов;
							
			НоваяЗапись.Наименование	=	ДанныеАкции;							
			
			нз.Записать();			
		КонецЦикла; 
	КонецЕсли;

КонецПроцедуры

Процедура ОтправкаДанныхОНевернойОрганизации(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
		      	 	             |	ВременныеИдентификаторыЗапросов.Идентификатор КАК Идентификатор,
		      	 	             |	ВременныеИдентификаторыЗапросов.Дата КАК Дата,
		      	 	             |	ВременныеИдентификаторыЗапросов.Запрос КАК Запрос
		      	 	             |ИЗ
		      	 	             |	РегистрСведений.ВременныеИдентификаторыЗапросов КАК ВременныеИдентификаторыЗапросов
		      	 	             |ГДЕ
		      	 	             |	НЕ ВременныеИдентификаторыЗапросов.Идентификатор ПОДОБНО &Идентификатор");
	Запрос.УстановитьПараметр("Идентификатор","%загружен%");

	Структура = Новый Структура;
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 тогда возврат КонецЕсли;
	
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Дата",Строка(Строка.Дата));		
		Данные		=	Строка.Запрос.Получить();
		
		эл.Вставить("Магазин",Строка(Данные.Магазин));
		эл.Вставить("Организация",Строка(Данные.Организация));
		эл.Вставить("ИНН",Данные.ИНН);
		эл.Вставить("Чек",Строка(Данные.Чек));
		эл.Вставить("ВидОперации",Данные.ВидОперации);
		эл.Вставить("ПроверкаМаркиИНН",Данные.ПроверкаМаркиИНН);
		эл.Вставить("НеверныйИНН",Данные.НеверныйИНН);
		эл.Вставить("Марка",Данные.Марка);
		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
	
	//Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User", "http://mx.tabakon.ru:1777/ut/ws/tbk?wsdl");
	Ответ	=	Прокси.WriteWrongINN(JS);
	
	Если Ответ тогда
		Для каждого Строка из рез цикл
			рег = РегистрыСведений.ВременныеИдентификаторыЗапросов.СоздатьМенеджерЗаписи();
			рег.Идентификатор 	= "загружен " + Строка.Идентификатор;
			рег.Дата 			=  Строка.Дата;
			рег.Запрос			=  Строка.Запрос;
			рег.Записать();
			
			рег = РегистрыСведений.ВременныеИдентификаторыЗапросов.СоздатьНаборЗаписей();
			рег.Отбор.Идентификатор.Установить(Строка.Идентификатор);
			рег.Записать();			
		КонецЦикла;
	КонецЕсли; 
	
	//Сообщить(Ответ);	
КонецПроцедуры

Процедура ОтправкаДанныхОПокупкеСотрудников(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ПокупкиСотрудников.Чек КАК Чек,
	      	 	             |	ТБК_ПокупкиСотрудников.Продавец КАК Продавец
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_ПокупкиСотрудников КАК ТБК_ПокупкиСотрудников
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ПокупкиСотрудников.ОтправленВУТ");

	Структура = Новый Структура;
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 тогда возврат КонецЕсли;
	
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Чек",СокрЛП(Строка(Строка.Чек)));	
		Если Строка.Чек.ВидОперации =  Перечисления.ВидыОперацийЧекККМ.Возврат тогда
			эл.Вставить("СуммаЧека",Строка(-Строка.Чек.СуммаДокумента));
		иначе
			эл.Вставить("СуммаЧека",Строка(Строка.Чек.СуммаДокумента));
		КонецЕсли;	
		
		эл.Вставить("Сотрудник",СокрЛП(Строка(Строка.Продавец)));
		эл.Вставить("Дата",Строка(Строка.Чек.Дата));
		эл.Вставить("Магазин",Строка(Строка.Чек.Магазин));
		
		Для каждого СтрокаДанные из Строка.Чек.товары цикл			
			эл.Вставить("Номенклатура"				+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура));
			эл.Вставить("НоменклатураКод"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура.Код));
			эл.Вставить("Количество"				+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Количество));
			эл.Вставить("Цена"						+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Цена));
			эл.Вставить("Сумма"						+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Сумма));			
		КонецЦикла;
		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);

	Ответ	=	Прокси.WriteWorkerPurchases(JS);
	
	Если Ответ тогда
		Для каждого Строка из рез цикл 
			рег = РегистрыСведений.ТБК_ПокупкиСотрудников.СоздатьНаборЗаписей();
			рег.Отбор.Чек.Установить(Строка.Чек); 		

			НоваяСтрока					=	Рег.Добавить(); 
			НоваяСтрока.Чек	 			=	Строка.Чек;
			НоваяСтрока.Продавец 		=	Строка.Продавец;
			НоваяСтрока.ОтправленВУТ	=	истина;
			рег.Записать();		
		КонецЦикла;
	КонецЕсли;  
	//Сообщить(Ответ);	
КонецПроцедуры

Процедура ОтправкаДанныхОСканированииВПеремещениях(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	СохраненныеДанныеПомощникаПриемкиОтгрузки.ДокументРаспоряжение КАК ДокументРаспоряжение,
	      	 	             |	СохраненныеДанныеПомощникаПриемкиОтгрузки.ТоварыПеремещение КАК ТоварыПеремещение
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.СохраненныеДанныеПомощникаПриемкиОтгрузки КАК СохраненныеДанныеПомощникаПриемкиОтгрузки
	      	 	             |ГДЕ
	      	 	             |	НЕ СохраненныеДанныеПомощникаПриемкиОтгрузки.Операция ПОДОБНО &Операция");
	Запрос.УстановитьПараметр("Операция","%!%");

	Структура = Новый Структура;
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 тогда возврат КонецЕсли;
	
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Документ",Строка(Строка.ДокументРаспоряжение));		
		эл.Вставить("Номер",Строка(Строка.ДокументРаспоряжение.Номер));
		эл.Вставить("Дата",Строка(Строка.ДокументРаспоряжение.Дата));
		Данные		=	Строка.ТоварыПеремещение.Получить();
		Для каждого СтрокаДанные из Данные цикл			
			эл.Вставить("Номенклатура"				+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура));
			эл.Вставить("НоменклатураКод"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура.Код));
			эл.Вставить("Характеристика"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Характеристика));
			эл.Вставить("КоличествоФактРозница"		+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.КоличествоФакт)); 			
		КонецЦикла;
		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
	
	//Прокси  = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User", "http://mx.tabakon.ru:1777/ut/ws/tbk?wsdl");
	Ответ	=	Прокси.WriteSkanPer(JS);
	
	Если Ответ тогда
		Для каждого Строка из рез цикл
			рег = РегистрыСведений.СохраненныеДанныеПомощникаПриемкиОтгрузки.СоздатьНаборЗаписей();
			рег.Отбор.ДокументРаспоряжение.Установить(Строка.ДокументРаспоряжение);
			рег.Записать();	
			
			рег = РегистрыСведений.СохраненныеДанныеПомощникаПриемкиОтгрузки.СоздатьМенеджерЗаписи();
			рег.Операция	 			= рег.Операция + "!";
			рег.ДокументРаспоряжение 	=  Строка.ДокументРаспоряжение;
			рег.ТоварыПеремещение		=  Строка.ТоварыПеремещение;
			рег.Записать();		
		КонецЦикла;
	КонецЕсли;  
	//Сообщить(Ответ);	
КонецПроцедуры

Процедура ВыровнятьОстатки()
	НужнаяДата = НачалоДня(ТекущаяДата());

	//поиск источника	
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ОприходованиеТоваров.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
	      	 	             |ГДЕ
	      	 	             |	ОприходованиеТоваров.Комментарий ПОДОБНО &Комментарий
	      	 	             |	И НЕ ОприходованиеТоваров.ПометкаУдаления
	      	 	             |	И ОприходованиеТоваров.Дата = &Дата");
	Запрос.УстановитьПараметр("Комментарий","Выравнивание остатков"); 	
	Запрос.УстановитьПараметр("Дата",НужнаяДата); 
	Рез_Опр = Запрос.Выполнить().Выгрузить();
	
	Если Рез_Опр.Количество() <>1 тогда
		Сообщить("Не найдено оприходование за эту дату!");
		Возврат;
	КонецЕсли;
	
	//проверка
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	КорректировкаРегистров.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.КорректировкаРегистров КАК КорректировкаРегистров
	      	 	             |ГДЕ
	      	 	             |	КорректировкаРегистров.Комментарий ПОДОБНО &Комментарий
	      	 	             |	И НЕ КорректировкаРегистров.ПометкаУдаления
	      	 	             |	И КорректировкаРегистров.Дата = &Дата");
	Запрос.УстановитьПараметр("Комментарий","%Выравнивание регистра ТоварыНаСкладах%"); 	
	Запрос.УстановитьПараметр("Дата",НужнаяДата); 

	Если не Запрос.Выполнить().Пустой() тогда
		Сообщить("Корректировка уже создана");
		Возврат;
	КонецЕсли;	
	

	//Списание
	НачатьТранзакцию();
	
	Корректировка				=	Документы.КорректировкаРегистров.СоздатьДокумент();
	Корректировка.Дата			= 	НужнаяДата;
	Корректировка.Комментарий 	= "Выравнивание регистра ТоварыНаСкладах на дату: "+НужнаяДата;
	Корректировка.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("Админ");
	
	Рег							= Корректировка.ТаблицаРегистров.Добавить();
	Рег.Имя 					= "ТоварыНаСкладах";
	
	запрос	=	новый запрос;
	Запрос.Текст	=	"ВЫБРАТЬ
	            	 	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	            	 	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	            	 	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	            	 	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
	            	 	|ИЗ
	            	 	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&дата, ) КАК ТоварыНаСкладахОстатки";

	Запрос.УстановитьПараметр("Дата",НужнаяДата);

	Рез	=	Запрос.Выполнить().Выгрузить();
	
	Ном	=	0;
	Для каждого строка из Рез цикл
		Ном=Ном+1;		
				
		СтрокаРег	=	Корректировка.Движения.ТоварыНаСкладах.Добавить();
		
		СтрокаРег.Регистратор	=	Корректировка;
		СтрокаРег.ВидДвижения	=	ВидДвиженияНакопления.Расход;	
		СтрокаРег.Активность	=	Истина;
		СтрокаРег.Период		=	НужнаяДата;
		
		ЗаполнитьЗначенияСвойств(СтрокаРег,Строка); 		
	КонецЦикла; 	

	//Оприходование
	Если Рез_Опр[0].Ссылка.Проведен тогда
		Об = Рез_Опр[0].Ссылка.ПолучитьОбъект();
		Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли; 

	Для каждого строка из Рез_Опр[0].Ссылка.Товары цикл  				
		СтрокаРег	=	Корректировка.Движения.ТоварыНаСкладах.Добавить();
		
		СтрокаРег.Регистратор	=	Корректировка;
		СтрокаРег.ВидДвижения	=	ВидДвиженияНакопления.Приход;	
		СтрокаРег.Активность	=	Истина;
		СтрокаРег.Период		=	НужнаяДата;
		СтрокаРег.Склад			=	Рез_Опр[0].Ссылка.Склад;
		
		ЗаполнитьЗначенияСвойств(СтрокаРег,Строка); 		
	КонецЦикла;

	Корректировка.Записать(); 		
	Сообщить("Записана корректировка "+Корректировка);
	
	ЗафиксироватьТранзакцию();	
КонецПроцедуры

Процедура ОтправкаДанныхОЗаявкахМагазина(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ДанныеПоЗаявкамМагазинов.Документ КАК Документ,
	      	 	             |	ТБК_ДанныеПоЗаявкамМагазинов.Экспедитор КАК Экспедитор,
	      	 	             |	ТБК_ДанныеПоЗаявкамМагазинов.Товары КАК Товары
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_ДанныеПоЗаявкамМагазинов КАК ТБК_ДанныеПоЗаявкамМагазинов
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ДанныеПоЗаявкамМагазинов.Отправлен");

	Структура = Новый Структура;
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();

	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Номер",Строка(Строка.Документ.Номер));
		эл.Вставить("Дата",Строка(Строка.Документ.Дата));
		эл.Вставить("Магазин",Строка(Строка.Документ.Магазин));
		эл.Вставить("ВидОперации",Строка(Строка.Документ.ВидОперации));
		эл.Вставить("Комментарий",Строка(Строка.Документ.Комментарий));
		эл.Вставить("ПричинаЗаявкиНаПоступление",Строка(Строка.Документ.ПричинаЗаявкиНаПоступление));
		эл.Вставить("Продавец",Строка(Строка.Документ.Продавец));
		эл.Вставить("Экспедитор",Строка(Строка.Документ.Экспедитор));
		эл.Вставить("Проект",Строка(Строка.Документ.Проект));
		эл.Вставить("КогдаЗабрали",Строка(Строка.Документ.КогдаЗабрали));
		эл.Вставить("Статус",Строка(Строка.Документ.Статус));
		эл.Вставить("ДатаСборкиФакт",Строка(Строка.Документ.ДатаСборкиФакт)); 		
		
		//Данные		=	Строка.Товары.Получить();
		//Для каждого СтрокаДанные из Данные цикл	
		НомСтр = 1;
		Для каждого СтрокаДанные из Строка.Документ.Товары цикл			
			Если СтрокаДанные.КоличествоФакт = 0 тогда
				Продолжить;
			КонецЕсли;
			
			эл.Вставить("Номенклатура"				+	Строка(НомСтр),	Строка(СтрокаДанные.Номенклатура));
			эл.Вставить("НоменклатураКод"			+	Строка(НомСтр),	Строка(СтрокаДанные.Номенклатура.Код));
			эл.Вставить("Характеристика"			+	Строка(НомСтр),	Строка(СтрокаДанные.Характеристика));
			эл.Вставить("Количество"				+	Строка(НомСтр),	Строка(СтрокаДанные.КоличествоФакт)); 
			эл.Вставить("СрокГодности"				+	Строка(НомСтр),	Строка(СтрокаДанные.СрокГодности));
			
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	Если Рез.Количество() >0 тогда
		JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
		
		Ответ	=	Прокси.writerequests(JS);
		
		Если Ответ тогда
			Для каждого Строка из рез цикл
				рег = РегистрыСведений.ТБК_ДанныеПоЗаявкамМагазинов.СоздатьНаборЗаписей();
				рег.Отбор.Документ.Установить(Строка.Документ);
				
				НоваяСтрока	=	Рег.добавить();  
				НоваяСтрока.ОТправлен	 			=  истина;
				НоваяСтрока.Документ 				=  Строка.Документ;
				НоваяСтрока.Экспедитор 				=  Строка.Экспедитор;
				НоваяСтрока.Товары					=  Строка.Товары; 
				
				рег.Записать();	
				
				Если не (Строка.Документ.Статус	=	"Собран" или Строка.Документ.Статус	=	"Собирать") тогда
					Об = Строка.Документ.ПолучитьОбъект();
					Об.Статус	=	"В работе";
					об.записать();
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;  
	КонецЕсли;

	
	//Обрабатываем ЗАЯВКИ "в работе"
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ЗаявкаОтМагазина.Ссылка КАК Документ
	      	 	             |ИЗ
	      	 	             |	Документ.ТБК_ЗаявкаОтМагазина КАК ТБК_ЗаявкаОтМагазина
	      	 	             |ГДЕ
	      	 	             |	ТБК_ЗаявкаОтМагазина.Проведен
	      	 	             |	И (ТБК_ЗаявкаОтМагазина.Статус = &Статус
	      	 	             |			ИЛИ ТБК_ЗаявкаОтМагазина.Статус = &Статус1)
	      	 	             |	И ТБК_ЗаявкаОтМагазина.ВидОперации = &ВидОперации");
	Запрос.УстановитьПараметр("Статус","В работе");
	Запрос.УстановитьПараметр("Статус1","");
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.ТБК_ВидыОперацийЗаявокОтМагазина.ВозвратТовара);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Структура 		= Новый Структура;	
	МассивВозврата	=	Новый Массив;
	
	Если Рез.Количество() = 0 тогда возврат КонецЕсли;
	
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Номер",Строка(Строка.Документ.Номер));
		эл.Вставить("Дата",Строка(Строка.Документ.Дата));		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
	
	ОтветJS	=	Прокси.getrequests(JS);
	
	МассивПринятый	=	ОбщегоНазначения.jsonВСтруктура_Общая(ОтветJS);
	
	Для каждого Строка из МассивПринятый цикл 

		НомерДокумента		=	Строка.Номер;
		ДатаДокумента		=	ОбщегоНазначения.РазобратьДату(Строка.дата); 
		ДокументЗаявка		=	Документы.ТБК_ЗаявкаОтМагазина.НайтиПоНомеру(НомерДокумента,ДатаДокумента);
		
		Если ДокументЗаявка.Пустая() тогда 
			Продолжить; 
		КонецЕсли;
		
		Об	=	ДокументЗаявка.ПолучитьОбъект();
		Если Строка.Статус <>"" тогда 
			Об.Статус				=	Строка.Статус; 
		КонецЕсли;
		Об.ПричинаОтказа		=	Строка.Причина;
		Об.ПризнакОбновление	=	0;
		Об.Записать();   		
	КонецЦикла;


	
КонецПроцедуры

Процедура ОтправкаДанныхИсторияПокупок(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ИсторияПокупокРозница.IDКлиента КАК IDКлиента,
	      	 	             |	ТБК_ИсторияПокупокРозница.Чек КАК Чек,
	      	 	             |	ТБК_ИсторияПокупокРозница.Отправлен КАК Отправлен,
	      	 	             |	ТБК_ИсторияПокупокРозница.Дата КАК Дата,
	      	 	             |	ТБК_ИсторияПокупокРозница.Товары КАК Товары,
	      	 	             |	ТБК_ИсторияПокупокРозница.Сумма КАК Сумма,
	      	 	             |	ТБК_ИсторияПокупокРозница.ВидОперации КАК ВидОперации,
	      	 	             |	ТБК_ИсторияПокупокРозница.КоличествоНачисленныхБаллов КАК КоличествоНачисленныхБаллов
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_ИсторияПокупокРозница КАК ТБК_ИсторияПокупокРозница
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ИсторияПокупокРозница.Отправлен");

	Структура = Новый Структура;
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 тогда возврат КонецЕсли;
	
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Чек",СокрЛП(Строка(Строка.Чек)));	
		эл.Вставить("СуммаЧека",Строка(Строка.Сумма));		
		эл.Вставить("IDКлиента",СокрЛП(Строка.IDКлиента));
		эл.Вставить("Дата",Строка(Строка.Дата));
		эл.Вставить("Магазин",Строка(Строка.Чек.Магазин));
		эл.Вставить("ВидОперации",Строка(Строка.ВидОперации));
		эл.Вставить("КоличествоНачисленныхБаллов",Строка(Строка.КоличествоНачисленныхБаллов));

		Данные		=	Строка.Товары.Получить();
		Для каждого СтрокаДанные из Данные цикл			
			эл.Вставить("Номенклатура"				+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура));
			эл.Вставить("НоменклатураКод"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура.Код));
			эл.Вставить("Характеристика"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Характеристика));
			эл.Вставить("КоличествоУпаковок"		+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.КоличествоУпаковок)); 			
		КонецЦикла;

		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);

	Ответ	=	Прокси.writehistorysales(JS);
	
	Если Ответ тогда
		Для каждого Строка из рез цикл 
			рег = РегистрыСведений.ТБК_ИсторияПокупокРозница.СоздатьНаборЗаписей();
			рег.Отбор.Чек.Установить(Строка.Чек); 
			рег.Отбор.IDКлиента.Установить(Строка.IDКлиента);
			рег.Прочитать();
			Рег[0].Отправлен	= Истина;			
			рег.Записать();		
		КонецЦикла;
	КонецЕсли;  
	//Сообщить(Ответ);	
КонецПроцедуры

Процедура ОтправкаДанныхИсторияПокупок_Самосейл(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ИсторияПокупокSamosale.Чек КАК Чек,
	      	 	             |	ТБК_ИсторияПокупокSamosale.Отправлен КАК Отправлен,
	      	 	             |	ТБК_ИсторияПокупокSamosale.Дата КАК Дата,
	      	 	             |	ТБК_ИсторияПокупокSamosale.Товары КАК Товары,
	      	 	             |	ТБК_ИсторияПокупокSamosale.Сумма КАК Сумма,
	      	 	             |	ТБК_ИсторияПокупокSamosale.ВидОперации КАК ВидОперации,
	      	 	             |	ТБК_ИсторияПокупокSamosale.Samosale_НомерТелефона КАК Samosale_НомерТелефона,
	      	 	             |	ТБК_ИсторияПокупокSamosale.СписаноБаллов КАК СписаноБаллов
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_ИсторияПокупокSamosale КАК ТБК_ИсторияПокупокSamosale
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ИсторияПокупокSamosale.Отправлен");

	Структура = Новый Структура;
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 тогда возврат КонецЕсли;
	
	Для каждого Строка из рез цикл
		Если СокрЛП(Строка.Samosale_НомерТелефона) = "0" тогда Продолжить; КонецЕсли;
		
		эл	=	Новый Структура;
		эл.Вставить("Чек",СокрЛП(Строка(Строка.Чек)));	
		эл.Вставить("СуммаЧека",Строка(Строка.Сумма));		
		эл.Вставить("Samosale_НомерТелефона",СокрЛП(Строка.Samosale_НомерТелефона));
		эл.Вставить("Дата",Строка(Строка.Дата));
		эл.Вставить("Магазин",Строка(Строка.Чек.Магазин));
		эл.Вставить("ВидОперации",Строка(Строка.ВидОперации));
		эл.Вставить("СписаноБаллов",Строка(Строка.СписаноБаллов));

		Данные		=	Строка.Товары.Получить();
		Для каждого СтрокаДанные из Данные цикл			
			эл.Вставить("Номенклатура"				+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура));
			эл.Вставить("НоменклатураКод"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура.Код));
			эл.Вставить("Характеристика"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Характеристика));
			эл.Вставить("КоличествоУпаковок"		+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.КоличествоУпаковок)); 			
		КонецЦикла;

		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);

	Ответ	=	Прокси.samosale_writesales(JS);
	
	Если Ответ тогда
		Для каждого Строка из рез цикл 
			рег = РегистрыСведений.ТБК_ИсторияПокупокSamosale.СоздатьНаборЗаписей();
			рег.Отбор.Чек.Установить(Строка.Чек); 
			рег.Отбор.Samosale_НомерТелефона.Установить(Строка.Samosale_НомерТелефона);
			рег.Прочитать();
			Рег[0].Отправлен	= Истина;			
			рег.Записать();		
		КонецЦикла;
	КонецЕсли;  
	//Сообщить(Ответ);	
КонецПроцедуры


//Самомейлс +++
Процедура ТБКНачислитьБаллыПослеНаСервере(СуммаБаллов, ИмяАкции = "" , ТекстСообщения = "", Токен = "", Samosale_НомерТелефона)
		
	Если Samosale_НомерТелефона = 0 Тогда Возврат КонецЕсли;

	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
	ЗаголовокЗапросаHTTP = Новый Соответствие();
	ЗаголовокЗапросаHTTP.Вставить("Authorization", "Bearer "+Токен);
	Запрос = Новый HTTPЗапрос("api/cash-box/search?value="+Samosale_НомерТелефона+"&type=phone",ЗаголовокЗапросаHTTP);
	Результат = Соединение.Получить(Запрос);
	Если Результат.КодСостояния = 200 Тогда
		
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
		Структура = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
		Чтение.Закрыть();
		Если Структура.status <> "not found" Тогда
			
			айдиклиента = Структура.client.id;
			
			ssl = Новый ЗащищенноеСоединениеOpenSSL();
			Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Authorization", "Bearer "+Токен);
			Заголовки.Вставить("Content-Type", "application/json");
			Запрос = Новый HTTPЗапрос("api/cash-box/change-bonus-balance", Заголовки);
			
			СтруктураДляJSON = Новый Структура;
		    СтруктураДляJSON.Вставить("clientId", айдиклиента); 				
			СтруктураДляJSON.Вставить("bonusSum", СуммаБаллов);	
			СтруктураДляJSON.Вставить("description", Строка(ИмяАкции));
			
			Если ТекстСообщения <> "" тогда
				СтруктураУведомление = Новый Структура;
				СтруктураУведомление.Вставить("hasNotify",Истина);
				СтруктураУведомление.Вставить("message",ТекстСообщения);
				СтруктураДляJSON.Вставить("notify",СтруктураУведомление);
			КонецЕсли;


			Запись = Новый ЗаписьJSON;
		    Запись.УстановитьСтроку();
		    ЗаписатьJSON(Запись,СтруктураДляJSON);
		    ТелоЗапроса = Запись.Закрыть();
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
			ОтветПречек = Соединение.ОтправитьДляОбработки(Запрос);
			
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(ОтветПречек.ПолучитьТелоКакСтроку());
			СтруктураПречек = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);
			Чтение.Закрыть();

			Если ОтветПречек.КодСостояния <> 200 Тогда				
				Рег = РегистрыСведений.ТБК_SamosaleДопБаллы.СоздатьМенеджерЗаписи();		
			    Рег.Телефон = Samosale_НомерТелефона;
				Рег.СуммаБаллов = СуммаБаллов;
				рег.ИмяАкции = ИмяАкции;
				Рег.ТекстСообщения = ТекстСообщения;
				Рег.Записать();
			КонецЕсли;
			
		КонецЕсли;			
	КонецЕсли;


КонецПроцедуры

Процедура ОтправитьЧек_samosale()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТБК_ИсторияПокупокSamosaleЧекиОфлаин.Чек КАК ПробитыйЧек,
	                      |	ТБК_ИсторияПокупокSamosaleЧекиОфлаин.Отправлен КАК Отправлен,
	                      |	ТБК_ИсторияПокупокSamosaleЧекиОфлаин.Samosale_НомерТелефона КАК Телефон,
	                      |	ТБК_ИсторияПокупокSamosaleЧекиОфлаин.АкцияУтилизация КАК АкцияУтилизация,
	                      |	ТБК_ИсторияПокупокSamosaleЧекиОфлаин.JsonДляСтруктуры КАК JsonДляСтруктуры,
	                      |	ТБК_ИсторияПокупокSamosaleЧекиОфлаин.Промокод КАК Samosale_Промокод
	                      |ИЗ
	                      |	РегистрСведений.ТБК_ИсторияПокупокSamosaleЧекиОфлаин КАК ТБК_ИсторияПокупокSamosaleЧекиОфлаин
	                      |ГДЕ
	                      |	НЕ ТБК_ИсторияПокупокSamosaleЧекиОфлаин.Отправлен");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Токен = ОбщегоНазначения.ПолучитьМагазин().Расш_SamosaleApiКлюч;
	
	Пока Выборка.Следующий() Цикл
		СтруктураДляJSON = ОбщегоНазначения.jsonВСтруктура_Общая(Выборка.JsonДляСтруктуры);
		
		Попытка                                       
			Если Выборка.ПробитыйЧек.АналитикаХозяйственнойОперации.Наименование = "Возврат от покупателя" Тогда
				внешид = Выборка.ПробитыйЧек.ЧекККМПродажа.УникальныйИдентификаторПлатежа;
				ssl = Новый ЗащищенноеСоединениеOpenSSL();
				Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);	
				Заголовки = Новый Соответствие;
				Заголовки.Вставить("Authorization", "Bearer "+Токен);
				Заголовки.Вставить("Content-Type", "application/json");
				ЗапросПоиск = Новый HTTPЗапрос("api/cash-box/get-payment-receipt?extId="+внешид, Заголовки);
				Результат = Соединение.Получить(ЗапросПоиск);
				Если Результат.КодСостояния = 200 Тогда
					Чтение = Новый ЧтениеJSON;
					Чтение.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
					Структура = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
					Чтение.Закрыть();
					Попытка
						totalBonusOutlay = Структура.totalBonusOutlay;
						totalBonusReward = Структура.totalBonusReward;
					Исключение
						Сообщить("В системе Samosale не найден чек.");
						Возврат;
					КонецПопытки;
					
					Запрос = Новый HTTPЗапрос("api/cash-box/create-refund", Заголовки);
					Результат = Соединение.Получить(Запрос);
					
					СтруктураДляJSON = Новый Структура;
					СтруктураДляJSON.Вставить("id", Структура.id);
					
					СтруктураМагазин = Новый Структура;
					СтруктураМагазин.Вставить("uid",Выборка.ПробитыйЧек.ЧекККМПродажа.Магазин.Код);
					СтруктураМагазин.Вставить("name",Выборка.ПробитыйЧек.ЧекККМПродажа.Магазин.Наименование);
					СтруктураДляJSON.Вставить("shop",СтруктураМагазин);     
					
					
					Если Выборка.ПробитыйЧек.Продавец.Наименование = "" Тогда
						СтруктураПродавец = Новый Структура;
						СтруктураПродавец.Вставить("uid","Продавец");
						СтруктураПродавец.Вставить("name","Продавец");
						СтруктураДляJSON.Вставить("cashier",СтруктураПродавец);	
					Иначе
						СтруктураПродавец = Новый Структура;
						СтруктураПродавец.Вставить("uid",Выборка.ПробитыйЧек.Продавец.Наименование);
						СтруктураПродавец.Вставить("name",Выборка.ПробитыйЧек.Продавец.Наименование);
						СтруктураДляJSON.Вставить("cashier",СтруктураПродавец);
					КонецЕсли;
					
					ТекГод = Строка(Формат(ТекущаяДата(),"ДФ=гггг"));
					ТекМесяц= Строка(Формат(ТекущаяДата(),"ДФ=ММ"));
					ТекДень = Строка(Формат(ТекущаяДата(),"ДФ=дд"));
					ТекЧас = Строка(Формат(ТекущаяДата(),"ДФ=ЧЧ"));
					ТекМинута = Строка(Формат(ТекущаяДата(),"ДФ=мм"));
					ТекСекунда = Строка(Формат(ТекущаяДата(),"ДФ=сс"));
					СтруктураДляJSON.Вставить("commitAt", ТекГод+"-"+ТекМесяц+"-"+ТекДень + " "+ ТекЧас + ":" + ТекМинута + ":"+ ТекСекунда + "+03:00");
					
					ОбщееКоличество = 0;
					ОбщаяСумма = 0;
					ОбщаяРучнаяСкидка = 0;
					ВыходнойМассив = Новый Массив;
					Для Каждого стр Из Выборка.ПробитыйЧек.Товары Цикл
						СтруктураТовары = Новый Структура("extId,title,price");
						СтруктураТовары.extId = Строка(Прав(стр.Номенклатура.Код,6));
						СтруктураТовары.title = стр.Номенклатура.НаименованиеПолное;
						СтруктураТовары.price = стр.Цена;
						
						ОбщееКоличество = ОбщееКоличество + стр.Количество;
						ОбщаяСумма = ОбщаяСумма + стр.Сумма;
						ОбщаяРучнаяСкидка = ОбщаяРучнаяСкидка + стр.СуммаАвтоматическойСкидки + стр.СуммаРучнойСкидки;
						
						СтруктураМассивТЧ = Новый Структура("product");
						СтруктураМассивТЧ.Вставить("product",СтруктураТовары);
						
						ВыходнаяСтруктура = Новый Структура("product,quantity");
						ВыходнаяСтруктура.Вставить("product",СтруктураТовары);
						ВыходнаяСтруктура.Вставить("quantity",стр.Количество);
						ВыходнойМассив.Добавить(ВыходнаяСтруктура);
						
						СтруктураДляJSON.Вставить("items",ВыходнойМассив);
					КонецЦикла; 
					
					Запись = Новый ЗаписьJSON;
					Запись.УстановитьСтроку();
					ЗаписатьJSON(Запись,СтруктураДляJSON);
					ТелоЗапроса = Запись.Закрыть();
					Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
					
					Ответ = Соединение.ОтправитьДляОбработки(Запрос);
					
					Чтение = Новый ЧтениеJSON;
					Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
					СтруктураПречек = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
					Чтение.Закрыть();
					
					Если Ответ.КодСостояния = 200 Тогда
						Набор = РегистрыСведений.ТБК_ИсторияПокупокSamosaleЧекиОфлаин.СоздатьНаборЗаписей();
						Набор.Отбор.Чек.Установить(Выборка.ПробитыйЧек);
						Набор.Прочитать();
						Если Набор.Выбран() Тогда
							
							Набор[0].Отправлен = Истина;
							Набор.Записать();	
							
						КонецЕсли; 
						
					иначе                                        	
						Возврат;
					КонецЕсли;
					
					Возврат;	
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			Если Выборка.Телефон <> 0 Тогда
				ssl = Новый ЗащищенноеСоединениеOpenSSL();
				Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
				//Соединение = Новый HTTPСоединение("app.samosale.ru/api/cash-box/search?value="+ЭтаФорма.Samosale_НомерТелефона+"&type=phone",443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
				ЗаголовокЗапросаHTTP = Новый Соответствие(); 
				ЗаголовокЗапросаHTTP.Вставить("Authorization", "Bearer "+Токен);
				Запрос = Новый HTTPЗапрос("api/cash-box/search?value="+Выборка.Телефон+"&type=phone",ЗаголовокЗапросаHTTP);
				Результат = Соединение.Получить(Запрос);
				Если Результат.КодСостояния = 200 Тогда
					КоличествоБонусов = 0;
					Чтение = Новый ЧтениеJSON;
					Чтение.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
					Структура = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
					Чтение.Закрыть();
					
					айдиклиента = Структура.client.id;
					Промо = Структура.promo.haspromo;
					
					ssl = Новый ЗащищенноеСоединениеOpenSSL();
					Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
					Заголовки = Новый Соответствие;
					Заголовки.Вставить("Authorization", "Bearer "+Токен);
					Заголовки.Вставить("Content-Type", "application/json");
					Запрос = Новый HTTPЗапрос("api/cash-box/create-payment", Заголовки);
					
					СтруктураДляJSON.Вставить("clientId", айдиклиента);
					Если Структура.promo.haspromo = Истина Тогда
						СтруктураДляJSON.Вставить("promoId", СокрЛП(Выборка.Samosale_Промокод));		
					КонецЕсли;
					
					Запись = Новый ЗаписьJSON;
					Запись.УстановитьСтроку();
					ЗаписатьJSON(Запись,СтруктураДляJSON);
					ТелоЗапроса = Запись.Закрыть();
					Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
					ОтветПречек = Соединение.ОтправитьДляОбработки(Запрос);
					
					Чтение = Новый ЧтениеJSON;
					Чтение.УстановитьСтроку(ОтветПречек.ПолучитьТелоКакСтроку());
					СтруктураПречек = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
					Чтение.Закрыть();
					Набор = РегистрыСведений.ТБК_ИсторияПокупокSamosaleЧекиОфлаин.СоздатьНаборЗаписей();
					
					Набор.Отбор.Чек.Установить(Выборка.ПробитыйЧек);
					Набор.Прочитать();
						
					Если ОтветПречек.КодСостояния = 200 Тогда
						
						Если Набор.Выбран() Тогда
							
							Набор[0].Отправлен = Истина;
							Набор.Записать();	
							
						КонецЕсли; 
						
					иначе                                        	
						Возврат;
					КонецЕсли;
					
					Samosale_СписываемыеБаллы = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.АкцияУтилизация тогда
				Если не Выборка.ПробитыйЧек.АналитикаХозяйственнойОперации.Наименование = "Возврат от покупателя" Тогда
					
					СуммаБонусов	=	Окр((Выборка.ПробитыйЧек.СуммаДокумента/100) * 8,0); // доп 4 процента
					ИмяАкции		=	"Акция утилизация";
					ТекстСообщения	=	"Поздравляем! Вам начислено: "+СуммаБонусов + " балла(ов) по акции Утилизация!";
					
					Телефон = "+7"+Формат(Выборка.Телефон,"ЧГ=0"); 
					ТБКНачислитьБаллыПослеНаСервере(СуммаБонусов, ИмяАкции, ТекстСообщения, Телефон, Токен);
				КонецЕсли;
			КонецЕсли;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось отправить чек в Samosale. Чек: " + Строка(Выборка.ПробитыйЧек) + ". Причина: " + ОписаниеОшибки();
			Сообщение.Сообщить(); 
		КонецПопытки;
		
	КонецЦикла; 

КонецПроцедуры

Процедура SamosaleДопБаллыНачислениеДопБалов()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТБК_SamosaleДопБаллы.Телефон КАК Телефон,
	                      |	ТБК_SamosaleДопБаллы.ИмяАкции КАК ИмяАкции,
	                      |	ТБК_SamosaleДопБаллы.Начислено КАК Начислено,
	                      |	ТБК_SamosaleДопБаллы.СуммаБаллов КАК СуммаБаллов,
	                      |	ТБК_SamosaleДопБаллы.ТекстСообщения КАК ТекстСообщения
	                      |ИЗ
	                      |	РегистрСведений.ТБК_SamosaleДопБаллы КАК ТБК_SamosaleДопБаллы
	                      |ГДЕ
	                      |	НЕ ТБК_SamosaleДопБаллы.Начислено");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Токен = ОбщегоНазначения.ПолучитьМагазин().Расш_SamosaleApiКлюч;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Телефон = 0 Тогда Возврат КонецЕсли;
				
		ssl = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
		//Соединение = Новый HTTPСоединение("app.samosale.ru/api/cash-box/search?value="+ЭтаФорма.Samosale_НомерТелефона+"&type=phone",443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		ЗаголовокЗапросаHTTP = Новый Соответствие();
		ЗаголовокЗапросаHTTP.Вставить("Authorization", "Bearer "+Токен);
		Запрос = Новый HTTPЗапрос("api/cash-box/search?value="+Выборка.Телефон+"&type=phone",ЗаголовокЗапросаHTTP);
		Результат = Соединение.Получить(Запрос);
		Если Результат.КодСостояния = 200 Тогда
			
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
			Структура = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);	
			Чтение.Закрыть();
			Если Структура.status <> "not found" Тогда
				
				айдиклиента = Структура.client.id;
				
				ssl = Новый ЗащищенноеСоединениеOpenSSL();
				Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);
				Заголовки = Новый Соответствие;
				Заголовки.Вставить("Authorization", "Bearer "+Токен);
				Заголовки.Вставить("Content-Type", "application/json");
				Запрос = Новый HTTPЗапрос("api/cash-box/change-bonus-balance", Заголовки);
				
				СтруктураДляJSON = Новый Структура;
				СтруктураДляJSON.Вставить("clientId", айдиклиента); 				
				СтруктураДляJSON.Вставить("bonusSum", Выборка.СуммаБаллов);	
				СтруктураДляJSON.Вставить("description", Строка(Выборка.ИмяАкции));
				
				Если Строка(Выборка.ТекстСообщения) <> "" тогда
					СтруктураУведомление = Новый Структура;
					СтруктураУведомление.Вставить("hasNotify",Истина);
					СтруктураУведомление.Вставить("message", Строка(Выборка.ТекстСообщения));
					СтруктураДляJSON.Вставить("notify",СтруктураУведомление);
				КонецЕсли;
				
				
				Запись = Новый ЗаписьJSON;
				Запись.УстановитьСтроку();
				ЗаписатьJSON(Запись,СтруктураДляJSON);
				ТелоЗапроса = Запись.Закрыть();
				Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
				ОтветПречек = Соединение.ОтправитьДляОбработки(Запрос);
				
				Чтение = Новый ЧтениеJSON;
				Чтение.УстановитьСтроку(ОтветПречек.ПолучитьТелоКакСтроку());
				СтруктураПречек = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);
				
				Если ОтветПречек.КодСостояния = 200 Тогда
					Набор = РегистрыСведений.ТБК_SamosaleДопБаллы.СоздатьНаборЗаписей();
					Набор.Отбор.ИмяАкции.Установить(Строка(Выборка.ИмяАкции));
					Набор.Отбор.Телефон.Установить(Выборка.Телефон);
					Набор.Прочитать();
					Если Набор.Выбран() Тогда
						
						Набор[0].Начислено = Истина;
						Набор.Записать();	
						
					КонецЕсли; 
					
				Иначе
					Возврат;
				КонецЕсли;
				
				Чтение.Закрыть();			
			КонецЕсли;			
		КонецЕсли; 	
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗарегестрироватьКлиентов_samosale() //Марк 2023-11-21
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТБКРегистрацияКлиентов.Телефон КАК Телефон,
	                      |	ТБКРегистрацияКлиентов.Имя КАК Имя,
	                      |	ТБКРегистрацияКлиентов.ДатаРождения КАК ДатаРождения
	                      |ИЗ
	                      |	РегистрСведений.ТБКРегистрацияКлиентов КАК ТБКРегистрацияКлиентов
	                      |ГДЕ
	                      |	НЕ ТБКРегистрацияКлиентов.Зарегестрирован");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Токен = ОбщегоНазначения.ПолучитьМагазин().Расш_SamosaleApiКлюч;
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ssl = Новый ЗащищенноеСоединениеOpenSSL();
			Соединение = Новый HTTPСоединение("app.samosale.ru",443,,,,,ssl);	  
			
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Authorization", "Bearer " + Токен);
			Заголовки.Вставить("Content-Type", "application/json");
			
			Запрос = Новый HTTPЗапрос("api/cash-box/create-client", Заголовки);
			
			
			СтруктураДляJSON = Новый Структура;
			СтруктураДляJSON.Вставить("phone", 		СокрЛП(Выборка.Телефон));
			
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись,СтруктураДляJSON);
			ТелоЗапроса = Запись.Закрыть();
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
			
			Результат = Соединение.ОтправитьДляОбработки(Запрос);
			
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(Результат.ПолучитьТелоКакСтроку());
			СтруктураПречек = ОбщегоНазначенияВызовСервера.ЗаполнитьСтруктуруИзОтветаJSON(Чтение);
			Чтение.Закрыть();
			
			Набор = РегистрыСведений.ТБКРегистрацияКлиентов.СоздатьНаборЗаписей();
			Набор.Отбор.Телефон.Установить(Выборка.Телефон); 		
			Набор.Прочитать();

			
			Если СтруктураПречек.Свойство("message") Тогда
				
				Если СтрНайти(СтруктураПречек.message, "Телефон» уже занято") Тогда
					если Набор.Выбран() Тогда
						Набор[0].Зарегестрирован = Истина;
						Набор.Записать();
					КонецЕсли;
				КонецЕсли;	
				
			КонецЕсли; 
			
			Если Результат.КодСостояния = 200 Тогда
				если Набор.Выбран() Тогда
					Набор[0].Зарегестрирован = Истина;
					Набор.Записать();
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			Сообщить("ошибка " + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
КонецПроцедуры

Процедура ОтправитьИнформациюО_Бонусах(Прокси)
	
	МассивОтправляемыхДанных = Новый Массив;
	
	Запрос = Новый запрос("ВЫБРАТЬ
	                      |	ТБК_SamosaleДопБаллы.Телефон КАК Телефон,
	                      |	ТБК_SamosaleДопБаллы.ИмяАкции КАК ИмяАкции,
	                      |	ТБК_SamosaleДопБаллы.Чек КАК Чек,
	                      |	ТБК_SamosaleДопБаллы.СуммаБаллов КАК СуммаБаллов,
	                      |	ТБК_SamosaleДопБаллы.Дата КАК Дата
	                      |ИЗ
	                      |	РегистрСведений.ТБК_SamosaleДопБаллы КАК ТБК_SamosaleДопБаллы
	                      |ГДЕ
	                      |	НЕ ТБК_SamosaleДопБаллы.ОтправленВ_УТ
	                      |	И ТБК_SamosaleДопБаллы.Начислено");
	ТЗ = Запрос.Выполнить().Выгрузить();
	Магазин = ОбщегоНазначения.ПолучитьМагазин();
	для каждого СтрокаТЗ из ТЗ Цикл
		СтруктуаЗначения = Новый Структура(); 				
		
		СтруктуаЗначения.Вставить("Телефон", Строка(СтрокаТЗ.Телефон));
		СтруктуаЗначения.Вставить("ИмяАкции", Строка(СтрокаТЗ.ИмяАкции));
		СтруктуаЗначения.Вставить("Чек", Строка(СтрокаТЗ.Чек));
		СтруктуаЗначения.Вставить("СуммаБаллов", Строка(СтрокаТЗ.СуммаБаллов));
		СтруктуаЗначения.Вставить("Магазин", Строка(Магазин));
		СтруктуаЗначения.Вставить("Дата", Строка(СтрокаТЗ.Дата));
		
		МассивОтправляемыхДанных.Добавить(СтруктуаЗначения);
		
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивОтправляемыхДанных);
	
	Ответ = Прокси.SamosaleAdditionalPoints(JS);
	Если Ответ Тогда
		для каждого СтрокаТЗ из ТЗ Цикл
			Набор = РегистрыСведений.ТБК_SamosaleДопБаллы.СоздатьНаборЗаписей();
			Набор.Отбор.Телефон.Установить(СтрокаТЗ.Телефон);
			Набор.Отбор.ИмяАкции.Установить(СтрокаТЗ.ИмяАкции);
			Если НЕ СтрокаТЗ.Чек.Пустая() Тогда
				Набор.Отбор.Чек.Установить(СтрокаТЗ.Чек);	
			КонецЕсли;
			Набор.Прочитать();
			Для каждого Строка Из Набор Цикл
				Строка.ОтправленВ_УТ = Истина;				
			КонецЦикла;
			Набор.Записать();
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
//Самомейлс ---
