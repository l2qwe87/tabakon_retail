Функция УдалитьФункциюПослеСтартаВсехМагазов()
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ПрименениеЦенНоменклатуры.Ссылка КАК Ссылка
	             |ИЗ
	             |	Документ.ПрименениеЦенНоменклатуры КАК ПрименениеЦенНоменклатуры
	             |ГДЕ
	             |	ПрименениеЦенНоменклатуры.Номер ПОДОБНО ""%-00000001""";
	
	мДоки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	планы = ПланыОбмена.ОбменРозницаУправлениеТорговлей103.Выбрать();
	Пока планы.Следующий() Цикл
		Если планы.НомерПринятого > 0 Тогда
			Для Каждого Док из мДоки Цикл
				ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Док);
			КонецЦикла;
		КонецЕсли;
	Конеццикла;
КонецФункции

Процедура ВыполнитьОбмен() ЭКСПОРТ
	
	///!!!!!!!!!!!!!!!!!!!
	УдалитьФункциюПослеСтартаВсехМагазов();
	///!!!!!!!!!!!!!!!!!!!
	
	планы = ПланыОбмена.ОбменРозницаУправлениеТорговлей103.Выбрать();
	Пока планы.Следующий() Цикл
		Если планы.НомерПринятого > 0 Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.РегистрыСведений.Штрихкоды);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.Номенклатура);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.ХарактеристикиНоменклатуры);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.УпаковкиНоменклатуры);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.Магазины);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.ПланыВидовХарактеристик.ТипыШтрихкодов);
			
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.ФизическиеЛица);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.Пользователи);
			
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.Организации);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.Кассы);
			//ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.КассыККМ);
			
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Справочники.ВидыНоменклатуры);
			ПланыОбмена.УдалитьРегистрациюИзменений(планы.Ссылка ,Метаданные.Документы.ПеремещениеТоваров);
		КонецЕсли;
	Конеццикла;
	
	сценарии = Справочники.СценарииОбменовДанными.Выбрать();
	Пока сценарии.Следующий() Цикл  
		Отказ = ложь;
		ОбменДаннымиСервер.ВыполнитьОбменДаннымиПоСценариюОбменаДанными(Отказ, сценарии.Ссылка);
	КонецЦикла;	
	РегистрыСведений.ТБК_Штрихкоды.СинхронизацияШтрихкодов();

	
	//СнятьФлагиОрдернойСхемы(); //коммент от 2020_12_23. Все магазины переведены на ордерную схему
	
	ТБК_Номенклатура.Установить_ОсобенностьУчетаДля_ТабачнаяПродукция();
	
	РегистрыСведений.Штрихкоды.ОбработатьТипыШтрихкодов();	
	РегистрыСведений.Штрихкоды.ЧисткаШтрихкодов();
	
	ВыполнитьЗадачиПоВебСервису();	
	
	Справочники.ФизическиеЛица.ГенерацияЮзеровДляФЛ();
	Справочники.ФизическиеЛица.ПроверкаФИО();

КонецПроцедуры


Функция СнятьФлагиОрдернойСхемы()
	МассивСкладовПоОрдернойСхеме = ПолучитьМассивСкладовПоОрдернойСхеме();
	
	Запрос = Новый Запрос;
	ЗАпрос.Текст = "ВЫБРАТЬ
	               |	магазины.Ссылка КАК Ссылка,
				   |	магазины.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Магазины КАК магазины ГДЕ ИспользоватьОрдернуюСхемуПриПеремещении";
	
	Рез = Запрос.Выполнить().Выбрать();
	Пока Рез.Следующий() Цикл
		Если ЛОЖЬ Тогда Рез = Справочники.Магазины.ПустаяСсылка(); КонецЕсли;
		
		Если МассивСкладовПоОрдернойСхеме.Найти(нрег(рез.Наименование)) <> Неопределено тогда Продолжить КонецЕсли;
		
		об = Рез.Ссылка.ПолучитьОбъект();
		об.ИспользоватьОрдернуюСхемуПриПеремещении = ЛОЖЬ;
		об.ОбменДанными.Загрузка=Истина;
		об.Записать();
	КонецЦикла;
КонецФункции 

Функция ПолучитьМассивСкладовПоОрдернойСхеме()
	Массив = Новый Массив;
	Массив.Добавить(нрег("Интернет Магазин"));
	Массив.Добавить(нрег("Ленинский"));
	Массив.Добавить(нрег("БалканскаяПлПДВ"));
	Массив.Добавить(нрег("ГулливерСДП"));
	Массив.Добавить(нрег("ФиолентСДП"));
	Массив.Добавить(нрег("МиксерПДВ"));
	Массив.Добавить(нрег("Галерея1814СДП"));
	Массив.Добавить(нрег("Ленинский2ПДВ"));
	Массив.Добавить(нрег("Балкания Север"));
	Массив.Добавить(нрег("ДевяткиноПДВ"));
	
	//второй эшалон
	Массив.Добавить(нрег("Osinka"));
	Массив.Добавить(нрег("БайконурскийЛАФ"));
	Массив.Добавить(нрег("Бухарестская д.89"));
	Массив.Добавить(нрег("ДумскаяКИВ"));
	Массив.Добавить(нрег("Ларина15ПДВ"));
	Массив.Добавить(нрег("Линия7КИВ"));
	Массив.Добавить(нрег("ОКЕЙВТЕ"));
	Массив.Добавить(нрег("Смайл ТК"));
	Массив.Добавить(нрег("ТуканТК"));
	Массив.Добавить(нрег("Финляндский вокзал"));
	Массив.Добавить(нрег("Черная речка 1")); 
	
	//третий эшалон
	Массив.Добавить(нрег("БалканыРивГош2ЛИГ"));
	Массив.Добавить(нрег("Гашека5ПДВ"));
	Массив.Добавить(нрег("Димитрова11ПДВ"));
	Массив.Добавить(нрег("ДимитроваПДВ"));
	Массив.Добавить(нрег("Звездная2ПДВ"));
	Массив.Добавить(нрег("ЗвезднаяСЮБ"));
	Массив.Добавить(нрег("РадугаСЮБ"));
	Массив.Добавить(нрег("Универсам Южный"));
	Массив.Добавить(нрег("АтмосфераПДВ"));
	Массив.Добавить(нрег("КамышоваяПДВ"));
	Массив.Добавить(нрег("Кушелевская1ПДВ")); 	
	Массив.Добавить(нрег("Лесная"));
	Массив.Добавить(нрег("МеркурийСМА"));
	Массив.Добавить(нрег("МонпансьеБЮА")); 
	Массив.Добавить(нрег("ОкейБогатырскийПАО"));
	Массив.Добавить(нрег("Питерлэнд ТРЦ"));
	Массив.Добавить(нрег("ПятьОзёрВЛГ")); 
	
	//четвертый эшалон
	Массив.Добавить(нрег("БухарестскаяМВГ"));
	Массив.Добавить(нрег("ГатчинаКубусМВГ"));
	Массив.Добавить(нрег("ГринПаркПДВ"));
	Массив.Добавить(нрег("КировскСЮБ"));
	Массив.Добавить(нрег("КолпиноЛентаВЛГ"));
	Массив.Добавить(нрег("КолпиноМеркурийВЛГ"));
	Массив.Добавить(нрег("КолпиноОкейВЛГ"));
	Массив.Добавить(нрег("ЛиговВАА"));
	Массив.Добавить(нрег("ЛомоносовЛентаПАО"));
	Массив.Добавить(нрег("МеждународнаяМВС"));
	Массив.Добавить(нрег("МорозовапосГАМ")); 	
	Массив.Добавить(нрег("Москва Форт"));
	Массив.Добавить(нрег("МоскваКрасныйКитБОК"));
	Массив.Добавить(нрег("МоскваПринцПлазаБОК")); 
	Массив.Добавить(нрег("МоскваЯсеневоБДЮ"));
	Массив.Добавить(нрег("МосковскаяМВГ"));
	Массив.Добавить(нрег("ПаркПобедыМВС"));
	Массив.Добавить(нрег("РиоБЮА"));
	Массив.Добавить(нрег("Рыбацкое Находка"));
	Массив.Добавить(нрег("РыбацкоеПарадМВС"));
	Массив.Добавить(нрег("СлавянкаВТЕ"));
	Массив.Добавить(нрег("СосновыйБорПДВ"));
	Массив.Добавить(нрег("Тосно2ЛАФ"));
	Массив.Добавить(нрег("ТосноЛАФ"));
	Массив.Добавить(нрег("ЭлектраМВГ"));
	Массив.Добавить(нрег("ЮжныйПолюс2СМА"));
	Массив.Добавить(нрег("ЮжныйполюсПДВ"));
	Массив.Добавить(нрег("Кириши2ПДВ")); 
	
	//пятый эшалон
	Массив.Добавить(нрег("АкадемПарк2ПДВ"));
	Массив.Добавить(нрег("БестужевскийТЦ"));
	Массив.Добавить(нрег("ВасилеостровскаяПДВ"));
	Массив.Добавить(нрег("КиришиЛАФ"));
	Массив.Добавить(нрег("Лиговский53ПДВ"));
	Массив.Добавить(нрег("ЛьвовскаяСЮБ"));
	Массив.Добавить(нрег("МаксиСопотПДВ"));
	Массив.Добавить(нрег("Московский6ПДВ"));
	Массив.Добавить(нрег("Нарвский29ПДВ")); 	
	Массив.Добавить(нрег("НовочеркасскаяПДВ"));
	Массив.Добавить(нрег("ОхтаМоллЛИГ")); 	
	Массив.Добавить(нрег("Перинные ряды ПЕРЕКРЕСТОК"));
	Массив.Добавить(нрег("ПикПДВ"));
	Массив.Добавить(нрег("ПриморскаяПДВ")); 
	Массив.Добавить(нрег("РодеоЛАФ"));
	Массив.Добавить(нрег("ТихвинПАО"));
	Массив.Добавить(нрег("ТККубусВолховПАО"));
	Массив.Добавить(нрег("ТКСеннаяЛАФ"));
	Массив.Добавить(нрег("ЧкаловскаяКИВ"));
	Массив.Добавить(нрег("ШкиперскийКИВ"));
	Массив.Добавить(нрег("Шоссе Революции"));
	
	//шестой эшалон
	Массив.Добавить(нрег("АВТОВО"));
	Массив.Добавить(нрег("Большевиков пр. 32"));
	Массив.Добавить(нрег("БонусТКПДВ"));
	Массив.Добавить(нрег("Бронницкая2ПДВ"));
	
	Массив.Добавить(нрег("Ветеранов171ГАМ"));
	Массив.Добавить(нрег("ВсеволожскЮжныйГАМ"));
	Массив.Добавить(нрег("ВыборгскоешоссеУСВ"));
	Массив.Добавить(нрег("ГрандКаньонБЮА"));
	
	Массив.Добавить(нрег("Европейский3")); 	
	Массив.Добавить(нрег("ЖемчужинаВАА"));
	Массив.Добавить(нрег("ЗаневскийКаскадУСВ")); 	
	Массив.Добавить(нрег("ИюньПДВ"));
	
	Массив.Добавить(нрег("Кировский1УСВ"));
	Массив.Добавить(нрег("ЛондонМоллУСВ")); 
	Массив.Добавить(нрег("Мега Дыбенко"));
	Массив.Добавить(нрег("МегаДыбенкоПДВ"));
	
	Массив.Добавить(нрег("МегаПарнасПДВ"));
	Массив.Добавить(нрег("Московский42ПДВ"));
	Массив.Добавить(нрег("Невский2УСВ"));
	Массив.Добавить(нрег("НевскийПрезентальМВС"));
	
	Массив.Добавить(нрег("НордСМА"));
	Массив.Добавить(нрег("Озерки2ПДВ"));
	Массив.Добавить(нрег("Озерки3ПДВ"));
	Массив.Добавить(нрег("ОкейГерманаСДП"));
	
	Массив.Добавить(нрег("ПарнасСитиБЮА"));
	Массив.Добавить(нрег("ТетрисВТЕ"));
	Массив.Добавить(нрег("Тихая12ГАМ"));
	Массив.Добавить(нрег("Ульянка"));
	
	Массив.Добавить(нрег("Французский 2"));
	Массив.Добавить(нрег("Французский 3"));
	
	Возврат Массив;
КонецФункции

Процедура ВыполнитьЗадачиПоВебСервису()
	Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User", "http://mx.tabakon.ru:1777/ut/ws/tbk?wsdl");
	Если Прокси = Неопределено тогда Возврат КонецЕсли; 
	
	Попытка
		УдалениеНеверныхШтрихкодов(Прокси);		
		ОтправкаКодовСкидки(Прокси);
		ЗагрузкаДанныхПоСкидкам(Прокси);
		ОтправкаДанныхОНевернойОрганизации(Прокси);
	Исключение
		Сообщить("Ошибка выполнения задач веб-сервиса!");
	КонецПопытки;
	
	Прокси = Неопределено;

КонецПроцедуры

Процедура ОтправкаКодовСкидки(Прокси)
	
		Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	КомментарииСтатистики.ХешНаименования КАК ХешНаименования,
	      	 	             |	КомментарииСтатистики.Наименование КАК Наименование
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.КомментарииСтатистики КАК КомментарииСтатистики
	      	 	             |ГДЕ
	      	 	             |	КомментарииСтатистики.Наименование ПОДОБНО &НаименованиеТБК
	      	 	             |	И НЕ КомментарииСтатистики.Наименование ПОДОБНО &УжеЗагружен");
	Запрос.УстановитьПараметр("НаименованиеТБК","%tbk%");
	Запрос.УстановитьПараметр("УжеЗагружен","%загружен%");

	Структура = Новый Структура;
	НужныйСклад		 = ОбщегоНазначения.ПолучитьСкладИзООРП();
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Дата",Строка.ХешНаименования);
		эл.Вставить("Склад",Строка(НужныйСклад));
		
		Данные		=	Строка.Наименование;
		Поз3		=	СтрНайти(Данные,"/",,,3);
		Поз5		=	СтрНайти(Данные,"/",,,5);
		Поз6		=	СтрНайти(Данные,"/",,,6);
		Поз7		=	СтрНайти(Данные,"/",,,7);
		Поз8		=	СтрНайти(Данные,"/",,,8);
		
		КодГруппы	=	Сред(Данные,Поз3+1,11);		
		эл.Вставить("НоменклатурнаяГруппа",КодГруппы);		
		
		КодПричины	=	Сред(Данные,Поз5+1,Поз6-Поз5-1);
		эл.Вставить("Причина",КодПричины);
		
		эл.Вставить("Код",Данные);
		
		КодНом		=	Сред(Данные,Поз7+1,Поз8-Поз7-1);
		эл.Вставить("КодНом",КодНом);
		
		СуммаСкидки	=	Сред(Данные,Поз8+1);
		эл.Вставить("СуммаСкидки",СуммаСкидки);
		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
	
	//Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User", "http://mx.tabakon.ru:1777/ut/ws/tbk?wsdl");
	Ответ	=	Прокси.WriteDiscountsQR(JS);
	
	Если Ответ тогда
		Для каждого Строка из рез цикл
			рег = РегистрыСведений.КомментарииСтатистики.СоздатьНаборЗаписей();
			рег.Отбор.ХешНаименования.Установить(Строка.ХешНаименования);
			рег.Прочитать();
			рег[0].Наименование = рег[0].Наименование + "загружен";
			рег.Записать();			
		КонецЦикла;
	КонецЕсли;

	
	//Сообщить(Ответ);	
КонецПроцедуры

Процедура УдалениеНеверныхШтрихкодов(Прокси)
	Ответ = Прокси.DelSHK();
	
	СтруктураОтвета	= ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//если пустой ответ - то пустой массив	
	
	Для каждого Строка из СтруктураОтвета цикл
		НевернаяНоменклатура	=	Справочники.Номенклатура.НайтиПоКоду(СокрЛП(Строка.КодНоменклатуры));
		Если НевернаяНоменклатура.Пустая() тогда Продолжить; КонецЕсли;
					
		нз = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
		
		нз.Отбор.Штрихкод.Установить(Строка.Штрихкод);
		нз.Отбор.Владелец.Установить(НевернаяНоменклатура);
		нз.Записать(); 
		
		нз = РегистрыСведений.ТБК_Штрихкоды.СоздатьНаборЗаписей();
	
		нз.Отбор.Штрихкод.Установить(Строка.Штрихкод);
		нз.Отбор.Владелец.Установить(НевернаяНоменклатура);
		нз.Записать(); 
	КонецЦикла; 
КонецПроцедуры

Процедура ЗагрузкаДанныхПоСкидкам(Прокси);
	Касса	=	ОбщегоНазначения.ПолучитьКассуИзПКО();
	Если не ЗначениеЗаполнено(Касса) тогда
		Касса = "";
	КонецЕсли;
	
	Ответ	=	Прокси.PostDiscountsData(СокрЛП(Строка(Касса)));
	Если ЗначениеЗаполнено(Ответ) тогда
		ОтветМассив	=	ОбщегоНазначения.jsonВСтруктура_Общая(Ответ);//В массив
		
		Для каждого СтрокаМассива из ОтветМассив цикл //добавляем
			нз = РегистрыСведений.ХранилищеСертификатов.СоздатьНаборЗаписей();// этот регистр выбран чтобы не обновлять монопольно. в этом регистре есть даты для быстрого отбора + измерение в виде строки

			нз.Отбор.Идентификатор.Установить(СтрокаМассива.УИ); 
			НоваяЗапись	=	нз.Добавить();
			
			НоваяЗапись.ДатаНачала		=	СтрокаМассива.ПериодАкцииНачало;
			НоваяЗапись.ДатаОкончания	=	СтрокаМассива.ПериодАкцииКонец;
			НоваяЗапись.Идентификатор	=	СтрокаМассива.УИ;
			НоваяЗапись.ТипХранилища	=	Перечисления.ТипХранилищаСертификатов.ПерсональныеСертификаты;
			
			ДанныеАкции	=	СтрокаМассива.ТипАкции 					+ "/" + СтрокаМассива.Скидка 			+ "/" +
							СтрокаМассива.ТоварВПодарок 			+ "/" + СтрокаМассива.СуммаЧека 		+ "/" +
							СтрокаМассива.КоличествоНоменклатуры 	+ "/" + СтрокаМассива.Номенклатура;
							
			НоваяЗапись.Наименование	=	ДанныеАкции;							
			
			нз.Записать();			
		КонецЦикла; 
	КонецЕсли;

КонецПроцедуры

Процедура ОтправкаДанныхОНевернойОрганизации(Прокси)	
	Запрос	=	новый запрос("ВЫБРАТЬ
		      	 	             |	ВременныеИдентификаторыЗапросов.Идентификатор КАК Идентификатор,
		      	 	             |	ВременныеИдентификаторыЗапросов.Дата КАК Дата,
		      	 	             |	ВременныеИдентификаторыЗапросов.Запрос КАК Запрос
		      	 	             |ИЗ
		      	 	             |	РегистрСведений.ВременныеИдентификаторыЗапросов КАК ВременныеИдентификаторыЗапросов
		      	 	             |ГДЕ
		      	 	             |	НЕ ВременныеИдентификаторыЗапросов.Идентификатор ПОДОБНО &Идентификатор");
	Запрос.УстановитьПараметр("Идентификатор","%загружен%");

	Структура = Новый Структура;
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 тогда возврат КонецЕсли;
	
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Дата",Строка(Строка.Дата));		
		Данные		=	Строка.Запрос.Получить();
		
		эл.Вставить("Магазин",Строка(Данные.Магазин));
		эл.Вставить("Организация",Строка(Данные.Организация));
		эл.Вставить("ИНН",Данные.ИНН);
		эл.Вставить("Чек",Строка(Данные.Чек));
		эл.Вставить("ВидОперации",Данные.ВидОперации);
		эл.Вставить("ПроверкаМаркиИНН",Данные.ПроверкаМаркиИНН);
		эл.Вставить("НеверныйИНН",Данные.НеверныйИНН);
		эл.Вставить("Марка",Данные.Марка);
		
		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
	
	//Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User", "http://mx.tabakon.ru:1777/ut/ws/tbk?wsdl");
	Ответ	=	Прокси.WriteWrongINN(JS);
	
	Если Ответ тогда
		Для каждого Строка из рез цикл
			рег = РегистрыСведений.ВременныеИдентификаторыЗапросов.СоздатьМенеджерЗаписи();
			рег.Идентификатор 	= "загружен " + Строка.Идентификатор;
			рег.Дата 			=  Строка.Дата;
			рег.Запрос			=  Строка.Запрос;
			рег.Записать();
			
			рег = РегистрыСведений.ВременныеИдентификаторыЗапросов.СоздатьНаборЗаписей();
			рег.Отбор.Идентификатор.Установить(Строка.Идентификатор);
			рег.Записать();			
		КонецЦикла;
	КонецЕсли;


	
	//Сообщить(Ответ);	
КонецПроцедуры
