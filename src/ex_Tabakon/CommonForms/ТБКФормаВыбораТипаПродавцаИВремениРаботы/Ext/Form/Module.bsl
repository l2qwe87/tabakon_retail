
&НаКлиенте
Процедура ОК(Команда)
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаСервере
Функция ПроверитьОсновныхПродавцовСервер()
	для каждого Строка из ОсновныеПродавцы цикл
		Если Не ЗначениеЗаполнено(Строка.Продавец) или не ЗначениеЗаполнено(Строка.ВремяСмены) тогда
			Возврат ложь;
		КонецЕсли;
	КонецЦикла;
	
	КопияПродавцы	=	ОсновныеПродавцы.Выгрузить().Скопировать();
	КопияПродавцы.Колонки.Добавить("Поле");
	Для каждого Строка из КопияПродавцы цикл
		Строка.Поле	=	1;
	КонецЦикла;
	
	КопияПродавцы.Свернуть("Продавец","Поле");
	
	для каждого Строка из КопияПродавцы цикл
		Если Строка.Поле>1 тогда
			Возврат ложь;
		КонецЕсли;
	КонецЦикла;

	
	Возврат истина;
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НеНадоПроверять = Ложь тогда 
		флПроверкаосновныхПродавцов	=	ПроверитьОсновныхПродавцовСервер();
		
		Если Не флПроверкаосновныхПродавцов тогда
			Отказ = Истина;
			Сообщить("Неверно заполнены основные продавцы!"); 	
		КонецЕсли;
		
		
		НетОсновных	=	Ложь;
		Если Не ЗначениеЗаполнено(Продавец_Основной) и ОсновныеПродавцы.Количество() = 0 тогда
			НетОсновных	=	Истина;	
		КонецЕсли;
		
		НетОсновныхВремяСмены	=	Ложь;
		Если Не ЗначениеЗаполнено(ВремяСмены_Основной) и ОсновныеПродавцы.Количество() = 0 тогда
			НетОсновныхВремяСмены	=	Истина;	
		КонецЕсли;   
		
		
		Если НетОсновных и не ЗначениеЗаполнено(Продавец_Второй)  тогда
			
			Отказ = Истина;
			Сообщить("Не заполнены продавцы!");
		КонецЕсли;
		
		
		Если НетОсновныхВремяСмены и не ЗначениеЗаполнено(ВремяСмены_Второй) тогда
			
			Отказ = Истина;
			Сообщить("Не заполнены время смены!");
		КонецЕсли; 
		
		
		
		Если ЗначениеЗаполнено(Продавец_Основной) и ВремяСмены_Основной = 0 тогда			
			Отказ = Истина;
			Сообщить("Не заполнено время смены основного продавца!");
		КонецЕсли; 

		Если ЗначениеЗаполнено(Продавец_Второй) и ВремяСмены_Второй = 0 тогда			
			Отказ = Истина;
			Сообщить("Не заполнено время смены второго продавца!");
		КонецЕсли; 
		
		
		Если не ЗначениеЗаполнено(Продавец_Основной) и ВремяСмены_Основной > 0 тогда			
			Отказ = Истина;
			Сообщить("Не заполнен основной продавец!");
		КонецЕсли; 

		Если не ЗначениеЗаполнено(Продавец_Второй) и ВремяСмены_Второй  > 0 тогда			
			Отказ = Истина;
			Сообщить("Не заполнен второй продавец!");
		КонецЕсли; 
		
		
		Если ВремяСмены_Основной >24 или ВремяСмены_Второй >24 тогда
			
			Отказ = Истина;
			Сообщить("Время смены превысило 24!");
		КонецЕсли; 
		
		Если не отказ тогда
			ЗаписатьДанные();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура  ЗаписатьДанные()
	Рег =  РегистрыСведений.ТБКСменыСотрудников.СоздатьНаборЗаписей();
	Рег.Отбор.КассоваяСмена.Установить(КассоваяСмена);
	Рег.Записать();

	Если ЗначениеЗаполнено(Продавец_Основной) тогда
		Рег = РегистрыСведений.ТБКСменыСотрудников.СоздатьМенеджерЗаписи();
		Рег.ВремяСмены			=	ВремяСмены_Основной;
		Рег.Продавец			=	Продавец_Основной;
		Рег.КассоваяСмена		=	КассоваяСмена;
		Рег.ТипПродавца			=	Перечисления.ТБКТипыПродавцов.ОсновнойПродавец;  
		Рег.ПродавецНаЗамену	=	ПродавецНаЗамену; 
		Рег.Записать();	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Продавец_Второй) тогда
		Рег = РегистрыСведений.ТБКСменыСотрудников.СоздатьМенеджерЗаписи();
		Рег.ВремяСмены			=	ВремяСмены_Второй;
		Рег.Продавец			=	Продавец_Второй;
		Рег.КассоваяСмена		=	КассоваяСмена;
		Рег.ТипПродавца			=	Перечисления.ТБКТипыПродавцов.ВторойПродавец;
		Рег.ПродавецНаЗамену	=	ВторойПродавецНаЗамену;
		Рег.Записать();	
	КонецЕсли;  	
	
		
	Для каждого Строка из ОсновныеПродавцы цикл
		Рег = РегистрыСведений.ТБКСменыСотрудников.СоздатьМенеджерЗаписи();
		Рег.ВремяСмены			=	Строка.ВремяСмены;
		Рег.Продавец			=	Строка.Продавец;
		Рег.ПродавецНаЗамену	=	Строка.ПродавецНаЗамену; 
		Рег.КассоваяСмена		=	КассоваяСмена;
		Рег.ТипПродавца			=	Перечисления.ТБКТипыПродавцов.ОсновнойПродавец;
		Рег.Записать();	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Выйти(Команда)
	НеНадоПроверять	=	истина;
	Этаформа.Закрыть();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	КассоваяСмена.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.КассоваяСмена КАК КассоваяСмена
	      	 	             |ГДЕ
	      	 	             |	КассоваяСмена.Статус = &Статус
	      	 	             |	И КассоваяСмена.КассаККМ = &КассаККМ
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	КассоваяСмена.Дата УБЫВ");
	Запрос.УстановитьПараметр("Статус",		Перечисления.СтатусыКассовойСмены.Открыта);
	Запрос.УстановитьПараметр("КассаККМ",	Параметры.КассаККМ);
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() >0 тогда
		КассоваяСмена	=	Рез[0].ссылка;
		
		Запрос	=	Новый запрос("ВЫБРАТЬ
		      	 	             |	ТБКСменыСотрудников.Продавец КАК Продавец,
		      	 	             |	ТБКСменыСотрудников.ТипПродавца КАК ТипПродавца,
		      	 	             |	ТБКСменыСотрудников.ВремяСмены КАК ВремяСмены,
		      	 	             |	ТБКСменыСотрудников.ПродавецНаЗамену КАК ПродавецНаЗамену
		      	 	             |ИЗ
		      	 	             |	РегистрСведений.ТБКСменыСотрудников КАК ТБКСменыСотрудников
		      	 	             |ГДЕ
		      	 	             |	ТБКСменыСотрудников.КассоваяСмена = &КассоваяСмена");
		Запрос.УстановитьПараметр("КассоваяСмена",КассоваяСмена);
		Рез = Запрос.Выполнить().Выгрузить();
		
		КоличествоОсновных = 0;
		Для каждого Строка из Рез цикл
			Если Строка.ТипПродавца	=	Перечисления.ТБКТипыПродавцов.ОсновнойПродавец тогда
				КоличествоОсновных	=	КоличествоОсновных+1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоОсновных>1 тогда
			флНесколькоОсновных	=Истина;
			элементы.Группа6.Видимость	=	Истина;
			элементы.Группа3.Видимость	=	ложь; 
		КонецЕсли;
		
		
		Для каждого Строка из Рез цикл
			Если Строка.ТипПродавца	=	Перечисления.ТБКТипыПродавцов.ОсновнойПродавец тогда
				Если  флНесколькоОсновных тогда
					НовСтрока	=	ОсновныеПродавцы.Добавить();	
					ЗаполнитьЗначенияСвойств(НовСтрока,Строка);
				иначе
					Продавец_Основной	=	Строка.Продавец;
					ВремяСмены_Основной	=	Строка.ВремяСмены; 
					ПродавецНаЗамену	=	Строка.ПродавецНаЗамену;
				КонецЕсли;
				
			ИначеЕсли Строка.ТипПродавца	=	Перечисления.ТБКТипыПродавцов.ВторойПродавец тогда
				Продавец_Второй			=	Строка.Продавец;
				ВремяСмены_Второй		=	Строка.ВремяСмены;
				ВторойПродавецНаЗамену	=	Строка.ПродавецНаЗамену;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//Вик 2024-10-17 с ноября 2024 все магазины на новой мотивации
		ВариантМотивации	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ВариантМотивации");

		Если ВариантМотивации = 6 тогда
			элементы.Группа4.Видимость	=	ложь;
			элементы.Группа5.Видимость	=	ложь; 
		КонецЕсли;
		
		//Вик 2024-10-21
		Если ТекущаяДата()>'20241101' тогда
			Элементы.флПродавецНаЗамену.Видимость 					= Ложь;
			Элементы.ВторойПродавецНаЗамену.Видимость 				= Ложь;
			Элементы.ОсновныеПродавцыфлПродавецНаЗамену.Видимость 	= Ложь;
			Элементы.Группа1.Видимость								= Ложь;
		КонецЕсли;
		//
		
	иначе
		Сообщить("Внимание! Нет открытой смены!");	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПродавецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПродавца", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сотрудник" 		, Истина);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбораВРМК",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры
		

&НаКлиенте
Процедура ОповещениеОткрытьФормуВыбораПродавца(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт 	
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда		
		
		Если ДополнительныеПараметры <> Неопределено и ДополнительныеПараметры.свойство("ОсновнойПродавец") тогда
			ОТбор	=	Новый Структура;
			ОТбор.Вставить("Продавец",РезультатОткрытияФормы);
			Если ОсновныеПродавцы.НайтиСтроки(ОТбор).количество()=0 тогда
				ДополнительныеПараметры.ОсновнойПродавец	=	РезультатОткрытияФормы;
				ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Продавец	=	РезультатОткрытияФормы;
			иначе
				сообщить("Этот продавец уже есть в списке");
			КонецЕсли;
			
		иначе
			ЭтаФорма[ЭтаФорма.ТекущийЭлемент.Имя] = РезультатОткрытияФормы;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Продавец1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПродавца", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сотрудник" 		, Истина);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбораВРМК",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры


&НаКлиенте
Процедура Продавец2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		СтандартнаяОбработка = ЛОЖЬ;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПродавца", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сотрудник" 		, Истина);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбораВРМК",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры


&НаКлиенте
Процедура Продавец3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		СтандартнаяОбработка = ЛОЖЬ;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПродавца", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сотрудник" 		, Истина);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбораВРМК",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры


&НаКлиенте
Процедура флНесколькоОсновныхПриИзменении(Элемент)
	элементы.Группа6.Видимость	=	не элементы.Группа6.Видимость;
	элементы.Группа3.Видимость	=	не элементы.Группа3.Видимость; 
	если флНесколькоОсновных тогда
		Продавец_Основной	=	Неопределено;
		ВремяСмены_Основной	=	0;
	иначе
		ОсновныеПродавцы.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеПродавцыПродавецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	
	ДопПараметры	= Новый Структура;
	ДопПараметры.Вставить("ОсновнойПродавец" 		, Элемент);
	
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВыбораПродавца", ЭтотОбъект, ДопПараметры);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сотрудник" 			, Истина);
	
	
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбораВРМК",
			ПараметрыФормы, УникальныйИдентификатор,,,, ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ВремяСменыПриИзменении(Элемент)
	
	Если ВремяСмены_Основной > 16 Тогда
	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Время смены можно поставить максимально 16";
		Сообщение.Сообщить(); 
		
		ВремяСмены_Основной = 0;
		ОбновитьИнтерфейс();
	
	КонецЕсли; 
	
КонецПроцедуры


