
&Вместо("ШаблоныКодовМаркировкиПоОтбору")
Функция ТБКШаблоныКодовМаркировкиПоОтбору(ШаблоныКодовМаркировки, Отбор)
	Если ТипЗнч(ШаблоныКодовМаркировки) = Тип("Массив") Тогда
		
		НайденныеШаблоны = Новый Массив;
		
		Для Каждого ШаблонКМ Из ШаблоныКодовМаркировки Цикл
			
			ШаблонНайден = Истина;
			
			Для Каждого ОтборКлючЗначение Из Отбор Цикл
				Если ШаблонКМ[ОтборКлючЗначение.Ключ] <> ОтборКлючЗначение.Значение Тогда
					ШаблонНайден = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ШаблонНайден Тогда
				НайденныеШаблоны.Добавить(ШаблонКМ);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		НайденныеШаблоны = ШаблоныКодовМаркировки.НайтиСтроки(Отбор);
		
	КонецЕсли;  
	
	//Костыль иначе не пробиваются товары, например табак Corsar
	//Вик 2024-07-31
	Если НайденныеШаблоны.количество() = 2 тогда
		Для Ном =0 по НайденныеШаблоны.Количество()-1 цикл
			Если Найти( Строка(НайденныеШаблоны[Ном].ВидПродукции),"вода") тогда
				НайденныеШаблоны.Удалить(Ном);
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;    
	
	Для Ном =0 по НайденныеШаблоны.Количество()-1 цикл   
		Если Не ЗначениеЗаполнено(НайденныеШаблоны[Ном].ВидПродукции) тогда
			НайденныеШаблоны[Ном].ВидПродукции	=	ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");	
		КонецЕсли;     
		
		Если Не ЗначениеЗаполнено(НайденныеШаблоны[Ном].ВидУпаковки) тогда
			НайденныеШаблоны[Ном].ВидУпаковки	=	ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская");	
		КонецЕсли;    
		
	КонецЦикла; 
	//
	
	Возврат НайденныеШаблоны;

КонецФункции

&Вместо("КодМаркировкиСоответствуетШаблону")
Функция ТБККодМаркировкиСоответствуетШаблону(ПараметрыРазбораКодаМаркировки, Настройки, ШаблонКодаМаркировки)
	ДанныеШаблона = Настройки.ШаблоныИОписанияВидовПродукции[ШаблонКодаМаркировки.Шаблон];
	
	//Вик 2024-09-27 есть два одинаковых шаблона с "93" и без нее, на соки и на табачку. Этот на соки убираем 
	Если ДанныеШаблона.СтрокаТаблицыШаблоныКодовМаркировки.Шаблон = "01 + GTIN (14 chars) + 21 + СерийныйНомер (13 chars)" и
		Сред(ПараметрыРазбораКодаМаркировки.КодМаркировки,26,2) = "93" тогда
		Возврат Неопределено;
	КонецЕсли; 
	//
	
	ОбщиеМодулиТекущегоШаблона = Новый Массив;
	Для Каждого ИмяОбщегоМодуля Из ДанныеШаблона.ИменаОбщихМодулей Цикл
		МодульРазбораКМ = ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля];
		ОбщиеМодулиТекущегоШаблона.Добавить(Новый Структура("Имя, ОбщийМодуль", ИмяОбщегоМодуля, МодульРазбораКМ));
	КонецЦикла;
	
	СоставКодаМаркировки            = СкопироватьСоставКодаМаркировки(ДанныеШаблона.СоставКодаМаркировки);
	ЗначенияЭлементовКодаМаркировки = Неопределено;
	
	ПараметрыОписанияКодаМаркировки = Новый Структура;
	ПараметрыОписанияКодаМаркировки.Вставить("ВидыПродукции",                    ДанныеШаблона.ВидыПродукции);
	ПараметрыОписанияКодаМаркировки.Вставить("ОписаниеЭлементовКодаМаркировки",  ДанныеШаблона.ОписаниеЭлементовКодаМаркировки);
	ПараметрыОписанияКодаМаркировки.Вставить("ВключаетИдентификаторыПрименения", ШаблонКодаМаркировки.ВключаетИдентификаторыПрименения);
	ПараметрыОписанияКодаМаркировки.Вставить("ПозицииЭлементовКодаМаркировки",   ДанныеШаблона.ПозицииЭлементовКодаМаркировки);
	ПараметрыОписанияКодаМаркировки.Вставить("Шаблон",                           ШаблонКодаМаркировки.Шаблон);
	ПараметрыОписанияКодаМаркировки.Вставить("ТипШтрихкода",                     ШаблонКодаМаркировки.ТипШтрихкода);
	ПараметрыОписанияКодаМаркировки.Вставить("ВидУпаковки",                      ШаблонКодаМаркировки.ВидУпаковки);
	ПараметрыОписанияКодаМаркировки.Вставить("ОбщиеМодули",                      ОбщиеМодулиТекущегоШаблона);
	ПараметрыОписанияКодаМаркировки.Вставить("МодульКонтекста",                  ПараметрыРазбораКодаМаркировки.МодульКонтекста);
	ПараметрыОписанияКодаМаркировки.Вставить("ДополнительныеПараметры",          Настройки.ДополнительныеПараметры);
	ПараметрыОписанияКодаМаркировки.Вставить("Алфавит",                          Настройки.Алфавит);

	//Вик 2024-09-25
	Если СтрДлина(ПараметрыРазбораКодаМаркировки.КодМаркировки) >40 тогда
		ПараметрыОписанияКодаМаркировки.ВидУпаковки	=	ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая");	
	КонецЕсли;
    //
	
	Если Не КодМаркировкиСоответствуетОписанию(ПараметрыРазбораКодаМаркировки, ПараметрыОписанияКодаМаркировки, СоставКодаМаркировки, ЗначенияЭлементовКодаМаркировки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидУпаковкиНабор = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор");
	
	ПроверятьВидУпаковки = Ложь;
	Если ЗначениеЗаполнено(ШаблонКодаМаркировки.ВидУпаковки) Тогда
		Если ШаблонКодаМаркировки.ВидУпаковки = ВидУпаковкиНабор
			И ЭтоВнутреннийШтрихкод(СоставКодаМаркировки.EAN) Тогда
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли СоставКодаМаркировки.Свойство("EAN")
		И ЭтоВнутреннийШтрихкод(СоставКодаМаркировки.EAN)
		И ДанныеШаблона.ВидыУпаковок.Найти(ВидУпаковкиНабор) <> Неопределено Тогда
		ПроверятьВидУпаковки = Истина;
	КонецЕсли;
	
	ДанныеРезультата = НовыйРезультатРазбораКодаМаркировки(ПараметрыРазбораКодаМаркировки.ПользовательскиеПараметры.РасширеннаяДетализация);
	ДанныеРезультата.КодМаркировки        = ПараметрыРазбораКодаМаркировки.КодМаркировки;
	ДанныеРезультата.ТипШтрихкода         = ШаблонКодаМаркировки.ТипШтрихкода;
	ДанныеРезультата.ВидУпаковки          = ШаблонКодаМаркировки.ВидУпаковки;
	ДанныеРезультата.СоставКодаМаркировки = СоставКодаМаркировки;
	
	Если ПроверятьВидУпаковки Тогда
		
		ВидыПродукции = Новый Массив;
		Для Каждого ВидПродукции Из ПараметрыОписанияКодаМаркировки.ВидыПродукции Цикл
			ВидыУпаковокПоВидуПродукции = ДанныеШаблона.ВидыУпаковокПоВидамПродукции[ВидПродукции];
			Если ВидыУпаковокПоВидуПродукции.Найти(ВидУпаковкиНабор) = Неопределено Тогда
				ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции] = ВидыУпаковокПоВидуПродукции;
			Иначе
				ВидыУпаковок = Новый Массив;
				Для Каждого ВидУпаковки Из ВидыУпаковокПоВидуПродукции Цикл
					Если ВидУпаковки = ВидУпаковкиНабор Тогда
						Продолжить;
					КонецЕсли;
					ВидыУпаковок.Добавить(ВидУпаковки);
				КонецЦикла;
				ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции] = ВидыУпаковок;
			КонецЕсли;
			ВидыПродукции.Добавить(ВидПродукции);
		КонецЦикла;
		
		Если ВидыПродукции.Количество() = 0 Тогда
			Возврат Неопределено;
		ИначеЕсли ВидыПродукции.Количество() = ПараметрыОписанияКодаМаркировки.ВидыПродукции.Количество() Тогда
			ДанныеРезультата.ВидыПродукции = ПараметрыОписанияКодаМаркировки.ВидыПродукции;
		Иначе
			ДанныеРезультата.ВидыПродукции = ВидыПродукции;
		КонецЕсли;
		
	Иначе
		
		ДанныеРезультата.ВидыПродукции = ПараметрыОписанияКодаМаркировки.ВидыПродукции; // Состав возможных видов продукции мог поменяться
		
		Для Каждого ВидПродукции Из ДанныеРезультата.ВидыПродукции Цикл
			ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции] = ДанныеШаблона.ВидыУпаковокПоВидамПродукции[ВидПродукции];
		КонецЦикла;
		
	КонецЕсли;
	
	БазовыйШаблонНормализацииКодаМаркировки = БазовыйШаблонНормализацииКодаМаркировки(ДанныеРезультата, ПараметрыРазбораКодаМаркировки, ЗначенияЭлементовКодаМаркировки);
	
	ДанныеРезультата.НормализованныйКодМаркировки = НормализоватьКодМаркировкиПоБазовомуШаблону(
		ДанныеРезультата.КодМаркировки,
		БазовыйШаблонНормализацииКодаМаркировки,
		ЗначенияЭлементовКодаМаркировки,
		СоставКодаМаркировки,
		ШаблонКодаМаркировки.ВключаетИдентификаторыПрименения);
	
	Если ПараметрыРазбораКодаМаркировки.ПользовательскиеПараметры.РасширеннаяДетализация Тогда
		
		ДанныеРезультата.Детализация.ШаблонРазбораКодаМаркировки             = ШаблонКодаМаркировки.Шаблон;
		ДанныеРезультата.Детализация.ВключаетИдентификаторыПрименения        = ШаблонКодаМаркировки.ВключаетИдентификаторыПрименения;
		ДанныеРезультата.Детализация.ЗначенияЭлементовКодаМаркировки         = ЗначенияЭлементовКодаМаркировки;
		ДанныеРезультата.Детализация.ОписаниеЭлементовКодаМаркировки         = ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки;
		ДанныеРезультата.Детализация.НачинаетсяСоСкобки                      = ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки;
		ДанныеРезультата.Детализация.СодержитРазделительGS                   = ПараметрыРазбораКодаМаркировки.СодержитРазделительGS;
		ДанныеРезультата.Детализация.ИмяСвойстваПозиции                      = ПараметрыРазбораКодаМаркировки.ИмяСвойстваПозиции;
		ДанныеРезультата.Детализация.БазовыйШаблонНормализацииКодаМаркировки = БазовыйШаблонНормализацииКодаМаркировки;
		
	КонецЕсли;
	
	Возврат ДанныеРезультата;

КонецФункции

&Вместо("РазобратьКодМаркировкиУпрощенно")
Функция ТБКРазобратьКодМаркировкиУпрощенно(ПараметрыОбработкиКодаМаркировки, КешНастроекРазбораКодаМаркировки)
	//// Вставить содержимое метода.
	//Результат = ПродолжитьВызов(ПараметрыОбработкиКодаМаркировки, КешНастроекРазбораКодаМаркировки);
	//Возврат Результат;   
	
	//Вик 2024-10-03 иногда падает в ошибку на блоках
	Возврат Неопределено;
	//
КонецФункции
