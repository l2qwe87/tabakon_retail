
&Вместо("ШаблоныКодовМаркировкиПоОтбору")
Функция ТБКШаблоныКодовМаркировкиПоОтбору(ШаблоныКодовМаркировки, Отбор)
	
	Если ТипЗнч(ШаблоныКодовМаркировки) = Тип("Массив") Тогда
		
		НайденныеШаблоны = Новый Массив;
		
		Для Каждого ШаблонКМ Из ШаблоныКодовМаркировки Цикл
			
			ШаблонНайден = Истина;
			
			Для Каждого ОтборКлючЗначение Из Отбор Цикл
				Если ШаблонКМ[ОтборКлючЗначение.Ключ] <> ОтборКлючЗначение.Значение Тогда
					ШаблонНайден = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ШаблонНайден Тогда
				НайденныеШаблоны.Добавить(ШаблонКМ);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		НайденныеШаблоны = ШаблоныКодовМаркировки.НайтиСтроки(Отбор);
		
	КонецЕсли;  
	
	//Костыль иначе не пробиваются товары, например табак Corsar
	//Вик 2024-07-3
	//Марк 2025-03-20 тут изменения вити не давали пробить блок полагаю что из за ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") 
	Если НайденныеШаблоны.количество() = 2 тогда
		Для Ном =0 по НайденныеШаблоны.Количество()-1 цикл
			Если Найти( Строка(НайденныеШаблоны[Ном].ВидПродукции),"вода") тогда
				НайденныеШаблоны.Удалить(Ном);
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;    
	
	
	Возврат НайденныеШаблоны;

КонецФункции

//Марк 2025-03-20 строчка види где ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") тоже смущает на 
&Вместо("КодМаркировкиСоответствуетШаблону")
Функция ТБККодМаркировкиСоответствуетШаблону(ПараметрыРазбораКодаМаркировки, Настройки, ШаблонКодаМаркировки)
	
	ДанныеШаблона = Настройки.ШаблоныИОписанияВидовПродукции[ШаблонКодаМаркировки.Шаблон];
	
	//Вик 2024-09-27 есть два одинаковых шаблона с "93" и без нее, на соки и на табачку. Этот на соки убираем 
	Если ДанныеШаблона.СтрокаТаблицыШаблоныКодовМаркировки.Шаблон = "01 + GTIN (14 chars) + 21 + СерийныйНомер (13 chars)" и
		Сред(ПараметрыРазбораКодаМаркировки.КодМаркировки,26,2) = "93" тогда
		Возврат Неопределено;
	КонецЕсли; 
	//
	
	ОбщиеМодулиТекущегоШаблона = Новый Массив;
	Для Каждого ИмяОбщегоМодуля Из ДанныеШаблона.ИменаОбщихМодулей Цикл
		МодульРазбораКМ = ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля];
		ОбщиеМодулиТекущегоШаблона.Добавить(Новый Структура("Имя, ОбщийМодуль", ИмяОбщегоМодуля, МодульРазбораКМ));
	КонецЦикла;
	
	СоставКодаМаркировки            = СкопироватьСоставКодаМаркировки(ДанныеШаблона.СоставКодаМаркировки);
	ЗначенияЭлементовКодаМаркировки = Неопределено;
	
	ПараметрыОписанияКодаМаркировки = Новый Структура;
	ПараметрыОписанияКодаМаркировки.Вставить("ВидыПродукции",                    ДанныеШаблона.ВидыПродукции);
	ПараметрыОписанияКодаМаркировки.Вставить("ОписаниеЭлементовКодаМаркировки",  ДанныеШаблона.ОписаниеЭлементовКодаМаркировки);
	ПараметрыОписанияКодаМаркировки.Вставить("ВключаетИдентификаторыПрименения", ШаблонКодаМаркировки.ВключаетИдентификаторыПрименения);
	ПараметрыОписанияКодаМаркировки.Вставить("ПозицииЭлементовКодаМаркировки",   ДанныеШаблона.ПозицииЭлементовКодаМаркировки);
	ПараметрыОписанияКодаМаркировки.Вставить("Шаблон",                           ШаблонКодаМаркировки.Шаблон);
	ПараметрыОписанияКодаМаркировки.Вставить("ТипШтрихкода",                     ШаблонКодаМаркировки.ТипШтрихкода);
	ПараметрыОписанияКодаМаркировки.Вставить("ВидУпаковки",                      ШаблонКодаМаркировки.ВидУпаковки);
	ПараметрыОписанияКодаМаркировки.Вставить("ОбщиеМодули",                      ОбщиеМодулиТекущегоШаблона);
	ПараметрыОписанияКодаМаркировки.Вставить("МодульКонтекста",                  ПараметрыРазбораКодаМаркировки.МодульКонтекста);
	ПараметрыОписанияКодаМаркировки.Вставить("ДополнительныеПараметры",          Настройки.ДополнительныеПараметры);
	ПараметрыОписанияКодаМаркировки.Вставить("Алфавит",                          Настройки.Алфавит);

	//Вик 2024-09-25
	Если СтрДлина(ПараметрыРазбораКодаМаркировки.КодМаркировки) > 40 тогда
		ПараметрыОписанияКодаМаркировки.ВидУпаковки	=	ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая");	
	КонецЕсли;
    //
	
	Если Не КодМаркировкиСоответствуетОписанию(ПараметрыРазбораКодаМаркировки, ПараметрыОписанияКодаМаркировки, СоставКодаМаркировки, ЗначенияЭлементовКодаМаркировки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидУпаковкиНабор = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор");
	
	ПроверятьВидУпаковки = Ложь;
	Если ЗначениеЗаполнено(ШаблонКодаМаркировки.ВидУпаковки) Тогда
		Если ШаблонКодаМаркировки.ВидУпаковки = ВидУпаковкиНабор
			И ЭтоВнутреннийШтрихкод(СоставКодаМаркировки.EAN) Тогда
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли СоставКодаМаркировки.Свойство("EAN")
		И ЭтоВнутреннийШтрихкод(СоставКодаМаркировки.EAN)
		И ДанныеШаблона.ВидыУпаковок.Найти(ВидУпаковкиНабор) <> Неопределено Тогда
		ПроверятьВидУпаковки = Истина;
	КонецЕсли;
	
	ДанныеРезультата = НовыйРезультатРазбораКодаМаркировки(ПараметрыРазбораКодаМаркировки.ПользовательскиеПараметры.РасширеннаяДетализация);
	ДанныеРезультата.КодМаркировки        = ПараметрыРазбораКодаМаркировки.КодМаркировки;
	ДанныеРезультата.ТипШтрихкода         = ШаблонКодаМаркировки.ТипШтрихкода;
	ДанныеРезультата.ВидУпаковки          = ШаблонКодаМаркировки.ВидУпаковки;
	ДанныеРезультата.СоставКодаМаркировки = СоставКодаМаркировки;
	
	Если ПроверятьВидУпаковки Тогда
		
		ВидыПродукции = Новый Массив;
		Для Каждого ВидПродукции Из ПараметрыОписанияКодаМаркировки.ВидыПродукции Цикл
			ВидыУпаковокПоВидуПродукции = ДанныеШаблона.ВидыУпаковокПоВидамПродукции[ВидПродукции];
			Если ВидыУпаковокПоВидуПродукции.Найти(ВидУпаковкиНабор) = Неопределено Тогда
				ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции] = ВидыУпаковокПоВидуПродукции;
			Иначе
				ВидыУпаковок = Новый Массив;
				Для Каждого ВидУпаковки Из ВидыУпаковокПоВидуПродукции Цикл
					Если ВидУпаковки = ВидУпаковкиНабор Тогда
						Продолжить;
					КонецЕсли;
					ВидыУпаковок.Добавить(ВидУпаковки);
				КонецЦикла;
				ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции] = ВидыУпаковок;
			КонецЕсли;
			ВидыПродукции.Добавить(ВидПродукции);
		КонецЦикла;
		
		Если ВидыПродукции.Количество() = 0 Тогда
			Возврат Неопределено;
		ИначеЕсли ВидыПродукции.Количество() = ПараметрыОписанияКодаМаркировки.ВидыПродукции.Количество() Тогда
			ДанныеРезультата.ВидыПродукции = ПараметрыОписанияКодаМаркировки.ВидыПродукции;
		Иначе
			ДанныеРезультата.ВидыПродукции = ВидыПродукции;
		КонецЕсли;
		
	Иначе
		
		ДанныеРезультата.ВидыПродукции = ПараметрыОписанияКодаМаркировки.ВидыПродукции; // Состав возможных видов продукции мог поменяться
		
		Для Каждого ВидПродукции Из ДанныеРезультата.ВидыПродукции Цикл
			ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции] = ДанныеШаблона.ВидыУпаковокПоВидамПродукции[ВидПродукции];
		КонецЦикла;
		
	КонецЕсли;
	
	БазовыйШаблонНормализацииКодаМаркировки = БазовыйШаблонНормализацииКодаМаркировки(ДанныеРезультата, ПараметрыРазбораКодаМаркировки, ЗначенияЭлементовКодаМаркировки);
	
	ДанныеРезультата.НормализованныйКодМаркировки = НормализоватьКодМаркировкиПоБазовомуШаблону(
		ДанныеРезультата.КодМаркировки,
		БазовыйШаблонНормализацииКодаМаркировки,
		ЗначенияЭлементовКодаМаркировки,
		СоставКодаМаркировки,
		ШаблонКодаМаркировки.ВключаетИдентификаторыПрименения);
	
	Если ПараметрыРазбораКодаМаркировки.ПользовательскиеПараметры.РасширеннаяДетализация Тогда
		
		ДанныеРезультата.Детализация.ШаблонРазбораКодаМаркировки             = ШаблонКодаМаркировки.Шаблон;
		ДанныеРезультата.Детализация.ВключаетИдентификаторыПрименения        = ШаблонКодаМаркировки.ВключаетИдентификаторыПрименения;
		ДанныеРезультата.Детализация.ЗначенияЭлементовКодаМаркировки         = ЗначенияЭлементовКодаМаркировки;
		ДанныеРезультата.Детализация.ОписаниеЭлементовКодаМаркировки         = ПараметрыОписанияКодаМаркировки.ОписаниеЭлементовКодаМаркировки;
		ДанныеРезультата.Детализация.НачинаетсяСоСкобки                      = ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки;
		ДанныеРезультата.Детализация.СодержитРазделительGS                   = ПараметрыРазбораКодаМаркировки.СодержитРазделительGS;
		ДанныеРезультата.Детализация.ИмяСвойстваПозиции                      = ПараметрыРазбораКодаМаркировки.ИмяСвойстваПозиции;
		ДанныеРезультата.Детализация.БазовыйШаблонНормализацииКодаМаркировки = БазовыйШаблонНормализацииКодаМаркировки;
		
	КонецЕсли;
	
	Возврат ДанныеРезультата;

КонецФункции

//Марк 2025-03-20 тут вроде как норм но хз
&Вместо("РазобратьКодМаркировкиУпрощенно")
Функция ТБКРазобратьКодМаркировкиУпрощенно(ПараметрыОбработкиКодаМаркировки, КешНастроекРазбораКодаМаркировки)
	//// Вставить содержимое метода.
	//Результат = ПродолжитьВызов(ПараметрыОбработкиКодаМаркировки, КешНастроекРазбораКодаМаркировки);
	//Возврат Результат;   
	
	//Вик 2024-10-03 иногда падает в ошибку на блоках
	Возврат Неопределено;
	//
КонецФункции

//&Вместо("РазобратьКодМаркировки")
//Функция ТБКРазобратьКодМаркировки(ДанныеДляРазбора, ВидыПродукции, ПримечаниеКРезультатуРазбора, Настройки, МодульКонтекста, ПользовательскиеПараметры)

//	ПримечаниеКРезультатуРазбора = Новый Структура("ИдентификаторОшибки, ТекстОшибки, РезультатРазбора", "", "", Неопределено);

//	ИдентификаторыОшибок = ИдентификаторыОшибокРазбораКодаМаркировки();

//	Если Настройки.ДоступныеВидыПродукции.Количество() = 0 Тогда
//		ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.УчетМаркируемойПродукцииНеВедется;
//		ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Учет маркируемой продукции не ведется.'");
//		Возврат Неопределено;
//	КонецЕсли;

//	ВидыПродукцииДляФильтра = Новый Массив;
//	Если ЗначениеЗаполнено(ВидыПродукции) И ТипЗнч(ВидыПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
//		ВидыПродукцииДляФильтра.Добавить(ВидыПродукции);
//	ИначеЕсли ЗначениеЗаполнено(ВидыПродукции) И ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
//		Для Каждого Значение Из ВидыПродукции Цикл
//			Если ЗначениеЗаполнено(Значение) И ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
//				ВидыПродукцииДляФильтра.Добавить(Значение);
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	ВидыПродукцииДляФильтра = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПродукцииДляФильтра);

//	ФильтрПоВидуПродукции = Новый Структура("Использовать, ВидыПродукции", Ложь, Неопределено);
//	Если ВидыПродукцииДляФильтра.Количество() > 0 Тогда
//		ФильтрПоВидуПродукции.Использовать = Истина;
//		ФильтрПоВидуПродукции.ВидыПродукции = Новый ФиксированныйМассив(ВидыПродукцииДляФильтра);
//	КонецЕсли;

//	РезультатРазбора = Неопределено;
//	Если ТипЗнч(ДанныеДляРазбора) = Тип("Строка") Тогда
//		Если СтрНайти(ДанныеДляРазбора, " ") > 0 Тогда
//			ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.ДанныеДляРазбораНекорректны;
//			ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Данные для разбора некорректны: код маркировки содержит пробел.'");
//			Возврат Неопределено;
//		КонецЕсли;
//		Если НайденНедопустимыйСимволXML(ДанныеДляРазбора) Тогда
//			РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(ДанныеДляРазбора);
//		КонецЕсли;
//	ИначеЕсли ТипЗнч(ДанныеДляРазбора) = Тип("Структура") Тогда
//		РезультатРазбора = ДанныеДляРазбора;
//	Иначе
//		ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.ДанныеДляРазбораНекорректны;
//		ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Данные для разбора некорректны.'");
//		Возврат Неопределено;
//	КонецЕсли;

//	НачинаетсяСоСкобки    = Ложь;
//	СодержитРазделительGS = Ложь;

//	Если РезультатРазбора = Неопределено Тогда
//		НачинаетсяСоСкобки = СтрНачинаетсяС(ДанныеДляРазбора, "(");
//		КодМаркировки      = ДанныеДляРазбора;
//	Иначе
//		КодМаркировки = Неопределено;
//		// Модифицирует свойства: СодержитРазделительGS и КодМаркировки
//		Если Не РезультатРазбораGS1МожетБытьОбработан(ДанныеДляРазбора, РезультатРазбора, ПримечаниеКРезультатуРазбора,
//			ИдентификаторыОшибок, МодульКонтекста, СодержитРазделительGS, КодМаркировки) Тогда
//			Возврат Неопределено;
//		КонецЕсли;
//	КонецЕсли;

//	ИмяСвойстваПозиции = "";
//	Если НачинаетсяСоСкобки Тогда
//		ИмяСвойстваПозиции = "СоСкобкой";
//	ИначеЕсли СодержитРазделительGS Тогда
//		ИмяСвойстваПозиции = "СРазделителемGS";
//	КонецЕсли;

//	ПараметрыРазбораКодаМаркировки = ИнициализироватьПараметрыРазбораКодаМаркировки();
//	ПараметрыРазбораКодаМаркировки.КодМаркировки             = КодМаркировки;
//	ПараметрыРазбораКодаМаркировки.НачинаетсяСоСкобки        = НачинаетсяСоСкобки;
//	ПараметрыРазбораКодаМаркировки.СодержитРазделительGS     = СодержитРазделительGS;
//	ПараметрыРазбораКодаМаркировки.РезультатРазбора          = РезультатРазбора;
//	ПараметрыРазбораКодаМаркировки.ДлинаКодаМаркировки       = СтрДлина(КодМаркировки);
//	ПараметрыРазбораКодаМаркировки.ФильтрПоВидуПродукции     = ФильтрПоВидуПродукции;
//	ПараметрыРазбораКодаМаркировки.МодульКонтекста           = МодульКонтекста;
//	ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ      = Новый Соответствие;
//	ПараметрыРазбораКодаМаркировки.ИмяСвойстваПозиции        = ИмяСвойстваПозиции;
//	ПараметрыРазбораКодаМаркировки.ПользовательскиеПараметры = ПользовательскиеПараметры;

//	Если Настройки.ТолькоСервер Тогда
//		ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ = Настройки.ОбщиеМодули;
//	Иначе
//		Для Каждого ИмяОбщегоМодуля Из Настройки.ИменаОбщихМодулей Цикл
//			Если ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля] = Неопределено Тогда
//				ПараметрыРазбораКодаМаркировки.ОбщиеМодулиРазбораКМ[ИмяОбщегоМодуля] = МодульКонтекста.ОбщийМодуль(ИмяОбщегоМодуля);
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;

//	НайденныеШаблоны = ШаблонРазбораКодаМаркировки(ПараметрыРазбораКодаМаркировки, Настройки);

//	Результат = Новый Массив;

//	Для Каждого ШаблонКодаМаркировки Из НайденныеШаблоны Цикл

//		ДанныеРезультата = КодМаркировкиСоответствуетШаблону(ПараметрыРазбораКодаМаркировки, Настройки, ШаблонКодаМаркировки);

//		Если ДанныеРезультата = Неопределено Тогда
//			Продолжить;
//		КонецЕсли;

//		Результат.Добавить(ДанныеРезультата);

//	КонецЦикла;

//	РезультатПоФильтру = РезультатРазбораКодаМаркировкиПоФильтру(Результат, ФильтрПоВидуПродукции);
//	
//	//Марк 2025-03-21 доп проверка на заполение 
//   	Для каждого Строка Из РезультатПоФильтру Цикл
//		Если Не ЗначениеЗаполнено(Строка.ВидыПродукции) тогда
//			Строка.ВидыПродукции	= ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");	
//		КонецЕсли;     
//		
//		Если Не ЗначениеЗаполнено(Строка.ВидУпаковки) тогда  
//			
//			Если СтрДлина(КодМаркировки) > 35 тогда
//				Строка.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая");	
//			иначе
//				Строка.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская");	
//			КонецЕсли;
//			
//		КонецЕсли;	
//	КонецЦикла; 
//	//

//	Если РезультатПоФильтру.Количество() = 0
//		Или СтрНачинаетсяС(КодМаркировки, "02") И Сред(КодМаркировки, 17, 2) = "37" Тогда
//		ДанныеРезультата = Неопределено;
//		Если ЭтоНеформализованныйКодМаркировки(ПараметрыРазбораКодаМаркировки, Настройки,
//			ДанныеРезультата, Новый ФиксированныйМассив(Результат)) Тогда
//			РезультатПоФильтру = РезультатРазбораКодаМаркировкиПоФильтру(
//			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеРезультата), ФильтрПоВидуПродукции);
//		КонецЕсли;
//	КонецЕсли;

//	Если РезультатПоФильтру.Количество() = 0 Тогда

//		Если Результат.Количество() > 0 Тогда
//			ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетДругимВидамПродукции;
//			ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Код маркировки соответствует другим видам продукции.'");
//			ПримечаниеКРезультатуРазбора.РезультатРазбора    = Результат;
//			Возврат Неопределено;
//		Иначе
//			ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиНеСоответствуетНиОдномуШаблону;
//			ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Код маркировки не соответствует ни одному шаблону.'");
//			Возврат Неопределено;
//		КонецЕсли;

//	ИначеЕсли РезультатПоФильтру.Количество() = 1 Тогда

//		Возврат РезультатПоФильтру[0];

//	Иначе

//		ДанныеРезультата = Неопределено;
//		Если ОбработатьРезультатНесколькихШаблонов(РезультатПоФильтру, ДанныеРезультата) Тогда
//			Возврат ДанныеРезультата;
//		КонецЕсли;

//		// К примеру логистические укаковки длиной 18 символов для ЕГАИС и ИСМП
//		ПримечаниеКРезультатуРазбора.ИдентификаторОшибки = ИдентификаторыОшибок.КодМаркировкиСоответствуетНесколькимШаблонам;
//		ПримечаниеКРезультатуРазбора.ТекстОшибки         = НСтр("ru = 'Код маркировки соответствует нескольким шаблонам.'");
//		ПримечаниеКРезультатуРазбора.РезультатРазбора    = РезультатПоФильтру;
//		Возврат Неопределено;

//	КонецЕсли;

//КонецФункции

&ИзменениеИКонтроль("РезультатРазбораКодаМаркировкиПоФильтру")
Функция ТБКРезультатРазбораКодаМаркировкиПоФильтру(РезультатРазбораКМ, ФильтрПоВидуПродукции)

	РезультатПоФильтру = Новый Массив;
	                      
	#Вставка
	//Марк-Вик 2025-03-20  
	Если РезультатРазбораКМ.Количество() > 0 Тогда
		
		РезультатРазбораКМ[0].ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"));   
		
		Если не ЗначениеЗаполнено(РезультатРазбораКМ[0].ВидУпаковки) и СтрДлина(РезультатРазбораКМ[0].КодМаркировки) > 39 Тогда
			РезультатРазбораКМ[0].ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая");
			
		ИначеЕсли не ЗначениеЗаполнено(РезультатРазбораКМ[0].ВидУпаковки) тогда			
			РезультатРазбораКМ[0].ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская");
		КонецЕсли;
		
		Массив = Новый Массив;
		Массив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
		Массив.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"));
		РезультатРазбораКМ[0].ВидыУпаковокПоВидамПродукции.Вставить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"), Массив);	 
		 
	КонецЕсли;
	//Конец
	#КонецВставки
	
	Для Каждого ДанныеРезультата Из РезультатРазбораКМ Цикл

		ВидыПродукцииПоФильтру = ВидыПродукцииПоФильтру(ФильтрПоВидуПродукции, ДанныеРезультата.ВидыПродукции);

		Если ВидыПродукцииПоФильтру.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		РезультатПоФильтру.Добавить(ДанныеРезультата);

		ДанныеРезультата.ВидыПродукции = ВидыПродукцииПоФильтру;

		ВидыУпаковокПоВидамПродукции = Новый Соответствие;
		Для Каждого ВидПродукции Из ДанныеРезультата.ВидыПродукции Цикл
			ВидыУпаковокПоВидамПродукции[ВидПродукции] = ДанныеРезультата.ВидыУпаковокПоВидамПродукции[ВидПродукции];
		КонецЦикла;
		ДанныеРезультата.ВидыУпаковокПоВидамПродукции = ВидыУпаковокПоВидамПродукции;

		Если Не ЗначениеЗаполнено(ДанныеРезультата.ВидУпаковки) Тогда
			ВидУпаковки  = Неопределено;
			ВидыУпаковок = Новый Соответствие;
			Для Каждого ВидПродукции Из ДанныеРезультата.ВидыПродукции Цикл
				Для Каждого ВидУпаковки Из ВидыУпаковокПоВидамПродукции[ВидПродукции] Цикл
					Если ВидыУпаковок[ВидУпаковки] = Неопределено Тогда
						ВидыУпаковок[ВидУпаковки] = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			ДанныеРезультата.ВидУпаковки = ?(ВидыУпаковок.Количество() = 1, ВидУпаковки, ДанныеРезультата.ВидУпаковки);
		КонецЕсли;

	КонецЦикла;

	Возврат РезультатПоФильтру;

КонецФункции
