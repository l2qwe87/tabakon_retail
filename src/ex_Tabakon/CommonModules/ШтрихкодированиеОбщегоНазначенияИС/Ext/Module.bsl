
Функция ТБКДанныеПоШтрихкодамEAN(ШтрихкодыEAN, ПараметрыСканирования, GTINПотребительскихУпаковок, МРЦ = Неопределено)экспорт
	// Только добавлена МРЦ для поиска хар-ки
	//Результат = ПродолжитьВызов(ШтрихкодыEAN, ПараметрыСканирования, GTINПотребительскихУпаковок);
	//Возврат Результат; 	ДанныеПоШтрихкодамEAN = Новый ТаблицаЗначений;

	ДанныеПоШтрихкодамEAN = Новый ТаблицаЗначений;

	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Номенклатура",                Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Характеристика",              Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Серия",                       Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Упаковка",                    Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ШтрихкодEAN",                 Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Весовой",                     Новый ОписаниеТипов("Булево"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ПредставлениеНоменклатуры",   Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ВидПродукции",                Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("МаркируемаяПродукция",        Новый ОписаниеТипов("Булево"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Количество",                  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 6)));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ТребуетсяОбработкаШтрихкода", Новый ОписаниеТипов("Булево"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ДанныеШтрихкода");
	ДанныеПоШтрихкодамEAN.Индексы.Добавить("ШтрихкодEAN");
	
	Если ШтрихкодыEAN.Количество() = 0 Тогда
		Возврат ДанныеПоШтрихкодамEAN;
	КонецЕсли;
	
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Набор",                       Новый ОписаниеТипов("Булево"));
	
	ДополнительныеПредставленияШтрихкодов = Новый Соответствие;
	
	Для Каждого ШтрихкодEAN Из ШтрихкодыEAN Цикл
		
		НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
		НоваяСтрока.ШтрихкодEAN = ШтрихкодEAN;
		
		//GTIN
		GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(ШтрихкодEAN);
		Если GTIN <> ШтрихкодEAN Тогда
			НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
			НоваяСтрока.ШтрихкодEAN = GTIN;
			ДополнительныеПредставленияШтрихкодов.Вставить(GTIN, ШтрихкодEAN);
		КонецЕсли;
		
		Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоEANИлиGTIN(GTIN) Тогда
			
			//EAN13
			Если Лев(GTIN, 1) = "0" Тогда
				EAN13 = Сред(GTIN, 2);
				Если EAN13 <> ШтрихкодEAN Тогда
					НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
					НоваяСтрока.ШтрихкодEAN = EAN13;
					ДополнительныеПредставленияШтрихкодов.Вставить(EAN13, ШтрихкодEAN);
				КонецЕсли;
			КонецЕсли;
			
			//UPC
			Если Лев(GTIN, 2) = "00" Тогда
				UPC = Сред(GTIN, 3);
				Если UPC <> ШтрихкодEAN Тогда
					НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
					НоваяСтрока.ШтрихкодEAN = UPC;
					ДополнительныеПредставленияШтрихкодов.Вставить(UPC, ШтрихкодEAN);
				КонецЕсли;
			КонецЕсли;
			
			//EAN8
			Если Лев(GTIN, 6) = "000000" Тогда
				EAN8 = Сред(GTIN, 7);
				Если EAN8 <> ШтрихкодEAN Тогда
					НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
					НоваяСтрока.ШтрихкодEAN = EAN8;
					ДополнительныеПредставленияШтрихкодов.Вставить(EAN8, ШтрихкодEAN);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПарамтерыПоискаРМК = Неопределено;
	Если ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("ДополнительныеПараметры") И ТипЗнч(ПараметрыСканирования.ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ПараметрыСканирования.ДополнительныеПараметры.Свойство("ПарамтерыПоискаРМК") Тогда
			ПарамтерыПоискаРМК = ПараметрыСканирования.ДополнительныеПараметры.ПарамтерыПоискаРМК;
		КонецЕсли;
	КонецЕсли;
	//ШтрихкодированиеИСПереопределяемый.ПриЗаполненииИнформацииПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN, ПарамтерыПоискаРМК);   
	ШтрихкодированиеИСПереопределяемый.ТБКПриЗаполненииИнформацииПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN, ПарамтерыПоискаРМК, МРЦ);
	
	ЭтоМаркаДляОбработкиБГосИС = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыСканирования, "ЭтоМаркаДляОбработкиБГосИС", Истина);
	Если ЭтоМаркаДляОбработкиБГосИС Тогда
		Если Не ПараметрыСканирования = Неопределено Тогда
			Если ТипЗнч(ПараметрыСканирования) = Тип("Структура") Тогда
				Если ПараметрыСканирования.Свойство("ЭтоМаркаДляОбработкиБГосИС") Тогда
					ПараметрыСканирования.Удалить("ЭтоМаркаДляОбработкиБГосИС");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПарамтерыПоискаРМК = Неопределено Тогда
			НеНайденТоварПоШтрихкодамВТаблице = Истина;
			Для Каждого СтрокаДанныхШтрихкода Из ДанныеПоШтрихкодамEAN Цикл
				Если ЗначениеЗаполнено(СтрокаДанныхШтрихкода.Номенклатура) Тогда
					НеНайденТоварПоШтрихкодамВТаблице = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если НеНайденТоварПоШтрихкодамВТаблице Тогда
				Для Каждого СтрокаДанныхШтрихкода Из ДанныеПоШтрихкодамEAN Цикл
					СтрокаДанныхШтрихкода.ТребуетсяОбработкаШтрихкода = Ложь;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыСканирования) = Тип("Структура") Тогда
		Если ПараметрыСканирования.Свойство("СсылкаНаОбъект") Тогда
			МассивТиповДокументовГосИС = ИнтеграцияЕГАИСРТПовтИсп.ТипыДокументовГосИС();
			Если Не МассивТиповДокументовГосИС.Найти(ТипЗнч(ПараметрыСканирования.СсылкаНаОбъект)) = Неопределено Тогда
				Для Каждого СтрокаДанныхШтрихкода Из ДанныеПоШтрихкодамEAN Цикл
					СтрокаДанныхШтрихкода.ТребуетсяОбработкаШтрихкода = Ложь;
				КонецЦикла
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КолонкиСтрокой = Новый Массив;
	Для Каждого Колонка Из ДанныеПоШтрихкодамEAN.Колонки Цикл
		КолонкиСтрокой.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодамEAN Цикл
		Если ДополнительныеПредставленияШтрихкодов.Получить(СтрокаТаблицы.ШтрихкодEAN) <> Неопределено Тогда
			СтрокаТаблицы.ШтрихкодEAN = ДополнительныеПредставленияШтрихкодов.Получить(СтрокаТаблицы.ШтрихкодEAN);
		КонецЕсли;
	КонецЦикла;
	ДанныеПоШтрихкодамEAN.Свернуть(СтрСоединить(КолонкиСтрокой, ","));
	
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Коэффициент",                               Новый ОписаниеТипов("Число"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ПлановоеКоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ТребуетВзвешивания",                        Новый ОписаниеТипов("Булево"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ПроизвольнаяЕдиницаУчета",                  Новый ОписаниеТипов("Булево"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ВидУпаковкиИС",                             Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ЧастичноеВыбытиеВариантУчета",              Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ЧастичноеВыбытиеНоменклатура",              Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ЧастичноеВыбытиеХарактеристика",            Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ЕмкостьПотребительскойУпаковки",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	
	Если ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры <> Неопределено Тогда
		
		Для Каждого КлючИЗначение Из ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры Цикл
			
			ШтрихкодEAN           = КлючИЗначение.Ключ;     // Строка
			ВариантыСопоставления = КлючИЗначение.Значение; // Массив Из Структура: {Номенклатура, Характеристика, Серия}
			
			Для Каждого ВариантСопоставления Из ВариантыСопоставления Цикл
				
				Отбор = Новый Структура("ШтрихкодEAN, Номенклатура, Характеристика");
				ЗаполнитьЗначенияСвойств(Отбор, ВариантСопоставления);
				Отбор.ШтрихкодEAN = ШтрихкодEAN;
				
				Если ДанныеПоШтрихкодамEAN.НайтиСтроки(Отбор).Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВариантСопоставления);
				
				НоваяСтрока.ШтрихкодEAN          = ШтрихкодEAN;
				НоваяСтрока.ВидПродукции         = ПараметрыСканирования.ДопустимыеВидыПродукции[0];
				НоваяСтрока.МаркируемаяПродукция = Истина;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИндексСтроки = ДанныеПоШтрихкодамEAN.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		
		ДанныеСтроки = ДанныеПоШтрихкодамEAN[ИндексСтроки];
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Номенклатура)
			И Не ДанныеСтроки.ТребуетсяОбработкаШтрихкода Тогда
			ДанныеПоШтрихкодамEAN.Удалить(ДанныеСтроки);
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	НаборGTIN = Новый Массив;
	УникальныеGTIN = Новый Соответствие;
	НаборНоменклатуры = Новый Массив;
	УникальнаяНоменклатура = Новый Соответствие;
	Для Каждого ЭлементДанных Из ДанныеПоШтрихкодамEAN Цикл
		
		Если ЭлементДанных.ТребуетсяОбработкаШтрихкода Тогда
			Продолжить;
		КонецЕсли;
		
		GTINСтроки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(ЭлементДанных.ШтрихкодEAN);
		Если УникальныеGTIN[GTINСтроки] = Неопределено Тогда
			НаборGTIN.Добавить(GTINСтроки);
			УникальныеGTIN.Вставить(GTINСтроки, Истина);
		КонецЕсли;
		
		Если УникальнаяНоменклатура[ЭлементДанных.Номенклатура] = Неопределено Тогда
			НаборНоменклатуры.Добавить(ЭлементДанных.Номенклатура);
			УникальнаяНоменклатура.Вставить(ЭлементДанных.Номенклатура, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	ОписанияНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(НаборНоменклатуры);
	ОписанияGTIN = ОписанияGTINПоДаннымШтрихкодов(ПараметрыСканирования, НаборGTIN);
	
	ДопустимаПродукцияИСМП = ДопустимаПродукцияИСМП(ПараметрыСканирования);
	НастроеннаяНоменклатураЧастичногоВыбытия = Неопределено;
	
	СозданиеНаборов = ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("СозданиеНаборов")
		И ПараметрыСканирования.СозданиеНаборов;
	
	// Заполнение коэффициентов упаковок (учетное количество в упаковке) и количества потребительских кодов в упаковке
	Для Каждого ЭлементДанных Из ДанныеПоШтрихкодамEAN Цикл
		
		Если Не ДопустимаПродукцияИСМП
			И ЭлементДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво Тогда
			ЭлементДанных.МаркируемаяПродукция = Ложь;
		КонецЕсли;
		
		Если ЭлементДанных.ТребуетсяОбработкаШтрихкода Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеНоменклатуры = ОписанияНоменклатуры.Получить(ЭлементДанных.Номенклатура);
		
		Если ОписаниеНоменклатуры <> Неопределено Тогда
			КоэффициентПересчета = ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке;
			ЭлементДанных.ТребуетВзвешивания             = (КоэффициентПересчета = 0);
			ЭлементДанных.ПроизвольнаяЕдиницаУчета       = (КоэффициентПересчета <> 1);
			ЭлементДанных.ЧастичноеВыбытиеВариантУчета   = ОписаниеНоменклатуры.ВариантЧастичногоВыбытия;
			ЭлементДанных.ЕмкостьПотребительскойУпаковки = ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки;
			Если ОписаниеНоменклатуры.ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
				Если НастроеннаяНоменклатураЧастичногоВыбытия = Неопределено Тогда
					//@skip-check query-in-loop
					НастроеннаяНоменклатураЧастичногоВыбытия = НастроеннаяНоменклатураЧастичногоВыбытия(НаборНоменклатуры);
				КонецЕсли;
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭлементДанных);
				Для Каждого СтрокаНайстройкиЧастичногоВыбытия Из НастроеннаяНоменклатураЧастичногоВыбытия.НайтиСтроки(СтруктураПоиска) Цикл
					ЭлементДанных.ЧастичноеВыбытиеНоменклатура   = СтрокаНайстройкиЧастичногоВыбытия.НоменклатураЧастичногоВыбытия;
					ЭлементДанных.ЧастичноеВыбытиеХарактеристика = СтрокаНайстройкиЧастичногоВыбытия.ХарактеристикаЧастичногоВыбытия;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		GTINСтроки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(ЭлементДанных.ШтрихкодEAN);
		
		Если ЗначениеЗаполнено(GTINСтроки) Тогда
			ЭтоGTINПотребителькойУпаковкиПоДаннымРазбораКодаМаркировки = (GTINПотребительскихУпаковок <> Неопределено И GTINПотребительскихУпаковок[GTINСтроки] <> Неопределено);
		Иначе
			ЭтоGTINПотребителькойУпаковкиПоДаннымРазбораКодаМаркировки = Ложь;
		КонецЕсли;
		
		ОписаниеGTIN = ОписанияGTIN.Получить(GTINСтроки);
		Если ОписаниеGTIN = Неопределено
			И ЭтоGTINПотребителькойУпаковкиПоДаннымРазбораКодаМаркировки Тогда
			ОписаниеGTIN = Новый Структура(
				"ВидУпаковки, КоличествоПотребительскихУпаковок",
				Перечисления.ВидыУпаковокИС.Потребительская, 1);
		КонецЕсли;
		
		Если ЭтоGTINПотребителькойУпаковкиПоДаннымРазбораКодаМаркировки
			И ОписаниеGTIN <> Неопределено
			И ОписаниеGTIN.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская
			И ОписаниеGTIN.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Набор Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'GTIN %1 найден в составе кода маркировки потребительской упаковки.
					           |В регистре Описание GTIN ИС %1 соответствует виду упаковки: %2.
					           |GTIN логистических, групповых и потребительских упаковок должны быть различными.'"),
					GTINСтроки, ОписаниеGTIN.ВидУпаковки));
			ОписаниеGTIN = Новый Структура(
				"ВидУпаковки, КоличествоПотребительскихУпаковок",
				Перечисления.ВидыУпаковокИС.Потребительская, 1);
		КонецЕсли;
		
		Если ЭлементДанных.Набор Тогда
			ЭлементДанных.ВидУпаковкиИС = Перечисления.ВидыУпаковокИС.Набор;
		КонецЕсли;
		
		// Коэффициент, заданный для упаковки имеет приоритет перед коэффициентом из Описания GTIN
		Если ЗначениеЗаполнено(ЭлементДанных.Упаковка)
			И Не ЭлементДанных.ТребуетВзвешивания Тогда
			
			ЭлементДанных.Коэффициент = ЭлементДанных.Количество;
			
			ЭлементДанных.ПлановоеКоличествоПотребительскихУпаковок = ЭлементДанных.Количество / КоэффициентПересчета;
			Если ЗначениеЗаполнено(ОписаниеGTIN) И ЗначениеЗаполнено(ОписаниеGTIN.ВидУпаковки) Тогда
				ЭлементДанных.ВидУпаковкиИС = ОписаниеGTIN.ВидУпаковки;
			ИначеЕсли ЭлементДанных.ПлановоеКоличествоПотребительскихУпаковок = 1 Тогда
				ЭлементДанных.ВидУпаковкиИС = Перечисления.ВидыУпаковокИС.Потребительская;
			КонецЕсли;
		
		ИначеЕсли ЗначениеЗаполнено(ОписаниеGTIN) Тогда
			
			ПлановоеКоличествоПотребительскихУпаковок = ОписаниеGTIN.КоличествоПотребительскихУпаковок;
			Если ПлановоеКоличествоПотребительскихУпаковок = 0
				И (Не СозданиеНаборов И ОписаниеGTIN.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор) Тогда
				ПлановоеКоличествоПотребительскихУпаковок = 1;
			КонецЕсли;
			
			ЭлементДанных.ПлановоеКоличествоПотребительскихУпаковок = ПлановоеКоличествоПотребительскихУпаковок;
			
			Если ЭлементДанных.ТребуетВзвешивания Тогда
				ЭлементДанных.Коэффициент = 0;
			Иначе
				ЭлементДанных.Количество  = ПлановоеКоличествоПотребительскихУпаковок * КоэффициентПересчета;
				ЭлементДанных.Коэффициент = ПлановоеКоличествоПотребительскихУпаковок * КоэффициентПересчета;
			КонецЕсли;
			
			ЭлементДанных.ВидУпаковкиИС = ОписаниеGTIN.ВидУпаковки;
			
		КонецЕсли;
		
		ЭлементДанных.Количество = Окр(ЭлементДанных.Количество, 3);
		
	КонецЦикла;
	
	ДанныеПоШтрихкодамEAN.Колонки.Удалить("Набор");
	ДанныеПоШтрихкодамEAN.Индексы.Добавить("ШтрихкодEAN");
	
	Возврат ДанныеПоШтрихкодамEAN;
КонецФункции

&Вместо("ПроверитьНаСоответствиеНоменклатурыВидуПродукции")
Процедура ТБКПроверитьНаСоответствиеНоменклатурыВидуПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	//Вик 2024-08-06 отключил проверку
	
	// Вставить содержимое метода.
	//ПродолжитьВызов(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
КонецПроцедуры

&Вместо("ОбработатьВводШтрихкода")
Функция ТБКОбработатьВводШтрихкода(Форма, ВходящиеДанные, КэшированныеЗначения, ПараметрыСканирования)

	ДанныеШтрихкода = ОбщегоНазначения.СкопироватьРекурсивно(ВходящиеДанные);
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ПараметрыСканирования(Форма);
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода, ТипЗнч(ВходящиеДанные) = Тип("Структура"));
	
	Если ДанныеПоШтрихкодуУжеПолучены(ДанныеШтрихкода)
		И (ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор) Тогда
		
		Возврат РезультатОбработкиШтрихкодаМаркируемойПродукцииПослеУточнения(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	ДанныеШтрихкодаСписок = Новый Массив;
	ДанныеШтрихкодаСписок.Добавить(ДанныеШтрихкода);
	
	ДанныеПоШтрихкодам    = ИнициализацияДанныхПоШтрихкодам();
	ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	
	ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора = Ложь;
	ДанныеПоШтрихкодам.ЭтоОбработкаВводаШтрихкода = Истина;
	
	НастройкаЗаписиЛоговПроверкиКодовМаркировки(ПараметрыСканирования, ДанныеПоШтрихкодам);
	
	// Логирование исходного значения штрихкода со сканера
	ЗаписьЛоговРаботыСоШтрихкодамиИСМП(ПараметрыСканирования, ДанныеШтрихкодаСписок);
	
	ПодготовитьДанныеКодовМаркировкиДляОбработки(ДанныеПоШтрихкодам, ДанныеШтрихкодаСписок, ПараметрыСканирования);
	
	ОбработатьШтрихкодыПоКегамНаОборудованииРозливаИСМП(
		ДанныеПоШтрихкодам,
		ДанныеШтрихкодаСписок,
		ПараметрыСканирования,,
		ДанныеКодовМаркировки);
	
	// Заполнение массива видов продукции штрихкодов. При выполнении проверок
	// можно будет использовать ПрисутствуетТабачнаяПродукция(ВидыПродукции)
	ЗаполнитьВидыПродукцииВДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ПоместитьДанныеДокументаВКэшМаркируемойПродукции(Форма, ПараметрыСканирования);
	
	РезультатыПроверок = ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	Если РезультатыПроверок.Количество() > 0 Тогда
		
		Результат = ОбработатьОчисткуКэшаИОтложенныхКодов(ПараметрыСканирования, ДанныеКодовМаркировки, РезультатыПроверок);
		НастройкаЗаписиЛоговПроверкиКодовМаркировки(ПараметрыСканирования, ДанныеПоШтрихкодам, Ложь);
		
		Возврат Результат;
		
	КонецЕсли;                              
	
	
	ЗаполнитьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, Форма);
	
	//Вик 2024-08-16
	Попытка
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") тогда
			ДанныеПоШтрихкодам.ОтключитьЗапросВСервисПоОперацииИПродукции	=	Истина;   
		КонецЕсли;
	Исключение
	КонецПопытки;
	//
	
	// В режиме одиночного сканирования всегда должен быть только 1 результат обработки
	// иначе форма документа не сможет корректно обработать данные.
	ПроверитьСоответствиеДетализацииРежимуСканирования(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ЕстьОшибки = ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	//Марк 2025-02-19 статус Продан пробивать по бк
	Если ЕстьОшибки Тогда
		
		Статус = "";
		Если ДанныеКодовМаркировки.Количество() Тогда
			
			Если ДанныеКодовМаркировки.Колонки.Найти("Статус") <> Неопределено Тогда
			
				Статус = Строка(ДанныеКодовМаркировки[0].Статус);	
			
			КонецЕсли;
		
		КонецЕсли;	
		
		Если Статус = "Неопределено" или Статус = "" Тогда
			
			Если ДанныеКодовМаркировки.Количество() Тогда
				
				Если ДанныеКодовМаркировки.Колонки.Найти("ПараметрыОшибки") <> Неопределено Тогда
					
					Если ДанныеКодовМаркировки[0].ПараметрыОшибки <> Неопределено Тогда
						
						Если ДанныеКодовМаркировки[0].ПараметрыОшибки.Свойство("Статус") Тогда
						
							Статус = Строка(ДанныеКодовМаркировки[0].ПараметрыОшибки.Статус);	
						
						КонецЕсли;	
					
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если Статус <> "Введен в оборот" И Статус <> "Введен в оборот (возвращен)" И Статус <> "Неопределен" И Статус <> "" Тогда
			
			//Если что то с блоками нужно обговрить с Таней
			Если СтрДлина(ДанныеКодовМаркировки[0].ШтрихкодУпаковки) >= 40 Тогда 
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Пробейте блок по пачкам";
				Сообщение.Сообщить();
				
			Иначе 
				
				ДанныеКодовМаркировки[0].ЭтоШтрихкодНоменклатуры = Истина;
				ДанныеКодовМаркировки[0].Статус = Неопределено;
				ДанныеКодовМаркировки[0].ТекстОшибки = "";
				РезультатыПроверок = ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
				
				Результат = ОбработатьОчисткуКэшаИОтложенныхКодов(ПараметрыСканирования, ДанныеКодовМаркировки, РезультатыПроверок);
				НастройкаЗаписиЛоговПроверкиКодовМаркировки(ПараметрыСканирования, ДанныеПоШтрихкодам, Ложь);
				
				Возврат Результат;	
				
			КонецЕсли; 
			 
		КонецЕсли; 
		
	КонецЕсли;	
	//КонецМарк 
	
	
	//Марк 2025-05-21 Проверка на владельца https://jira.tabkn.ru/browse/KRO-26 на Ффд12 это не работает из  проверка выполняется через токен есть на лм
	//РазрешительныйРежимТелоОтветаJSON = ДанныеКодовМаркировки[0].РазрешительныйРежимТелоОтветаJSON;
	//Если ДанныеКодовМаркировки[0].РазрешительныйРежимКодОтвета = "200" И ЗначениеЗаполнено(РазрешительныйРежимТелоОтветаJSON) Тогда
	//
	//	СтркутураОтветаJSON = ОбщегоНазначения.jsonВСтруктура_Общая(РазрешительныйРежимТелоОтветаJSON);
	//	
	//    Если не СтркутураОтветаJSON.codes[0].isOwner Тогда
	//	
	//		ДанныеКодовМаркировки[0].ЭтоШтрихкодНоменклатуры = Истина;
	//		ДанныеКодовМаркировки[0].Статус = Неопределено;
	//		ДанныеКодовМаркировки[0].ТекстОшибки = "";
	//		РезультатыПроверок = ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	//		
	//		Результат = ОбработатьОчисткуКэшаИОтложенныхКодов(ПараметрыСканирования, ДанныеКодовМаркировки, РезультатыПроверок);
	//		НастройкаЗаписиЛоговПроверкиКодовМаркировки(ПараметрыСканирования, ДанныеПоШтрихкодам, Ложь);
	//		
	//		Возврат Результат;
	//	
	//	КонецЕсли; 
	//	
	//КонецЕсли;
	//КонецМарк

	
	ПроверитьНеобходимостьУточненияДанныхУПользователя(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ДанныеПоШтрихкодам.ЭтоСканированиеВФормеПроверкиИПодбора = (ТипЗнч(Форма) = Тип("УникальныйИдентификатор"));
	
	РезультатыОбработок = ОбработатьДанныеПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки, Форма, РезультатыПроверок);
	
	// Логирование результатов разбора штрихкода
	ЗаписьЛоговРаботыСоШтрихкодамиИСМП(ПараметрыСканирования, РезультатыОбработок);
	
	НастройкаЗаписиЛоговПроверкиКодовМаркировки(ПараметрыСканирования, ДанныеПоШтрихкодам, Ложь);
	СохранитьАдресЛогаЗапросовПоСтрокам(ПараметрыСканирования, РезультатыОбработок, ДанныеПоШтрихкодам);
	
	//@skip-check constructor-function-return-section
	Возврат РезультатыОбработок[ДанныеКодовМаркировки[0].Штрихкод];
	

КонецФункции

&Вместо("ДанныеПоШтрихкодам")
Функция ТБКДанныеПоШтрихкодам(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения)
	// Вставить содержимое метода.
	Результат = ПродолжитьВызов(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения);
	
	Для каждого стрМарки из Результат.ДанныеКодовМаркировок Цикл
		стрДанные = Результат.ИнформацияПоШтрихкодамEAN.Найти(стрМарки.EAN);
		Если стрДанные <> неопределено Тогда
			стрМарки.Номенклатура = стрДанные.Номенклатура;
			Если стрМарки.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики Тогда
				стрМарки.Характеристика = стрДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Вик 2024-08-15
	Если ЗначениеЗаполнено(ПараметрыСканирования.Характеристика) тогда
		Для каждого стрМарки из Результат.ДанныеКодовМаркировок Цикл
			
			Если стрМарки.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики 
					и не ЗначениеЗаполнено(стрМарки.Характеристика) Тогда
				стрМарки.Характеристика = ПараметрыСканирования.Характеристика;
			КонецЕсли;
		
		КонецЦикла;
		
		Для каждого стрМарки из Результат.ОбработанныеШтрихкоды Цикл
			
			Если стрМарки.Значение.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики 
					и не ЗначениеЗаполнено(стрМарки.Значение.Характеристика) Тогда
				стрМарки.Значение.Характеристика = ПараметрыСканирования.Характеристика;
			КонецЕсли;
		
		КонецЦикла;	
	КонецЕсли;
	//	
	
	Возврат Результат;
КонецФункции
