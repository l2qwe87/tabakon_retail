
&Вместо("ДанныеПоШтрихкодамEAN")
Функция ТБКДанныеПоШтрихкодамEAN(ШтрихкодыEAN)
	// Вставить содержимое метода.
	штрих0 = "";
	Если ШтрихкодыEAN.Количество() = 1 Тогда
		штрихОригинал = ШтрихкодыEAN[0];
		штрих0 = штрихОригинал;
		
		штрихАльтернатива = Новый Массив();
		
		
		//штрих0 = ШтрихкодыEAN[0]; 		
		Если СтрДлина(штрихОригинал) = 8 тогда
			штрихАльтернатива.Добавить("00000"+штрихОригинал);
		КонецЕсли;
		
		Если (СтрДлина(штрихОригинал) = 12)И(Лев(штрихОригинал,4)="0000") тогда
			штрихАльтернатива.Добавить(Прав(штрихОригинал,8));
		КонецЕсли;
		
		Если СтрДлина(штрихОригинал) = 12 тогда
			штрихАльтернатива.Добавить("0"+штрихОригинал);
		КонецЕсли;
			
		Если (СтрДлина(штрихОригинал) = 13)И(Лев(штрихОригинал,5)="00000") тогда
			штрихАльтернатива.Добавить(Прав(штрихОригинал,8));
		КонецЕсли;
		
		Если (СтрДлина(штрихОригинал) = 13)И(Лев(штрихОригинал,1)="0") тогда
			штрихАльтернатива.Добавить(Прав(штрихОригинал,12));
		КонецЕсли;

		               
		Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.Штрихкоды ГДЕ Штрихкод=&Штрихкод");	
		Запрос.УстановитьПараметр("Штрихкод",штрихОригинал);
		выборкаШтрихкоды = Запрос.Выполнить().Выбрать();
		флНашли = Ложь;
		
		Если (НЕ выборкаШтрихкоды.Следующий()) ТОГДА
			
			Для Каждого штрих1 из штрихАльтернатива Цикл
				Запрос.УстановитьПараметр("Штрихкод",штрих1);
				выборкаШтрихкоды = Запрос.Выполнить().Выбрать();
				Если выборкаШтрихкоды.Следующий() Тогда	
					ПроверитьШтрихКодыДляХарактеристик(штрих0,выборкаШтрихкоды.Владелец,выборкаШтрихкоды, истина);
					флНашли = Истина;
					break;
				КонецЕсли;
			конецЦикла;
			
		Иначе
			ПроверитьШтрихКодыДляХарактеристик(штрих0,выборкаШтрихкоды.Владелец,выборкаШтрихкоды);
			флНашли = Истина;
		КонецЕсли;
		
		//Поиск в дублирующем регистре ТБК_Штрихкоды. Все тоже самое но по другому регистру +
		//запись в регистр штрихкоды если нашли
		Если не флНашли тогда
			Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.ТБК_Штрихкоды ГДЕ Штрихкод В(&Штрихкод0, &Штрихкод1)");	
			Запрос.УстановитьПараметр("Штрихкод0",штрих0);
			Запрос.УстановитьПараметр("Штрихкод1",штрих1);
			выборкаШтрихкоды = Запрос.Выполнить().Выбрать();
		
			Если выборкаШтрихкоды.Следующий() ТОГДА
				ПроверитьШтрихКодыДляХарактеристик(штрих0,выборкаШтрихкоды.Владелец,выборкаШтрихкоды,Истина);
			КонецЕсли; 
		КонецЕсли;
		//		
	КонецЕсли; 	
	
	Результат = ПродолжитьВызов(ШтрихкодыEAN);
	
	Возврат Результат;	
КонецФункции


Процедура ПроверитьШтрихКодыДляХарактеристик(штрихкод, номенклатура, прототип, необходимоСоздатьЗапись = ложь);
	
	Если НЕ номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики  Тогда
		Если необходимоСоздатьЗапись Тогда
			запись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств( запись,прототип);
			запись.Штрихкод = штрихкод;
			запись.Записать();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	               |	Штрихкоды.Штрихкод КАК Штрихкод
	               |ИЗ
	               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	               |		ПО (Штрихкоды.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
	               |			И (Штрихкоды.Штрихкод = &Штрихкод)
	               |			И (Штрихкоды.Владелец = &номенклатура)
	               |ГДЕ
	               |	ХарактеристикиНоменклатуры.Владелец = &номенклатура
	               |	И Штрихкоды.Штрихкод ЕСТЬ NULL";

	Запрос.УстановитьПараметр("штрихкод",штрихкод);
	Запрос.УстановитьПараметр("номенклатура",номенклатура);
	
	рез = Запрос.Выполнить().Выбрать();
	Пока рез.Следующий() Цикл
		запись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств( запись,прототип);
		запись.Штрихкод = штрихкод;
		запись.Характеристика =  рез.Характеристика;
		
		Если СтрДлина(запись.Штрихкод) = 8 Тогда
			запись.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;
		иначе
			запись.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		КонецЕсли;
		
		запись.Записать();
	КонецЦикла;
	
	РегистрыСведений.Штрихкоды.ЧисткаШтрихкодов(номенклатура);
КонецПроцедуры

//&Вместо("ВидПродукцииИСПоШтрихкодуНоменклатуры")
//Функция ТБКВидПродукцииИСПоШтрихкодуНоменклатуры(Штрихкод)
//	// Вставить содержимое метода.
//	Результат = ПродолжитьВызов(Штрихкод);
//	Если Результат = Перечисления.ВидыПродукцииИС.Табачная Тогда
//		Результат = неопределено;
//	КонецЕсли;
//	Возврат Результат;
//КонецФункции

//&Вместо("РезультатОбработкиДанныеПоКодуМаркировкиНеНайдены")
//Функция ТБКРезультатОбработкиДанныеПоКодуМаркировкиНеНайдены(Форма, ДанныеПоШтрихкодам, ШтрихкодИКоличество, ПараметрыСканирования)
//	// Вставить содержимое метода.
//	
//	Если (ТекущаяДата() >= ИнтеграцияМОТПВызовСервера.ДатаОбязательнойМаркировкиТабачнойПродукции()) Тогда
//		
//		РезультатОбработки = ПродолжитьВызов(Форма, ДанныеПоШтрихкодам, ШтрихкодИКоличество, ПараметрыСканирования);
//		
//	Иначе
//		
//		РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода();
//		РезультатОбработки.ИсходныеДанные = ШтрихкодИКоличество;
//		ДанныеШтрихкода = ДанныеПоШтрихкодам.НеобработанныеШтрихкоды.Получить(ШтрихкодИКоличество.Штрихкод);
//		РезультатОбработки.ТребуетсяОбработкаШтрихкода = Истина;
//		РезультатОбработки.ОбработкаШтрихкодаБезМарки = истина;
//		//РезультатОбработки.ОткрытьФормуВводаКодаМаркировки = истина;
//		
//	КонецЕсли;	
//	
//	Возврат РезультатОбработки;
//КонецФункции

//&Вместо("ОпределитьИнформациюПоGTINКодовМаркировки")
//Процедура ТБКОпределитьИнформациюПоGTINКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования)
//	// Вставить содержимое метода.
//	ПродолжитьВызов(ДанныеПоШтрихкодам, ПараметрыСканирования);
//	
//	мКэшПроверка = новый Массив;
//	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
//		ШтрихкодEAN = EANИзКодаМаркировки(СтрокаДанных.КодМаркировки);
//		Если мКэшПроверка.Найти(ШтрихкодEAN) = неопределено Тогда
//			мКэшПроверка.Добавить(ШтрихкодEAN);
//			
//			МРЦПачки = ШтрихкодированиеМОТПКлиентСервер.МРЦКодаМаркировкиТабачнойПачки(СтрокаДанных.КодМаркировки);
//			Если МРЦПачки = Неопределено Тогда
//				МРЦБлока = ШтрихкодированиеМОТПКлиентСервер.МРЦКодаМаркировкиБлока(СтрокаДанных.КодМаркировки);
//				Если МРЦБлока <> Неопределено Тогда
//					мрц = МРЦБлока/10;
//				КонецЕсли
//			Иначе
//				мрц = МРЦПачки;
//			Конецесли;
//			
//			
//			мУдалить = новый Массив;
//			Для Каждого стр из ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN Цикл
//				Если стр.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики Тогда
//					Если стр.ШтрихкодEAN=ШтрихкодEAN И Строка(стр.Характеристика)<>Строка(мрц) Тогда
//						мУдалить.Добавить(стр);
//					КонецЕсли;
//				КонецЕсли;
//			КонецЦикла;
//			
//			Для Каждого стр из мУдалить Цикл
//				ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN.Удалить(стр);	
//			КонецЦикла;
//			
//			
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

&Вместо("ДанныеПоШтрихкодам")
Функция ТБКДанныеПоШтрихкодам(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения)
	// Вставить содержимое метода.
	Результат = ПродолжитьВызов(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения);
	Для каждого стрМарки из Результат.ДанныеКодовМаркировок Цикл
		стрДанные = Результат.ИнформацияПоШтрихкодамEAN.Найти(стрМарки.EAN);
		Если стрДанные <> неопределено Тогда
			стрМарки.Номенклатура = стрДанные.Номенклатура;
			Если стрМарки.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики Тогда
				стрМарки.Характеристика = стрДанные.Характеристика;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Возврат Результат;
КонецФункции

&Вместо("ОбработатьВводШтрихкода")
Функция ТБКОбработатьВводШтрихкода(Форма, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования)
	// Вставить содержимое метода.
	Результат = ПродолжитьВызов(Форма, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	Если НЕ ЗначениеЗаполнено(Результат.Штрихкод) Тогда
		Результат.Штрихкод = ДанныеШтрихкода.Штрихкод;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ТБКEANИзКодаМаркировки(КодМаркировки) экспорт
		Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
	//СоставКодаМаркировкиМОТП = МодульШтрихкодированиеМОТПКлиентСервер.СоставКодаМаркировки(КодМаркировки);
	//
	//МодульШтрихкодированиеИСМПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПКлиентСервер");
	//СоставКодаМаркировкиИСМП = МодульШтрихкодированиеИСМПКлиентСервер.СоставКодаМаркировки(КодМаркировки);
	//
	//Если СоставКодаМаркировкиМОТП <> Неопределено Тогда
	//	GTIN = СоставКодаМаркировкиМОТП.GTIN;
	//ИначеЕсли СоставКодаМаркировкиИСМП <> Неопределено Тогда
	//	GTIN = СоставКодаМаркировкиИСМП.GTIN;
	//Иначе
	//	Возврат Неопределено;
	//КонецЕсли; 
	
	СоставКодаМаркировки = СоставКодаМаркировки(КодМаркировки);

	Если СоставКодаМаркировки <> Неопределено Тогда
		GTIN = СоставКодаМаркировки.GTIN;
	Иначе
		Возврат Неопределено;
	КонецЕсли;    
	
	//ШтрихкодEAN = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(GTIN);
	ШтрихкодEAN = РазборКодаМаркировкиИССлужебныйКлиентСервер.ШтрихкодEANИзGTIN(GTIN);
	Если ЗначениеЗаполнено(ШтрихкодEAN) Тогда
		Возврат ШтрихкодEAN;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции 

Функция СоставКодаМаркировки(КодМаркировки) Экспорт
	
	ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
	
	РезультатРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(КодМаркировки, ВидПродукции);
	
	Если РезультатРазбора = Неопределено
		Или РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоставКодаМаркировки = РезультатРазбора.СоставКодаМаркировки;
	
	Результат = Новый Структура("ГрупповаяУпаковка, GTIN, СерийныйНомер, МРЦ, КодПроверки");
	
	Результат.ГрупповаяУпаковка = (РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
	Результат.GTIN              = СоставКодаМаркировки.GTIN;
	Результат.СерийныйНомер     = СоставКодаМаркировки.СерийныйНомер;
	
	Если СоставКодаМаркировки.Свойство("МРЦ") И ЗначениеЗаполнено(СоставКодаМаркировки.МРЦ) Тогда
		Результат.МРЦ = СоставКодаМаркировки.МРЦ;
	КонецЕсли;
	
	Если СоставКодаМаркировки.Свойство("КодПроверки") И ЗначениеЗаполнено(СоставКодаМаркировки.КодПроверки) Тогда
		Результат.КодПроверки = СоставКодаМаркировки.КодПроверки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


//&Вместо("ДанныеНеизвестнойМаркируемойПродукцииПоШтрихкодам")
//Функция ТБКДанныеНеизвестнойМаркируемойПродукцииПоШтрихкодам(ШтрихкодыКОбработке, ДанныеПоШтрихкодам, ПараметрыСканирования)
//	СоответствиеШтрихкодаВидуПродукции          = ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции;
//	ДанныеНеизвестнойПродукции                  = Новый Соответствие;
//	НеобработанныеШтрихкодыАлкогольнойПродукции = Новый Массив;
//	НеобработанныеШтрихкодыТабачнойПродукции    = Новый Массив;
//	НеобработанныеШтрихкодыОбувнойПродукции     = Новый Массив;

//	Для Каждого Штрихкод Из ШтрихкодыКОбработке Цикл
//		
//		Если СоответствиеШтрихкодаВидуПродукции[Штрихкод] = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
//			НеобработанныеШтрихкодыАлкогольнойПродукции.Добавить(Штрихкод);
//		ИначеЕсли (СоответствиеШтрихкодаВидуПродукции[Штрихкод] = Перечисления.ВидыПродукцииИС.Табачная) Тогда 
//			НеобработанныеШтрихкодыТабачнойПродукции.Добавить(Штрихкод);
//		ИначеЕсли СоответствиеШтрихкодаВидуПродукции[Штрихкод] = Перечисления.ВидыПродукцииИС.Обувная Тогда
//			НеобработанныеШтрихкодыОбувнойПродукции.Добавить(Штрихкод);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
//		И ПрисутствуетАлкогольнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
//		
//		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
//		
//		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
//		ДанныеНеизвестнойАлкогольнойПродукции = МодульШтрихкодированиеЕГАИС.ДанныеНеизвестнойМаркируемойПродукции(
//			НеобработанныеШтрихкодыАлкогольнойПродукции, ПараметрыСканирования);
//		
//		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеНеизвестнойПродукции, ДанныеНеизвестнойАлкогольнойПродукции);
//		
//	КонецЕсли;
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
//		
//		Если ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
//			
//			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
//			
//			//ТБКУниверсальныеМарки +++
//			//ДанныеНеизвестнойТабачнойПродукции = МодульШтрихкодированиеМОТП.ДанныеНеизвестнойМаркируемойПродукции(
//			//	НеобработанныеШтрихкодыТабачнойПродукции, ПараметрыСканирования, ДанныеПоШтрихкодам.ТекстОшибки );
//			
//			Если ДанныеПоШтрихкодам.Свойство("ШтрихкодУниверсальнойМарки") тогда
//				ДанныеНеизвестнойТабачнойПродукции = ТБКДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСтатусаМОТП(
//					НеобработанныеШтрихкодыТабачнойПродукции, ПараметрыСканирования, ДанныеПоШтрихкодам.ТекстОшибки, ДанныеПоШтрихкодам.ШтрихкодУниверсальнойМарки );
//			иначе
//				ДанныеНеизвестнойТабачнойПродукции = ТБКДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСтатусаМОТП(
//					НеобработанныеШтрихкодыТабачнойПродукции, ПараметрыСканирования, ДанныеПоШтрихкодам.ТекстОшибки );
//				//ДанныеНеизвестнойТабачнойПродукции = МодульШтрихкодированиеМОТП.ДанныеНеизвестнойМаркируемойПродукции(
//				//	НеобработанныеШтрихкодыТабачнойПродукции, ПараметрыСканирования, ДанныеПоШтрихкодам.ТекстОшибки);
//			КонецЕсли;
//			//ТБКУниверсальныеМарки ---
//		
//			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеНеизвестнойПродукции, ДанныеНеизвестнойТабачнойПродукции);
//			
//		КонецЕсли;
//		
//		Если ПрисутствуетОбувнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
//			
//			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
//			ДанныеНеизвестнойОбувнойПродукции = МодульШтрихкодированиеИСМПСлужебный.ДанныеНеизвестнойМаркируемойПродукции(
//				НеобработанныеШтрихкодыОбувнойПродукции, ПараметрыСканирования, ДанныеПоШтрихкодам);
//			
//			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеНеизвестнойПродукции, ДанныеНеизвестнойОбувнойПродукции);
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Возврат ДанныеНеизвестнойПродукции;

//КонецФункции

Функция ТБКДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСтатусаМОТП(КодыМаркировки, ПараметрыСканирования,ТекстОшибки, ШтрихкодУниверсальнойМарки = "")
	// Вставить содержимое метода.
	//Изменил
	//Результат = ПродолжитьВызов(КодыМаркировки, ПараметрыСканирования);
	ОбработанныеШтрихкоды       = Новый Соответствие;
	МассивEANДляПолученияДанных = Новый Массив;
	СоответствиеШтрихкодов      = Новый Соответствие;
	
	//Вик 2024-02-16 универсальные 
	Если ШтрихкодУниверсальнойМарки = "" тогда
		Для Каждого КодМаркировки Из КодыМаркировки Цикл
			
			ЗначениеEAN = "";
			
			Если ЭтоКодМаркировкиТабачнойПачки(КодМаркировки, ЗначениеEAN) Или ЭтоКодМаркировкиБлока(КодМаркировки, ЗначениеEAN) Тогда
				
				СоответствиеШтрихкодов.Вставить(КодМаркировки, ЗначениеEAN);
				МассивEANДляПолученияДанных.Добавить(ЗначениеEAN);
				
			КонецЕсли;
			
		КонецЦикла;
	иначе
		Для Каждого КодМаркировки Из КодыМаркировки Цикл
			МассивEANДляПолученияДанных.Добавить(ШтрихкодУниверсальнойМарки);	
			СоответствиеШтрихкодов.Вставить(КодМаркировки,ШтрихкодУниверсальнойМарки); 
		КонецЦикла;
		//КонецВик  
	КонецЕсли;

			
	
	ДанныеПоШтрихкодамEAN = ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN(МассивEANДляПолученияДанных);
	СуществующиеУпаковки = ШтрихкодированиеИС.ШтрихкодыУпаковок(КодыМаркировки);
	
	МассивОшибок = Новый Массив;
	ШаблонОшибки = НСтр("ru='Штрихкод %1 требуется сопоставить с номенклатурой'");
	
	
	Серия = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
	
	ДанныеМаркируемойНоменклатурыПоДаннымУПД = Неопределено;
	
	Для Каждого КлючЗначение Из СоответствиеШтрихкодов Цикл
		
		КодМаркировки = КлючЗначение.Ключ;
		ШтрихкодEAN   = КлючЗначение.Значение;
		
		ПараметрыОтбора = Новый Структура("ШтрихкодEAN", ШтрихкодEAN);
		НайденныеСтроки = ДанныеПоШтрихкодамEAN.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			Номенклатура   = НайденныеСтроки[0].Номенклатура;
			Характеристика = НайденныеСтроки[0].Характеристика;
			Серия          = НайденныеСтроки[0].Серия;
			
		ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
			
			Номенклатура   = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
			Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
			
		Иначе
			
			Если ДанныеМаркируемойНоменклатурыПоДаннымУПД = Неопределено Тогда
				ДанныеМаркируемойНоменклатурыПоДаннымУПД = ДанныеМаркируемойНоменклатурыПоДаннымУПД(ПараметрыСканирования.СсылкаНаОбъект);
			КонецЕсли;
			
			НоменклатураХарактеристика = ДанныеМаркируемойНоменклатурыПоДаннымУПД.Получить(КодМаркировки);
			
			Если НоменклатураХарактеристика = Неопределено Тогда
				
				ТекстОшибки = СтрШаблон(ШаблонОшибки, ШтрихкодEAN);
				МассивОшибок.Добавить(ТекстОшибки);
				
				Продолжить;
			КонецЕсли;
			
			Номенклатура   = НоменклатураХарактеристика.Номенклатура;
			Характеристика = НоменклатураХарактеристика.Характеристика;
			
		КонецЕсли;
		
		ЭтоТабачнаяПачка     = Ложь;
		СоставКодаМаркировки = Неопределено;
		ВидПродукции         = Перечисления.ВидыПродукцииИС.Табак;
		РезультатРазбора     = ШтрихкодированиеИСВызовСервера.РазобратьКодМаркировки(КодМаркировки, ВидПродукции);
		Если РезультатРазбора <> Неопределено Тогда
			ЭтоТабачнаяПачка     = (РезультатРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская);
			СоставКодаМаркировки = РезультатРазбора.СоставКодаМаркировки;
		КонецЕсли;
		
		ДанныеКодаМаркировки = ИнициализироватьДанныеКодаМаркировки();
		ЗаполнитьЗначенияСвойств(ДанныеКодаМаркировки, СоставКодаМаркировки);
		ДанныеКодаМаркировки.Номенклатура              = Номенклатура;
		ДанныеКодаМаркировки.Характеристика            = Характеристика;
		ДанныеКодаМаркировки.Серия                     = Серия;
		ДанныеКодаМаркировки.ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табак);
		ДанныеКодаМаркировки.МаркируемаяПродукция      = Истина;
		ДанныеКодаМаркировки.ТипУпаковки               = ?(ЭтоТабачнаяПачка, Перечисления.ТипыУпаковок.МаркированныйТовар,
			Перечисления.ТипыУпаковок.МонотоварнаяУпаковка);
		Если ЭтоТабачнаяПачка Тогда
			ДанныеКодаМаркировки.ТипШтрихкода              = Перечисления.ТипыШтрихкодов.DataMatrix;
		Иначе
			ДанныеКодаМаркировки.ТипШтрихкода              = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
		КонецЕсли;
		ДанныеКодаМаркировки.Штрихкод                  = КодМаркировки;
		ДанныеКодаМаркировки.КоличествоПачек           = ?(ЭтоТабачнаяПачка, 1, 10);
		ДанныеКодаМаркировки.КоличествоБлоков          = ?(ЭтоТабачнаяПачка, 0, 1);
		ДанныеКодаМаркировки.ГрупповаяТоварнаяУпаковка = ?(ЭтоТабачнаяПачка, Ложь, Истина);
		ДанныеСуществующейУпаковки = СуществующиеУпаковки.Найти(КодМаркировки, "Штрихкод");
		Если ДанныеСуществующейУпаковки = Неопределено Тогда
			ДанныеКодаМаркировки.ШтрихкодУпаковки = СоздатьШтрихкодУпаковкиПоДаннымКодаМаркировки(
				ДанныеКодаМаркировки, ПараметрыСканирования);
		Иначе
			ДанныеКодаМаркировки.ШтрихкодУпаковки = ДанныеСуществующейУпаковки.Ссылка;
		КонецЕсли;
		
		ОбработанныеШтрихкоды.Вставить(КодМаркировки, ДанныеКодаМаркировки);
		
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
	КонецЕсли;
	Результат	=	ОбработанныеШтрихкоды;
	
	Для Каждого марка Из КодыМаркировки Цикл
		данные = Результат[марка];
		Если данные = неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(данные.Номенклатура) Тогда
			
			мЕАН = новый Массив();
			
			прсингМарки = ШтрихкодированиеИСВызовСервера.РазобратьКодМаркировки(марка, Перечисления.ВидыПродукцииИС.Табак);
			
			мЕАН.Добавить(прсингМарки.СоставКодаМаркировки.EAN);
			
			ДанныеПоШтрихкодамEAN = ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN(мЕАН);
			Если ДанныеПоШтрихкодамEAN.Количество() > 0 Тогда
				данные.Номенклатура = ДанныеПоШтрихкодамEAN[0].Номенклатура;
			КонецЕсли;
		КонецЕсли;
		
		номенклатура = данные.Номенклатура;
		
		Если номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики Тогда
	
			мрц = данные.МРЦ;
			данные.Характеристика = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьХарактеристику(номенклатура, мрц);
			                                           	
			элКэш = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",марка);
			Если ЗначениеЗаполнено(элКэш) Тогда
				элКэшОбъект = элКэш.ПолучитьОбъект();
				элКэшОбъект.Номенклатура = данные.Номенклатура;
				элКэшОбъект.Характеристика = данные.Характеристика;
				элКэшОбъект.Записать();
			КонецЕсли;
		иначе	
			данные.Характеристика	=	Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
		КонецЕсли;
		
		
		//Вик 2021_05_13
		Если СтрДлина(данные.Штрихкод) = 29 тогда //это qr ввода остатков который прислал честный знак - пробиваем как пачку
			данные.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
			данные.КоличествоБлоков	=	0;
			данные.КоличествоПачек	=	1;
		КонецЕсли;
		//конецвик

		
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ДанныеМаркируемойНоменклатурыПоДаннымУПД(УчетныйДокумент, ЭлектронныйДокумент = Неопределено, ТипЭД = "УПД") Экспорт
	
	Если Не ЗначениеЗаполнено(УчетныйДокумент) Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентами");
	
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		// Получаем электронный документ и присоединенный файл титула продавца
		ЭлектронныйДокумент = МодульОбменСКонтрагентами.СтатусДокументооборота(УчетныйДокумент).ЭлектронныйДокумент;
	КонецЕсли;
	
	Если ЭлектронныйДокумент = Неопределено Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеИСМП.ВерсияАПИ() = 1 Тогда
		
		//@skip-warning ЭДО APIv1
		МодульОбменСКонтрагентамиСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиСлужебный");
		СсылкаНаФайл = МодульОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(ЭлектронныйДокумент);
		
		Если СсылкаНаФайл = Неопределено Тогда
			Возврат Новый Соответствие;
		КонецЕсли;
		
		// Сохраняем файл на диск
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(СсылкаНаФайл);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		// Формируем дерево документа
		//@skip-warning ЭДО APIv1
		МодульОбменСКонтрагентамиВнутренний = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиВнутренний");
		ОписаниеЭД = МодульОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяВременногоФайла);
		ДеревоДокумента = ОписаниеЭД.СтрокаОбъекта.ЗначениеРеквизита;
		
		// Заполняем номенклатуру информационной базы в дереве.
		МодульОбменСКонтрагентамиСлужебный.ЗаполнитьНоменклатуруИБВДеревеДокумента(
			ЭлектронныйДокумент, ДеревоДокумента);
		
		ИмяСобытия = НСтр("ru = 'Формирование дерева разбора ЭДО. Удаление временного файла.'");
		
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ДанныеОтправителя = МодульОбменСКонтрагентами.ДанныеЭлектронногоДокумента(ЭлектронныйДокумент).ДанныеОтправителя;
		Если ДанныеОтправителя = Неопределено Тогда 
			Возврат Новый Соответствие;
		Иначе
			ДеревоДокумента = ДанныеОтправителя.Содержание;  
		КонецЕсли;
	КонецЕсли;
	
	//Если ТипЭД = "ТОРГ2" Тогда
	//	ДанныеНоменклатурыПоДаннымЭДО = ДанныеМаркируемойНоменклатурыПоДаннымДереваТОРГ2(ДеревоДокумента);
	//Иначе
		ДанныеНоменклатурыПоДаннымЭДО = ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД(ДеревоДокумента);
	//КонецЕсли;
	
	ЗаполнитьВидПродукцииДанныхЭДО(ДанныеНоменклатурыПоДаннымЭДО);

	Возврат ДанныеНоменклатурыПоДаннымЭДО;
	
КонецФункции

Функция ИнициализироватьДанныеКодаМаркировки()
	
	ДанныеШтрихкода = ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода();
	ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода);
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

Функция СоздатьШтрихкодУпаковкиПоДаннымКодаМаркировки(ДанныеКодаМаркировки, ПараметрыСканирования)
	
	СсылкаНаЭлемент = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
	
	Если Не ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		Возврат СсылкаНаЭлемент;
	КонецЕсли;
	
	ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
	ЗаполнитьЗначенияСвойств(ДанныеНовойУпаковки, ДанныеКодаМаркировки);
	
	ДанныеНовойУпаковки.Штрихкод    = ДанныеКодаМаркировки.Штрихкод;
	ДанныеНовойУпаковки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
	ДанныеНовойУпаковки.Количество  = 1;
	
	СсылкаНаЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки);
	
	Возврат СсылкаНаЭлемент;
	
КонецФункции

Функция ЭтоКодМаркировкиТабачнойПачки(КодМаркировки, EAN = Неопределено) Экспорт

	Возврат ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиТабачнойПачки(КодМаркировки, EAN);
	
КонецФункции

Функция ЭтоКодМаркировкиБлока(КодМаркировки, EAN = Неопределено, МРЦ = Неопределено) Экспорт
	
	Возврат ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(КодМаркировки, EAN, МРЦ);
	
КонецФункции

Процедура ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода) Экспорт

	ДанныеШтрихкода.Вставить("ГрупповаяТоварнаяУпаковка", Ложь);
	ДанныеШтрихкода.Вставить("Контрагент",                Неопределено);
	ДанныеШтрихкода.Вставить("ИННВладельца"               "");
	ДанныеШтрихкода.Вставить("Статус",                    Неопределено);
	ДанныеШтрихкода.Вставить("ПредставлениеСтатуса"       "");
	ДанныеШтрихкода.Вставить("КоличествоПачек",           Неопределено);
	ДанныеШтрихкода.Вставить("КоличествоБлоков",          Неопределено);
	ДанныеШтрихкода.Вставить("МРЦ",                       0);
	ДанныеШтрихкода.Вставить("ПолученыДанныеИзМОТП",      Ложь);
	ДанныеШтрихкода.Вставить("ОбработатьБезМаркировки",   Ложь);
	
КонецПроцедуры

Функция ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД(ДеревоДокумента)
	
	СоответствиеШтрихкодаEANНоменклатуре = Новый Соответствие;
	СведенияОТоварах = ДеревоДокумента.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Если СведенияОТоварах = Неопределено Тогда
		Возврат СоответствиеШтрихкодаEANНоменклатуре;
	КонецЕсли;
	
	ПутьКИндивидуальнымУпаковкам155 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок";
	ПутьКИндивидуальнымУпаковкам820 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки";
	ПутьКНоменклатуре               = "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ";
	ПутьКХарактеристике             = "СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ";
	
	Для Каждого СтрокаТовары Из СведенияОТоварах.Строки Цикл
		
		НоменклатураИБ = СтрокаТовары.Строки.Найти(ПутьКНоменклатуре, "ПолныйПуть", Истина);
		Если НоменклатураИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = НоменклатураИБ.Значение;
		
		ХарактеристикаИБ = СтрокаТовары.Строки.Найти(ПутьКХарактеристике, "ПолныйПуть", Истина);
		Если ХарактеристикаИБ = Неопределено Тогда
			Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
		Иначе
			Характеристика = ХарактеристикаИБ.Значение;
		КонецЕсли;
		
		ИндивидуальныеУпаковки = СтрокаТовары.Строки.Найти(ПутьКИндивидуальнымУпаковкам820, "ПолныйПуть", Истина);
		Если ИндивидуальныеУпаковки = Неопределено Тогда
			
			ИндивидуальныеУпаковки = СтрокаТовары.Строки.Найти(ПутьКИндивидуальнымУпаковкам155, "ПолныйПуть", Истина);
			Если ИндивидуальныеУпаковки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ИндивидУпаковка Из ИндивидуальныеУпаковки.Строки Цикл
			
			Если ИндивидУпаковка.Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КодМаркировки = ИндивидУпаковка.Строки[0].Значение;
			
			Если ПустаяСтрока(КодМаркировки) Тогда //Товар без маркировки.
				Продолжить;
			КонецЕсли;
			
			ДанныеНоменклатуры = Новый Структура;
			ДанныеНоменклатуры.Вставить("Номенклатура",              Номенклатура);
			ДанныеНоменклатуры.Вставить("Характеристика",            Характеристика);
			ДанныеНоменклатуры.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
			
			СоответствиеШтрихкодаEANНоменклатуре.Вставить(КодМаркировки, ДанныеНоменклатуры);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СоответствиеШтрихкодаEANНоменклатуре;
	
КонецФункции

// Заполняет вид продукции в структуре входящих данных, полученных по данным ЭДО.
//
// Параметры:
//   ДанныеНоменклатурыПоДаннымЭДО - Соответствие - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
//   * ПредставлениеНоменклатуры - Строка - представление номенклатуры.
//   * МультитоварнаяУпаковка - Булево - Истина, если агрегат содержит разные позиции номенклатуры.
//   * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС, Неопределено - вид упаковки.
//   * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - вид продукции, значение для заполнения.
Процедура ЗаполнитьВидПродукцииДанныхЭДО(ДанныеНоменклатурыПоДаннымЭДО)

	Если ДанныеНоменклатурыПоДаннымЭДО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТоварыПоУПД = Новый ТаблицаЗначений;
	ТоварыПоУПД.Колонки.Добавить("Штрихкод",               ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТоварыПоУПД.Колонки.Добавить("Номенклатура",           Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТоварыПоУПД.Колонки.Добавить("Характеристика",         Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТоварыПоУПД.Колонки.Добавить("МаркируемаяПродукция",   Новый ОписаниеТипов("Булево"));
	ТоварыПоУПД.Колонки.Добавить("ВидПродукции",           Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Если ТипЗнч(ДанныеНоменклатурыПоДаннымЭДО) = Тип("Соответствие") Тогда
		
		Для Каждого КлючИЗначение Из ДанныеНоменклатурыПоДаннымЭДО Цикл
			
			Штрихкод     = КлючИЗначение.Ключ;
			СтрокаТовары = КлючИЗначение.Значение;
			
			НоваяСтрока = ТоварыПоУПД.Добавить();
			НоваяСтрока.Штрихкод               = Штрихкод;
			НоваяСтрока.Номенклатура           = СтрокаТовары.Номенклатура;
			НоваяСтрока.Характеристика         = СтрокаТовары.Характеристика;
			
		КонецЦикла;
		
	Иначе // ТаблицаЗначений
		
		Для Каждого СтрокаТаблицы Из ДанныеНоменклатурыПоДаннымЭДО Цикл
			
			НоваяСтрока = ТоварыПоУПД.Добавить();
			НоваяСтрока.Штрихкод               = СтрокаТаблицы.ЗначениеШтрихкода;
			НоваяСтрока.Номенклатура           = СтрокаТаблицы.Номенклатура;
			НоваяСтрока.Характеристика         = СтрокаТаблицы.Характеристика;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Штрихкод               КАК Штрихкод,
	|	ШтрихкодыУпаковок.Номенклатура           КАК Номенклатура,
	|	ШтрихкодыУпаковок.Характеристика         КАК Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	&ТоварыПоУПД КАК ШтрихкодыУпаковок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|/////////////////////////////////////////////
	|"
	+
	ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции()
	+
	"
	|;
	|/////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Штрихкод                 КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковок.Номенклатура             КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика           КАК Характеристика,
	|	ЕСТЬNULL(СвойстваМаркируемойПродукции.МаркируемаяПродукция, ЛОЖЬ) КАК МаркируемаяПродукция,
	|	ЕСТЬNULL(СвойстваМаркируемойПродукции.ВидПродукции,         ЛОЖЬ) КАК ВидПродукции
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
	|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТоварыПоУПД", ТоварыПоУПД);
	ТоварыПоУПД = Запрос.Выполнить().Выгрузить();
	
	Если ТипЗнч(ДанныеНоменклатурыПоДаннымЭДО) = Тип("Соответствие") Тогда
		
		Для Каждого СтрокаПоУПД Из ТоварыПоУПД Цикл
			
			Если СтрокаПоУПД.МаркируемаяПродукция Тогда
				
				СтрокаТовары = ДанныеНоменклатурыПоДаннымЭДО[СтрокаПоУПД.Штрихкод];
				Если СтрокаТовары <> Неопределено Тогда
					СтрокаТовары.ВидПродукции = СтрокаПоУПД.ВидПродукции;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ПараметрыОтбора = Новый Структура("ЗначениеШтрихкода");
		Для Каждого СтрокаПоУПД Из ТоварыПоУПД Цикл
			
			Если СтрокаПоУПД.МаркируемаяПродукция Тогда
				
				ПараметрыОтбора.ЗначениеШтрихкода = СтрокаПоУПД.Штрихкод;
				НайденныеСтроки = ДанныеНоменклатурыПоДаннымЭДО.НайтиСтроки(ПараметрыОтбора);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
					НайденнаяСтрока.ВидПродукции = СтрокаПоУПД.ВидПродукции;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
