
//&Вместо("ДанныеПоШтрихкодамEAN")
//Функция ТБКДанныеПоШтрихкодамEAN(ШтрихкодыEAN)
//	// Вставить содержимое метода.
//	штрих0 = "";
//	Если ШтрихкодыEAN.Количество() = 1 Тогда
//		штрихОригинал = ШтрихкодыEAN[0];
//		штрих0 = штрихОригинал;
//		
//		штрихАльтернатива = Новый Массив();
//		
//		
//		//штрих0 = ШтрихкодыEAN[0]; 		
//		Если СтрДлина(штрихОригинал) = 8 тогда
//			штрихАльтернатива.Добавить("00000"+штрихОригинал);
//		КонецЕсли;
//		
//		Если (СтрДлина(штрихОригинал) = 12)И(Лев(штрихОригинал,4)="0000") тогда
//			штрихАльтернатива.Добавить(Прав(штрихОригинал,8));
//		КонецЕсли;
//		
//		Если СтрДлина(штрихОригинал) = 12 тогда
//			штрихАльтернатива.Добавить("0"+штрихОригинал);
//		КонецЕсли;
//			
//		Если (СтрДлина(штрихОригинал) = 13)И(Лев(штрихОригинал,5)="00000") тогда
//			штрихАльтернатива.Добавить(Прав(штрихОригинал,8));
//		КонецЕсли;
//		
//		Если (СтрДлина(штрихОригинал) = 13)И(Лев(штрихОригинал,1)="0") тогда
//			штрихАльтернатива.Добавить(Прав(штрихОригинал,12));
//		КонецЕсли;
//		
//		               
//		Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.Штрихкоды ГДЕ Штрихкод=&Штрихкод");	
//		Запрос.УстановитьПараметр("Штрихкод",штрихОригинал);
//		выборкаШтрихкоды = Запрос.Выполнить().Выбрать();
//		флНашли = Ложь;
//		
//		Если (НЕ выборкаШтрихкоды.Следующий()) ТОГДА
//			
//			Для Каждого штрих1 из штрихАльтернатива Цикл
//				Запрос.УстановитьПараметр("Штрихкод",штрих1);
//				выборкаШтрихкоды = Запрос.Выполнить().Выбрать();
//				Если выборкаШтрихкоды.Следующий() Тогда	
//					ПроверитьШтрихКодыДляХарактеристик(штрих0,выборкаШтрихкоды.Владелец,выборкаШтрихкоды, истина);
//					флНашли = Истина;
//					break;
//				КонецЕсли;
//			конецЦикла;
//			
//			
//		Иначе
//			ПроверитьШтрихКодыДляХарактеристик(штрих0,выборкаШтрихкоды.Владелец,выборкаШтрихкоды);
//			флНашли = Истина;
//		КонецЕсли;
//		
//		//Поиск в дублирующем регистре ТБК_Штрихкоды. Все тоже самое но по другому регистру +
//		//запись в регистр штрихкоды если нашли
//		Если не флНашли тогда
//			Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ РегистрСведений.ТБК_Штрихкоды ГДЕ Штрихкод В(&Штрихкод0, &Штрихкод1)");	
//			Запрос.УстановитьПараметр("Штрихкод0",штрих0);
//			Запрос.УстановитьПараметр("Штрихкод1",штрих1);
//			выборкаШтрихкоды = Запрос.Выполнить().Выбрать();
//		
//			Если выборкаШтрихкоды.Следующий() ТОГДА
//				ПроверитьШтрихКодыДляХарактеристик(штрих0,выборкаШтрихкоды.Владелец,выборкаШтрихкоды,Истина);
//			КонецЕсли; 
//		КонецЕсли;
//		//		
//	КонецЕсли; 	
//	
//	Результат = ПродолжитьВызов(ШтрихкодыEAN);
//	
//	Возврат Результат;	
//КонецФункции


Процедура ПроверитьШтрихКодыДляХарактеристик(штрихкод, номенклатура, прототип, необходимоСоздатьЗапись = ложь);
	
	Если НЕ номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики  Тогда
		Если необходимоСоздатьЗапись Тогда
			запись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств( запись,прототип);
			запись.Штрихкод = штрихкод;
			запись.Записать();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	               |	Штрихкоды.Штрихкод КАК Штрихкод
	               |ИЗ
	               |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	               |		ПО (Штрихкоды.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
	               |			И (Штрихкоды.Штрихкод = &Штрихкод)
	               |			И (Штрихкоды.Владелец = &номенклатура)
	               |ГДЕ
	               |	ХарактеристикиНоменклатуры.Владелец = &номенклатура
	               |	И Штрихкоды.Штрихкод ЕСТЬ NULL";

	Запрос.УстановитьПараметр("штрихкод",штрихкод);
	Запрос.УстановитьПараметр("номенклатура",номенклатура);
	
	рез = Запрос.Выполнить().Выбрать();
	Пока рез.Следующий() Цикл
		запись = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств( запись,прототип);
		запись.Штрихкод = штрихкод;
		запись.Характеристика =  рез.Характеристика;
		
		Если СтрДлина(запись.Штрихкод) = 8 Тогда
			запись.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;
		иначе
			запись.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		КонецЕсли;
		
		запись.Записать();
	КонецЦикла;
	
	РегистрыСведений.Штрихкоды.ЧисткаШтрихкодов(номенклатура);
КонецПроцедуры


//Вместо("ОпределитьИнформациюПоGTINКодовМаркировки")
//Процедура ТБКОпределитьИнформациюПоGTINКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования)
//	// Вставить содержимое метода.
//	ПродолжитьВызов(ДанныеПоШтрихкодам, ПараметрыСканирования);
//	
//	мКэшПроверка = новый Массив;
//	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
//		ШтрихкодEAN = EANИзКодаМаркировки(СтрокаДанных.КодМаркировки);
//		Если мКэшПроверка.Найти(ШтрихкодEAN) = неопределено Тогда
//			мКэшПроверка.Добавить(ШтрихкодEAN);
//			
//			МРЦПачки = ШтрихкодированиеМОТПКлиентСервер.МРЦКодаМаркировкиТабачнойПачки(СтрокаДанных.КодМаркировки);
//			Если МРЦПачки = Неопределено Тогда
//				МРЦБлока = ШтрихкодированиеМОТПКлиентСервер.МРЦКодаМаркировкиБлока(СтрокаДанных.КодМаркировки);
//				Если МРЦБлока <> Неопределено Тогда
//					мрц = МРЦБлока/10;
//				КонецЕсли
//			Иначе
//				мрц = МРЦПачки;
//			Конецесли;
//			
//			
//			мУдалить = новый Массив;
//			Для Каждого стр из ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN Цикл
//				Если стр.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики Тогда
//					Если стр.ШтрихкодEAN=ШтрихкодEAN И Строка(стр.Характеристика)<>Строка(мрц) Тогда
//						мУдалить.Добавить(стр);
//					КонецЕсли;
//				КонецЕсли;
//			КонецЦикла;
//			
//			Для Каждого стр из мУдалить Цикл
//				ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN.Удалить(стр);	
//			КонецЦикла;
//			
//			
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//&Вместо("ДанныеПоШтрихкодам")
//Функция ТБКДанныеПоШтрихкодам(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения)
//	// Вставить содержимое метода.
//	Результат = ПродолжитьВызов(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения);
//	Для каждого стрМарки из Результат.ДанныеКодовМаркировок Цикл
//		стрДанные = Результат.ИнформацияПоШтрихкодамEAN.Найти(стрМарки.EAN);
//		Если стрДанные <> неопределено Тогда
//			стрМарки.Номенклатура = стрДанные.Номенклатура;
//			Если стрМарки.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики Тогда
//				стрМарки.Характеристика = стрДанные.Характеристика;
//			КонецЕсли;
//		КонецЕсли;
//		
//	КонецЦикла;
//	Возврат Результат;
//КонецФункции

//&Вместо("ОбработатьВводШтрихкода")
//Функция ТБКОбработатьВводШтрихкода(Форма, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования)
//	// Вставить содержимое метода.
//	Результат = ПродолжитьВызов(Форма, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
//	
//	Если НЕ ЗначениеЗаполнено(Результат.Штрихкод) Тогда
//		Результат.Штрихкод = ДанныеШтрихкода.Штрихкод;
//	КонецЕсли;
//	Возврат Результат;
//КонецФункции

Функция ТБКEANИзКодаМаркировки(КодМаркировки) экспорт
		Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
	//СоставКодаМаркировкиМОТП = МодульШтрихкодированиеМОТПКлиентСервер.СоставКодаМаркировки(КодМаркировки);
	//
	//МодульШтрихкодированиеИСМПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПКлиентСервер");
	//СоставКодаМаркировкиИСМП = МодульШтрихкодированиеИСМПКлиентСервер.СоставКодаМаркировки(КодМаркировки);
	//
	//Если СоставКодаМаркировкиМОТП <> Неопределено Тогда
	//	GTIN = СоставКодаМаркировкиМОТП.GTIN;
	//ИначеЕсли СоставКодаМаркировкиИСМП <> Неопределено Тогда
	//	GTIN = СоставКодаМаркировкиИСМП.GTIN;
	//Иначе
	//	Возврат Неопределено;
	//КонецЕсли; 
	
	СоставКодаМаркировки = СоставКодаМаркировки(КодМаркировки);

	Если СоставКодаМаркировки <> Неопределено Тогда
		GTIN = СоставКодаМаркировки.GTIN;
	Иначе
		Возврат Неопределено;
	КонецЕсли;    
	
	//ШтрихкодEAN = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(GTIN);
	ШтрихкодEAN = РазборКодаМаркировкиИССлужебныйКлиентСервер.ШтрихкодEANИзGTIN(GTIN);
	Если ЗначениеЗаполнено(ШтрихкодEAN) Тогда
		Возврат ШтрихкодEAN;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции   

Функция СоставКодаМаркировки(КодМаркировки) Экспорт
	
	ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
	
	РезультатРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(КодМаркировки, ВидПродукции);
	
	Если РезультатРазбора = Неопределено
		Или РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоставКодаМаркировки = РезультатРазбора.СоставКодаМаркировки;
	
	Результат = Новый Структура("ГрупповаяУпаковка, GTIN, СерийныйНомер, МРЦ, КодПроверки");
	
	Результат.ГрупповаяУпаковка = (РезультатРазбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"));
	Результат.GTIN              = СоставКодаМаркировки.GTIN;
	Результат.СерийныйНомер     = СоставКодаМаркировки.СерийныйНомер;
	
	Если СоставКодаМаркировки.Свойство("МРЦ") И ЗначениеЗаполнено(СоставКодаМаркировки.МРЦ) Тогда
		Результат.МРЦ = СоставКодаМаркировки.МРЦ;
	КонецЕсли;
	
	Если СоставКодаМаркировки.Свойство("КодПроверки") И ЗначениеЗаполнено(СоставКодаМаркировки.КодПроверки) Тогда
		Результат.КодПроверки = СоставКодаМаркировки.КодПроверки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


//&Вместо("СуществующиеВРегистреШтрихкодыEAN")
//Функция ТБКСуществующиеВРегистреШтрихкодыEAN(ШтрихкодыEAN)				
//	ДанныеПоШтрихкодамEAN = ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);

//	Возврат ДанныеПоШтрихкодамEAN.ВыгрузитьКолонку("ШтрихкодEAN");

//КонецФункции

//&Вместо("ДанныеНеизвестнойМаркируемойПродукцииПоШтрихкодам")
//Функция ТБКДанныеНеизвестнойМаркируемойПродукцииПоШтрихкодам(ШтрихкодыКОбработке, ДанныеПоШтрихкодам, ПараметрыСканирования)
//	СоответствиеШтрихкодаВидуПродукции          = ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции;
//	ДанныеНеизвестнойПродукции                  = Новый Соответствие;
//	НеобработанныеШтрихкодыАлкогольнойПродукции = Новый Массив;
//	НеобработанныеШтрихкодыТабачнойПродукции    = Новый Массив;
//	НеобработанныеШтрихкодыОбувнойПродукции     = Новый Массив;

//	Для Каждого Штрихкод Из ШтрихкодыКОбработке Цикл
//		
//		Если СоответствиеШтрихкодаВидуПродукции[Штрихкод] = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
//			НеобработанныеШтрихкодыАлкогольнойПродукции.Добавить(Штрихкод);
//		ИначеЕсли (СоответствиеШтрихкодаВидуПродукции[Штрихкод] = Перечисления.ВидыПродукцииИС.Табачная) Тогда 
//			НеобработанныеШтрихкодыТабачнойПродукции.Добавить(Штрихкод);
//		ИначеЕсли СоответствиеШтрихкодаВидуПродукции[Штрихкод] = Перечисления.ВидыПродукцииИС.Обувная Тогда
//			НеобработанныеШтрихкодыОбувнойПродукции.Добавить(Штрихкод);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
//		И ПрисутствуетАлкогольнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
//		
//		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
//		ДанныеНеизвестнойАлкогольнойПродукции = МодульШтрихкодированиеЕГАИС.ДанныеНеизвестнойМаркируемойПродукции(
//			НеобработанныеШтрихкодыАлкогольнойПродукции, ПараметрыСканирования);
//		
//		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеНеизвестнойПродукции, ДанныеНеизвестнойАлкогольнойПродукции);
//		
//	КонецЕсли;
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
//		
//		Если ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
//			
//			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
//			
//			//Вик 2024-02-16
//			//ДанныеНеизвестнойТабачнойПродукции = МодульШтрихкодированиеМОТП.ДанныеНеизвестнойМаркируемойПродукции(
//			//	НеобработанныеШтрихкодыТабачнойПродукции, ПараметрыСканирования, ДанныеПоШтрихкодам.ТекстОшибки );
//			
//			Если ДанныеПоШтрихкодам.Свойство("ШтрихкодУниверсальнойМарки") тогда
//				ДанныеНеизвестнойТабачнойПродукции = ТБКДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСтатусаМОТП(
//					НеобработанныеШтрихкодыТабачнойПродукции, ПараметрыСканирования, ДанныеПоШтрихкодам.ТекстОшибки, ДанныеПоШтрихкодам.ШтрихкодУниверсальнойМарки );
//			иначе
//				ДанныеНеизвестнойТабачнойПродукции = ТБКДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСтатусаМОТП(
//					НеобработанныеШтрихкодыТабачнойПродукции, ПараметрыСканирования, ДанныеПоШтрихкодам.ТекстОшибки );
//				//ДанныеНеизвестнойТабачнойПродукции = МодульШтрихкодированиеМОТП.ДанныеНеизвестнойМаркируемойПродукции(
//				//	НеобработанныеШтрихкодыТабачнойПродукции, ПараметрыСканирования, ДанныеПоШтрихкодам.ТекстОшибки);
//			КонецЕсли;
//			//

//		
//			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеНеизвестнойПродукции, ДанныеНеизвестнойТабачнойПродукции);
//			
//		КонецЕсли;
//		
//		Если ПрисутствуетОбувнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
//			
//			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
//			ДанныеНеизвестнойОбувнойПродукции = МодульШтрихкодированиеИСМПСлужебный.ДанныеНеизвестнойМаркируемойПродукции(
//				НеобработанныеШтрихкодыОбувнойПродукции, ПараметрыСканирования, ДанныеПоШтрихкодам);
//			
//			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеНеизвестнойПродукции, ДанныеНеизвестнойОбувнойПродукции);
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Возврат ДанныеНеизвестнойПродукции;

//КонецФункции

Функция ТБКДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСтатусаМОТП(КодыМаркировки, ПараметрыСканирования,ТекстОшибки, ШтрихкодУниверсальнойМарки = "")
	// Вставить содержимое метода.
	//Изменил
	//Результат = ПродолжитьВызов(КодыМаркировки, ПараметрыСканирования);
	ОбработанныеШтрихкоды       = Новый Соответствие;
	МассивEANДляПолученияДанных = Новый Массив;
	СоответствиеШтрихкодов      = Новый Соответствие;
	
	//Вик 2024-02-16 универсальные 
	Если ШтрихкодУниверсальнойМарки = "" тогда
		Для Каждого КодМаркировки Из КодыМаркировки Цикл
			
			ЗначениеEAN = "";
			
			Если ЭтоКодМаркировкиТабачнойПачки(КодМаркировки, ЗначениеEAN) Или ЭтоКодМаркировкиБлока(КодМаркировки, ЗначениеEAN) Тогда
				
				СоответствиеШтрихкодов.Вставить(КодМаркировки, ЗначениеEAN);
				МассивEANДляПолученияДанных.Добавить(ЗначениеEAN);
				
			КонецЕсли;
			
		КонецЦикла;
	иначе
		Для Каждого КодМаркировки Из КодыМаркировки Цикл
			МассивEANДляПолученияДанных.Добавить(ШтрихкодУниверсальнойМарки);	
			СоответствиеШтрихкодов.Вставить(КодМаркировки,ШтрихкодУниверсальнойМарки); 
		КонецЦикла;
		//КонецВик  
	КонецЕсли;

			
	
	ДанныеПоШтрихкодамEAN = ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN(МассивEANДляПолученияДанных);
	СуществующиеУпаковки = ШтрихкодированиеИС.ШтрихкодыУпаковок(КодыМаркировки);
	
	МассивОшибок = Новый Массив;
	ШаблонОшибки = НСтр("ru='Штрихкод %1 требуется сопоставить с номенклатурой'");
	
	
	Серия = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
	
	ДанныеМаркируемойНоменклатурыПоДаннымУПД = Неопределено;
	
	Для Каждого КлючЗначение Из СоответствиеШтрихкодов Цикл
		
		КодМаркировки = КлючЗначение.Ключ;
		ШтрихкодEAN   = КлючЗначение.Значение;
		
		ПараметрыОтбора = Новый Структура("ШтрихкодEAN", ШтрихкодEAN);
		НайденныеСтроки = ДанныеПоШтрихкодамEAN.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			Номенклатура   = НайденныеСтроки[0].Номенклатура;
			Характеристика = НайденныеСтроки[0].Характеристика;
			Серия          = НайденныеСтроки[0].Серия;
			
		ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
			
			Номенклатура   = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
			Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
			
		Иначе
			
			Если ДанныеМаркируемойНоменклатурыПоДаннымУПД = Неопределено Тогда
				ДанныеМаркируемойНоменклатурыПоДаннымУПД = ДанныеМаркируемойНоменклатурыПоДаннымУПД(ПараметрыСканирования.СсылкаНаОбъект);
			КонецЕсли;
			
			НоменклатураХарактеристика = ДанныеМаркируемойНоменклатурыПоДаннымУПД.Получить(КодМаркировки);
			
			Если НоменклатураХарактеристика = Неопределено Тогда
				
				ТекстОшибки = СтрШаблон(ШаблонОшибки, ШтрихкодEAN);
				МассивОшибок.Добавить(ТекстОшибки);
				
				Продолжить;
			КонецЕсли;
			
			Номенклатура   = НоменклатураХарактеристика.Номенклатура;
			Характеристика = НоменклатураХарактеристика.Характеристика;
			
		КонецЕсли;
		
		ЭтоТабачнаяПачка     = Ложь;
		СоставКодаМаркировки = Неопределено;
		ВидПродукции         = Перечисления.ВидыПродукцииИС.Табак;
		РезультатРазбора     = ШтрихкодированиеИСВызовСервера.РазобратьКодМаркировки(КодМаркировки, ВидПродукции);
		Если РезультатРазбора <> Неопределено Тогда
			ЭтоТабачнаяПачка     = (РезультатРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская);
			СоставКодаМаркировки = РезультатРазбора.СоставКодаМаркировки;
		КонецЕсли;
		
		ДанныеКодаМаркировки = ИнициализироватьДанныеКодаМаркировки();
		ЗаполнитьЗначенияСвойств(ДанныеКодаМаркировки, СоставКодаМаркировки);
		ДанныеКодаМаркировки.Номенклатура              = Номенклатура;
		ДанныеКодаМаркировки.Характеристика            = Характеристика;
		ДанныеКодаМаркировки.Серия                     = Серия;
		ДанныеКодаМаркировки.ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табак);
		ДанныеКодаМаркировки.МаркируемаяПродукция      = Истина;
		ДанныеКодаМаркировки.ТипУпаковки               = ?(ЭтоТабачнаяПачка, Перечисления.ТипыУпаковок.МаркированныйТовар,
			Перечисления.ТипыУпаковок.МонотоварнаяУпаковка);
		Если ЭтоТабачнаяПачка Тогда
			ДанныеКодаМаркировки.ТипШтрихкода              = Перечисления.ТипыШтрихкодов.DataMatrix;
		Иначе
			ДанныеКодаМаркировки.ТипШтрихкода              = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
		КонецЕсли;
		ДанныеКодаМаркировки.Штрихкод                  = КодМаркировки;
		ДанныеКодаМаркировки.КоличествоПачек           = ?(ЭтоТабачнаяПачка, 1, 10);
		ДанныеКодаМаркировки.КоличествоБлоков          = ?(ЭтоТабачнаяПачка, 0, 1);
		ДанныеКодаМаркировки.ГрупповаяТоварнаяУпаковка = ?(ЭтоТабачнаяПачка, Ложь, Истина);
		ДанныеСуществующейУпаковки = СуществующиеУпаковки.Найти(КодМаркировки, "Штрихкод");
		Если ДанныеСуществующейУпаковки = Неопределено Тогда
			ДанныеКодаМаркировки.ШтрихкодУпаковки = СоздатьШтрихкодУпаковкиПоДаннымКодаМаркировки(
				ДанныеКодаМаркировки, ПараметрыСканирования);
		Иначе
			ДанныеКодаМаркировки.ШтрихкодУпаковки = ДанныеСуществующейУпаковки.Ссылка;
		КонецЕсли;
		
		ОбработанныеШтрихкоды.Вставить(КодМаркировки, ДанныеКодаМаркировки);
		
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
	КонецЕсли;
	Результат	=	ОбработанныеШтрихкоды;
	
	Для Каждого марка Из КодыМаркировки Цикл
		данные = Результат[марка];
		Если данные = неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(данные.Номенклатура) Тогда
			
			мЕАН = новый Массив();
			
			прсингМарки = ШтрихкодированиеИСВызовСервера.РазобратьКодМаркировки(марка, Перечисления.ВидыПродукцииИС.Табак);
			
			мЕАН.Добавить(прсингМарки.СоставКодаМаркировки.EAN);
			
			ДанныеПоШтрихкодамEAN = ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN(мЕАН);
			Если ДанныеПоШтрихкодамEAN.Количество() > 0 Тогда
				данные.Номенклатура = ДанныеПоШтрихкодамEAN[0].Номенклатура;
			КонецЕсли;
		КонецЕсли;
		
		номенклатура = данные.Номенклатура;
		
		Если номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики Тогда
	
			мрц = данные.МРЦ;
			Если МРЦ<>0 тогда
				данные.Характеристика = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьХарактеристику(номенклатура, мрц);
			КонецЕсли;
			
			//Вик 2024-08-19
			Если Не ЗначениеЗаполнено(данные.Характеристика) и ЗначениеЗаполнено(ПараметрыСканирования.Характеристика) тогда
				данные.Характеристика	=	ПараметрыСканирования.Характеристика;	
			КонецЕсли;
			//
			                                           	
			элКэш = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",марка);
			Если ЗначениеЗаполнено(элКэш) Тогда
				элКэшОбъект = элКэш.ПолучитьОбъект();
				элКэшОбъект.Номенклатура = данные.Номенклатура;
				элКэшОбъект.Характеристика = данные.Характеристика;
				элКэшОбъект.Записать();
			КонецЕсли;
		иначе	
			данные.Характеристика	=	Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
		КонецЕсли;
		
		
		//Вик 2021_05_13
		Если СтрДлина(данные.Штрихкод) = 29 тогда //это qr ввода остатков который прислал честный знак - пробиваем как пачку
			данные.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
			данные.КоличествоБлоков	=	0;
			данные.КоличествоПачек	=	1;
		КонецЕсли;
		//конецвик

		
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЭтоКодМаркировкиТабачнойПачки(КодМаркировки, EAN = Неопределено) Экспорт

	Возврат ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиТабачнойПачки(КодМаркировки, EAN);
	
КонецФункции

Функция ЭтоКодМаркировкиБлока(КодМаркировки, EAN = Неопределено, МРЦ = Неопределено) Экспорт
	
	Возврат ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(КодМаркировки, EAN, МРЦ);
	
КонецФункции

Функция ИнициализироватьДанныеКодаМаркировки()
	
	ДанныеШтрихкода = ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода();
	ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода);
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

Функция СоздатьШтрихкодУпаковкиПоДаннымКодаМаркировки(ДанныеКодаМаркировки, ПараметрыСканирования)
	
	СсылкаНаЭлемент = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
	
	Если Не ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		Возврат СсылкаНаЭлемент;
	КонецЕсли;
	
	ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
	ЗаполнитьЗначенияСвойств(ДанныеНовойУпаковки, ДанныеКодаМаркировки);
	
	ДанныеНовойУпаковки.Штрихкод    = ДанныеКодаМаркировки.Штрихкод;
	ДанныеНовойУпаковки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
	ДанныеНовойУпаковки.Количество  = 1;
	
	СсылкаНаЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки);
	
	Возврат СсылкаНаЭлемент;
	
КонецФункции

Функция ДанныеМаркируемойНоменклатурыПоДаннымУПД(УчетныйДокумент, ЭлектронныйДокумент = Неопределено, ТипЭД = "УПД") Экспорт
	
	Если Не ЗначениеЗаполнено(УчетныйДокумент) Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентами");
	
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		// Получаем электронный документ и присоединенный файл титула продавца
		ЭлектронныйДокумент = МодульОбменСКонтрагентами.СтатусДокументооборота(УчетныйДокумент).ЭлектронныйДокумент;
	КонецЕсли;
	
	Если ЭлектронныйДокумент = Неопределено Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеИСМП.ВерсияАПИ() = 1 Тогда
		
		//@skip-warning ЭДО APIv1
		МодульОбменСКонтрагентамиСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиСлужебный");
		СсылкаНаФайл = МодульОбменСКонтрагентамиСлужебный.ПрисоединенныйФайл(ЭлектронныйДокумент);
		
		Если СсылкаНаФайл = Неопределено Тогда
			Возврат Новый Соответствие;
		КонецЕсли;
		
		// Сохраняем файл на диск
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(СсылкаНаФайл);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		// Формируем дерево документа
		//@skip-warning ЭДО APIv1
		МодульОбменСКонтрагентамиВнутренний = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиВнутренний");
		ОписаниеЭД = МодульОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяВременногоФайла);
		ДеревоДокумента = ОписаниеЭД.СтрокаОбъекта.ЗначениеРеквизита;
		
		// Заполняем номенклатуру информационной базы в дереве.
		МодульОбменСКонтрагентамиСлужебный.ЗаполнитьНоменклатуруИБВДеревеДокумента(
			ЭлектронныйДокумент, ДеревоДокумента);
		
		ИмяСобытия = НСтр("ru = 'Формирование дерева разбора ЭДО. Удаление временного файла.'");
		
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ДанныеОтправителя = МодульОбменСКонтрагентами.ДанныеЭлектронногоДокумента(ЭлектронныйДокумент).ДанныеОтправителя;
		Если ДанныеОтправителя = Неопределено Тогда 
			Возврат Новый Соответствие;
		Иначе
			ДеревоДокумента = ДанныеОтправителя.Содержание;  
		КонецЕсли;
	КонецЕсли;
	
	//Если ТипЭД = "ТОРГ2" Тогда
	//	ДанныеНоменклатурыПоДаннымЭДО = ДанныеМаркируемойНоменклатурыПоДаннымДереваТОРГ2(ДеревоДокумента);
	//Иначе
		ДанныеНоменклатурыПоДаннымЭДО = ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД(ДеревоДокумента);
	//КонецЕсли;
	
	ЗаполнитьВидПродукцииДанныхЭДО(ДанныеНоменклатурыПоДаннымЭДО);

	Возврат ДанныеНоменклатурыПоДаннымЭДО;

КонецФункции    

// Заполняет вид продукции в структуре входящих данных, полученных по данным ЭДО.
//
// Параметры:
//   ДанныеНоменклатурыПоДаннымЭДО - Соответствие - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
//   * ПредставлениеНоменклатуры - Строка - представление номенклатуры.
//   * МультитоварнаяУпаковка - Булево - Истина, если агрегат содержит разные позиции номенклатуры.
//   * ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС, Неопределено - вид упаковки.
//   * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - вид продукции, значение для заполнения.
Процедура ЗаполнитьВидПродукцииДанныхЭДО(ДанныеНоменклатурыПоДаннымЭДО)

	Если ДанныеНоменклатурыПоДаннымЭДО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТоварыПоУПД = Новый ТаблицаЗначений;
	ТоварыПоУПД.Колонки.Добавить("Штрихкод",               ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТоварыПоУПД.Колонки.Добавить("Номенклатура",           Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТоварыПоУПД.Колонки.Добавить("Характеристика",         Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТоварыПоУПД.Колонки.Добавить("МаркируемаяПродукция",   Новый ОписаниеТипов("Булево"));
	ТоварыПоУПД.Колонки.Добавить("ВидПродукции",           Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Если ТипЗнч(ДанныеНоменклатурыПоДаннымЭДО) = Тип("Соответствие") Тогда
		
		Для Каждого КлючИЗначение Из ДанныеНоменклатурыПоДаннымЭДО Цикл
			
			Штрихкод     = КлючИЗначение.Ключ;
			СтрокаТовары = КлючИЗначение.Значение;
			
			НоваяСтрока = ТоварыПоУПД.Добавить();
			НоваяСтрока.Штрихкод               = Штрихкод;
			НоваяСтрока.Номенклатура           = СтрокаТовары.Номенклатура;
			НоваяСтрока.Характеристика         = СтрокаТовары.Характеристика;
			
		КонецЦикла;
		
	Иначе // ТаблицаЗначений
		
		Для Каждого СтрокаТаблицы Из ДанныеНоменклатурыПоДаннымЭДО Цикл
			
			НоваяСтрока = ТоварыПоУПД.Добавить();
			НоваяСтрока.Штрихкод               = СтрокаТаблицы.ЗначениеШтрихкода;
			НоваяСтрока.Номенклатура           = СтрокаТаблицы.Номенклатура;
			НоваяСтрока.Характеристика         = СтрокаТаблицы.Характеристика;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Штрихкод               КАК Штрихкод,
	|	ШтрихкодыУпаковок.Номенклатура           КАК Номенклатура,
	|	ШтрихкодыУпаковок.Характеристика         КАК Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	&ТоварыПоУПД КАК ШтрихкодыУпаковок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|/////////////////////////////////////////////
	|"
	+
	ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции()
	+
	"
	|;
	|/////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Штрихкод                 КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковок.Номенклатура             КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика           КАК Характеристика,
	|	ЕСТЬNULL(СвойстваМаркируемойПродукции.МаркируемаяПродукция, ЛОЖЬ) КАК МаркируемаяПродукция,
	|	ЕСТЬNULL(СвойстваМаркируемойПродукции.ВидПродукции,         ЛОЖЬ) КАК ВидПродукции
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
	|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТоварыПоУПД", ТоварыПоУПД);
	ТоварыПоУПД = Запрос.Выполнить().Выгрузить();
	
	Если ТипЗнч(ДанныеНоменклатурыПоДаннымЭДО) = Тип("Соответствие") Тогда
		
		Для Каждого СтрокаПоУПД Из ТоварыПоУПД Цикл
			
			Если СтрокаПоУПД.МаркируемаяПродукция Тогда
				
				СтрокаТовары = ДанныеНоменклатурыПоДаннымЭДО[СтрокаПоУПД.Штрихкод];
				Если СтрокаТовары <> Неопределено Тогда
					СтрокаТовары.ВидПродукции = СтрокаПоУПД.ВидПродукции;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ПараметрыОтбора = Новый Структура("ЗначениеШтрихкода");
		Для Каждого СтрокаПоУПД Из ТоварыПоУПД Цикл
			
			Если СтрокаПоУПД.МаркируемаяПродукция Тогда
				
				ПараметрыОтбора.ЗначениеШтрихкода = СтрокаПоУПД.Штрихкод;
				НайденныеСтроки = ДанныеНоменклатурыПоДаннымЭДО.НайтиСтроки(ПараметрыОтбора);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
					НайденнаяСтрока.ВидПродукции = СтрокаПоУПД.ВидПродукции;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода) Экспорт

	ДанныеШтрихкода.Вставить("ГрупповаяТоварнаяУпаковка", Ложь);
	ДанныеШтрихкода.Вставить("Контрагент",                Неопределено);
	ДанныеШтрихкода.Вставить("ИННВладельца"               "");
	ДанныеШтрихкода.Вставить("Статус",                    Неопределено);
	ДанныеШтрихкода.Вставить("ПредставлениеСтатуса"       "");
	ДанныеШтрихкода.Вставить("КоличествоПачек",           Неопределено);
	ДанныеШтрихкода.Вставить("КоличествоБлоков",          Неопределено);
	ДанныеШтрихкода.Вставить("МРЦ",                       0);
	ДанныеШтрихкода.Вставить("ПолученыДанныеИзМОТП",      Ложь);
	ДанныеШтрихкода.Вставить("ОбработатьБезМаркировки",   Ложь);
	
КонецПроцедуры

Функция ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД(ДеревоДокумента)
	
	СоответствиеШтрихкодаEANНоменклатуре = Новый Соответствие;
	СведенияОТоварах = ДеревоДокумента.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Если СведенияОТоварах = Неопределено Тогда
		Возврат СоответствиеШтрихкодаEANНоменклатуре;
	КонецЕсли;
	
	ПутьКИндивидуальнымУпаковкам155 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок";
	ПутьКИндивидуальнымУпаковкам820 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки";
	ПутьКНоменклатуре               = "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ";
	ПутьКХарактеристике             = "СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ";
	
	Для Каждого СтрокаТовары Из СведенияОТоварах.Строки Цикл
		
		НоменклатураИБ = СтрокаТовары.Строки.Найти(ПутьКНоменклатуре, "ПолныйПуть", Истина);
		Если НоменклатураИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = НоменклатураИБ.Значение;
		
		ХарактеристикаИБ = СтрокаТовары.Строки.Найти(ПутьКХарактеристике, "ПолныйПуть", Истина);
		Если ХарактеристикаИБ = Неопределено Тогда
			Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
		Иначе
			Характеристика = ХарактеристикаИБ.Значение;
		КонецЕсли;
		
		ИндивидуальныеУпаковки = СтрокаТовары.Строки.Найти(ПутьКИндивидуальнымУпаковкам820, "ПолныйПуть", Истина);
		Если ИндивидуальныеУпаковки = Неопределено Тогда
			
			ИндивидуальныеУпаковки = СтрокаТовары.Строки.Найти(ПутьКИндивидуальнымУпаковкам155, "ПолныйПуть", Истина);
			Если ИндивидуальныеУпаковки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ИндивидУпаковка Из ИндивидуальныеУпаковки.Строки Цикл
			
			Если ИндивидУпаковка.Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КодМаркировки = ИндивидУпаковка.Строки[0].Значение;
			
			Если ПустаяСтрока(КодМаркировки) Тогда //Товар без маркировки.
				Продолжить;
			КонецЕсли;
			
			ДанныеНоменклатуры = Новый Структура;
			ДанныеНоменклатуры.Вставить("Номенклатура",              Номенклатура);
			ДанныеНоменклатуры.Вставить("Характеристика",            Характеристика);
			ДанныеНоменклатуры.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
			
			СоответствиеШтрихкодаEANНоменклатуре.Вставить(КодМаркировки, ДанныеНоменклатуры);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СоответствиеШтрихкодаEANНоменклатуре;
	
КонецФункции

&Вместо("ЗаполнитьСведенияПоШтриходамДаннымПулаGTIN")
Процедура ТБКЗаполнитьСведенияПоШтриходамДаннымПулаGTIN(ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеКодовМаркировки)
		Если ДанныеКодовМаркировки = Неопределено Тогда
		ДанныеКодовМаркировки = ДанныеПоШтрихкодам.ДанныеКодовМаркировки;
	КонецЕсли;
	
	Если ДанныеКодовМаркировки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодыEAN                             = Новый Массив;
	КодыМаркировкиДляПолученияСведенийИзПула = Новый Массив;
	
	ЕстьДопустимыеВидыПродукции   = Ложь;
	ДопустимаТабачнаяПродукция    = ШтрихкодированиеОбщегоНазначенияИС.ДопустимаТабачнаяПродукция(ПараметрыСканирования);
	ДопустимаПродукцияИСМП        = ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИСМП(ПараметрыСканирования);
	ДопустимаАлкогольнаяПродукция = ШтрихкодированиеОбщегоНазначенияИС.ДопустимаАлкогольнаяПродукция(ПараметрыСканирования);
	ЗапрашиватьДанныеСервисаИСМП  = Ложь;
	
	Если ДопустимаТабачнаяПродукция Или ДопустимаПродукцияИСМП Тогда
		ЕстьДопустимыеВидыПродукции = Истина;
		Если ТипЗнч(ДанныеКодовМаркировки) = Тип("Массив") Тогда
			ИсточникТаблицаКодовМаркировки = ДанныеКодовМаркировки[0].Владелец();
		Иначе
			ИсточникТаблицаКодовМаркировки = ДанныеКодовМаркировки;
		КонецЕсли;
		ЗапрашиватьДанныеСервисаИСМП = ОбщегоНазначенияИСМПКлиентСервер.ЗначениеПараметраСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования);
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияМОТП");
		МодульШтрихкодированиеМОТП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, ИсточникТаблицаКодовМаркировки);
	КонецЕсли;
	
	Если ДопустимаПродукцияИСМП Тогда
		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеОбщегоНазначенияИСМП");
		МодульШтрихкодированиеИСМП.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, ИсточникТаблицаКодовМаркировки);
	КонецЕсли;

	Если ДопустимаАлкогольнаяПродукция Тогда
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		МодульШтрихкодированиеЕГАИС.ДобавитьКолонкиТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ПараметрыСканирования, ИсточникТаблицаКодовМаркировки);
	КонецЕсли;

	УникальныеШтрихкодыEAN = Новый Соответствие;
	GTINПотребительскихУпаковок = Новый Соответствие;
	
	ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
	НормализованныеКодыМаркировкиДляПолученияСведенийИзПула = Новый Соответствие;
	
	ЭтоВызовИзРМК = ПараметрыСканирования.Свойство("ДополнительныеПараметры")
		И ТипЗнч(ПараметрыСканирования.ДополнительныеПараметры) = Тип("Структура")
		И ПараметрыСканирования.ДополнительныеПараметры.Свойство("ПарамтерыПоискаРМК");
		
	ЭтоМаркаДляОбработкиБГосИС = Ложь;
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		Если ЕстьДопустимыеВидыПродукции
			И ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПродукцияИСМП(СтрокаДанных.ВидыПродукцииКодаМаркировки) Тогда
			КодыМаркировкиДляПолученияСведенийИзПула.Добавить(СтрокаДанных.Штрихкод);
			НормализованныеКодыМаркировкиДляПолученияСведенийИзПула.Вставить(СтрокаДанных.Штрихкод, СтрокаДанных.Штрихкод);
		ИначеЕсли ЕстьДопустимыеВидыПродукции
			И ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетТабачнаяПродукция(СтрокаДанных.ВидыПродукцииКодаМаркировки) Тогда
			Если СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И СтрокаДанных.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
				И СтрокаДанных.СоставКодаМаркировки.ВключаетМРЦ Тогда
				
				НормализованныйКод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					СтрокаДанных.ДанныеРазбора,
					СтрокаДанных.ВидПродукции,
					ПараметрыНормализацииКМ);
				
				КодыМаркировкиДляПолученияСведенийИзПула.Добавить(НормализованныйКод);
				НормализованныеКодыМаркировкиДляПолученияСведенийИзПула.Вставить(СтрокаДанных.Штрихкод, НормализованныйКод);

			Иначе

				КодыМаркировкиДляПолученияСведенийИзПула.Добавить(СтрокаДанных.Штрихкод);
				НормализованныеКодыМаркировкиДляПолученияСведенийИзПула.Вставить(СтрокаДанных.Штрихкод, СтрокаДанных.Штрихкод);

			КонецЕсли;

		КонецЕсли;
		
		Если СтрокаДанных.ЭтоКодВводаОстатков Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаДанных.ДанныеРазбора = Неопределено Тогда
			ЭтоМаркаДляОбработкиБГосИС = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.GTIN) И Не ЭтоВызовИзРМК
			И (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				Или СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(Перечисления.ВидыПродукцииИС.Алкогольная) <> Неопределено
				Или СтрокаДанных.ВидыПродукцииКодаМаркировки.Найти(Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха) <> Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			СтрокаДанных.ТребуетсяСопоставление = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаДанных.EAN) И ПустаяСтрока(СтрокаДанных.GTIN) Тогда
			ШтрихкодДляПоиска = СтрокаДанных.Штрихкод;
		Иначе
			Если ЗначениеЗаполнено(СтрокаДанных.GTIN) Тогда
				СтрокаДанных.EAN = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(СтрокаДанных.GTIN);
			КонецЕсли;
			ШтрихкодДляПоиска = СтрокаДанных.EAN;
		КонецЕсли;
		
		Если УникальныеШтрихкодыEAN[ШтрихкодДляПоиска] = Неопределено Тогда
			ШтрихкодыEAN.Добавить(ШтрихкодДляПоиска);
			УникальныеШтрихкодыEAN.Вставить(ШтрихкодДляПоиска, Истина);
		КонецЕсли;
		
		Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			И ЗначениеЗаполнено(СтрокаДанных.GTIN)
			И GTINПотребительскихУпаковок[СтрокаДанных.GTIN] = Неопределено Тогда
			GTINПотребительскихУпаковок.Вставить(СтрокаДанных.GTIN, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КодыМаркировкиДляПолученияСведенийИзПула.Количество() Тогда
		ДанныеПулаПоКодамМаркировки = РегистрыСведений["ПулКодовМаркировкиСУЗ"].ДанныеКодовМаркировки(КодыМаркировкиДляПолученияСведенийИзПула);
	КонецЕсли;
	
	ПараметрыСканирования.Вставить("ЭтоМаркаДляОбработкиБГосИС", ЭтоМаркаДляОбработкиБГосИС);
	
	//Вик 2024-07-02 Поиск Характеристики по МРЦ
	МРЦ	=	Неопределено;
	Попытка   
		//Вик 2024-09-25
		Если СтрДлина(ДанныеПоШтрихкодам.ДанныеКодовМаркировки[0].Штрихкод) >40 тогда
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки[0].ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
		КонецЕсли;
		//

		Если ДанныеПоШтрихкодам.ДанныеКодовМаркировки[0].ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская тогда
			МРЦ			=	СтрЗаменить(Строка(ДанныеПоШтрихкодам.ДанныеКодовМаркировки[0].СоставКодаМаркировки.МРЦ), Символы.НПП,"");
			
		ИначеЕсли ДанныеПоШтрихкодам.ДанныеКодовМаркировки[0].ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая тогда //БЛОК
			
			ДлинаМРЦ	=	СтрДлина(ДанныеПоШтрихкодам.ДанныеКодовМаркировки[0].СоставКодаМаркировки.МРЦСтрокой) - 3;	
			
			МРЦ			=	Сред(ДанныеПоШтрихкодам.ДанныеКодовМаркировки[0].СоставКодаМаркировки.МРЦСтрокой,1,ДлинаМРЦ) ;
		КонецЕсли;
		
	Исключение 	
	КонецПопытки;
	//
	
	//Вик 2024-10-02 учет универсальных марок 
	Если ДанныеКодовМаркировки.Количество()>0 тогда 
		Запрос	=	Новый Запрос("ВЫБРАТЬ
		      	 	             |	УниверсальныеМарки.Номенклатура КАК Номенклатура
		      	 	             |ИЗ
		      	 	             |	РегистрСведений.ТБКУниверсальныеМарки КАК УниверсальныеМарки
		      	 	             |ГДЕ
		      	 	             |	УниверсальныеМарки.Марка Подобно &Марка");
		Запрос.УстановитьПараметр("Марка", "%"+ДанныеПоШтрихкодам.ДанныеКодовМаркировки[0].Штрихкод+"%");
		
		Если Запрос.Выполнить().Пустой() тогда
			Запрос.УстановитьПараметр("Марка", "%" + Лев(ДанныеПоШтрихкодам.ДанныеКодовМаркировки[0].Штрихкод,21) + "%"); 			
		КонецЕсли;
		
		Рез = Запрос.Выполнить().Выбрать();
		
		Если Рез.Следующий() тогда
			ДанныеПоШтрихкодам.ДанныеКодовМаркировки[0].Номенклатура	=	 Рез.Номенклатура;
			
			Запрос	=	Новый запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			      	 	             |	Штрихкоды.Штрихкод КАК Штрихкод
			      	 	             |ИЗ
			      	 	             |	РегистрСведений.Штрихкоды КАК Штрихкоды
			      	 	             |ГДЕ
			      	 	             |	Штрихкоды.Владелец = &Владелец");
			Запрос.УстановитьПараметр("Владелец", Рез.Номенклатура);
			Рез = Запрос.Выполнить().Выбрать();
			Если Рез.Следующий() тогда
				ШтрихкодыEAN.Добавить(Рез.Штрихкод);
				ДанныеКодовМаркировки[0].ТребуетсяСопоставление	= Ложь; 
				ДанныеКодовМаркировки[0].EAN	=	Рез.Штрихкод; 
				ДанныеКодовМаркировки[0].GTIN	=	"0" + Рез.Штрихкод;
			КонецЕсли;				
		КонецЕсли;         
	КонецЕсли; 
	//

	
	//ИнформацияПоШтрихкодамEAN = ШтрихкодированиеОбщегоНазначенияИС.ДанныеПоШтрихкодамEAN(ШтрихкодыEAN, ПараметрыСканирования, GTINПотребительскихУпаковок);
	ИнформацияПоШтрихкодамEAN = ШтрихкодированиеОбщегоНазначенияИС.ТБКДанныеПоШтрихкодамEAN(ШтрихкодыEAN, ПараметрыСканирования, GTINПотребительскихУпаковок, МРЦ);

	//Вик 2024-09-25
	Если СтрДлина(ДанныеПоШтрихкодам.ДанныеКодовМаркировки[0].Штрихкод) >40 тогда
		ИнформацияПоШтрихкодамEAN[0].ВидУпаковкиИС = Перечисления.ВидыУпаковокИС.Групповая;
		Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
			СтрокаДанных.ВидУпаковки	= Перечисления.ВидыУпаковокИС.Групповая;	
			СтрокаДанных.Характеристика	= ИнформацияПоШтрихкодамEAN[0].Характеристика;	
		КонецЦикла;
		
	ИначеЕсли Найти(ИнформацияПоШтрихкодамEAN[0].Упаковка, "упак") тогда //2024-11-07
		ИнформацияПоШтрихкодамEAN[0].ВидУпаковкиИС = Перечисления.ВидыУпаковокИС.Групповая;
		Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
			СтрокаДанных.ВидУпаковки	= Перечисления.ВидыУпаковокИС.Групповая;	
			//СтрокаДанных.Характеристика	= ИнформацияПоШтрихкодамEAN[0].Характеристика;	
		КонецЦикла;
	КонецЕсли;   
	//
	
	ДанныеДокументаОснования = Неопределено;
	Если ПараметрыСканирования.КонтрольРасхожденийСДокументомОснованием
		И ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование) Тогда
		ДанныеДокументаОснования = ДанныеДокументаОснования(ПараметрыСканирования);
	КонецЕсли;
	
	ШаблоныГрупповыхУпаковок = Новый Соответствие;
	ШаблоныНаборов = Новый Соответствие;
	ШаблоныГрупповыхУпаковокИНаборов = Новый Соответствие;
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		МодульИнтеграцияИСМПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПКлиентСервер");
		Для Каждого Шаблон Из МодульИнтеграцияИСМПКлиентСервер.ШаблоныГрупповыхУпаковок() Цикл
			ШаблоныГрупповыхУпаковокИНаборов.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Групповая);
			ШаблоныГрупповыхУпаковок.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Групповая);
		КонецЦикла;
		Для Каждого Шаблон Из МодульИнтеграцияИСМПКлиентСервер.ШаблоныНаборов() Цикл
			ШаблоныГрупповыхУпаковокИНаборов.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Набор);
			ШаблоныНаборов.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Набор);
		КонецЦикла;
	КонецЕсли;
	
	КэшДанныеОрганизаций = Новый Соответствие();
	
	Для Каждого СтрокаДанных Из ДанныеКодовМаркировки Цикл
		
		ДанныеПулаПоКоду = Неопределено;
		Если ДанныеПулаПоКодамМаркировки <> Неопределено Тогда
			ДанныеПулаПоКоду = ДанныеПулаПоКодамМаркировки.Найти(
				НормализованныеКодыМаркировкиДляПолученияСведенийИзПула[СтрокаДанных.Штрихкод], "КодМаркировки");
		КонецЕсли;
		
		КодМаркировкиЗаполненПоПулу = Ложь;
		
		Если ДанныеПулаПоКоду <> Неопределено Тогда
			
			СтрокаДанных.ЕстьВПулеКодовМаркировки = Истина;
			СтрокаДанных.ПолныйКодМаркировки      = ДанныеПулаПоКоду.ПолныйКодМаркировки;
			
			Если Не ДанныеПулаПоКоду.СохраненоПриСканировании Тогда
				СтрокаДанных.ЭтоКодВводаОстатков = ДанныеПулаПоКоду.МаркировкаОстатков;
			КонецЕсли;
			
			Если СтрокаДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
				И Не ЗначениеЗаполнено(СтрокаДанных.ПредставлениеНоменклатуры) Тогда
				СтрокаДанных.ПредставлениеНоменклатуры = РегистрыСведений.ПулКодовМаркировкиСУЗ.ПредставлениеКИЗ(ДанныеПулаПоКоду);
			КонецЕсли;
			
			// Оптимизация. Заполнение способа ввода в оборот из Пула кодов маркировки
			Если Не ДанныеПулаПоКоду.СохраненоПриСканировании Тогда
				
				Если ЗначениеЗаполнено(ДанныеПулаПоКоду.СпособВводаВОборот)
					И Не ЗначениеЗаполнено(СтрокаДанных.СпособВводаВОборот) Тогда
					
					СтрокаДанных.СпособВводаВОборот = ДанныеПулаПоКоду.СпособВводаВОборот;
					Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
						СтрокаДанных.СтрокаДерева.СпособВводаВОборот = СтрокаДанных.СпособВводаВОборот;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПараметрыСканирования.ЭтоПечатьКодаМаркировкиИзПулаИСМП Тогда
				
					Организация = ДанныеПулаПоКоду.Организация;
					
					СведенияОбОрганизации = КэшДанныеОрганизаций.Получить(Организация);
					
					Если СведенияОбОрганизации = Неопределено
						И ДанныеПоШтрихкодам.СведенияОбОрганизациях <> Неопределено Тогда
						СведенияОбОрганизации = ДанныеПоШтрихкодам.СведенияОбОрганизациях[Организация];
						КэшДанныеОрганизаций.Вставить(Организация, СведенияОбОрганизации);
					КонецЕсли;
					
					Если СведенияОбОрганизации = Неопределено Тогда
						СведенияОбОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация);
						КэшДанныеОрганизаций.Вставить(Организация, СведенияОбОрганизации);
					КонецЕсли;
					
					Если СведенияОбОрганизации <> Неопределено Тогда
						СтрокаДанных.ИННВладельца = СведенияОбОрганизации.ИНН;
						СтрокаДанных.Владелец     = Организация;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
					
					ПоляЗаполнения = Новый Структура("ВидПродукции, ВидУпаковки, ТипУпаковки");
					ПоляЗаполнения.ВидПродукции = ДанныеПулаПоКоду.ВидПродукции;
					
					ВидУпаковкиПоШаблону = ШаблоныГрупповыхУпаковокИНаборов[ДанныеПулаПоКоду.Шаблон];
					Если ВидУпаковкиПоШаблону = Перечисления.ВидыУпаковокИС.Групповая Тогда
						ПоляЗаполнения.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
						ПоляЗаполнения.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
					ИначеЕсли ВидУпаковкиПоШаблону = Перечисления.ВидыУпаковокИС.Набор Тогда
						ПоляЗаполнения.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
						ПоляЗаполнения.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
					Иначе
						ПоляЗаполнения.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
						ПоляЗаполнения.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(СтрокаДанных, ПоляЗаполнения);
					
					Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, ПоляЗаполнения);
					КонецЕсли;
					
				КонецЕсли;
			
				Если Не СтрокаДанных.НоменклатураСопоставленаПоУПД
					И ЗначениеЗаполнено(ДанныеПулаПоКоду.Номенклатура) Тогда
					
					СтрокаДанных.Номенклатура   = ДанныеПулаПоКоду.Номенклатура;
					СтрокаДанных.Характеристика = ДанныеПулаПоКоду.Характеристика;
					СтрокаДанных.ВидПродукции   = ДанныеПулаПоКоду.ВидПродукции;
					
					СтрокаДанных.ПроизвольнаяЕдиницаУчета = ДанныеПулаПоКоду.ПроизвольнаяЕдиницаУчета;
					СтрокаДанных.ТребуетВзвешивания       = ДанныеПулаПоКоду.ТребуетВзвешивания;
					
					Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
						СтрокаДанных.СтрокаДерева.Номенклатура   = СтрокаДанных.Номенклатура;
						СтрокаДанных.СтрокаДерева.Характеристика = СтрокаДанных.Характеристика;
						СтрокаДанных.СтрокаДерева.ВидПродукции   = СтрокаДанных.ВидПродукции;
					КонецЕсли;
					
					СтрокаДанных.ТребуетсяСопоставление = Ложь;
					КодМаркировкиЗаполненПоПулу = Истина;
				ИначеЕсли СтрокаДанных.ЭтоКодВводаОстатков Тогда
					СтрокаДанных.ТребуетсяСопоставление = Ложь;
					КодМаркировкиЗаполненПоПулу = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТребуетсяСопоставление = Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
			Или СтрокаДанных.ТребуетсяСопоставление;
		
		ЗначениеПоиска = ?(ЗначениеЗаполнено(СтрокаДанных.EAN), СтрокаДанных.EAN, СтрокаДанных.Штрихкод);
		
		Если ЗначениеЗаполнено(СтрокаДанных.EAN) Тогда
			EAN  = СтрокаДанных.EAN;
			GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(EAN);
		Иначе
			EAN  = "";
			GTIN = "";
			Если РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ЭтоGTIN(ЗначениеПоиска) Тогда
				EAN = РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ШтрихкодEANИзGTIN(ЗначениеПоиска);
				Если ЗначениеЗаполнено(EAN) Тогда
					GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(EAN);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		UPC = Неопределено;
		Если Лев(EAN, 1) = "0"
			И СтрДлина(EAN) = 13 Тогда
			UPC = Сред(EAN, 2);
		КонецЕсли;
		
		ЭтоШтрихкодНоменклатуры = Ложь;
		Если СтрокаДанных.Штрихкод = ЗначениеПоиска
			Или СтрокаДанных.Штрихкод = EAN
			Или СтрокаДанных.Штрихкод = ("00000" + EAN) // Считан код EAN8 в формате EAN13
			Или СтрокаДанных.Штрихкод = GTIN
			Или СтрокаДанных.Штрихкод = UPC Тогда
			ЭтоШтрихкодНоменклатуры = Истина;
		КонецЕсли;
		
		РезультатПоискаУникален                = Неопределено;
		ВидПродукцииУникален                   = Неопределено;
		ПодменныеНоменклатурыЧастичногоВыбытие = Новый ТаблицаЗначений();
		ПодменныеНоменклатурыЧастичногоВыбытие.Колонки.Добавить("Номенклатура",                   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		ПодменныеНоменклатурыЧастичногоВыбытие.Колонки.Добавить("Характеристика",                 Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		ПодменныеНоменклатурыЧастичногоВыбытие.Колонки.Добавить("ЧастичноеВыбытиеНоменклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		ПодменныеНоменклатурыЧастичногоВыбытие.Колонки.Добавить("ЧастичноеВыбытиеХарактеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		ПодменныеНоменклатурыЧастичногоВыбытие.Индексы.Добавить("Номенклатура,Характеристика");
		
		НайденныеШтрихкодыEAN = ИнформацияПоШтрихкодамEAN.НайтиСтроки(Новый Структура("ШтрихкодEAN", ЗначениеПоиска));
		ВариантовВыбора = НайденныеШтрихкодыEAN.Количество();
		
		Для Каждого СтрокаИнформации Из НайденныеШтрихкодыEAN Цикл
			
			// Штрихкоды не требующие обработки библиотекой
			Если СтрокаИнформации.ТребуетсяОбработкаШтрихкода Тогда
				СтрокаДанных.ТребуетсяОбработкаШтрихкода = Истина;
				СтрокаДанных.ДополнительныеПараметры = СтрокаИнформации.ДанныеШтрихкода;
				Прервать;
			// Внешние по отношению к ГосИС данные штрихкодов (все)
			ИначеЕсли ЗначениеЗаполнено(СтрокаИнформации.ДанныеШтрихкода) Тогда
				СтрокаДанных.ВнешниеДанныеПоШтрихкодам.Добавить(СтрокаИнформации.ДанныеШтрихкода);
			КонецЕсли;
			
			Если ТребуетсяСопоставление Тогда
				ВариантовВыбора = ВариантовВыбора - 1;
				Если Не СтрокаДанных.НоменклатураСопоставленаПоУПД Тогда
					// Если вариантов выбора несколько - отфильтруем подходящие. Если не подходят все - оставим 1 для вывода ошибки
					Если Не (РезультатПоискаУникален = Неопределено И ВариантовВыбора = 0) Тогда
						// Маркируемая продукция
						Если ПараметрыСканирования.ТолькоМаркируемаяПродукция
								И Не СтрокаИнформации.МаркируемаяПродукция Тогда
							Продолжить;
						// Соответствие документу-основанию
						ИначеЕсли ДанныеДокументаОснования <> Неопределено
							И ДанныеДокументаОснования.НайтиСтроки(
								Новый Структура(
									"Номенклатура,Характеристика",
									СтрокаИнформации.Номенклатура, СтрокаИнформации.Характеристика)).Количество() = 0 Тогда
							Продолжить;
						// Соответствие пулу
						ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ЕстьВПулеКодовМаркировки")
							И СтрокаДанных.ЕстьВПулеКодовМаркировки
								И ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
								И (РезультатПоискаУникален = Истина
									Или СтрокаИнформации.Номенклатура <> СтрокаДанных.Номенклатура
									Или СтрокаИнформации.Характеристика <> СтрокаДанных.Характеристика) Тогда
							Продолжить;
						ИначеЕсли Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
								И Не ЭтоШтрихкодНоменклатуры
								И ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина).Найти(СтрокаИнформации.ВидПродукции) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли СтрокаИнформации.Номенклатура <> СтрокаДанных.Номенклатура
					Или СтрокаИнформации.Характеристика <> СтрокаДанных.Характеристика Тогда
					Продолжить;
				КонецЕсли;
				
				Если РезультатПоискаУникален = Неопределено Тогда
					РезультатПоискаУникален = Истина;
				ИначеЕсли РезультатПоискаУникален = Истина Тогда
					РезультатПоискаУникален = СтрокаДанных.Номенклатура = СтрокаИнформации.Номенклатура
						И СтрокаДанных.Характеристика = СтрокаИнформации.Характеристика
						И СтрокаДанных.Серия = СтрокаИнформации.Серия;
				КонецЕсли;
				
				Если ВидПродукцииУникален = Неопределено Тогда
					ВидПродукцииУникален = Истина;
				ИначеЕсли ВидПродукцииУникален = Истина Тогда
					ВидПродукцииУникален = СтрокаДанных.ВидПродукции = СтрокаИнформации.ВидПродукции;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИнформации.ВидУпаковкиИС) Тогда
				Если Не ЗапрашиватьДанныеСервисаИСМП И СтрокаДанных.НоменклатураСопоставленаПоУПД
					Или Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
					Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
						СтрокаДанных.ВидПродукции, СтрокаИнформации.ВидУпаковкиИС, СтрокаДанных.ДанныеРазбора) Тогда
						СтрокаДанных.ВидУпаковки = СтрокаИнформации.ВидУпаковкиИС;
						Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
							СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
						Иначе 
							СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				// Флаг взводится, если вид упаковки определен по данным ЭДО
				СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN = Ложь;
			КонецЕсли;
			
			Если КодМаркировкиЗаполненПоПулу Тогда
				
				//@skip-check query-in-loop
				Если ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам) Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаИнформации, "ЧастичноеВыбытиеВариантУчета,ЕмкостьПотребительскойУпаковки");
				ИначеЕсли ПараметрыСканирования <> Неопределено
					И ПараметрыСканирования.Свойство("ВидОперацииИСМП")
					И ПараметрыСканирования.ВидОперацииИСМП = Перечисления["ВидыОперацийИСМП"]["ПодключениеКОборудованиюРозлива"]
					И ЗначениеЗаполнено(СтрокаИнформации.ЧастичноеВыбытиеВариантУчета) Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаИнформации, "ЧастичноеВыбытиеВариантУчета");
				КонецЕсли;
				// В данных пула отсутствуют сведения об упаковке
				Если СтрокаДанных.Номенклатура = СтрокаИнформации.Номенклатура Тогда
					СтрокаДанных.Упаковка = СтрокаИнформации.Упаковка;
				КонецЕсли;

			ИначеЕсли Не СтрокаДанных.НоменклатураСопоставленаПоУПД
				Или (СтрокаДанных.Номенклатура = СтрокаИнформации.Номенклатура
					И СтрокаДанных.Характеристика = СтрокаИнформации.Характеристика) Тогда
				
				Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
					И СтрокаДанных.ОбработатьБезМаркировки Тогда
					// Количество будет заполнено пользователем в форме уточнения данных
					ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаИнформации,, "Количество, ВидПродукции, ПлановоеКоличествоПотребительскихУпаковок, Коэффициент");
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаИнформации,, "Количество, ВидПродукции");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаИнформации.ВидПродукции) Тогда
					СтрокаДанных.ВидПродукции = СтрокаИнформации.ВидПродукции;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанных.ВидПродукции) 
					И СтрокаДанных.ДанныеРазбора = Неопределено Тогда
					
					ШтрихкодированиеОбщегоНазначенияИС.УточнитьДанныеРазбораПоВидуПродукции(СтрокаДанных, СтрокаДанных.ВидПродукции);
					
					Если СтрокаДанных.ДанныеРазбора <> Неопределено
						И ЗначениеЗаполнено(СтрокаИнформации.ВидУпаковкиИС)
						И Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
						И РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
							СтрокаДанных.ВидПродукции, СтрокаИнформации.ВидУпаковкиИС, СтрокаДанных.ДанныеРазбора) Тогда
						
						СтрокаДанных.ВидУпаковки = СтрокаИнформации.ВидУпаковкиИС;
						Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
							СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
						Иначе
							СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
						КонецЕсли;

					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаИнформации.Весовой Тогда
					СтрокаДанных.Количество = СтрокаИнформации.Количество;
				ИначеЕсли СтрокаИнформации.ТребуетВзвешивания Тогда
					СтрокаДанных.Количество = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаДанных.EAN = "" Тогда
				СтрокаДанных.EAN = EAN;
			КонецЕсли;
			
			Если ЭтоШтрихкодНоменклатуры Тогда
				
				СтрокаДанных.ЭтоШтрихкодНоменклатуры = Истина;
				СтрокаДанных.Идентифицирован         = Истина;
				
				Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
					И СтрокаДанных.ОбработатьБезМаркировки Тогда
					// Вид продукции определен по команде Добавить без кода маркировки в форме проверки и подбора
				Иначе
					ТипШтрихкодаСтрока = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(СтрокаДанных.Штрихкод);
					СтрокаДанных.ТипШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ТипШтрихкодаПоСтроке(ТипШтрихкодаСтрока);
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
				СтрокаДанных.Идентифицирован = Истина;
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок = 1;
				Если СтрокаИнформации.ПроизвольнаяЕдиницаУчета Тогда
					СтрокаДанных.Коэффициент = СтрокаИнформации.Коэффициент;
				ИначеЕсли Не СтрокаИнформации.ПроизвольнаяЕдиницаУчета Тогда
					СтрокаДанных.Коэффициент = 1;
				КонецЕсли;
				СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
			КонецЕсли;
			
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И ЗначениеЗаполнено(СтрокаИнформации.ВидУпаковкиИС) Тогда
				Если СтрокаДанных.ДополнительныеПараметры = Неопределено Тогда
					СтрокаДанных.ДополнительныеПараметры = Новый Структура;
				КонецЕсли;
				СтрокаДанных.ДополнительныеПараметры.Вставить("ВидУпаковкиПоGTIN", СтрокаИнформации.ВидУпаковкиИС);
			КонецЕсли;
			
			Если (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
				И ЗначениеЗаполнено(СтрокаДанных.GTIN)
				И СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И СтрокаДанных.СоставКодаМаркировки.Свойство("КоличествоВложенныхЕдиниц") Тогда
				КоличествоПотребительскихУпаковокGTIN02 = СтрокаДанных.СоставКодаМаркировки.КоличествоВложенныхЕдиниц;
				Если КоличествоПотребительскихУпаковокGTIN02 <> Неопределено Тогда
					
					ПлановоеКоличествоПотребительскихУпаковок = СтрокаИнформации.ПлановоеКоличествоПотребительскихУпаковок;
					Если ПлановоеКоличествоПотребительскихУпаковок = 0 
						И GTINПотребительскихУпаковок[СтрокаДанных.GTIN] <> Неопределено Тогда
						ПлановоеКоличествоПотребительскихУпаковок = 1;
					КонецЕсли;
					
					СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок = ПлановоеКоличествоПотребительскихУпаковок * КоличествоПотребительскихУпаковокGTIN02;
					СтрокаДанных.Коэффициент                               = СтрокаИнформации.Коэффициент              * КоличествоПотребительскихУпаковокGTIN02;
					
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаДанных.ТребуетВзвешивания
				И СтрокаДанных.СоставКодаМаркировки <> Неопределено
				И СтрокаДанных.СоставКодаМаркировки.Свойство("МассаНеттоВКг")
				И СтрокаДанных.СоставКодаМаркировки.МассаНеттоВКг <> Неопределено Тогда
				СтрокаДанных.Количество = СтрокаДанных.СоставКодаМаркировки.МассаНеттоВКг;
			КонецЕсли;
			
			Если Не СтрокаДанных.ЭтоШтрихкодНоменклатуры
				И Не СтрокаДанных.ТребуетВзвешивания
				И ЗначениеЗаполнено(СтрокаДанных.Коэффициент) Тогда
				СтрокаДанных.Количество = СтрокаДанных.Коэффициент;
			КонецЕсли;
			
			СтрокаДанных.КоличествоПотребительскихУпаковок = СтрокаДанных.ПлановоеКоличествоПотребительскихУпаковок;
			
			Если (СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет)
				И ЗначениеЗаполнено(СтрокаДанных.GTIN)
				И Не ЗначениеЗаполнено(СтрокаДанных.ТипУпаковки) Тогда
				СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			КонецЕсли;
			
			СтрокаДанных.ТребуетсяСопоставление = Ложь;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаИнформации);
				СтрокаДанных.СтрокаДерева.Коэффициент = СтрокаДанных.Коэффициент;
			КонецЕсли;
			
			Если Не КодМаркировкиЗаполненПоПулу И ТребуетсяСопоставление Тогда

				ДанныеУточнения = Новый Структура();
				ДанныеУточнения.Вставить("Номенклатура");
				ДанныеУточнения.Вставить("Характеристика");
				ДанныеУточнения.Вставить("Серия");
				ДанныеУточнения.Вставить("Упаковка");
				ДанныеУточнения.Вставить("ПредставлениеНоменклатуры");

				ЗаполнитьЗначенияСвойств(ДанныеУточнения, СтрокаИнформации);
				СтрокаДанных.СписокНоменклатуры.Добавить(ДанныеУточнения);

				//@skip-check query-in-loop
				Если ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам)
					И СтрокаДанных.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
					СтруктураПоиска = Новый Структура("ЧастичноеВыбытиеНоменклатура, ЧастичноеВыбытиеХарактеристика");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
					Если ПодменныеНоменклатурыЧастичногоВыбытие.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
						НоваяСтрока = ПодменныеНоменклатурыЧастичногоВыбытие.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПодменныеНоменклатурыЧастичногоВыбытие.Количество() Тогда
			
			УдаляемыеЭлементыСпискаНоменклатуры = Новый Массив;
			Для Каждого ЭлементСписка Из СтрокаДанных.СписокНоменклатуры Цикл
				СтруктураПоиска = Новый Структура("ЧастичноеВыбытиеНоменклатура, ЧастичноеВыбытиеХарактеристика");
				СтруктураПоиска.ЧастичноеВыбытиеНоменклатура   = ЭлементСписка.Номенклатура;
				СтруктураПоиска.ЧастичноеВыбытиеХарактеристика = ЭлементСписка.Характеристика;
				СтрокиПодменнойНоменклатуры = ПодменныеНоменклатурыЧастичногоВыбытие.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПодменнойНоменклатуры.Количество() > 0 Тогда
					УдаляемыеЭлементыСпискаНоменклатуры.Добавить(ЭлементСписка);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементыСпискаНоменклатуры Цикл
				СтрокаДанных.СписокНоменклатуры.Удалить(СтрокаДанных.СписокНоменклатуры.Найти(УдаляемыйЭлемент));
			КонецЦикла;
			Если РезультатПоискаУникален = Ложь И СтрокаДанных.СписокНоменклатуры.Количество() <= 1 Тогда
				РезультатПоискаУникален = Истина;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("ЧастичноеВыбытиеНоменклатура, ЧастичноеВыбытиеХарактеристика");
			СтруктураПоиска.ЧастичноеВыбытиеНоменклатура   = СтрокаДанных.Номенклатура;
			СтруктураПоиска.ЧастичноеВыбытиеХарактеристика = СтрокаДанных.Характеристика;
			СтрокиПодменнойНоменклатуры = ПодменныеНоменклатурыЧастичногоВыбытие.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПодменнойНоменклатуры.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокиПодменнойНоменклатуры[0]);
				СтрокаДанных.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура;
			КонецЕсли;

		КонецЕсли;
		
		Если Не КодМаркировкиЗаполненПоПулу И РезультатПоискаУникален = Ложь Тогда
			
			СтрокаДанных.Номенклатура   = Неопределено;
			СтрокаДанных.Характеристика = Неопределено;
			СтрокаДанных.Серия          = Неопределено;
			СтрокаДанных.Упаковка       = Неопределено;
			
			ИменаКолонокЗаполнения = "Номенклатура, Характеристика, Серия, Упаковка";
			//@skip-check query-in-loop
			Если ШтрихкодированиеОбщегоНазначенияИС.ТребуетсяЧастичноеВыбытие(ПараметрыСканирования, ДанныеПоШтрихкодам) Тогда
				СтрокаДанных.ЧастичноеВыбытиеВариантУчета   = Неопределено;
				СтрокаДанных.ЕмкостьПотребительскойУпаковки = Неопределено;
				СтрокаДанных.ЧастичноеВыбытиеНоменклатура   = Неопределено;
				СтрокаДанных.ЧастичноеВыбытиеХарактеристика = Неопределено;
				ИменаКолонокЗаполнения = ИменаКолонокЗаполнения + ", ЧастичноеВыбытиеВариантУчета, ЕмкостьПотребительскойУпаковки, ЧастичноеВыбытиеНоменклатура, ЧастичноеВыбытиеХарактеристика";
			КонецЕсли;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, ИменаКолонокЗаполнения);
			КонецЕсли;
			
			СтрокаДанных.ПредставлениеНоменклатуры = СтрШаблон(
				НСтр("ru = '%1 ( + еще %2 )'"),
				Лев(СтрокаДанных.СписокНоменклатуры[0].ПредставлениеНоменклатуры, 20),
				СтрокаДанных.СписокНоменклатуры.Количество() - 1);
			
		Иначе
			СтрокаДанных.СписокНоменклатуры.Очистить();
		КонецЕсли;
		
		Если Не КодМаркировкиЗаполненПоПулу И ВидПродукцииУникален = Ложь Тогда
			
			СтрокаДанных.ВидПродукции = Неопределено;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ВидПродукции");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеПулаПоКоду <> Неопределено
			И Не ДанныеПулаПоКоду.СохраненоПриСканировании Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки) Тогда
				
				Если ШаблоныГрупповыхУпаковок[ДанныеПулаПоКоду.Шаблон] <> Неопределено Тогда
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
					СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
				ИначеЕсли ШаблоныНаборов[ДанныеПулаПоКоду.Шаблон] <> Неопределено Тогда
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
					СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
				Иначе
					СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
					СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
				КонецЕсли;
				
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ВидУпаковки, ТипУпаковки");
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
				И ЗначениеЗаполнено(ДанныеПулаПоКоду.Номенклатура) Тогда
				
				СтрокаДанных.Номенклатура   = ДанныеПулаПоКоду.Номенклатура;
				СтрокаДанных.Характеристика = ДанныеПулаПоКоду.Характеристика;
				СтрокаДанных.ВидПродукции   = ДанныеПулаПоКоду.ВидПродукции;
				
				Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
					СтрокаДанных.СтрокаДерева.Номенклатура   = СтрокаДанных.Номенклатура;
					СтрокаДанных.СтрокаДерева.Характеристика = СтрокаДанных.Характеристика;
					СтрокаДанных.СтрокаДерева.ВидПродукции   = СтрокаДанных.ВидПродукции;
				КонецЕсли;
				
				СтрокаДанных.ТребуетсяСопоставление = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
			И СтрокаДанных.ДанныеРазбора <> Неопределено
			И СтрокаДанных.КоличествоПотребительскихУпаковок > 1
			И ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(СтрокаДанных.ДанныеРазбора.ВидУпаковки, СтрокаДанных.ДанныеРазбора) Тогда
			СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
			СтрокаДанных.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			
			Если СтрокаДанных.СтрокаДерева <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДанных.СтрокаДерева, СтрокаДанных, "ВидУпаковки, ТипУпаковки");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&Вместо("ОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода")
Процедура ТБКОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода(ДанныеШтрихкода, ИзмененныеСвойства, ПараметрыСканирования)
	
	Если Не ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода, ИзмененныеСвойства, ПараметрыСканирования);
	Иначе 
		//Вик 2024-09-25
		Спр = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", ДанныеШтрихкода.Штрихкод); 
		Если НЕ Спр.Пустая() тогда
			ДанныеШтрихкода.ШтрихкодУпаковки = Спр.Ссылка;
		иначе	
		//
			ДанныеШтрихкода.ШтрихкодУпаковки = СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода, ПараметрыСканирования);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//&Вместо("ПроверитьНаСоответствиеНоменклатурыВидуПродукции")
//Процедура ТБКПроверитьНаСоответствиеНоменклатурыВидуПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
//		Если ЕстьОшибки Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
//		
//		ВидыПродукцииНоменклатуры = КлючЗначение.Значение.ВидыПродукции;
//		
//		//вик 2024-05-31 Костыль на пиво
//		Если Лев(Строка(КлючЗначение.Значение.Номенклатура),4) = "Пиво"  Тогда			
//			ВидыПродукцииНоменклатуры	=	Новый Массив;
//			ВидыПродукцииНоменклатуры.добавить(Перечисления.ВидыПродукцииИС.Табачная);
//			КлючЗначение.Значение.ВидыПродукции	=	ВидыПродукцииНоменклатуры; 		
//		КонецЕсли; 
//		//
//		

//		ВидПродукцииПоШтрихкоду   = ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции[КлючЗначение.Ключ];
//		
//		Если ВидПродукцииПоШтрихкоду <> Неопределено
//			И ВидыПродукцииНоменклатуры.Найти(ВидПродукцииПоШтрихкоду) = Неопределено Тогда			
//			
//			ЕстьОшибки = Истина;
//			
//			Если ВидыПродукцииНоменклатуры.Количество() = 0 Тогда
//				ШаблонОшибки =  НСтр("ru = 'Не задан вид продукции номенклатуры %1'");
//				ТекстОшибки = СтрШаблон(ШаблонОшибки, КлючЗначение.Значение.Номенклатура);
//			Иначе
//				ШаблонОшибки = НСтр("ru = 'Значение штрихкода соответствует виду %1'");
//				ТекстОшибки = СтрШаблон(ШаблонОшибки, ВидПродукцииПоШтрихкоду);
//			КонецЕсли;
//			
//			КлючЗначение.Значение.ТекстОшибки = ТекстОшибки;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
//		
//		Для Каждого СтрокаТовары Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
//			
//			Если Не ЗначениеЗаполнено(СтрокаТовары.ВидПродукции) Тогда
//				ЕстьОшибки = Истина;
//				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
//				СтрокаТовары.СтрокаДерева.ЕстьОшибки         = Истина;
//				СтрокаТовары.СтрокаДерева.ТекстОшибки        = НСтр("ru = 'Вид продукции не определен'");
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//	КонецЕсли;
//	

//КонецПроцедуры



