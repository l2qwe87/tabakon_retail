Процедура ПодключитьОтключить (Устройство)
	ПараметрыККТ = Устройство.Параметры;
	
	ПараметрыПодключения = Новый Структура();
	ПараметрыПодключения.Вставить("ПараметрыРегистрации",Устройство.ПараметрыРегистрации);
	ПараметрыПодключения.Вставить("ТипОборудования","ККТ");
	
	//Подключаем  
	ПодключаемоеОборудование = ПодключаемоеОборудование();
	Для Каждого Подключение Из ПодключаемоеОборудование.ПараметрыПодключенияПО Цикл

		ОбъектДрайвера = Подключение.ОбъектДрайвера;
	
		ОбработчикДрайвераМодуль = МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикДрайвера(Устройство.ОбработчикДрайвера, Не Устройство.ВСоставеКонфигурации, Устройство.ТипОборудованияИмя);
		
		ВыходныеПараметры = Неопределено;
		
		Результат = ОбработчикДрайвераМодуль.ПодключитьУстройство(ОбъектДрайвера, ПараметрыККТ, ПараметрыПодключения, ВыходныеПараметры);
		Если Результат тогда
			//Отключение
			ВыходныеПараметры = Неопределено;
			Результат = ОбработчикДрайвераМодуль.ОтключитьУстройство(ОбъектДрайвера, ПараметрыККТ, ПараметрыПодключения, ВыходныеПараметры);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоменятьПараметры(Признак = Истина) экспорт
	
	СписокУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам();
	
	ТипККТ =  ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ");
	
	Для каждого Строка из СписокУстройств цикл
		Если Строка.ТипОборудования = ТипККТ тогда
			Попытка	
				ПараметрыККТ = Строка.Параметры;
				ПараметрыККТ.P_DisconnectIfEOT = Признак;
				
				ПодключитьОтключить(Строка); 
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСуммуККТ() экспорт
	СуммаККТ = МенеджерОборудованияКлиентСервер.ПолучитьСуммуККТ_Сервер();
	
	Если СуммаККТ = Неопределено тогда
		ПоменятьПараметры(Истина);
		СуммаККТ = МенеджерОборудованияКлиентСервер.ПолучитьСуммуККТ_Сервер();
		
		Если СуммаККТ = Неопределено тогда //не удалось освободить порт
			Возврат Неопределено;
		иначе
			ПоменятьПараметры(Ложь);
			Возврат СуммаККТ;
		КонецЕсли; 
	
	КонецЕсли; 	
КонецФункции

Функция СинхронизироватьСДатойКомпьютера(КассаККМ) экспорт
	Ответ = МенеджерОборудованияКлиентСервер.СинхронизироватьСДатойКомпьютера_Сервер(КассаККМ);
	
	Если не Ответ тогда
		ПоменятьПараметры(Истина);
		Ответ = МенеджерОборудованияКлиентСервер.СинхронизироватьСДатойКомпьютера_Сервер(КассаККМ);
		
		Если не Ответ тогда //не удалось освободить порт
			Возврат Неопределено;
		иначе
			ПоменятьПараметры(Ложь);
			Возврат Ответ;
		КонецЕсли; 
	
	КонецЕсли; 	
КонецФункции     

Функция УстановитьКлише() экспорт
	Ответ = МенеджерОборудованияКлиентСервер.УстановитьКлише_Сервер();
	
	Если не Ответ тогда
		ПоменятьПараметры(Истина);
		Ответ = МенеджерОборудованияКлиентСервер.УстановитьКлише_Сервер();
		
		Если не Ответ тогда //не удалось освободить порт
			Возврат ложь;
		иначе
			ПоменятьПараметры(Ложь);
			Возврат Ответ;
		КонецЕсли; 
	
	КонецЕсли;
	
	Возврат ответ;
КонецФункции


//&Вместо("НачатьВыполнениеКомандыПечатиЧека_ЗавершениеПечати")
//Процедура ТБКНачатьВыполнениеКомандыПечатиЧека_ЗавершениеПечати(ПараметрыВыполнения, Параметры)
//	ОбработчикДрайвераМодуль = ПараметрыВыполнения.ОбработчикДрайвераМодуль;
//	ОбъектДрайвера           = ПараметрыВыполнения.ОбъектДрайвера;
//	ПодключенноеУстройство   = ПараметрыВыполнения.ПодключенноеУстройство;
//	ВыходныеПараметры = Неопределено;
//	
//	Если ПараметрыВыполнения.ПродолжитьПечать Тогда 
//		
//		ОбщиеПараметры = ПараметрыВыполнения.ВходныеПараметры;
//		
//		ДополнительныеПараметры = Новый Структура();
//		ЗаполнитьПараметрыОперацииПодписиЧека(ДополнительныеПараметры);
//		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ПараметрыВыполнения);
//		ДополнительныеПараметры.Вставить("АдресЧека"  , ?(ПараметрыВыполнения.Свойство("АдресЧека"), ПараметрыВыполнения.АдресЧека, Неопределено));
//		ДополнительныеПараметры.Вставить("ПодписьЧека", ?(ПараметрыВыполнения.Свойство("ПодписьЧека"), ПараметрыВыполнения.ПодписьЧека, Неопределено));
//		ДополнительныеПараметры.Вставить("НомерКассы" , ?(ОбщиеПараметры.Свойство("НомерКассы"), ОбщиеПараметры.НомерКассы, Неопределено));
//		ОбщиеПараметры.Вставить("ПодписьЧека", ДополнительныеПараметры);
//		
//		Если ПараметрыВыполнения.ПоддержкаАсинхронногоРежима Тогда
//			
//			Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКомандыПечатиЧека_ЗавершениеПроцессаПечати", ЭтотОбъект, ПараметрыВыполнения);
//			ОбработчикДрайвераМодуль.НачатьВыполнениеКоманды(Оповещение, ПараметрыВыполнения.Команда, ПараметрыВыполнения.ВходныеПараметры, 
//				ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
//				
//		Иначе
//			//Вик 2024-01-17 Костыль для БК
//			Для каждого Строка из 	ПараметрыВыполнения.ВходныеПараметры.ПозицииЧека цикл
//				Если Найти(Строка.Наименование, " БК") тогда
//					Строка.Наименование	=	СтрЗаменить(Строка.Наименование, "Электронное устройство", "У") ;
//				КонецЕсли;
//			КонецЦикла;
//			//
//				
//			Результат = ОбработчикДрайвераМодуль.ВыполнитьКоманду(ПараметрыВыполнения.Команда, ПараметрыВыполнения.ВходныеПараметры,
//					ВыходныеПараметры, ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
//			Если Не Результат Тогда
//				Если ВыходныеПараметры.Количество() >= 2 Тогда
//					ТекстОшибки = ВыходныеПараметры[1];
//				КонецЕсли;
//				ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
//				
//				Если ПараметрыВыполнения.ОповещениеПриОшибке <> Неопределено Тогда
//					ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПриОшибке, ПараметрыВыполнения);
//				КонецЕсли;
//			КонецЕсли;
//			
//			Если Результат И НЕ ПустаяСтрока(ДополнительныеПараметры.ПодписьЧека) Тогда
//				
//				ШиринаСтроки = ?(ПодключенноеУстройство.ПараметрыПодключения.Свойство("ШиринаСтроки"), ПодключенноеУстройство.ПараметрыПодключения.ШиринаСтроки, 32); 
//				ВремВходныеПараметры = Новый Массив();
//				ВремВходныеПараметры.Добавить(СформироватьШаблонИнфоКвитанции(ДополнительныеПараметры, ШиринаСтроки));
//				
//				ВремВыходныеПараметры = Неопределено;
//				ДополнительныйРезультат = ОбработчикДрайвераМодуль.ВыполнитьКоманду("PrintText", ВремВходныеПараметры,
//					ВремВыходныеПараметры, ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
//			КонецЕсли;
//			
//			РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Результат, ТекстОшибки);
//			РезультатВыполнения.ВыходныеПараметры = ВыходныеПараметры;
//			РезультатВыполнения.Вставить("ОбработчикДрайвераМодуль", ОбработчикДрайвераМодуль);
//			РезультатВыполнения.Вставить("ОбъектДрайвера"          , ОбъектДрайвера);
//			РезультатВыполнения.Вставить("ПодключенноеУстройство"  , ПодключенноеУстройство);
//			РезультатВыполнения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
//			ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПриЗавершении, РезультатВыполнения);
//		КонецЕсли;
//		
//	Иначе
//		Если ПараметрыВыполнения.ПоддержкаАсинхронногоРежима Тогда
//			Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКомандыПечатиЧека_ЗавершениеОтмены", ЭтотОбъект, ПараметрыВыполнения);
//			ОбработчикДрайвераМодуль.НачатьВыполнениеКоманды(Оповещение, "CancelCheck", Неопределено,
//				ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
//		Иначе
//			ОбработчикДрайвераМодуль.ВыполнитьКоманду("CancelCheck", Неопределено, Неопределено,
//				ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
//				
//			ВыходныеПараметры = Новый Массив();
//			ВыходныеПараметры.Добавить(999);
//			ВыходныеПараметры.Добавить(ПараметрыВыполнения.ОписаниеОшибки);
//		
//			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ВыходныеПараметры", Ложь, ПараметрыВыполнения.ОписаниеОшибки, ВыходныеПараметры);
//			ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПриЗавершении, РезультатВыполнения);
//		КонецЕсли;
//	КонецЕсли;

//	
//	
//	
//КонецПроцедуры

