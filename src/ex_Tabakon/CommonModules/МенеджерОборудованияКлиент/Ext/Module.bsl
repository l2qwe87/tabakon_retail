Процедура ПодключитьОтключить (Устройство)		
	ПараметрыККТ = Устройство.Параметры;
	
	ПараметрыПодключения = Новый Структура();
	ПараметрыПодключения.Вставить("ПараметрыРегистрации",Устройство.ПараметрыРегистрации);
	ПараметрыПодключения.Вставить("ТипОборудования","ККТ");   
	ВыходныеПараметры = Неопределено;

   	ПодключаемоеОборудование = ПодключаемоеОборудование();
	Для каждого Строка из  ПодключаемоеОборудование.ДрайверыОборудования цикл
		Если Найти(Строка(Строка.Значение), "ATOL") тогда
	
			ОбъектДрайвера				=	Строка.Значение;

			Результат = ПодключитьУстройство(ОбъектДрайвера, ПараметрыККТ, ПараметрыПодключения, ВыходныеПараметры);
			Если Результат тогда
				//Отключение
				ВыходныеПараметры = Неопределено;
				Результат = ОтключитьУстройство(ОбъектДрайвера, ПараметрыККТ, ПараметрыПодключения, ВыходныеПараметры);
			КонецЕсли; 
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоменятьПараметры(Признак = Истина) экспорт
	
	СписокУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам();
	
	ТипККТ =  ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ");
	
	Для каждого Строка из СписокУстройств цикл
		Если Строка.ТипОборудования = ТипККТ тогда
			Попытка	
				ПараметрыККТ = Строка.Параметры;
				ПараметрыККТ.P_DisconnectIfEOT = Признак;
				
				ПодключитьОтключить(Строка); 
			Исключение   
				сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСуммуККТ() экспорт
	СуммаККТ = МенеджерОборудованияКлиентСервер.ПолучитьСуммуККТ_Сервер();
	
	Если СуммаККТ = Неопределено тогда
		ПоменятьПараметры(Истина);
		СуммаККТ = МенеджерОборудованияКлиентСервер.ПолучитьСуммуККТ_Сервер();
		
		Если СуммаККТ = Неопределено тогда //не удалось освободить порт
			Возврат Неопределено;
		иначе
			ПоменятьПараметры(Ложь);
			Возврат СуммаККТ;
		КонецЕсли; 
	
	КонецЕсли; 	
КонецФункции

Функция СинхронизироватьСДатойКомпьютера(КассаККМ) экспорт
	Ответ = МенеджерОборудованияКлиентСервер.СинхронизироватьСДатойКомпьютера_Сервер();
	
	Если не Ответ тогда
		ПоменятьПараметры(Истина);
		Ответ = МенеджерОборудованияКлиентСервер.СинхронизироватьСДатойКомпьютера_Сервер();
		
		Если не Ответ тогда //не удалось освободить порт
			Возврат Неопределено;
		иначе
			ПоменятьПараметры(Ложь);
			Возврат Ответ;
		КонецЕсли; 
	
	КонецЕсли; 	
КонецФункции     

Функция УстановитьКлише() экспорт
	Ответ = МенеджерОборудованияКлиентСервер.УстановитьКлише_Сервер();
	
	Если не Ответ тогда
		ПоменятьПараметры(Истина);
		Ответ = МенеджерОборудованияКлиентСервер.УстановитьКлише_Сервер();
		
		Если не Ответ тогда //не удалось освободить порт
			Возврат ложь;
		иначе
			ПоменятьПараметры(Ложь);
			Возврат Ответ;
		КонецЕсли; 
	
	КонецЕсли;
	
	Возврат ответ;
КонецФункции

Функция ПолучитьОбъектДрайвера(ДанныеДрайвера, ТекстОшибки = Неопределено)
	
	ОбъектДрайвера = Неопределено;
	
	//Для Каждого ДрайверПО Из глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования Цикл
	//	Если ДрайверПО.Ключ = ДанныеДрайвера.ДрайверОборудования  Тогда
	//		ОбъектДрайвера = ДрайверПО.Значение;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;   
	
	Если ОбъектДрайвера = Неопределено Тогда
		Попытка
			
			ProgID = ДанныеДрайвера.ИдентификаторОбъекта;
			Если ПустаяСтрока(ProgID) Тогда
				ОбъектДрайвера = ""; // Драйвер не требуется
			Иначе
				ProgID1 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, 1, Найти(ProgID, "|")-1), ProgID); 
				ProgID2 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, Найти(ProgID, "|")+1), ProgID); 
				//Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
				//	ПодключитьВнешнююКомпоненту(ProgID1);
				//Иначе
					ИмяОбъекта = Сред(ProgID1, Найти(ProgID1, ".") + 1); 
					Префикс = Сред(ProgID1, 1, Найти(ProgID1, ".")); 
					ProgID2 = Префикс + СтрЗаменить(ИмяОбъекта, ".", "_") + "." + ИмяОбъекта;
					Если ДанныеДрайвера.ВСоставеКонфигурации Тогда
						Результат = ПодключитьВнешнююКомпоненту("ОбщийМакет." + ДанныеДрайвера.ИмяМакетаДрайвера, СтрЗаменить(ИмяОбъекта, ".", "_"));
					Иначе
						СсылкаНаДрайвер = ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер");
						Результат = ПодключитьВнешнююКомпоненту(СсылкаНаДрайвер, СтрЗаменить(ИмяОбъекта, ".", "_"));
					КонецЕсли;
				//КонецЕсли;
				ОбъектДрайвера = Новый (ProgID2);
			КонецЕсли;
				
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстОшибки = Инфо.Описание;
		КонецПопытки;
		
		//Если ОбъектДрайвера <> Неопределено Тогда
		//	глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования.Вставить(ДанныеДрайвера.ДрайверОборудования, ОбъектДрайвера);
		//	ОбъектДрайвера = глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования[ДанныеДрайвера.ДрайверОборудования];
		//КонецЕсли;
		
	КонецЕсли;   
		
	Возврат ОбъектДрайвера;
	
КонецФункции


Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	ОбъектДрайвера.Отключить(ПараметрыПодключения.ИДУстройства);
	
	Возврат Результат;
	
КонецФункции  

Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	НовыйСтандарт = Ложь;
	
	ВыходныеПараметры = Новый Массив();
	ПараметрыПодключения.Вставить("ИДУстройства", "");
	
	ТипОборудованияИспользуемый= "";
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
		ТипОборудованияИспользуемый = ПараметрыПодключения.ТипОборудования;
		// Предопределенный параметр с указанием типа драйвера.
		Попытка
			ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудованияИспользуемый) 
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка обращения к драйверу.'"));
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	//РевизияИнтерфейса         = МенеджерОборудованияКлиентПовтИсп.РевизияИнтерфейсаДрайверов();
	РевизияИнтерфейса         = 3003;
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	Попытка
		// Получаем ревизию интерфейса драйвера.
		РевизияИнтерфейса = ОбъектДрайвера.ПолучитьРевизиюИнтерфейса();
		НовыйСтандарт = Истина;
		// Получаем описание драйвера.
		ОписаниеДрайвера = "";
		ОбъектДрайвера.ПолучитьОписание(ОписаниеДрайвера);
		
		ОписаниеДрайвераПараметры = ПолучитьОписаниеДрайвера(ОписаниеДрайвера);
		НаименованиеДрайвера      = ОписаниеДрайвераПараметры.НаименованиеДрайвера;
		ОписаниеДрайвера          = ОписаниеДрайвераПараметры.ОписаниеДрайвера;
		ТипОборудования           = ОписаниеДрайвераПараметры.ТипОборудования;
		ИнтеграционныйКомпонент   = ОписаниеДрайвераПараметры.ИнтеграционныйКомпонент;
		ОсновнойДрайверУстановлен = ОписаниеДрайвераПараметры.ОсновнойДрайверУстановлен;
		URLЗагрузкиДрайвера       = ОписаниеДрайвераПараметры.URLЗагрузкиДрайвера;
	Исключение
		// Используется стандарт драйверов ниже 2.0
		НовыйСтандарт = Ложь;
	КонецПопытки;
	
	Если Не НовыйСтандарт Тогда
		Попытка
			// Получаем описание драйвера
			ОбъектДрайвера.ПолучитьОписание(НаименованиеДрайвера, ОписаниеДрайвера, ТипОборудования, РевизияИнтерфейса, 
											ИнтеграционныйКомпонент, ОсновнойДрайверУстановлен, URLЗагрузкиДрайвера);
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьОписание>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	ПараметрыПодключения.Вставить("РевизияИнтерфейса", РевизияИнтерфейса);
	
	Если ТипОборудованияИспользуемый = "ККТ" И РевизияИнтерфейса < 2002 Тогда  
		СообщениеПользователю = НСтр("ru='Используется стандарт подключения драйверов, поддерживающий формат фискальных документов версии 1.0.'") +
			Символы.ПС + НСтр("ru='Возможно некорректное формирование чеков. Необходимо обновить драйвер ККТ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю); 
	КонецЕсли;
		
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.Подключить(ПараметрыПодключения.ИДУстройства);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.Подключить>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если НЕ Ответ Тогда
		Результат = Ложь;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
	Иначе
		
		Если ТипОборудованияИспользуемый = "ПринтерЧеков" 
				Или ТипОборудованияИспользуемый = "ФискальныйРегистратор" 
				Или ТипОборудованияИспользуемый = "ККТ" Тогда
			ВремВыходныеПараметры = Новый Массив();
			//Если ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВремВыходныеПараметры) Тогда
			//	ВремШиринаСтроки = ВремВыходныеПараметры[0];
			//	ШиринаСтроки = ?(ВремШиринаСтроки <> Неопределено И ВремШиринаСтроки > 0, ВремШиринаСтроки, 32);
			//КонецЕсли;  
			ШиринаСтроки = 48;
			ПараметрыПодключения.Вставить("ШиринаСтроки", ШиринаСтроки);
		ИначеЕсли ТипОборудованияИспользуемый = "ЭквайринговыйТерминал" Тогда
			ПараметрыПодключения.Вставить("КодОригинальнойТранзакции", Неопределено);
			ПараметрыПодключения.Вставить("ТипТранзакции", "");
		ИначеЕсли ТипОборудованияИспользуемый = "СканерШтрихкода" Тогда
			ВыходныеПараметры.Добавить(Строка(ПараметрыПодключения.ИДУстройства));
			МассивМассивов = Новый Массив();
			МассивМассивов.Добавить("Штрихкод");
			МассивМассивов.Добавить("Barcode");
			МассивМассивов.Добавить("ШтрихкодBase64");
			МассивМассивов.Добавить("BarcodeBase64");
			ВыходныеПараметры.Добавить(МассивМассивов);
		ИначеЕсли ТипОборудованияИспользуемый = "СчитывательМагнитныхКарт" Тогда
			ВыходныеПараметры.Добавить(Строка(ПараметрыПодключения.ИДУстройства));
			МассивМассивов = Новый Массив();
			МассивМассивов.Добавить("ДанныеКарты");
			МассивМассивов.Добавить("TracksData");
			МассивМассивов.Добавить("ДанныеКартыBase64");
			МассивМассивов.Добавить("TrackDataBase64");
			ВыходныеПараметры.Добавить(МассивМассивов);
		ИначеЕсли ТипОборудованияИспользуемый = "СчитывательRFID" Тогда
			ВыходныеПараметры.Добавить(Строка(ПараметрыПодключения.ИДУстройства));
			МассивМассивов = Новый Массив();
			МассивМассивов.Добавить("RFID");
			МассивМассивов.Добавить("RFID");
			ВыходныеПараметры.Добавить(МассивМассивов);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 





//&Вместо("НачатьВыполнениеКомандыПечатиЧека_ЗавершениеПечати")
//Процедура ТБКНачатьВыполнениеКомандыПечатиЧека_ЗавершениеПечати(ПараметрыВыполнения, Параметры)
//	ОбработчикДрайвераМодуль = ПараметрыВыполнения.ОбработчикДрайвераМодуль;
//	ОбъектДрайвера           = ПараметрыВыполнения.ОбъектДрайвера;
//	ПодключенноеУстройство   = ПараметрыВыполнения.ПодключенноеУстройство;
//	ВыходныеПараметры = Неопределено;
//	
//	Если ПараметрыВыполнения.ПродолжитьПечать Тогда 
//		
//		ОбщиеПараметры = ПараметрыВыполнения.ВходныеПараметры;
//		
//		ДополнительныеПараметры = Новый Структура();
//		ЗаполнитьПараметрыОперацииПодписиЧека(ДополнительныеПараметры);
//		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ПараметрыВыполнения);
//		ДополнительныеПараметры.Вставить("АдресЧека"  , ?(ПараметрыВыполнения.Свойство("АдресЧека"), ПараметрыВыполнения.АдресЧека, Неопределено));
//		ДополнительныеПараметры.Вставить("ПодписьЧека", ?(ПараметрыВыполнения.Свойство("ПодписьЧека"), ПараметрыВыполнения.ПодписьЧека, Неопределено));
//		ДополнительныеПараметры.Вставить("НомерКассы" , ?(ОбщиеПараметры.Свойство("НомерКассы"), ОбщиеПараметры.НомерКассы, Неопределено));
//		ОбщиеПараметры.Вставить("ПодписьЧека", ДополнительныеПараметры);
//		
//		Если ПараметрыВыполнения.ПоддержкаАсинхронногоРежима Тогда
//			
//			Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКомандыПечатиЧека_ЗавершениеПроцессаПечати", ЭтотОбъект, ПараметрыВыполнения);
//			ОбработчикДрайвераМодуль.НачатьВыполнениеКоманды(Оповещение, ПараметрыВыполнения.Команда, ПараметрыВыполнения.ВходныеПараметры, 
//				ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
//				
//		Иначе
//			//Вик 2024-01-17 Костыль для БК
//			Для каждого Строка из 	ПараметрыВыполнения.ВходныеПараметры.ПозицииЧека цикл
//				Если Найти(Строка.Наименование, " БК") тогда
//					Строка.Наименование	=	СтрЗаменить(Строка.Наименование, "Электронное устройство", "У") ;
//				КонецЕсли;
//			КонецЦикла;
//			//
//				
//			Результат = ОбработчикДрайвераМодуль.ВыполнитьКоманду(ПараметрыВыполнения.Команда, ПараметрыВыполнения.ВходныеПараметры,
//					ВыходныеПараметры, ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
//			Если Не Результат Тогда
//				Если ВыходныеПараметры.Количество() >= 2 Тогда
//					ТекстОшибки = ВыходныеПараметры[1];
//				КонецЕсли;
//				ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
//				
//				Если ПараметрыВыполнения.ОповещениеПриОшибке <> Неопределено Тогда
//					ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПриОшибке, ПараметрыВыполнения);
//				КонецЕсли;
//			КонецЕсли;
//			
//			Если Результат И НЕ ПустаяСтрока(ДополнительныеПараметры.ПодписьЧека) Тогда
//				
//				ШиринаСтроки = ?(ПодключенноеУстройство.ПараметрыПодключения.Свойство("ШиринаСтроки"), ПодключенноеУстройство.ПараметрыПодключения.ШиринаСтроки, 32); 
//				ВремВходныеПараметры = Новый Массив();
//				ВремВходныеПараметры.Добавить(СформироватьШаблонИнфоКвитанции(ДополнительныеПараметры, ШиринаСтроки));
//				
//				ВремВыходныеПараметры = Неопределено;
//				ДополнительныйРезультат = ОбработчикДрайвераМодуль.ВыполнитьКоманду("PrintText", ВремВходныеПараметры,
//					ВремВыходныеПараметры, ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
//			КонецЕсли;
//			
//			РезультатВыполнения = ПараметрыВыполненияОперацииНаОборудовании(Результат, ТекстОшибки);
//			РезультатВыполнения.ВыходныеПараметры = ВыходныеПараметры;
//			РезультатВыполнения.Вставить("ОбработчикДрайвераМодуль", ОбработчикДрайвераМодуль);
//			РезультатВыполнения.Вставить("ОбъектДрайвера"          , ОбъектДрайвера);
//			РезультатВыполнения.Вставить("ПодключенноеУстройство"  , ПодключенноеУстройство);
//			РезультатВыполнения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
//			ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПриЗавершении, РезультатВыполнения);
//		КонецЕсли;
//		
//	Иначе
//		Если ПараметрыВыполнения.ПоддержкаАсинхронногоРежима Тогда
//			Оповещение = Новый ОписаниеОповещения("НачатьВыполнениеКомандыПечатиЧека_ЗавершениеОтмены", ЭтотОбъект, ПараметрыВыполнения);
//			ОбработчикДрайвераМодуль.НачатьВыполнениеКоманды(Оповещение, "CancelCheck", Неопределено,
//				ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
//		Иначе
//			ОбработчикДрайвераМодуль.ВыполнитьКоманду("CancelCheck", Неопределено, Неопределено,
//				ОбъектДрайвера, ПодключенноеУстройство.Параметры, ПодключенноеУстройство.ПараметрыПодключения);
//				
//			ВыходныеПараметры = Новый Массив();
//			ВыходныеПараметры.Добавить(999);
//			ВыходныеПараметры.Добавить(ПараметрыВыполнения.ОписаниеОшибки);
//		
//			РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки, ВыходныеПараметры", Ложь, ПараметрыВыполнения.ОписаниеОшибки, ВыходныеПараметры);
//			ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПриЗавершении, РезультатВыполнения);
//		КонецЕсли;
//	КонецЕсли;

//	
//	
//	
//КонецПроцедуры

