Функция ПолучитьКоличествоБаллов(ID, Товары, Адрес_ВебСоединение) экспорт  
	Попытка
		Массив = ПолучитьИзВременногоХранилища(Адрес_ВебСоединение);
		Прокси	=	Массив[0];
		Если прокси = Неопределено тогда//повторное подключение
			Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User_tbk", "http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl", 10);			
			Массив	=	новый Массив;
			Массив.Добавить(Прокси);
			Адрес_ВебСоединение	=	ПоместитьВоВременноеХранилище(Массив,Новый УникальныйИдентификатор); 
		КонецЕсли;
	Исключение	
		Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User_tbk", "http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl", 10); 
		
		Массив	=	новый Массив;
		Массив.Добавить(Прокси);
		Адрес_ВебСоединение	=	ПоместитьВоВременноеХранилище(Массив,Новый УникальныйИдентификатор);  
	КонецПопытки;	
	
	Если Прокси = Неопределено тогда 
		Сообщить("Ошибка подключения к УТ");
		Возврат 0; 
	КонецЕсли;
	
	Попытка
		КолБаллов_Ответ	= Прокси.get_kolballov(ID);
	Исключение
		Сообщить("Ошибка подключения к УТ");
		Возврат 0; 
	КонецПопытки;
	
	Если КолБаллов_Ответ = "" тогда
		Сообщить("Клиент не зарегистрирован!");
		Возврат 0; 
	КонецЕсли;
	
	Разделитель	=	Найти(КолБаллов_Ответ,";");	
	Поз2		=	СтрНайти(КолБаллов_Ответ,";",,,2);
	Поз3		=	СтрНайти(КолБаллов_Ответ,";",,,3);
	Поз4		=	СтрНайти(КолБаллов_Ответ,";",,,4);

	
	КолБаллов	=	Число(Лев(КолБаллов_Ответ,Разделитель-1));
	Имя			=	Сред(КолБаллов_Ответ,Разделитель+1,Поз2-Разделитель - 1);
	ID_Ответ	=	Сред(КолБаллов_Ответ,Поз2+1,Поз3-Поз2 - 1);
	Почта		=	Сред(КолБаллов_Ответ,Поз3+1,Поз4-Поз3 - 1); 
	Телефон		=	Прав(КолБаллов_Ответ,12);
	
	//Доп проверка
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ЕстьNull(ТБК_ИсторияПокупокРозница.КоличествоСписанныхБаллов,0) КАК КоличествоСписанныхБаллов
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_ИсторияПокупокРозница КАК ТБК_ИсторияПокупокРозница
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ИсторияПокупокРозница.Отправлен
	      	 	             |	И ТБК_ИсторияПокупокРозница.IDКлиента = &IDКлиента");
	Запрос.УстановитьПараметр("IDКлиента",ID);
	Рез = запрос.Выполнить().Выгрузить();
	Если Рез.Количество() >0 тогда
		КолБаллов	=	КолБаллов - Рез[0].КоличествоСписанныхБаллов;	
	КонецЕсли;
	
	КоличествоБалловМожноСписать = 0;
	//коммент от 2023-04-20 сколько можно списать теперь только по кноке "обновить" в рмк
	//Если КолБаллов >0 тогда
	//	//Получаем условия
	//	ОтветJS				=	Прокси.get_ysloviyaprogrammi();		
	//	УсловияПрограммы	=	ОбщегоНазначения.jsonВСтруктура_Общая(ОтветJS);
	//	
	//	Для каждого Строка из УсловияПрограммы цикл  
	//		ВозможныйПроцентСписания	=	Число(Строка.ВозможныйПроцентСписания);
	//        ГруппыНоменклатуры			=	Строка.ГруппыНоменклатуры;
	//	КонецЦикла;
	//	
	//	//Парсим и формируем массив групп исключений
	//	МассивНоменклатуры = Новый Массив;
	//	Пока Найти(ГруппыНоменклатуры,";") цикл
	//		КодГруппы	=	Сред(ГруппыНоменклатуры,1,11);
	//		
	//		Ном =  Справочники.Номенклатура.НайтиПоКоду(КодГруппы);
	//		Если не Ном.Пустая() тогда  
	//			Если МассивНоменклатуры.Найти(Ном) = Неопределено тогда
	//				МассивНоменклатуры.Добавить(Ном);
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		ГруппыНоменклатуры = Сред(ГруппыНоменклатуры,13);
	//	КонецЦикла;


	//	//Проставляем
	//	Для каждого СТрокаТовар из Товары цикл
	//		//Проверяем в группе исклюений товар или нет
	//		Запрос	=	Новый Запрос("ВЫБРАТЬ
	//		      	 	             |	Номенклатура.Ссылка КАК Ссылка
	//		      	 	             |ИЗ
	//		      	 	             |	Справочник.Номенклатура КАК Номенклатура
	//		      	 	             |ГДЕ
	//		      	 	             |	Номенклатура.Ссылка В ИЕРАРХИИ(&Мас)
	//		      	 	             |	И Номенклатура.Ссылка = &Ссылка");
	//		Запрос.УстановитьПараметр("Мас",МассивНоменклатуры);
	//		Запрос.УстановитьПараметр("Ссылка",СТрокаТовар.Номенклатура);			
	//		
	//		Если Запрос.Выполнить().Пустой() тогда //можно списать
	//			КоличествоБалловМожноСписать	=	КоличествоБалловМожноСписать + (СТрокаТовар.сумма/100)	 * ВозможныйПроцентСписания;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//
	//КоличествоБалловМожноСписать = Мин(КоличествоБалловМожноСписать,КолБаллов);
	
	
	СтруктураВозврата	=	Новый Структура;
	СтруктураВозврата.Вставить("КоличествоНакопленныхБаллов",КолБаллов);
	СтруктураВозврата.Вставить("КоличествоБалловМожноСписать",КоличествоБалловМожноСписать);
	СтруктураВозврата.Вставить("Имя",Имя);
	СтруктураВозврата.Вставить("Телефон",Телефон); 
	СтруктураВозврата.Вставить("ID_Ответ",ID_Ответ); 
	СтруктураВозврата.Вставить("Почта",Почта);	
	
	Прокси	=	Неопределено;
	
	Возврат СтруктураВозврата;	
КонецФункции


Функция ОбновитьКоличествоБаллов(КолБаллов, Товары, Адрес_ВебСоединение) экспорт
	Попытка
		Массив = ПолучитьИзВременногоХранилища(Адрес_ВебСоединение);
		Прокси	=	Массив[0];
		Если прокси = Неопределено тогда//повторное подключение
			Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User_tbk", "http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl", 10);			
			Массив	=	новый Массив;
			Массив.Добавить(Прокси);
			Адрес_ВебСоединение	=	ПоместитьВоВременноеХранилище(Массив,Новый УникальныйИдентификатор); 
		КонецЕсли;
	Исключение	
		Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User_tbk", "http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl", 10); 
		
		Массив	=	новый Массив;
		Массив.Добавить(Прокси);
		Адрес_ВебСоединение	=	ПоместитьВоВременноеХранилище(Массив,Новый УникальныйИдентификатор);  
	КонецПопытки;
	
	Если Прокси = Неопределено тогда 
		Сообщить("Ошибка подключения к УТ");
		Возврат 0; 
	КонецЕсли;
	
	КоличествоБалловМожноСписать = 0;
	УжеСписано					 = 0;
	Если КолБаллов >0 тогда
		//Получаем условия
		Попытка
			ОтветJS				=	Прокси.get_ysloviyaprogrammi();	
		Исключение
			Сообщить("Ошибка подключения к УТ");
			Возврат 0; 
		КонецПопытки;
		УсловияПрограммы	=	ОбщегоНазначения.jsonВСтруктура_Общая(ОтветJS);
		
		Для каждого Строка из УсловияПрограммы цикл  
			ВозможныйПроцентСписания	=	Число(Строка.ВозможныйПроцентСписания);
	        ГруппыНоменклатуры			=	Строка.ГруппыНоменклатуры;
		КонецЦикла;
		
		//Парсим и формируем массив групп исключений
		МассивНоменклатуры = Новый Массив;
		Пока Найти(ГруппыНоменклатуры,";") цикл
			КодГруппы	=	Сред(ГруппыНоменклатуры,1,11);
			
			Ном =  Справочники.Номенклатура.НайтиПоКоду(КодГруппы);
			Если не Ном.Пустая() тогда  
				Если МассивНоменклатуры.Найти(Ном) = Неопределено тогда
					МассивНоменклатуры.Добавить(Ном);
				КонецЕсли;
			КонецЕсли;
			
			ГруппыНоменклатуры = Сред(ГруппыНоменклатуры,13);
		КонецЦикла;


		//Проставляем
		Для каждого СТрокаТовар из Товары цикл
			//Проверяем в группе исклюений товар или нет
			Запрос	=	Новый Запрос("ВЫБРАТЬ
			      	 	             |	Номенклатура.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Справочник.Номенклатура КАК Номенклатура
			      	 	             |ГДЕ
			      	 	             |	Номенклатура.Ссылка В ИЕРАРХИИ(&Мас)
			      	 	             |	И Номенклатура.Ссылка = &Ссылка");
			Запрос.УстановитьПараметр("Мас",МассивНоменклатуры);
			Запрос.УстановитьПараметр("Ссылка",СТрокаТовар.Номенклатура);	
			
			Если Запрос.Выполнить().Пустой() тогда //можно списать
				КоличествоБалловМожноСписать	=	КоличествоБалловМожноСписать + (СТрокаТовар.сумма/100)	 * ВозможныйПроцентСписания;
			КонецЕсли;
			
			УжеСписано	=	УжеСписано +  СТрокаТовар.ТБК_КоличествоБаллов;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	
	КоличествоБалловМожноСписать = Мин(КоличествоБалловМожноСписать,КолБаллов);
	
	КоличествоБалловМожноСписать	=	КоличествоБалловМожноСписать - УжеСписано;
	
	
	Прокси	=	Неопределено;
	
	Возврат КоличествоБалловМожноСписать;		
КонецФункции

Функция СписатьБаллы(КолБаллов, Товары, Адрес_ВебСоединение, ТБК_IDКлиента) экспорт
	Попытка
		Массив = ПолучитьИзВременногоХранилища(Адрес_ВебСоединение);
		Прокси	=	Массив[0];
		Если прокси = Неопределено тогда//повторное подключение
			Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User_tbk", "http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl", 10);			
			Массив	=	новый Массив;
			Массив.Добавить(Прокси);
			Адрес_ВебСоединение	=	ПоместитьВоВременноеХранилище(Массив,Новый УникальныйИдентификатор); 
		КонецЕсли;
	Исключение	
		Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User_tbk", "http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl", 10); 
		
		Массив	=	новый Массив;
		Массив.Добавить(Прокси);
		Адрес_ВебСоединение	=	ПоместитьВоВременноеХранилище(Массив,Новый УникальныйИдентификатор);  
	КонецПопытки;
	
	Если Прокси = Неопределено тогда 
		Сообщить("Ошибка подключения к УТ");
		Возврат 0; 
	КонецЕсли;
	
	КоличествоБалловСписано = 0;
	Если КолБаллов >0 тогда
		//2024-02-27 по просьбе Козьминой - запрет списывать баллы сотрудникам более 2000 в месяц
		Попытка
			Ответ_МожноСписатьСотруднику				=	Прокси.get_MozhnoSpisatSotrydniky(ТБК_IDКлиента);
			Если НЕ Ответ_МожноСписатьСотруднику тогда
				Сообщить("Сотрудникам запрещено списывать более 2000 бонусов в месяц");
				Возврат 0;                          	
			КонецЕсли;
		Исключение
			Сообщить("Ошибка подключения к УТ");
			Возврат 0; 
		КонецПопытки; 		
		//

		
		//Получаем условия  
		Попытка
			ОтветJS				=	Прокси.get_ysloviyaprogrammi();		
		Исключение
			Сообщить("Ошибка подключения к УТ");
			Возврат 0; 
		КонецПопытки;
		УсловияПрограммы	=	ОбщегоНазначения.jsonВСтруктура_Общая(ОтветJS);
		
		Для каждого Строка из УсловияПрограммы цикл  
			ВозможныйПроцентСписания	=	Число(Строка.ВозможныйПроцентСписания);
	        ГруппыНоменклатуры			=	Строка.ГруппыНоменклатуры;
		КонецЦикла;
		
		//Парсим и формируем массив групп исключений
		МассивНоменклатуры = Новый Массив;
		Пока Найти(ГруппыНоменклатуры,";") цикл
			КодГруппы	=	Сред(ГруппыНоменклатуры,1,11);
			
			Ном =  Справочники.Номенклатура.НайтиПоКоду(КодГруппы);
			Если не Ном.Пустая() тогда  
				Если МассивНоменклатуры.Найти(Ном) = Неопределено тогда
					МассивНоменклатуры.Добавить(Ном);
				КонецЕсли;
			КонецЕсли;
			
			ГруппыНоменклатуры = Сред(ГруппыНоменклатуры,13);
		КонецЦикла;


		//Проставляем
		Для каждого СТрокаТовар из Товары цикл
			Если КолБаллов = 0 тогда Прервать; КонецЕсли;
			
			//Проверяем в группе исклюений товар или нет
			Запрос	=	Новый Запрос("ВЫБРАТЬ
			      	 	             |	Номенклатура.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Справочник.Номенклатура КАК Номенклатура
			      	 	             |ГДЕ
			      	 	             |	Номенклатура.Ссылка В ИЕРАРХИИ(&Мас)
			      	 	             |	И Номенклатура.Ссылка = &Ссылка");
			Запрос.УстановитьПараметр("Мас",МассивНоменклатуры);
			Запрос.УстановитьПараметр("Ссылка",СТрокаТовар.Номенклатура);	

			Если Запрос.Выполнить().Пустой() тогда //можно списать
				СТрокаТовар.СуммаРучнойСкидки		=	Мин((СТрокаТовар.сумма/100)	 * ВозможныйПроцентСписания, КолБаллов);
				СТрокаТовар.ТБК_КоличествоБаллов	=	СТрокаТовар.СуммаРучнойСкидки;
				СТрокаТовар.Сумма					=	СТрокаТовар.Сумма - СТрокаТовар.СуммаРучнойСкидки;  
				
				КолБаллов 				= КолБаллов - СТрокаТовар.СуммаРучнойСкидки;
				КоличествоБалловСписано	= КоличествоБалловСписано + СТрокаТовар.ТБК_КоличествоБаллов;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Прокси	=	Неопределено;
	
	Возврат КоличествоБалловСписано;		
КонецФункции

Процедура ОтправкаДанныхИсторияПокупок( Адрес_ВебСоединение) экспорт
	Попытка
		Массив = ПолучитьИзВременногоХранилища(Адрес_ВебСоединение);
		Прокси	=	Массив[0];
		Если прокси = Неопределено тогда//повторное подключение
			Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User_tbk", "http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl", 10);			
			Массив	=	новый Массив;
			Массив.Добавить(Прокси);
			Адрес_ВебСоединение	=	ПоместитьВоВременноеХранилище(Массив,Новый УникальныйИдентификатор); 
		КонецЕсли;
	Исключение	
		Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User_tbk", "http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl", 10); 
		
		Массив	=	новый Массив;
		Массив.Добавить(Прокси);
		Адрес_ВебСоединение	=	ПоместитьВоВременноеХранилище(Массив,Новый УникальныйИдентификатор);  
	КонецПопытки;
	
	Если Прокси = Неопределено тогда 
		Сообщить("Ошибка подключения к УТ");
		Возврат; 
	КонецЕсли;

	Запрос	=	новый запрос("ВЫБРАТЬ
	      	 	             |	ТБК_ИсторияПокупокРозница.IDКлиента КАК IDКлиента,
	      	 	             |	ТБК_ИсторияПокупокРозница.Чек КАК Чек,
	      	 	             |	ТБК_ИсторияПокупокРозница.Отправлен КАК Отправлен,
	      	 	             |	ТБК_ИсторияПокупокРозница.Дата КАК Дата,
	      	 	             |	ТБК_ИсторияПокупокРозница.Товары КАК Товары,
	      	 	             |	ТБК_ИсторияПокупокРозница.Сумма КАК Сумма,
	      	 	             |	ТБК_ИсторияПокупокРозница.ВидОперации КАК ВидОперации,
	      	 	             |	ТБК_ИсторияПокупокРозница.КоличествоСписанныхБаллов КАК КоличествоСписанныхБаллов,
	      	 	             |	ТБК_ИсторияПокупокРозница.флНадоНачислить КАК флНадоНачислить
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_ИсторияПокупокРозница КАК ТБК_ИсторияПокупокРозница
	      	 	             |ГДЕ
	      	 	             |	НЕ ТБК_ИсторияПокупокРозница.Отправлен");

	Структура = Новый Структура;
	
	МассивВозврата	=	Новый Массив;
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 тогда возврат КонецЕсли;
	
	Для каждого Строка из рез цикл
		эл	=	Новый Структура;
		эл.Вставить("Чек",						СокрЛП(Строка(Строка.Чек)));	
		эл.Вставить("СуммаЧека",				Строка(Строка.Сумма));		
		эл.Вставить("IDКлиента",				СокрЛП(Строка.IDКлиента));
		эл.Вставить("Дата",						Строка(Строка.Дата));
		эл.Вставить("Магазин",					Строка(Строка.Чек.Магазин));
		эл.Вставить("ВидОперации",				Строка(Строка.ВидОперации));
		эл.Вставить("КоличествоСписанныхБаллов",Строка(Строка.КоличествоСписанныхБаллов));
		эл.Вставить("флНадоНачислить",			Строка(Строка.флНадоНачислить));
		эл.Вставить("ДатаЧекККМПродажа",		Строка(Строка.Чек.ЧекККМПродажа.Дата));
		эл.Вставить("ЧекККМПродажа",			Строка(Строка.Чек.ЧекККМПродажа));   

		Данные		=	Строка.Товары.Получить();
		Для каждого СтрокаДанные из Данные цикл			
			эл.Вставить("Номенклатура"				+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура));
			эл.Вставить("НоменклатураКод"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Номенклатура.Код));
			эл.Вставить("Характеристика"			+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Характеристика));
			эл.Вставить("КоличествоУпаковок"		+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.КоличествоУпаковок));
			эл.Вставить("Сумма"						+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Сумма)); 
			эл.Вставить("Цена"						+	Строка(СтрокаДанные.НомерСтроки),	Строка(СтрокаДанные.Цена)); 

		КонецЦикла;

		МассивВозврата.Добавить(эл);
	КонецЦикла;
	
	JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);

	Ответ	=	Прокси.writehistorysales(JS);
	
	Если Ответ тогда
		Для каждого Строка из рез цикл 
			рег = РегистрыСведений.ТБК_ИсторияПокупокРозница.СоздатьНаборЗаписей();
			рег.Отбор.Чек.Установить(Строка.Чек); 
			рег.Отбор.IDКлиента.Установить(Строка.IDКлиента);
			рег.Прочитать();
			Рег[0].Отправлен	= Истина;			
			рег.Записать();		
		КонецЦикла;
	КонецЕсли;  
	//Сообщить(Ответ);	

КонецПроцедуры