
//&Вместо("ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов")
//Функция ТБКВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов(Параметры, ИдентификаторУстройства, ОписаниеОшибки)
//	// Определение типа устройства.
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
//	|ИЗ
//	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
//	|ГДЕ
//	|	ПодключаемоеОборудование.Ссылка = &Ссылка";
//	
//	Запрос.УстановитьПараметр("Ссылка", ИдентификаторУстройства);
//	
//	Результат = Запрос.Выполнить();
//	Выборка = Результат.Выбрать();
//	
//	Если Выборка.Следующий() Тогда
//		Если НЕ Выборка.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
//			Возврат Истина;
//		КонецЕсли;
//	Иначе
//		ОписаниеОшибки = НСтр("ru = 'Не выбрано устройство'");
//		Возврат Ложь;
//	КонецЕсли;
//	
//	СтруктураДанныхФорматноЛогическогоКонтроля = СтруктураДанныхФорматноЛогическогоКонтроля(ИдентификаторУстройства);
//	
//	Параметры.Вставить("ФорматФД", СтруктураДанныхФорматноЛогическогоКонтроля.ФорматФД);
//	
//	МассивФФД = МассивПроверяемыхФорматовФД(СтруктураДанныхФорматноЛогическогоКонтроля.ФорматФД);
//	
//	СоответствиеРеквизитов = Новый Соответствие;
//	ПроверяемыеРеквизиты = ПроверяемыеРеквизиты(МассивФФД, СоответствиеРеквизитов);
//	
//	ПараметрыРегистрацииУстройства = МенеджерОборудованияВызовСервера.ПолучитьПараметрыРегистрацииУстройства(ИдентификаторУстройства);
//	ЗаполнитьРеквизитовИзРегистрационныхДанных(Параметры, ПроверяемыеРеквизиты.РеквизитыЗаполняемыеИзРегистрационныхДанных, ПараметрыРегистрацииУстройства);
//	
//	Если НЕ ЗаполненыРеквизитыШапки(Параметры, ПроверяемыеРеквизиты.РеквизитыШапки, ОписаниеОшибки, СоответствиеРеквизитов) Тогда
//		ОбщегоНазначенияВызовСервера.ЗаписатьВЛог(ОписаниеОшибки); 
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если НЕ ЗаполненыРеквизитыПозицийЧека(Параметры.ПозицииЧека, ПроверяемыеРеквизиты.РеквизитыПозицийЧека, ОписаниеОшибки, СоответствиеРеквизитов) Тогда
//		ОбщегоНазначенияВызовСервера.ЗаписатьВЛог(ОписаниеОшибки);
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если НЕ ПроверитьРеквизитыОплаты(Параметры.ТаблицаОплат, ОписаниеОшибки) Тогда
//		ОбщегоНазначенияВызовСервера.ЗаписатьВЛог(ОписаниеОшибки);
//		Возврат Ложь;
//	КонецЕсли;
//	
//	// Проверка системы налогообложения
//	Если Параметры.Свойство("СистемаНалогообложения") Тогда
//		КодыНалогообложения = СтрРазделить(ПараметрыРегистрацииУстройства.КодыСистемыНалогообложения, ",");
//		СистемаНалогообложения = МенеджерОборудованияКлиентСервер.КодСистемыНалогообложенияККТ(Параметры.СистемаНалогообложения);
//		Если КодыНалогообложения.Найти(Строка(СистемаНалогообложения)) = Неопределено Тогда
//			ОписаниеОшибки = НСтр("ru = 'ККТ не зарегистрирована с указанной системой налогообложения.'");
//			ОбщегоНазначенияВызовСервера.ЗаписатьВЛог(ОписаниеОшибки);
//			Возврат Ложь;
//		КонецЕсли;
//	КонецЕсли;
//	
//	// Дополнительные условия проверки
//	
//	// Соответствие сумм товарных позиций и сумм оплаты.
//	СуммаПозицийЧека = 0;
//	СуммаВсехОплат   = 0;
//	СуммаОплатыНаличными = 0;
//	
//	Для Каждого ПозицияЧека Из Параметры.ПозицииЧека Цикл
//		Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
//			СуммаПозицийЧека = СуммаПозицийЧека + ПозицияЧека.Сумма;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Для Каждого ЭлементаОплаты Из Параметры.ТаблицаОплат Цикл
//		СуммаВсехОплат = СуммаВсехОплат + ЭлементаОплаты.Сумма;
//		Если ЭлементаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
//			СуммаОплатыНаличными = СуммаОплатыНаличными + ЭлементаОплаты.Сумма;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если СуммаПозицийЧека > СуммаВсехОплат Тогда
//		ОписаниеОшибки = НСтр("ru = 'Сумма товарных позиций больше суммы оплат'");
//		ОбщегоНазначенияВызовСервера.ЗаписатьВЛог(ОписаниеОшибки);
//		Возврат Ложь;
//	ИначеЕсли СуммаВсехОплат > СуммаПозицийЧека Тогда
//		Если (СуммаВсехОплат - СуммаОплатыНаличными) > СуммаПозицийЧека Тогда
//			ОписаниеОшибки = НСтр("ru = 'Сумма безналичных оплат больше суммы товарных позиций'");
//			ОбщегоНазначенияВызовСервера.ЗаписатьВЛог(ОписаниеОшибки);
//			Возврат Ложь;
//		КонецЕсли;
//	КонецЕсли;
//	
//	// Электронный чек
//	Электронно = Ложь;
//	Параметры.Свойство("Электронно", Электронно);
//	
//	Отправляет1СEmail = Ложь;
//	Параметры.Свойство("Отправляет1СEmail", Отправляет1СEmail);
//	
//	Отправляет1СSMS = Ложь;
//	Параметры.Свойство("Отправляет1СSMS", Отправляет1СSMS);
//	
//	ПокупательEmail = Ложь;
//	Параметры.Свойство("ПокупательEmail", ПокупательEmail);
//	
//	ПокупательНомер = Ложь;
//	Параметры.Свойство("ПокупательНомер", ПокупательНомер);
//	
//	Если Электронно = Истина 
//		И НЕ ЗначениеЗаполнено(ПокупательEmail) 
//		И НЕ ЗначениеЗаполнено(ПокупательНомер) Тогда
//		ОписаниеОшибки = НСтр("ru = 'Для электронного чека нужно указать либо Email, либо телефон.'") ;
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если Электронно = Истина И Отправляет1СEmail = Истина Тогда
//		ОписаниеОшибки = НСтр("ru = 'Чек обязательно должен быть напечатан'") ;
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если Электронно = Истина И Отправляет1СSMS = Истина Тогда
//		ОписаниеОшибки = НСтр("ru = 'Чек обязательно должен быть напечатан'") ;
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если Отправляет1СEmail = Истина 
//		И НЕ ЗначениеЗаполнено(ПокупательEmail) Тогда
//		ОписаниеОшибки = НСтр("ru = 'Не заполнен E-mail'") ;
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если Отправляет1СSMS = Истина 
//		И НЕ ЗначениеЗаполнено(ПокупательНомер) Тогда
//		ОписаниеОшибки = НСтр("ru = 'Не заполнен номер телефона'") ;
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если НЕ ПустаяСтрока(Параметры.КассирИНН) Тогда
//		Если НЕ МенеджерОборудованияКлиентСервер.ИННСоответствуетТребованиям(Параметры.КассирИНН, Ложь, ОписаниеОшибки) Тогда
//			Сообщение = НСтр("ru = 'ИНН кассира некорректен (%Ошибка%)'");
//			ОписаниеОшибки = СтрЗаменить(Сообщение, "%Ошибка%", ОписаниеОшибки);
//			Возврат Ложь;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если НЕ ПустаяСтрока(Параметры.Кассир) И СтрДлина(Параметры.Кассир) > 64 Тогда
//		ОписаниеОшибки = НСтр("ru = 'Длинна реквизита (Кассир) превышает 64 символа'");
//		Возврат Ложь;
//	КонецЕсли;
//	
//	// Реквизиты платежного агента.
//	ПризнакАгента = Перечисления.ПризнакиАгента.ПустаяСсылка();
//	Если Параметры.Свойство("ПризнакАгента", ПризнакАгента) 
//		И ЗначениеЗаполнено(ПризнакАгента) Тогда
//		Если НЕ Параметры.Свойство("ДанныеАгента") Тогда
//			ОписаниеОшибки = НСтр("ru = 'Не заданы данные платежного агента'");
//			Возврат Ложь;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если Электронно = Истина 
//		И Отправляет1СEmail = Ложь 
//		И Отправляет1СSMS = Ложь Тогда
//		// Чек оправляется электронно средствами ОФД
//		Если ЗначениеЗаполнено(ПокупательEmail) И ЗначениеЗаполнено(ПокупательНомер) Тогда
//			ОписаниеОшибки = НСтр("ru = 'У электронного чека заполнены как номер телефона, так и e-mail. ОФД не сможет передать данный чек электронно.'");
//			Возврат Ложь;
//		КонецЕсли;
//	КонецЕсли;
//	
//	НомерПозиции = 0;
//	
//	Для Каждого ПозицияЧека Из Параметры.ПозицииЧека Цикл
//		Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
//			НомерПозиции = НомерПозиции + 1;
//			НомерПозицииСтрока = Формат(НомерПозиции, "ЧГ=0");
//			
//			//Отключил Вик 2021_03_31
//			//Если ПозицияЧека.Количество > 1 Тогда
//			//	РеквизитКодаТовара = ПозицияЧека.ДанныеКодаТоварнойНоменклатуры.РеквизитКодаТовара;
//			//	КодТовараИдентифицируетЭкземпляр = МенеджерОборудованияМаркировкаКлиентСервер.КодТовараИдентифицируетЭкземпляр(РеквизитКодаТовара, ПозицияЧека.Штрихкод);
//			//	Если КодТовараИдентифицируетЭкземпляр Тогда
//			//		ОписаниеОшибки = НСтр("ru = 'Код товара содержит в своем составе код, позволяющий идентифицировать экземпляр товара. Количество должно иметь значение равное единице в строке №%Позиция%.'");
//			//		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%", НомерПозицииСтрока);
//			//		Возврат Ложь;
//			//	КонецЕсли;
//			//КонецЕсли;
//			//КонецВик
//			
//			ПризнакАгентаПоПредметуРасчета = Перечисления.ПризнакиАгента.ПустаяСсылка();
//			Если ПозицияЧека.Свойство("ПризнакАгентаПоПредметуРасчета", ПризнакАгентаПоПредметуРасчета) И ЗначениеЗаполнено(ПризнакАгентаПоПредметуРасчета) Тогда
//				Если ПозицияЧека.Свойство("ДанныеПоставщика") И ПозицияЧека.ДанныеПоставщика.Свойство("ИНН")
//					И ПустаяСтрока(ПозицияЧека.ДанныеПоставщика.ИНН) Тогда
//						ОписаниеОшибки = НСтр("ru = 'ИНН поставщика для предмета расчета в строке №%Позиция% не указан.'") ;
//						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%", НомерПозицииСтрока);
//					Возврат Ложь;
//				КонецЕсли;
//			КонецЕсли;
//			
//			// Реквизиты платежного агента по предмету расчета
//			Если ЗначениеЗаполнено(ПризнакАгента) Тогда
//				Если ПозицияЧека.Свойство("ПризнакАгентаПоПредметуРасчета", ПризнакАгентаПоПредметуРасчета) 
//					И ЗначениеЗаполнено(ПризнакАгентаПоПредметуРасчета) Тогда
//					Если НЕ ПризнакАгента = ПризнакАгентаПоПредметуРасчета Тогда
//						// Тег 1222 должен быть равен тегу 1057
//						ОписаниеОшибки = НСтр("ru = 'Признак платежного агента в шапке не совпадает с признаком платежного агента по предмету расчета в строке №%Позиция%.'");
//						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%", НомерПозицииСтрока);
//						Возврат Ложь;
//					КонецЕсли;
//					Если ПозицияЧека.Свойство("ДанныеАгента") Тогда
//						Если Параметры.ДанныеАгента.Свойство("ОператорПеревода")
//							И ПозицияЧека.ДанныеАгента.Свойство("ОператорПеревода") Тогда
//							ЗначениеПараметров = Неопределено;
//							ЗначениеПозицииЧека = Неопределено;
//							Если Параметры.ДанныеАгента.ОператорПеревода.Свойство("Адрес", ЗначениеПараметров)
//								И ПозицияЧека.ДанныеАгента.ОператорПеревода.Свойство("Адрес", ЗначениеПозицииЧека) 
//								И НЕ ЗначениеПараметров = ЗначениеПозицииЧека Тогда
//								ОписаниеОшибки = НСтр("ru = 'Адрес оператора перевода в строке №%Позиция% не равен адресу оператора перевода в шапке.'") ;
//								ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%", НомерПозицииСтрока);
//								Возврат Ложь;
//							КонецЕсли;
//							Если Параметры.ДанныеАгента.ОператорПеревода.Свойство("ИНН", ЗначениеПараметров)
//								И ПозицияЧека.ДанныеАгента.ОператорПеревода.Свойство("ИНН", ЗначениеПозицииЧека) 
//								И НЕ ЗначениеПараметров = ЗначениеПозицииЧека Тогда
//								ОписаниеОшибки = НСтр("ru = 'ИНН оператора перевода в строке №%Позиция% не равен ИНН оператора перевода в шапке.'") ;
//								ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%", НомерПозицииСтрока);
//								Возврат Ложь;
//							КонецЕсли;
//							Если Параметры.ДанныеАгента.ОператорПеревода.Свойство("Наименование", ЗначениеПараметров)
//								И ПозицияЧека.ДанныеАгента.ОператорПеревода.Свойство("Наименование", ЗначениеПозицииЧека) 
//								И НЕ ЗначениеПараметров = ЗначениеПозицииЧека Тогда
//								ОписаниеОшибки = НСтр("ru = 'Наименование оператора перевода в строке №%Позиция% не равно наименованию оператора перевода в шапке.'") ;
//								ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%", НомерПозицииСтрока);
//								Возврат Ложь;
//							КонецЕсли;
//							Если Параметры.ДанныеАгента.ОператорПеревода.Свойство("Телефон", ЗначениеПараметров)
//								И ПозицияЧека.ДанныеАгента.ОператорПеревода.Свойство("Телефон", ЗначениеПозицииЧека) 
//								И НЕ ЗначениеПараметров = ЗначениеПозицииЧека Тогда
//								ОписаниеОшибки = НСтр("ru = 'Телефон оператора перевода в строке №%Позиция% не равен телефон оператора перевода в шапке.'") ;
//								ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%", НомерПозицииСтрока);
//								Возврат Ложь;
//							КонецЕсли;
//						КонецЕсли;
//						Если ПозицияЧека.ДанныеАгента.Свойство("ОператорПоПриемуПлатежей") Тогда
//							Если Параметры.ДанныеАгента.ОператорПоПриемуПлатежей.Свойство("Телефон", ЗначениеПараметров)
//								И ПозицияЧека.ДанныеАгента.ОператорПоПриемуПлатежей.Свойство("Телефон", ЗначениеПозицииЧека) 
//								И НЕ ЗначениеПараметров = ЗначениеПозицииЧека Тогда
//								ОписаниеОшибки = НСтр("ru = 'Телефон оператора по приему платежей в строке №%Позиция% не равен телефон оператора приему платежей в шапке.'") ;
//								ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%", НомерПозицииСтрока);
//								Возврат Ложь;
//							КонецЕсли;
//						КонецЕсли;
//						Если ПозицияЧека.ДанныеАгента.Свойство("ПлатежныйАгент") Тогда
//							Если Параметры.ДанныеАгента.ПлатежныйАгент.Свойство("Операция", ЗначениеПараметров)
//								И ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Свойство("Операция", ЗначениеПозицииЧека) 
//								И НЕ ЗначениеПараметров = ЗначениеПозицииЧека Тогда
//								ОписаниеОшибки = НСтр("ru = 'Операция платежного агента в строке №%Позиция% не равна операции оператора платежного агента в шапке.'") ;
//								ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%", НомерПозицииСтрока);
//								Возврат Ложь;
//							КонецЕсли;
//							
//							Если Параметры.ДанныеАгента.ПлатежныйАгент.Свойство("Телефон", ЗначениеПараметров)
//								И ПозицияЧека.ДанныеАгента.ПлатежныйАгент.Свойство("Телефон", ЗначениеПозицииЧека) 
//								И НЕ ЗначениеПараметров = ЗначениеПозицииЧека Тогда
//								ОписаниеОшибки = НСтр("ru = 'Телефон платежного агента в строке №%Позиция% не равен телефон оператора платежного агента в шапке.'") ;
//								ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%", НомерПозицииСтрока);
//								Возврат Ложь;
//							КонецЕсли;
//						КонецЕсли;
//					КонецЕсли;
//					
//					Если ПозицияЧека.Свойство("ДанныеПоставщика") Тогда
//						Если Параметры.ДанныеПоставщика.Свойство("ИНН", ЗначениеПараметров)
//							И ПозицияЧека.ДанныеПоставщика.Свойство("ИНН", ЗначениеПозицииЧека) 
//							И НЕ ЗначениеПараметров = ЗначениеПозицииЧека Тогда
//							ОписаниеОшибки = НСтр("ru = 'ИНН поставщика в строке №%Позиция% не равен ИНН поставщика в шапке.'") ;
//							ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%", НомерПозицииСтрока);
//							Возврат Ложь;
//						КонецЕсли;
//						Если Параметры.ДанныеПоставщика.Свойство("Наименование", ЗначениеПараметров)
//							И ПозицияЧека.ДанныеПоставщика.Свойство("Наименование", ЗначениеПозицииЧека) 
//							И НЕ ЗначениеПараметров = ЗначениеПозицииЧека Тогда
//							ОписаниеОшибки = НСтр("ru = 'Наименование поставщика в строке №%Позиция% не равно наименованию поставщика в шапке.'") ;
//							ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%", НомерПозицииСтрока);
//							Возврат Ложь;
//						КонецЕсли;
//						Если Параметры.ДанныеПоставщика.Свойство("Телефон", ЗначениеПараметров)
//							И ПозицияЧека.ДанныеПоставщика.Свойство("Телефон", ЗначениеПозицииЧека) 
//							И НЕ ЗначениеПараметров = ЗначениеПозицииЧека Тогда
//							ОписаниеОшибки = НСтр("ru = 'Телефон поставщика в строке №%Позиция% не равен телефон поставщика в шапке.'") ;
//							ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Позиция%", НомерПозицииСтрока);
//							Возврат Ложь;
//						КонецЕсли;
//					КонецЕсли;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат Истина;

//КонецФункции
