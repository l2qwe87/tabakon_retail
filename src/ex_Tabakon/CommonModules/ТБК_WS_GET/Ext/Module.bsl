
Функция CashierCheck(вхПараметры) ЭКСПОРТ
	Если ЛОЖЬ Тогда вхПараметры = Новый Структура(); КонецЕсли;
	
	Результ = Новый Массив;
	
	датаН = Дата(вхПараметры.DateFrom);
	датаК= Дата(вхПараметры.DateTo);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(датаН));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(ДатаК));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЧекККМ.Ссылка КАК Ссылка,
	               |	ЧекККМ.Номер КАК Номер,
	               |	ЧекККМ.Дата КАК Дата,
	               |	ЧекККМ.СуммаДокумента КАК СуммаДокумента,
	               |	ЧекККМ.КассаККМ КАК КассаККМ,
	               |	ЧекККМ.КассаККМ.Магазин КАК КассаККММагазин,
	               |	ЧекККМ.ВидОперации КАК ВидОперации,
	               |	ЧекККМ.Ответственный КАК Ответственный,
	               |	ЧекККМ.Продавец КАК Продавец,
	               |	ЧекККМ.НомерСменыККМ КАК НомерСменыККМ
	               |ИЗ
	               |	Документ.ЧекККМ КАК ЧекККМ
	               |ГДЕ
	               |	ЧекККМ.Ссылка.Дата >= &ДатаН
	               |	И ЧекККМ.Ссылка.Дата <= &ДатаК
	               |	И ЧекККМ.Ссылка.Проведен = ИСТИНА";
	
	резДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);   
	
	Пока резДокументы.Следующий() Цикл
		эл = Новый Структура();
		эл.Вставить("CashierCheckReportRef",Строка(резДокументы.Ссылка.УникальныйИдентификатор()));
		эл.Вставить("CashierCheckReportFriendlyName",Строка(резДокументы.Ссылка));
		эл.Вставить("CashierCheckReportDate",Формат(резДокументы.Дата,"ДФ='dd/MM/yyyy HH:mm:ss'"));
		эл.Вставить("CashierCheckReportNumber",резДокументы.Номер);		
		эл.Вставить("CashierCheckReportOperation",?(резДокументы.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа, "Sale", "Return"));
		эл.Вставить("CashierCheckReportSum",резДокументы.СуммаДокумента);
		
		эл.Вставить("CashierCheckReportOwnerRef",Строка(резДокументы.Ответственный.УникальныйИдентификатор()));
		эл.Вставить("CashierCheckReportOwnerFriendlyName",Строка(резДокументы.Ответственный));
		
		//Изменил Вик 2023-17-03 
		//эл.Вставить("CashierCheckReportSellerRef",Строка(резДокументы.Продавец.УникальныйИдентификатор()));
		//эл.Вставить("CashierCheckReportSellerFriendlyName",Строка(резДокументы.Продавец));
		
		эл.Вставить("StoreRef",Строка(резДокументы.КассаККММагазин.Ссылка.УникальныйИдентификатор()));
		эл.Вставить("CashierCheckCashRegisterShiftNumber", резДокументы.НомерСменыККМ);
		
		эл.Вставить("CashierCheckReportIsSale",?(резДокументы.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа, true, false));
		эл.Вставить("CashierCheckPaymentDetail",ПолучитьДанныеПоЧеку_Оплата(резДокументы.Ссылка));
		эл.Вставить("CashierCheckDiscountDetail",ПолучитьДанныеПоЧеку_Скидки(резДокументы.Ссылка));
		
		МассивТовары	=	ПолучитьДанныеПоЧеку_Товары(резДокументы.Ссылка);
		эл.Вставить("CashierCheckGoodsDetail",МассивТовары);
		
		Если МассивТовары.количество()>0 тогда
			эл.Вставить("CashierCheckReportSellerRef",МассивТовары[0].SalerRef);
			эл.Вставить("CashierCheckReportSellerFriendlyName",МассивТовары[0].Saler); 
		иначе
			НужныйПродавец	=	резДокументы.Продавец;	
			
			эл.Вставить("CashierCheckReportSellerRef", Строка(НужныйПродавец.УникальныйИдентификатор()));
			эл.Вставить("CashierCheckReportSellerFriendlyName",Строка(НужныйПродавец)); 
		КонецЕсли;
		

		
		Результ.Добавить(эл);
	конецЦикла;
	
	возврат Результ;
КонецФункции

Функция ПолучитьДанныеПоЧеку_Оплата(вхСсылка)
	Результ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", вхСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Т.ВидОплаты КАК ВидОплаты,
	               |	Т.Сумма КАК Сумма
	               |ИЗ
	               |	Документ.ЧекККМ.Оплата КАК Т
	               |ГДЕ
	               |	Т.Ссылка = &Ссылка";
	
	
	резДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);   
	
	Пока резДокументы.Следующий() Цикл
		эл = Новый Структура();
		эл.Вставить("IsCash",?(резДокументы.ВидОплаты = Справочники.ВидыОплатЧекаККМ.Наличные, true, false));
		эл.Вставить("Sum",резДокументы.Сумма);
		Результ.Добавить(эл);
	КонецЦикла;
	
	возврат Результ;
КонецФункции

Функция ПолучитьДанныеПоЧеку_Скидки(вхСсылка)
	Результ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", вхСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Т.Ссылка КАК Ссылка,
	               |	Т.СкидкаНаценка КАК СкидкаНаценка,
	               |	Т.Сумма КАК Сумма
	               |ИЗ
	               |	Документ.ЧекККМ.СкидкиНаценки КАК Т
	               |ГДЕ
	               |	Т.Ссылка = &Ссылка";
	
	
	резДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);   
	
	Пока резДокументы.Следующий() Цикл
		эл = Новый Структура();
		эл.Вставить("Discount",Строка(резДокументы.СкидкаНаценка));
		эл.Вставить("Sum",резДокументы.Сумма);
		Результ.Добавить(эл);
	КонецЦикла;
	
	возврат Результ;
КонецФункции

Функция ПолучитьДанныеПоЧеку_Товары(вхСсылка)
	Результ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", вхСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Т.Ссылка КАК Ссылка,
	               |	Т.Номенклатура КАК Номенклатура,
	               |	Т.Количество КАК Количество,
	               |	Т.Цена КАК Цена,
	               |	Т.Сумма КАК Сумма,
	               |	Т.Продавец КАК Продавец
	               |ИЗ
	               |	Документ.ЧекККМ.Товары КАК Т
	               |ГДЕ
	               |	Т.Ссылка = &Ссылка";
	
	
	резДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);   
	
	Пока резДокументы.Следующий() Цикл
		эл = Новый Структура();
		эл.Вставить("Goods", Строка(резДокументы.Номенклатура.УникальныйИдентификатор()));
		эл.Вставить("Count",резДокументы.Количество);		
		эл.Вставить("Price",резДокументы.Цена);
		эл.Вставить("Sum",резДокументы.Сумма);
		эл.Вставить("Saler",Строка(резДокументы.Продавец));
		эл.Вставить("SalerRef",Строка(резДокументы.Продавец.УникальныйИдентификатор()));
		Результ.Добавить(эл);
	КонецЦикла;
	
	возврат Результ;
КонецФункции


Функция DailySelesReport(вхПараметры) ЭКСПОРТ
	Если ЛОЖЬ Тогда вхПараметры = Новый Структура(); КонецЕсли;
	
	Результ = Новый Массив;
	прототипСтроки = "RetailSalesReportRef, RetailSalesReportDate,UserRef,UserName,IsMainUser,IsExtraShift";
	
	
	датаН = Дата(вхПараметры.DateFrom);
	датаК= Дата(вхПараметры.DateTo);
	
	//Изменил Вик 2022-09-21
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	оорп.ОтчетОРозничныхПродажах КАК Ссылка,
	//               |	ведомостьПродавцы.Продавец КАК Продавец,
	//               |	ведомостьПродавцы.ЭтоГлавныйПродавец КАК ЭтоГлавныйПродавец,
	//               |	ведомостьПродавцы.ЭтоДопСмена КАК ЭтоДопСмена
	//               |ИЗ
	//               |	Документ.ТБК_ВедомостьОПродажахЗаДень.ОтчетыОРозничныхПродажах КАК оорп
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТБК_ВедомостьОПродажахЗаДень.Продавцы КАК ведомостьПродавцы
	//               |		ПО (ведомостьПродавцы.Ссылка = оорп.Ссылка)
	//               |ГДЕ
	//               |	оорп.Ссылка.Дата >= &ДатаН
	//               |	И оорп.Ссылка.Дата <= &ДатаК
	//               |	И оорп.Ссылка.Проведен = ИСТИНА
	//               |ИТОГИ ПО
	//               |	Ссылка";
	//
	//
	//Запрос.УстановитьПараметр("ДатаН",НачалоДня(датаН));
	//Запрос.УстановитьПараметр("ДатаК",КонецДня(ДатаК));
	//
	//резДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);   
	//
	//Пока резДокументы.Следующий() Цикл
	//	эл = Новый Структура();
	//	эл.Вставить("RetailSalesReportRef",Строка(резДокументы.Ссылка.УникальныйИдентификатор()));
	//	эл.Вставить("RetailSalesReportDate",Формат(резДокументы.Ссылка.Дата,"ДФ='dd/MM/yyyy HH:mm:ss'"));
	//	
	//	мПродавцы = новый Массив;
	//	эл.Вставить("Users", мПродавцы);

	//	резПродавцы = резДокументы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//	Пока резПродавцы.Следующий() Цикл
	//		элПродавцы = Новый Структура;
	//		
	//		элПродавцы.Вставить("UserRef", Строка(резПродавцы.Продавец.УникальныйИдентификатор()));
	//		элПродавцы.Вставить("UserName",Строка(резПродавцы.Продавец));
	//		элПродавцы.Вставить("IsMainUser",резПродавцы.ЭтоГлавныйПродавец);
	//		элПродавцы.Вставить("IsExtraShift",резПродавцы.ЭтоДопСмена);
	//		
	//		мПродавцы.Добавить(элПродавцы);
	//	КонецЦикла;
	//	
	//	
	//	
	//	Результ.Добавить(эл);
	//конецЦикла;
	
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	      	 	             |ГДЕ
	      	 	             |	ОтчетОРозничныхПродажах.Дата МЕЖДУ &ДатаНач И &ДатаКон
	      	 	             |	И ОтчетОРозничныхПродажах.Проведен");
	Запрос.УстановитьПараметр("ДатаНач",НачалоДня(датаН));
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(ДатаК));
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Для каждого СТрока из Рез цикл
		эл = Новый Структура();
		эл.Вставить("RetailSalesReportRef",Строка(СТрока.Ссылка.УникальныйИдентификатор()));
		эл.Вставить("RetailSalesReportDate",Формат(СТрока.Ссылка.Дата,"ДФ='dd/MM/yyyy HH:mm:ss'"));
		
		мПродавцы = новый Массив;
		эл.Вставить("Users", мПродавцы);
		
		ЗапросВед	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		         	 	             |	ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.Ссылка КАК Ссылка
		         	 	             |ИЗ
		         	 	             |	Документ.ТБК_ВедомостьОПродажахЗаДень.ОтчетыОРозничныхПродажах КАК ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах
		         	 	             |ГДЕ
		         	 	             |	ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах = &ОтчетОРозничныхПродажах
		         	 	             |	И НЕ ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.Ссылка.ПометкаУдаления
		         	 	             |
		         	 	             |УПОРЯДОЧИТЬ ПО
		         	 	             |	ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.Ссылка.Дата");
		ЗапросВед.УстановитьПараметр("ОтчетОРозничныхПродажах",СТрока.Ссылка);
		ДокВед	=	ЗапросВед.Выполнить().Выгрузить();
		Если ДокВед.Количество() = 1 тогда 	
			Для каждого СТрокаПродавец из ДокВед[0].Ссылка.Продавцы Цикл
				элПродавцы = Новый Структура;
				
				элПродавцы.Вставить("UserRef", Строка(СТрокаПродавец.Продавец.УникальныйИдентификатор()));
				элПродавцы.Вставить("UserName",Строка(СТрокаПродавец.Продавец));
				//элПродавцы.Вставить("IsMainUser",СТрокаПродавец.ЭтоГлавныйПродавец);
				//элПродавцы.Вставить("IsExtraShift",СТрокаПродавец.ЭтоДопСмена);
				
				элПродавцы.Вставить("IsMainUser",	Истина);
				элПродавцы.Вставить("IsExtraShift", ложь);

				мПродавцы.Добавить(элПродавцы);
			КонецЦикла;
		КонецЕсли;
		
		Результ.Добавить(эл); 	
	КонецЦикла;  
	
	возврат Результ;	
КонецФункции

Функция DailySelesReport_NEW(вхПараметры) ЭКСПОРТ
	Если ЛОЖЬ Тогда вхПараметры = Новый Структура(); КонецЕсли;
	
	Результ = Новый Массив;
	прототипСтроки = "RetailSalesReportRef, RetailSalesReportDate, UserRef, UserName, UserType, ShiftTime";
	
	
	датаН = Дата(вхПараметры.DateFrom);
	датаК= Дата(вхПараметры.DateTo);
	
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	      	 	             |ГДЕ
	      	 	             |	ОтчетОРозничныхПродажах.Дата МЕЖДУ &ДатаНач И &ДатаКон
	      	 	             |	И ОтчетОРозничныхПродажах.Проведен");
	Запрос.УстановитьПараметр("ДатаНач",НачалоДня(датаН));
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(ДатаК));
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Для каждого СТрока из Рез цикл
		эл = Новый Структура();
		эл.Вставить("RetailSalesReportRef",Строка(СТрока.Ссылка.УникальныйИдентификатор()));
		эл.Вставить("RetailSalesReportDate",Формат(СТрока.Ссылка.Дата,"ДФ='dd/MM/yyyy HH:mm:ss'"));
		
		мПродавцы = новый Массив;
		эл.Вставить("Users", мПродавцы);
		
		ЗапросВед	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		         	 	             |	ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.Ссылка КАК Ссылка
		         	 	             |ИЗ
		         	 	             |	Документ.ТБК_ВедомостьОПродажахЗаДень.ОтчетыОРозничныхПродажах КАК ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах
		         	 	             |ГДЕ
		         	 	             |	ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.ОтчетОРозничныхПродажах = &ОтчетОРозничныхПродажах
		         	 	             |	И НЕ ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.Ссылка.ПометкаУдаления
		         	 	             |
		         	 	             |УПОРЯДОЧИТЬ ПО
		         	 	             |	ТБК_ВедомостьОПродажахЗаДеньОтчетыОРозничныхПродажах.Ссылка.Дата");
		ЗапросВед.УстановитьПараметр("ОтчетОРозничныхПродажах",СТрока.Ссылка);
		ДокВед	=	ЗапросВед.Выполнить().Выгрузить();
		Если ДокВед.Количество() = 1 тогда 	
			Для каждого СТрокаПродавец из ДокВед[0].Ссылка.Продавцы Цикл
				элПродавцы = Новый Структура;
				
				элПродавцы.Вставить("UserRef",   Строка(СТрокаПродавец.Продавец.УникальныйИдентификатор()));
				элПродавцы.Вставить("UserName",  Строка(СТрокаПродавец.Продавец));
				элПродавцы.Вставить("UserType",  Строка(СТрокаПродавец.ТипПродавца));
				элПродавцы.Вставить("ShiftTime", Строка(СТрокаПродавец.ВремяСмены));
				элПродавцы.Вставить("ReplacementSeller", 	СТрокаПродавец.ПродавецНаЗамену);
				
				мПродавцы.Добавить(элПродавцы);
			КонецЦикла;
		КонецЕсли;
		
		Результ.Добавить(эл); 	
	КонецЦикла;  
	
	возврат Результ;	
КонецФункции

//вхПараметры - структура
Функция GetUserList(вхПараметры) ЭКСПОРТ
	результ = Новый Массив;
	
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	Пользователи.Наименование КАК Пользователь,
	      	 	             |	Пользователи.Ссылка КАК Ссылка,
	      	 	             |	Пользователи.ПометкаУдаления КАК ПометкаУдаления,
	      	 	             |	Пользователи.Подразделение КАК Подразделение,
	      	 	             |	Пользователи.ФизЛицо КАК ФизЛицо
	      	 	             |ИЗ
	      	 	             |	Справочник.Пользователи КАК Пользователи
	      	 	             |
	      	 	             |УПОРЯДОЧИТЬ ПО
	      	 	             |	Пользователь");
	Рез = Запрос.Выполнить().Выгрузить();
	
	Для каждого СТрока из Рез цикл
		ИмяПользователяИБ	 = Строка.Пользователь;
		ПометкаУдаления		 = Строка.ПометкаУдаления;		
		ФизическоеЛицоУИ 	 = Строка(Строка.ФизЛицо.УникальныйИдентификатор());
		МагазинУИ 			 = Строка(Строка.Подразделение.УникальныйИдентификатор());
		МагазинНаименование  = Строка.Подразделение.Наименование;	
		
		Струуктура = Новый Структура;
		Струуктура.Вставить("ИмяПользователяИБ",ИмяПользователяИБ);
		Струуктура.Вставить("ФизическоеЛицоУИ",ФизическоеЛицоУИ);
		Струуктура.Вставить("МагазинУИ",МагазинУИ);
		Струуктура.Вставить("МагазинНаименование",МагазинНаименование);
		Струуктура.Вставить("ПометкаУдаления",ПометкаУдаления);
		
		результ.Добавить(Струуктура);
	КонецЦикла;
	
	//прототипСтроки = "ИмяПользователяИБ, ФизическоеЛицоУИ, МагазинУИ, МагазинНаименование";
		
	Возврат результ;
КонецФункции


Функция GetExtConfiguration(вхПараметры) ЭКСПОРТ
	Возврат РегистрыСведений.ТБК_Константы.Получить_РежимРаботыРасширения();
КонецФункции

Функция GetStoreBalance(вхПараметры) ЭКСПОРТ
	Если ЛОЖЬ Тогда вхПараметры = Новый Структура(); КонецЕсли;
	
	Результ = Новый Массив;
	//прототипСтроки = "RetailSalesReportRef, RetailSalesReportDate,UserRef,UserName,IsMainUser,IsExtraShift";
	
	//Вик Изменения по просьбе Волковой 2021_80_18
	//датаК = НачалоДня(ТекущаяДата())-1;
	//Если ТипЗнч(вхПараметры) = Тип("Структура") И вхПараметры.Свойство("Date") Тогда
	//	датаК		= Дата(вхПараметры.Date);
	//КонецЕсли; 
	датаК = НачалоДня(ТекущаяДата()) - 24*60*60;
	//
	
	НужныйСклад		 = ОбщегоНазначения.ПолучитьСкладИзООРП();
	НужныйМагазин	 = ОбщегоНазначения.ПолучитьМагазинИзООРП();

	Если НужныйСклад = Неопределено тогда Возврат Результ; КонецЕсли;
	Если НужныйМагазин = Неопределено тогда Возврат Результ; КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	               |	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, Склад = &Склад) КАК ТоварыНаСкладахОстатки"; 	
	
	Запрос.УстановитьПараметр("Склад",НужныйСклад);
	Запрос.УстановитьПараметр("Дата",ДатаК);
	
	рез = Запрос.Выполнить().Выбрать();   
	
	эл = Новый Структура();
	эл.Вставить("Store",Строка(НужныйМагазин.УникальныйИдентификатор()));
	эл.Вставить("Date",датаК);
	
	мОстатки = новый Массив;
	эл.Вставить("Balance", мОстатки);

	Пока рез.Следующий() Цикл		

		элОстатки = Новый Структура;
		
		элОстатки.Вставить("Nom", Строка(рез.Номенклатура.УникальныйИдентификатор()));
		элОстатки.Вставить("Har", Строка(рез.Характеристика.УникальныйИдентификатор()));
		элОстатки.Вставить("HarN", рез.Характеристика.Наименование);
		элОстатки.Вставить("Ostatok",рез.КоличествоОстаток);
		
		мОстатки.Добавить(элОстатки);
	конецЦикла; 
		
	Результ.Добавить(эл);
	
	возврат Результ;	
КонецФункции

Функция GetRezhimOfline(вхПараметры) ЭКСПОРТ
	Если ЛОЖЬ Тогда вхПараметры = Новый Структура(); КонецЕсли;
	
	ПринудительныйОфлайнРежим	=	ОбщегоНазначения.ПолучитьЗначениеТБККонстанты("ПринудительныйОфлайнРежим");
	Если ПринудительныйОфлайнРежим = Неопределено тогда
		возврат "0";
	иначе
		Возврат ПринудительныйОфлайнРежим;
	КонецЕсли;

КонецФункции

Функция GetTekSaler(вхПараметры) ЭКСПОРТ
	Если ЛОЖЬ Тогда вхПараметры = Новый Структура(); КонецЕсли;
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	МАКСИМУМ(ЧекККМТовары.Продавец) КАК Продавец,
	      	 	             |	ЧекККМТовары.Ссылка.КассаККМ КАК КассаККМ
	      	 	             |ИЗ
	      	 	             |	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	      	 	             |ГДЕ
	      	 	             |	ЧекККМТовары.Ссылка.Проведен
	      	 	             |	И ЧекККМТовары.Ссылка.Дата >= &Дата
	      	 	             |
	      	 	             |СГРУППИРОВАТЬ ПО
	      	 	             |	ЧекККМТовары.Ссылка.КассаККМ");
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
	рез = Запрос.Выполнить().Выбрать();
	
	МассивПродавцы = новый Массив;

	Пока рез.Следующий() цикл
		Эл = Новый Структура;
		Эл.Вставить("Продавец", Строка(Рез.Продавец));
		Эл.Вставить("КассаККМ", Строка(Рез.КассаККМ));
		МассивПродавцы.Добавить(Эл); 
	КонецЦикла;
	
	Возврат МассивПродавцы;
	
КонецФункции

Функция getstatus(вхПараметры) ЭКСПОРТ 
	Попытка
		Запрос	=	Новый запрос("ВЫБРАТЬ
		      	 	             |	ЗаказПокупателя.Статус КАК Статус
		      	 	             |ИЗ
		      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		      	 	             |ГДЕ
		      	 	             |	ЗаказПокупателя.НомерЗаказаНаСайте = &НомерЗаказаНаСайте");
		Запрос.УстановитьПараметр("НомерЗаказаНаСайте",СокрЛП(вхПараметры.СайтНомер));
		рез = Запрос.Выполнить().Выгрузить();
		
		Если Рез.Количество() = 0 тогда  
			Возврат "";
		иначе
			Возврат Строка(рез[0].Статус);  
		КонецЕсли;
			
	Исключение
		Возврат "";
	КонецПопытки;			
КонецФункции

Функция getkolcheck(вхПараметры) ЭКСПОРТ 
	Попытка
		
		датаН	= Дата(вхПараметры.DateFrom);
		датаК	= КонецДня(Дата(вхПараметры.DateTo));

	
		Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	СУММА(ВЫБОР
	      	 	             |			КОГДА ЧекККМ.ВидОперации = &Продажа
	      	 	             |				ТОГДА 1
	      	 	             |			ИНАЧЕ 0
	      	 	             |		КОНЕЦ) КАК КолЧековПродажа,
	      	 	             |	НАЧАЛОПЕРИОДА(ЧекККМ.Дата, ДЕНЬ) КАК Дата,
	      	 	             |	СУММА(ВЫБОР
	      	 	             |			КОГДА ЧекККМ.ВидОперации <> &Продажа
	      	 	             |				ТОГДА 1
	      	 	             |			ИНАЧЕ 0
	      	 	             |		КОНЕЦ) КАК КолЧековВозврат
	      	 	             |ИЗ
	      	 	             |	Документ.ЧекККМ КАК ЧекККМ
	      	 	             |ГДЕ
	      	 	             |	ЧекККМ.Проведен
	      	 	             |	И ЧекККМ.Дата МЕЖДУ &ДатаНач И &ДатаКон
	      	 	             |
	      	 	             |СГРУППИРОВАТЬ ПО
	      	 	             |	НАЧАЛОПЕРИОДА(ЧекККМ.Дата, ДЕНЬ)");
		Запрос.УстановитьПараметр("ДатаНач", датаН);
		Запрос.УстановитьПараметр("ДатаКон", датаК);
		Запрос.УстановитьПараметр("Продажа", Перечисления.ВидыОперацийЧекККМ.Продажа);

		рез = Запрос.Выполнить().Выбрать();  		
		
		мДаты = новый Массив;

		Пока рез.Следующий()цикл
			эл = Новый Структура();
			эл.Вставить("Дата", Строка(Рез.Дата));
			эл.Вставить("КоличествоЧековВозврат", Строка(Рез.КолЧековВозврат));
			эл.Вставить("КоличествоЧековПродажа", Строка(Рез.КолЧековПродажа));
			
			мДаты.Добавить(эл);
		КонецЦикла;	

		Возврат мДаты;  			
	Исключение
		Возврат "";
	КонецПопытки;	
	
КонецФункции

Функция GrtBarcodesPackagesProduct(вхПараметры) Экспорт
	
	
		Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Номенклатура.Ссылка КАК Ссылка
	                      |ПОМЕСТИТЬ Номен
	                      |ИЗ
	                      |	Справочник.Номенклатура КАК Номенклатура
	                      |ГДЕ
	                      |	Номенклатура.Код В(&Код)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	                      |ПОМЕСТИТЬ Хар
	                      |ИЗ
	                      |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	                      |ГДЕ
	                      |	ХарактеристикиНоменклатуры.Наименование В(&НаименованиеХар)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	                      |	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
	                      |	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	                      |	ШтрихкодыУпаковокТоваров.ДатаУпаковки КАК ДатаУпаковки,
	                      |	ШтрихкодыУпаковокТоваров.ТипУпаковки КАК ТипУпаковки
	                      |ИЗ
	                      |	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров,
	                      |	Номен КАК Номен,
	                      |	Хар КАК Хар
	                      |ГДЕ
	                      |	ШтрихкодыУпаковокТоваров.ДатаУпаковки МЕЖДУ &ДатаНач И &ДатаКон
	                      |	И ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО ""%"" + &ЗначениеШтрихкода + ""%""
	                      |	И ШтрихкодыУпаковокТоваров.Номенклатура В (Номен.Ссылка)
	                      |	И ШтрихкодыУпаковокТоваров.Характеристика В (Хар.Ссылка)");
	Запрос.УстановитьПараметр("ДатаНач", Дата(вхПараметры.ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", Дата(вхПараметры.ДатаКон));
	
	МассивНоменклатуры = Новый Массив;
	Если вхПараметры.свойство("МассивНоменклатураКод") Тогда
		Запрос.УстановитьПараметр("Код", вхПараметры.МассивНоменклатураКод);
		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ
	                      						|	Номенклатура.Код В(&Код)", ""); 	
	КонецЕсли;
	
	Если вхПараметры.свойство("МассивХарактеристика") Тогда
		Запрос.УстановитьПараметр("НаименованиеХар", вхПараметры.МассивХарактеристика);
	иначе
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ
	                      |	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
	                      |ПОМЕСТИТЬ Хар
	                      |ИЗ
	                      |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	                      |ГДЕ
	                      |	ХарактеристикиНоменклатуры.Наименование В(&НаименованиеХар)
	                      |;
	                      |", "");

		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ШтрихкодыУпаковокТоваров.Характеристика В (Хар.Ссылка)", "");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,",
											|	Хар КАК Хар", "");
	
	КонецЕсли;
	
	Если вхПараметры.свойство("ЗначениеШтрихкода") Тогда
		Запрос.УстановитьПараметр("ЗначениеШтрихкода", вхПараметры.ЗначениеШтрихкода);
	иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО ""%"" + &ЗначениеШтрихкода + ""%""", "");	
	КонецЕсли;

	ЗаписьЖурналаРегистрации("Информация",УровеньЖурналаРегистрации.Информация,,,Запрос.Текст);
	
	Результат = Запрос.Выполнить().Выгрузить();
	МассивВозврата = Новый Массив;
	Для каждого Строка Из Результат Цикл
	
		СтруктураСтрокиЗаписи = Новый Структура(); 
		СтруктураСтрокиЗаписи.Вставить("НоменклатураКод", Строка(Строка.Номенклатура.Код));
		СтруктураСтрокиЗаписи.Вставить("ЗначениеШтрихкода", Строка(Строка.ЗначениеШтрихкода));
		СтруктураСтрокиЗаписи.Вставить("Характеристика", Строка(Строка.Характеристика.Наименование));
		СтруктураСтрокиЗаписи.Вставить("Упаковка", Строка(Строка.ТипУпаковки));
		СтруктураСтрокиЗаписи.Вставить("ДатаУпаковки", Строка(Строка.ДатаУпаковки));
		МассивВозврата.Добавить(СтруктураСтрокиЗаписи);
	КонецЦикла;
	
	//JS = ОбщегоНазначения.СтруктураВjson_Общая(МассивВозврата);
	
	Возврат МассивВозврата;

	
КонецФункции // ()

Функция GetCancelledQR(вхПараметры) Экспорт

	    Запрос = Новый запрос("ВЫБРАТЬ
	                          |	ЧекККМАкцизныеМарки.АкцизнаяМарка КАК АкцизнаяМарка
	                          |ИЗ
	                          |	Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	                          |ГДЕ
	                          |	ЧекККМАкцизныеМарки.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	                          |	И ЧекККМАкцизныеМарки.Ссылка.Комментарий ПОДОБНО ""Добавлен в ООРП""
	                          |	И ЧекККМАкцизныеМарки.Ссылка.СтатусЧекаККМ = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Аннулированный)");
		Запрос.УстановитьПараметр("ДатаНач", Дата(вхПараметры.ДатаНач));
		Запрос.УстановитьПараметр("ДатаКон", Дата(вхПараметры.ДатаКон));
				
		Результат = Запрос.Выполнить().Выгрузить();
		МассивМарок = Новый Массив;
		Для каждого Строка Из Результат Цикл
		
			МассивМарок.Добавить(Строка(Строка.АкцизнаяМарка));	
		
		КонецЦикла; 
		
		Возврат МассивМарок;

КонецФункции // ()
 