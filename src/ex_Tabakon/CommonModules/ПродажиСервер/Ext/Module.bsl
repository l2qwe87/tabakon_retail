
&Вместо("ПроверитьАкцизныеМаркиПередЗаписьюЧека")
Процедура ТБКПроверитьАкцизныеМаркиПередЗаписьюЧека(СтруктураДляПроверки)
	// Вставить содержимое метода.
	//ПродолжитьВызов(СтруктураДляПроверки);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект 				= СтруктураДляПроверки.Объект;
	ИмяТаблицыТоваров 	= СтруктураДляПроверки.ИмяТаблицыТоваров;
	Отказ 				= СтруктураДляПроверки.Отказ;
	ИтоговоеСообщение 	= СтруктураДляПроверки.ИтоговоеСообщение;
	ДатаРасчета 		= СтруктураДляПроверки.ДатаРасчета;
	Сообщать 			= СтруктураДляПроверки.Сообщать;
	ОрганизацияЕГАИС 	= СтруктураДляПроверки.ОрганизацияЕГАИС;
	
	ТаблицаАкцизныеМарки = Объект[ИмяТаблицыТоваров];
	ТаблицаТовары = Объект.Товары;
	
	АкцизныеМарки = Новый ТаблицаЗначений;
	АкцизныеМарки.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число"));
	АкцизныеМарки.Колонки.Добавить("АкцизнаяМарка", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	
	Для Каждого АкцизнаяМарка Из ТаблицаАкцизныеМарки Цикл 
		НоваяСтрока = АкцизныеМарки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, АкцизнаяМарка);
	КонецЦикла;
	
	Организации = Новый ТаблицаЗначений;
	Организации.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Организации.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка Из ТаблицаТовары Цикл 
		НоваяСтрока = Организации.Добавить();
		НоваяСтрока.КлючСвязи = Строка.КлючСвязи;
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЧекККМ") 
			 Или ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияТоваров") 
			 Или ТипЗнч(Объект) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
			НоваяСтрока.Организация = Объект.Организация;
		Иначе 
			НоваяСтрока.Организация = Строка.Организация;
		КонецЕсли;
	КонецЦикла;
	
	УсловиеРеализация = "";
	ДокументСсылка = Объект.Ссылка;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваров") Тогда
		УсловиеРеализация = "И РеализацияТоваровАкцизныеМарки.Ссылка <> &ДокументСсылка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	АкцизныеМарки.КлючСвязи КАК КлючСвязи,
	|	АкцизныеМарки.АкцизнаяМарка КАК АкцизнаяМарка
	|ПОМЕСТИТЬ ТаблицаАкцизныеМарки
	|ИЗ
	|	&АкцизныеМарки КАК АкцизныеМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.КлючСвязи КАК КлючСвязи,
	|	Организации.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаОрганизации
	|ИЗ
	|	&Организации КАК Организации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАкцизныеМарки.АкцизнаяМарка КАК АкцизнаяМарка,
	|	ТаблицаОрганизации.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаОрганизацииИМарки
	|ИЗ
	|	ТаблицаАкцизныеМарки КАК ТаблицаАкцизныеМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрганизации КАК ТаблицаОрганизации
	|		ПО ТаблицаАкцизныеМарки.КлючСвязи = ТаблицаОрганизации.КлючСвязи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АкцизнаяМарка,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМАкцизныеМарки.Ссылка КАК Ссылка,
	|	ЧекККМАкцизныеМарки.Ссылка.Дата КАК Дата,
	|	ЧекККМАкцизныеМарки.Ссылка.Номер КАК Номер,
	|	ЧекККМАкцизныеМарки.Ссылка.ВидОперации КАК ПоследняяОперация
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрганизацииИМарки КАК ТаблицаОрганизацииИМарки
	|		ПО ЧекККМАкцизныеМарки.АкцизнаяМарка = ТаблицаОрганизацииИМарки.АкцизнаяМарка
	|			И (ЧекККМАкцизныеМарки.Ссылка.Дата > &ГлубинаПросмотра)
	|			И (ЧекККМАкцизныеМарки.Ссылка.Проведен)
	|ГДЕ
	|	ЧекККМАкцизныеМарки.Ссылка <> &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Ссылка УБЫВ";
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС", "");
		Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Иначе
		Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	КонецЕсли;
	
	НевыгруженныеСтатусы = Новый Массив;
	НевыгруженныеСтатусы.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПередачи);
	НевыгруженныеСтатусы.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПроведенияЕГАИС);
	НевыгруженныеСтатусы.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Отменен);
	Запрос.УстановитьПараметр("НевыгруженныеСтатусы", НевыгруженныеСтатусы);
	Запрос.УстановитьПараметр("Возврат", Перечисления.ВидыОперацийЧекККМ.Возврат);
	Запрос.УстановитьПараметр("Продажа", Перечисления.ВидыОперацийЧекККМ.Продажа);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Реализована", Перечисления.СтатусыАкцизныхМарок.Реализована);
	Запрос.УстановитьПараметр("АкцизныеМарки", АкцизныеМарки);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ГлубинаПросмотра", ТекущаяДата() - 60*60*24*30);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеРеализация", УсловиеРеализация);
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		
		ЕстьОшибка = Ложь;
		Если Выборка.ПоследняяОперация = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда 
			ЕстьОшибка = Истина;
		КонецЕсли;
		
		Если ЕстьОшибка Тогда
			
			СтруктураДляПроверки.Отказ = Истина;

			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(НСтр("ru = 'Присутствуют акцизные марки, которые '"));
			МассивСтрок.Добавить(НСтр("ru = 'ранее были учтены в документах:'"));
			МассивСтрок.Добавить(Символы.ПС);
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			ОбщегоНазначенияРТ.ПредставлениеДокумента(Выборка.Ссылка, Выборка.Номер, Выборка.Дата),,,,
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка)));
			
			ТекстСообщения = Новый ФорматированнаяСтрока(МассивСтрок);
			
			Если Сообщать Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Иначе
				СтруктураДляПроверки.ИтоговоеСообщение = ИтоговоеСообщение + ТекстСообщения + Символы.ПС;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&Вместо("СтрокиРасхожденияПоТоварамСЧекомПродажи")
Функция ТБКСтрокиРасхожденияПоТоварамСЧекомПродажи(ДокументОбъект, РазрезАналитики)	
	//Вик убрал заказ покупателя и код строки и склад
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМТовары.Характеристика КАК Характеристика,
	|	ЧекККМТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаОбъекта
	|ИЗ
	|	&Товары КАК ЧекККМТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОбъекта.Номенклатура КАК Номенклатура,
	|	ТаблицаОбъекта.Характеристика КАК Характеристика,
	|	ТаблицаОбъекта.Количество КАК КоличествоВозвратаТекущего,
	|	0 КАК КоличествоВозвратаПрошлого,
	|	0 КАК КоличествоПродажи
	|ПОМЕСТИТЬ ТаблицаОбщиеДанные
	|ИЗ
	|	ТаблицаОбъекта КАК ТаблицаОбъекта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	0,
	|	ЧекККМТовары.Количество,
	|	0
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка.ЧекККМПродажа = &ЧекККМПродажа
	|	И ЧекККМТовары.Ссылка <> &Ссылка
	|	И ЧекККМТовары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	0,
	|	0,
	|	ЧекККМТовары.Количество
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка = &ЧекККМПродажа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбщиеДанные.Номенклатура КАК Номенклатура,
	|	ТаблицаОбщиеДанные.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаОбщиеДанные.КоличествоПродажи) КАК КоличествоПродажи,
	|	СУММА(ТаблицаОбщиеДанные.КоличествоВозвратаТекущего) КАК КоличествоВозвратаТекущего,
	|	СУММА(ТаблицаОбщиеДанные.КоличествоВозвратаПрошлого) КАК КоличествоВозвратаПрошлого
	|ПОМЕСТИТЬ ТаблицаСгруппированная
	|ИЗ
	|	ТаблицаОбщиеДанные КАК ТаблицаОбщиеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбщиеДанные.Номенклатура,
	|	ТаблицаОбщиеДанные.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Характеристика) КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаСгруппированная.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ЛОЖЬ КАК ПродажаПоЗаказу,
	|	ТаблицаСгруппированная.КоличествоПродажи КАК КоличествоПродажи,
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего КАК КоличествоВозвратаТекущего,
	|	ТаблицаСгруппированная.КоличествоВозвратаПрошлого КАК КоличествоВозвратаПрошлого
	|ИЗ
	|	ТаблицаСгруппированная КАК ТаблицаСгруппированная
	|ГДЕ
	|	ТаблицаСгруппированная.КоличествоВозвратаТекущего > 0
	|	И ТаблицаСгруппированная.КоличествоВозвратаТекущего + ТаблицаСгруппированная.КоличествоВозвратаПрошлого > ТаблицаСгруппированная.КоличествоПродажи";
	
	Запрос.УстановитьПараметр("ЧекККМПродажа", ДокументОбъект.ЧекККМПродажа);
	Запрос.УстановитьПараметр("Ссылка"       , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Товары"       , ДокументОбъект.Товары.Выгрузить());
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Склад", РазрезАналитики);
	
	Результат = Запрос.Выполнить();
		
	Возврат Результат.Выгрузить();
КонецФункции

&Вместо("РаспределитьШтрихкодыПоТаблицеТоваров")
Функция ТБКРаспределитьШтрихкодыПоТаблицеТоваров(ДокументОбъект, МассивУпаковок, Товары)
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
	ПараметрыУказанияСерий = МенеджерОбъекта.ПараметрыУказанияСерий(ДокументОбъект);
	
	ПараметрыРаспределения = ШтрихкодированиеИСМП.НовыеПараметрыРаспределенияШтрихкодовУпаковок();
	Если ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") Тогда
		ПараметрыРаспределения.ДокументСсылка = ДокументОбъект;
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМ") И НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		ПараметрыРаспределения.ДокументСсылка = ДокументОбъект;
	Иначе
		ПараметрыРаспределения.ДокументСсылка = ДокументОбъект.Ссылка;
	КонецЕсли;
	ПараметрыРаспределения.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	
	ДанныеРаспределения = ШтрихкодированиеИСМП.РаспределениеШтрихкодовУпаковокПоТоварам(
		ПараметрыРаспределения,
		Товары,
		МассивУпаковок);
	
	Если ДанныеРаспределения.ЕстьОшибки Тогда
		ВызватьИсключение СтрСоединить(ДанныеРаспределения.Ошибки, Символы.ПС);
	КонецЕсли;
	
	ТоварыРазобранные = Товары.СкопироватьКолонки();
	Если ТоварыРазобранные.Колонки.Найти("РезультатРаспределенияШтрихкодов") = Неопределено Тогда
		ТоварыРазобранные.Колонки.Добавить("РезультатРаспределенияШтрихкодов");
	КонецЕсли;
	
	Если ТоварыРазобранные.Колонки.Найти("СуммаСкидок") = Неопределено Тогда
		ТоварыРазобранные.Колонки.Добавить("СуммаСкидок");
	КонецЕсли;
	
	СуммовыеПоказателиОбщие = Новый Массив;
	СуммовыеПоказателиОбщие.Добавить("Сумма");
	СуммовыеПоказателиОбщие.Добавить("СуммаНДС");
	СуммовыеПоказателиОбщие.Добавить("СуммаСкидок");
	СуммовыеПоказателиОбщие.Добавить("СуммаАвтоматическойСкидки");
	СуммовыеПоказателиОбщие.Добавить("СуммаРучнойСкидки");
	СуммовыеПоказателиОбщие.Добавить("СуммаСкидкиОплатыБонусом");
	
	СуммовыеПоказатели = Новый Массив;
	Для Каждого СуммовойПоказатель Из СуммовыеПоказателиОбщие Цикл
		Если НЕ Товары.Колонки.Найти(СуммовойПоказатель) = Неопределено Тогда
			СуммовыеПоказатели.Добавить(СуммовойПоказатель);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		РаспределениеПоСтроке = ДанныеРаспределения.РаспределенныеСтроки.Получить(СтрокаТовары);
		
		Если РаспределениеПоСтроке = Неопределено Тогда
			СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары);
			Продолжить;
		КонецЕсли;  
		
		//Вик 2024-08-06 
		Попытка
			Для Каждого СтрокаРаспределения Из РаспределениеПоСтроке Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаРаспределения.ПолныйКодМаркировки) тогда 
					СтрокаРаспределения.ПолныйКодМаркировки	=	СтрокаРаспределения.КодМаркировки;
				КонецЕсли;
			КонецЦикла; 
		Исключение
		КонецПопытки;
		//
		
		// Заполним коэффициенты распределния.
		КоличествоРаспределение = 0;
		КоличествоУпаковокРаспределение = 0;
		Коэффициенты = Новый Массив;
		Для Каждого СтрокаРаспределения Из РаспределениеПоСтроке Цикл
			КоличествоРаспределение = КоличествоРаспределение + СтрокаРаспределения.Количество;
			
			Если СтрокаРаспределения.ЧастичноеВыбытие
				И СтрокаРаспределения.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво Тогда
				СтрокаРаспределения.КоличествоУпаковок = СтрокаРаспределения.Количество;
			Иначе
				СтрокаРаспределения.КоличествоУпаковок = 1;
			КонецЕсли;
			КоличествоУпаковокРаспределение = КоличествоУпаковокРаспределение + СтрокаРаспределения.КоличествоУпаковок;
			Коэффициенты.Добавить(СтрокаРаспределения.КоличествоУпаковок);
		КонецЦикла;
		
		Если НЕ КоличествоРаспределение = СтрокаТовары.Количество Тогда
			ВызватьИсключение(НСтр("ru = 'Некорректно выполнено распределение марок на продукцию. Пробитие чека не может быть выполнено'"));
		КонецЕсли;
		
		Если КоличествоУпаковокРаспределение = СтрокаТовары.КоличествоУпаковок Тогда
			Если РаспределениеПоСтроке.Количество() = 1 Тогда
				// Распределение не требуется.
				СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары);
				СтрокаТоварыРазобранные.Штрихкод = РаспределениеПоСтроке[0].Штрихкод;
				СтрокаТоварыРазобранные.РезультатРаспределенияШтрихкодов = РаспределениеПоСтроке[0];
				
				Продолжить;
			КонецЕсли;
		Иначе
			// Очистим упаковку.
			СтрокаТовары.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			СтруктураЕдиницаИзмеренияПредметаРасчета = Новый Структура("ЕдиницаИзмеренияПредметаРасчета", "");
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтруктураЕдиницаИзмеренияПредметаРасчета);
		КонецЕсли;
		
		// Распределим суммовые показатели по коэффициентам.
		ДанныеРаспределенияПоказателей = Новый Соответствие;
		Для Каждого СуммовойПоказатель Из СуммовыеПоказатели Цикл
			РаспределенныеСуммы = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаТовары[СуммовойПоказатель], Коэффициенты);
			ДанныеРаспределенияПоказателей.Вставить(СуммовойПоказатель, РаспределенныеСуммы);
		КонецЦикла;
		
		// Заполним строки распределения.
		Индекс = 0;
		Для Каждого СтрокаРаспределения Из РаспределениеПоСтроке Цикл
			
			СтрокаТоварыРазобранные = ТоварыРазобранные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтрокаТовары,, СтрСоединить(СуммовыеПоказатели, ","));
			СтрокаТоварыРазобранные.РезультатРаспределенияШтрихкодов = СтрокаРаспределения;
			
			// Перенесем данные из таблицы распределения.
			СтрокаТоварыРазобранные.Штрихкод           = СтрокаРаспределения.Штрихкод;
			СтрокаТоварыРазобранные.КоличествоУпаковок = СтрокаРаспределения.КоличествоУпаковок;
			СтрокаТоварыРазобранные.Количество         = СтрокаРаспределения.Количество;
			
			// Заполним упаковку при необходимости.
			Если СтрокаТоварыРазобранные.Количество > 1 И НЕ ЗначениеЗаполнено(СтрокаТоварыРазобранные.Упаковка) Тогда
				СтрокаТоварыРазобранные.Упаковка = Справочники.УпаковкиНоменклатуры.Упаковка(
					СтрокаТоварыРазобранные.Номенклатура, СтрокаТоварыРазобранные.Количество);
				
				СтруктураЕдиницаИзмеренияПредметаРасчета = Новый Структура("ЕдиницаИзмеренияПредметаРасчета");
				Если ЗначениеЗаполнено(СтрокаТоварыРазобранные.Упаковка) Тогда
					СтруктураЕдиницаИзмеренияПредметаРасчета.ЕдиницаИзмеренияПредметаРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						СтрокаТоварыРазобранные.Упаковка, "Наименование");
				Иначе
					ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТоварыРазобранные.Номенклатура, "ЕдиницаИзмерения");
					Если СтрокаРаспределения.ЧастичноеВыбытие Тогда
						СтруктураЕдиницаИзмеренияПредметаРасчета.ЕдиницаИзмеренияПредметаРасчета = ЕдиницаИзмерения;
					Иначе
						СтруктураЕдиницаИзмеренияПредметаРасчета.ЕдиницаИзмеренияПредметаРасчета = СтрШаблон(НСтр("ru = '%1 %2'"),
							СтрокаТоварыРазобранные.Количество,
							ЕдиницаИзмерения);
					КонецЕсли;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаТоварыРазобранные, СтруктураЕдиницаИзмеренияПредметаРасчета);
			КонецЕсли;
			
			// Пересчитаем суммовые показатели при необходимости.
			Для Каждого КлючИЗначение Из ДанныеРаспределенияПоказателей Цикл
				РаспределенныеСуммы = КлючИЗначение.Значение;
				
				ЗначениеПоказателя = 0;
				Если НЕ РаспределенныеСуммы = Неопределено Тогда
					ЗначениеПоказателя = РаспределенныеСуммы[Индекс];
				КонецЕсли;
				
				СтрокаТоварыРазобранные[КлючИЗначение.Ключ] = ЗначениеПоказателя;
			КонецЦикла;
			
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМ") Тогда
				Если Не ЗначениеЗаполнено(СтрокаТоварыРазобранные.СуммаСкидок) Тогда
					СтрокаТоварыРазобранные.СуммаСкидок = СтрокаТоварыРазобранные.СуммаАвтоматическойСкидки + СтрокаТоварыРазобранные.СуммаРучнойСкидки
					+ СтрокаТоварыРазобранные.СуммаСкидкиОплатыБонусом;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТоварыРазобранные.Цена = Окр((СтрокаТоварыРазобранные.Сумма - СтрокаТоварыРазобранные.СуммаСкидок) / СтрокаТоварыРазобранные.Количество, 2);
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТоварыРазобранные;

КонецФункции
