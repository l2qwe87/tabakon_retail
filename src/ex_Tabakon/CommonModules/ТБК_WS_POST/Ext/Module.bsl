
//вхПараметры - структура
//	UserName - string
//  Password - string
Функция SetPassword(вхПараметры) ЭКСПОРТ
	ИмяПользователя = СокрЛП(вхПараметры.FullName);
	Пароль			= СокрЛП(вхПараметры.Password);

	Пользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	
	Если Пользователь <> Неопределено Тогда
		Пользователь.Пароль	=	Пароль;
		Пользователь.Записать();
		
		результат = Истина;
	иначе
		сообщить("Не найден пользователь с именем: "+ИмяПользователя);
		результ = Ложь;;
	КонецЕсли;
	
	Возврат результат;
КонецФункции


//вхПараметры - структура
//	UserName - string
//  Password - string
//  FullName - string - Фамилия Имя Отчество
//  Birthdate - string - 20000101
Функция CreateUser(вхПараметры) ЭКСПОРТ

	Попытка
		Результат = Справочники.ФизическиеЛица.СоздатьПользователя(вхПараметры);
	Исключение
		Сообщить(ОписаниеОшибки());
		Результат =  Ложь;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции


//вхПараметры - структура
// Configuration - string (Release, Alpha, Gama)
Функция SetExtConfiguration(вхПараметры) ЭКСПОРТ
	
	config = вхПараметры.Configuration;
	
	РегистрыСведений.ТБК_Константы.Установить_РежимРаботыРасширения(config);
КонецФункции


Функция Run_exRetailOle(вхПараметры) ЭКСПОРТ
	имяФайла = "C:\app\database\exRetailOle.cmd"; 
	
	файл_cmd = Новый Файл(имяФайла);
	WshShell=Новый COMОбъект("WScript.Shell");
	WshShell.Run(имяФайла);
	
КонецФункции

Функция Run_apply_cfe(вхПараметры) ЭКСПОРТ
	
	фв = Новый файл("c:\app\database\Tabakon.version.loaded.txt");
	Если фв.Существует() Тогда
		УдалитьФайлы("c:\app\database\Tabakon.version.loaded.txt");
	КонецЕсли;
	
	имяФайла = "C:\app\database\apply_cfe.cmd"; 
	
	файл_cmd = Новый Файл(имяФайла);
	WshShell=Новый COMОбъект("WScript.Shell");
	WshShell.Run(имяФайла);
КонецФункции

Функция WriteMessage(вхПараметры) ЭКСПОРТ
	Попытка
		НовыйЭл							=	Справочники.ТБКСообщенияУТРозница.СоздатьЭлемент();
		НовыйЭл.Дата					=	Дата(вхПараметры.Дата);
		НовыйЭл.Отправитель				=	"Офис";
		НовыйЭл.Сообщение				=	вхПараметры.Сообщение;
		НовыйЭл.ИдентификаторСообщения	=	вхПараметры.ИдентификаторСообщения;
		НовыйЭл.Отправлено				=	Истина;
		//Марк 2024-02-26
		Если вхПараметры.Свойство("Тема") Тогда
			НовыйЭл.Тема					=	вхПараметры.Тема;
		КонецЕсли;
		
		Если вхПараметры.Свойство("ЕстьФотки") Тогда
			
			СтукрутраFTP = ОбщегоНазначения.ПолучитьСтруктуруПодключенияFTP();
			Соединение = Новый FTPСоединение(СтукрутраFTP.ИмяFTPСервера, СтукрутраFTP.Порт, СтукрутраFTP.Пользователь, СтукрутраFTP.Пароль);
			
			КаталогИб = СтрокаСоединенияИнформационнойБазы();
			КаталогИб = СтрЗаменить(КаталогИб, "File=""", "");
			КаталогИб = СтрЗаменить(КаталогИб, """;", ""); 
			//Проверка существования каталога +++
			Строка_Каталог_photo = КаталогИб + "\photo";
			Строка_Каталог_chat = КаталогИб + "\photo\chat";
			файл_Каталог_photo = Новый Файл(Строка_Каталог_photo);
			если файл_Каталог_photo.Существует() Тогда
				файл_Каталог_chat = Новый Файл(Строка_Каталог_chat);
				Если НЕ файл_Каталог_chat.Существует() Тогда
					СоздатьКаталог(Строка_Каталог_chat);	
				КонецЕсли;
			иначе
				СоздатьКаталог(Строка_Каталог_photo);
				СоздатьКаталог(Строка_Каталог_chat);
			КонецЕсли;
			//Проверка существования каталога ---
			
			//МассивФоток  = вхПараметры.МассивФоток;
			Файл_Фотка_FTP = Соединение.НайтиФайлы(СтукрутраFTP.КаталогНаСервере + "photo/chat/","*");
			//Для каждого Путь_Фото Из МассивФоток Цикл
				для каждого Файл Из Файл_Фотка_FTP Цикл
					если СтрНайти(Файл.Имя, "_Shipped") тогда Продолжить; КонецЕсли;
					ЗаписьЖурналаРегистрации("Информаци" , УровеньЖурналаРегистрации.Информация, "Зашел, фото: " + Файл.Имя);
					ПутьКФайлу = ПолучитьИмяВременногоФайла(Файл.Имя);
					Соединение.Получить(Файл.ПолноеИмя, ПутьКФайлу);
					ПереместитьФайл(ПутьКФайлу, Строка_Каталог_chat + "\" + Файл.Имя); 
					Соединение.Переместить(Файл.ПолноеИмя, Файл.Путь + Файл.ИмяБезРасширения + "_Shipped" + Файл.Расширение); 
				КонецЦикла;
			//КонецЦикла; 
			
		КонецЕсли;
			
		//КонецМарк
		НовыйЭл.Записать();
		Возврат Истина;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;

КонецФункции

Функция WriteRequest(вхПараметры) ЭКСПОРТ
	Попытка
		НовыйЭл							=	Документы.ТБК_ЗаявкаОтМагазина.СоздатьДокумент();
		НовыйЭл.Дата					=	вхПараметры.Дата; //Марк
		НовыйЭл.Номер					=	вхПараметры.Номер;
		НовыйЭл.Магазин					=	ОбщегоНазначения.ПолучитьСкладИзООРП();
		НовыйЭл.ВидОперации				=	Перечисления.ТБК_ВидыОперацийЗаявокОтМагазина.ВозвратТовара;
		НовыйЭл.Статус					=	"Собирать";
		
		Если ЗначениеЗаполнено(вхПараметры.Проект) тогда
			НовыйЭл.Проект			=	Справочники.ТБКПроекты.НайтиПоНаименованию(вхПараметры.Проект);
			Если НовыйЭл.Проект.Пустая() тогда
				Спр					=	Справочники.ТБКПроекты.СоздатьЭлемент();
				Спр.Наименование	=	вхПараметры.Проект;
				Спр.Записать();
		        НовыйЭл.Проект		=	Спр.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		НовыйЭл.Комментарий				=	вхПараметры.Комментарий; 
		НовыйЭл.ДатаСборки				=	вхПараметры.ДатаСборки;
		НовыйЭл.Сформирован				=	Истина;
		

		//товары
		Для i=1 по 10000 цикл
			Если вхПараметры.Свойство("НоменклатураКод"+Строка(i)) тогда
				Количество				=	"";
				НоменклатураКод			=	"";
				Характеристика			=	"";
				
				вхПараметры.Свойство("Количество"					+	Строка(i),	Количество);
				вхПараметры.Свойство("НоменклатураКод"				+	Строка(i),	НоменклатураКод);
				вхПараметры.Свойство("Характеристика"				+	Строка(i),	Характеристика); 
				
				НоменклатураСсылка		=	Справочники.Номенклатура.НайтиПоКоду(НоменклатураКод);	
				
				НужнаяХарактеристика	=	Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Если ЗначениеЗаполнено(Характеристика) тогда
					Запрос	=	Новый Запрос("ВЫБРАТЬ
					      	 	             |	ХарактеристикиНоменклатуры.Ссылка
					      	 	             |ИЗ
					      	 	             |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
					      	 	             |ГДЕ
					      	 	             |	ХарактеристикиНоменклатуры.Владелец = &Владелец
					      	 	             |	И ХарактеристикиНоменклатуры.Наименование = &Наименование");
					Запрос.УстановитьПараметр("Владелец",НоменклатураСсылка);
					Запрос.УстановитьПараметр("Наименование",Характеристика);
					Рез = Запрос.Выполнить().Выгрузить();
					Если Рез.Количество() >0 тогда
						НужнаяХарактеристика			=	Рез[0].Ссылка;
					КонецЕсли; 	
				КонецЕсли;					
				
	       		НоваяСтрока	=	НовыйЭл.Товары.Добавить();
				НоваяСтрока.Номенклатура	=	НоменклатураСсылка;
				НоваяСтрока.Характеристика	=	НужнаяХарактеристика;
				НоваяСтрока.Количество		=	Число(Количество);	
			иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;   
		
		НовыйЭл.Записать(РежимЗаписиДокумента.Проведение);
		
		рег = РегистрыСведений.ТБК_ДанныеПоЗаявкамМагазинов.СоздатьНаборЗаписей();
		рег.Отбор.Документ.Установить(НовыйЭл.Ссылка);
		Рег.Прочитать();
		
		Если рег.Количество() <> 0 тогда	
			рег[0].Отправлен	=	Ложь;
			рег.Записать();
		КонецЕсли;		
		
		Возврат Истина;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;

КонецФункции

Функция RemovedОffice(вхПараметры) ЭКСПОРТ //Марк
	Попытка
		
		НомерДокумента		=	вхПараметры.Номер;
		
		Если Сред(НомерДокумента,3,1) = "5" тогда
			НомерДокумента	=	лев(НомерДокумента,2) + "0" + Прав(НомерДокумента,6);
		КонецЕсли;   
		
		ДатаДокумента		=	ОбщегоНазначения.РазобратьДату(вхПараметры.дата); 
		ДокументЗаявка		=	Документы.ТБК_ЗаявкаОтМагазина.НайтиПоНомеру(НомерДокумента,ДатаДокумента);
		
		Если НЕ ДокументЗаявка.Пустая() Тогда
			ДокументЗаявка = ДокументЗаявка.ПолучитьОбъект();
			ДокументЗаявка.Статус = вхПараметры.Статус;
			ДокументЗаявка.Сформирован = Истина;
			ДокументЗаявка.Проведен = ложь;
			ДокументЗаявка.ПометкаУдаления = Истина;
			ДокументЗаявка.Записать();
			
			Запрос  =  новый запрос("ВЫБРАТЬ
			|  ТБК_ДанныеПоЗаявкамМагазинов.Документ КАК Документ
			|ИЗ
			|  РегистрСведений.ТБК_ДанныеПоЗаявкамМагазинов КАК ТБК_ДанныеПоЗаявкамМагазинов
			|ГДЕ
			|  ТБК_ДанныеПоЗаявкамМагазинов.Документ = &Документ
			|  И ТБК_ДанныеПоЗаявкамМагазинов.Документ.Статус = ""Удалено в офисе"""); 
			Запрос.УстановитьПараметр("Документ",ДокументЗаявка.Ссылка);
			Если не запрос.Выполнить().Пустой() тогда
				Рег = РегистрыСведений.ТБК_ДанныеПоЗаявкамМагазинов.СоздатьНаборЗаписей();
				Рег.Отбор.Документ.Установить(ДокументЗаявка.Ссылка); 
				Рег.Записать();
			КонецЕсли;
			
		Иначе 
			Возврат "Документ не найден " + НомерДокумента;
		КонецЕсли;
		
		Возврат Истина;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Функция WriteZakaz(вхПараметры) ЭКСПОРТ 
	Попытка
		
		Запрос	=	Новый запрос("ВЫБРАТЬ
		      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
		      	 	             |ИЗ
		      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		      	 	             |ГДЕ
		      	 	             |	ЗаказПокупателя.НомерЗаказаНаСайте = &НомерЗаказаНаСайте");
		Запрос.УстановитьПараметр("НомерЗаказаНаСайте",СокрЛП(вхПараметры.СайтНомер));
		рез = Запрос.Выполнить().Выгрузить();
		
		СтруктураЗаказа = вхПараметры;
		
		Если Рез.Количество() = 0 тогда  		
			//СоздатьНовыйИнтернетЗаказ(СтруктураЗаказа)
			НовыйДок	=	Документы.ЗаказПокупателя.СоздатьДокумент();
			НовыйДок.НомерЗаказаНаСайте	=	СокрЛП(СтруктураЗаказа.СайтНомер);
			

			НовыйДок.Дата			=	Дата(СтруктураЗаказа.Дата);
			НовыйДок.Номер			=	СтруктураЗаказа.НомерЗаказаУТ;
			НовыйДок.Комментарий	=	"Оплачен: "    		+ СтруктураЗаказа.Оплачен + Символы.ПС +
										"Тип оплаты: " 		+ СтруктураЗаказа.СайтТипОплаты + Символы.ПС +
										"Доп. информация: " + СтруктураЗаказа.СайтДопИнфо;
			
			НовыйДок.Статус			=	Перечисления.СтатусыЗаказовПокупателей.НеСогласован;
			НовыйДок.ИнтернетЗаказ	=	Истина;
			
			Если ЗначениеЗаполнено(СтруктураЗаказа.ДатаОтгрузки) тогда
				НовыйДок.ЖелаемаяДатаПродажи	=	Дата(СтруктураЗаказа.ДатаОтгрузки);
			КонецЕсли;
			
			//товары
			Для Ном =1 по 100 цикл
				Если СтруктураЗаказа.Свойство("Количество"+Строка(Ном)) тогда
					НоваяСтрока	=	НовыйДок.Товары.Добавить();
					
					НужХар		=	"";
					НужйШК		=	"";
					НужКол		=	"";
					НужЦена		=	"";
					НужСумма	=	"";
					НужПроц		=	"";   
					НужКодНом	=	"";
					
					СтруктураЗаказа.Свойство("Количество"			+	Строка(Ном),	НужКол);
					СтруктураЗаказа.Свойство("Характеристика"		+	Строка(Ном),	НужХар);
					СтруктураЗаказа.Свойство("Штрихкод"				+	Строка(Ном),	НужйШК);
					СтруктураЗаказа.Свойство("Цена"					+	Строка(Ном),	НужЦена);
					СтруктураЗаказа.Свойство("Сумма"				+	Строка(Ном),	НужСумма);
					СтруктураЗаказа.Свойство("ПроцентСкидкиНаценки"	+	Строка(Ном),	НужПроц);
					СтруктураЗаказа.Свойство("НоменклатураКод"		+	Строка(Ном),	НужКодНом);

								
					НужЦена		=	СтрЗаменить(НужЦена,Символы.НПП,"");
					НужСумма	=	СтрЗаменить(НужСумма,Символы.НПП,"");
					НужКол		=	СтрЗаменить(НужКол,Символы.НПП,"");

					Если ЗначениеЗаполнено(НужйШК) тогда
						Запрос	=	новый запрос("ВЫБРАТЬ
						      	 	             |	Штрихкоды.Владелец КАК Владелец,
						      	 	             |	Штрихкоды.Упаковка КАК Упаковка
						      	 	             |ИЗ
						      	 	             |	РегистрСведений.Штрихкоды КАК Штрихкоды
						      	 	             |ГДЕ
						      	 	             |	Штрихкоды.Штрихкод = &Штрихкод");
						
						Запрос.УстановитьПараметр("Штрихкод",НужйШК);
						
						Рез	=	Запрос.Выполнить().Выгрузить(); 
					иначе
						Запрос	=	новый запрос("ВЫБРАТЬ
						      	 	             |	Номенклатура.Ссылка КАК Владелец
						      	 	             |ИЗ
						      	 	             |	Справочник.Номенклатура КАК Номенклатура
						      	 	             |ГДЕ
						      	 	             |	Номенклатура.Код = &Код");
						
						Запрос.УстановитьПараметр("Код",НужКодНом);
						
						Рез	=	Запрос.Выполнить().Выгрузить();	
					КонецЕсли;
					
					Если Рез.Количество() >0 тогда
						НоваяСтрока.Номенклатура		=	Рез[0].Владелец;	
						Если ЗначениеЗаполнено(НужХар) тогда
							Запрос	=	Новый запрос("ВЫБРАТЬ
							      	 	             |	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
							      	 	             |ИЗ
							      	 	             |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
							      	 	             |ГДЕ
							      	 	             |	ХарактеристикиНоменклатуры.Наименование = &Наименование
							      	 	             |	И ХарактеристикиНоменклатуры.Владелец = &Владелец");
							Запрос.УстановитьПараметр("Владелец",НоваяСтрока.Номенклатура);
							Запрос.УстановитьПараметр("Наименование",НужХар);
							Рез = Запрос.Выполнить().Выгрузить();
							
							Если Рез.Количество() >0 тогда
								НоваяСтрока.Характеристика		=	Рез[0].Ссылка;
							КонецЕсли;
						КонецЕсли;

						
						
						НоваяСтрока.Количество			=	Число(СтрЗаменить(НужКол,",","."));
						НоваяСтрока.КоличествоУпаковок	=	НоваяСтрока.Количество;
						НоваяСтрока.Цена				=	Число(СтрЗаменить(НужЦена,",","."));
						НоваяСтрока.Сумма				=	Число(СтрЗаменить(НужСумма,",","."));
						НоваяСтрока.ПроцентРучнойСкидки	=	Число(СтрЗаменить(НужПроц,",",".")); 
					КонецЕсли; 		
					
				иначе
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			НовыйДок.ОбменДанными.Загрузка = Истина;

			Попытка
				НовыйДок.Записать();
			Исключение
				Возврат ОписаниеОшибки();
			КонецПопытки;
			
			//Доп
			Если СтруктураЗаказа.Оплачен = "Да" тогда
				Рег	=	РегистрыСведений.СостояниеОплатыЗаказаПокупателя.СоздатьМенеджерЗаписи();
				Рег.ЗаказПокупателя	=	НовыйДок.Ссылка;
				Рег.Состояние		=	Перечисления.СостоянияОплатыЗаказаПокупателя.ОплаченПолностью;
				Рег.Период			=	НовыйДок.Дата;
				Рег.Записать(Истина);
			КонецЕсли;
							
		//Марк 02.08.2023
		Иначе

			СтруктураДокумент = Рез[0];
			Документ = СтруктураДокумент.Ссылка.ПолучитьОбъект();
			
			Если СтруктураЗаказа.СтатусЗаказа = "ОТКАЗ" Тогда
				
				Документ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПокупателей.ОтмененВОфисе");
				
			КонецЕсли;
						
			Документ.товары.Очистить();
			
			//товары
			Для Ном =1 по 100 цикл
				Если СтруктураЗаказа.Свойство("НоменклатураКод"+Строка(Ном)) тогда
					НоваяСтрока	=	Документ.Товары.Добавить();
					
					НужХар		=	"";
					НужйШК		=	"";
					НужКол		=	"";
					НужЦена		=	"";
					НужСумма	=	"";
					НужПроц		=	"";   
					НужКодНом	=	"";
					
					СтруктураЗаказа.Свойство("Количество"			+	Строка(Ном),	НужКол);
					СтруктураЗаказа.Свойство("Характеристика"		+	Строка(Ном),	НужХар);
					СтруктураЗаказа.Свойство("Штрихкод"				+	Строка(Ном),	НужйШК);
					СтруктураЗаказа.Свойство("Цена"					+	Строка(Ном),	НужЦена);
					СтруктураЗаказа.Свойство("Сумма"				+	Строка(Ном),	НужСумма);
					СтруктураЗаказа.Свойство("ПроцентСкидкиНаценки"	+	Строка(Ном),	НужПроц);
					СтруктураЗаказа.Свойство("НоменклатураКод"		+	Строка(Ном),	НужКодНом); 
		
					НужЦена		=	СтрЗаменить(НужЦена,Символы.НПП,"");
					НужСумма	=	СтрЗаменить(НужСумма,Символы.НПП,"");
					НужКол		=	СтрЗаменить(НужКол,Символы.НПП,"");

					Если ЗначениеЗаполнено(НужйШК) тогда
						Запрос	=	новый запрос("ВЫБРАТЬ
						      	 	             |	Штрихкоды.Владелец КАК Владелец,
						      	 	             |	Штрихкоды.Упаковка КАК Упаковка
						      	 	             |ИЗ
						      	 	             |	РегистрСведений.Штрихкоды КАК Штрихкоды
						      	 	             |ГДЕ
						      	 	             |	Штрихкоды.Штрихкод = &Штрихкод");
						
						Запрос.УстановитьПараметр("Штрихкод",НужйШК);
						
						Рез	=	Запрос.Выполнить().Выгрузить(); 
					иначе
						Запрос	=	новый запрос("ВЫБРАТЬ
						      	 	             |	Номенклатура.Ссылка КАК Владелец
						      	 	             |ИЗ
						      	 	             |	Справочник.Номенклатура КАК Номенклатура
						      	 	             |ГДЕ
						      	 	             |	Номенклатура.Код = &Код");
						
						Запрос.УстановитьПараметр("Код",НужКодНом);
						
						Рез	=	Запрос.Выполнить().Выгрузить();	
					КонецЕсли;
					
					Если Рез.Количество() >0 тогда
						НоваяСтрока.Номенклатура		=	Рез[0].Владелец;	
						Если ЗначениеЗаполнено(НужХар) тогда
							Запрос	=	Новый запрос("ВЫБРАТЬ
							      	 	             |	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
							      	 	             |ИЗ
							      	 	             |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
							      	 	             |ГДЕ
							      	 	             |	ХарактеристикиНоменклатуры.Наименование = &Наименование
							      	 	             |	И ХарактеристикиНоменклатуры.Владелец = &Владелец");
							Запрос.УстановитьПараметр("Владелец",НоваяСтрока.Номенклатура);
							Запрос.УстановитьПараметр("Наименование",НужХар);
							Рез = Запрос.Выполнить().Выгрузить();
							
							Если Рез.Количество() >0 тогда
								НоваяСтрока.Характеристика		=	Рез[0].Ссылка;
							КонецЕсли;
						КонецЕсли;

						
						
						НоваяСтрока.Количество			=	Число(СтрЗаменить(НужКол,",","."));
						НоваяСтрока.КоличествоУпаковок	=	НоваяСтрока.Количество;
						НоваяСтрока.Цена				=	Число(СтрЗаменить(НужЦена,",","."));
						НоваяСтрока.Сумма				=	Число(СтрЗаменить(НужСумма,",","."));
						НоваяСтрока.ПроцентРучнойСкидки	=	Число(СтрЗаменить(НужПроц,",",".")); 
					КонецЕсли; 		
					
				иначе
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			Документ.ОбменДанными.Загрузка = Истина;

			Попытка
				Документ.Записать();
			Исключение
				Возврат ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли;
		
		Возврат истина;
	Исключение
		Возврат ОписаниеОшибки();	
	КонецПопытки;

КонецФункции

Функция OtmenaZakaz(вхПараметры) ЭКСПОРТ 
	Попытка
		Запрос	=	Новый запрос("ВЫБРАТЬ
		      	 	             |	ЗаказПокупателя.Ссылка КАК Ссылка
		      	 	             |ИЗ
		      	 	             |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		      	 	             |ГДЕ
		      	 	             |	ЗаказПокупателя.НомерЗаказаНаСайте = &НомерЗаказаНаСайте");
		Запрос.УстановитьПараметр("НомерЗаказаНаСайте",СокрЛП(вхПараметры.СайтНомер));
		рез = Запрос.Выполнить().Выгрузить();
		
		Если Рез.Количество() = 0 тогда  
			Возврат "Не найден заказ!";
		иначе
			Об = Рез[0].Ссылка.ПолучитьОбъект();
			Об.Номер		=	"";
			Об.Статус		=	Перечисления.СтатусыЗаказовПокупателей.ОтмененВОфисе;
			Об.Комментарий	= Об.Комментарий + " ОТМЕНЕН В ОФИСЕ";	
			Об.ОбменДанными.Загрузка = Истина;
			Об.Записать();  
		КонецЕсли;
			
		Возврат Истина;	
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;

			
КонецФункции

Функция YstanovitSnyatOflineRezhim(вхПараметры) ЭКСПОРТ
	Попытка
		Рег = РегистрыСведений.ТБК_Константы.СоздатьНаборЗаписей();
		Рег.Отбор.ИмяКонстанты.Установить("ПринудительныйОфлайнРежим");
		НоваяСтр	=	Рег.Добавить();
		НоваяСтр.ЗначениеКонстанты	=	вхПараметры.режим;
		НоваяСтр.ИмяКонстанты		=	"ПринудительныйОфлайнРежим";
		рег.Записать();	    
			
		Возврат Истина;	
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	

КонецФункции

Функция UploadPhotoTBKApplication(вхПараметры) ЭКСПОРТ
	
	Попытка
		
		СтукрутраFTP = ОбщегоНазначения.ПолучитьСтруктуруПодключенияFTP();
		Соединение = Новый FTPСоединение(СтукрутраFTP.ИмяFTPСервера, СтукрутраFTP.Порт, СтукрутраFTP.Пользователь, СтукрутраFTP.Пароль);
		
		КаталогИб = СтрокаСоединенияИнформационнойБазы();
		КаталогИб = СтрЗаменить(КаталогИб, "File=""", "");
		КаталогИб = СтрЗаменить(КаталогИб, """;", ""); 
		//Проверка существования каталога +++
		Строка_Каталог_photo = КаталогИб + "\photo";
		Строка_Каталог_chat = КаталогИб + "\photo\TBKzayavki";
		файл_Каталог_photo = Новый Файл(Строка_Каталог_photo);
		если файл_Каталог_photo.Существует() Тогда
			файл_Каталог_chat = Новый Файл(Строка_Каталог_chat);
			Если НЕ файл_Каталог_chat.Существует() Тогда
				СоздатьКаталог(Строка_Каталог_chat);	
			КонецЕсли;
		иначе
			СоздатьКаталог(Строка_Каталог_photo);
			СоздатьКаталог(Строка_Каталог_chat);
		КонецЕсли;
		//Проверка существования каталога ---
		Файл_Фотка_FTP = Соединение.НайтиФайлы(СтукрутраFTP.КаталогНаСервере + "photo/TBKzayavki/","*");
		для каждого Файл Из Файл_Фотка_FTP Цикл
			если СтрНайти(Файл.Имя, "_Shipped") тогда Продолжить; КонецЕсли;
			ЗаписьЖурналаРегистрации("Информаци" , УровеньЖурналаРегистрации.Информация, "Зашел, фото: " + Файл.Имя);
			ПутьКФайлу = ПолучитьИмяВременногоФайла(Файл.Имя);
			Соединение.Получить(Файл.ПолноеИмя, ПутьКФайлу);
			ПереместитьФайл(ПутьКФайлу, Строка_Каталог_chat + "\" + Файл.Имя); 
			Соединение.Переместить(Файл.ПолноеИмя, Файл.Путь + Файл.ИмяБезРасширения + "_Shipped" + Файл.Расширение); 
		КонецЦикла;
		Возврат Истина;
		
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки; 		
	
КонецФункции

Функция RestoringRefunds(вхПараметры) ЭКСПОРТ
	
	Попытка
		ЗаписьЖурналаРегистрации("Информация",УровеньЖурналаРегистрации.Информация,,, вхПараметры);
		НовыйЭл						=	Документы.ТБК_ЗаявкаОтМагазина.СоздатьДокумент();
		НовыйЭл.Дата				=	вхПараметры.Дата; 
		НовыйЭл.Номер				=	вхПараметры.Номер;
		НовыйЭл.Магазин				=	ОбщегоНазначения.ПолучитьСкладИзООРП();
		НовыйЭл.ВидОперации			=	Перечисления.ТБК_ВидыОперацийЗаявокОтМагазина.ВозвратТовара;
		НовыйЭл.Статус				=	вхПараметры.Статус;
		НовыйЭл.Продавец			=	Справочники.ФизическиеЛица.НайтиПоНаименованию(вхПараметры.Продавец);
		НовыйЭл.КогдаЗабрали		= 	вхПараметры.КогдаЗабрали;
		НовыйЭл.ДатаСборки			=	вхПараметры.ДатаСборки;
		НовыйЭл.ДатаСборкиФакт		=	вхПараметры.ДатаСборкиФакт;
		
		Если ЗначениеЗаполнено(вхПараметры.Проект) тогда
			НовыйЭл.Проект			=	Справочники.ТБКПроекты.НайтиПоНаименованию(вхПараметры.Проект);
			Если НовыйЭл.Проект.Пустая() тогда
				Спр					=	Справочники.ТБКПроекты.СоздатьЭлемент();
				Спр.Наименование	=	вхПараметры.Проект;
				Спр.Записать();
		        НовыйЭл.Проект		=	Спр.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		НовыйЭл.Комментарий				=	вхПараметры.Комментарий; 
		НовыйЭл.ДатаСборки				=	вхПараметры.ДатаСборки;
		НовыйЭл.Сформирован				=	Истина;
	
	
	//товары
		Для i=1 по 10000 цикл
			Если вхПараметры.Свойство("НоменклатураКод"+Строка(i)) тогда
				Количество				=	"";
				НоменклатураКод			=	"";
				Характеристика			=	"";
				КоличествоФакт			=	"";
				СрокГодности			=	"";
				ПричинаБрака			=	"";
				
				вхПараметры.Свойство("Количество"					+	Строка(i),	Количество);
				вхПараметры.Свойство("НоменклатураКод"				+	Строка(i),	НоменклатураКод);
				вхПараметры.Свойство("Характеристика"				+	Строка(i),	Характеристика);
				
				вхПараметры.Свойство("КоличествоФакт"				+	Строка(i),	КоличествоФакт); 
				вхПараметры.Свойство("СрокГодности"					+	Строка(i),	СрокГодности); 
				вхПараметры.Свойство("Характеристика"				+	Строка(i),	Характеристика); 				
				вхПараметры.Свойство("ПричинаБрака"					+	Строка(i),	ПричинаБрака); 
				
				НоменклатураСсылка		=	Справочники.Номенклатура.НайтиПоКоду(НоменклатураКод);	
				
				НужнаяХарактеристика	=	Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Если ЗначениеЗаполнено(Характеристика) тогда
					Запрос	=	Новый Запрос("ВЫБРАТЬ
					      	 	             |	ХарактеристикиНоменклатуры.Ссылка
					      	 	             |ИЗ
					      	 	             |	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
					      	 	             |ГДЕ
					      	 	             |	ХарактеристикиНоменклатуры.Владелец = &Владелец
					      	 	             |	И ХарактеристикиНоменклатуры.Наименование = &Наименование");
					Запрос.УстановитьПараметр("Владелец",НоменклатураСсылка);
					Запрос.УстановитьПараметр("Наименование",Характеристика);
					Рез = Запрос.Выполнить().Выгрузить();
					Если Рез.Количество() >0 тогда
						НужнаяХарактеристика			=	Рез[0].Ссылка;
					КонецЕсли; 	
				КонецЕсли;					
				
	       		НоваяСтрока	=	НовыйЭл.Товары.Добавить();
				НоваяСтрока.Номенклатура		=	НоменклатураСсылка;
				НоваяСтрока.Характеристика		=	НужнаяХарактеристика;
				НоваяСтрока.Количество			=	Число(Количество);
				
				НоваяСтрока.КоличествоФакт		=	Число(КоличествоФакт);
				НоваяСтрока.СрокГодности		=	Дата(СрокГодности);
				СсылкаПричинаБрака 				= 	Справочники.ТБКПричиныБрака.НайтиПоНаименованию(ПричинаБрака);
				НоваяСтрока.ПричинаБрака		=	СсылкаПричинаБрака;
				
			иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;   
		
		НовыйЭл.Записать(РежимЗаписиДокумента.Проведение);
		
		рег = РегистрыСведений.ТБК_ДанныеПоЗаявкамМагазинов.СоздатьНаборЗаписей();
		рег.Отбор.Документ.Установить(НовыйЭл.Ссылка);
		Рег.Прочитать();
		
		Если рег.Количество() <> 0 тогда	
			рег[0].Отправлен	=	Ложь;
			рег.Записать();
		КонецЕсли;		
		
		Возврат Истина;
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	

КонецФункции // ()