Функция ПолучитьВерсиюРасширения() экспорт 	
	
	результ = "";
	
	НужнаяПоз = найти(ПараметрыСеанса.ПодключенныеРасширения,")");
	результ   = Сред(ПараметрыСеанса.ПодключенныеРасширения,1,НужнаяПоз);
	результ = СтрЗаменить(результ,")","");
	результ = СтрЗаменить(результ,"(","");

	Возврат результ;
	
	//мРасширений = РасширенияКонфигурации.Получить();
	//
	//Для Каждого расширение из мРасширений Цикл
	//	результ = результ + ?(ЗначениеЗаполнено(результ),"; ","")+расширение.Имя+":"+расширение.Версия;
	//КонецЦикла;
	//
	//возврат результ;
	
КонецФункции



Функция ПолучитьМагазин() ЭКСПОРТ
	Возврат ПолучитьМагазинИзООРП();
КонецФункции



Функция ПолучитьМагазинИзООРП() ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ОтчетОРозничныхПродажах.Магазин КАК Магазин
	               |ИЗ
	               |	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	               |ГДЕ
	               |	ОтчетОРозничныхПродажах.Проведен = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОтчетОРозничныхПродажах.Дата УБЫВ";
	
	рез = Запрос.Выполнить().Выгрузить();
	
	Если рез.Количество()>0 тогда
		Возврат Рез[0].Магазин;
	иначе
		Возврат Справочники.Магазины.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Функция ПолучитьСкладИзООРП() ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ОтчетОРозничныхПродажах.Магазин.СкладПродажи КАК Склад
	               |ИЗ
	               |	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	               |ГДЕ
	               |	ОтчетОРозничныхПродажах.Проведен = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОтчетОРозничныхПродажах.Дата УБЫВ";
	
	рез = Запрос.Выполнить().Выгрузить();
	
	Если рез.Количество()>0 тогда
		Возврат Рез[0].Склад;
	иначе
		Возврат Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Функция ПолучитьКассаККМИзООРП() ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ОтчетОРозничныхПродажах.КассаККМ КАК КассаККМ
	               |ИЗ
	               |	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	               |ГДЕ
	               |	ОтчетОРозничныхПродажах.Проведен = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ОтчетОРозничныхПродажах.Дата УБЫВ";
	
	рез = Запрос.Выполнить().Выгрузить();
	
	Если рез.Количество()>0 тогда
		Возврат Рез[0].КассаККМ;
	иначе
		Возврат Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Функция ПолучитьКассуИзПКО() ЭКСПОРТ
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПриходныйКассовыйОрдер.Касса КАК Касса
	               |ИЗ
	               |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	               |ГДЕ
	               |	ПриходныйКассовыйОрдер.Проведен = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПриходныйКассовыйОрдер.Дата УБЫВ";
	
	рез = Запрос.Выполнить().Выгрузить();
	
	Если рез.Количество()>0 тогда
		Возврат Рез[0].Касса;
	иначе
		Возврат Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
КонецФункции



Функция СтруктураВjson_Общая(Значение) экспорт

	Если Значение = неопределено Тогда
		возврат "";
	КонецЕсли; 	
	
    ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);
	СтрJSON = ЗаписьJSON.Закрыть();
	
	возврат СтрJSON;

КонецФункции

Функция ПолучитьСтруктуруПодключенияFTP() экспорт
	СтруктураВозврата	=	новый Структура;
	
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	НастройкиТранспортаОбменаДанными.Корреспондент КАК Корреспондент,
	      	 	             |	НастройкиТранспортаОбменаДанными.FTPСоединениеПуть КАК FTPСоединениеПуть,
	      	 	             |	НастройкиТранспортаОбменаДанными.FTPСоединениеПользователь КАК FTPСоединениеПользователь,
	      	 	             |	НастройкиТранспортаОбменаДанными.FTPСоединениеПорт КАК FTPСоединениеПорт
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.НастройкиТранспортаОбменаДанными КАК НастройкиТранспортаОбменаДанными");
	
	Рез = запрос.Выполнить().Выгрузить();
	
	для каждого Строка из рез цикл
		Если ЗначениеЗаполнено(Строка.Корреспондент) тогда
			Если Строка.Корреспондент.пометкаУдаления тогда Продолжить; КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Строка.Корреспондент) = Тип("ПланОбменаСсылка.ОбменРозницаУправлениеТорговлей103") тогда
			Пароль			=	ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Строка.Корреспондент, "FTPСоединениеПароль");
			НужПользователь	=	Строка.FTPСоединениеПользователь;
			Порт			=	Строка.FTPСоединениеПорт;

			
			СерверИКаталогНаСервере = ОбменДаннымиСервер.FTPИмяСервераИПуть(СокрЛП(Строка.FTPСоединениеПуть));
			
			ИмяFTPСервера			= СерверИКаталогНаСервере.Сервер;
			КаталогНаСервере 		= СерверИКаталогНаСервере.Путь;
			
			СтруктураВозврата.Вставить("ИмяFTPСервера",ИмяFTPСервера);
			СтруктураВозврата.Вставить("КаталогНаСервере",КаталогНаСервере);
			СтруктураВозврата.Вставить("Пользователь",НужПользователь);
			СтруктураВозврата.Вставить("Пароль",Пароль);
			СтруктураВозврата.Вставить("Порт",Порт);
			
			Возврат СтруктураВозврата;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
			
КонецФункции


Функция ПолучитьТерминал(РабочееМесто) экспорт
	СписокУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам( , , РабочееМесто);
	
	Для каждого Строка из СписокУстройств цикл
		Если Строка.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал тогда
			
			Запрос	=	Новый запрос("ВЫБРАТЬ
			      	 	             |	ЭквайринговыеТерминалы.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
			      	 	             |ГДЕ
			      	 	             |	НЕ ЭквайринговыеТерминалы.ПометкаУдаления
			      	 	             |	И (ЭквайринговыеТерминалы.ПодключаемоеОборудование = &ПодключаемоеОборудование
			      	 	             |			ИЛИ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)");
			Запрос.УстановитьПараметр("ПодключаемоеОборудование",Строка.Ссылка);
			
			Рез = Запрос.Выполнить().Выгрузить();
			Если рез.Количество() >0 тогда
				Возврат Рез[0].Ссылка;
			иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Функция ПолучитьТЗИзМакета(ТабДок, КолонкаИндекса = 1) Экспорт
    
    ТаблицаДанных = Новый ТаблицаЗначений;
    НомерКолонки = 0;
    Пока Истина Цикл
        НомерКолонки = НомерКолонки + 1;
        ИмяКолонки = ТабДок.Область(1, НомерКолонки).Текст;
        Если ПустаяСтрока(ИмяКолонки) Тогда
            Прервать;
        КонецЕсли;        
        ТаблицаДанных.Колонки.Добавить(ИмяКолонки);
    КонецЦикла;
    
    СчетчикКолонок = НомерКолонки - 1;
    
    НомерСтроки = 1; ФлагПрерывания = Ложь;
	Если не СчетчикКолонок = 0 тогда
	    Пока Истина Цикл
	        НомерСтроки = НомерСтроки + 1;
	        Стр = ТаблицаДанных.Добавить();
	        
	        Для А = 1 ПО СчетчикКолонок Цикл
	            ТекстКолонки = ТабДок.Область(НомерСтроки, А).Текст;
	            Если ПустаяСтрока(ТекстКолонки) Тогда
	                Если А = КолонкаИндекса Тогда
	                    Флагпрерывания = Истина;
	                    ТаблицаДанных.Удалить(Стр);
	                КонецЕсли;
	            Иначе
	                Стр[А - 1] = ТекстКолонки
	            КонецЕсли;
	            
	            Если Флагпрерывания Тогда
	                Прервать
	            КонецЕсли;
	        КонецЦикла;
	        
	        Если Флагпрерывания Тогда
	            Прервать
	        КонецЕсли;
		КонецЦикла;
	КонецЕсли;
    
    Возврат ТаблицаДанных
КонецФункции

Функция jsonВСтруктура_Общая(Значение) экспорт
	Если ЗначениеЗаполнено(СокрЛП(Значение)) Тогда
		
	    ЧтениеJSON = Новый ЧтениеJSON;
	    ЧтениеJSON.УстановитьСтроку(Значение);
	    Возврат ПрочитатьJSON(ЧтениеJSON, Ложь);
		
	Иначе
		Возврат Новый Структура();
	КонецЕсли;

КонецФункции

Функция ЭтоМаркированнаяНоменклатура(Номенклатура) экспорт
	возврат Найти(Номенклатура.ВидНоменклатуры.Наименование,"Табак (х)") или Номенклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция;	
КонецФункции

Функция ПолучитьЗначениеТБККонстанты(ИмяКонстанты) экспорт
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ТБК_Константы.ЗначениеКонстанты КАК ЗначениеКонстанты
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБК_Константы КАК ТБК_Константы
	      	 	             |ГДЕ
	      	 	             |	ТБК_Константы.ИмяКонстанты = &ИмяКонстанты");
	Запрос.УстановитьПараметр("ИмяКонстанты",ИмяКонстанты);
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 1 тогда
		Возврат Рез[0].ЗначениеКонстанты;
	КонецЕсли;

	Возврат Неопределено;	
КонецФункции