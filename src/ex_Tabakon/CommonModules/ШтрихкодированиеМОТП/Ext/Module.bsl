
&Перед("ЗаполнитьДанныеНеизвестныхТабачныхПачекБезЗапросаСведенийМОТП")
Процедура ТБКЗаполнитьДанныеНеизвестныхТабачныхПачекБезЗапросаСведенийМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	//2024-09-25   
	Попытка
		Если ЗначениеЗаполнено(ПараметрыСканирования.Характеристика) тогда			
			Для каждого Строка из ДанныеПоШтрихкодам.ДанныеКодовМаркировки цикл
				Строка.Характеристика = ПараметрыСканирования.Характеристика;
			КонецЦикла; 		
		КонецЕсли; 
	Исключение
	КонецПопытки;
	//	
КонецПроцедуры
//&Вместо("ПроверитьНаОшибкиПоПравилам")
//Процедура ТБКПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
//	// Вставить содержимое метода.
//	ПродолжитьВызов(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
//	
//	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
//		И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда 
//			
//		Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
//			Если ТипЗнч(СтрокаДерева) = Тип("КлючИЗначение") Тогда
//				эл = СтрокаДерева.Значение;	
//			Иначе
//				эл = СтрокаДерева; 
//			КонецЕсли;
//			Если СтрНачинаетсяС(эл.ТекстОшибки,"ИНН владельца") Тогда
//				Сообщить(эл.ТекстОшибки);
//				ЗаполнитьЗначенияСвойств(эл, Новый Структура("ТекстОшибки,ЕстьОшибки","",Ложь));
//			КонецЕсли;
//		КонецЦикла;
//			
//	КонецЕсли;
//	ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок=ЛОЖЬ;
//	ЕстьОшибки=ЛОЖЬ;
//	
//	предидущаяХарактеристика=неопределено;
//	Для Каждого стр из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
//		
//		Если стр.Номенклатура.ВидНоменклатуры.ИспользоватьХарактеристики Тогда
//			мрц = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьМРЦ(стр.КодМаркировки);
//			
//			Если ЗначениеЗаполнено(мрц) Тогда
//				стр.Характеристика = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьХарактеристику(
//					стр.Номенклатура,
//					мрц
//				);
//				Если ДанныеПоШтрихкодам.ОбработанныеШтрихкоды[стр.КодМаркировки] <> неопределено Тогда
//					ДанныеПоШтрихкодам.ОбработанныеШтрихкоды[стр.КодМаркировки].Характеристика  = стр.Характеристика;
//				КонецЕсли;
//				
//			Иначе
//				стр.Характеристика = предидущаяХарактеристика;
//			КонецЕсли;
//			предидущаяХарактеристика = стр.Характеристика;
//			
//			//Если НЕ стр.ЭтоУпаковка Тогда
//			//	элКэш = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",стр.КодМаркировки);
//			//	Если ЗначениеЗаполнено(элКэш) Тогда					
//			//		ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
//			//		ЗаполнитьЗначенияСвойств(ДанныеНовойУпаковки, стр);
//			//		ДанныеНовойУпаковки.Штрихкод    = стр.КодМаркировки;
//			//		ДанныеНовойУпаковки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
//			//		ДанныеНовойУпаковки.Количество  = 1;	
//			//		СсылкаНаЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки);
//			//	КонецЕсли;	
//			//КонецЕсли;
//		КонецЕсли;			
//	КонецЦикла;
//	
//	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды") Тогда		
//		Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> неопределено Тогда
//			Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары <> неопределено Тогда
//				стр.Характеристика = предидущаяХарактеристика;
//			КонецЕсли;
//			
//			Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок <> неопределено Тогда
//				Для Каждого стр из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок.Строки Цикл
//					стр.Характеристика = предидущаяХарактеристика;
//				КонецЦикла;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	//Для Каждого СтрокаДерева Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок Цикл
//КонецПроцедуры


//&Вместо("ЗаполнитьВложенныеШтрихкодыПолученныеИзСервиса")
//Процедура ТБКЗаполнитьВложенныеШтрихкодыПолученныеИзСервиса(ВложенныеШтрихкоды, ТаблицаEAN, ПараметрыСканирования)
//	ПродолжитьВызов(ВложенныеШтрихкоды, ТаблицаEAN, ПараметрыСканирования);
//КонецПроцедуры


//&После("ОбработатьШтрихкодыНеизвестныхУпаковок")
//Процедура ТБКОбработатьШтрихкодыНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования)
//	Попытка
//		Если СтрДлина(ДанныеПоШтрихкодам.ДанныеКодовМаркировок[0].КодМаркировки) = 29 тогда	
//			Если ДанныеПоШтрихкодам.ТекстОшибки	=	"Запрещено запрашивать данные по неизвестным штрихкодам в МОТП." тогда
//				ДанныеПоШтрихкодам.ЕстьОшибки = ложь;
//			КонецЕсли;
//		КонецЕсли;
//	Исключение
//	КонецПопытки;
//КонецПроцедуры


//&Вместо("ДанныеНеизвестнойМаркируемойПродукции")
//Функция ТБКДанныеНеизвестнойМаркируемойПродукции(Штрихкоды, ПараметрыСканирования, ТекстОшибки) экспорт
//	// Вставить содержимое метода.
//	Результат = ПродолжитьВызов(Штрихкоды, ПараметрыСканирования, ТекстОшибки);
//	
//	Результат = ДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСтатусаМОТП(Штрихкоды, ПараметрыСканирования); // проверяем на то что это марк товар.

//	Возврат Результат;
//КонецФункции


//&Вместо("ЗаполнитьШтрихкодыПродукцииДляСопоставления")
//Процедура ТБКЗаполнитьШтрихкодыПродукцииДляСопоставления(ДанныеПоШтрихкодам)
//	
//	МассивШтрихкодовEAN = Новый Массив;
//	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
//		
//		Если Не СтрокаДанных.МаркируемаяПродукция Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		ВидыПродукцииШтрихкода = ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции.Получить(СтрокаДанных.КодМаркировки);
//		Если ВидыПродукцииШтрихкода = Перечисления.ВидыПродукцииИС.Табачная Тогда
//			
//			ШтрихкодEAN = ШтрихкодированиеМОТПКлиентСервер.EANПоКодуМаркировки(СтрокаДанных.КодМаркировки);
//			Если ЗначениеЗаполнено(ШтрихкодEAN) Тогда
//				МассивШтрихкодовEAN.Добавить(ШтрихкодEAN);
//				СтрокаДанных.EAN = ШтрихкодEAN;
//			КонецЕсли; 			  
//			
//		КонецЕсли;		
//	КонецЦикла;  
//	
//	СуществующиеШтрихкодыВРегистре = ШтрихкодированиеИС.СуществующиеВРегистреШтрихкодыEAN(МассивШтрихкодовEAN);

//	//Вик 2024-02-16 универсальные 
//	Если СуществующиеШтрихкодыВРегистре.количество()=0 и ДанныеПоШтрихкодам.ДанныеКодовМаркировок.Количество()>0 тогда		
//		Запрос	=	Новый Запрос("ВЫБРАТЬ
//		      	 	             |	УниверсальныеМарки.Номенклатура КАК Номенклатура
//		      	 	             |ИЗ
//		      	 	             |	РегистрСведений.ТБКУниверсальныеМарки КАК УниверсальныеМарки
//		      	 	             |ГДЕ
//		      	 	             |	УниверсальныеМарки.Марка Подобно &Марка");
//		Запрос.УстановитьПараметр("Марка", "%"+ДанныеПоШтрихкодам.ДанныеКодовМаркировок[0].КодМаркировки+"%");
//		
//		Если Запрос.Выполнить().Пустой() тогда
//			Запрос.УстановитьПараметр("Марка", "%" + Лев(ДанныеПоШтрихкодам.ДанныеКодовМаркировок[0].КодМаркировки,21) + "%"); 			
//		КонецЕсли;
//		
//		Рез = Запрос.Выполнить().Выбрать();
//		
//		Если Рез.Следующий() тогда
//			ДанныеПоШтрихкодам.ДанныеКодовМаркировок[0].Номенклатура	=	 Рез.Номенклатура;
//			
//			Запрос	=	Новый запрос("ВЫБРАТЬ ПЕРВЫЕ 1
//			      	 	             |	Штрихкоды.Штрихкод КАК Штрихкод
//			      	 	             |ИЗ
//			      	 	             |	РегистрСведений.Штрихкоды КАК Штрихкоды
//			      	 	             |ГДЕ
//			      	 	             |	Штрихкоды.Владелец = &Владелец");
//			Запрос.УстановитьПараметр("Владелец", Рез.Номенклатура);
//			Рез = Запрос.Выполнить().Выбрать();
//			Если Рез.Следующий() тогда
//				МассивШтрихкодовEAN = Новый Массив;
//				МассивШтрихкодовEAN.Добавить(Рез.Штрихкод);	
//				
//				ДанныеПоШтрихкодам.Вставить("ШтрихкодУниверсальнойМарки", Рез.Штрихкод);
//			КонецЕсли;				
//		КонецЕсли;
//		
//		СуществующиеШтрихкодыВРегистре = ШтрихкодированиеИС.СуществующиеВРегистреШтрихкодыEAN(МассивШтрихкодовEAN);
//	КонецЕсли;
//	//КонецВик 
//		
//	ШтрикходыДляСопоставления = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивШтрихкодовEAN, СуществующиеШтрихкодыВРегистре);
//	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления, ШтрикходыДляСопоставления);

//КонецПроцедуры

