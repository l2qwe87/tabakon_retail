
&Вместо("ДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСтатусаМОТП")
Функция ТБКДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСтатусаМОТП(КодыМаркировки, ПараметрыСканирования)
	// Вставить содержимое метода.
	Результат = ПродолжитьВызов(КодыМаркировки, ПараметрыСканирования);
	
	Для Каждого марка Из КодыМаркировки Цикл
		данные = Результат[марка];
		Если данные = неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(данные.Номенклатура) Тогда
			
			мЕАН = новый Массив();
			
			прсингМарки = ШтрихкодированиеИСВызовСервера.РазобратьКодМаркировки(марка, Перечисления.ВидыПродукцииИС.Табачная);
			
			мЕАН.Добавить(прсингМарки.СоставКодаМаркировки.EAN);
			
			ДанныеПоШтрихкодамEAN = ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN(мЕАН);
			Если ДанныеПоШтрихкодамEAN.Количество() > 0 Тогда
				данные.Номенклатура = ДанныеПоШтрихкодамEAN[0].Номенклатура;
			КонецЕсли;
		КонецЕсли;
		
		номенклатура = данные.Номенклатура;
		
		Если номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
	
			мрц = данные.МРЦ;
			данные.Характеристика = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьХарактеристику(номенклатура, мрц);
			                                           	
			элКэш = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",марка);
			Если ЗначениеЗаполнено(элКэш) Тогда
				элКэшОбъект = элКэш.ПолучитьОбъект();
				элКэшОбъект.Номенклатура = данные.Номенклатура;
				элКэшОбъект.Характеристика = данные.Характеристика;
				элКэшОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции


&Вместо("ПроверитьНаОшибкиПоПравилам")
Процедура ТБКПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	// Вставить содержимое метода.
	ПродолжитьВызов(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
		И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда 
			
		Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
			Если ТипЗнч(СтрокаДерева) = Тип("КлючИЗначение") Тогда
				эл = СтрокаДерева.Значение;	
			Иначе
				эл = СтрокаДерева; 
			КонецЕсли;
			Если СтрНачинаетсяС(эл.ТекстОшибки,"ИНН владельца") Тогда
				Сообщить(эл.ТекстОшибки);
				ЗаполнитьЗначенияСвойств(эл, Новый Структура("ТекстОшибки,ЕстьОшибки","",Ложь));
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок=ЛОЖЬ;
	ЕстьОшибки=ЛОЖЬ;
	
	предидущаяХарактеристика=неопределено;
	Для Каждого стр из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
		
		Если стр.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыВеденияДополнительныхДанныхПоНоменклатуре.ИндивидуальныеДляНоменклатуры Тогда
			мрц = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьМРЦ(стр.КодМаркировки);
			мрц = ?(ЗначениеЗаполнено(мрц),0,мрц);
			
			Если ЗначениеЗаполнено(мрц)или(мрц=0) Тогда
				стр.Характеристика = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьХарактеристику(
					стр.Номенклатура,
					мрц
				);
				Если ДанныеПоШтрихкодам.ОбработанныеШтрихкоды[стр.КодМаркировки] <> неопределено Тогда
					ДанныеПоШтрихкодам.ОбработанныеШтрихкоды[стр.КодМаркировки].Характеристика  = стр.Характеристика;
				КонецЕсли;
				
			Иначе
				стр.Характеристика = предидущаяХарактеристика;
			КонецЕсли;
			предидущаяХарактеристика = стр.Характеристика;
			
			//Если НЕ стр.ЭтоУпаковка Тогда
			//	элКэш = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода",стр.КодМаркировки);
			//	Если ЗначениеЗаполнено(элКэш) Тогда					
			//		ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
			//		ЗаполнитьЗначенияСвойств(ДанныеНовойУпаковки, стр);
			//		ДанныеНовойУпаковки.Штрихкод    = стр.КодМаркировки;
			//		ДанныеНовойУпаковки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
			//		ДанныеНовойУпаковки.Количество  = 1;	
			//		СсылкаНаЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки);
			//	КонецЕсли;	
			//КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды") Тогда		
		Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> неопределено Тогда
			Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары <> неопределено Тогда
				стр.Характеристика = предидущаяХарактеристика;
			КонецЕсли;
			
			Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок <> неопределено Тогда
				Для Каждого стр из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок.Строки Цикл
					стр.Характеристика = предидущаяХарактеристика;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Для Каждого СтрокаДерева Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок Цикл
КонецПроцедуры


&Вместо("ЗаполнитьВложенныеШтрихкодыПолученныеИзСервиса")
Процедура ТБКЗаполнитьВложенныеШтрихкодыПолученныеИзСервиса(ВложенныеШтрихкоды, ТаблицаEAN, ПараметрыСканирования)
	ПродолжитьВызов(ВложенныеШтрихкоды, ТаблицаEAN, ПараметрыСканирования);
КонецПроцедуры

