&НаСервере
Процедура ТБКСогласоватьПослеНаСервере() 

	СтруктураПодключения	=	ОбщегоНазначения.ПолучитьСтруктуруПодключенияFTP();
	Если СтруктураПодключения = Неопределено тогда
		Сообщить("Нет данных для подключения по фтп!");
	иначе
		Попытка
			КаталогНаСервере		=	СтруктураПодключения.КаталогНаСервере;  		
			Соединение = Новый FTPСоединение(СтруктураПодключения.ИмяFTPСервера, СтруктураПодключения.Порт,
										СтруктураПодключения.Пользователь, СтруктураПодключения.Пароль, , Истина);

			Результат	=	Новый Структура;
			Результат.Вставить("Статус","Согласован");
			Результат.Вставить("Комментарий",Объект.Комментарий);

			СтрJSON		=	ОбщегоНазначения.СтруктураВjson_Общая(Результат);							
			
			ВремФайл = ПолучитьИмяВременногоФайла();
			
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(СтрJSON);
			ТекстовыйДокумент.Записать(ВремФайл, КодировкаТекста.UTF8, Символы.ПС);
			
			Соединение.Записать(ВремФайл, КаталогНаСервере+"\ZAKAZ\"+СокрЛП(Объект.НомерЗаказаНаСайте)+".json");
			
			УдалитьФайлы(ВремФайл);
			
			Объект.Статус	=	ПолучитьСтатусСогласован();
			Записать();
			
			Сообщить("Выполнено успешно!");
		Исключение
			Сообщить("Не удалось подключиться!");
			Возврат
		КонецПопытки;	
	КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ТБКСогласоватьПосле(Команда)
	Если Объект.Статус	=	ПолучитьСтатусСогласован()тогда
		Сообщить("Заказ уже согласован!");
		Возврат          	
	КонецЕсли;

	
	ТекстВопроса = НСтр("ru='Заказ полностью подготовлен?'");
	ОбработчикОповещения = Новый ОписаниеОповещения("ТБКСогласовать", ЭтотОбъект);
	ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);   	


КонецПроцедуры

&НаКлиенте
Процедура ТБКСогласовать(Результат, ДополнительныеПараметры) экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТБКСогласоватьПослеНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция  ПолучитьСтатусСогласован()
	Возврат Перечисления.СтатусыЗаказовПокупателей.Согласован;
КонецФункции


&НаСервере
Процедура ТБКВыкупленПослеНаСервере()
	СтруктураПодключения	=	ОбщегоНазначения.ПолучитьСтруктуруПодключенияFTP();
	Если СтруктураПодключения = Неопределено тогда
		Сообщить("Нет данных для подключения по фтп!");
	иначе
		Попытка
			КаталогНаСервере		=	СтруктураПодключения.КаталогНаСервере;  		
			Соединение = Новый FTPСоединение(СтруктураПодключения.ИмяFTPСервера, СтруктураПодключения.Порт,
										СтруктураПодключения.Пользователь, СтруктураПодключения.Пароль, , Истина);

			Результат	=	Новый Структура;
			Результат.Вставить("Статус","Закрыт");
			Результат.Вставить("Комментарий",Объект.Комментарий);

			СтрJSON		=	ОбщегоНазначения.СтруктураВjson_Общая(Результат);							
			
			ВремФайл = ПолучитьИмяВременногоФайла();
			
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(СтрJSON);
			ТекстовыйДокумент.Записать(ВремФайл, КодировкаТекста.UTF8, Символы.ПС);
			
			Соединение.Записать(ВремФайл, КаталогНаСервере+"\ZAKAZ\"+СокрЛП(Объект.НомерЗаказаНаСайте)+".json");
			
			УдалитьФайлы(ВремФайл);
			
			Объект.Статус	=	Перечисления.СтатусыЗаказовПокупателей.Закрыт;
			Записать();
			
			Сообщить("Выполнено успешно!");
		Исключение
			Сообщить("Не удалось подключиться!");
			Возврат
		КонецПопытки;	
	КонецЕсли; 	

КонецПроцедуры


&НаКлиенте
Процедура ТБКВыкуплен(Результат, ДополнительныеПараметры) экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТБКВыкупленПослеНаСервере();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТБКВыкупленПосле(Команда)
	ТекстВопроса = НСтр("ru='Заказ полностью выкуплен?'");
	ОбработчикОповещения = Новый ОписаниеОповещения("ТБКВыкуплен", ЭтотОбъект);
	ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 

КонецПроцедуры


&НаСервере
Функция  СоздатьЧекККМ(Ссылка, СуммаНал = 0, СуммаКарта = 0)
	НовыйДокументЧек = Документы.ЧекККМ.СоздатьДокумент();
	
	НовыйДокументЧек.Дата	=	ТекущаяДата(); 
	НовыйДокументЧек.УстановитьНовыйНомер();
	
	//НовыйДокументЧек.СтатусЧекаККМ					=	Перечисления.СтатусыЧековККМ.Пробитый;
	НовыйДокументЧек.ВидОперации					=	Перечисления.ВидыОперацийЧекККМ.Продажа;
	НовыйДокументЧек.ЗаказПокупателя				=	Ссылка;
	НовыйДокументЧек.АналитикаХозяйственнойОперации	=	Справочники.АналитикаХозяйственныхОпераций.РеализацияТоваров;
	
	НужныйСклад		 = ОбщегоНазначения.ПолучитьСкладИзООРП();
	НужныйМагазин	 = ОбщегоНазначения.ПолучитьМагазинИзООРП();
	НужнаяКасса		 = ОбщегоНазначения.ПолучитьКассаККМИзООРП();

	НовыйДокументЧек.КассаККМ	=	НужнаяКасса;
	НовыйДокументЧек.Магазин	=	НужныйМагазин;

	Для каждого СтрокаТовары из Объект.Товары цикл
		НоваяСтрока = НовыйДокументЧек.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовары);	
		НоваяСтрока.Склад 		=	НужныйСклад;
		НоваяСтрока.СтавкаНДС	=	Перечисления.СтавкиНДС.БезНДС;
	КонецЦикла;         	
	
	Если СуммаКарта > 0 тогда
		ЭквайринговыйТерминал = ОбщегоНазначения.ПолучитьТерминал(Объект.РабочееМесто);
		Если ЭквайринговыйТерминал = Неопределено тогда
			Сообщить("Не найден терминал для оплаты!");
			Возврат Неопределено;
		КонецЕсли;

		
		НоваяСтрока = НовыйДокументЧек.Оплата.Добавить();
		НоваяСтрока.ВидОплаты				=	Справочники.ВидыОплатЧекаККМ.НайтиПоНаименованию("Платежная карта");
		НоваяСтрока.ЭквайринговыйТерминал	=	ЭквайринговыйТерминал;
		НоваяСтрока.Сумма					=	СуммаКарта; 
	КонецЕсли;
	
	Если СуммаНал > 0 тогда
		НоваяСтрока = НовыйДокументЧек.Оплата.Добавить();
		НоваяСтрока.ВидОплаты				=	Справочники.ВидыОплатЧекаККМ.НайтиПоНаименованию("Наличные");
		НоваяСтрока.Сумма					=	СуммаНал; 
	КонецЕсли;
	
	Попытка
		ЕстьОшибки = Ложь;
		ПроверитьДанныеГосИСЗдесь(ЕстьОшибки,НовыйДокументЧек);
		
		Если НовыйДокументЧек.ПроверитьЗаполнение() и не ЕстьОшибки Тогда
			НовыйДокументЧек.мЗакрытиеСмены	=	Истина;
			НовыйДокументЧек.Записать(РежимЗаписиДокумента.Проведение); 
		иначе
			ТекстСообщения = "Ошибка при формировании чека возврата";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;    
		КонецЕсли;
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено; 
	КонецПопытки; 
	
	Возврат НовыйДокументЧек.Ссылка;
КонецФункции


&НаКлиенте
Процедура ТБКОплатаНалПосле(Команда)
	Если Модифицированность Тогда 
		Попытка
			ПараметрыЗаписи = Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись);
			Записать(ПараметрыЗаписи); 			
	Исключение
			ТекстСообщения = НСтр("ru = 'Документ невозможно записать'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	флЕстьМарки	=	ПроверитьЕстьЛиМарки();
	Если флЕстьМарки тогда
		ТекстВопроса = НСтр("ru='В заказе присутствует маркированная продукция. Продажа возможна только через РМК. Перенести товары в РМК?'");
		ОбработчикОповещения = Новый ОписаниеОповещения("ПеренестиВРМК", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);   
	иначе
		НовыйДокументЧекККМ = СоздатьЧекККМ(Объект.Ссылка,Объект.СуммаДокумента);
	
		Если НовыйДокументЧекККМ <> Неопределено тогда
			Форма = ПолучитьФорму("Документ.ЧекККМ.Форма.ФормаДокумента", 
									Новый Структура("Ключ", НовыйДокументЧекККМ));
			Попытка						
				Форма.ВызватьПробитьЧек();  
			Исключение
				Возврат;
				//Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			Элементы.ФормаПробитьНал.Доступность   = Ложь;
			Элементы.ФормаПробитьКарта.Доступность = Ложь;
			
			ТБКВыкупленПослеНаСервере();
		КонецЕсли;

	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Функция ПроверитьЕстьЛиМарки()
	Для каждого Строка из Объект.Товары цикл
		Если Строка.Номенклатура.Видноменклатуры.наименование = "Табак (х)" тогда
			Возврат истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ложь;
КонецФункции


&НаСервереБезКонтекста
Процедура ПроверитьДанныеГосИСЗдесь(ЕстьОшибки,НужныйОбъект)
	ВестиУчетАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(НужныйОбъект.Дата);
	ВестиУчетТабачнойПродукции    = ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП");
	ВестиУчетОбувнойПродукции     = ПолучитьФункциональнуюОпцию("ВестиУчетОбувнойПродукцииИСМП");
	ВестиУчетПродукцииГИСМ        = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ");

	Если Не НужныйОбъект.ОперацияСДенежнымиСредствами 
		И (ВестиУчетАлкогольнойПродукции ИЛИ ВестиУчетТабачнойПродукции ИЛИ ВестиУчетОбувнойПродукции) Тогда
		ДанныеГосИСДостаточны = Истина;
		ПродажиСервер.ДанныеДляПробитияЧекаККМ(НужныйОбъект, ДанныеГосИСДостаточны);
		Если НЕ ДанныеГосИСДостаточны Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТБКПриОткрытииПосле(Отказ)
	УстановитьВидимостьКнопок();
КонецПроцедуры


&НаКлиенте
Процедура УстановитьВидимостьКнопок()
	флМожноПробивать = ПроверитьМожноПробивать(Объект.Ссылка);
	
	Элементы.ФормаПробитьКарта.Доступность 		=  флМожноПробивать;
	Элементы.ФормаПробитьНал.Доступность   		=  флМожноПробивать; 	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьМожноПробивать(Ссылка)
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ЧекККМ.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЧекККМ КАК ЧекККМ
	      	 	             |ГДЕ
	      	 	             |	ЧекККМ.Проведен
	      	 	             |	И ЧекККМ.ЗаказПокупателя = &ЗаказПокупателя");
	Запрос.УстановитьПараметр("ЗаказПокупателя",Ссылка);
	
	Возврат Запрос.Выполнить().Пустой(); 
КонецФункции

&НаКлиенте
Процедура ТБКОтвязатьЧекПосле(Команда)
	Пароль = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводСтроки", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещения, Пароль, "Введите пароль: "); 
КонецПроцедуры

&НаКлиенте
Процедура ВводСтроки(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если ПолученноеЗначение = "0000" тогда 
		ТБКОтвязатьЧекПослеНаСервере(Объект.Ссылка);
		УстановитьВидимостьКнопок();
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТБКОтвязатьЧекПослеНаСервере(Ссылка)
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ЧекККМ.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЧекККМ КАК ЧекККМ
	      	 	             |ГДЕ
	      	 	             |	ЧекККМ.Проведен
	      	 	             |	И ЧекККМ.ЗаказПокупателя = &ЗаказПокупателя");
	Запрос.УстановитьПараметр("ЗаказПокупателя",Ссылка);
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 тогда
		Сообщить("К этому документу нет чеков!");
	КонецЕсли;
	
	Для каждого Строка из рез цикл
		Об = Строка.Ссылка.ПолучитьОбъект();
		Об.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		Об.ДополнительныеСвойства.Вставить("ЗагрузкаДанныхИзРабочегоМеста",истина);
		Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);

		Сообщить("Выполнено успешно!");
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура ТБКОплатаКартаПосле(Команда)
	Если Модифицированность Тогда 
		Попытка
			ПараметрыЗаписи = Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись);
			Записать(ПараметрыЗаписи); 			
	Исключение
			ТекстСообщения = НСтр("ru = 'Документ невозможно записать'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	НовыйДокументЧекККМ = СоздатьЧекККМ(Объект.Ссылка,Объект.СуммаДокумента);
	
	флЕстьМарки	=	ПроверитьЕстьЛиМарки();
	Если флЕстьМарки тогда
		ТекстВопроса = НСтр("ru='В заказе присутствует маркированная продукция. Продажа возможна только через РМК. Перенести товары в РМК?'");
		ОбработчикОповещения = Новый ОписаниеОповещения("ПеренестиВРМК", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);   
	иначе  
		Если НовыйДокументЧекККМ <> Неопределено тогда
			Форма = ПолучитьФорму("Документ.ЧекККМ.Форма.ФормаДокумента", 
									Новый Структура("Ключ", НовыйДокументЧекККМ));
			Попытка						
				Форма.ВызватьПробитьЧек();  
			Исключение
				//Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			Элементы.ФормаПробитьНал.Доступность   = Ложь;
			Элементы.ФормаПробитьКарта.Доступность = Ложь;
			ТБКВыкупленПослеНаСервере();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПеренестиВРМК(Результат, ДополнительныеПараметры) экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОкнаПриложения = ПолучитьОкна();
		Для каждого ОкноПриложения Из ОкнаПриложения Цикл
			// Анализ заголовка окна
			Если ОкноПриложения.Заголовок = "" или ОкноПриложения.Заголовок = "*" Тогда
				НужныйСклад		 =	ПолучитьСклад();

				
				НайденнаяФорма = ОкноПриложения.Содержимое[0];
				НайденнаяФорма.Объект.Товары.очистить();
				
				НужныйСклад		 =	ПолучитьСклад();
				НужнаяОрг		 =	НайденнаяФорма.Объект.Организация;
				Для каждого Строка из Объект.Товары цикл
					НоваяСтрока	=	НайденнаяФорма.Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
					НоваяСтрока.Склад			=	НужныйСклад;
					НоваяСтрока.Организация		=	НужнаяОрг;
					НоваяСтрока.ЗаказПокупателя	=	Объект.Ссылка;
					НоваяСтрока.СтавкаНДС		=	ПолучитьСтавкуБезНДС();
					Если ЭтоМаркированнаяНоменклатура(НоваяСтрока.Номенклатура) тогда
						НоваяСтрока.НеобходимостьВводаАкцизнойМарки	=	истина;
						НоваяСтрока.СтатусПроверкиГосИС 			= 2;
						НоваяСтрока.ВидПродукцииИС					= ПолучитьВидТабак();
						НоваяСтрока.МаркируемаяПродукция			= Истина;  
					КонецЕсли;
				КонецЦикла;
				
				НайденнаяФорма.Активизировать();
				Возврат;			
				
			КонецЕсли;
		КонецЦикла; 
		
		ТБКВыкупленПослеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция  ПолучитьСклад()
	Возврат ОбщегоНазначения.ПолучитьСкладИзООРП();
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоМаркированнаяНоменклатура(Номенклатура)
	возврат Найти(Номенклатура.ВидНоменклатуры.Наименование,"Табак (х)");	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВидТабак()
	Возврат Перечисления.ВидыПродукцииИС.Табачная;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтавкуБезНДС()
	Возврат Перечисления.СтавкиНДС.БезНДС;
КонецФункции

