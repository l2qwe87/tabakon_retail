
#Область ОбработчикиКомандИСобытийФормы

&НаКлиенте
Процедура ТБКОплатаНалПосле(Команда)
	Если Модифицированность Тогда 
		Попытка
			ПараметрыЗаписи = Новый Структура("РежимЗаписи",РежимЗаписиДокумента.ОтменаПроведения);
			Записать(ПараметрыЗаписи);
			
			ПараметрыЗаписи = Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение);
			Записать(ПараметрыЗаписи);
		Исключение
			ТекстСообщения = НСтр("ru = 'Документ невозможно провести'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;		
		//ТекстСообщения = НСтр(ru = 'Документ изменен необходимо провести документ');
		//ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		//Возврат;
	КонецЕсли;

	НовыйДокументРКО = СоздатьРКОНаОснованииВозврата(Объект.Ссылка);
	Если НовыйДокументРКО <> Неопределено тогда
		СуммаНал = ПолучитьСуммуНал(Объект.Ссылка);
		СформироватьВозвратныйЧек(СуммаНал);
		Элементы.ФормаПробитьНал.Доступность = Ложь;
		
	иначе //Если финансовый документ был сформирован, а чек напечатать не удалось (например не была открыта смена) 			
			ТекстВопроса = НСтр("ru='Все равно распечатать чек?'");
			ОбработчикОповещения = Новый ОписаниеОповещения("СформироватьЧекПринудительно", ЭтотОбъект);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);  
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТБКОплатаКартаПосле(Команда)
	Если Модифицированность Тогда 
		Попытка
			ПараметрыЗаписи = Новый Структура("РежимЗаписи",РежимЗаписиДокумента.ОтменаПроведения);
			Записать(ПараметрыЗаписи);
			
			ПараметрыЗаписи = Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение);
			Записать(ПараметрыЗаписи);
		Исключение
			ТекстСообщения = НСтр("ru = 'Документ невозможно провести'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;		
		//ТекстСообщения = НСтр(ru = 'Документ изменен необходимо провести документ');
		//ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		//Возврат;
	КонецЕсли;

	
	Если Объект.Товары.Количество() >0 тогда
		ЧекККМ = Объект.Товары[0].ЧекККМ;
		НовыйДокументОплатаКартой = СоздатьОплатаКартойНаОснованииВозврата(Объект.Ссылка,ЧекККМ); 	
		
		Если НовыйДокументОплатаКартой <> Неопределено тогда
			Форма = ПолучитьФорму("Документ.ОплатаОтПокупателяПлатежнойКартой.Форма.ФормаДокумента", 
									Новый Структура("Ключ", НовыйДокументОплатаКартой));
			Попытка						
				Форма.ВызватьОплатитьКартой();  
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки; 
			
			ПодключитьОбработчикОжидания("ПослеПробитияПоТерминалу2",2,Ложь);
		иначе //Если финансовый документ был сформирован, а чек напечатать не удалось (например не была открыта смена)
			
			ТекстВопроса = НСтр("ru='Все равно распечатать чек?'");
			ОбработчикОповещения = Новый ОписаниеОповещения("СформироватьЧекПринудительно", ЭтотОбъект);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

			
		КонецЕсли;
		
	иначе
		ТекстСообщения = НСтр("ru = 'Не найден ЧЕК ККМ!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТБКОплатаСмешаннаяПосле(Команда)
	Если Модифицированность Тогда 
		Попытка
			ПараметрыЗаписи = Новый Структура("РежимЗаписи",РежимЗаписиДокумента.ОтменаПроведения);
			Записать(ПараметрыЗаписи);
			
			ПараметрыЗаписи = Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение);
			Записать(ПараметрыЗаписи);
		Исключение
			ТекстСообщения = НСтр("ru = 'Документ невозможно провести'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;		
		//ТекстСообщения = НСтр(ru = 'Документ изменен необходимо провести документ');
		//ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		//Возврат;
	КонецЕсли;

	
    Оповещение = Новый ОписаниеОповещения("ПослеОткрытияФормыСложнойОплаты", 
      ЭтотОбъект);
	  
	ПараметрыОткрытия = Новый Структура;  
	ПараметрыОткрытия.Вставить("СуммаВсего",СуммаВсего);
	
	Открытьформу("Документ.ВозвратТоваровОтПокупателя.Форма.ФормаСложнойОплаты",ПараметрыОткрытия,ЭтотОбъект,,,,Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопок()
	флМожноПробивать = Истина;
	
	ЧекККМ = Неопределено;
	Для каждого СтрокаЧек из Объект.Товары цикл
		ЧекККМ = СтрокаЧек.ЧекККМ;
		Если не ЧекККМ = Неопределено тогда
			СтруктураВозврата = ОпределитьТипыОплаты(СтрокаЧек.ЧекККМ);  
			Прервать; 
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураВозврата <> Неопределено тогда 
		Если СтруктураВозврата.ЕстьНал и не СтруктураВозврата.ЕстьБезНал тогда
			Элементы.ФормаПробитьНал.Видимость 	 	 = Истина;
			Элементы.ФормаПробитьКарта.Видимость 	 = Ложь;
			Элементы.ФормаПробитьСмешанная.Видимость = Ложь;
			
		ИначеЕсли не СтруктураВозврата.ЕстьНал и СтруктураВозврата.ЕстьБезНал тогда
			Элементы.ФормаПробитьНал.Видимость 	 	 = Ложь;
			Элементы.ФормаПробитьКарта.Видимость 	 = Истина;
			Элементы.ФормаПробитьСмешанная.Видимость = Ложь;
		ИначеЕсли СтруктураВозврата.ЕстьНал и СтруктураВозврата.ЕстьБезНал тогда 
			Элементы.ФормаПробитьНал.Видимость 		 = Ложь;
			Элементы.ФормаПробитьКарта.Видимость	 = Ложь;
			Элементы.ФормаПробитьСмешанная.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;

	Если не ЧекККМ = Неопределено тогда
		флМожноПробивать = ПорверитьВозможностьПробитияЧека(ЧекККМ,Объект.Ссылка);
		Элементы.ФормаПробитьКарта.Доступность 		=  флМожноПробивать;
		Элементы.ФормаПробитьНал.Доступность   		=  флМожноПробивать;
		Элементы.ФормаПробитьСмешанная.Доступность  =  флМожноПробивать;
	иначе
		Элементы.ФормаПробитьКарта.Доступность 		=  Ложь;
		Элементы.ФормаПробитьНал.Доступность   		=  Ложь;
		Элементы.ФормаПробитьСмешанная.Доступность  =  Ложь;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТБКПриОткрытииПосле(Отказ)
	УстановитьВидимостьКнопок(); 
	
	СуммаСертификата = ОбработатьПродажуПоСертификату(Объект.Товары[0].ЧекККМ);
	Если СуммаСертификата <> Неопределено тогда
		Элементы.НадписьПродажаПоСертификату.Заголовок	=	"Продажа по сертификату. Номинал: "+СуммаСертификата;	
	КонецЕсли;

КонецПроцедуры 

&НаСервереБезКонтекста
Функция  ОбработатьПродажуПоСертификату(нужЧек)  		
	Запрос	=	Новый запрос("ВЫБРАТЬ
	      	 	             |	ТБКПогашенныеСертификаты.Чек КАК Чек,
	      	 	             |	ТБКПогашенныеСертификаты.Сумма КАК Сумма
	      	 	             |ИЗ
	      	 	             |	РегистрСведений.ТБКПогашенныеСертификаты КАК ТБКПогашенныеСертификаты
	      	 	             |ГДЕ
	      	 	             |	ТБКПогашенныеСертификаты.Чек = &Чек");
	Запрос.УстановитьПараметр("Чек", нужЧек);
	Рез = Запрос.Выполнить().Выбрать();
		
	Если Рез.Следующий()>0 тогда
		Возврат Рез.Сумма;
	КонецЕсли; 

КонецФункции



&НаКлиенте
Процедура ТБКПриЗакрытииПосле(ЗавершениеРаботы)
	Если Элементы.ФормаПробитьКарта.Доступность или Элементы.ФормаПробитьНал.Доступность или Элементы.ФормаПробитьСмешанная.Доступность тогда
		Сообщить("Вы забыли распечатать чек!!!");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеПробитияПоТерминалу(Результат, ДополнительныеПараметры) экспорт //нужна в случае если захотим видеть вопрос
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СуммаНал = ПолучитьСуммуНал(Объект.Ссылка);
		СуммаКарта = ПолучитьСуммуКарта(Объект.Ссылка);
		СформироватьВозвратныйЧек(СуммаНал,СуммаКарта);
		Элементы.ФормаПробитьКарта.Доступность = Ложь;		
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПробитияПоТерминалу2() экспорт 
	
	ОплатаВыполнена = ПонятьВыполненаЛиОплата(Объект.Ссылка);
	
	Если ОплатаВыполнена тогда
		ОтключитьОбработчикОжидания("ПослеПробитияПоТерминалу2");
		
		СуммаНал = ПолучитьСуммуНал(Объект.Ссылка);
		Если СуммаНал > 0 тогда
			СуммаКарта = ПолучитьСуммуКарта(Объект.Ссылка);
			
			СформироватьВозвратныйЧек(СуммаНал,СуммаКарта);
			Элементы.ФормаПробитьСмешанная.Доступность = Ложь;	
			
		иначе
			СуммаКарта = ПолучитьСуммуКарта(Объект.Ссылка);
			СформироватьВозвратныйЧек(,СуммаКарта);
			Элементы.ФормаПробитьКарта.Доступность = Ложь;	
			Элементы.ФормаПробитьСмешанная.Доступность = Ложь;
		КонецЕсли;
				
		//ТекстВопроса = НСтр("ru='Возврат по терминалу прошел успешно?'");
		//ОбработчикОповещения = Новый ОписаниеОповещения("ПослеПробитияПоТерминалу", ЭтотОбъект);
		//ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
КонецПроцедуры  

&НаСервереБезКонтекста
Функция  ПонятьВыполненаЛиОплата(Ссылка)

	Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	ОплатаОтПокупателяПлатежнойКартой.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
	      	 	             |ГДЕ
	      	 	             |	ОплатаОтПокупателяПлатежнойКартой.Проведен
	      	 	             |	И ОплатаОтПокупателяПлатежнойКартой.ДокументОснование = &ДокументОснование
	      	 	             |	И ОплатаОтПокупателяПлатежнойКартой.ОплатаВыполнена");
	Запрос.УстановитьПараметр("ДокументОснование",Ссылка);

	Возврат не Запрос.Выполнить().Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСуммуНал(Ссылка)
	
	Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	      	 	             |	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента
	      	 	             |ИЗ
	      	 	             |	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	      	 	             |ГДЕ
	      	 	             |	РасходныйКассовыйОрдер.Проведен
	      	 	             |	И РасходныйКассовыйОрдер.ДокументОснование = &ДокументОснование");
	Запрос.УстановитьПараметр("ДокументОснование",Ссылка);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() >0 тогда
		Возврат Рез[0].СуммаДокумента;
	иначе
		Возврат 0;
	КонецЕсли; 	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСуммуКарта(Ссылка)
	
	Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	ОплатаОтПокупателяПлатежнойКартой.Ссылка КАК Ссылка,
	      	 	             |	ОплатаОтПокупателяПлатежнойКартой.СуммаДокумента КАК СуммаДокумента
	      	 	             |ИЗ
	      	 	             |	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
	      	 	             |ГДЕ
	      	 	             |	ОплатаОтПокупателяПлатежнойКартой.Проведен
	      	 	             |	И ОплатаОтПокупателяПлатежнойКартой.ДокументОснование = &ДокументОснование");
	Запрос.УстановитьПараметр("ДокументОснование",Ссылка);
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() >0 тогда
		Возврат Рез[0].СуммаДокумента;
	иначе
		Возврат 0;
	КонецЕсли; 	
КонецФункции


&НаСервереБезКонтекста
Функция  СоздатьРКОНаОснованииВозврата(Ссылка, СуммаНал = 0)
	Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	РасходныйКассовыйОрдер.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	      	 	             |ГДЕ
	      	 	             |	РасходныйКассовыйОрдер.Проведен
	      	 	             |	И РасходныйКассовыйОрдер.ДокументОснование = &ДокументОснование");
	Запрос.УстановитьПараметр("ДокументОснование",Ссылка);
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() >0 тогда
		ТекстСообщения = "По данному возврату уже существует РКО: "+Рез[0].Ссылка;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	
	СтатьяВозврата	=	Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Возврат оплаты покупателю");
	
	НовыйДокументРКО = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	НовыйДокументРКО.Заполнить(Ссылка);
	
	НовыйДокументРКО.Дата	=	ТекущаяДата(); 
	НовыйДокументРКО.УстановитьНовыйНомер();
	
	Если СуммаНал = 0 тогда
		НовыйДокументРКО.СуммаДокумента = Ссылка.СуммаДокумента;
	иначе
		НовыйДокументРКО.СуммаДокумента = СуммаНал;
	КонецЕсли;
	
	Для каждого Строка из НовыйДокументРКО.РасшифровкаПлатежа цикл
		Строка.СтатьяДвиженияДенежныхСредств	=	СтатьяВозврата;
		Строка.Сумма							=	НовыйДокументРКО.СуммаДокумента;
	КонецЦикла; 
	
	Попытка
		НовыйДокументРКО.Записать(РежимЗаписиДокумента.Проведение);
		
		Об	=	Ссылка.ПолучитьОбъект();
		Об.Комментарий	=	НовыйДокументРКО.Ссылка.УникальныйИдентификатор();
		Об.Записать();
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено; 
	КонецПопытки; 
	
	Возврат НовыйДокументРКО.Ссылка;	
КонецФункции

&НаСервереБезКонтекста
Функция  СоздатьОплатаКартойНаОснованииВозврата(Ссылка,ЧекККМ,СуммаКарта = 0)
	Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	      	 	             |	ОплатаОтПокупателяПлатежнойКартой.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ОплатаОтПокупателяПлатежнойКартой КАК ОплатаОтПокупателяПлатежнойКартой
	      	 	             |ГДЕ
	      	 	             |	ОплатаОтПокупателяПлатежнойКартой.Проведен
	      	 	             |	И ОплатаОтПокупателяПлатежнойКартой.ДокументОснование = &ДокументОснование");
	Запрос.УстановитьПараметр("ДокументОснование",Ссылка);
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() >0 тогда
		
		Если Рез[0].Ссылка.ОплатаВыполнена тогда
			ТекстСообщения = "По данному возврату уже существует документ: "+Рез[0].Ссылка;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);  
			Возврат Неопределено;
		иначе
			Возврат Рез[0].Ссылка; 
		КонецЕсли;

	КонецЕсли;
	
	
	СтатьяВозврата	=	Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Возврат оплаты покупателю");
	
	НовыйДокументОплатаКартой = Документы.ОплатаОтПокупателяПлатежнойКартой.СоздатьДокумент();
	НовыйДокументОплатаКартой.Заполнить(Ссылка);
	
	НовыйДокументОплатаКартой.Дата	=	ТекущаяДата(); 
	НовыйДокументОплатаКартой.УстановитьНовыйНомер();
	НовыйДокументОплатаКартой.ДокументОснование = Ссылка;
	Если СуммаКарта = 0 тогда
		НовыйДокументОплатаКартой.СуммаДокумента	= Ссылка.СуммаДокумента;
	иначе
		НовыйДокументОплатаКартой.СуммаДокумента	= СуммаКарта;
	КонецЕсли;
	
	Для каждого Строка из НовыйДокументОплатаКартой.РасшифровкаПлатежа цикл
		Строка.СтатьяДвиженияДенежныхСредств	=	СтатьяВозврата;
		Строка.Сумма							=	НовыйДокументОплатаКартой.СуммаДокумента;
	КонецЦикла;
	
	Для каждого СтрокаОплата из ЧекККМ.Оплата цикл
		НовыйДокументОплатаКартой.ВидОплаты				=	СтрокаОплата.ВидОплаты;
		НовыйДокументОплатаКартой.ЭквайринговыйТерминал	=	СтрокаОплата.ЭквайринговыйТерминал;
		НовыйДокументОплатаКартой.Эквайрер				=	СтрокаОплата.ЭквайринговыйТерминал.Эквайрер;
		Прервать;				
	КонецЦикла; 
	
	
	Попытка
		НовыйДокументОплатаКартой.Записать(РежимЗаписиДокумента.Проведение); 
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено; 
	КонецПопытки; 
	
	Возврат НовыйДокументОплатаКартой.Ссылка;	
КонецФункции

&НаКлиенте
Процедура СформироватьВозвратныйЧек(СуммаНал = 0, СуммаКарта = 0)
	Если Объект.Товары.Количество() >0 тогда
		ЧекККМ = Объект.Товары[0].ЧекККМ;
		Если ЗначениеЗаполнено(ЧекККМ) тогда
			
			ОписаниеОшибки = "";
			флВсеХорошо = ПроверкаВозможностиВозвратаНаККТ(СуммаНал, ОписаниеОшибки);
			Если не флВсеХорошо тогда
				Сообщить(ОписаниеОшибки);
				Возврат;	
			КонецЕсли;
			
			НовыйДокументЧекККМ = СоздатьЧекККМВозврата(Объект.Ссылка,ЧекККМ, СуммаНал, СуммаКарта);
			
			Если НовыйДокументЧекККМ <> Неопределено тогда
				Форма = ПолучитьФорму("Документ.ЧекККМ.Форма.ФормаДокумента", 
										Новый Структура("Ключ", НовыйДокументЧекККМ));
				Попытка						
					Форма.ВызватьПробитьЧек();  
				Исключение
					//Сообщить(ОписаниеОшибки());
				КонецПопытки;					
			КонецЕсли;

		иначе
			ТекстСообщения = НСтр("ru = 'Не заполнен чек в строке 1!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	иначе
		ТекстСообщения = НСтр("ru = 'Не найден ЧЕК ККМ!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция  СоздатьЧекККМВозврата(Ссылка,ЧекККМ, СуммаНал = 0, СуммаКарта = 0)
	
	НовыйДокументЧек = Документы.ЧекККМ.СоздатьДокумент();
	НовыйДокументЧек.Заполнить(ЧекККМ);
	
	НовыйДокументЧек.Дата	=	ТекущаяДата(); 
	НовыйДокументЧек.УстановитьНовыйНомер();
	
	НовыйДокументЧек.СтатусЧекаККМ			=	Перечисления.СтатусыЧековККМ.Архивный;
	НовыйДокументЧек.ВидОперации			=	Перечисления.ВидыОперацийЧекККМ.Возврат;
	НовыйДокументЧек.ЧекККМПродажа			=	ЧекККМ;
	НовыйДокументЧек.ВозвратОтПокупателя 	= 	Ссылка;
	
	НовыйДокументЧек.Товары.Очистить();
	НовыйДокументЧек.Оплата.Очистить();
	
	Для каждого СтрокаТовары из Ссылка.Товары цикл
		Если СтрДлина(СтрокаТовары.Штрихкод) >14 и ЗначениеЗаполнено(СтрокаТовары.Характеристика) тогда
			Сообщить("Нельзя возвращать сигареты!");
			Возврат Неопределено;
		КонецЕсли;
		
		Если СтрДлина(СтрокаТовары.Штрихкод) >14 и Найти(СтрокаТовары.Номенклатура.ПолныйКод(),"Ю2-00025964") тогда
			Сообщить("Нельзя возвращать стики!");
			Возврат Неопределено;
		КонецЕсли;

		
		НоваяСтрока = НовыйДокументЧек.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовары);	
		НоваяСтрока.Склад = Ссылка.Склад;
		
		Если СтрДлина(СтрокаТовары.Штрихкод) >14 и не ЗначениеЗаполнено(СтрокаТовары.Характеристика) тогда // Возврат маркируемой продукции, кроме сигарет.
			НоваяСтрока.КлючСвязи			=	СтрокаТовары.НомерСтроки;

			НоваяСтрокаМарка	=	НовыйДокументЧек.АкцизныеМарки.Добавить();
			НоваяСтрокаМарка.АкцизнаяМарка		=	СтрокаТовары.Штрихкод;
			НоваяСтрокаМарка.КлючСвязи			=	СтрокаТовары.НомерСтроки;
			НоваяСтрокаМарка.КодАкцизнойМарки	=	СтрокаТовары.Штрихкод;
			НоваяСтрокаМарка.ШтрихкодУпаковки	=	СтрокаТовары.Штрихкод;
						
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаКарта > 0 тогда
		ЭквайринговыйТерминал = Неопределено;
		Для каждого СтрокаОплата из ЧекККМ.Оплата цикл
			ЭквайринговыйТерминал = СтрокаОплата.ЭквайринговыйТерминал;
			Если ЗначениеЗаполнено(ЭквайринговыйТерминал) тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрока = НовыйДокументЧек.Оплата.Добавить();
		НоваяСтрока.ВидОплаты				=	Справочники.ВидыОплатЧекаККМ.НайтиПоНаименованию("Платежная карта");
		НоваяСтрока.ЭквайринговыйТерминал	=	ЭквайринговыйТерминал;
		НоваяСтрока.Сумма					=	СуммаКарта; 
	КонецЕсли;
	
	Если СуммаНал > 0 тогда
		НоваяСтрока = НовыйДокументЧек.Оплата.Добавить();
		НоваяСтрока.ВидОплаты				=	Справочники.ВидыОплатЧекаККМ.НайтиПоНаименованию("Наличные");
		НоваяСтрока.Сумма					=	СуммаНал; 
	КонецЕсли;
	
	Попытка
		ЕстьОшибки = Ложь;
		ПроверитьДанныеГосИСЗдесь(ЕстьОшибки,НовыйДокументЧек);
		
		Если НовыйДокументЧек.ПроверитьЗаполнение() и не ЕстьОшибки Тогда
			НовыйДокументЧек.мЗакрытиеСмены	=	Истина;
			НовыйДокументЧек.Записать(РежимЗаписиДокумента.Проведение); 
			
			//2022-08-03
			Запрос	=	Новый запрос("ВЫБРАТЬ
			      	 	             |	ТБК_ИсторияПокупокРозница.Чек КАК Чек,
			      	 	             |	ТБК_ИсторияПокупокРозница.IDКлиента КАК IDКлиента,
			      	 	             |	ТБК_ИсторияПокупокРозница.флНадоНачислить КАК флНадоНачислить
			      	 	             |ИЗ
			      	 	             |	РегистрСведений.ТБК_ИсторияПокупокРозница КАК ТБК_ИсторияПокупокРозница
			      	 	             |ГДЕ
			      	 	             |	ТБК_ИсторияПокупокРозница.Чек = &Чек");
			Запрос.УстановитьПараметр("Чек",НовыйДокументЧек.ЧекККМПродажа);
			Рез = Запрос.Выполнить().Выгрузить();
			Если Рез.Количество()>0 тогда
				Рег 							= РегистрыСведений.ТБК_ИсторияПокупокРозница.СоздатьМенеджерЗаписи();
				Рег.IDКлиента					=	Рез[0].IDКлиента;
				Рег.ВидОперации					=	НовыйДокументЧек.ВидОперации;
				Рег.Чек     					=	НовыйДокументЧек.Ссылка;
				Рег.Дата						=	ТекущаяДата();
				Рег.Товары						=	Новый ХранилищеЗначения(НовыйДокументЧек.Товары.Выгрузить());
				Рег.Сумма						=	НовыйДокументЧек.СуммаДокумента;
				Рег.флНадоНачислить				=	Рез[0].флНадоНачислить;
				
				Для каждого СтрокаТовар из Ссылка.Товары цикл
					Рег.КоличествоСписанныхБаллов	=	Рег.КоличествоСписанныхБаллов + СтрокаТовар.ТБК_КоличествоБаллов;	
				КонецЦикла;

				Рег.Записать();
			КонецЕсли; 	
			//
		иначе
			ТекстСообщения = "Ошибка при формировании чека возврата";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;    
		КонецЕсли;
	Исключение
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено; 
	КонецПопытки; 
	
	Возврат НовыйДокументЧек.Ссылка;	
КонецФункции

&НаКлиенте
Процедура ПослеОткрытияФормыСложнойОплаты(Результат, Параметры) экспорт
	СуммаНал   = СтруктураСумм.СуммаНал;
	СуммаКарта = СтруктураСумм.СуммаКарта;
		
	Если СуммаНал > 0 тогда 
		НовыйДокументРКО = СоздатьРКОНаОснованииВозврата(Объект.Ссылка,СуммаНал);
		Если не СуммаКарта > 0 тогда
			
			Если НовыйДокументРКО <> Неопределено тогда
				СформироватьВозвратныйЧек(СуммаНал);
				Элементы.ФормаПробитьСмешанная.Доступность = Ложь;
				Возврат;
			ИначеЕсли не СуммаКарта > 0 тогда  //Если финансовый документ был сформирован, а чек напечатать не удалось (например не была открыта смена)			
				ТекстВопроса = НСтр("ru='Все равно распечатать чек?'");
				ОбработчикОповещения = Новый ОписаниеОповещения("СформироватьЧекПринудительно", ЭтотОбъект);
				ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);  
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если СуммаКарта > 0 тогда
		
		Если Объект.Товары.Количество() >0 тогда
			ЧекККМ = Объект.Товары[0].ЧекККМ;
			НовыйДокументОплатаКартой = СоздатьОплатаКартойНаОснованииВозврата(Объект.Ссылка,ЧекККМ, СуммаКарта);
			
			Если НовыйДокументОплатаКартой <> Неопределено тогда   					
				
				Форма = ПолучитьФорму("Документ.ОплатаОтПокупателяПлатежнойКартой.Форма.ФормаДокумента", 
										Новый Структура("Ключ", НовыйДокументОплатаКартой));
				Попытка						
					Форма.ВызватьОплатитьКартой();  
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки; 
				
				ПодключитьОбработчикОжидания("ПослеПробитияПоТерминалу2",2,Ложь);
			иначе //Если финансовый документ был сформирован, а чек напечатать не удалось (например не была открыта смена)
			
				ТекстВопроса = НСтр("ru='Все равно распечатать чек?'");
				ОбработчикОповещения = Новый ОписаниеОповещения("СформироватьЧекПринудительно", ЭтотОбъект);
				ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);   				
			КонецЕсли;

		иначе
			ТекстСообщения = НСтр("ru = 'Не найден ЧЕК ККМ!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;  	
	КонецЕсли;
  
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьТипыОплаты(ЧекККМ)
	ЕстьНал    = Ложь;
	ЕстьБезНал = Ложь;
	НаличныеСсылка 	  = Справочники.ВидыОплатЧекаККМ.НайтиПоНаименованию("Наличные");

	Для каждого СтрокаОплата из ЧекККМ.Оплата цикл
		Если СтрокаОплата.ВидОплаты = НаличныеСсылка тогда
			ЕстьНал    = истина;
		иначе
			ЕстьБезНал = истина;
		КонецЕсли;
	КонецЦикла; 
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьНал",ЕстьНал);
	СтруктураВозврата.Вставить("ЕстьБезНал",ЕстьБезНал);
	
	Возврат СтруктураВозврата;
КонецФункции

&НаСервереБезКонтекста
Функция  ПорверитьВозможностьПробитияЧека(ЧекККМ,Ссылка);  
	Запрос	=	новый Запрос("ВЫБРАТЬ
	      	 	             |	ЧекККМ.ЧекККМПродажа КАК ЧекККМПродажа,
	      	 	             |	ЧекККМ.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЧекККМ КАК ЧекККМ
	      	 	             |ГДЕ
	      	 	             |	ЧекККМ.ЧекККМПродажа = &ЧекККМПродажа
	      	 	             |	И ЧекККМ.ВозвратОтПокупателя = &ВозвратОтПокупателя");
	Запрос.УстановитьПараметр("ЧекККМПродажа",ЧекККМ);
	Запрос.УстановитьПараметр("ВозвратОтПокупателя",Ссылка);
	
	Возврат Запрос.Выполнить().Пустой();
КонецФункции


&НаСервереБезКонтекста
Процедура ПроверитьДанныеГосИСЗдесь(ЕстьОшибки,НужныйОбъект)
	ВестиУчетАлкогольнойПродукции = ИнтеграцияЕГАИСРТ.НужноРаботатьСЕГАИС(НужныйОбъект.Дата);
	ВестиУчетТабачнойПродукции    = ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП");
	ВестиУчетОбувнойПродукции     = ПолучитьФункциональнуюОпцию("ВестиУчетОбувнойПродукцииИСМП");
	ВестиУчетПродукцииГИСМ        = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ");

	Если Не НужныйОбъект.ОперацияСДенежнымиСредствами 
		И (ВестиУчетАлкогольнойПродукции ИЛИ ВестиУчетТабачнойПродукции ИЛИ ВестиУчетОбувнойПродукции) Тогда
		ДанныеГосИСДостаточны = Истина;
		ПродажиСервер.ДанныеДляПробитияЧекаККМ(НужныйОбъект, ДанныеГосИСДостаточны);
		Если НЕ ДанныеГосИСДостаточны Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЧекПринудительно(Результат, ДополнительныеПараметры) экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СуммаНал = ПолучитьСуммуНал(Объект.Ссылка);
		СуммаКарта = ПолучитьСуммуКарта(Объект.Ссылка);
		СформироватьВозвратныйЧек(СуммаНал,СуммаКарта);  
		
		Элементы.ФормаПробитьНал.Доступность = Ложь;
		Элементы.ФормаПробитьКарта.Доступность = Ложь;
		Элементы.ФормаПробитьСмешанная.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТБКОтвязатьЧекПослеНаСервере(Ссылка)
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ЧекККМ.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ЧекККМ КАК ЧекККМ
	      	 	             |ГДЕ
	      	 	             |	ЧекККМ.Проведен
	      	 	             |	И ЧекККМ.ВозвратОтПокупателя = &ВозвратОтПокупателя");
	Запрос.УстановитьПараметр("ВозвратОтПокупателя",Ссылка);
	
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() = 0 тогда
		Сообщить("К этому документу нет чеков возврата!");
	КонецЕсли;
	
	Для каждого Строка из рез цикл
		Об = Строка.Ссылка.ПолучитьОбъект();
		Об.ВозвратОтПокупателя = Документы.ВозвратТоваровОтПокупателя.ПустаяСсылка();
		Об.ДополнительныеСвойства.Вставить("ЗагрузкаДанныхИзРабочегоМеста",истина);
		Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);

		Сообщить("Выполнено успешно!");
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ТБКОтвязатьЧекПосле(Команда)
	Пароль = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводСтроки", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещения, Пароль, "Введите пароль: "); 
КонецПроцедуры

&НаКлиенте
Процедура ВводСтроки(ПолученноеЗначение, ПереданныеПараметры) Экспорт
	Если ПолученноеЗначение = "0000" тогда 
		ТБКОтвязатьЧекПослеНаСервере(Объект.Ссылка);
		УстановитьВидимостьКнопок();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Функция  ПроверкаВозможностиВозвратаНаККТ(СуммаНал,ОписаниеОшибки)
	//Проверка наличности в кассе
	Если СуммаНал > 0 тогда
		СуммаККТ = МенеджерОборудованияКлиент.ПолучитьСуммуККТ();
		Если СуммаККТ <> Неопределено тогда
			Если СуммаНал > СуммаККТ тогда
				ОписаниеОшибки = "Не достаточно денег в ККТ";
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат истина;
	
КонецФункции

&НаКлиенте
Процедура ТБКDebug_ОбработатьМаркуПосле(Команда)
	ДанныеШтрихкода = Новый Структура;
	ДанныеШтрихкода.Вставить("Количество", 1);
	ДанныеШтрихкода.Вставить("Штрихкод"  , ЭтаФорма.Debug_Марка);
	
	ОбработатьКодМаркировки(ДанныеШтрихкода);

КонецПроцедуры

#КонецОбласти 


