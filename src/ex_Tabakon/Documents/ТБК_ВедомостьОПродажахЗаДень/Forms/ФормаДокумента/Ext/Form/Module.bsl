&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		 
		РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КассыККМ.Ссылка КАК КассаККМ,
		               |	КассыККМ.Магазин КАК Магазин,
		               |	КассыККМ.Магазин.СкладПродажи КАК Склад
		               |ИЗ
		               |	Справочник.КассыККМ КАК КассыККМ
		               |ГДЕ
		               |	КассыККМ.РабочееМесто = &РабочееМесто
		               |	И КассыККМ.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("РабочееМесто",РабочееМесто);
		
		//ПараметрыКассыККМ       = ЗначениеНастроекВызовСервера.ПараметрыКассыККМ(КассаККМ);
		Рез = запрос.Выполнить().Выгрузить();
		Если рез.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(Объект,рез[0]);
		иначеЕсли рез.Количество() > 1 Тогда
			ЗаполнитьЗначенияСвойств(Объект,рез[0],"Магазин,Склад");
		КонецЕсли;
		
		Попытка
			Если ЗначениеЗаполнено(Параметры.КассаККМ) Тогда
				Объект.КассаККМ = Параметры.КассаККМ; 
			КонецЕсли;
		Исключение
		КонецПопытки;
	
	КонецЕсли;
	
	СуммаВыемки = 0;
	Для Каждого стр из Объект.ВыемкаДенежныхСредств Цикл
		СуммаВыемки = СуммаВыемки + стр.Сумма;
	КонецЦикла;
	
	
	//из стаорой розницы
	СписокКонтрагентов = Новый массив;
	//СписокКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("Корунд"));
	СписокКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("СТОУН , ООО"));  //ЛК Андрей. Попросили заменить Корунда на Стоуна
	//СписокКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоКоду("000000127"));  // НЧАН исправил на СНС Экспресс , ООО // НайтиПоНаименованию("СНС Северо-Запад ООО"));
	//СписокКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("СНС Северо-Запад ООО"));
	СписокКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("СНС Северо-Запад ООО"));
	
	
	Элементы.ОплатаПоставщикуКонтрагент.СписокВыбора.ЗагрузитьЗначения(СписокКонтрагентов);
	
	Если НЕ ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		Сообщить("Кажите Кассу ККМ");	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Заполнить(неопределено);
	КонецЕсли;
	
	ОбновитьЗаголовок_ПродавцыПодробно();
КонецПроцедуры

&НаКлиенте
Процедура ВыемкаПодробно(Команда)
	// Вставить содержимое обработчика.
	Элементы.ВыемкаДенежныхСредств.Видимость = НЕ Элементы.ВыемкаДенежныхСредств.Видимость; 
КонецПроцедуры

&НаКлиенте
Процедура ПродажиПодробно(Команда)
	Элементы.ОтчетыОРозничныхПродажах.Видимость = НЕ Элементы.ОтчетыОРозничныхПродажах.Видимость; 
КонецПроцедуры


&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьОтчетОПродажах();
	
	
	ЗаполнитьВыемку();
	СуммаВыемки = 0;
	Для Каждого стр из Объект.ВыемкаДенежныхСредств Цикл
		Если НЕ ЗначениеЗаполнено(стр.ПКО) Тогда
			
			СтруктураОснования = Новый Структура;
			СтруктураОснования.Вставить("ДокументОснования", стр.Выемка);
			СтруктураОснования.Вставить("Касса", Объект.КассаККМ);
			
			//СоздатьПКО_ВыручкаНаличка(1,СтруктураОснования);
			стр.ПКО = СоздатьПКО_ВыручкаНаличка(
				Объект.Дата,
				Объект.КассаККМ, 
				стр.Выемка,
				стр.Сумма, 
				Объект.ВыручкаЗаСменуПоКассе_Комментарий);
			//стр.ПКО = нПКО.Ссылка;
		КонецЕсли;
		СуммаВыемки = СуммаВыемки + стр.Сумма;
	КонецЦикла;
	
	ЗаполнитьВыемку();
	
	ЗаполнитьРасчетныеДанные();
	
	ЗаполнитьПродавцов();
	ОбновитьЗаголовок_ПродавцыПодробно();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	// Вставить содержимое обработчика.	
	
КонецПроцедуры


Функция ЗаполнитьВыемку()
	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "";

	Запрос.УстановитьПараметр("ДатаН",НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("КассаККМ",Объект.КассаККМ);
	Запрос.УстановитьПараметр("Неучтенка", ПолучитьСтатьяДДСНеучтенка());
	
	
	Запрос .Текст = "ВЫБРАТЬ
	                |	док.Ссылка КАК Выемка,
	                |	док.СуммаДокумента КАК Сумма,
	                |	ПКО.Ссылка КАК ПКО
	                |ИЗ
	                |	Документ.ВыемкаДенежныхСредствИзКассыККМ КАК док
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер КАК ПКО
	                |		ПО (ПКО.ДокументОснование = док.Ссылка)
	                |			И (НЕ ПКО.ПометкаУдаления)
	                |			И (ПКО.Приложение <> &Неучтенка)
	                |ГДЕ
	                |	док.Проведен = ИСТИНА
	                |	И док.Дата >= &ДатаН
	                |	И док.Дата <= &ДатаК
	                |	И док.КассаККМ = &КассаККМ
	                |	И док.СуммаДокумента <> 0";
	
	
	Объект.ВыемкаДенежныхСредств.Очистить();
	Объект.ВыемкаДенежныхСредств.Загрузить(Запрос.Выполнить().Выгрузить());
	
	
	
КонецФункции

Функция ЗаполнитьОтчетОПродажах()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "";
	               
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтчетОРозничныхПродажах.Ссылка КАК ОтчетОРозничныхПродажах,
	               |	ОтчетОРозничныхПродажах.СуммаДокумента КАК СуммаДокумента,
	               |	ОтчетОРозничныхПродажах.СуммаВозвратов - (-ПоБанку.Возврат) КАК ВозвратОтПокупателяНал,
	               |	ОтчетОРозничныхПродажах.СуммаОплатыНаличных КАК ОплатаНаличными,
	               |	ПоБанку.Оплата КАК ОплатаПоБанковскимКартам,
	               |	(-ПоБанку.Возврат) КАК ВозвратОтПокупателяБезНал
	               |ИЗ
	               |	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ОплатаПоБанку.Ссылка КАК Ссылка,
	               |			СУММА(ВЫБОР
	               |					КОГДА ОплатаПоБанку.Сумма > 0
	               |						ТОГДА ОплатаПоБанку.Сумма
	               |					ИНАЧЕ 0
	               |				КОНЕЦ) КАК Оплата,
	               |			СУММА(ВЫБОР
	               |					КОГДА ОплатаПоБанку.Сумма < 0
	               |						ТОГДА ОплатаПоБанку.Сумма
	               |					ИНАЧЕ 0
	               |				КОНЕЦ) КАК Возврат
	               |		ИЗ
	               |			Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОплатаПоБанку
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ОплатаПоБанку.Ссылка) КАК ПоБанку
	               |		ПО (ПоБанку.Ссылка = ОтчетОРозничныхПродажах.Ссылка)
	               |ГДЕ
	               |	ОтчетОРозничныхПродажах.Проведен = ИСТИНА
	               |	И ОтчетОРозничныхПродажах.Дата >= &ДатаН
	               |	И ОтчетОРозничныхПродажах.Дата <= &ДатаК
	               |	И ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ";
	
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("КассаККМ",Объект.КассаККМ);
	
	Объект.ОтчетыОРозничныхПродажах.Очистить();
	
	отчетыПоПродажам = Запрос.Выполнить().Выгрузить();
	Объект.ОтчетыОРозничныхПродажах.Загрузить(отчетыПоПродажам);
	
	///////////
	/// Возврат от покупателя

	Запрос.Текст="ВЫБРАТЬ
	             |	ISNULL(СУММА(ISNULL(ВозвратТоваровОтПокупателя.СуммаДокумента,0)),0) КАК СуммаВозврата
	             |ИЗ
	             |	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	             |ГДЕ
	             |	ВозвратТоваровОтПокупателя.Проведен = ИСТИНА
	             |	И ВозвратТоваровОтПокупателя.Дата >= &ДатаН
	             |	И ВозвратТоваровОтПокупателя.Дата <= &ДатаК
	             |	И ВозвратТоваровОтПокупателя.КассаККМ = &КассаККМ";
	
	Рез = Запрос.Выполнить().Выбрать();
	возвратОтПокупателяНеСегодня = 0;
	Если Рез.Следующий() Тогда
		возвратОтПокупателяНеСегодня = рез.СуммаВозврата
	КонецЕсли;
	

	
	
	отчетыПоПродажам.Свернуть("","СуммаДокумента,ВозвратОтПокупателяНал,ОплатаНаличными,ОплатаПоБанковскимКартам,ВозвратОтПокупателяБезНал");
	
	
	Если отчетыПоПродажам.Количество() = 1 Тогда
		ЗаполнитьЗначенияСвойств(Объект, отчетыПоПродажам[0],"ВозвратОтПокупателяНал,ОплатаНаличными,ОплатаПоБанковскимКартам,ВозвратОтПокупателяБезНал");
		
		Объект.ВозвратОтПокупателяНал = Объект.ВозвратОтПокупателяНал + возвратОтПокупателяНеСегодня;
		Объект.ВыручкаЗаСменуПоКассе = 
			Объект.ОплатаНаличными -Объект.ВозвратОтПокупателяНал 
		   +Объект.ОплатаПоБанковскимКартам - Объект.ВозвратОтПокупателяБезНал
		;
	КонецЕсли;

	
КонецФункции

&НаСервереБезконтекста
Функция СоздатьПКО_ВыручкаНаличка(дата,кассаККМ, выемка, сумма, комментарий)
	
	док = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	док.Касса = ПолучитьКассу(кассаККМ);
	док.Организация = док.Касса.Владелец;
	док.СуммаДокумента = сумма;
	док.Дата = дата;
	
	док.Комментарий = комментарий;
	//док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы;
	док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ;
	док.КассаККМ = КассаККМ;
	док.ДокументОснование = Выемка;
	
	док.Приложение=ПолучитьСтатьяДДСНал();
		
	стр = док.РасшифровкаПлатежа.Добавить();
	стр.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Прочие доходы");
	стр.Сумма = сумма;
	
	док.Записать(РежимЗаписиДокумента.Запись);
	
	возврат док.Ссылка;
КонецФункции

//&НаКлиенте
//Процедура СоздатьПКО_ВыручкаНаличка(ХозяйственнаяОперацияИндекс, Основание = Неопределено)
//	
//	СтруктураПараметры = Новый Структура;
//	
//	СтруктураПараметры.Вставить("Основание", Основание);
//	
//	
//	нФорма = ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры);
//	
//	нФорма.Объект.Касса = ПолучитьКассу(Объект.КассаККМ);
//	нФорма.Объект.Дата = Объект.Дата;
//	нФорма.Объект.Приложение="1.1 Торговая розничная выручка - НАЛ";
//	нФорма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
//	нФорма.Закрыть();
//	//нФорма.Открыть();
//	
//КонецПроцедуры

&НаСервереБезконтекста
Функция ПолучитьКассу(кассаККМ)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Кассы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы
	               |ГДЕ
	               |	Кассы.КассаККМ = &КассаККМ";
	
	
	Запрос.УстановитьПараметр("КассаККМ",кассаККМ);
	рез = Запрос.Выполнить().Выбрать();
	Если рез.Следующий() Тогда
		Возврат рез.Ссылка;
	КонецЕсли;
КонецФУнкции




&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Вставить содержимое обработчика.
	
	ПровестиДокумент(Объект.РасходыОтдела_РКО, Объект.КассаККМ);
	ПровестиДокумент(Объект.ВедомостьПродажНеУчтено_ПКО, Объект.КассаККМ);
	
	Для Каждого стр из Объект.ВыемкаДенежныхСредств Цикл
		ПровестиДокумент(стр.ПКО, Объект.КассаККМ);
	КонецЦикла;
	
	Для Каждого стр из Объект.ОплатаПоставщику Цикл
		ПровестиДокумент(стр.РКО, Объект.КассаККМ);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	
	////////////    СоздатьРКО_Поставщику
	Для Каждого стр из Объект.ОплатаПоставщику Цикл
		Если НЕ ЗначениеЗаполнено(стр.РКО) Тогда
			стр.РКО = СоздатьРКО_Поставщику(Объект.Дата,Объект.КассаККМ, стр.Контрагент, стр.Сумма);
		Иначе
			ИзменитьСуммуКассовогоОрдера(стр.РКО, стр.Сумма);
		КонецЕсли;
	КонецЦикла;
	
	
	////////////    РасходыОтдела_РКО
	Если ЗначениеЗаполнено(Объект.РасходыОтдела) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.РасходыОтдела_РКО) Тогда
			Объект.РасходыОтдела_РКО = СоздатьРКО_Прочие(Объект.Дата,Объект.КассаККМ, объект.РасходыОтдела, объект.РасходыОтдела_Комментарий);
		Иначе
			ИзменитьСуммуКассовогоОрдера(Объект.РасходыОтдела_РКО,объект.РасходыОтдела);	
		КонецЕсли;
	КонецЕсли;
	
	//Вик 2020_08_06
	////////////    ЗП_Продавца
	Если ЗначениеЗаполнено(Объект.ЗП_Продавца) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ЗП_Продавца_РКО) Тогда
			Объект.ЗП_Продавца_РКО = СоздатьРКО_ЗП_Продавца(Объект.Дата,Объект.КассаККМ, Объект.ЗП_Продавца, Объект.ЗП_Продаца_Комментарий);
		Иначе
			ИзменитьСуммуКассовогоОрдера(Объект.ЗП_Продавца_РКО,Объект.ЗП_Продавца);	
		КонецЕсли;
	КонецЕсли;
	//КонецВик

	
	
	////////////	ПКО Неучтен
	Если ЗначениеЗаполнено(Объект.ВедомостьПродажНеУчтено) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВедомостьПродажНеУчтено_ПКО) Тогда
			Если Объект.ВыемкаДенежныхСредств.Количество() = 0 Тогда
				ВызватьИсключение "По Кассе ККМ "+Объект.КассаККМ+" нету зарегестрированнйо выемки, ПКО(не учтено) привязывается к выемке.";
			КонецЕсли;
			
			Объект.ВедомостьПродажНеУчтено_ПКО = СоздатьПКО_Прочие(
				Объект.Дата,
				Объект.КассаККМ, 
				Объект.ВыемкаДенежныхСредств[0].Выемка,
				объект.ВедомостьПродажНеУчтено, 
				объект.ВедомостьПродажнеНеУчтено_Комментарий);
		Иначе
			ИзменитьСуммуКассовогоОрдера(Объект.ВедомостьПродажНеУчтено_ПКО,объект.ВедомостьПродажНеУчтено);	
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Продавцы.Количество() = 0 тогда
		Сообщить("Не заполнены продавцы!",СтатусСообщения.Важное);		
		Отказ = Истина;
	КонецЕсли;
	
	Для каждого Строка из Объект.Продавцы цикл
		Если не ЗначениеЗаполнено(Строка.Продавец) тогда
			
			Индекс = Объект.Продавцы.Индекс(Строка);
            Сообщение = Новый СообщениеПользователю;
            Сообщение.Текст = "Не заполнен Продавец";
            Сообщение.Поле = "Объект.Продавцы["+Индекс+"].Продавец";
            Сообщение.Сообщить();
			
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаСервереБезконтекста
Функция ИзменитьСуммуКассовогоОрдера(ссылка, сумма)
	
	Если ссылка.СуммаДокумента <> сумма Тогда
		док = ссылка.ПолучитьОбъект();
		Если ЛОЖЬ Тогда док = Документы.РасходныйКассовыйОрдер.СоздатьДокумент(); КонецЕсли;
		док.СуммаДокумента = сумма;
		Если док.РасшифровкаПлатежа.Количество() > 0 Тогда
			док.РасшифровкаПлатежа[0].Сумма = сумма;
		КонецЕсли;
		
		режимЗаписи = РежимЗаписиДокумента.Запись;
		Если док.Проведен Тогда
			режимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
		док.Записать(режимЗаписи);
	КонецЕсли;
	
КонецФУнкции

&НаСервереБезконтекста
Функция СоздатьРКО_Поставщику(дата,кассаККМ, контрагент, сумма)
	
	док = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	док.Касса = ПолучитьКассу(кассаККМ);
	док.Организация = док.Касса.Владелец;
	док.СуммаДокумента = сумма;
	док.Дата = дата;
	
	док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	док.Контрагент = контрагент;
	
	док.Приложение=ПолучитьСтатьяДДСОплатаПоставщику();
		
	стр = док.РасшифровкаПлатежа.Добавить();
	стр.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Прочие расходы");
	стр.Сумма = сумма;
	
	док.Записать(РежимЗаписиДокумента.Запись);
	
	возврат док.Ссылка;
КонецФункции


&НаСервереБезконтекста
Функция СоздатьРКО_Прочие(дата,кассаККМ, сумма, комментарий)
	
	док = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	док.Касса = ПолучитьКассу(кассаККМ);
	док.Организация = док.Касса.Владелец;
	док.СуммаДокумента = сумма;
	док.Дата = дата;
	
	док.Комментарий = комментарий;
	док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы;
		
	стр = док.РасшифровкаПлатежа.Добавить();
	стр.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Оплата поставщику");
	стр.Сумма = сумма;
	
	док.Записать(РежимЗаписиДокумента.Запись);
	
	возврат док.Ссылка;
КонецФункции

&НаСервереБезконтекста
Функция СоздатьРКО_ЗП_Продавца(дата,кассаККМ, сумма, комментарий)
	
	док = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	док.Касса = ПолучитьКассу(кассаККМ);
	док.Организация = док.Касса.Владелец;
	док.СуммаДокумента = сумма;
	док.Дата = дата;
	док.Приложение =  "2.2.1 ЗП";
	
	док.Комментарий = комментарий;
	док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы;
		
	стр = док.РасшифровкаПлатежа.Добавить();
	стр.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Оплата поставщику");
	стр.Сумма = сумма;
	
	док.Записать(РежимЗаписиДокумента.Запись);
	
	возврат док.Ссылка;
КонецФункции

&НаСервереБезконтекста
Функция СоздатьПКО_Прочие(дата,кассаККМ, выемка, сумма, комментарий)
	
	док = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	док.Касса = ПолучитьКассу(кассаККМ);
	док.Организация = док.Касса.Владелец;
	док.СуммаДокумента = сумма;
	док.Дата = дата;
	
	док.Комментарий = комментарий;
	//док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы;
	док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ;
	док.КассаККМ = КассаККМ;
	док.ДокументОснование = Выемка;
	
	док.Приложение=ПолучитьСтатьяДДСНеучтенка();
		
	стр = док.РасшифровкаПлатежа.Добавить();
	стр.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Прочие доходы");
	стр.Сумма = сумма;
	
	док.Записать(РежимЗаписиДокумента.Запись);
	
	возврат док.Ссылка;
КонецФункции

&НаСервереБезконтекста
Функция ПолучитьСтатьяДДСНеучтенка()
	Возврат Документы.ТБК_ВедомостьОПродажахЗаДень.ПолучитьСтатьяДДСНеучтенка();
КонецФункции

&НаСервереБезконтекста
Функция ПолучитьСтатьяДДСОплатаПоставщику()
	Возврат Документы.ТБК_ВедомостьОПродажахЗаДень.ПолучитьСтатьяДДСОплатаПоставщику();
КонецФункции

&НаСервереБезконтекста
Функция ПолучитьСтатьяДДСНал()
	Возврат Документы.ТБК_ВедомостьОПродажахЗаДень.ПолучитьСтатьяДДСНал();
КонецФункции


&НаСервереБезконтекста
Функция ПровестиДокумент(Ссылка, кассаККМ)
	
	Если ЛОЖЬ Тогда
		кассаККМ = Справочники.КассыККМ.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ссылка) И (НЕ Ссылка.ПометкаУдаления) Тогда
		об = Ссылка.ПолучитьОбъект();
		
		Если НЕ ЗначениеЗаполнено(об.Организация) Тогда
			об.Организация = кассаККМ.Владелец;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(об.Организация) Тогда
			об.Организация = кассаККМ.Владелец;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(об.Касса) Тогда
			об.Касса = ПолучитьКассу(кассаККМ);
		КонецЕсли;
		
		об.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
КонецФУнкции

&НаСервереБезконтекста
Функция СоздатьВыемкуНаСервере(отчетОРознПродажах, суммаВыемки)
	// Вставить содержимое обработчика.
	док =Документы.ВыемкаДенежныхСредствИзКассыККМ.СоздатьДокумент();
	
	док.СуммаДокумента = суммаВыемки;
	
	док.ОтчетОРозничныхПродажах = отчетОРознПродажах;
	
	ЗаполнитьЗначенияСвойств(док, док.ОтчетОРозничныхПродажах, "Дата, Организация,КассаККМ, Магазин");
	док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствИзКассыККМ;
	
	док.Записать(РежимЗаписиДокумента.Проведение);

	возврат док.Ссылка;
КонецФункции


&НаКлиенте
Функция СоздатьВыемку_ПослеЗакрытия(_Результат, _Параметры) экспорт
	отч = Элементы.ОтчетыОРозничныхПродажах.ТекущиеДанные.ОтчетОРозничныхПродажах;
	СоздатьВыемкуНаСервере(отч, _Результат);
	
	Заполнить(неопределено);
конецФункции

&НаКлиенте
Процедура СоздатьВыемку(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СоздатьВыемку_ПослеЗакрытия",ЭтотОбъект);
 
    ПоказатьВводЗначения(Оповещение, , "Введите значение", "Число");
КонецПроцедуры


&НаКлиенте
Функция ЗаполнитьРасчетныеДанные()
	Обновить_НаличныеКСдаче();
КонецФункции

&НаКлиенте
Функция Обновить_НаличныеКСдаче()
	Объект.НаличныеКСдаче = 0
		+Объект.ВыручкаЗаСменуПоКассе        //1
		+Объект.ВедомостьПродажНеУчтено      //2
		-Объект.ОплатаПоБанковскимКартам     //3
		-Объект.ВозвратОтПокупателяНал       //4
		-Объект.РасходыОтдела			     //5
		-Объект.ЗП_Продавца				     //6
КонецФункции


&НаКлиенте
Процедура ВедомостьПродажНеУчтеноПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ЗаполнитьРасчетныеДанные();
КонецПроцедуры


&НаКлиенте
Процедура РасходыОтделаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ЗаполнитьРасчетныеДанные();
КонецПроцедуры


&НаКлиенте
Процедура ЗП_продавцаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ЗаполнитьРасчетныеДанные();
КонецПроцедуры


&НаКлиенте
Процедура ОплатаПоставщикуПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ЗаполнитьРасчетныеДанные();
КонецПроцедуры


&НаКлиенте
Процедура ПродавцыПодробно(Команда)
	Элементы.Продавцы.Видимость = НЕ Элементы.Продавцы.Видимость; 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПродавцов()
	Если Объект.Продавцы.Количество() = 0 тогда
		Для каждого СтрокаООРП из Объект.ОтчетыОРозничныхПродажах цикл
			Запрос	=	Новый Запрос("ВЫБРАТЬ
			      	 	             |	ОтчетОРозничныхПродажахТовары.Продавец КАК Продавец,
			      	 	             |	ВЫБОР
			      	 	             |		КОГДА ОтчетОРозничныхПродажахТовары.Продавец = ОтчетОРозничныхПродажахТовары.Ссылка.Ответственный.ФизическоеЛицо
			      	 	             |			ТОГДА ИСТИНА
			      	 	             |		ИНАЧЕ ЛОЖЬ
			      	 	             |	КОНЕЦ КАК ЭтоГлавныйПродавец
			      	 	             |ИЗ
			      	 	             |	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
			      	 	             |ГДЕ
			      	 	             |	ОтчетОРозничныхПродажахТовары.Ссылка = &Ссылка
			      	 	             |
			      	 	             |СГРУППИРОВАТЬ ПО
			      	 	             |	ОтчетОРозничныхПродажахТовары.Продавец,
			      	 	             |	ВЫБОР
			      	 	             |		КОГДА ОтчетОРозничныхПродажахТовары.Продавец = ОтчетОРозничныхПродажахТовары.Ссылка.Ответственный.ФизическоеЛицо
			      	 	             |			ТОГДА ИСТИНА
			      	 	             |		ИНАЧЕ ЛОЖЬ
			      	 	             |	КОНЕЦ");
			Запрос.УстановитьПараметр("Ссылка",СтрокаООРП.ОтчетОРозничныхПродажах);
			
			Рез = Запрос.Выполнить().Выгрузить();
			Для каждого СтрокаРез из Рез цикл
				НоваяСтрока = Объект.Продавцы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРез);
			КонецЦикла;
		КонецЦикла;		
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПродавцыПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ОбновитьЗаголовок_ПродавцыПодробно();
КонецПроцедуры

&НаКлиенте
Функция ОбновитьЗаголовок_ПродавцыПодробно()
	//Элементы.ПродавцыПодробно.Заголовок = "Продавцы подробно";
	Элементы.ПродавцыПодробно.Заголовок = "";
	
	
	п_основной = "";
	п_второй = "";
	Для каждого стр из Объект.Продавцы Цикл
		Если стр.ЭтоГлавныйПродавец Тогда
			п_основной = п_основной + ?(ЗначениеЗаполнено(п_основной)," ","") +стр.Продавец;
		Иначе
			п_второй = п_второй + ?(ЗначениеЗаполнено(п_второй)," ","") +стр.Продавец;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПродавцыПодробно.Заголовок = Элементы.ПродавцыПодробно.Заголовок+ " (ОСН) - "+п_основной;
	Элементы.ПродавцыПодробно.Заголовок = Элементы.ПродавцыПодробно.Заголовок+ Символы.ПС + " (ВТОРОЙ) - "+п_второй;
КонецФункции

