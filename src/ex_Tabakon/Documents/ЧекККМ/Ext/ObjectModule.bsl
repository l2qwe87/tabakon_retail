
&После("ПередЗаписью")
Процедура ТБКПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//костыль
	Если не отказ тогда
		Для каждого Строка из Товары цикл
			Если Не ЗначениеЗаполнено(Строка.Продавец) тогда
				Строка.Продавец	=	Пользователи.ТекущийПользователь().ФизическоеЛицо;
			КонецЕсли;
		КонецЦикла;
		
		//2024-05-24 Проставляем продавцов
		Если КоличествоОсновныхПродавцов = 0 Тогда
			//1 находим смену
			Запрос	=	Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			      	 	             |	ТБКСменыСотрудников.КассоваяСмена КАК КассоваяСмена
			      	 	             |ИЗ
			      	 	             |	РегистрСведений.ТБКСменыСотрудников КАК ТБКСменыСотрудников
			      	 	             |ГДЕ
			      	 	             |	ТБКСменыСотрудников.КассоваяСмена.Статус = &Статус
			      	 	             |	И ТБКСменыСотрудников.КассоваяСмена.КассаККМ = &КассаККМ
			      	 	             |
			      	 	             |УПОРЯДОЧИТЬ ПО
			      	 	             |	ТБКСменыСотрудников.КассоваяСмена.Дата УБЫВ");
			Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыКассовойСмены.Открыта);
			Запрос.УстановитьПараметр("КассаККМ",	КассаККМ);
			Рез = Запрос.Выполнить().Выбрать();
			Если Рез.Следующий()  тогда	
				//2 находим продавцов по смене
				Запрос	=	Новый Запрос("ВЫБРАТЬ
				      	 	             |	ТБКСменыСотрудников.Продавец КАК Продавец,
				      	 	             |	ТБКСменыСотрудников.ТипПродавца КАК ТипПродавца
				      	 	             |ИЗ
				      	 	             |	РегистрСведений.ТБКСменыСотрудников КАК ТБКСменыСотрудников
				      	 	             |ГДЕ
				      	 	             |	ТБКСменыСотрудников.КассоваяСмена = &КассоваяСмена");
				Запрос.УстановитьПараметр("КассоваяСмена", Рез.КассоваяСмена);
				Рез1 = запрос.Выполнить().Выбрать();
				КоличествоОсновныхПродавцов	=	0;
				
				//3 получаем двух продавцов если есть и считаем количетсво основных
				Продавец1	=	Неопределено;
				Продавец2	=	Неопределено;
				
				Пока рез1.Следующий()  Цикл
					 
					Если Продавец <> Рез1.Продавец Тогда
						
						Если Продавец1 = Неопределено и Продавец1<>Рез1.Продавец Тогда
							Продавец1	=	Рез1.Продавец; 
						иначе
						    Продавец2	=	Рез1.Продавец;
						КонецЕсли;
						
					КонецЕсли; 
					
					
					Если Рез1.ТипПродавца = Перечисления.ТБКТипыПродавцов.ОсновнойПродавец Тогда
						КоличествоОсновныхПродавцов	=	КоличествоОсновныхПродавцов + 1;					
					КонецЕсли; 
					
				КонецЦикла; 
				
				//проставляем в товары продавцов
				Для каждого Строка Из Товары Цикл
					Строка.Продавец1 = Продавец1;
					Строка.Продавец2 = Продавец2;
				КонецЦикла; 
				
			КонецЕсли;		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Комментарий	=	"Перепроведен автоматически2" тогда отказ = ложь; КонецЕсли; // удалить после проведения чеков за май
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура ТБКОбработкаПроведения(Отказ, РежимПроведения)
	
	Если не Отказ тогда    
		//Фокусную мотивацию - исключил, т.к. планы по ней ставятся 2-3 числа, и в таком случае пришлось быь перепроводить все чеки
		Эл	=	Справочники.ТБКОкладыПремииИПроцентыНоваяМотивация.НайтиПоНаименованию(Строка(НачалоМесяца(дата)));
		Если Эл.Пустая() тогда 		
			РассчтатьСуммыПремийСтараяМотивация();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&После("ПриЗаписи")
Процедура ТБКПриЗаписи(Отказ)
	
	Если не Отказ тогда
		//Вик 2024-04-25 //вернуть уценку при возврате
		Если ВидОперации	=	Перечисления.ВидыОперацийЧекККМ.Возврат тогда
			Запрос	=	Новый Запрос("ВЫБРАТЬ
			      	 	             |	ТБКУценка_Новая.Чек КАК Чек,
			      	 	             |	ТБКУценка_Новая.Номенклатура КАК Номенклатура,
			      	 	             |	ТБКУценка_Новая.Код КАК Код,
			      	 	             |	ТБКУценка_Новая.ПроцентСкидки КАК ПроцентСкидки,
			      	 	             |	ТБКУценка_Новая.ПричинаУценки КАК ПричинаУценки,
			      	 	             |	ТБКУценка_Новая.флОтправленВУт КАК флОтправленВУт,
			      	 	             |	ТБКУценка_Новая.СуммаСкидки КАК СуммаСкидки
			      	 	             |ИЗ
			      	 	             |	РегистрСведений.ТБКУценка_Новая КАК ТБКУценка_Новая
			      	 	             |ГДЕ
			      	 	             |	ТБКУценка_Новая.Чек = &Чек");
			Запрос.УстановитьПараметр("Чек", ЧекККМПродажа);
			Рез = Запрос.Выполнить().Выбрать();
			Пока Рез.Следующий() цикл
				Рег = РегистрыСведений.ТБКУценка_Новая.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Рег, Рез);
				рег.Чек = Ссылка;
				Рег.Записать();
			КонецЦикла;				
		КонецЕсли;
		//		
	КонецЕсли;
	
КонецПроцедуры


Процедура РассчтатьСуммыПремийСтараяМотивация()
	Запрос	=	Новый Запрос("ВЫБРАТЬ
      	 	             |	ТБКГруппыИПроцентыДляПремийОбщаяМотивацияСрезПоследних.Процент КАК Процент,
      	 	             |	ТБКГруппыИПроцентыДляПремийОбщаяМотивацияСрезПоследних.ТипГруппы КАК ТипГруппы,
      	 	             |	ТБКГруппыИПроцентыДляПремийОбщаяМотивацияСрезПоследних.Номенклатура КАК Номенклатура
      	 	             |ПОМЕСТИТЬ Группы
      	 	             |ИЗ
      	 	             |	РегистрСведений.ТБКГруппыИПроцентыДляПремийОбщаяМотивация.СрезПоследних(&Дата, ) КАК ТБКГруппыИПроцентыДляПремийОбщаяМотивацияСрезПоследних
      	 	             |;
      	 	             |
      	 	             |////////////////////////////////////////////////////////////////////////////////
      	 	             |ВЫБРАТЬ
      	 	             |	Товары.Номенклатура КАК Номен,
      	 	             |	Товары.Сумма КАК Сумма,
      	 	             |	Товары.КоличествоУпаковок КАК Количество,
      	 	             |	Товары.Продавец КАК Продавец
      	 	             |ПОМЕСТИТЬ Товары
      	 	             |ИЗ
      	 	             |	&Товары КАК Товары
      	 	             |;
      	 	             |
      	 	             |////////////////////////////////////////////////////////////////////////////////
      	 	             |ВЫБРАТЬ
      	 	             |	Номенклатура.Родитель КАК Родитель,
      	 	             |	Номенклатура.Родитель.Родитель КАК РодительРодитель,
      	 	             |	Номенклатура.Родитель.Родитель.Родитель КАК РодительРодительРодитель,
      	 	             |	Номенклатура.Родитель.Родитель.Родитель.Родитель КАК РодительРодительРодительРодитель,
      	 	             |	Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель КАК РодительРодительРодительРодительРодитель,
      	 	             |	Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель КАК РодительРодительРодительРодительРодительРодитель,
      	 	             |	Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель КАК РодительРодительРодительРодительРодительРодительРодитель,
      	 	             |	Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель КАК РодительРодительРодительРодительРодительРодительРодительРодитель,
      	 	             |	Номенклатура.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель КАК РодительРодительРодительРодительРодительРодительРодительРодительРодитель,
      	 	             |	Товары.Номен КАК Номен,
      	 	             |	Товары.Сумма КАК Сумма,
      	 	             |	Товары.Продавец КАК Продавец,
      	 	             |	Товары.Количество КАК Количество
      	 	             |ПОМЕСТИТЬ НоменклатураИерархия
      	 	             |ИЗ
      	 	             |	Товары КАК Товары
      	 	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
      	 	             |		ПО Товары.Номен = Номенклатура.Ссылка
      	 	             |;
      	 	             |
      	 	             |////////////////////////////////////////////////////////////////////////////////
      	 	             |ВЫБРАТЬ
      	 	             |	ВЫБОР
      	 	             |		КОГДА Группы.ТипГруппы ЕСТЬ NULL
      	 	             |			ТОГДА Группы.Номенклатура
      	 	             |		ИНАЧЕ Группы.ТипГруппы
      	 	             |	КОНЕЦ КАК ТипГруппы,
      	 	             |	НоменклатураИерархия.Продавец КАК Продавец,
      	 	             |	НоменклатураИерархия.Сумма / 100 * Группы.Процент КАК Премия
      	 	             |ПОМЕСТИТЬ Итог
      	 	             |ИЗ
      	 	             |	Группы КАК Группы
      	 	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураИерархия КАК НоменклатураИерархия
      	 	             |		ПО (Группы.Номенклатура = НоменклатураИерархия.Номен
      	 	             |				ИЛИ Группы.Номенклатура = НоменклатураИерархия.Родитель
      	 	             |				ИЛИ Группы.Номенклатура = НоменклатураИерархия.РодительРодитель
      	 	             |				ИЛИ Группы.Номенклатура = НоменклатураИерархия.РодительРодительРодитель
      	 	             |				ИЛИ Группы.Номенклатура = НоменклатураИерархия.РодительРодительРодительРодитель
      	 	             |				ИЛИ Группы.Номенклатура = НоменклатураИерархия.РодительРодительРодительРодительРодитель
      	 	             |				ИЛИ Группы.Номенклатура = НоменклатураИерархия.РодительРодительРодительРодительРодительРодитель
      	 	             |				ИЛИ Группы.Номенклатура = НоменклатураИерархия.РодительРодительРодительРодительРодительРодительРодитель
      	 	             |				ИЛИ Группы.Номенклатура = НоменклатураИерархия.РодительРодительРодительРодительРодительРодительРодительРодитель
      	 	             |				ИЛИ Группы.Номенклатура = НоменклатураИерархия.РодительРодительРодительРодительРодительРодительРодительРодительРодитель)
      	 	             |;
      	 	             |
      	 	             |////////////////////////////////////////////////////////////////////////////////
      	 	             |ВЫБРАТЬ
      	 	             |	Итог.ТипГруппы КАК ТипГруппы,
      	 	             |	Итог.Продавец КАК Продавец,
      	 	             |	СУММА(Итог.Премия) КАК Премия
      	 	             |ИЗ
      	 	             |	Итог КАК Итог
      	 	             |
      	 	             |СГРУППИРОВАТЬ ПО
      	 	             |	Итог.ТипГруппы,
      	 	             |	Итог.Продавец");

	Запрос.УстановитьПараметр("Дата",МоментВремени());	
	
	Если ВидОперации	=	Перечисления.ВидыОперацийЧекККМ.Продажа тогда  
		Запрос.УстановитьПараметр("НачалоМесяца",НачалоМесяца(Дата));	
		Запрос.УстановитьПараметр("КонецМесяца",КонецМесяца(Дата));	
	иначе
		Запрос.УстановитьПараметр("НачалоМесяца",НачалоМесяца(ЧекККМПродажа.Дата));	
		Запрос.УстановитьПараметр("КонецМесяца",КонецМесяца(ЧекККМПродажа.Дата));	
	КонецЕсли;

	//Учет БК
	ЗапросИскл	=	Новый Запрос("ВЫБРАТЬ
	          	 	             |	СоставГруппДляПроцентов_ИсключенияСрезПоследних.Номенклатура.Код КАК НоменклатураКод
	          	 	             |ИЗ
	          	 	             |	РегистрСведений.ТБКСоставГруппДляПроцентов_Исключения.СрезПоследних КАК СоставГруппДляПроцентов_ИсключенияСрезПоследних");
	РезИскл	=	ЗапросИскл.Выполнить().Выгрузить().ВыгрузитьКолонку("НоменклатураКод");
	
	
	КопияТовары	=	Товары.Выгрузить().Скопировать();
	Для каждого СтрокаТовары из КопияТовары цикл
		
		Если Найти(СтрокаТовары.Номенклатура.Наименование, " БК") тогда
			СтрокаТовары.Номенклатура	=	Справочники.Номенклатура.НайтиПоНаименованию(СтрЗаменить(СтрокаТовары.Номенклатура.Наименование, " БК",""));
		КонецЕсли;
		
		//учет исключений
		ПК	=	СтрокаТовары.Номенклатура.ПолныйКод();
		Для каждого СтрокаИскл из РезИскл цикл
			Если Найти(ПК, СтрокаИскл) тогда
				СтрокаТовары.сумма = 0;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		//

	КонецЦикла;
	//
	

	
	Запрос.УстановитьПараметр("Товары", КопияТовары);
	Рез = Запрос.Выполнить().Выбрать();
	
	Движения.ТБКПремииПоЧекам.Записывать = Истина;
	Движения.ТБКПремииПоЧекам.Очистить();
	
	Пока Рез.Следующий() цикл
		Движение = Движения.ТБКПремииПоЧекам.Добавить();
		Движение.Период 		= Дата;
		Движение.Группа 		= Рез.ТипГруппы;
		Движение.Продавец		= Рез.Продавец;
		Если ВидОперации	=	Перечисления.ВидыОперацийЧекККМ.Продажа тогда
			Движение.Сумма			= Рез.Премия; 
		иначе
			Движение.Сумма			= -Рез.Премия; 
		КонецЕсли;
		
	КонецЦикла;   
	
КонецПроцедуры
