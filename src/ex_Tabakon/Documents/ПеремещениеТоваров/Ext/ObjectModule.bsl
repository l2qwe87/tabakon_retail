
&После("ПриЗаписи")
Процедура ТБКПриЗаписи(Отказ)
	
	//Марк 2025-01-25
	////исправление <Объект не найден> +++ 
	//МассивНеНайденныхСсылок = Новый Массив;
	//мСоответствиеИдентификаторовТипов = Неопределено;
	//
	//Для каждого Строка Из Товары Цикл 
	//	
	//	Если НЕ Строка.Номенклатура.Пустая() И Найти(Строка(Строка.Номенклатура), "<Объект не найден>") Тогда
	//		Если Строка.Номенклатура.ПолучитьОбъект() = Неопределено Тогда
	//			МассивНеНайденныхСсылок.Добавить(ОбщегоНазначения.РасшифровкаПредставленияБитойСсылки(Строка(Строка.Номенклатура), мСоответствиеИдентификаторовТипов));	
	//		КонецЕсли;
	//	КонецЕсли;  
	//	
	//	Если НЕ Строка.Характеристика.Пустая() И Найти(Строка(Строка.Характеристика), "<Объект не найден>") Тогда
	//		Если Строка.Характеристика.ПолучитьОбъект() = Неопределено Тогда
	//			МассивНеНайденныхСсылок.Добавить(ОбщегоНазначения.РасшифровкаПредставленияБитойСсылки(Строка(Строка.Характеристика), мСоответствиеИдентификаторовТипов));		
	//		КонецЕсли;	
	//	КонецЕсли;
	//	
	//	Если НЕ Строка.Упаковка.Пустая() И Найти(Строка(Строка.Упаковка), "<Объект не найден>") Тогда
	//		Если Строка.Упаковка.ПолучитьОбъект() = Неопределено Тогда
	//			МассивНеНайденныхСсылок.Добавить(ОбщегоНазначения.РасшифровкаПредставленияБитойСсылки(Строка(Строка.Упаковка), мСоответствиеИдентификаторовТипов));	
	//		КонецЕсли;
	//	КонецЕсли; 
	//	
	//КонецЦикла;
	//
	//
	//Если ЗначениеЗаполнено(МассивНеНайденныхСсылок) Тогда
	//	
	//	эл = Новый Структура;
	//	эл.Вставить("Array_GUID", МассивНеНайденныхСсылок);
	//	эл.Вставить("Dokument_GUID", Строка(Ссылка.УникальныйИдентификатор())); 
	//	
	//	Прокси = ОбщегоНазначенияВызовСервера.ПолучитьПрокси("123456", "WS_User_tbk", "http://mx.tbkon.ru:1777/ut/ws/tbk?wsdl");
	//	
	//	Если Прокси <> Неопределено Тогда 
	//		
	//		Попытка
	//			JS = ОбщегоНазначения.СтруктураВjson_Общая(эл);
	//			Ответ = Прокси.RregistrationLinks(JS);	
	//		Исключение
	//			
	//		КонецПопытки;	
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	////исправление <Объект не найден> ---
	//
	
	Если Найти(Комментарий, "Смена ИП") Тогда
		
		//взято из кнопки принять товары +++
		Попытка
			
			Запрос	=	Новый Запрос("ВЫБРАТЬ
			      	 	             |	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
			      	 	             |ИЗ
			      	 	             |	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
			      	 	             |ГДЕ
			      	 	             |	ПриходныйОрдерНаТовары.Проведен
			      	 	             |	И ПриходныйОрдерНаТовары.ДокументОснование = &ДокументОснование");
			Запрос.УстановитьПараметр("ДокументОснование",Ссылка);
			
			Если не Запрос.Выполнить().Пустой() тогда
				Возврат;
			КонецЕсли;
			
			Попытка
				//ЗаписатьДанныеПоПеремещению(Ссылка,Новый ХранилищеЗначения(Товары.Выгрузить()));	
			Исключение   
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
			//Ордер
			НовыйДокументПОНТ = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
			НовыйДокументПОНТ.Заполнить(Ссылка);
			
			//Доп контроль количества
			Если НовыйДокументПОНТ.Товары.Количество() = 0 тогда	
				Возврат;
			КонецЕсли;
			
			Если НовыйДокументПОНТ.Товары.Итог("Количество") <> Ссылка.Товары.Итог("Количество") тогда	
				Возврат;
			КонецЕсли;
			
			НовыйДокументПОНТ.Дата = ТекущаяДата();
			НовыйДокументПОНТ.ДокументОснование = Ссылка;
			
			//Доп контроль цены
			Для каждого Строка из Ссылка.Товары цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("Номенклатура",		Строка.Номенклатура);
				Отбор.Вставить("Характеристика",	Строка.Характеристика);
				
				Строки =   НовыйДокументПОНТ.Товары.НайтиСтроки(Отбор);
				
				Если Строки.Количество() = 0 тогда
					Возврат; 
				иначеЕсли Строки[0].Цена <> Строка.Цена тогда
					Строки[0].Цена  = Строка.Цена;
					Строки[0].Сумма = Строки[0].Цена * Строки[0].Количество;
				КонецЕсли;			
			КонецЦикла;
			
			НовыйДокументПОНТ.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			Сообщить(ОписаниеОшибки());	
		КонецПопытки;		
		//взято из кнопки принять товары ---
		
	КонецЕсли;
	//КонецМарк
	
КонецПроцедуры  

Процедура ЗаписатьДанныеПоПеремещению(Ссылка,ХранЗнач)
	Рег = РегистрыСведений.СохраненныеДанныеПомощникаПриемкиОтгрузки.СоздатьНаборЗаписей();
	Рег.Отбор.ДокументРаспоряжение.Установить(Ссылка); 
	
	НоваяСтрока	=	Рег.Добавить();
	НоваяСтрока.ДокументРаспоряжение	=	Ссылка;
	НоваяСтрока.ТоварыПеремещение		=	ХранЗнач;
	
	Рег.Записать();	
	
КонецПроцедуры

