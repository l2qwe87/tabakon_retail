

&Вместо("ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных")
Процедура ТБК_ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Вставить содержимое метода.
	Если КомпонентыОбмена.УзелКорреспондента = неопределено ИЛИ Строка(КомпонентыОбмена.УзелКорреспондента) <> "[Табакон] БП3" Тогда
		ПродолжитьВызов(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
		Возврат;
	КонецЕсли;	
	//Замена на группу
	_ДанныеИБ = ДанныеИБ;
	_глубина = 0;
	Пока (_ДанныеИБ <> неопределено) И ЗначениеЗаполнено(_ДанныеИБ.Родитель)  И ЗначениеЗаполнено(_ДанныеИБ.Родитель.Родитель) Цикл
		_глубина = _глубина + 1;
		_ДанныеИБ = _ДанныеИБ.Родитель;
	КонецЦикла;
	
	
	
	прототипВыгрузка = "АлкогольнаяПродукция,Артикул,ИмпортнаяАлкогольнаяПродукция,Код,Наименование,ОбъемДАЛ,ПроизводительИмпортерКонтрагент,Родитель,СтавкаНДС,ТипНоменклатуры,ЕдиницаИзмерения,НаименованиеПолное,Ссылка";
	прототипУзел = "СтавкаНДС,ТипНоменклатуры,ЕдиницаИзмерения";
	прототипГруппа = "Код,Наименование,НаименованиеПолное,Родитель";
	
	основныеДанные = Новый Структура("Артикул,Код,Наименование,НаименованиеПолное,КодВПрограмме","","","","","");
	основныеДанные.КодВПрограмме = основныеДанные.Код;
	ЗаполнитьЗначенияСвойств(основныеДанные, _ДанныеИБ);
	
	
	Если ДанныеXDTO.Свойство("КлючевыеСвойства") И ДанныеXDTO.КлючевыеСвойства.Свойство("КодВПрограмме") Тогда
		КлючевыеСвойства = ДанныеXDTO.КлючевыеСвойства;
	иначе
		КлючевыеСвойства = ДанныеXDTO;
	Конецесли;
	
	ЗаполнитьЗначенияСвойств(ДанныеXDTO, основныеДанные);
	ЗаполнитьЗначенияСвойств(КлючевыеСвойства, основныеДанные);
	
	КлючевыеСвойства.КодВПрограмме = основныеДанные.Код;
	
	Если ЗначениеЗаполнено(КлючевыеСвойства.Группа) Тогда
		Попытка
			КлючевыеСвойства.Группа.КодВПрограмме = _ДанныеИБ.Родитель.Код;
			КлючевыеСвойства.Группа.Наименование = _ДанныеИБ.Родитель.Наименование;
		Исключение Конецпопытки;
		КлючевыеСвойства.Группа.Ссылка = _ДанныеИБ.Родитель;
		КлючевыеСвойства.Группа.Группа = неопределено;
	Иначе
		КлючевыеСвойства.Группа = неопределено;
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		
		Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ГруппыАналитическогоУчетаНоменклатуры")
			И ЗначениеЗаполнено(ДанныеИБ.ГруппаАналитическогоУчета) Тогда
			ДанныеXDTO.Вставить("ГруппаАналитическогоУчета", ЗначениеВИнструкциюПКО(КомпонентыОбмена, ДанныеИБ.ГруппаАналитическогоУчета));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;

	//ПродолжитьВызов(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
	
	Если СтекВыгрузки.Количество() > 1 Тогда	
		Возврат;
	Иначе 
		ДанныеXDTO = неопределено;
	КонецЕсли;
		
КонецПроцедуры

&Вместо("ПОД_Справочник_Номенклатура_Отправка_ПриОбработке")
Процедура TBK_ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента = неопределено ИЛИ Строка(КомпонентыОбмена.УзелКорреспондента) <> "[Табакон] БП3" Тогда
		ПродолжитьВызов(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
		Возврат;
	КонецЕсли;
	
	_родитель = ДанныеИБ.Родитель;
	_глубина = 0;
	Пока ЗначениеЗаполнено(_родитель) Цикл
		_глубина = _глубина + 1;
		_родитель = _родитель.Родитель;
	КонецЦикла;
	
	Если (ДанныеИБ.ЭтоГруппа)И(_глубина<2) Тогда
		ИспользованиеПКО.Справочник_НоменклатураГруппа = Истина;
		ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
	ИначеЕсли ДанныеИБ.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор Тогда
		ИспользованиеПКО.Справочник_Номенклатура_Отправка = Истина;
		//ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
	КонецЕсли;
	
КонецПроцедуры

&Вместо("ДобавитьПКО_Справочник_ФизическиеЛица_Получение")
Процедура TBK_ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)
	// Вставить содержимое метода.
	//ПродолжитьВызов(ПравилаКонвертации);
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ФизЛица";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	//ДобавитьПКС(СвойстваШапки, "ДатаРегистрации", "ДатаРегистрации");
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",    "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",             "ИНН");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "ФИО");
	ДобавитьПКС(СвойстваШапки, "Пол",             "Пол", , "ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",        "Группа", , "Справочник_ФизическиеЛицаГруппа_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("СтраховойНомерПФР,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ФИО,ЭтоГруппа,ДатаРождения");
	ПравилоКонвертации.ПоляПоиска.Добавить("ФИО,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

&Вместо("ЗагрузитьПодробныеДанныеФИО")
Процедура TBK_ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.ДанныеФИО")
		И ПолученныеДанные.ДополнительныеСвойства.Свойство("ПодробныеДанныеФИО") Тогда	
		
		НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
		Для Каждого СтрокаФИО Из ПолученныеДанные.ДополнительныеСвойства.ПодробныеДанныеФИО Цикл
			НовЗапись = НаборЗаписейФИО.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, СтрокаФИО);
			НовЗапись.ФизическоеЛицо = ФизЛицоСсылка;
			НовЗапись.Период = СтрокаФИО.НачалоПериода;
		КонецЦикла;
		
		Если НЕ(НаборЗаписейФИО.ДополнительныеСвойства.Свойство("НеФормироватьНаименование")) Тогда
			НаборЗаписейФИО.ДополнительныеСвойства.Вставить("НеФормироватьНаименование");
		КонецЕсли;      
		НаборЗаписейФИО.ДополнительныеСвойства.НеФормироватьНаименование = ИСТИНА;
		
		НаборЗаписейФИО.ОбменДанными.Загрузка = Истина;
		НаборЗаписейФИО.Записать();
		
	Иначе 
		// Запись ФИО по наименованию физ.лица.
		ФИОСтрокой = ПолученныеДанные.Наименование;
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИОСтрокой);
		ДанныеФИО = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(,Новый Структура("ФизическоеЛицо", ФизЛицоСсылка));
		Если ДанныеФИО.Количество() > 0 
			И ДанныеФИО[0].Фамилия = СтруктураФИО.Фамилия
			И ДанныеФИО[0].Имя = СтруктураФИО.Имя
			И ДанныеФИО[0].Отчество = СтруктураФИО.Отчество Тогда
			Возврат;
		КонецЕсли;
		НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
	
		Если СтруктураФИО.Фамилия = Неопределено 
			И СтруктураФИО.Имя = Неопределено
			И СтруктураФИО.Отчество = Неопределено Тогда
			НаборЗаписейФИО.Записать();
			Возврат;
		КонецЕсли;
		НовЗапись = НаборЗаписейФИО.Добавить();
		ЗаполнитьЗначенияСвойств(НовЗапись, СтруктураФИО, "Фамилия, Имя, Отчество");
		НовЗапись.ФизическоеЛицо = ФизЛицоСсылка;
		НовЗапись.Период = ТекущаяДатаСеанса();
		
		НаборЗаписейФИО.ОбменДанными.Загрузка = Истина;
		НаборЗаписейФИО.Записать();
	КонецЕсли;
КонецПроцедуры

&После("ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO")
Процедура TBK_ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Вставить содержимое метода.
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("РасшифровкаПлатежа") Тогда
		Для Каждого стрРасшифровкаПлатежа из ПолученныеДанные.ДополнительныеСвойства.РасшифровкаПлатежа Цикл
			Если НЕ стрРасшифровкаПлатежа.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				стрРасшифровкаПлатежа.Вставить("СтатьяДвиженияДенежныхСредств");
			Конецесли;
			Если НЕ ЗначениеЗаполнено(стрРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств) Тогда
				стрРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("1.2 Торговая розничная выручка - ЭКВАЙРИНГ");
			Конецесли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры




&После("ЗаполнитьПравилаОбработкиДанных")
Процедура TBK_ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных)
	Если НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных);  
		ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

&После("ЗаполнитьПравилаКонвертацииОбъектов")
Процедура TBK_ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации)
	Если НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации);  
	КонецЕсли;
КонецПроцедуры

&После("ВыполнитьПроцедуруМодуляМенеджера")
Процедура TBK_ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры)
	Если ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	КонецЕсли;

	
	
	Если Параметры.КомпонентыОбмена.УзелКорреспондента = неопределено ИЛИ Строка(Параметры.КомпонентыОбмена.УзелКорреспондента) <> "[Табакон] БП3" Тогда
		Возврат;
	КонецЕсли;
	//Попытка
	//	Если Параметры.ДанныеXDTO.Товары <> неопределено тогда
	//		Для каждого эл из Параметры.ДанныеXDTO.Товары Цикл
	//			Если ЗначениеЗаполнено(эл.Номенклатура) Тогда
	//				Если ЗначениеЗаполнено(эл.Номенклатура.Родитель) и ЗначениеЗаполнено(эл.Номенклатура.Родитель.Родитель) Тогда
	//					Пока ЗначениеЗаполнено(эл.Номенклатура.Родитель.Родитель) Цикл
	//						эл.Номенклатура = эл.Номенклатура.Родитель;
	//					КонецЦикла
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЦикла;			
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;

КонецПроцедуры


Процедура ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРозничнаяВыручка";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",          "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",              "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Кассир",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ;
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_ПКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры


Процедура ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СборкаТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СборкаТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СборкаТоваров_Получение");
КонецПроцедуры


Функция получитьДанныеПоСебестоимости(Объект)
	Если ЛОЖЬ Тогда Объект = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка(); КонецЕсли;
	//выборкаСебестоимость = РегистрыНакопления.СебестоимостьТоваров.ВыбратьПоРегистратору(Объект.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	себе.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	               |	себе.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	               |	СУММА(себе.Стоимость) КАК Стоимость,
	               |	СУММА(себе.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	               |	СУММА(себе.Количество) КАК Количество
	               |ИЗ
	               |	РегистрНакопления.СебестоимостьТоваров КАК себе
	               |ГДЕ
	               |	себе.Регистратор = &Регистратор
	               |	И себе.Активность = ИСТИНА
	               |СГРУППИРОВАТЬ ПО
	               |	себе.АналитикаУчетаНоменклатуры.Характеристика,
	               |	себе.АналитикаУчетаНоменклатуры.Номенклатура";
	
	
	Запрос.УстановитьПараметр("Регистратор",Объект.Ссылка);
	
	выборкаСебестоимость = Запрос.Выполнить().Выгрузить();
	
	результ = новый ТаблицаЗначений;
	результ.Колонки.Добавить("Номенклатура");
	результ.Колонки.Добавить("Характеристика");
	результ.Колонки.Добавить("Себестоимость");	
	
	ндсВключенВСебестоимость = ИСТИНА;
	
	Для Каждого найденаяСтрока из выборкаСебестоимость Цикл
		
		Если ндсВключенВСебестоимость Тогда
			Себестоимость = найденаяСтрока.Стоимость;
		Иначе
			Себестоимость = найденаяСтрока.СтоимостьБезНДС;
		КонецЕсли;
		Если найденаяСтрока.Количество <> 0 Тогда
			Себестоимость = Себестоимость / найденаяСтрока.Количество;
		Иначе
			Себестоимость = 0;
		КонецЕсли;
		
		нСтр = результ.Добавить();
		нСтр.Номенклатура = найденаяСтрока.Номенклатура;
		нСтр.Характеристика =найденаяСтрока.Характеристика;
		нСтр.Себестоимость = Себестоимость;
		
	КонецЦикла; 
	Возврат результ;
КонецФункции

Процедура AdditionalInfoВставить(ДанныеXDTO, Имя, ДопЗначение, ВставлятьПустое=Истина)
	Если НЕ (ВставлятьПустое ИЛИ ЗначениеЗаполнено(ДопЗначение)) Тогда
		Возврат;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда
		ДопДанные = ДанныеXDTO.AdditionalInfo;
	Иначе
		ДопДанные = Новый Структура;
	КонецЕсли;
	
	Если ВставлятьПустое ИЛИ ЗначениеЗаполнено(ДопЗначение) Тогда
		ДопДанные.Вставить(Имя, ДопЗначение);
		ДанныеXDTO.Вставить("AdditionalInfo", ДопДанные);
	КонецЕсли;
КонецПроцедуры

&После("ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка")
Процедура TBK_ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации)
	// Вставить содержимое метода.
	
	ПравилоКонвертации = ПравилаКонвертации.Найти("Документ_ОтчетОРозничныхПродажах_Отправка","ИмяПКО");
	ДобавитьПКС(
		ПравилоКонвертации.СвойстваТабличныхЧастей.Найти("Товары").Свойства,
		"",
		"Себестоимость",
		1
	);
	
	ДобавитьПКС(
		ПравилоКонвертации.СвойстваТабличныхЧастей.Найти("ТоварыПродажа").Свойства,
		"",
		"Себестоимость",
		1
	);
КонецПроцедуры
&После("ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных")
Процедура TBK_ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДополнитьВыгрузку_Себестоимость(ДанныеИБ, ДанныеXDTO);	
КонецПроцедуры


&После("ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка")
Процедура TBK_ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ПравилаКонвертации.Найти("Документ_РеализацияТоваровУслуг_Отправка","ИмяПКО");
	ДобавитьПКС(
		ПравилоКонвертации.СвойстваТабличныхЧастей.Найти("Товары").Свойства,
		"",
		"Себестоимость",
		1
	);

КонецПроцедуры

&После("ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных")
Процедура TBK_ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДополнитьВыгрузку_Себестоимость(ДанныеИБ, ДанныеXDTO);	
КонецПроцедуры


Функция ДополнитьВыгрузку_Себестоимость(ДанныеИБ, ДанныеXDTO)
	
	себестоимостьТоваров = получитьДанныеПоСебестоимости(ДанныеИБ);
	//AdditionalInfoВставить(ДанныеXDTO,"СебестоимостьТоваров", себестоимостьТоваров);
	имяТЧ = "ТоварыПродажа";
	Если НЕ ДанныеXDTO.Свойство(имяТЧ) Тогда
		имяТЧ = "Товары";
	КонецЕсли;
	
	
	Если ДанныеXDTO[имяТЧ].Количество() > 0 Тогда
		Если ДанныеXDTO[имяТЧ].Колонки.Найти("Себестоимость") = неопределено Тогда
			ДанныеXDTO[имяТЧ].Колонки.Добавить("Себестоимость");
		КонецЕсли;
		
		Для Каждого стр из ДанныеXDTO[имяТЧ] Цикл
			найденаяСтрока = себестоимостьТоваров.Найти(стр.Характеристика,"Характеристика");
			Если найденаяСтрока = неопределено Тогда
				найденаяСтрока = себестоимостьТоваров.Найти(стр.Номенклатура,"Номенклатура");
			КонецЕсли;
			
			Если найденаяСтрока <> неопределено Тогда
				стр.Себестоимость = Окр(найденаяСтрока.Себестоимость * стр.Количество, 2);
			Иначе
				стр.Себестоимость = 0;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецФункции

&После("ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO")
Процедура TBK_ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Вставить содержимое метода.
	Если ДанныеXDTO.Свойство("AdditionalInfo") Тогда
		Если ДанныеXDTO.AdditionalInfo.Свойство("ИспользованиеХарактеристик") Тогда
			Если ДанныеXDTO.AdditionalInfo.ИспользованиеХарактеристик =	"ИндивидуальныеДляНоменклатуры" Тогда
				ПолученныеДанные.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&После("ДобавитьПКО_Справочник_Номенклатура_Получение")
Процедура TBK_ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ПравилаКонвертации.Найти("Справочник_Номенклатура_Получение","ИмяПКО");
	ДобавитьПКС(ПравилоКонвертации.Свойства, "ИспользованиеХарактеристик","",1);
КонецПроцедуры

&После("ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка")
Процедура TBK_ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)
	ПравилоКонвертации = ПравилаКонвертации.Найти("Документ_ПеремещениеТоваров_Отправка","ИмяПКО");
	ДобавитьПКС(
		ПравилоКонвертации.СвойстваТабличныхЧастей.Найти("Товары").Свойства,
		"",
		"Себестоимость",
		1
	);
КонецПроцедуры

&После("ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных")
Процедура TBK_ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДополнитьВыгрузку_Себестоимость(ДанныеИБ, ДанныеXDTO);
	
	AdditionalInfoВставить(ДанныеXDTO,"Товары_Себестоимость",ДанныеXDTO.Товары.ВыгрузитьКолонку("Себестоимость"));
КонецПроцедуры

&После("ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка")
Процедура TBK_ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)
	// Вставить содержимое метода.
	ПравилоКонвертации = ПравилаКонвертации.Найти("Документ_ВозвратТоваровПоставщику_Отправка","ИмяПКО");
	ДобавитьПКС(
		ПравилоКонвертации.СвойстваТабличныхЧастей.Найти("Товары").Свойства,
		"",
		"Себестоимость",
		1
	);

КонецПроцедуры

&После("ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных")
Процедура TBK_ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДополнитьВыгрузку_Себестоимость(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры

&Вместо("ОтложеннаяОбработка_ЗаполнениеКассовыхСмен")
Процедура TBK_ОтложеннаяОбработка_ЗаполнениеКассовыхСмен(КомпонентыОбмена)
	ДокументыСПС = КомпонентыОбмена.ПараметрыКонвертации.ДокументыСПодарочнымиСертификатами;
	ТаблицаДляОтложенногоПроведения = КомпонентыОбмена.ДокументыДляОтложенногоПроведения;
		
	Если ТипЗнч(ДокументыСПС) = Тип("ТаблицаЗначений") И ДокументыСПС.Количество() > 0 Тогда
		ДокументыСПС.Индексы.Добавить("ОчередьДокумента");
		ДокументыОРП = ДокументыСПС.Скопировать(Новый Структура("ОчередьДокумента", 1));
		Если ДокументыОРП.Количество() > 0 Тогда
		
			ДокументыОРП.Сортировать("ДатаДокумента");
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	МАКСИМУМ(ЕСТЬNULL(ДокКассоваяСмена.ОкончаниеКассовойСмены, НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажах.Дата, ДЕНЬ))) КАК НачалоКассовойСмены,
				|	ОтчетОРозничныхПродажах.Ссылка КАК ОРП,
				|	ОтчетОРозничныхПродажах.Валюта КАК Валюта,
				|	ОтчетОРозничныхПродажах.КассаККМ КАК КассаККМ,
				|	ОтчетОРозничныхПродажах.Дата КАК ОкончаниеКассовойСмены,
				|	ОтчетОРозничныхПродажах.Дата КАК Дата,
				|	ОтчетОРозничныхПродажах.Организация КАК Организация,
				|	ОтчетОРозничныхПродажах.Склад КАК Склад,
				|	ОтчетОРозничныхПродажах.ВидЦены КАК ВидЦены,
				|	ОтчетОРозничныхПродажах.НалогообложениеНДС КАК НалогообложениеНДС,
				|	ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Закрыта) КАК Статус,
				|	МАКСИМУМ(ВЫБОР
				|			КОГДА ЕСТЬNULL(ДокКассоваяСмена.ОкончаниеКассовойСмены, ДАТАВРЕМЯ(1, 1, 1)) = ОтчетОРозничныхПродажах.Дата
				|					И НЕ ОтчетОРозничныхПродажах.Дата = ДАТАВРЕМЯ(1, 1, 1)
				|				ТОГДА ДокКассоваяСмена.Ссылка
				|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.КассоваяСмена.ПустаяСсылка)
				|		КОНЕЦ) КАК КассоваяСмена
				|ИЗ
				|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК ДокКассоваяСмена
				|		ПО ОтчетОРозничныхПродажах.КассаККМ = ДокКассоваяСмена.КассаККМ
				|			И ОтчетОРозничныхПродажах.Организация = ДокКассоваяСмена.Организация
				|			И (НЕ ДокКассоваяСмена.ПометкаУдаления)
				|			И (ДокКассоваяСмена.ОкончаниеКассовойСмены = ОтчетОРозничныхПродажах.Дата
				|				ИЛИ НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажах.Дата, ДЕНЬ) <= ДокКассоваяСмена.НачалоКассовойСмены
				|					И ДокКассоваяСмена.ОкончаниеКассовойСмены < ОтчетОРозничныхПродажах.Дата)
				|ГДЕ
				|	ОтчетОРозничныхПродажах.Ссылка В(&МассивСсылок)
				|
				|СГРУППИРОВАТЬ ПО
				|	ОтчетОРозничныхПродажах.Ссылка,
				|	ОтчетОРозничныхПродажах.Валюта,
				|	ОтчетОРозничныхПродажах.КассаККМ,
				|	ОтчетОРозничныхПродажах.Дата,
				|	ОтчетОРозничныхПродажах.Организация,
				|	ОтчетОРозничныхПродажах.Склад,
				|	ОтчетОРозничныхПродажах.ВидЦены,
				|	ОтчетОРозничныхПродажах.НалогообложениеНДС,
				|	ОтчетОРозничныхПродажах.Дата
				|
				|УПОРЯДОЧИТЬ ПО
				|	Организация,
				|	Склад,
				|	Валюта,
				|	КассаККМ,
				|	ОкончаниеКассовойСмены";
			
			Запрос.УстановитьПараметр("МассивСсылок", ДокументыОРП.ВыгрузитьКолонку("ДокументСсылка"));
			
			Организация = Неопределено;
			Склад = Неопределено;
			Валюта = Неопределено;
			КассаККМ = Неопределено;
	
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ОРПОбъект = Выборка.ОРП.ПолучитьОбъект();
				Если ЗначениеЗаполнено(Выборка.КассоваяСмена) Тогда
					ОРПОбъект.КассоваяСмена = Выборка.КассоваяСмена;
				Иначе
					Если Организация <> Выборка.Организация ИЛИ КассаККМ <> Выборка.КассаККМ
						Или Склад <> Выборка.Склад ИЛИ Валюта <> Выборка.Валюта Тогда
						
						Организация = Выборка.Организация;
						КассаККМ = Выборка.КассаККМ;
						Склад = Выборка.Склад;
						Валюта = Выборка.Валюта;
						НачалоСмены = Выборка.НачалоКассовойСмены;
						
					КонецЕсли;
					
					НовыйДокумент = Документы.КассоваяСмена.СоздатьДокумент();
					НачалоСмены = НачалоСмены + ?(НачалоСмены = НачалоДня(НачалоСмены), 0, 1);
					ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка);
					НовыйДокумент.Дата = НачалоСмены;
					//Вик 2021_03_17
					НовыйДокумент.УстановитьНовыйНомер();
					//КонецВик
					НовыйДокумент.НачалоКассовойСмены = НачалоСмены;
					НовыйДокумент.СтатусРегламентныхОпераций = Перечисления.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчетЧекиЗаархивированы;
					ПолученныеДанныеСсылка = ОбменДаннымиXDTOСервер.СсылкаОбъектаПоУИДОбъектаXDTO(
						Строка(Выборка.ОРП.УникальныйИдентификатор()),
						Тип("ДокументСсылка.КассоваяСмена"),
						КомпонентыОбмена);
					Если ТипЗнч(ПолученныеДанныеСсылка) = Тип("ДокументОбъект.КассоваяСмена") Тогда
						НовыйДокумент.УстановитьСсылкуНового(ПолученныеДанныеСсылка);
					КонецЕсли;
					НовыйДокумент.ОбменДанными.Загрузка = Истина;
					НовыйДокумент.Записать();
					
					ОРПОбъект.КассоваяСмена = НовыйДокумент.Ссылка;
				КонецЕсли;
				ОРПОбъект.ОбменДанными.Загрузка = Истина;
				ОРПОбъект.Записать();
				НачалоСмены = Выборка.ОкончаниеКассовойСмены;
			КонецЦикла;
		КонецЕсли;
		ДокументыРПС = ДокументыСПС.Скопировать(Новый Структура("ОчередьДокумента", 2));
		Если ДокументыРПС.Количество() > 0 Тогда
			ДокументыРПС.Сортировать("ДатаДокумента");
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ВозвратПодарочныхСертификатов.Ссылка КАК Ссылка,
				|	ВозвратПодарочныхСертификатов.Организация КАК Организация,
				|	ВозвратПодарочныхСертификатов.Валюта КАК Валюта,
				|	ВозвратПодарочныхСертификатов.КассаККМ КАК КассаККМ,
				|	ВозвратПодарочныхСертификатов.Дата КАК Дата
				|ПОМЕСТИТЬ ВТ_РеализацияВозвратПС
				|ИЗ
				|	Документ.ВозвратПодарочныхСертификатов КАК ВозвратПодарочныхСертификатов
				|ГДЕ
				|	ВозвратПодарочныхСертификатов.Ссылка В(&МассивСсылок)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	РеализацияПодарочныхСертификатов.Ссылка,
				|	РеализацияПодарочныхСертификатов.Организация,
				|	РеализацияПодарочныхСертификатов.Валюта,
				|	РеализацияПодарочныхСертификатов.КассаККМ,
				|	РеализацияПодарочныхСертификатов.Дата
				|ИЗ
				|	Документ.РеализацияПодарочныхСертификатов КАК РеализацияПодарочныхСертификатов
				|ГДЕ
				|	РеализацияПодарочныхСертификатов.Ссылка В(&МассивСсылок)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Организация,
				|	Валюта,
				|	КассаККМ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КассоваяСмена.Ссылка КАК КассоваяСменаСсылка,
				|	ВТ_РеализацияВозвратПС.Ссылка КАК Ссылка,
				|	КассоваяСмена.НачалоКассовойСмены КАК НачалоКассовойСмены
				|ИЗ
				|	ВТ_РеализацияВозвратПС КАК ВТ_РеализацияВозвратПС
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК КассоваяСмена
				|		ПО ВТ_РеализацияВозвратПС.Организация = КассоваяСмена.Организация
				|			И ВТ_РеализацияВозвратПС.КассаККМ = КассоваяСмена.КассаККМ
				|			И ВТ_РеализацияВозвратПС.Дата >= КассоваяСмена.НачалоКассовойСмены
				|			И ВТ_РеализацияВозвратПС.Дата <= КассоваяСмена.ОкончаниеКассовойСмены";
			
			Запрос.УстановитьПараметр("МассивСсылок", ДокументыРПС.ВыгрузитьКолонку("ДокументСсылка"));
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				РПСОбъект = Выборка.Ссылка.ПолучитьОбъект();
				РПСОбъект.Дата = Выборка.НачалоКассовойСмены;
				РПСОбъект.КассоваяСмена = Выборка.КассоваяСменаСсылка;
				РПСОбъект.ОбменДанными.Загрузка = Истина;
				РПСОбъект.Записать();
				
				НайденнаяСтрока = ТаблицаДляОтложенногоПроведения.Найти(Выборка.Ссылка, "ДокументСсылка");
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.ДатаДокумента  = Выборка.НачалоКассовойСмены;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаВПС = ДокументыСПС.Скопировать(Новый Структура("ОчередьДокумента", 3));
		Если ТаблицаВПС.Количество() > 0 Тогда
			ТаблицаВПС.Сортировать("ДатаДокумента");
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
							|	ТаблицаВПС.ДокументСсылка КАК ВозвратПС,
							|	ТаблицаВПС.ОРП КАК ОРП
							|ПОМЕСТИТЬ втВПС
							|ИЗ
							|	&ТаблицаВПС КАК ТаблицаВПС
							|;
							|
							|////////////////////////////////////////////////////////////////////////////////
							|ВЫБРАТЬ
							|	ВозвратПодарочныхСертификатов.Ссылка КАК ВозвратПС,
							|	ОтчетОРозничныхПродажах.КассоваяСмена КАК КассоваяСмена,
							|	ОтчетОРозничныхПродажах.КассаККМ КАК КассаККМ
							|ИЗ
							|	втВПС КАК втВПС
							|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратПодарочныхСертификатов КАК ВозвратПодарочныхСертификатов
							|		ПО втВПС.ВозвратПС = ВозвратПодарочныхСертификатов.Ссылка
							|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
							|		ПО втВПС.ОРП = ОтчетОРозничныхПродажах.Ссылка";
			
			Запрос.УстановитьПараметр("ТаблицаВПС", ТаблицаВПС);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ВПСОбъект = Выборка.ВозвратПС.ПолучитьОбъект();
				ВПСОбъект.КассоваяСмена = Выборка.КассоваяСмена;
				ВПСОбъект.КассаККМ = Выборка.КассаККМ;
				ВПСОбъект.ОбменДанными.Загрузка = Истина;
				ВПСОбъект.Записать();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&После("ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO")
Процедура TBK_ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Попытка
		Для каждого Элемент из ДанныеXDTO.AdditionalInfo цикл
			ПолученныеДанные.ДополнительныеСвойства.Вставить(Элемент.Ключ,Элемент.Значение);
		КонецЦикла;
	Исключение
	КонецПопытки;
КонецПроцедуры

&Вместо("ПослеМержевания_ПКО")
Процедура TBK_ПослеМержевания_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	// Вставить содержимое метода.
	ПродолжитьВызов(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если ДанныеДляЗаписиВИБ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		 настройкиУчетаНДС = УчетНДСУП.ПараметрыУчетаПоОрганизации(ДанныеДляЗаписиВИБ.Организация, ДанныеДляЗаписиВИБ.Дата);
		 
		 Если ТипЗнч(ДанныеДляЗаписиВИБ) = Тип("Структура") Тогда
			Если НЕ ДанныеДляЗаписиВИБ.Свойство("Договор") Тогда
				ДанныеДляЗаписиВИБ.Вставить("Договор",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			КонецЕсли;
			Если НЕ ДанныеДляЗаписиВИБ.Свойство("ВТомЧислеНДС") Тогда
				ДанныеДляЗаписиВИБ.Вставить("ВТомЧислеНДС");
			КонецЕсли
		КонецЕсли;
		
		Если ДанныеДляЗаписиВИБ.Договор = неопределено Тогда
			ДанныеДляЗаписиВИБ.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		ДанныеДляЗаписиВИБ.ВТомЧислеНДС = ?(
			настройкиУчетаНДС.ОсновноеНалогообложениеНДСПродажи =Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС,
			"В том числе",
			"В том числе"
		);
		ДанныеДляЗаписиВИБ.НалогообложениеНДС = настройкиУчетаНДС.ОсновноеНалогообложениеНДСПродажи;
		
		Для Каждого стр из ДанныеДляЗаписиВИБ.РасшифровкаПлатежа Цикл
			если ТипЗнч(стр) = Тип("Структура") Тогда
				Если НЕ стр.Свойство("Заказ") Тогда
					стр.Вставить("Заказа");
				КонецЕсли;
				Если НЕ стр.Свойство("ВалютаВзаиморасчетов") Тогда
					стр.Вставить("ВалютаВзаиморасчетов");
				КонецЕсли;
				Если НЕ стр.Свойство("Организация") Тогда
					стр.Вставить("Организация");
				КонецЕсли;
				Если НЕ стр.Свойство("ИдентификаторСтроки") Тогда
					стр.Вставить("ИдентификаторСтроки","");
				КонецЕсли;
				
			КонецЕсли;
			Попытка
				стр.Заказ = ДанныеДляЗаписиВИБ.Ссылка;
			Исключение
			КонецПопытки;
			стр.ВалютаВзаиморасчетов = ДанныеДляЗаписиВИБ.Валюта;
			стр.Организация = ДанныеДляЗаписиВИБ.Организация;
			Если НЕ ЗначениеЗаполнено(стр.ИдентификаторСтроки) Тогда
				стр.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
		КонецЦикла;
		
		//ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьПризнакАналитикаДоходовОбязательна(ДанныеДляЗаписиВИБ.РасшифровкаПлатежа);
		//ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(ДанныеДляЗаписиВИБ.РасшифровкаПлатежа, "СтатьяДоходов, АналитикаРасходов");
		//ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(ДанныеДляЗаписиВИБ.РасшифровкаПлатежа, "СтатьяДоходов");
	КонецЕсли;
	
КонецПроцедуры

&После("ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO")
Процедура TBK_ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	
	Если НЕ ДанныеXDTO.Свойство("ПоказательДаты") Тогда
		ДанныеXDTO.Вставить("ПоказательДаты","0");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеXDTO.ПоказательДаты) Тогда
		ДанныеXDTO.ПоказательДаты = "0";
	КонецЕсли;
	
	Если ТипЗнч(ПолученныеДанные) = Тип("Структура") Тогда
		Если НЕ ПолученныеДанные.Свойство("ПоказательДаты") Тогда
			ПолученныеДанные.Вставить("ПоказательДаты","0");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ПоказательДаты) Тогда
		ПолученныеДанные.ПоказательДаты = "0";
	КонецЕсли;

КонецПроцедуры
