

&Вместо("ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных")
Процедура ТБК_ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Вставить содержимое метода.
	Если КомпонентыОбмена.УзелКорреспондента = неопределено ИЛИ Строка(КомпонентыОбмена.УзелКорреспондента) <> "[Табакон] БП3" Тогда
		ПродолжитьВызов(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
		Возврат;
	КонецЕсли;	
	//Замена на группу
	_ДанныеИБ = ДанныеИБ;
	_глубина = 0;
	Пока (_ДанныеИБ <> неопределено) И ЗначениеЗаполнено(_ДанныеИБ.Родитель)  И ЗначениеЗаполнено(_ДанныеИБ.Родитель.Родитель) Цикл
		_глубина = _глубина + 1;
		_ДанныеИБ = _ДанныеИБ.Родитель;
	КонецЦикла;
	
	
	
	прототипВыгрузка = "АлкогольнаяПродукция,Артикул,ИмпортнаяАлкогольнаяПродукция,Код,Наименование,ОбъемДАЛ,ПроизводительИмпортерКонтрагент,Родитель,СтавкаНДС,ТипНоменклатуры,ЕдиницаИзмерения,НаименованиеПолное,Ссылка";
	прототипУзел = "СтавкаНДС,ТипНоменклатуры,ЕдиницаИзмерения";
	прототипГруппа = "Код,Наименование,НаименованиеПолное,Родитель";
	
	
	ДанныеXDTO.Артикул = _ДанныеИБ.Артикул;
	ДанныеXDTO.КодВПрограмме = _ДанныеИБ.Код;
	ДанныеXDTO.Наименование = _ДанныеИБ.Наименование;
	ДанныеXDTO.НаименованиеПолное = _ДанныеИБ.НаименованиеПолное;
	
	Если ЗначениеЗаполнено(ДанныеXDTO.Группа) Тогда
		ДанныеXDTO.Группа.КодВПрограмме = _ДанныеИБ.Родитель.Код;
		ДанныеXDTO.Группа.Наименование = _ДанныеИБ.Родитель.Наименование;
		ДанныеXDTO.Группа.Ссылка = _ДанныеИБ.Родитель;
		ДанныеXDTO.Группа.Группа = неопределено;
	Иначе
		ДанныеXDTO.Группа = неопределено;
	КонецЕсли;
	
	//ДанныеXDTO.Ссылка = Новый Структура(прототипВыгрузка);
	//ЗаполнитьЗначенияСвойств(ДанныеXDTO.Ссылка,ДанныеИБ,прототипУзел);
	//ЗаполнитьЗначенияСвойств(ДанныеXDTO.Ссылка,_ДанныеИБ,прототипГруппа);
	
	
	//Если _глубина >= 2 Тогда
	//	_ДанныеИБ = ДанныеИБ.Родитель;
	//	
	//	//ДанныеXDTO.ЭтоГруппа=ЛОЖЬ;
	//	ДанныеИБ = _ДанныеИБ;
	//	//ТБК_ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(_ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
	//	//Возврат;
	//КонецЕсли;
		
	Если СтекВыгрузки.Количество() > 1 Тогда	
		Возврат;
	КонецЕсли;

	ПродолжитьВызов(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры

&Вместо("ПОД_Справочник_Номенклатура_Отправка_ПриОбработке")
Процедура TBK_ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.УзелКорреспондента = неопределено ИЛИ Строка(КомпонентыОбмена.УзелКорреспондента) <> "[Табакон] БП3" Тогда
		ПродолжитьВызов(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
		Возврат;
	КонецЕсли;
	
	_родитель = ДанныеИБ.Родитель;
	_глубина = 0;
	Пока ЗначениеЗаполнено(_родитель) Цикл
		_глубина = _глубина + 1;
		_родитель = _родитель.Родитель;
	КонецЦикла;
	
	Если (ДанныеИБ.ЭтоГруппа)И(_глубина<2) Тогда
		ИспользованиеПКО.Справочник_НоменклатураГруппа = Истина;
		ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
	ИначеЕсли ДанныеИБ.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор Тогда
		ИспользованиеПКО.Справочник_Номенклатура_Отправка = Истина;
		//ПроверкаЗаполненияРеквизитовОбъектаИБ(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО);
	КонецЕсли;
	
КонецПроцедуры

&Вместо("ДобавитьПКО_Справочник_ФизическиеЛица_Получение")
Процедура TBK_ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)
	// Вставить содержимое метода.
	//ПродолжитьВызов(ПравилаКонвертации);
	
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ФизЛица";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	//ДобавитьПКС(СвойстваШапки, "ДатаРегистрации", "ДатаРегистрации");
	ДобавитьПКС(СвойстваШапки, "ДатаРождения",    "ДатаРождения");
	ДобавитьПКС(СвойстваШапки, "ИНН",             "ИНН");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "ФИО");
	ДобавитьПКС(СвойстваШапки, "Пол",             "Пол", , "ПолФизическогоЛица");
	ДобавитьПКС(СвойстваШапки, "Родитель",        "Группа", , "Справочник_ФизическиеЛицаГруппа_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1, "Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация",    "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("СтраховойНомерПФР,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ФИО,ЭтоГруппа,ДатаРождения");
	ПравилоКонвертации.ПоляПоиска.Добавить("ФИО,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

&Вместо("ЗагрузитьПодробныеДанныеФИО")
Процедура TBK_ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ФизическиеЛица.ДанныеФИО")
		И ПолученныеДанные.ДополнительныеСвойства.Свойство("ПодробныеДанныеФИО") Тогда	
		
		НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
		Для Каждого СтрокаФИО Из ПолученныеДанные.ДополнительныеСвойства.ПодробныеДанныеФИО Цикл
			НовЗапись = НаборЗаписейФИО.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, СтрокаФИО);
			НовЗапись.ФизическоеЛицо = ФизЛицоСсылка;
			НовЗапись.Период = СтрокаФИО.НачалоПериода;
		КонецЦикла;
		
		Если НЕ(НаборЗаписейФИО.ДополнительныеСвойства.Свойство("НеФормироватьНаименование")) Тогда
			НаборЗаписейФИО.ДополнительныеСвойства.Вставить("НеФормироватьНаименование");
		КонецЕсли;      
		НаборЗаписейФИО.ДополнительныеСвойства.НеФормироватьНаименование = ИСТИНА;
		
		НаборЗаписейФИО.ОбменДанными.Загрузка = Истина;
		НаборЗаписейФИО.Записать();
		
	Иначе 
		// Запись ФИО по наименованию физ.лица.
		ФИОСтрокой = ПолученныеДанные.Наименование;
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИОСтрокой);
		ДанныеФИО = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(,Новый Структура("ФизическоеЛицо", ФизЛицоСсылка));
		Если ДанныеФИО.Количество() > 0 
			И ДанныеФИО[0].Фамилия = СтруктураФИО.Фамилия
			И ДанныеФИО[0].Имя = СтруктураФИО.Имя
			И ДанныеФИО[0].Отчество = СтруктураФИО.Отчество Тогда
			Возврат;
		КонецЕсли;
		НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
	
		Если СтруктураФИО.Фамилия = Неопределено 
			И СтруктураФИО.Имя = Неопределено
			И СтруктураФИО.Отчество = Неопределено Тогда
			НаборЗаписейФИО.Записать();
			Возврат;
		КонецЕсли;
		НовЗапись = НаборЗаписейФИО.Добавить();
		ЗаполнитьЗначенияСвойств(НовЗапись, СтруктураФИО, "Фамилия, Имя, Отчество");
		НовЗапись.ФизическоеЛицо = ФизЛицоСсылка;
		НовЗапись.Период = ТекущаяДатаСеанса();
		
		НаборЗаписейФИО.ОбменДанными.Загрузка = Истина;
		НаборЗаписейФИО.Записать();
	КонецЕсли;
КонецПроцедуры

&После("ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO")
Процедура TBK_ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Вставить содержимое метода.
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("РасшифровкаПлатежа") Тогда
		Для Каждого стрРасшифровкаПлатежа из ПолученныеДанные.ДополнительныеСвойства.РасшифровкаПлатежа Цикл
			Если НЕ стрРасшифровкаПлатежа.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
				стрРасшифровкаПлатежа.Вставить("СтатьяДвиженияДенежныхСредств");
			Конецесли;
			Если НЕ ЗначениеЗаполнено(стрРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств) Тогда
				стрРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("1.2 Торговая розничная выручка - ЭКВАЙРИНГ");
			Конецесли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры




&После("ЗаполнитьПравилаОбработкиДанных")
Процедура TBK_ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных)
	Если НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных);  
		ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

&После("ЗаполнитьПравилаКонвертацииОбъектов")
Процедура TBK_ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации)
	Если НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации);  
	КонецЕсли;
КонецПроцедуры

&После("ВыполнитьПроцедуруМодуляМенеджера")
Процедура TBK_ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры)
	Если ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	КонецЕсли;

	
	
	Если Параметры.КомпонентыОбмена.УзелКорреспондента = неопределено ИЛИ Строка(Параметры.КомпонентыОбмена.УзелКорреспондента) <> "[Табакон] БП3" Тогда
		Возврат;
	КонецЕсли;
	//Попытка
	//	Если Параметры.ДанныеXDTO.Товары <> неопределено тогда
	//		Для каждого эл из Параметры.ДанныеXDTO.Товары Цикл
	//			Если ЗначениеЗаполнено(эл.Номенклатура) Тогда
	//				Если ЗначениеЗаполнено(эл.Номенклатура.Родитель) и ЗначениеЗаполнено(эл.Номенклатура.Родитель.Родитель) Тогда
	//					Пока ЗначениеЗаполнено(эл.Номенклатура.Родитель.Родитель) Цикл
	//						эл.Номенклатура = эл.Номенклатура.Родитель;
	//					КонецЦикла
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЦикла;			
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;

КонецПроцедуры


Процедура ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПКОРозничнаяВыручка";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Получение");
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации)
	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ДокументыДвиженияНаличныхДС";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВТомЧислеНДС",          "ВТомЧислеНДС");
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "КассаККМ",              "КассаККМ", , "Справочник_КассыККМ_Получение");
	ДобавитьПКС(СвойстваШапки, "Кассир",                "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",           "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Основание",             "Основание");
	ДобавитьПКС(СвойстваШапки, "Подразделение",         "Подразделение", , "Справочник_Подразделения_Получение");
	ДобавитьПКС(СвойстваШапки, "Приложение",            "Приложение");
	ДобавитьПКС(СвойстваШапки, "ПринятоОт",             "ПринятоОт");
	ДобавитьПКС(СвойстваШапки, "СуммаДокумента",        "Сумма");
	ДобавитьПКС(СвойстваШапки, "Валюта",                "", 1);
	ДобавитьПКС(СвойстваШапки, "Проведен",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ХозяйственнаяОперация", "", 1);
КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ;
	ПолученныеДанные.Проведен = Истина;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередМержеванием_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	Мержевание_ПКО(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена);
	ПослеМержевания_ПКО(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	ПолученныеДанные = ?(ДанныеИБ = Неопределено, ПолученныеДанные, Неопределено);
КонецПроцедуры


Процедура ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СборкаТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СборкаТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СборкаТоваров_Получение");
КонецПроцедуры

