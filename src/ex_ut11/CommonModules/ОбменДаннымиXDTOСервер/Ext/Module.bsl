
&Вместо("СтруктураОбъектаXDTOВДанныеИБ")
Функция TBK_СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO, Знач ПравилоКонвертации, Действие)
	УдалятьСозданныеПоКлючевымСвойствам = КомпонентыОбмена.УдалятьСозданныеПоКлючевымСвойствам;
	Если ТипЗнч(ПравилоКонвертации) = Тип("Структура") Тогда
		Если ПравилоКонвертации.Свойство("УдалятьСозданныеПоКлючевымСвойствам") Тогда
			УдалятьСозданныеПоКлючевымСвойствам = ПравилоКонвертации.УдалятьСозданныеПоКлючевымСвойствам;
		КонецЕсли;
		ПравилоКонвертации = ПравилоКонвертации.ПравилоКонвертации;
	КонецЕсли;
	
	ДанныеИБ = Неопределено;
	ПолученныеДанные = ИнициализироватьПолученныеДанные(ПравилоКонвертации);
	СоставСвойств = "Все";
	ПолученныеДанныеСсылка = Неопределено;
	ДанныеXDTOСодержатСсылку = ДанныеXDTO.Свойство("Ссылка");
	Если ПравилоКонвертации.ЭтоСсылочныйТип Тогда
		ПолученныеДанныеСсылка = ПолученныеДанные.Ссылка;
		ВариантИдентификации = СокрЛП(ПравилоКонвертации.ВариантИдентификации);
		Если ДанныеXDTOСодержатСсылку
			И (ВариантИдентификации = "ПоУникальномуИдентификатору"
				Или ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска") Тогда
			
			ПолученныеДанныеСсылка = СсылкаОбъектаПоУИДОбъектаXDTO(
				ДанныеXDTO.Ссылка.Значение,
				ПравилоКонвертации.ТипДанных,
				КомпонентыОбмена);
				
			ПолученныеДанные.УстановитьСсылкуНового(ПолученныеДанныеСсылка);
			
			ДанныеИБ = ПолученныеДанныеСсылка.ПолучитьОбъект();
			
			Если Действие = "ПолучитьСсылку" Тогда
				
				Если ДанныеИБ <> Неопределено Тогда
					// Задача: получение ссылки.
					// Идентификация: по УИД или УИД + поля поиска.
					// Объект с полученной ссылкой (или с таким публичным идентификатором) существует.
					ЗаписатьПриНеобходимостиПубличныйИдентификатор(
						ДанныеИБ,
						ПолученныеДанныеСсылка,
						ДанныеXDTO.Ссылка.Значение,
						КомпонентыОбмена.УзелКорреспондента,
						ПравилоКонвертации);
						
					Возврат ДанныеИБ.Ссылка;
				ИначеЕсли ВариантИдентификации = "ПоУникальномуИдентификатору" Тогда
					// Задача: получение ссылки.
					// Идентификация: по УИД.
					// Объект с полученной ссылкой (или с таким публичным идентификатором) не найден.
					
					Возврат ПолученныеДанныеСсылка;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ПолученныеДанныеСсылка = ПравилоКонвертации.МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор());
			ПолученныеДанные.УстановитьСсылкуНового(ПолученныеДанныеСсылка);
		КонецЕсли;
		// Определяем, какие свойства нужно конвертировать.
		СоставСвойств = ?(Действие = "ПолучитьСсылку" И УдалятьСозданныеПоКлючевымСвойствам, "СвойстваПоиска", "Все");
	КонецЕсли;
	
	// Конвертация свойств, для которых не нужно выполнение обработчика.
	КонвертацияСвойствСтруктурыОбъектаXDTO(
		КомпонентыОбмена,
		ДанныеXDTO,
		ПолученныеДанные,
		ПравилоКонвертации,
		1,
		СоставСвойств);
		
	Если Действие = "ПолучитьСсылку" Тогда
		ДанныеXDTO = Новый Структура("КлючевыеСвойства",
			ОбщегоНазначения.СкопироватьРекурсивно(ДанныеXDTO));
	КонецЕсли;
	
	ПриКонвертацииДанныхXDTO(
		ДанныеXDTO,
		ПолученныеДанные,
		КомпонентыОбмена,
		ПравилоКонвертации.ПриКонвертацииДанныхXDTO);
		
	Если Действие = "ПолучитьСсылку" Тогда
		ДанныеXDTO = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеXDTO.КлючевыеСвойства);
	КонецЕсли;
		
	КонвертацияСвойствСтруктурыОбъектаXDTO(
		КомпонентыОбмена,
		ДанныеXDTO,
		ПолученныеДанные,
		ПравилоКонвертации,
		2,
		СоставСвойств);
		
	// В результате конвертации свойств объект мог быть записан в случае наличия циклической ссылки.
	Если ПолученныеДанныеСсылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(ПолученныеДанныеСсылка) Тогда
		ДанныеИБ = ПолученныеДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Если ПравилоКонвертации.ЭтоРегистр Тогда
			// Идентификация не производится, отбор набора записей выполняется в алгоритмах правил.
			ДанныеИБ = Неопределено;
		ИначеЕсли ВариантИдентификации = "ПоПолямПоиска"
			Или ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска" Тогда
			
			ДанныеИБ = СсылкаОбъектаПоСвойствамОбъектаXDTO(
				ПравилоКонвертации,
				ПолученныеДанные,
				ДанныеXDTOСодержатСсылку,
				КомпонентыОбмена.УзелКорреспондента);
			Если Не ЗначениеЗаполнено(ДанныеИБ) Тогда
				ДанныеИБ = Неопределено;
			КонецЕсли;
			
			// Получение (или переопределение) ссылки на найденный объект информационной базы
			// посредствам произвольного алгоритма, описанного в менеджере обмена.
			Если ПравилоКонвертации.ЕстьОбработчикАлгоритмПоиска Тогда
				АлгоритмПоиска(
					ДанныеИБ,
					ПолученныеДанные,
					КомпонентыОбмена,
					ПравилоКонвертации.АлгоритмПоиска);
			КонецЕсли;
			
			Если ДанныеИБ <> Неопределено И ПравилоКонвертации.ЭтоСсылочныйТип Тогда
				Если Действие = "ПолучитьСсылку" Тогда
					// Задача: получение ссылки.
					// Идентификация: по УИД + поля поиска.
					// Объект найден по полям поиска.
					Если ДанныеXDTOСодержатСсылку Тогда
						ЗаписатьПриНеобходимостиПубличныйИдентификатор(
							ДанныеИБ.ПолучитьОбъект(),
							ДанныеИБ,
							ДанныеXDTO.Ссылка.Значение,
							КомпонентыОбмена.УзелКорреспондента,
							ПравилоКонвертации);
					КонецЕсли;
					
					Возврат ДанныеИБ;
				Иначе
					ДанныеИБ = ДанныеИБ.ПолучитьОбъект();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписыватьОбъектВИБ = ?(Действие = "КонвертироватьИЗаписать", Истина, Ложь);
	
	Если КомпонентыОбмена.РежимЗагрузкиДанныхВИнформационнуюБазу
		И (ВариантИдентификации = "ПоПолямПоиска"
			Или ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска") Тогда
		// Объекты, при идентификации которых используются поля поиска,
		// должны быть записаны в информационную базу с целью получения одной и той же ссылки на объект при каждом поиске.
		ЗаписыватьОбъектВИБ = Истина;
	КонецЕсли;
	
	Если ЗаписыватьОбъектВИБ Тогда
		
		ЭтоПолнаяЗагрузкаОбъекта = Действие = "КонвертироватьИЗаписать"
			Или ПравилоКонвертации.РазрешитьСоздаватьОбъектИзСтруктуры
			Или (Действие = "ПолучитьСсылку"
				И Не УдалятьСозданныеПоКлючевымСвойствам
				И ДанныеИБ = Неопределено);
			
		Если ЭтоПолнаяЗагрузкаОбъекта
			И ПравилоКонвертации.ЕстьОбработчикПередЗаписьюПолученныхДанных Тогда
			
			// Полноценная загрузка объекта, удаление временного объекта.
			Если ДанныеИБ <> Неопределено Тогда
				СтрокаОбъекта = КомпонентыОбмена.ТаблицаОбъектовСозданныхПоСсылкам.Найти(ДанныеИБ.Ссылка, "СсылкаНаОбъект");
				Если СтрокаОбъекта <> Неопределено Тогда
					ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ДанныеИБ, Истина, Ложь, КомпонентыОбмена.УзелКорреспондента);
					УдалитьОбъект(ДанныеИБ, Истина, КомпонентыОбмена);
					ДанныеИБ = Неопределено;
					ПолученныеДанные.УстановитьСсылкуНового(СтрокаОбъекта.СсылкаНаОбъект);
				КонецЕсли;
			КонецЕсли;
			
			ПередЗаписьюПолученныхДанных(
				ПолученныеДанные,
				ДанныеИБ,
				КомпонентыОбмена,
				ПравилоКонвертации.ПередЗаписьюПолученныхДанных,
				ПравилоКонвертации.Свойства);
			
		КонецЕсли;
		
		Если ДанныеИБ = Неопределено Тогда
			ДанныеДляЗаписиВИБ = ПолученныеДанные;
		Иначе
			Если ПолученныеДанные <> Неопределено Тогда
				ЗаполнитьДанныеИБПоПолученнымДанным(ДанныеИБ, ПолученныеДанные, ПравилоКонвертации);
			КонецЕсли;
			ДанныеДляЗаписиВИБ = ДанныеИБ;
		КонецЕсли;
		
		Если ДанныеДляЗаписиВИБ = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
			И ПравилоКонвертации.ЭтоСсылочныйТип
			И ДанныеXDTOСодержатСсылку Тогда
			
			ЗаписатьПриНеобходимостиПубличныйИдентификатор(
				ДанныеИБ,
				?(ДанныеДляЗаписиВИБ.ЭтоНовый(), ДанныеДляЗаписиВИБ.ПолучитьСсылкуНового(), ДанныеДляЗаписиВИБ.Ссылка),
				ДанныеXDTO.Ссылка.Значение,
				КомпонентыОбмена.УзелКорреспондента,
				ПравилоКонвертации);
				
		КонецЕсли;
		
		Если ПравилоКонвертации.ЭтоСсылочныйТип И ЭтоПолнаяЗагрузкаОбъекта Тогда
			ПровестиГенерациюКодаНомераПриНеобходимости(ДанныеДляЗаписиВИБ);
		КонецЕсли;
		
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена И Не ПравилоКонвертации.ЭтоРегистр Тогда
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Авто;
			ОтправкаНазад = Ложь;
			СтандартныеПодсистемыСервер.ПриПолученииДанныхОтГлавного(
				ДанныеДляЗаписиВИБ, ПолучениеЭлемента, ОтправкаНазад, КомпонентыОбмена.УзелКорреспондентаОбъект);
			ДанныеДляЗаписиВИБ.ДополнительныеСвойства.Вставить("ПолучениеЭлементаДанных", ПолучениеЭлемента);
			
			Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
				Возврат ДанныеДляЗаписиВИБ;
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилоКонвертации.ЭтоСсылочныйТип И ДанныеДляЗаписиВИБ.ПометкаУдаления Тогда
			ДанныеДляЗаписиВИБ.ПометкаУдаления = Ложь;
		КонецЕсли;
		
		Если ПравилоКонвертации.ЭтоДокумент Тогда
			
			Попытка
				
				Если ПравилоКонвертации.ДокументМожетПроводиться Тогда
				
					Если ДанныеДляЗаписиВИБ.Проведен Тогда
						
						ДанныеДляЗаписиВИБ.Проведен = Ложь;
						Если Не ДанныеДляЗаписиВИБ.ЭтоНовый()
							И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляЗаписиВИБ.Ссылка, "Проведен") Тогда
							// Записываем новую версию документа с отменой проведения.
							Результат = ОтменитьПроведениеОбъектаВИБ(ДанныеДляЗаписиВИБ, КомпонентыОбмена.УзелКорреспондента);
						Иначе
							// Записываем новую версию документа.
							ЗаписатьОбъектВИБ(КомпонентыОбмена, ДанныеДляЗаписиВИБ, ПравилоКонвертации.ТипДанных);
							Если ДанныеДляЗаписиВИБ = Неопределено Тогда
								Возврат Неопределено;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаТаблицы = КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Добавить();
						СтрокаТаблицы.ДокументСсылка = ДанныеДляЗаписиВИБ.Ссылка;
						СтрокаТаблицы.ДатаДокумента  = ДанныеДляЗаписиВИБ.Дата;
						
					Иначе
						Если ДанныеДляЗаписиВИБ.ЭтоНовый() Тогда
							ЗаписатьОбъектВИБ(КомпонентыОбмена, ДанныеДляЗаписиВИБ, ПравилоКонвертации.ТипДанных);
							Если ДанныеДляЗаписиВИБ = Неопределено Тогда
								Возврат Неопределено;
							КонецЕсли;
						Иначе
							ОтменитьПроведениеОбъектаВИБ(ДанныеДляЗаписиВИБ, КомпонентыОбмена.УзелКорреспондента);
						КонецЕсли;
					КонецЕсли;
					//Вик 2021_03_18
					Если ТипЗнч(ДанныеДляЗаписиВИБ) = Тип("ДокументОбъект.ПеремещениеТоваров") тогда
						ОбработатьСкладскиеОрдера(ДанныеДляЗаписиВИБ, ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
					КонецЕсли;
					//КонецВик
					
				Иначе
					ЗаписатьОбъектВИБ(КомпонентыОбмена, ДанныеДляЗаписиВИБ, ПравилоКонвертации.ТипДанных);
					Если ДанныеДляЗаписиВИБ = Неопределено Тогда
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;
				
			Исключение
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		Иначе
			
			ЗаписатьОбъектВИБ(КомпонентыОбмена, ДанныеДляЗаписиВИБ, ПравилоКонвертации.ТипДанных);
			Если ДанныеДляЗаписиВИБ = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			Если ПравилоКонвертации.ЭтоСсылочныйТип Тогда
				КомпонентыОбмена.ОбъектыДляОтложеннойЗаписи.Вставить(
					ДанныеДляЗаписиВИБ.Ссылка, 
					ДанныеДляЗаписиВИБ.ДополнительныеСвойства);
			КонецЕсли;
		КонецЕсли;
		
		ЗапомнитьОбъектДляОтложенногоЗаполнения(ДанныеДляЗаписиВИБ, ПравилоКонвертации, КомпонентыОбмена);
		
	Иначе
		
		ДанныеДляЗаписиВИБ = ПолученныеДанные;
		
	КонецЕсли;
	
	Если ПравилоКонвертации.ЭтоСсылочныйТип Тогда
		// Объекты, создаваемые по ссылке, запоминаем в таблицу,
		// чтобы после загрузки всех данных удалить объекты, 
		// которые так и не были загружены полностью ("временные объекты").
		// При загрузке объектов "целиком" удаляем объекты из таблицы,
		// переводя их из состояния "временных" в "постоянные".
		ТаблицаОбъектовСозданныхПоСсылкам = КомпонентыОбмена.ТаблицаОбъектовСозданныхПоСсылкам;
			
		Если Действие = "ПолучитьСсылку"
			И ЗаписыватьОбъектВИБ
			И Не ПравилоКонвертации.РазрешитьСоздаватьОбъектИзСтруктуры Тогда
			
			СтрокаОбъекта = ТаблицаОбъектовСозданныхПоСсылкам.Найти(ДанныеДляЗаписиВИБ.Ссылка, "СсылкаНаОбъект");
			
			Если СтрокаОбъекта = Неопределено Тогда
				НоваяСтрока = ТаблицаОбъектовСозданныхПоСсылкам.Добавить();
				НоваяСтрока.СсылкаНаОбъект = ДанныеДляЗаписиВИБ.Ссылка;
				НоваяСтрока.УдалятьСозданныеПоКлючевымСвойствам = УдалятьСозданныеПоКлючевымСвойствам;
			Иначе
				Если Не УдалятьСозданныеПоКлючевымСвойствам Тогда
					СтрокаОбъекта.УдалятьСозданныеПоКлючевымСвойствам = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Действие = "КонвертироватьИЗаписать" Тогда
			
			СтрокаОбъекта = ТаблицаОбъектовСозданныхПоСсылкам.Найти(ДанныеДляЗаписиВИБ.Ссылка, "СсылкаНаОбъект");
			
			Если СтрокаОбъекта <> Неопределено Тогда
				ТаблицаОбъектовСозданныхПоСсылкам.Удалить(СтрокаОбъекта);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеДляЗаписиВИБ;
КонецФункции  

//ОбработатьСкладскиеОрдера(ДанныеДляЗаписиВИБ, ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
Процедура ОбработатьСкладскиеОрдера(ДокументПеремещение, ДополнительныеСвойства, КомпонентыОбмена)
	Если ДокументПеремещение.СкладОтправитель.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин тогда 
		Если ДополнительныеСвойства.Свойство("НомерОрдераР") тогда
			Если  СокрЛП(ДополнительныеСвойства.НомерОрдераР) <> "" тогда
				
				СформироватьПерезаполнитьРасходныйОрдер(ДокументПеремещение, ДополнительныеСвойства, КомпонентыОбмена);	
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли; 	
	
	Если ДокументПеремещение.СкладПолучатель.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин тогда
		Если ДополнительныеСвойства.Свойство("НомерОрдераП") тогда
			Если  СокрЛП(ДополнительныеСвойства.НомерОрдераП) <> "" тогда
				
				СформироватьПерезаполнитьПриходныйОрдер(ДокументПеремещение, ДополнительныеСвойства, КомпонентыОбмена);	
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли; 	
КонецПроцедуры

Процедура СформироватьПерезаполнитьРасходныйОрдер(ДокументПеремещение, ДополнительныеСвойства, КомпонентыОбмена)
	Запрос	=	Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	      	 	             |	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	      	 	             |ГДЕ
	      	 	             |	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &Распоряжение
	      	 	             |	И НЕ РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.ПометкаУдаления");
	Запрос.УстановитьПараметр("Распоряжение",ДокументПеремещение.Ссылка);
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() >0 тогда
		Для каждого Строка из Рез цикл
			Об = Строка.Ссылка.ПолучитьОбъект();
			Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
		НужныйДок = Рез[0].Ссылка.ПолучитьОбъект();
		НужныйДок.ТоварыПоРаспоряжениям.Очистить();
		НужныйДок.ОтгружаемыеТовары.Очистить();
	иначе
		НужныйДок	=	Документы.РасходныйОрдерНаТовары.СоздатьДокумент();		
	КонецЕсли;
	
	НужныйДок.Дата				=	ДополнительныеСвойства.ДатаОрдераР;	
	НужныйДок.Номер				=	ДополнительныеСвойства.НомерОрдераР;
	
	НужныйДок.Ответственный		=	ДокументПеремещение.Ответственный;
	НужныйДок.ДатаОтгрузки		=	НужныйДок.Дата;
	НужныйДок.Получатель		=	ДокументПеремещение.СкладПолучатель;
	НужныйДок.Склад				=	ДокументПеремещение.СкладОтправитель;
	НужныйДок.СкладскаяОперация	=	Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
	НужныйДок.Статус			=	Перечисления.СтатусыРасходныхОрдеров.Отгружен;
	НужныйДок.Приоритет			=	Справочники.Приоритеты.НайтиПоНаименованию("Средний");
	
	Для каждого СтрокаТовары из ДокументПеремещение.Товары цикл
		НоваяСтрока = НужныйДок.ТоварыПоРаспоряжениям.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовары);
		НоваяСтрока.Распоряжение	=	ДокументПеремещение.Ссылка;
		
		НоваяСтрока = НужныйДок.ОтгружаемыеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовары); 
		НоваяСтрока.КоличествоУпаковок	=	СтрокаТовары.Количество;
		НоваяСтрока.Действие			=	Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
	КонецЦикла;	
	
	НужныйДок.Записать();
	
	СтрокаТаблицы = КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Добавить();
	СтрокаТаблицы.ДокументСсылка = НужныйДок.Ссылка;
	СтрокаТаблицы.ДатаДокумента  = НужныйДок.Дата;
КонецПроцедуры

Процедура СформироватьПерезаполнитьПриходныйОрдер(ДокументПеремещение, ДополнительныеСвойства, КомпонентыОбмена)
	Запрос	=	Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	      	 	             |	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
	      	 	             |ИЗ
	      	 	             |	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	      	 	             |ГДЕ
	      	 	             |	НЕ ПриходныйОрдерНаТовары.Ссылка.ПометкаУдаления
	      	 	             |	И ПриходныйОрдерНаТовары.Распоряжение = &Распоряжение");
	Запрос.УстановитьПараметр("Распоряжение",ДокументПеремещение.Ссылка);
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество() >0 тогда
		Для каждого Строка из Рез цикл
			Об = Строка.Ссылка.ПолучитьОбъект();
			Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
		НужныйДок = Рез[0].Ссылка.ПолучитьОбъект();
		НужныйДок.Товары.Очистить();
	иначе
		НужныйДок	=	Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();		
	КонецЕсли;
	
	НужныйДок.Дата				=	ДополнительныеСвойства.ДатаОрдераП;	
	НужныйДок.Номер				=	ДополнительныеСвойства.НомерОрдераП;

	НужныйДок.Распоряжение			=	ДокументПеремещение.Ссылка;
	НужныйДок.Ответственный			=	ДокументПеремещение.Ответственный;
	НужныйДок.Отправитель			=	ДокументПеремещение.СкладОтправитель;
	НужныйДок.Склад					=	ДокументПеремещение.СкладПолучатель;
	НужныйДок.СкладскаяОперация		=	Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;
	НужныйДок.Статус				=	Перечисления.СтатусыПриходныхОрдеров.Принят;
	НужныйДок.ХозяйственнаяОперация	=	Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	
	Для каждого СтрокаТовары из ДокументПеремещение.Товары цикл
		НоваяСтрока = НужныйДок.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТовары); 
		НоваяСтрока.КоличествоУпаковок	=	СтрокаТовары.Количество;
	КонецЦикла;	
	
	НужныйДок.Записать();
	
	СтрокаТаблицы = КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Добавить();
	СтрокаТаблицы.ДокументСсылка = НужныйДок.Ссылка;
	СтрокаТаблицы.ДатаДокумента  = НужныйДок.Дата;
КонецПроцедуры

//Вик 2021_04_01
&После("ПриКонвертацииДанныхXDTO")
Процедура TBK_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, Знач ИмяОбработчика)
	
	Если ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") или
		ТипЗнч(ПолученныеДанные) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") тогда
		ПроставитьКассуРКОПКО(ДанныеXDTO,ПолученныеДанные)
	КонецЕсли;	

КонецПроцедуры

Процедура ПроставитьКассуРКОПКО(ДанныеXDTO,ПолученныеДанные);
	Попытка
		НужнаяКасса = Неопределено;
		НужнаяКасса = Справочники.Кассы.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеXDTO.AdditionalInfo.Касса.Ссылка));
		Если ЗначениеЗаполнено(НужнаяКасса) тогда
			ПолученныеДанные.Касса = НужнаяКасса;	
		КонецЕсли;
	Исключение
	КонецПопытки;	
КонецПроцедуры
//КонецВик