
Перем МояФабрикаXDTO;

Процедура ED_ПриОбменеДанными(СтандартнаяОбработка,
								ПолучательОтправитель,
								ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоОтправленныхПолученныхОбъектов,
								ВыгрузкаЗагрузка
	) Экспорт
	
	СтандартнаяОбработка					= Ложь;
	УзелДляОбмена							= ПолучательОтправитель;
	ИмяФайлаОбмена							= ИмяФайлаСообщения;
	КлючСообщенияЖурналаРегистрации			= ИмяСобытияЖурналаРегистрации;
	ВыводВПротоколИнформационныхСообщений	= Ложь;
	ДописыватьДанныеВПротоколОбмена			= Истина;
	ИмяФайлаПротоколаОбмена					= "";
	
	Если ВыгрузкаЗагрузка Тогда
		//ВЫГРУЗКА
		РезультатОбмена = ВыполнитьВыгрузкуДанных_В_EnterpriseData();
		КоличествоОтправленныхПолученныхОбъектов = РезультатОбмена.ВыгруженоОбъектов;
	Иначе
		//ЗАГРУЗКА
		РезультатОбмена = ВыполнитьЗагрузкуДанных_EnterpriseData();
		КоличествоОтправленныхПолученныхОбъектов = РезультатОбмена.ЗагруженоОбъектов;
	КонецЕсли;
	
		Если РезультатОбмена.ФлагОшибки Тогда
			ВызватьИсключение РезультатОбмена.СтрокаСообщенияОбОшибке;
		КонецЕсли;	
	
КонецПроцедуры

//{ ИнициализацияПараметровОбработки

Функция ВыполнитьВыгрузкуДанных_В_EnterpriseData(КомпонентыОбменаПереопределяемые=Неопределено) Экспорт
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ВыгруженоОбъектов",0);
	РезультатВыгрузки.Вставить("ОбработаноОбъектов",0);
	РезультатВыгрузки.Вставить("ФлагОшибки",Ложь);
	РезультатВыгрузки.Вставить("СтрокаСообщенияОбОшибке","");
	ПродолжитьПриОшибке = Ложь;

	КомпонентыОбмена = ИнициализироватьКомпонентыОбмена("Отправка", КомпонентыОбменаПереопределяемые);
	
	Если ПустаяСтрока(КлючСообщенияЖурналаРегистрации) Тогда
		КлючСообщенияЖурналаРегистрации = ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(УзелДляОбмена,Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	КонецЕсли;
	КаталогОбмена = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогОбмена);
		
	Если ПустаяСтрока(ИмяФайлаОбмена) Тогда
		ИмяФайлаОбмена = КаталогОбмена + "\ФайлОбмена_EnterpriseData.xml";
	КонецЕсли;
	
	КомпонентыОбмена.ВедениеПротоколаДанных.ВыводВПротоколИнформационныхСообщений = ВыводВПротоколИнформационныхСообщений;
	КомпонентыОбмена.КлючСообщенияЖурналаРегистрации = КлючСообщенияЖурналаРегистрации;
	
	//{ Область НастройкаКомпонентовОбменаНаРаботуСУзлом
	КомпонентыОбмена.УзелКорреспондента = УзелДляОбмена;
	
	КомпонентыОбмена.ТаблицаПравилаРегистрацииОбъектов = ПравилаРегистрацииОбъектов(УзелДляОбмена);
	КомпонентыОбмена.СвойстваУзлаПланаОбмена = СвойстваУзлаПланаОбмена(УзелДляОбмена);
	СоздатьМоюФабрикуXDTO(КомпонентыОбмена);
	
	ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена);
	//} КонецОбласти
	
	ИнициализироватьВедениеПротоколаОбмена(КомпонентыОбмена, ИмяФайлаПротоколаОбмена);
	ИнициализироватьПараметрыКонвертации(КомпонентыОбмена, КомпонентыОбменаПереопределяемые);
	
	// Открываем файл обмена
	ОткрытьФайлВыгрузки(КомпонентыОбмена, ИмяФайлаОбмена);
	
	
	Если КомпонентыОбмена.ФлагОшибки Тогда
		КомпонентыОбмена.ФайлОбмена = Неопределено;
		ЗавершитьВедениеПротоколаОбмена(КомпонентыОбмена);
		РезультатВыгрузки.ФлагОшибки = КомпонентыОбмена.ФлагОшибки;
		РезультатВыгрузки.СтрокаСообщенияОбОшибке = КомпонентыОбмена.СтрокаСообщенияОбОшибке;
		Возврат РезультатВыгрузки;
	Иначе
		
		// ВЫГРУЗКА ДАННЫХ
		ПроизвестиВыгрузкуДанных(КомпонентыОбмена);
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Если КомпонентыОбмена.Свойство("ОбъектыНеПрошедшиеПроверку") Тогда
				
				Макет = ПолучитьМакет("ОбъектыНеПрошедшиеПроверку");
				
				ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
				ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
				ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
				ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
				ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
				
				ТабДок = Новый ТабличныйДокумент;
				ТабДок.Очистить();
				ТабДок.Вывести(ОбластьЗаголовок);
				ТабДок.Вывести(ОбластьШапкаТаблицы);
				ТабДок.НачатьАвтогруппировкуСтрок();
				
				
				Для Каждого СтрокаСписка  Из КомпонентыОбмена.ОбъектыНеПрошедшиеПроверку Цикл
					ДанныеОтчета = Новый Структура ("Ссылка, Представление, ТекстОшибки",
					СтрокаСписка.Значение,
					Строка(СтрокаСписка.Значение),
					СтрокаСписка.Представление,
					);
					ОбластьДетальныхЗаписей.Параметры.Заполнить(ДанныеОтчета);
					ТабДок.Вывести(ОбластьДетальныхЗаписей);
				КонецЦикла;
				
				ТабДок.ЗакончитьАвтогруппировкуСтрок();
				ТабДок.Вывести(ОбластьПодвалТаблицы);
				ТабДок.Вывести(ОбластьПодвал);
				ТабДок.ФиксацияСверху = 5;
				ТабДок.ТолькоПросмотр = Истина;
				ТабДок.Показать();
				
			КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
	РезультатВыгрузки.ВыгруженоОбъектов = КомпонентыОбмена.ВыгруженныеОбъекты.Количество();
	РезультатВыгрузки.ОбработаноОбъектов = КомпонентыОбмена.СчетчикВыгруженныхОбъектов;
	РезультатВыгрузки.ФлагОшибки = КомпонентыОбмена.ФлагОшибки;
	РезультатВыгрузки.СтрокаСообщенияОбОшибке = КомпонентыОбмена.СтрокаСообщенияОбОшибке;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ВыполнитьЗагрузкуДанных_EnterpriseData(КомпонентыОбменаПереопределяемые=Неопределено) Экспорт
	
	РезультатЗагрузки = Новый Структура;
	РезультатЗагрузки.Вставить("ЗагруженоОбъектов",0);
	РезультатЗагрузки.Вставить("ОбработаноОбъектов",0);
	РезультатЗагрузки.Вставить("ФлагОшибки",Ложь);
	РезультатЗагрузки.Вставить("СтрокаСообщенияОбОшибке", "");
	РезультатЗагрузки.Вставить("РезультатВыполненияОбмена", "");
	ПродолжитьПриОшибке = Ложь;
	
	Если ПустаяСтрока(КлючСообщенияЖурналаРегистрации) Тогда
		КлючСообщенияЖурналаРегистрации = ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(УзелДляОбмена,Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	КонецЕсли;
	КомпонентыОбмена = ИнициализироватьКомпонентыОбмена("Получение", КомпонентыОбменаПереопределяемые);
	
	КомпонентыОбмена.КлючСообщенияЖурналаРегистрации = КлючСообщенияЖурналаРегистрации;
	КомпонентыОбмена.УзелКорреспондента = УзелДляОбмена;
	КомпонентыОбмена.СвойстваУзлаПланаОбмена = СвойстваУзлаПланаОбмена(УзелДляОбмена);
	
	КаталогОбмена = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогОбмена);
	СоздатьМоюФабрикуXDTO(КомпонентыОбмена);
	
	КомпонентыОбмена.ВедениеПротоколаДанных.ВыводВПротоколИнформационныхСообщений = ВыводВПротоколИнформационныхСообщений;
	РежимЗагрузкиДанных = "ЗагрузкаВИнформационнуюБазу";
	
	КомпонентыОбмена.СостояниеОбменаДанными.ДатаНачала = ТекущаяДатаСеанса();
	
	ИнициализироватьВедениеПротоколаОбмена(КомпонентыОбмена, ИмяФайлаПротоколаОбмена);
	
	Если ПустаяСтрока(ИмяФайлаОбмена) Тогда
		ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 15);
		ЗавершитьВедениеПротоколаОбмена(КомпонентыОбмена);
		РезультатЗагрузки.ФлагОшибки = КомпонентыОбмена.ФлагОшибки;
		РезультатЗагрузки.СтрокаСообщенияОбОшибке = КомпонентыОбмена.СтрокаСообщенияОбОшибке;
		Возврат РезультатЗагрузки;
	КонецЕсли;
	
	Если ПродолжитьПриОшибке Тогда
		ИспользоватьТранзакции = Ложь;
		КомпонентыОбмена.ИспользоватьТранзакции = Ложь;
	КонецЕсли;
	
	ОткрытьФайлЗагрузки(КомпонентыОбмена, ИмяФайлаОбмена);
	
	Если КомпонентыОбмена.ФлагОшибки Тогда
		ЗавершитьВедениеПротоколаОбмена(КомпонентыОбмена);
		РезультатЗагрузки.ФлагОшибки = КомпонентыОбмена.ФлагОшибки;
		РезультатЗагрузки.СтрокаСообщенияОбОшибке = КомпонентыОбмена.СтрокаСообщенияОбОшибке;
		Возврат РезультатЗагрузки;
	КонецЕсли;
	
	РезультатПодсчетаДанныхКЗагрузке = ОбменДаннымиС_РезультатПодсчетаДанныхКЗагрузке(ИмяФайлаОбмена, Истина);
	КомпонентыОбмена.Вставить("РазмерФайлаСообщенияОбмена", РезультатПодсчетаДанныхКЗагрузке.РазмерФайлаСообщенияОбмена);
	КомпонентыОбмена.Вставить("КоличествоОбъектовКЗагрузке", РезультатПодсчетаДанныхКЗагрузке.КоличествоОбъектовКЗагрузке);
	
	ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена);
	
	Попытка
		ПроизвестиЧтениеДанных(КомпонентыОбмена);
	Исключение
		
		СтрокаСообщения = НСтр("ru = 'Ошибка при загрузке данных: %1'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ОписаниеОшибки());
		ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщения,,,,,Истина);
		КомпонентыОбмена.ФлагОшибки = Истина;
	КонецПопытки;
	
	УдалитьВременныеОбъектыСозданныеПоСсылкам(КомпонентыОбмена);
	
	КомпонентыОбмена.ФайлОбмена.Закрыть();
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена И НЕ КомпонентыОбмена.ФлагОшибки Тогда
		
		// Запишем информацию о номере входящего сообщения.
		ОбъектУзла = КомпонентыОбмена.УзелКорреспондента.ПолучитьОбъект();
		ОбъектУзла.НомерПринятого = КомпонентыОбмена.НомерВходящегоСообщения;
		ОбъектУзла.ДополнительныеСвойства.Вставить("ПолучениеСообщенияОбмена");
		ОбъектУзла.Записать();
		
	КонецЕсли;
	
	ЗавершитьВедениеПротоколаОбмена(КомпонентыОбмена);
	
	РезультатЗагрузки.ОбработаноОбъектов = КомпонентыОбмена.КоличествоОбъектовКЗагрузке;
	РезультатЗагрузки.ЗагруженоОбъектов = КомпонентыОбмена.СчетчикЗагруженныхОбъектов;
	РезультатЗагрузки.ФлагОшибки = КомпонентыОбмена.ФлагОшибки;
	РезультатЗагрузки.СтрокаСообщенияОбОшибке = КомпонентыОбмена.СтрокаСообщенияОбОшибке;
	РезультатЗагрузки.РезультатВыполненияОбмена = КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена;
	
	Возврат РезультатЗагрузки;
	
КонецФункции

Функция ПолучитьИмяОбработкиОбмена() Экспорт
	Возврат ЭтотОбъект.Метаданные().Имя;
КонецФункции

Функция ПолучитьТаблицуПравилВыгрузкиОстатковТекущую() Экспорт
	
	Возврат ПолучитьТаблицуПравилВыгрузкиОстатков();
	
КонецФункции

Функция ПолучитьВерсииФорматаОбменаОбработки() Экспорт
	
	ВерсииФорматаОбмена = Новый Соответствие;
	ПолучитьВерсииФорматаОбмена(ВерсииФорматаОбмена);
	ВерсииФормата = Новый СписокЗначений;
	Для Каждого Версия Из ВерсииФорматаОбмена Цикл
		ВерсииФормата.Добавить(Версия.Ключ);
	КонецЦикла;
	
	Возврат ВерсииФормата;
	
КонецФункции

Функция СведенияОВнешнейОбработке() Экспорт
	
	Возврат Новый Структура("Версия", ПолучитьВерсию());
	
КонецФункции

//}

// **** Служебные процедуры и функции обработки **** 
  
Функция ПолучитьВерсию()
	Возврат "УТ 10.3.60 выгрузка  2021-01-18";
КонецФункции

//{ Область СлужебныеПроцедурыФункцииОбработки
//{ Область СтроковыеФункцииКлиентСервер
Функция СтроковыеФункцииКлиентСервер_СтрокаВДату(ДатаСтрокой)
	Значение = СтрЗаменить(Значение, " ", "");
	Значение = СокрЛП(СтрЗаменить(Значение, ".", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, "/", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, "-", ""));
	Значение = Сред(Значение, 5) + Сред(Значение, 3, 2) + Лев(Значение, 2);
	Если СтрДлина(Значение) = 6 Тогда
		Год = СтроковыеФункцииКлиентСервер_СтрокаВЧисло(Лев(Значение, 2));
		Если Год = Неопределено Тогда 
			Возврат Дата('0001.01.01');
		КонецЕсли;
		Значение = ?(Год > 29, "19", "20") + Значение;
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Результат    = ОписаниеТипа.ПривестиЗначение(Значение);
	
	Возврат Результат;
КонецФункции
Функция СтроковыеФункцииКлС_СтрокаИзМассиваПодстрок(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)
	Результат = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Если Индекс > 0 Тогда
			Результат = Результат + Разделитель;
		КонецЕсли;
		
		Результат = Результат + Подстрока;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
Функция СтроковыеФункции_СтрРазделить(Знач Стр, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено)
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр, Разделитель, ПропускатьПустыеСтроки);
КонецФункции
Функция СтроковыеФункцииКлиентСервер_СтрокаВЧисло(Знач Значение)
	Значение  = СтрЗаменить(Значение, " ", "");
	Если Найти(Значение, "(")=1 Тогда
		Значение = СтрЗаменить(Значение, "(", "-");
		Значение = СтрЗаменить(Значение, ")", "");
	КонецЕсли;
	
	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) Или СтрокаБезНулей = "-" Тогда
		Возврат 0;
	КонецЕсли;
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, Неопределено);
КонецФункции
//} КонецОбласти
//{ Область ИнициализацияПараметровОбработки
Функция ВыполнитьФункциюМодуляМенеджера(ПравилоОбработкиВыборкаДанных, СтруктураПараметров)
	Возврат Новый ТаблицаЗначений;
КонецФункции
Процедура ИнициализироватьПараметрыКонвертации(КомпонентыОбмена, КомпонентыОбменаПереопределяемые=Неопределено)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	
	Если КомпонентыОбмена.НаправлениеОбмена="Отправка" Тогда
		
		СтруктураНастроек = КомпонентыОбмена.СвойстваУзлаПланаОбмена.СохраненныеНастройкиУзлаОбмена;
		ПараметрыКонвертации.Вставить("ВыгружатьСвязанныеСсылки",Ложь);
		
		Если ТипЗнч(СтруктураНастроек)=Тип("Структура") Тогда
			ВыгружатьСвязанныеСсылкиДата = Неопределено;
			Если СтруктураНастроек.Свойство("ВыгружатьСвязанныеСсылкиДата", ВыгружатьСвязанныеСсылкиДата) 
				И ТипЗнч(ВыгружатьСвязанныеСсылкиДата)=Тип("Дата")
				И ВыгружатьСвязанныеСсылкиДата>=ТекущаяДата() Тогда
				ПараметрыКонвертации.ВыгружатьСвязанныеСсылки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыКонвертации.Вставить("ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете",ЛОЖЬ);
		ПараметрыКонвертации.Вставить("ВыгружатьАналитикуПоСкладам",Истина);
		ПараметрыКонвертации.Вставить("ДатаНачалаВыгрузкиДокументов",НачалоГода(ТекущаяДата()));
		ПараметрыКонвертации.Вставить("ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю",Истина);
		ПараметрыКонвертации.Вставить("РежимВыгрузкиПриНеобходимости", Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВсегда);
		ПараметрыКонвертации.Вставить("ПодразделениеПоУмолчанию",Неопределено);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбменУправлениеТорговлейБухгалтерия.ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете,
		|	ОбменУправлениеТорговлейБухгалтерия.ВыгружатьАналитикуПоСкладам,
		|	ОбменУправлениеТорговлейБухгалтерия.ДатаНачалаВыгрузкиДокументов,
		|	ОбменУправлениеТорговлейБухгалтерия.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю,
		|	ОбменУправлениеТорговлейБухгалтерия.РежимВыгрузкиПриНеобходимости,
		|	ОбменУправлениеТорговлейБухгалтерия.ПодразделениеПоУмолчанию
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлей103БухгалтерияПредприятия30 КАК ОбменУправлениеТорговлейБухгалтерия
		|ГДЕ
		|	ОбменУправлениеТорговлейБухгалтерия.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УзелОрганизации.Организация
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлей103БухгалтерияПредприятия30.Организации КАК УзелОрганизации
		|ГДЕ
		|	УзелОрганизации.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УзелСклады.Склад
		|ИЗ
		|	ПланОбмена.ОбменУправлениеТорговлей103БухгалтерияПредприятия30.Склады КАК УзелСклады
		|ГДЕ
		|	УзелСклады.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", КомпонентыОбмена.УзелКорреспондента);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаРеквизиты = РезультатЗапроса[0].Выбрать();
		Если ВыборкаРеквизиты.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, ВыборкаРеквизиты);	
		КонецЕсли;
	
		ВыборкаОрганизаций = РезультатЗапроса[1].Выбрать();
		Если ВыборкаОрганизаций.Количество()>0 Тогда
			ПараметрыКонвертации.Вставить("Организации", Новый СписокЗначений);
		КонецЕсли;
		Пока ВыборкаОрганизаций.Следующий() Цикл
			ПараметрыКонвертации.Организации.Добавить(ВыборкаОрганизаций.Организация);
		КонецЦикла;
	
		ВыборкаСкладов = РезультатЗапроса[2].Выбрать();
		Если ВыборкаСкладов.Количество()>0 Тогда
			ПараметрыКонвертации.Вставить("Склады", Новый СписокЗначений);
		КонецЕсли;
		Пока ВыборкаСкладов.Следующий() Цикл
			ПараметрыКонвертации.Склады.Добавить(ВыборкаСкладов.Склад);
		КонецЦикла;
		
		СтруктураНастроекВыгрузкиОстатков = КомпонентыОбмена.СвойстваУзлаПланаОбмена.СохраненныеНастройкиУзлаОбменаВыгрузкаОстатков;
		Если ТипЗнч(СтруктураНастроекВыгрузкиОстатков)=Тип("Структура") Тогда
			НомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелДляОбмена, "НомерОтправленного");
			НомерОтправленногоНастройка = Неопределено;
			СтруктураНастроекВыгрузкиОстатков.Свойство("НомерОтправленного", НомерОтправленногоНастройка);
			Если НомерОтправленного=НомерОтправленногоНастройка И СтруктураНастроекВыгрузкиОстатков.Свойство("ОстаткиДляВыгрузки") Тогда
				ПараметрыКонвертации.Вставить("ОстаткиДляВыгрузки", СтруктураНастроекВыгрузкиОстатков.ОстаткиДляВыгрузки);
				ПараметрыКонвертации.Вставить("ДатаОстатков", СтруктураНастроекВыгрузкиОстатков.ДатаОстатков);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	Если НЕ КомпонентыОбменаПереопределяемые=Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, КомпонентыОбменаПереопределяемые);
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область ОбменДаннымиXDTOСервер
//{ Область ПрограммныйИнтерфейс
//{ Область ИнициализацияОбмена
Функция ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации)
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.Свойства = ИнициализироватьТаблСвойствДляПравилаКонвертации();
	Возврат ПравилоКонвертации;
КонецФункции
Функция ИнициализироватьКомпонентыОбмена(НаправлениеОбмена, КомпонентыОбменаПереопределяемые=Неопределено)
	КомпонентыОбмена = Новый Структура("
		|ВерсияФорматаОбмена,
		|XMLСхема,
		|МенеджерОбмена,
		|УзелКорреспондента");
		
	КомпонентыОбмена.Вставить("НаправлениеОбмена", НаправлениеОбмена);
	КомпонентыОбмена.Вставить("ЭтоОбменЧерезПланОбмена", Истина);
	КомпонентыОбмена.Вставить("ФлагОшибки", Ложь);
	КомпонентыОбмена.Вставить("СтрокаСообщенияОбОшибке", "");
	КомпонентыОбмена.Вставить("КлючСообщенияЖурналаРегистрации", ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными());
	
	СостояниеОбменаДанными = Новый Структура;
	СостояниеОбменаДанными.Вставить("УзелИнформационнойБазы");
	СостояниеОбменаДанными.Вставить("ДействиеПриОбмене");
	СостояниеОбменаДанными.Вставить("ДатаНачала");
	СостояниеОбменаДанными.Вставить("ДатаОкончания");
	СостояниеОбменаДанными.Вставить("РезультатВыполненияОбмена");
	
	КомпонентыОбмена.Вставить("СостояниеОбменаДанными", СостояниеОбменаДанными);
	
	ВедениеПротоколаДанных = Новый Структура;
	ВедениеПротоколаДанных.Вставить("ФайлПротоколаДанных", Неопределено);
	ВедениеПротоколаДанных.Вставить("ВыводВПротоколИнформационныхСообщений", Ложь);
	ВедениеПротоколаДанных.Вставить("ДописыватьДанныеВПротоколОбмена", ДописыватьДанныеВПротоколОбмена);
	КомпонентыОбмена.Вставить("ВедениеПротоколаДанных", ВедениеПротоколаДанных);
	
	КомпонентыОбмена.Вставить("ИспользоватьТранзакции", Истина);
	КомпонентыОбмена.Вставить("СвойстваУзлаПланаОбмена");
	
	Если НаправлениеОбмена = "Отправка" Тогда
		
		КомпонентыОбмена.Вставить("ВыгруженныеОбъекты", Новый Массив);
		КомпонентыОбмена.Вставить("КоличествоОбъектовКВыгрузке", 0);
		КомпонентыОбмена.Вставить("СчетчикВыгруженныхОбъектов", 0);
		КомпонентыОбмена.Вставить("СоответствиеРегистрацияПоНеобходимости", Новый Соответствие);
		КомпонентыОбмена.Вставить("ВыгруженныеПоСсылкеОбъекты", Новый Массив);
		
		КомпонентыОбмена.Вставить("СценарийВыгрузки");
		КомпонентыОбмена.Вставить("ТаблицаКВыгрузке");
		
		КомпонентыОбмена.Вставить("ТаблицаПравилаРегистрацииОбъектов");
		
	Иначе
		
		КомпонентыОбмена.Вставить("НомерВходящегоСообщения");
		КомпонентыОбмена.Вставить("НомерСообщенияПолученногоКорреспондентом");
		
		КомпонентыОбмена.Вставить("РежимЗагрузкиДанныхВИнформационнуюБазу", Истина);
		КомпонентыОбмена.Вставить("СчетчикЗагруженныхОбъектов", 0);
		КомпонентыОбмена.Вставить("КоличествоОбъектовНаТранзакцию", 0);
		КомпонентыОбмена.Вставить("КоличествоОбъектовКЗагрузке", 0);
		КомпонентыОбмена.Вставить("РазмерФайлаСообщенияОбмена", 0);
		
		ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДатаДокумента",           Новый ОписаниеТипов("Дата"));
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументПроведенУспешно", Новый ОписаниеТипов("Булево"));
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ЭтоКоллизия", Новый ОписаниеТипов("Число"));
		КомпонентыОбмена.Вставить("ДокументыДляОтложенногоПроведения", ДокументыДляОтложенногоПроведения);
		
		ЗагруженныеОбъекты = Новый ТаблицаЗначений;
		ЗагруженныеОбъекты.Колонки.Добавить("ИмяОбработчика");
		ЗагруженныеОбъекты.Колонки.Добавить("Объект");
		ЗагруженныеОбъекты.Колонки.Добавить("Параметры");
		ЗагруженныеОбъекты.Колонки.Добавить("СсылкаНаОбъект");
		КомпонентыОбмена.Вставить("ЗагруженныеОбъекты", ЗагруженныеОбъекты);
		
		ТаблицаОбъектовСозданныхПоСсылкам = Новый ТаблицаЗначений();
		ТаблицаОбъектовСозданныхПоСсылкам.Колонки.Добавить("СсылкаНаОбъект");
		КомпонентыОбмена.Вставить("ТаблицаОбъектовСозданныхПоСсылкам", ТаблицаОбъектовСозданныхПоСсылкам);
		КомпонентыОбмена.Вставить("ТаблицаДанныхЗаголовкаПакета", НоваяТаблицаДанныхЗаголовкаПакета());
		
		КомпонентыОбмена.Вставить("ТаблицыДанныхСообщенияОбмена", Новый Соответствие);
		
		КомпонентыОбмена.Вставить("ОбъектыДляОтложеннойЗаписи", Новый Соответствие);
		
	КонецЕсли;
	
	Если НЕ КомпонентыОбменаПереопределяемые=Неопределено Тогда
		ЗаполнитьЗначенияСвойств(КомпонентыОбмена, КомпонентыОбменаПереопределяемые);
	КонецЕсли;
	
	Возврат КомпонентыОбмена;
КонецФункции
Процедура ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена)
	НаправлениеОбмена = КомпонентыОбмена.НаправлениеОбмена;
	XMLСхема = КомпонентыОбмена.XMLСхема;
	МенеджерОбмена = КомпонентыОбмена.МенеджерОбмена;
	
	// Инициализация таблиц правил обмена.
	КомпонентыОбмена.Вставить("ПравилаОбработкиДанных", ТаблицаПравилОбработкиДанных(XMLСхема, МенеджерОбмена, НаправлениеОбмена));
	КомпонентыОбмена.Вставить("ПравилаКонвертацииОбъектов", ТаблицаПравилКонвертации(XMLСхема, МенеджерОбмена, НаправлениеОбмена, КомпонентыОбмена.ПравилаОбработкиДанных));
	
	КомпонентыОбмена.Вставить("ПравилаКонвертацииПредопределенныхДанных",
		ТаблицаПравилКонвертацииПредопределенныхДанных(XMLСхема, МенеджерОбмена, НаправлениеОбмена));
	
	КомпонентыОбмена.Вставить("ПараметрыКонвертации", СтруктураПараметровКонвертации(МенеджерОбмена));
КонецПроцедуры
//} КонецОбласти
//{ Область ВедениеПротокола
Процедура ИнициализироватьВедениеПротоколаОбмена(КомпонентыОбмена, ИмяФайлаПротоколаОбмена)
	КомпонентыОбмена.ВедениеПротоколаДанных.ФайлПротоколаДанных = Неопределено;
	Если Не ПустаяСтрока(ИмяФайлаПротоколаОбмена) Тогда
		
		// Попытка записи в файл протокола обмена.
		Попытка
			КомпонентыОбмена.ВедениеПротоколаДанных.ФайлПротоколаДанных = Новый ЗаписьТекста(
				ИмяФайлаПротоколаОбмена,
				КодировкаТекста.ANSI,,
				КомпонентыОбмена.ВедениеПротоколаОбмена.ДописыватьДанныеВПротоколОбмена);
		Исключение
			
			СтрокаСообщения = НСтр("ru = 'Ошибка при попытке записи в файл протокола данных: %1. Описание ошибки: %2'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ИмяФайлаПротоколаОбмена, ОписаниеОшибки());
			
			ЗаписьЖурналаРегистрацииОбменДанными(СтрокаСообщения, КомпонентыОбмена, УровеньЖурналаРегистрации.Предупреждение);
			
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗавершитьВедениеПротоколаОбмена(КомпонентыОбмена)
	Если КомпонентыОбмена.ВедениеПротоколаДанных.ФайлПротоколаДанных <> Неопределено Тогда
		
		КомпонентыОбмена.ВедениеПротоколаДанных.ФайлПротоколаДанных.Закрыть();
		КомпонентыОбмена.ВедениеПротоколаДанных.ФайлПротоколаДанных = Неопределено;
		
	КонецЕсли;
КонецПроцедуры
Функция ЗаписатьВПротоколВыполнения(КомпонентыОбмена,Код = "",СтруктураЗаписи=Неопределено,ВзвестиФлагОшибок=Истина,Уровень=0,Выравнивание=22,БезусловнаяЗаписьВПротоколОбмена = Ложь)
	Если КомпонентыОбмена.Свойство("ВедениеПротоколаДанных") Тогда
		ФайлПротоколаДанных = КомпонентыОбмена.ВедениеПротоколаДанных.ФайлПротоколаДанных;
		ВыводВПротоколИнформационныхСообщений = КомпонентыОбмена.ВедениеПротоколаДанных.ВыводВПротоколИнформационныхСообщений;
	Иначе
		ФайлПротоколаДанных = Неопределено;
		ВыводВПротоколИнформационныхСообщений = Истина;
	КонецЕсли;
	
	Отступ = "";
	Для Сч = 0 По Уровень-1 Цикл
		Отступ = Отступ + Символы.Таб;
	КонецЦикла; 
	
	Если ТипЗнч(Код) = Тип("Число") Тогда
		
		СообщенияОбОшибках = ОбменДаннымиПовтИсп_СообщенияОбОшибках();
		
		Стр = СообщенияОбОшибках[Код];
		
	Иначе
		
		Стр = Строка(Код);
		
	КонецЕсли;
	
	Стр = Отступ + Стр;
	
	Если СтруктураЗаписи <> Неопределено Тогда
		
		Для каждого Поле Из СтруктураЗаписи Цикл
			
			Значение = Поле.Значение;
			Если Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Ключ = Поле.Ключ;
			Стр  = Стр + Символы.ПС + Отступ + Символы.Таб
				+ СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Поле.Ключ, Выравнивание) + " =  " + Строка(Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Если ВзвестиФлагОшибок Тогда
		
		ЛитералПеревода = ?(ПустаяСтрока(КомпонентыОбмена.СтрокаСообщенияОбОшибке), "", Символы.ПС);
		КомпонентыОбмена.СтрокаСообщенияОбОшибке = КомпонентыОбмена.СтрокаСообщенияОбОшибке + ЛитералПеревода + Стр;
		
		КомпонентыОбмена.ФлагОшибки = Истина;
		Если КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Неопределено Тогда
			КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		КонецЕсли;
	КонецЕсли;
	
	Если ФайлПротоколаДанных <> Неопределено Тогда
		
		Если ВзвестиФлагОшибок Тогда
			
			ФайлПротоколаДанных.ЗаписатьСтроку(Символы.ПС + "Ошибка.");
			
		КонецЕсли;
		
		Если ВзвестиФлагОшибок
			Или БезусловнаяЗаписьВПротоколОбмена
			Или ВыводВПротоколИнформационныхСообщений Тогда
			
			ФайлПротоколаДанных.ЗаписатьСтроку(Символы.ПС + КомпонентыОбмена.СтрокаСообщенияОбОшибке);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатВыполненияОбменаОшибка(КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена) Тогда
		
		УровеньЖР = УровеньЖурналаРегистрации.Ошибка;
		
	ИначеЕсли РезультатВыполненияОбменаПредупреждение(КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена) Тогда
		
		УровеньЖР = УровеньЖурналаРегистрации.Предупреждение;
		
	Иначе
		
		УровеньЖР = УровеньЖурналаРегистрации.Информация;
		
	КонецЕсли;
	
	// Фиксируем событие в журнале регистрации.
	ЗаписьЖурналаРегистрацииОбменДанными(
		КомпонентыОбмена.СтрокаСообщенияОбОшибке,
		КомпонентыОбмена,
		УровеньЖР);
	
	Возврат КомпонентыОбмена.СтрокаСообщенияОбОшибке;
КонецФункции
//} КонецОбласти
//{ Область ОтправкаДанных
Процедура ПроизвестиВыгрузкуДанных(КомпонентыОбмена)
	УзелДляОбмена = КомпонентыОбмена.УзелКорреспондента;
	
	ПередКонвертацией(КомпонентыОбмена);
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
		НомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелДляОбмена, "НомерОтправленного") + 1;
		
		Попытка
			ВыполнитьВыгрузкуЗарегистрированныхДанных(КомпонентыОбмена, НомерОтправленного);
		Исключение
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		// Назначаем номер отправленного сообщения для объектов, выгруженных по ссылке.
		Если КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты.Количество() > 0 Тогда
			
			// Выполняем регистрацию объектов на текущем узле, которые были выгружены по ссылке.
			Для Каждого Элемент Из КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты Цикл
				Попытка
					ПланыОбмена.ЗарегистрироватьИзменения(УзелДляОбмена, Элемент);
				Исключение
				КонецПопытки;
			КонецЦикла;
			
			//ОбменДаннымиСервер.ВыбратьИзменения(УзелДляОбмена, НомерОтправленного, КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты);
			
		КонецЕсли;
		
		НачатьТранзакцию();
		Получатель = УзелДляОбмена.ПолучитьОбъект();
		Получатель.НомерОтправленного = НомерОтправленного;
		Получатель.ДополнительныеСвойства.Вставить("Загрузка");
		Получатель.Записать();
		ЗафиксироватьТранзакцию();
		
		//РазблокироватьДанныеДляРедактирования(УзелДляОбмена);
		
	ИначеЕсли КомпонентыОбмена.Свойство("ТаблицаКВыгрузке") И ТипЗнч(КомпонентыОбмена.ТаблицаКВыгрузке)=Тип("ТаблицаЗначений") Тогда
		
		Для Каждого СтрокаТЧ Из КомпонентыОбмена.ТаблицаКВыгрузке Цикл
			СсылкаВыгрузки = СтрокаТЧ.Ссылка;
			ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти(СтрокаТЧ.ИмяТаблицыДляВыборки, "ИмяТаблицыДляВыборки");
			Если ПравилоОбработки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаТЧ.ЭтоСсылочныйТип=Истина Тогда
				ОбъектДляВыгрузки = СсылкаВыгрузки.ПолучитьОбъект();
			Иначе
				ОбъектДляВыгрузки = СсылкаВыгрузки;
			КонецЕсли;
			ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ОбъектДляВыгрузки, ПравилоОбработки);
		КонецЦикла;	
		
	ИначеЕсли ЗначениеЗаполнено(УзелДляОбмена) Тогда
		
		НомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелДляОбмена, "НомерОтправленного") + 1;
		
		Попытка
			ВыполнитьВыгрузкуЗарегистрированныхДанных(КомпонентыОбмена, НомерОтправленного);
		Исключение
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		
	ИначеЕсли КомпонентыОбмена.Свойство("СценарийВыгрузки") И ТипЗнч(КомпонентыОбмена.СценарийВыгрузки)=Тип("ТаблицаЗначений") Тогда		
		
		Для Каждого Строка Из КомпонентыОбмена.СценарийВыгрузки Цикл
			
			ПравилоОбработки = ПОДПоИмени(КомпонентыОбмена, Строка.ИмяПОД);
			
			Попытка
				ВыборкаДанных = ВыборкаДанных(КомпонентыОбмена, ПравилоОбработки);
			Исключение
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка выполнения алгоритма получения выборки данных.
				|Имя ПОД: %1
				|Описание ошибки: %2'"),
				ПравилоОбработки.Имя,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение ТекстОшибки;
			КонецПопытки;
			
			Для Каждого ОбъектВыборки Из ВыборкаДанных Цикл
				ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ОбъектВыборки, ПравилоОбработки);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПослеКонвертации(КомпонентыОбмена);
	
	КомпонентыОбмена.ФайлОбмена.ЗаписатьКонецЭлемента(); // Body
	КомпонентыОбмена.ФайлОбмена.ЗаписатьКонецЭлемента(); // Message
КонецПроцедуры
	Функция ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, Знач Источник, Знач ТипXDTO, Приемник=Неопределено, СсылкиИзОбъекта=Неопределено, ПроведеноЗаполнениеСвойств=Ложь)
	Если СсылкиИзОбъекта = Неопределено Тогда
		СсылкиИзОбъекта = Новый Массив;
	КонецЕсли;
	
	ПравилаКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов;
	УзелКорреспондента = КомпонентыОбмена.УзелКорреспондента;
	
	Если Приемник = Неопределено Тогда
		Приемник = МояФабрикаXDTO.Создать(ТипXDTO);
	КонецЕсли;
	
	Для Каждого Свойство Из ТипXDTO.Свойства Цикл
		
		ЗначениеСвойства = Неопределено;
		СвойствоНайдено = Ложь;
		
		Если ТипЗнч(Источник) = Тип("Структура") Тогда
			СвойствоНайдено = Источник.Свойство(Свойство.Имя, ЗначениеСвойства);
		ИначеЕсли ТипЗнч(Источник) = Тип("СтрокаТаблицыЗначений")
			И Источник.Владелец().Колонки.Найти(Свойство.Имя) <> Неопределено Тогда
			СвойствоНайдено = Истина;
			ЗначениеСвойства = Источник[Свойство.Имя];
		КонецЕсли;
		
		ТипСвойства = Неопределено;
		Если ТипЗнч(Свойство.Тип) = Тип("ТипЗначенияXDTO") Тогда
			ТипСвойства = "ОбычноеСвойство";
		ИначеЕсли ТипЗнч(Свойство.Тип) = Тип("ТипОбъектаXDTO") Тогда
			
			Если Свойство.Имя = "AdditionalInfo" Тогда
				ТипСвойства = "AdditionalInfo";
			ИначеЕсли ЭтоТаблицаОбъекта(Свойство) Тогда
				ТипСвойства = "Таблица";
			ИначеЕсли Свойство.Имя = "КлючевыеСвойства"
				Или Найти(Свойство.Тип.Имя, "КлючевыеСвойства") > 0 Тогда
				ТипСвойства = "КлючевыеСвойства";
			Иначе
				Если СвойствоНайдено Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Структура") 
						И (ЗначениеСвойства.Свойство("Значение")
							Или Найти(СокрЛП(Свойство.Тип), "ОбщиеСвойства") > 0) Тогда
						ТипСвойства = "ОбщееСоставноеСвойство";
					Иначе
						ТипСвойства = "СвойствоСоставногоТипа";
					КонецЕсли;
				Иначе
					ТипСвойства = "ОбщееСоставноеСвойство";
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестный тип свойства <%1>. Тип объекта: %2'"), Свойство.Имя, Строка(ТипXDTO));
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Попытка
			Если ТипСвойства = "ОбщееСоставноеСвойство" Тогда
				
				ПроведеноЗаполнениеВложенныхСвойств = Ложь;
				Если ТипЗнч(Источник) = Тип("Структура") И СвойствоНайдено Тогда
					ЗначениеXDTO = ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, ЗначениеСвойства, 
						Свойство.Тип,, СсылкиИзОбъекта, ПроведеноЗаполнениеВложенныхСвойств);
				Иначе
					ЗначениеXDTO = ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, Источник, 
						Свойство.Тип,, СсылкиИзОбъекта, ПроведеноЗаполнениеВложенныхСвойств);
				КонецЕсли;
				
				Если Не ПроведеноЗаполнениеВложенныхСвойств Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				
				Если Не СвойствоНайдено Тогда
					Продолжить;
				КонецЕсли;
				
				// Проверка на заполненность
				Если ЗначениеСвойства = Null
					Или Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
					
					Если Свойство.ВозможноПустое Тогда
						Приемник[Свойство.Имя] = Неопределено;
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				ЗначениеXDTO = Неопределено;
				Если ТипСвойства = "КлючевыеСвойства" Тогда
					ЗначениеXDTO = ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, ЗначениеСвойства, Свойство.Тип,,СсылкиИзОбъекта);
				ИначеЕсли ТипСвойства = "ОбычноеСвойство" Тогда
					
					Если ЭтоСсылкаXDTO(Свойство.Тип) Тогда // Конвертация ссылки
						
						ЗначениеXDTO = КонвертироватьСсылкуВXDTO(КомпонентыОбмена, ЗначениеСвойства, Свойство.Тип);
						
						Если СсылкиИзОбъекта.Найти(ЗначениеСвойства) = Неопределено Тогда
							СсылкиИзОбъекта.Добавить(ЗначениеСвойства);
						КонецЕсли;
						
					ИначеЕсли Свойство.Тип.Фасеты <> Неопределено
						И Свойство.Тип.Фасеты.Перечисления <> Неопределено
						И Свойство.Тип.Фасеты.Перечисления.Количество() > 0 Тогда // Конвертация перечисления
						ЗначениеXDTO = КонвертироватьПеречислениеВXDTO(КомпонентыОбмена, ЗначениеСвойства, Свойство.Тип);
					Иначе // Конвертация обычного значения.
						
						//БОЙКОВ
						Если Свойство.Имя = "Расширение" И СтрДлина(ЗначениеСвойства) > 10 Тогда
							ЗначениеСвойства = Прав(ЗначениеСвойства,10);
						КонецЕсли;
						//
						
						ЗначениеXDTO = МояФабрикаXDTO.Создать(Свойство.Тип, ЗначениеСвойства);
					КонецЕсли;
				ИначеЕсли ТипСвойства = "AdditionalInfo" Тогда
					ЗначениеXDTO = СериализаторXDTO.ЗаписатьXDTO(ЗначениеСвойства);
					
				ИначеЕсли ТипСвойства = "Таблица" Тогда
					
					ЗначениеXDTO = МояФабрикаXDTO.Создать(Свойство.Тип);
					
					ТипТаблицы = Свойство.Тип.Свойства[0].Тип;
					
					ИмяСвойстваСтроки = Свойство.Тип.Свойства[0].Имя;
					
					Для Каждого ИсточникСтрока Из ЗначениеСвойства Цикл
						
						ПриемникСтрока = ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, ИсточникСтрока, ТипТаблицы,,СсылкиИзОбъекта);
						
						ЗначениеXDTO[ИмяСвойстваСтроки].Добавить(ПриемникСтрока);
						
					КонецЦикла;
					
				ИначеЕсли ТипСвойства = "СвойствоСоставногоТипа" Тогда
					
					Для Каждого СвойствоСоставногоТипа Из Свойство.Тип.Свойства Цикл
						
						СоставноеЗначениеXDTO = Неопределено;
						Если ТипЗнч(ЗначениеСвойства) = Тип("Структура")
							И ЗначениеСвойства.ТипСоставногоСвойства = СвойствоСоставногоТипа.Тип Тогда
							
							// Свойство составного типа, содержащие элементы только типа КлючевыеСвойства.
							СоставноеЗначениеXDTO = ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, ЗначениеСвойства, СвойствоСоставногоТипа.Тип,,СсылкиИзОбъекта);
						// Свойство составного типа простое, и значение простое.
						ИначеЕсли (ТипЗнч(ЗначениеСвойства) = Тип("Строка")
							И Найти(СвойствоСоставногоТипа.Тип.Имя,"string")>0)
							ИЛИ (ТипЗнч(ЗначениеСвойства) = Тип("Число")
							И Найти(СвойствоСоставногоТипа.Тип.Имя,"decimal")>0)
							ИЛИ (ТипЗнч(ЗначениеСвойства) = Тип("Булево")
							И Найти(СвойствоСоставногоТипа.Тип.Имя,"boolean")>0)
							ИЛИ (ТипЗнч(ЗначениеСвойства) = Тип("Дата")
							И Найти(СвойствоСоставногоТипа.Тип.Имя,"date")>0) Тогда
							СоставноеЗначениеXDTO = ЗначениеСвойства;
	
						ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("Строка")
							И ТипЗнч(СвойствоСоставногоТипа.Тип) = Тип("ТипЗначенияXDTO")
							И СвойствоСоставногоТипа.Тип.Фасеты <> Неопределено Тогда
							Если СвойствоСоставногоТипа.Тип.Фасеты.Количество() = 0 Тогда
								СоставноеЗначениеXDTO = ЗначениеСвойства;
							Иначе
								
								Для Каждого Фасет Из СвойствоСоставногоТипа.Тип.Фасеты Цикл
									Если Фасет.Значение = ЗначениеСвойства Тогда
										СоставноеЗначениеXDTO = ЗначениеСвойства;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
							КонецЕсли;
						КонецЕсли;
						
						Если СоставноеЗначениеXDTO <> Неопределено Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					// Если передается значение с типом, которое не поддерживается в формате - не передаем.
					Если СоставноеЗначениеXDTO = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ЗначениеXDTO = МояФабрикаXDTO.Создать(Свойство.Тип);
					ЗначениеXDTO.Установить(СвойствоСоставногоТипа, СоставноеЗначениеXDTO);
				КонецЕсли;
				
			КонецЕсли;
		Исключение
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка формирования объекта XDTO: Тип свойства <%1>. Имя свойства: <%2>.'"), ТипСвойства, Свойство.Имя)
				+ Символы.ПС + Символы.ПС + ПредставлениеОшибки;
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
		Приемник[Свойство.Имя] = ЗначениеXDTO;
		ПроведеноЗаполнениеСвойств = Истина;
		
	КонецЦикла;
	
	Возврат Приемник;
КонецФункции
Функция ДанныеXDTOИзДанныхИБ(КомпонентыОбмена, Источник, Знач ПравилоКонвертации, СтекВыгрузки = Неопределено)
	Приемник = Новый Структура;
	
	Если СтекВыгрузки = Неопределено Тогда
		СтекВыгрузки = Новый Массив;
	КонецЕсли;
	
	Если ПравилоКонвертации.ЭтоСсылочныйТип Тогда
		
		ПозицияВСтеке = СтекВыгрузки.Найти(Источник.Ссылка);
		
		// Проверяем, выгружался ли объект по ссылке, чтобы не допустить зацикливания.
		Если ПозицияВСтеке <> Неопределено Тогда
			
			Если ПозицияВСтеке > 0 Тогда
				Возврат Неопределено;
			Иначе
				// Необходимо искать перебором.
				ПерваяИтерация = Истина;
				Для Каждого ЭлементСтека Из СтекВыгрузки Цикл
					Если ПерваяИтерация Тогда
						ПерваяИтерация = Ложь;
						Продолжить;
					КонецЕсли;
					Если ЭлементСтека = Источник.Ссылка Тогда
						Возврат Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		СтекВыгрузки.Добавить(Источник.Ссылка);
	Иначе
		СтекВыгрузки.Добавить(Источник);
	КонецЕсли;
	
	Если ПравилоКонвертации.ЭтоКонстанта Тогда
		
		Если ПравилоКонвертации.ТипXDTO.Свойства.Количество() = 1 Тогда
			
			Приемник.Вставить(ПравилоКонвертации.ТипXDTO.Свойства[0].Имя, Источник.Значение);
			
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка XML-схемы. Для приемника должно быть задано одно свойство.
				|Тип источника: %1
				|Тип приемника: %2'"),
				Строка(ТипЗнч(Источник)),
				ПравилоКонвертации.ТипXDTO);
		КонецЕсли;
		
	Иначе
		
		// Выполнение ПКС, 1-й этап
		Для Каждого ПКС Из ПравилоКонвертации.Свойства Цикл
			
			Если ПравилоКонвертации.ОбъектДанных <> Неопределено
				И ПКС.СвойствоКонфигурации = ""
				И ПКС.ИспользуетсяАлгоритмКонвертации Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтекВыгрузки.Количество() > 1 И Не ПКС.ОбработкаКлючевогоСвойства Тогда
				Продолжить;
			КонецЕсли;
			
			ВыгрузитьСвойство(
				КомпонентыОбмена,
				Источник,
				Приемник,
				ПКС,
				СтекВыгрузки,
				1);
		КонецЦикла;
		
		// {Обработчик: ПриОтправкеДанных} Начало
		Если ПравилоКонвертации.ЕстьОбработчикПриОтправкеДанных Тогда
			
			Если Не Приемник.Свойство("КлючевыеСвойства") Тогда
				Приемник.Вставить("КлючевыеСвойства", Новый Структура);
			КонецЕсли;
			
			ПриОтправкеДанных(Источник, Приемник, ПравилоКонвертации.ПриОтправкеДанных, КомпонентыОбмена, СтекВыгрузки);
						
			Если Приемник = неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Если СтекВыгрузки.Количество() > 1 Тогда
				Для Каждого КлючевоеСвойство Из Приемник.КлючевыеСвойства Цикл
					Приемник.Вставить(КлючевоеСвойство.Ключ, КлючевоеСвойство.Значение);
				КонецЦикла;
				Приемник.Удалить("КлючевыеСвойства");
			КонецЕсли;
			
			// Выполнение ПКС, 2-й этап
			Для Каждого ПКС Из ПравилоКонвертации.Свойства Цикл
				Если ПКС.СвойствоФормата = "" 
					ИЛИ (СтекВыгрузки.Количество() > 1 И Не ПКС.ОбработкаКлючевогоСвойства) Тогда
					Продолжить;
				КонецЕсли;
				
				// Выполняем конвертацию, если в свойство помещена инструкция.
				ЗначениеСвойства = Неопределено;
				Если СтекВыгрузки.Количество() = 1 И ПКС.ОбработкаКлючевогоСвойства Тогда
					Приемник.КлючевыеСвойства.Свойство(ПКС.СвойствоФормата, ЗначениеСвойства);
				Иначе
					Приемник.Свойство(ПКС.СвойствоФормата, ЗначениеСвойства);
				КонецЕсли;
				Если ЗначениеСвойства = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПКС.ИспользуетсяАлгоритмКонвертации Тогда
					
					Если ТипЗнч(ЗначениеСвойства) = Тип("Структура")
						И ЗначениеСвойства.Свойство("Значение")
						И ЗначениеСвойства.Свойство("ИмяПКО")
						Или ПКС.ПравилоКонвертацииСвойства <> ""
						И ТипЗнч(ЗначениеСвойства) <> Тип("Структура") Тогда
						
						ВыгрузитьСвойство(
							КомпонентыОбмена,
							Источник,
							Приемник,
							ПКС,
							СтекВыгрузки,
							2);
							
					КонецЕсли;
						
				КонецЕсли;
			КонецЦикла;
			
			// Выполнение ПКС для ТЧ
			Если СтекВыгрузки.Количество() = 1 Тогда
				
				Для Каждого ТЧИСвойства Из ПравилоКонвертации.СвойстваТабличныхЧастей Цикл
					
					ПКСДляТЧ = ТЧИСвойства.Значение;
					ИмяТЧПриемника = ТЧИСвойства.Ключ;
					ТЧПриемника = Неопределено;
					Если Не Приемник.Свойство(ИмяТЧПриемника, ТЧПриемника) Тогда
						Продолжить;
					КонецЕсли;
					
					// Убираем лишние колонки, которые могли добавить в приемнике.
					УдаляемыеКолонки = Новый Массив;
					Для Каждого Колонка Из ТЧПриемника.Колонки Цикл
						Если ПКСДляТЧ.Найти(Колонка.Имя, "СвойствоФормата") = Неопределено Тогда
							УдаляемыеКолонки.Добавить(Колонка);
						КонецЕсли;
					КонецЦикла;
					Для Каждого Колонка Из УдаляемыеКолонки Цикл
						ТЧПриемника.Колонки.Удалить(Колонка);
					КонецЦикла;
					
					// Создаем новую ТЗ, в которой нет ограничений типа для колонок и копируем в нее данные.
					НоваяТЧПриемника = Новый ТаблицаЗначений;
					Для Каждого ПКС Из ПКСДляТЧ Цикл
						ИмяКолонки = ПКС.СвойствоФормата;
						НоваяТЧПриемника.Колонки.Добавить(ИмяКолонки);
					КонецЦикла;
					Для Каждого СтрокаТЧПриемника Из ТЧПриемника Цикл
						СтрокаНовойТЧПриемника = НоваяТЧПриемника.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНовойТЧПриемника, СтрокаТЧПриемника);
					КонецЦикла;
					Приемник[ИмяТЧПриемника] = НоваяТЧПриемника;
					
					Для Каждого Строка Из НоваяТЧПриемника Цикл
						
						Для Каждого ПКС Из ПКСДляТЧ Цикл
							
							ВыгрузитьСвойство(
								КомпонентыОбмена,
								Источник,
								Строка,
								ПКС,
								СтекВыгрузки,
								2);
								
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		// {Обработчик: ПриОтправкеДанных} Окончание
		
		Если СтекВыгрузки.Количество() > 1 Тогда
			Приемник.Вставить("ТипСоставногоСвойства", ПравилоКонвертации.ТипКлючевыхСвойствОбъектаXDTO);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Приемник;
КонецФункции
Процедура ВыгрузитьСвойство(КомпонентыОбмена, ДанныеИБ, ПолучательСвойства, ПКС, СтекВыгрузки, ЭтапВыгрузки = 1)
	// Свойство формата не указано - данное ПКС используется только при загрузке.
	Если СокрЛП(ПКС.СвойствоФормата) = "" Тогда
		Возврат;
	КонецЕсли;
	
	СвойствоФормата_Имя = СокрЛП(ПКС.СвойствоФормата);
	
	ВложенныеСвойства = СтроковыеФункции_СтрРазделить(СвойствоФормата_Имя, "."); // ВложенныеСвойства = СтрРазделить(СвойствоФормата_Имя,".",Ложь);
	// Указано полное имя свойства, входящего в группу общих свойств.
	УказаноПолноеИмяСвойства = Ложь;
	Если ВложенныеСвойства.Количество() > 1 Тогда
		УказаноПолноеИмяСвойства = Истина;
		СвойствоФормата_Имя = ВложенныеСвойства[ВложенныеСвойства.Количество()-1];
	КонецЕсли;
	
	ЗначениеСвойства = Неопределено;
	Если ЭтапВыгрузки = 1 Тогда
		Если ЗначениеЗаполнено(ПКС.СвойствоКонфигурации) Тогда
			ЗначениеСвойства = ДанныеИБ[ПКС.СвойствоКонфигурации];
		ИначеЕсли ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
			// Это ПКС из ПКО с источником-структурой
			Если УказаноПолноеИмяСвойства Тогда
				ПолучитьЗначениеВложенныхСвойств(ДанныеИБ, ВложенныеСвойства, ЗначениеСвойства);
			Иначе
				ДанныеИБ.Свойство(СвойствоФормата_Имя, ЗначениеСвойства);
			КонецЕсли;
			Если ЗначениеСвойства = Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если ТипЗнч(ПолучательСвойства) = Тип("СтрокаТаблицыЗначений") Тогда
			КолонкиТЧ = ПолучательСвойства.Владелец().Колонки;
			УровеньМаксимальный = ВложенныеСвойства.Количество() - 1;
			Если УказаноПолноеИмяСвойства Тогда
				Для Уровень = 0 По УровеньМаксимальный Цикл
					ИмяКолонки = ВложенныеСвойства[Уровень];
					Если КолонкиТЧ.Найти(ИмяКолонки) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ЗначениеВКолонке = ПолучательСвойства[ИмяКолонки];
					Если Уровень = УровеньМаксимальный Тогда
						ЗначениеСвойства = ЗначениеВКолонке;
					ИначеЕсли ТипЗнч(ЗначениеВКолонке) = Тип("Структура") Тогда
						// Значение вложенного свойства упаковано в структуру, которая может быть многоуровневой.
						ИсточникВложенногоСвойства = ЗначениеВКолонке;
						ЗначениеВложенногоСвойства = Неопределено;
						Для УровеньПодчиненный = Уровень + 1 По УровеньМаксимальный Цикл
							ИмяВложенногоСвойства = ВложенныеСвойства[УровеньПодчиненный];
							Если НЕ ИсточникВложенногоСвойства.Свойство(ИмяВложенногоСвойства, ЗначениеВложенногоСвойства) Тогда
								Продолжить;
							КонецЕсли;
							Если УровеньПодчиненный = УровеньМаксимальный Тогда
								ЗначениеСвойства = ЗначениеВложенногоСвойства;
							ИначеЕсли ТипЗнч(ЗначениеВложенногоСвойства) = Тип("Структура") Тогда
								ИсточникВложенногоСвойства = ЗначениеВложенногоСвойства;
								ЗначениеВложенногоСвойства = Неопределено;
							Иначе
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если КолонкиТЧ.Найти(СвойствоФормата_Имя) = Неопределено Тогда
					Возврат;
				Иначе
					ЗначениеСвойства = ПолучательСвойства[СвойствоФормата_Имя];
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если УказаноПолноеИмяСвойства Тогда
				ПолучитьЗначениеВложенныхСвойств(ДанныеИБ, ВложенныеСвойства, ЗначениеСвойства);
			Иначе
				ПолучательСвойства.Свойство(СвойствоФормата_Имя, ЗначениеСвойства);
			КонецЕсли;
			Если ЗначениеСвойства = Неопределено
				И Не (СтекВыгрузки.Количество() = 1 И ПолучательСвойства.КлючевыеСвойства.Свойство(СвойствоФормата_Имя, ЗначениеСвойства)) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	ПравилоКонвертацииСвойства = ПКС.ПравилоКонвертацииСвойства;
	
	// Значение может быть в формате инструкции.
	Если ТипЗнч(ЗначениеСвойства) = Тип("Структура") Тогда
		Если ЗначениеСвойства.Свойство("ИмяПКО") Тогда
			ПравилоКонвертацииСвойства = ЗначениеСвойства.ИмяПКО;
		КонецЕсли;
		Если ЗначениеСвойства.Свойство("Значение") Тогда
			ЗначениеСвойства = ЗначениеСвойства.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
	
		Если СокрЛП(ПравилоКонвертацииСвойства) <> "" Тогда
			
			ПКПД = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти(ПравилоКонвертацииСвойства, "ИмяПКПД");
			Если ПКПД <> Неопределено Тогда
				ЗначениеСвойства = ПКПД.КонвертацииЗначенийПриОтправке.Получить(ЗначениеСвойства);
			Иначе
			
				ПравилоКонвертации = ПКОПоИмени(КомпонентыОбмена, ПравилоКонвертацииСвойства);
				
				ОтветвлениеСтекаВыгрузки = Новый Массив;
				Для Каждого Элемент Из СтекВыгрузки Цикл
					ОтветвлениеСтекаВыгрузки.Добавить(Элемент);
				КонецЦикла;
				
				ЗначениеСвойства = ДанныеXDTOИзДанныхИБ(
					КомпонентыОбмена,
					ЗначениеСвойства,
					ПравилоКонвертации,
					ОтветвлениеСтекаВыгрузки);
					
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ЗначениеСвойства = Неопределено;
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() = 1 И ПКС.ОбработкаКлючевогоСвойства Тогда
		Если Не ПолучательСвойства.Свойство("КлючевыеСвойства") Тогда
			ПолучательСвойства.Вставить("КлючевыеСвойства", Новый Структура);
		КонецЕсли;
		ПолучательСвойства.КлючевыеСвойства.Вставить(СвойствоФормата_Имя, ЗначениеСвойства);
	Иначе
		Если ТипЗнч(ПолучательСвойства) = Тип("СтрокаТаблицыЗначений") Тогда
			Если УказаноПолноеИмяСвойства Тогда
				ПоместитьЗначениеВложенныхСвойств(ПолучательСвойства, ВложенныеСвойства, ЗначениеСвойства, Истина);
			Иначе
				ПолучательСвойства[СвойствоФормата_Имя] = ЗначениеСвойства;
			КонецЕсли;
		Иначе
			Если УказаноПолноеИмяСвойства Тогда
				ПоместитьЗначениеВложенныхСвойств(ПолучательСвойства, ВложенныеСвойства, ЗначениеСвойства, Ложь);
			Иначе
				ПолучательСвойства.Вставить(СвойствоФормата_Имя, ЗначениеСвойства);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПоместитьЗначениеВложенныхСвойств(ПолучательСвойства, ВложенныеСвойства, ЗначениеСвойства, ЭтоСтрокаТЧ)
	ИмяСвойства = ВложенныеСвойства[0];
	ЗначениеВложенныхСвойств = Неопределено;
	Если ЭтоСтрокаТЧ Тогда
		Если ПолучательСвойства.Владелец().Колонки.Найти(ИмяСвойства) = Неопределено Тогда
			ПолучательСвойства.Владелец().Колонки.Добавить(ИмяСвойства);
		Иначе
			ЗначениеВложенныхСвойств = ПолучательСвойства[ИмяСвойства];
		КонецЕсли;
	Иначе
		Если НЕ ПолучательСвойства.Свойство(ИмяСвойства, ЗначениеВложенныхСвойств) Тогда
			ПолучательСвойства.Вставить(ИмяСвойства);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеВложенныхСвойств = Неопределено Тогда
		ЗначениеВложенныхСвойств = Новый Структура;
	КонецЕсли;
	СтруктураВложенныхСвойств = ЗначениеВложенныхСвойств;
	МаксимальныйУровень = ВложенныеСвойства.Количество() - 1;
	Для Уровень = 1 По МаксимальныйУровень Цикл
		ИмяВложенногоСвойства = ВложенныеСвойства[Уровень];
		Если Уровень = МаксимальныйУровень Тогда
			СтруктураВложенныхСвойств.Вставить(ИмяВложенногоСвойства, ЗначениеСвойства);
			Прервать;
		КонецЕсли;
		ПолучательВложенногоСвойства = Неопределено;
		СтруктураВложенныхСвойств.Свойство(ИмяВложенногоСвойства, ПолучательВложенногоСвойства);
		Если ПолучательВложенногоСвойства = Неопределено Тогда
			ПолучательВложенногоСвойства = Новый Структура;
		КонецЕсли;
		ПолучательВложенногоСвойства.Вставить(ИмяВложенногоСвойства, Новый Структура);
		СтруктураВложенныхСвойств = ПолучательВложенногоСвойства;
	КонецЦикла;
	ПолучательСвойства[ИмяСвойства] = ЗначениеВложенныхСвойств;
КонецПроцедуры
Процедура ПолучитьЗначениеВложенныхСвойств(ИсточникСвойства, ВложенныеСвойства, ЗначениеСвойства)
	ТекущийИсточникСвойства = ИсточникСвойства;
	ТекущееЗначениеСвойства = Неопределено;
	Для Уровень = 0 По ВложенныеСвойства.Количество()-1 Цикл
		Если НЕ ТекущийИсточникСвойства.Свойство(ВложенныеСвойства[Уровень], ТекущееЗначениеСвойства) Тогда
			Прервать;
		КонецЕсли;
		Если Уровень = ВложенныеСвойства.Количество()-1 Тогда
			ЗначениеСвойства = ТекущееЗначениеСвойства;
		ИначеЕсли ТипЗнч(ТекущееЗначениеСвойства) <> Тип("Структура") Тогда
			Прервать;
		Иначе
			ТекущийИсточникСвойства = ТекущееЗначениеСвойства;
			ТекущееЗначениеСвойства = Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
//} КонецОбласти
//{ Область ПолучениеДанных
Процедура ПроизвестиЧтениеДанных(КомпонентыОбмена, ТаблицыДляЗагрузки = Неопределено)
	ПослеКонвертации(КомпонентыОбмена);
КонецПроцедуры
Процедура ОткрытьФайлВыгрузки(КомпонентыОбмена, ИмяФайлаОбмена = "")
	ФайлОбмена = Новый ЗаписьXML;
	Если ИмяФайлаОбмена <> "" Тогда
		ФайлОбмена.ОткрытьФайл(ИмяФайлаОбмена);
	Иначе
		ФайлОбмена.УстановитьСтроку();
	КонецЕсли;
	ФайлОбмена.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = Неопределено;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
		ЗаписьСообщения = Новый Структура("НомерПринятого, НомерСообщения, Получатель");
		ЗаписьСообщения.Получатель = КомпонентыОбмена.УзелКорреспондента;
		
		//Если ТранзакцияАктивна() Тогда
		//	ВызватьИсключение НСтр("ru = 'Блокировка на обмен данными не может быть установлена в активной транзакции.'");
		//КонецЕсли;
		//
		//// Устанавливаем блокировку на узел получателя.
		//Попытка
		//	ЗаблокироватьДанныеДляРедактирования(ЗаписьСообщения.Получатель);
		//Исключение
		//	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//		НСтр("ru = 'Ошибка установки блокировки на обмен данными.
		//		|Возможно, обмен данными выполняется другим сеансом.
		//		|
		//		|Подробности:
		//		|%1'"),
		//		КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		//	);
		//КонецПопытки;
		
		ДанныеПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаписьСообщения.Получатель, "НомерОтправленного, НомерПринятого, Код");
		
		ЗаписьСообщения.НомерСообщения = ДанныеПолучателя.НомерОтправленного + 1;
		ЗаписьСообщения.НомерПринятого = ДанныеПолучателя.НомерПринятого;
		
	КонецЕсли;
	
	// Записываем элемент <Message>
	ФайлОбмена.ЗаписатьНачалоЭлемента("Message");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("msg", "http://www.1c.ru/SSL/Exchange/Message");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	// Записываем элемент <Header>
	Header = МояФабрикаXDTO.Создать(МояФабрикаXDTO.Тип(XMLБазоваяСхема(), "Header"));
	Header.Format = КомпонентыОбмена.XMLСхема;
	Header.CreationDate = ТекущаяУниверсальнаяДата();
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		
		Confirmation = МояФабрикаXDTO.Создать(МояФабрикаXDTO.Тип(XMLБазоваяСхема(), "Confirmation"));
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
			Confirmation.ExchangePlan = "СинхронизацияДанныхЧерезУниверсальныйФормат"; // ЗаписьСообщения.Получатель.Метаданные().Имя;
			Confirmation.To = СокрЛП(ДанныеПолучателя.Код);
			Confirmation.From = СокрЛП(ОбменДаннымиПовтИсп.ПолучитьКодЭтогоУзлаДляПланаОбмена(ЗаписьСообщения.Получатель.Метаданные().Имя)); // (Confirmation.ExchangePlan));
			Confirmation.MessageNo = ЗаписьСообщения.НомерСообщения;
			Confirmation.ReceivedNo = ЗаписьСообщения.НомерПринятого;
		КонецЕсли;
		Header.Confirmation = Confirmation;
		
	КонецЕсли;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		Для Каждого ВерсияФормата Из ВерсииФорматаОбменаМассив(КомпонентыОбмена.УзелКорреспондента) Цикл
			Header.AvailableVersion.Добавить(ВерсияФормата);
		КонецЦикла;
	Иначе
		Header.AvailableVersion.Добавить(КомпонентыОбмена.ВерсияФорматаОбмена);
	КонецЕсли;
	
	МояФабрикаXDTO.ЗаписатьXML(ФайлОбмена, Header);
	
	// Записываем элемент <Body>
	ФайлОбмена.ЗаписатьНачалоЭлемента("Body");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("", КомпонентыОбмена.XMLСхема);
	
	КомпонентыОбмена.Вставить("ФайлОбмена", ФайлОбмена);
КонецПроцедуры
Процедура ОткрытьФайлЗагрузки(КомпонентыОбмена, ИмяФайлаОбмена)
	ЭтоОбменЧерезПланОбмена = КомпонентыОбмена.ЭтоОбменЧерезПланОбмена;
	КомпонентыОбмена.Вставить("ТолькоНастройкиXDTO", Ложь);
	ЧтениеXML = Новый ЧтениеXML;
	
	НомерИтерации = 0;
	КомпонентыОбмена.ФлагОшибки = Истина;
	Пока НомерИтерации = 0 Цикл
		
		НомерИтерации = 1;
		
		Попытка
			ЧтениеXML.ОткрытьФайл(ИмяФайлаОбмена);
			ЧтениеXML.Прочитать(); // Message
		Исключение
			
			СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка при загрузке данных: %1'");
			СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ОписаниеОшибки());
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщенияОбОшибке);
			Прервать;
			
		КонецПопытки;
		
		Если (ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "Message") Тогда
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 9);
			Прервать;
		КонецЕсли;
		
		ЧтениеXML.Прочитать(); // Header
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "Header" Тогда
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 9);
			Прервать;
		КонецЕсли;
		
		Header = МояФабрикаXDTO.ПрочитатьXML(ЧтениеXML, МояФабрикаXDTO.Тип(XMLБазоваяСхема(), "Header"));
		
		
		Если ЭтоОбменЧерезПланОбмена Тогда
			
			Если Не Header.Установлено("Confirmation") Тогда
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 9);
				Прервать;
			КонецЕсли;
			
			Confirmation = Header.Confirmation;
			
			КомпонентыОбмена.ТолькоНастройкиXDTO = РазложитьФорматОбмена(Header.Format).Версия="EnterpriseData";
			
			КодОтКого = Confirmation.From;
			КодКому = Confirmation.To;
			ИмяПланаОбмена = Confirmation.ExchangePlan;
			КомпонентыОбмена.НомерВходящегоСообщения = Confirmation.MessageNo;
			КомпонентыОбмена.НомерСообщенияПолученногоКорреспондентом = Confirmation.ReceivedNo;
			
			Если ИмяПланаОбмена="СинхронизацияДанныхЧерезУниверсальныйФормат" Тогда
				ИмяПланаОбмена = КомпонентыОбмена.УзелКорреспондента.Метаданные().Имя;
			КонецЕсли;
			
			Если Метаданные.ПланыОбмена.Найти(ИмяПланаОбмена) = Неопределено Тогда
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 177);
				Прервать;
			КонецЕсли;
			
			ПолучательИзСообщения = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодКому);
			Если ПолучательИзСообщения <> ПланыОбмена[ИмяПланаОбмена].ЭтотУзел() Тогда
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 178);
				Прервать;
			КонецЕсли;
			
			ОтправительИзСообщения = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодОтКого);
			Если ОтправительИзСообщения.Пустая() Тогда
				СтрокаСообщения = НСтр("ru = 'Не найден узел обмена для загрузки данных. План обмена: %1, Код: %2'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ИмяПланаОбмена, КодОтКого);
				ВызватьИсключение СтрокаСообщения;
			Иначе
				КомпонентыОбмена.УзелКорреспондента = ОтправительИзСообщения; // т.к. до начала загрузки мы не знаем куда загружать :(
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ КомпонентыОбмена.ТолькоНастройкиXDTO Тогда
			ФорматОбмена = РазложитьФорматОбмена(Header.Format);
			НомерВерсииКорреспондента = КомпонентыОбмена.ВерсияФорматаОбмена;
			Если НЕ КомпонентыОбмена.ВерсияФорматаОбмена=ФорматОбмена.Версия Тогда
				КомпонентыОбмена.ВерсияФорматаОбмена = ФорматОбмена.Версия;
				СоздатьМоюФабрикуXDTO(КомпонентыОбмена);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоОбменЧерезПланОбмена Тогда
			
			Если НЕ КомпонентыОбмена.ТолькоНастройкиXDTO Тогда
				// Проверяем базовый формат
				МенеджерПланаОбмена = МенеджерПланаОбмена(КомпонентыОбмена.УзелКорреспондента);
				//Если МенеджерПланаОбмена.ФорматОбмена() <> ФорматОбмена.БазовыйФормат Тогда
				Если НЕ МенеджерПланаОбмена_ФорматОбмена()=ФорматОбмена.БазовыйФормат Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Формат сообщения обмена <%1> не соответствует формату плана обмена <%2>.'"),
					ФорматОбмена.БазовыйФормат,
					МенеджерПланаОбмена_ФорматОбмена()
					);
				КонецЕсли;
				
				// Проверяем версию формата сообщения обмена.
				Если ВерсииФорматаОбменаМассив(КомпонентыОбмена.УзелКорреспондента).Найти(ФорматОбмена.Версия) = Неопределено Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Версия формата сообщения обмена <%1> не поддерживается.'"),
					ФорматОбмена.Версия
					);
				КонецЕсли;
				
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомпонентыОбмена.УзелКорреспондента, "НомерПринятого") >= КомпонентыОбмена.НомерВходящегоСообщения Тогда
					
					// Номер сообщения меньше либо равен ранее принятому.
					КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена =
					Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято;
					
					ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 174,,,,, Истина);
					Прервать;
					
				КонецЕсли;
				
				// Удаляем регистрацию изменений.
				ПланыОбмена.УдалитьРегистрациюИзменений(КомпонентыОбмена.УзелКорреспондента, КомпонентыОбмена.НомерСообщенияПолученногоКорреспондентом);
				
				// Снимаем признак начальной выгрузки данных.
				РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.СнятьПризнакНачальнойВыгрузкиДанных(
				КомпонентыОбмена.УзелКорреспондента, КомпонентыОбмена.НомерСообщенияПолученногоКорреспондентом);
				
				
				
				
				КомпонентыОбмена.XMLСхема = Header.Format;
				//КомпонентыОбмена.ВерсияФорматаОбмена = ФорматОбмена.Версия;
				//КомпонентыОбмена.МенеджерОбмена = МенеджерОбменаВерсииФормата(
				//	КомпонентыОбмена.УзелКорреспондента,
				//	КомпонентыОбмена.ВерсияФорматаОбмена);
			КонецЕсли;		
			// Проверяем возможность увеличения версии.
			ДоступныеВерсииОтправителя = Header.AvailableVersion;
			ДоступныеВерсииПолучателя = ВерсииФорматаОбменаМассив(КомпонентыОбмена.УзелКорреспондента);
			//НомерВерсииКорреспондента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомпонентыОбмена.УзелКорреспондента, "ВерсияФорматаОбмена");
			МаксимальнаяОбщаяВерсия = НомерВерсииКорреспондента;
			Для Каждого ДоступнаяВерсияОтправителя Из ДоступныеВерсииОтправителя Цикл
				Если ДоступныеВерсииПолучателя.Найти(ДоступнаяВерсияОтправителя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				РезультатСравненияВерсий = СравнитьВерсии(СокрЛП(ДоступнаяВерсияОтправителя), СокрЛП(МаксимальнаяОбщаяВерсия));
				Если РезультатСравненияВерсий > 0 Тогда
					МаксимальнаяОбщаяВерсия = ДоступнаяВерсияОтправителя;
				КонецЕсли;
			КонецЦикла;
			Если НЕ МаксимальнаяОбщаяВерсия=НомерВерсииКорреспондента Тогда
				// Обнаружена более свежая общая версия.
				СтруктураНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(УзелДляОбмена,ПолучитьИмяОбработкиОбмена(),,,"ВсеПользователи");
				СтруктураНастроек.Вставить("ВерсияФорматаОбмена",МаксимальнаяОбщаяВерсия);
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(УзелДляОбмена,ПолучитьИмяОбработкиОбмена(),СтруктураНастроек,,"ВсеПользователи");
			КонецЕсли;
		КонецЕсли;
		
		Если Не КомпонентыОбмена.ТолькоНастройкиXDTO Тогда
			Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
				Или ЧтениеXML.ЛокальноеИмя <> "Body" Тогда
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 9);
				Прервать;
			КонецЕсли;
			
			ЧтениеXML.Прочитать(); // Body
		КонецЕсли;
		
		КомпонентыОбмена.ФлагОшибки = Ложь;
		
	КонецЦикла;
	
	Если КомпонентыОбмена.ФлагОшибки Тогда
		ЧтениеXML.Закрыть();
	Иначе
		КомпонентыОбмена.Вставить("ФайлОбмена", ЧтениеXML);
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область ПоискПравилОбмена
Функция ПКОПоИмени(КомпонентыОбмена, Имя)
	ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти(Имя, "ИмяПКО");
	
	Если ПравилоКонвертации = Неопределено Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено ПКО с именем %1'"), Имя);
		ВызватьИсключение ТекстОшибки;	
	Иначе
		Возврат ПравилоКонвертации;
	КонецЕсли;
КонецФункции
//} КонецОбласти
//} КонецОбласти
//{ Область СлужебныйПрограммныйИнтерфейс
//{ Область ИнициализацияОбмена
Функция НоваяТаблицаДанныхЗаголовкаПакета()
	ТаблицаДанныхЗаголовкаПакета = Новый ТаблицаЗначений;
	Колонки = ТаблицаДанныхЗаголовкаПакета.Колонки;
	
	Колонки.Добавить("ТипОбъектаСтрокой",            Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("КоличествоОбъектовВИсточнике", Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ПоляПоиска",                   Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ПоляТаблицы",                  Новый ОписаниеТипов("Строка"));
	
	Колонки.Добавить("ТипИсточникаСтрокой", Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ТипПриемникаСтрокой", Новый ОписаниеТипов("Строка"));
	
	Колонки.Добавить("СинхронизироватьПоИдентификатору", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ЭтоУдалениеОбъекта", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ЭтоКлассификатор", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ИспользоватьПредварительныйПросмотр", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаДанныхЗаголовкаПакета;
КонецФункции
Функция ИнициализироватьТаблСвойствДляПравилаКонвертации()
	//ОбменДаннымиXDTOСервер_ИнициализироватьТаблицуСвойствДляПравилаКонвертации
	ТаблицаПКС = Новый ТаблицаЗначений;
	ТаблицаПКС.Колонки.Добавить("СвойствоКонфигурации", Новый ОписаниеТипов("Строка"));
	ТаблицаПКС.Колонки.Добавить("СвойствоФормата", Новый ОписаниеТипов("Строка"));
	ТаблицаПКС.Колонки.Добавить("ПравилоКонвертацииСвойства", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	ТаблицаПКС.Колонки.Добавить("ИспользуетсяАлгоритмКонвертации", Новый ОписаниеТипов("Булево"));
	ТаблицаПКС.Колонки.Добавить("ОбработкаКлючевогоСвойства", Новый ОписаниеТипов("Булево"));
	ТаблицаПКС.Колонки.Добавить("ОбработкаПоисковогоСвойства", Новый ОписаниеТипов("Булево"));
	ТаблицаПКС.Колонки.Добавить("ИмяТЧ", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаПКС;
КонецФункции
Функция ПравилаРегистрацииОбъектов(УзелПланаОбмена)
	ПравилаРегистрацииОбъектов = ОбменДаннымиВызовСервера.ПараметрыСеансаПравилаРегистрацииОбъектов().Получить();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяПланаОбмена", ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелПланаОбмена));
	
	ТаблицаПравилаРегистрацииОбъектов = ПравилаРегистрацииОбъектов.Скопировать(Отбор, "ОбъектМетаданныхИмя, ИмяРеквизитаФлага");
	ТаблицаПравилаРегистрацииОбъектов.Индексы.Добавить("ОбъектМетаданныхИмя");
	
	// Дополняем таблицу объектами, отсутствующими в составе плана обмена или переопределяем существующие
	ТаблПравилаРегистрацииОбъектов = ПараметрыМакетаВТаблицу("ПравилаРегистрацииОбъектов");
	Для Каждого СтрокаТЧ Из ТаблПравилаРегистрацииОбъектов Цикл
		СтрокаТаблицыПравилРегистрацииОбъектов = ТаблицаПравилаРегистрацииОбъектов.Найти(СтрокаТЧ.ОбъектМетаданныхИмя,"ОбъектМетаданныхИмя");
		Если СтрокаТаблицыПравилРегистрацииОбъектов=Неопределено Тогда
			НоваяСтрока = ТаблицаПравилаРегистрацииОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПравилРегистрацииОбъектов,СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПравилаРегистрацииОбъектов;
КонецФункции
Функция СвойстваУзлаПланаОбмена(Узел)
	СвойстваУзлаПланаОбмена = Новый Структура;
	
	// получаем имена реквизитов
	ИменаРеквизитов = ОбщегоНазначения.ИменаРеквизитовПоТипу(Узел, Тип("ПеречислениеСсылка.РежимыВыгрузкиОбъектовОбмена"));
	
	// Получаем значения реквизитов.
	Если Не ПустаяСтрока(ИменаРеквизитов) Тогда
		СвойстваУзлаПланаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Узел, ИменаРеквизитов);
	КонецЕсли;
	
	КлючНастроек = ПолучитьИмяОбработкиОбмена();
	СвойстваУзлаПланаОбмена.Вставить("СохраненныеНастройкиУзлаОбмена", ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(УзелДляОбмена,КлючНастроек,,,"ВсеПользователи"));
	СвойстваУзлаПланаОбмена.Вставить("СохраненныеНастройкиУзлаОбменаВыгрузкаОстатков", ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(УзелДляОбмена,КлючНастроек+"ВыгрузкаОстатков",,,"ВсеПользователи"));
	Если НЕ ТипЗнч(СвойстваУзлаПланаОбмена.СохраненныеНастройкиУзлаОбмена)=Тип("Структура") Тогда
		СвойстваУзлаПланаОбмена.СохраненныеНастройкиУзлаОбмена = Новый Структура;
	КонецЕсли;
	
	Возврат СвойстваУзлаПланаОбмена;
КонецФункции
//} КонецОбласти
//{ Область ОтправкаДанных
Процедура ВыгрузкаОбъектаВыборки(КомпонентыОбмена, Объект, ПравилоОбработки = Неопределено)
	ВыгружаемыйОбъект = Неопределено;
	ЗаписьXML = КомпонентыОбмена.ФайлОбмена;
	Если НЕ ТипЗнч(Объект)=Тип("Структура") Тогда
		
		ОбъектМетаданныхТекущий = Объект.Метаданные();
		
		Если ПравилоОбработки=Неопределено Тогда
			ПравилоОбработки = ПОДПоОбъектуМетаданных(КомпонентыОбмена, ОбъектМетаданныхТекущий);
		КонецЕсли;
		
		Если ПравилоОбработки=Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ВыгружаемыйОбъект = Объект.Ссылка;
		Исключение
			ВыгружаемыйОбъект = Объект;
		КонецПопытки;
		
	Иначе
		ВыгружаемыйОбъект = Объект;
	КонецЕсли;
	
	Если НЕ КомпонентыОбмена.ВыгруженныеОбъекты.Найти(ВыгружаемыйОбъект)=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Отработка ПОД
	ИспользованиеПКО = Новый Структура;
	Для Каждого ИмяПКО Из ПравилоОбработки.ИспользуемыеПКО Цикл
		ИспользованиеПКО.Вставить(ИмяПКО, Истина);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПравилоОбработки.ПриОбработке) Тогда
		ПриОбработкеПОД(
			КомпонентыОбмена,
			ПравилоОбработки,
			Объект,
			ИспользованиеПКО);
	КонецЕсли;
	
	// Отработка ПКО
	ВыгружаемыйОбъектВыгружен = Ложь;
	НесколькоПКО = (ПравилоОбработки.ИспользуемыеПКО.Количество() > 1);
	Для Каждого ТекущееПКО Из ИспользованиеПКО Цикл
		
		Если Не ТекущееПКО.Значение Тогда
			// Если правил конвертации несколько, и некоторые из них не используются -
			//	необходимо выгрузить удаление объекта на случай если  ранее он был выгружен по этим правилам.
			
			Если НесколькоПКО И ПравилоОбработки.ОчисткаДанных Тогда
				ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти(ТекущееПКО.Ключ, "ИмяПКО");
				ВыгрузитьУдаление(КомпонентыОбмена, ВыгружаемыйОбъект, ПравилоКонвертации);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// 1. Поиск правила конвертации.
		
		ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти(ТекущееПКО.Ключ, "ИмяПКО");
		
		Если ПравилоКонвертации.ЭтоДокумент И НЕ ТипЗнч(Объект)=Тип("Структура") Тогда
			Если Объект.ПометкаУдаления ИЛИ (ПравилоКонвертации.ДокументМожетПроводиться И НЕ Объект.Проведен) Тогда
				ВыгрузитьУдаление(КомпонентыОбмена, ВыгружаемыйОбъект, ПравилоКонвертации);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// 2. Конвертируем Данные в Структуру по правилам конвертации.
		ДанныеXDTO = ДанныеXDTOИзДанныхИБ(КомпонентыОбмена, Объект, ПравилоКонвертации, Неопределено);
		
		// 3. Конвертируем Структуру в ОбъектXDTO.
		СсылкиИзОбъекта = Новый Массив;
		ОбъектXDTO = ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, ДанныеXDTO, ПравилоКонвертации.ТипXDTO,,СсылкиИзОбъекта);
		
		Попытка
			ОбъектXDTO.Проверить();
		Исключение
			ТекстОписаниеОшибки = "" + ОписаниеОшибки();
			ТекстОшибки = "Ошибка при вызове метода контекста (Проверить)";
			ТекстОписаниеОшибки = Сред(ТекстОписаниеОшибки,Найти(ТекстОписаниеОшибки,ТекстОшибки)+СтрДлина(ТекстОшибки));
			ТекстОписаниеОшибки = ТекстОписаниеОшибки + Символы.ПС + СокрЛП(Объект);
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, ТекстОписаниеОшибки);
			
			Если НЕ КомпонентыОбмена.Свойство("ОбъектыНеПрошедшиеПроверку") Тогда
				КомпонентыОбмена.Вставить("ОбъектыНеПрошедшиеПроверку", Новый СписокЗначений);
			КонецЕсли;
			Если ПравилоКонвертации.ЭтоСсылочныйТип Тогда
				КомпонентыОбмена.ОбъектыНеПрошедшиеПроверку.Добавить(Объект.Ссылка, ТекстОписаниеОшибки);
			Иначе
				КомпонентыОбмена.ОбъектыНеПрошедшиеПроверку.Добавить(Строка(ТипЗнч(Объект)) + Символы.ПС + Строка(Объект), ТекстОписаниеОшибки);
			КонецЕсли;
			
			Возврат;
		КонецПопытки;
		
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена ИЛИ КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьСвязанныеСсылки Тогда
			
			Для Каждого ЗначениеСсылки Из СсылкиИзОбъекта Цикл
				
				Если КомпонентыОбмена.ВыгруженныеОбъекты.Найти(ЗначениеСсылки)=Неопределено
					И КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты.Найти(ЗначениеСсылки)=Неопределено
					И НЕ ЗначениеСсылки=ВыгружаемыйОбъект 
					И ВыгружатьОбъектПоНеобходимости(КомпонентыОбмена, ЗначениеСсылки) 
					Тогда
					
					//Если Не РегистрыСведений.ДанныеОбъектовДляРегистрацииВОбменах.ОбъектЕстьВРегистре(ЗначениеСсылки, КомпонентыОбмена.УзелКорреспондента) Тогда
					Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ОстаткиДляВыгрузки")
						ИЛИ (НЕ КомпонентыОбмена.ЭтоОбменЧерезПланОбмена И КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьСвязанныеСсылки)
						ИЛИ НЕ ДОДляРегВОбменах_ОбъектЕстьВРегистре(ЗначениеСсылки, КомпонентыОбмена.УзелКорреспондента) Тогда
						
						ОбъектВыгружаемыйПоСсылке = Неопределено;
						
						Попытка
							ОбъектВыгружаемыйПоСсылке = ЗначениеСсылки.ПолучитьОбъект();
						Исключение
						КонецПопытки;
						
						Если НЕ ОбъектВыгружаемыйПоСсылке=Неопределено Тогда
							
							КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты.Добавить(ЗначениеСсылки);
							ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ОбъектВыгружаемыйПоСсылке);
							//РегистрыСведений.ДанныеОбъектовДляРегистрацииВОбменах.ДобавитьОбъектВФильтрРазрешенныхОбъектов(ЗначениеСсылки, КомпонентыОбмена.УзелКорреспондента);
							ДОДляРО_ДобавитьОбъектВФильтрРазрешенныхОбъектов(ЗначениеСсылки, КомпонентыОбмена.УзелКорреспондента);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
		// 4. Записываем ОбъектXDTO в XML-файл.
		МояФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		ВыгружаемыйОбъектВыгружен = Истина;
	КонецЦикла;
	
	Если ВыгружаемыйОбъектВыгружен И НЕ ВыгружаемыйОбъект=Неопределено Тогда
		КомпонентыОбмена.ВыгруженныеОбъекты.Добавить(ВыгружаемыйОбъект);
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область ПроцедурыИФункцииВерсионированияФорматаОбмена
Функция МенеджерОбменаВерсииФормата(Знач УзелИнформационнойБазы, Знач ВерсияФормата)
	Результат = ВерсииФорматаОбмена(УзелИнформационнойБазы).Получить(ВерсияФормата);
	
	Если Результат = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не определен Менеджер конвертации для версии формата обмена <%1>.'"),
			ВерсияФормата
		);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Функция ФорматОбмена(Знач УзелИнформационнойБазы, Знач ВерсияФормата)
	ФорматОбмена = МенеджерПланаОбмена(УзелИнформационнойБазы).ФорматОбмена();
	ЭлементыФормата = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФорматОбмена, "/");
	ЭлементыФормата.Добавить(ВерсияФормата);
	
	Возврат СтроковыеФункцииКлС_СтрокаИзМассиваПодстрок(ЭлементыФормата, "/");
КонецФункции
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2)
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0", СтрокаВерсии2);
	Версия1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка1, ".");
	Если Версия1.Количество() < 2 ИЛИ Версия1.Количество() > 3 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии1);
	КонецЕсли;
	Версия2 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка2, ".");
	Если Версия2.Количество() < 2 ИЛИ Версия2.Количество() > 3 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильный формат параметра СтрокаВерсии2: %1'"), СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Если СокрЛП(СтрокаВерсии1) = СокрЛП(СтрокаВерсии2) Тогда
		Возврат 0;
	КонецЕсли;
	
	// В последнем разряде может быть beta - это минимальная версия, не совместимая ни с какой другой.
	Если Версия1.Количество() = 3 И СокрЛП(Версия1[2]) = "beta" Тогда
		Возврат -1;
	ИначеЕсли Версия2.Количество() = 3 И СокрЛП(Версия2[2]) = "beta" Тогда
		Возврат 1;
	КонецЕсли;
	// Значимыми при сравнении являются первые 2 разряда (всегда число).
	Для Разряд = 0 По 1 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции
Функция ВерсияФорматаОбменаПриВыгрузке(КомпонентыОбмена)
	ВерсияФорматаОбмена = ""; 
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		Если НЕ КомпонентыОбмена.СвойстваУзлаПланаОбмена.СохраненныеНастройкиУзлаОбмена.Свойство("ВерсияФорматаОбмена", ВерсияФорматаОбмена) 
			ИЛИ ПустаяСтрока(ВерсияФорматаОбмена) Тогда
			ВерсияФорматаОбмена = МинимальнаяВерсияФорматаОбмена(КомпонентыОбмена); 
		КонецЕсли;
	Иначе
		ВерсияФорматаОбмена = КомпонентыОбмена.ВерсияФорматаОбмена;
		Если ПустаяСтрока(ВерсияФорматаОбмена) Тогда
			ВерсияФорматаОбмена = МинимальнаяВерсияФорматаОбмена(КомпонентыОбмена);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СокрЛП(ВерсияФорматаОбмена);
КонецФункции
//} КонецОбласти
//{ Область Прочее
Процедура ДобавитьОбъектВФильтрРазрешенныхОбъектов(Данные, Получатель)
	//РегистрыСведений.ДанныеОбъектовДляРегистрацииВОбменах.ДобавитьОбъектВФильтрРазрешенныхОбъектов(Данные, Получатель);
	ПроцедурыОбменаДанными.ПриЗаписиДокументаРегистрацияОбъектаИнформационнойБазыПриЗаписи(Данные, Получатель);
КонецПроцедуры
Процедура ЗаписьЖурналаРегистрацииОбменДанными(Комментарий, КомпонентыОбмена, Уровень = Неопределено)
	УзелКорреспондента = КомпонентыОбмена.УзелКорреспондента;
	КлючСообщенияЖурналаРегистрации = КомпонентыОбмена.КлючСообщенияЖурналаРегистрации;
	
	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;
	
	ОбъектМетаданных = Неопределено;
	
	Если     УзелКорреспондента <> Неопределено
		И Не УзелКорреспондента.Пустая() Тогда
		
		ОбъектМетаданных = УзелКорреспондента.Метаданные();
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, Уровень, ОбъектМетаданных,, Комментарий);
КонецПроцедуры
//} КонецОбласти
//} КонецОбласти
//{ Область СлужебныеПроцедурыИФункции
//{ Область ИнициализацияОбмена
Функция ТаблицаПравилОбработкиДанных(XMLСхема, МенеджерОбмена , НаправлениеОбмена)
	// Инициализация таблицы правил обработки данных
	ПравилаОбработкиДанных = Новый ТаблицаЗначений;
	ПравилаОбработкиДанных.Колонки.Добавить("Имя");
	ПравилаОбработкиДанных.Колонки.Добавить("ОбъектВыборкиФормат");
	ПравилаОбработкиДанных.Колонки.Добавить("ТипСсылкиXDTO");
	ПравилаОбработкиДанных.Колонки.Добавить("ОбъектВыборкиМетаданные");
	ПравилаОбработкиДанных.Колонки.Добавить("ВыборкаДанных");
	ПравилаОбработкиДанных.Колонки.Добавить("ИмяТаблицыДляВыборки");
	ПравилаОбработкиДанных.Колонки.Добавить("ПриОбработке",    Новый ОписаниеТипов("Строка"));
	
	// ИспользуемыеПКО - массив, содержащий в себе имена ПКО, в которые может быть направлен объект из данного ПОД.
	ПравилаОбработкиДанных.Колонки.Добавить("ИспользуемыеПКО",    Новый ОписаниеТипов("Массив"));
	
	ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных);
	
	КоличествоСтрок = ПравилаОбработкиДанных.Количество();
	Для НомерИтерации = 1 По КоличествоСтрок Цикл
		
		ИндексСтроки = КоличествоСтрок - НомерИтерации;
		ПОД = ПравилаОбработкиДанных.Получить(ИндексСтроки);
		
		Если НаправлениеОбмена = "Получение" Тогда
			
			ТипXDTO = МояФабрикаXDTO.Тип(XMLСхема, ПОД.ОбъектВыборкиФормат);
			
			Если ТипXDTO = Неопределено Тогда
				ПравилаОбработкиДанных.Удалить(ПОД);
				Продолжить;
			КонецЕсли;
			
			КлючевыеСвойства = ТипXDTO.Свойства.Получить("КлючевыеСвойства");
			Если КлючевыеСвойства <> Неопределено Тогда
				
				ТипКлючевыхСвойствОбъектаXDTO = КлючевыеСвойства.Тип;
				СвойствоСсылкаXDTO = ТипКлючевыхСвойствОбъектаXDTO.Свойства.Получить("Ссылка");
				Если СвойствоСсылкаXDTO <> Неопределено Тогда
					ПОД.ТипСсылкиXDTO = СвойствоСсылкаXDTO.Тип;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ПОД.ОбъектВыборкиМетаданные <> Неопределено Тогда
			ПОД.ИмяТаблицыДляВыборки = ПОД.ОбъектВыборкиМетаданные.ПолноеИмя();
		КонецЕсли;
		
		
	КонецЦикла;
	
	Возврат ПравилаОбработкиДанных;
КонецФункции
Функция ТаблицаПравилКонвертации(XMLСхема, МенеджерОбмена , НаправлениеОбмена, ПравилаОбработкиДанных)
	// Инициализация таблицы правил конвертации
	ПравилаКонвертации = Новый ТаблицаЗначений;
	ПравилаКонвертации.Колонки.Добавить("ИмяПКО", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	ПравилаКонвертации.Колонки.Добавить("ОбъектДанных");
	ПравилаКонвертации.Колонки.Добавить("ОбъектФормата",                Новый ОписаниеТипов("Строка"));
	ПравилаКонвертации.Колонки.Добавить("ТипПолученныхДанныхСтрокой",   Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)));
	ПравилаКонвертации.Колонки.Добавить("ИмяТаблицыПолученныхДанных",   Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)));
	ПравилаКонвертации.Колонки.Добавить("ПредставлениеТипаПолученныхДанных", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)));
	ПравилаКонвертации.Колонки.Добавить("Свойства",                     Новый ОписаниеТипов("ТаблицаЗначений"));
	ПравилаКонвертации.Колонки.Добавить("ПоляПоиска",                   Новый ОписаниеТипов("Массив"));
	ПравилаКонвертации.Колонки.Добавить("СвойстваТабличныхЧастей",      Новый ОписаниеТипов("Структура"));
	ПравилаКонвертации.Колонки.Добавить("ПоляПредставленияОбъекта",     Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)));
	ПравилаКонвертации.Колонки.Добавить("РеквизитыШапкиПолученныхДанныхСтрокой", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1000)));
	ПравилаКонвертации.Колонки.Добавить("ПриОтправкеДанных",            Новый ОписаниеТипов("Строка"));
	ПравилаКонвертации.Колонки.Добавить("ПриКонвертацииДанныхXDTO",     Новый ОписаниеТипов("Строка"));
	ПравилаКонвертации.Колонки.Добавить("ПередЗаписьюПолученныхДанных", Новый ОписаниеТипов("Строка"));
	ПравилаКонвертации.Колонки.Добавить("ПослеЗагрузкиВсехДанных",      Новый ОписаниеТипов("Строка"));
	ПравилаКонвертации.Колонки.Добавить("РасширеннаяСсылка",            Новый ОписаниеТипов("Булево"));
	ПравилаКонвертации.Колонки.Добавить("ПравилоДляГруппыСправочника",  Новый ОписаниеТипов("Булево"));
	ПравилаКонвертации.Колонки.Добавить("ВариантИдентификации",         Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(60)));
	ПравилаКонвертации.Колонки.Добавить("РазрешитьСоздаватьОбъектИзСтруктуры",   Неопределено);
	
	ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации);
	
	Если НаправлениеОбмена = "Получение" Тогда
		
		// Отберем строки правил конвертации, у которых не заполнен реквизит "РазрешитьСоздаватьОбъектИзСтруктуры".
		ПараметрыОтбора = Новый Структура("РазрешитьСоздаватьОбъектИзСтруктуры", Неопределено);
		СтрокиДляОбработки = ПравилаКонвертации.НайтиСтроки(ПараметрыОтбора);
		
		// Для найденных строк необходимо заполнить реквизит "РазрешитьСоздаватьОбъектИзСтруктуры".
		// Реквизит заполняется по следующему алгоритму:
		// если правило конвертации объекта формата не указано
		// в правилах обработки данных для данного объекта формата, 
		// тогда реквизит заполняется значением "Истина", 
		// т.к. полученные по этому ПКО данные не смогут быть загружены самостоятельно,
		// иначе заполняем значением "Ложь".
		Для Каждого СтрокаОбработки Из СтрокиДляОбработки Цикл
			СтрокаОбработки.РазрешитьСоздаватьОбъектИзСтруктуры = Истина;
			СтрокаПравилОбработкиДанных = ПравилаОбработкиДанных.Найти(СтрокаОбработки.ОбъектФормата, "ОбъектВыборкиФормат");
			Если СтрокаПравилОбработкиДанных <> Неопределено Тогда
				МассивИспользуемыхПКО = СтрокаПравилОбработкиДанных.ИспользуемыеПКО;
				СтрокаОбработки.РазрешитьСоздаватьОбъектИзСтруктуры = МассивИспользуемыхПКО.Найти(СтрокаОбработки.ИмяПКО) = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Добавляем служебные поля таблицы правил конвертации
	ПравилаКонвертации.Колонки.Добавить("ТипXDTO");
	ПравилаКонвертации.Колонки.Добавить("ТипСсылкиXDTO");
	ПравилаКонвертации.Колонки.Добавить("ТипКлючевыхСвойствОбъектаXDTO");
	ПравилаКонвертации.Колонки.Добавить("ТипДанных");
	
	ПравилаКонвертации.Колонки.Добавить("МенеджерОбъекта");
	ПравилаКонвертации.Колонки.Добавить("ПолноеИмя");
	
	ПравилаКонвертации.Колонки.Добавить("ЭтоДокумент");
	ПравилаКонвертации.Колонки.Добавить("ЭтоРегистр");
	ПравилаКонвертации.Колонки.Добавить("ЭтоСправочник");
	ПравилаКонвертации.Колонки.Добавить("ЭтоПеречисление");
	ПравилаКонвертации.Колонки.Добавить("ЭтоПланВидовХарактеристик");
	ПравилаКонвертации.Колонки.Добавить("ЭтоБизнесПроцесс");
	ПравилаКонвертации.Колонки.Добавить("ЭтоЗадача");
	ПравилаКонвертации.Колонки.Добавить("ЭтоПланСчетов");
	ПравилаКонвертации.Колонки.Добавить("ЭтоПланВидовРасчета");
	ПравилаКонвертации.Колонки.Добавить("ЭтоКонстанта");
	
	ПравилаКонвертации.Колонки.Добавить("ДокументМожетПроводиться", Новый ОписаниеТипов("Булево"));
	
	ПравилаКонвертации.Колонки.Добавить("ЭтоСсылочныйТип");
	
	ПравилаКонвертации.Колонки.Добавить("ЕстьОбработчикПриОтправкеДанных", Новый ОписаниеТипов("Булево"));
	ПравилаКонвертации.Колонки.Добавить("ЕстьОбработчикПриКонвертацииДанныхXDTO", Новый ОписаниеТипов("Булево"));
	ПравилаКонвертации.Колонки.Добавить("ЕстьОбработчикПередЗаписьюПолученныхДанных", Новый ОписаниеТипов("Булево"));
	ПравилаКонвертации.Колонки.Добавить("ЕстьОбработчикПослеЗагрузкиВсехДанных", Новый ОписаниеТипов("Булево"));
	
	РазрешитьПроведениеДокумента = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	
	КоличествоСтрок = ПравилаКонвертации.Количество();
	Для НомерИтерации = 1 По КоличествоСтрок Цикл
		
		ИндексСтроки = КоличествоСтрок - НомерИтерации;
		ПравилоКонвертации = ПравилаКонвертации.Получить(ИндексСтроки);
		
		Если ЗначениеЗаполнено(ПравилоКонвертации.ОбъектФормата) Тогда
			ПравилоКонвертации.ТипXDTO = МояФабрикаXDTO.Тип(XMLСхема, ПравилоКонвертации.ОбъектФормата);
			Если ПравилоКонвертации.ТипXDTO = Неопределено Тогда
				ПравилаКонвертации.Удалить(ПравилоКонвертации);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НаправлениеОбмена = "Получение" Тогда
			
			МетаданныеОбъекта = ПравилоКонвертации.ОбъектДанных;
		
			ПравилоКонвертации.ИмяТаблицыПолученныхДанных = МетаданныеОбъекта.ПолноеИмя();
			ПравилоКонвертации.ПредставлениеТипаПолученныхДанных = МетаданныеОбъекта.Представление();
			ПравилоКонвертации.ТипПолученныхДанныхСтрокой = ИмяТипаДанныхПоОбъектуМетаданных(ПравилоКонвертации.ОбъектДанных, Ложь, Ложь);
		
			ПравилоКонвертации.ПоляПредставленияОбъекта = ?(ПравилоКонвертации.ПоляПоиска.Количество() = 0, "", ПравилоКонвертации.ПоляПоиска[0]);
			
			// Реквизиты объекта получаемых данных
			РеквизитыСтрокой = "";
			Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
				РеквизитыСтрокойКопия = РеквизитыСтрокой;
				РеквизитыСтрокой = РеквизитыСтрокой + ?(ПустаяСтрока(РеквизитыСтрокой), "", ",") + Реквизит.Имя;
				Если СтрДлина(РеквизитыСтрокой) > 1000 Тогда
					РеквизитыСтрокой = РеквизитыСтрокойКопия;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
				Если Реквизит.Имя = "Наименование"
					ИЛИ Реквизит.Имя = "Код"
					ИЛИ Реквизит.Имя = "Родитель"
					ИЛИ Реквизит.Имя = "Владелец"
					ИЛИ Реквизит.Имя = "Дата"
					ИЛИ Реквизит.Имя = "Номер" Тогда
					РеквизитыСтрокойКопия = РеквизитыСтрокой;
					РеквизитыСтрокой = РеквизитыСтрокой + ?(ПустаяСтрока(РеквизитыСтрокой), "", ",") + Реквизит.Имя;
					Если СтрДлина(РеквизитыСтрокой) > 1000 Тогда
						РеквизитыСтрокой = РеквизитыСтрокойКопия;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ПравилоКонвертации.РеквизитыШапкиПолученныхДанныхСтрокой = РеквизитыСтрокой;
			
			ПравилоКонвертации.ЕстьОбработчикПриКонвертацииДанныхXDTO     = Не ПустаяСтрока(ПравилоКонвертации.ПриКонвертацииДанныхXDTO);
			ПравилоКонвертации.ЕстьОбработчикПередЗаписьюПолученныхДанных = Не ПустаяСтрока(ПравилоКонвертации.ПередЗаписьюПолученныхДанных);
			ПравилоКонвертации.ЕстьОбработчикПослеЗагрузкиВсехДанных      = Не ПустаяСтрока(ПравилоКонвертации.ПослеЗагрузкиВсехДанных);
			
		Иначе
			ПравилоКонвертации.ЕстьОбработчикПриОтправкеДанных            = Не ПустаяСтрока(ПравилоКонвертации.ПриОтправкеДанных);
		КонецЕсли;
		
		Если ПравилоКонвертации.ОбъектДанных <> Неопределено Тогда
			
			ПравилоКонвертации.ПолноеИмя                  = ПравилоКонвертации.ОбъектДанных.ПолноеИмя();
			ПравилоКонвертации.МенеджерОбъекта            = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПравилоКонвертации.ПолноеИмя);
			
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ПравилоКонвертации.ОбъектДанных);
			
			ПравилоКонвертации.ТипДанных = Тип(ИмяТипаДанныхПоОбъектуМетаданных(ПравилоКонвертации.ОбъектДанных, Ложь, Ложь));
			
		Иначе
			ИмяБазовогоТипа = "";
		КонецЕсли;
		
		ПравилоКонвертации.ЭтоДокумент               = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаДокументы());
		ПравилоКонвертации.ЭтоСправочник             = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаСправочники());
		ПравилоКонвертации.ЭтоПеречисление           = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПеречисления());
		ПравилоКонвертации.ЭтоПланВидовХарактеристик = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыВидовХарактеристик());
		ПравилоКонвертации.ЭтоБизнесПроцесс          = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаБизнесПроцессы());
		ПравилоКонвертации.ЭтоЗадача                 = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаЗадачи());
		ПравилоКонвертации.ЭтоПланСчетов             = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыСчетов());
		ПравилоКонвертации.ЭтоПланВидовРасчета       = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыВидовРасчета());
		ПравилоКонвертации.ЭтоКонстанта              = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаКонстанты());
		
		Если ПравилоКонвертации.ОбъектДанных <> Неопределено Тогда
			
			Если ПравилоКонвертации.ЭтоДокумент Тогда
				ПравилоКонвертации.ДокументМожетПроводиться = ПравилоКонвертации.ОбъектДанных.Проведение = РазрешитьПроведениеДокумента;
			КонецЕсли;
			
			ПравилоКонвертации.ЭтоРегистр = ОбщегоНазначения.ЭтоРегистр(ПравилоКонвертации.ОбъектДанных);
			
		Иначе
			ПравилоКонвертации.ЭтоРегистр = Ложь;
		КонецЕсли;
		
		ПравилоКонвертации.ЭтоСсылочныйТип = ПравилоКонвертации.ЭтоДокумент
			Или ПравилоКонвертации.ЭтоСправочник
			Или ПравилоКонвертации.ЭтоПланВидовХарактеристик
			Или ПравилоКонвертации.ЭтоБизнесПроцесс
			Или ПравилоКонвертации.ЭтоЗадача
			Или ПравилоКонвертации.ЭтоПланСчетов
			Или ПравилоКонвертации.ЭтоПланВидовРасчета;
		
		Если ЗначениеЗаполнено(ПравилоКонвертации.ОбъектФормата) Тогда
			КлючевыеСвойства = ПравилоКонвертации.ТипXDTO.Свойства.Получить("КлючевыеСвойства");
			Если КлючевыеСвойства <> Неопределено Тогда
				
				ТипКлючевыхСвойствОбъектаXDTO = КлючевыеСвойства.Тип;
				ПравилоКонвертации.ТипКлючевыхСвойствОбъектаXDTO = ТипКлючевыхСвойствОбъектаXDTO;
				
				ПКСДляДобавления = Новый Массив;
				
				КлючевыеСвойстваПКО = Новый Массив;
				Для каждого ТекКлючевоеСвойство  Из ТипКлючевыхСвойствОбъектаXDTO.Свойства Цикл
					КлючевыеСвойстваПКО.Добавить(ТекКлючевоеСвойство.Имя);
					Если Найти(ТекКлючевоеСвойство.Тип.Имя,"КлючевыеСвойства")=0 Тогда
						СвойстваКлючевогоСвойства = Новый Структура("Свойства",Неопределено);
						ЗаполнитьЗначенияСвойств(СвойстваКлючевогоСвойства, ТекКлючевоеСвойство.Тип);
						Если НЕ СвойстваКлючевогоСвойства.Свойства=Неопределено Тогда
							Для каждого ТекКлючевоеСвойствоИерархия  Из СвойстваКлючевогоСвойства.Свойства Цикл
								КлючевыеСвойстваПКО.Добавить(ТекКлючевоеСвойствоИерархия.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ТаблицаПКС = ПравилоКонвертации.Свойства;
				Для Каждого ПКС Из ТаблицаПКС Цикл
					
					Если НЕ КлючевыеСвойстваПКО.Найти(ПКС.СвойствоФормата)=Неопределено Тогда
						ПКС.ОбработкаКлючевогоСвойства = Истина;
						
						Если ПравилоКонвертации.ТипXDTO.Свойства.Получить(ПКС.СвойствоФормата) <> Неопределено Тогда
							ПКСДляДобавления.Добавить(ПКС);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого ПКС Из ПКСДляДобавления Цикл
					НовоеПКС = ТаблицаПКС.Добавить();
					ЗаполнитьЗначенияСвойств(НовоеПКС, ПКС, , "ОбработкаКлючевогоСвойства");
				КонецЦикла;
				
				СвойствоСсылкаXDTO = ТипКлючевыхСвойствОбъектаXDTO.Свойства.Получить("Ссылка");
				Если СвойствоСсылкаXDTO <> Неопределено Тогда
					
					ПравилоКонвертации.ТипСсылкиXDTO = СвойствоСсылкаXDTO.Тип;
					
					Если ПравилоКонвертации.ЭтоСсылочныйТип
						И НаправлениеОбмена = "Отправка" Тогда
						ПКСДляСсылки = ТаблицаПКС.Добавить();
						ПКСДляСсылки.СвойствоКонфигурации = "Ссылка";
						ПКСДляСсылки.СвойствоФормата = "Ссылка";
						ПКСДляСсылки.ОбработкаКлючевогоСвойства = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска"
			Или ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска" Тогда
			
			ТаблицаПКС = ПравилоКонвертации.Свойства;
			Для Каждого ПКС Из ТаблицаПКС Цикл
				
				Если ЗначениеЗаполнено(ПравилоКонвертации.ПоляПоиска) Тогда
					Для Каждого ЭлементПолейПоиска Из ПравилоКонвертации.ПоляПоиска Цикл
						ПоляПоискаМассивом = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭлементПолейПоиска, ",");
						Для Каждого ПолеПоиска Из ПоляПоискаМассивом Цикл
							Если ПолеПоиска = ПКС.СвойствоКонфигурации Тогда
								ПКС.ОбработкаПоисковогоСвойства = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого ТЧ Из ПравилоКонвертации.СвойстваТабличныхЧастей Цикл
			Для Каждого ПКС Из ТЧ.Значение Цикл
				
				ПКС.ИмяТЧ = ТЧ.Ключ;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	// Добавляем индексы таблицы правил конвертации
	Если НаправлениеОбмена = "Отправка" Тогда
		
		ПравилаКонвертации.Индексы.Добавить("ТипДанных");
		ПравилаКонвертации.Индексы.Добавить("ТипXDTO");
		ПравилаКонвертации.Индексы.Добавить("РасширеннаяСсылка");
		
	Иначе
		
		ПравилаКонвертации.Индексы.Добавить("ТипXDTO");
		ПравилаКонвертации.Индексы.Добавить("ТипСсылкиXDTO");
		ПравилаКонвертации.Индексы.Добавить("ТипДанных");
		
	КонецЕсли;
	
	Возврат ПравилаКонвертации;
КонецФункции
Функция ТаблицаПравилКонвертацииПредопределенныхДанных(XMLСхема, МенеджерОбмена , НаправлениеОбмена)
	// Инициализация таблицы правил конвертации.
	ПравилаКонвертации = Новый ТаблицаЗначений;
	ПравилаКонвертации.Колонки.Добавить("ТипДанных");
	ПравилаКонвертации.Колонки.Добавить("ТипXDTO");
	ПравилаКонвертации.Колонки.Добавить("КонвертацииЗначенийПриПолучении");
	ПравилаКонвертации.Колонки.Добавить("КонвертацииЗначенийПриОтправке");
	
	ПравилаКонвертации.Колонки.Добавить("ИмяПКПД", Новый ОписаниеТипов("Строка"));
	
	ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации);
	
	Для Каждого ПравилоКонвертации Из ПравилаКонвертации Цикл
	
		ПравилоКонвертации.ТипXDTO = МояФабрикаXDTO.Тип(XMLСхема, ПравилоКонвертации.ТипXDTO);
		ПравилоКонвертации.ТипДанных = Тип(ИмяТипаДанныхПоОбъектуМетаданных(ПравилоКонвертации.ТипДанных, Ложь, Ложь));
		
	КонецЦикла;
	
	// Добавляем индексы таблицы правил конвертации.
	Если НаправлениеОбмена = "Отправка" Тогда
		
		ПравилаКонвертации.Индексы.Добавить("ТипДанных");
		ПравилаКонвертации.Индексы.Добавить("ТипXDTO");
		
	Иначе
		
		ПравилаКонвертации.Индексы.Добавить("ТипXDTO");
		ПравилаКонвертации.Индексы.Добавить("ТипДанных");
		
	КонецЕсли;
	
	Возврат ПравилаКонвертации;
КонецФункции
Функция СтруктураПараметровКонвертации(МенеджерОбмена)
	// Инициализация структуры с параметрами конвертации.
	//	Возможно, в будущем понадобится не структура, а таблица (если потребуется передавать параметры из одной базы в
	//	другую).
	ПараметрыКонвертации = Новый Структура();
	ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации);
	Возврат ПараметрыКонвертации;
КонецФункции
//} КонецОбласти
//{ Область ОтправкаДанных
Функция ПолучитьСсылкуНаДанные(Данные)
	Попытка
		Возврат Данные.Ссылка;
	Исключение
	КонецПопытки;
КонецФункции
Функция ЭтоСсылкаXDTO(Знач Тип)
	Возврат МояФабрикаXDTO.Тип(XMLБазоваяСхема(), "Ref").ЭтоПотомок(Тип);
КонецФункции
Функция ВыгружатьОбъектПоНеобходимости(КомпонентыОбмена, Объект)
	Если КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьСвязанныеСсылки Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Получаем настройку из КЭШа
	РегистрацияПоНеобходимости = КомпонентыОбмена.СоответствиеРегистрацияПоНеобходимости.Получить(ОбъектМетаданных);
	Если РегистрацияПоНеобходимости <> Неопределено Тогда
		Возврат РегистрацияПоНеобходимости;
	КонецЕсли;
	
	РегистрацияПоНеобходимости = Ложь;
	
	Отбор = Новый Структура("ОбъектМетаданныхИмя", ОбъектМетаданных.ПолноеИмя());
	МассивПравил = КомпонентыОбмена.ТаблицаПравилаРегистрацииОбъектов.НайтиСтроки(Отбор);
	
	Для Каждого Правило Из МассивПравил Цикл
		
		Если Не ПустаяСтрока(Правило.ИмяРеквизитаФлага) Тогда
			
			ЗначениеРеквизитаФлага = Неопределено;
			КомпонентыОбмена.СвойстваУзлаПланаОбмена.Свойство(Правило.ИмяРеквизитаФлага, ЗначениеРеквизитаФлага);
			
			РегистрацияПоНеобходимости = (ЗначениеРеквизитаФлага = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости
				Или ЗначениеРеквизитаФлага = Перечисления.РежимыВыгрузкиОбъектовОбмена.ПустаяСсылка());
	
			Если РегистрацияПоНеобходимости Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сохраняем полученное значение в кэше.
	КомпонентыОбмена.СоответствиеРегистрацияПоНеобходимости.Вставить(ОбъектМетаданных, РегистрацияПоНеобходимости);
	Возврат РегистрацияПоНеобходимости;
КонецФункции
Процедура ЗаписатьУдалениеОбъектаXDTO(КомпонентыОбмена, Ссылка, ТипСсылкиXDTO)
	УИДОбъектаXDTO = ПубличныйИдентификаторПоСсылкеОбъекта(
		КомпонентыОбмена.УзелКорреспондента, Ссылка);
		
	Если НЕ ЗначениеЗаполнено(УИДОбъектаXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	XMLСхема = КомпонентыОбмена.XMLСхема;
	ТипXDTO = МояФабрикаXDTO.Тип(XMLСхема, "УдалениеОбъекта");
	
	Для Каждого Свойство Из ТипXDTO.Свойства[0].Тип.Свойства[0].Тип.Свойства Цикл
		Если Свойство.Тип = ТипСсылкиXDTO Тогда
			
			ЗначениеXDTOЛюбаяСсылка = МояФабрикаXDTO.Создать(Свойство.Тип, УИДОбъектаXDTO);
			ЛюбаяСсылкаОбъект = МояФабрикаXDTO.Создать(ТипXDTO.Свойства[0].Тип);
			ЛюбаяСсылкаОбъект.СсылкаНаОбъект = МояФабрикаXDTO.Создать(ТипXDTO.Свойства[0].Тип.Свойства[0].Тип);
			ЛюбаяСсылкаОбъект.СсылкаНаОбъект.Установить(Свойство, ЗначениеXDTOЛюбаяСсылка);
			
			ДанныеXDTO = МояФабрикаXDTO.Создать(ТипXDTO);
			ДанныеXDTO.СсылкаНаОбъект = МояФабрикаXDTO.Создать(ТипXDTO.Свойства[0].Тип);
			ДанныеXDTO.Установить(ТипXDTO.Свойства[0], ЛюбаяСсылкаОбъект);
			МояФабрикаXDTO.ЗаписатьXML(КомпонентыОбмена.ФайлОбмена, ДанныеXDTO);
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ВыгрузитьУдаление(КомпонентыОбмена, Ссылка, ПравилоКонвертации = Неопределено)
	Если ПравилоКонвертации <> Неопределено Тогда
		// ПКО передали явно (при вызове удаления для конкретного ПКО).
		ЗаписатьУдалениеОбъектаXDTO(КомпонентыОбмена, Ссылка, ПравилоКонвертации.ТипСсылкиXDTO);
	Иначе
		
		// Поиск ПКО
		ПравилоОбработки = ПОДПоОбъектуМетаданных(КомпонентыОбмена, Ссылка.Метаданные());
		Если ПравилоОбработки=Неопределено Тогда
			Возврат;
		КонецЕсли;
		МассивИменПКО    = ПравилоОбработки.ИспользуемыеПКО;
		
		// Массив нужен для "свертки" ПКО по типам XDTO.
		ОбработанныеТипыСсылокXDTO = Новый Массив;
		
		Для Каждого ПравилоКонвертацииИмя Из МассивИменПКО Цикл
			
			ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти(ПравилоКонвертацииИмя, "ИмяПКО");
			
			Если ПравилоКонвертации = Неопределено Тогда
				// Допустимо указание ПКО, не предназначенного для текущей версии формата данных.
				Продолжить;
			КонецЕсли;
			
			// "Свертка" ПКО по типу ссылки XDTO.
			ТипСсылкиXDTO = ПравилоКонвертации.ТипСсылкиXDTO;
			Если ОбработанныеТипыСсылокXDTO.Найти(ТипСсылкиXDTO) = Неопределено Тогда
				ОбработанныеТипыСсылокXDTO.Добавить(ТипСсылкиXDTO);
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЗаписатьУдалениеОбъектаXDTO(КомпонентыОбмена, Ссылка, ТипСсылкиXDTO);
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
Функция КонвертироватьПеречислениеВXDTO(КомпонентыОбмена, ЗначениеПеречисления, ТипПеречисленияXDTO)
	Если ТипЗнч(ЗначениеПеречисления) = Тип("Строка") Тогда
	
		ЗначениеXDTO = МояФабрикаXDTO.Создать(ТипПеречисленияXDTO, СокрЛП(ЗначениеПеречисления));
		
	Иначе
	
		ПравилаКонвертацииПредопределенныхДанных = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных;
		
		ПравилоКонвертации = НайтиПравилоКонвертацииДляЗначения(
			ПравилаКонвертацииПредопределенныхДанных, ТипЗнч(ЗначениеПеречисления), ТипПеречисленияXDTO);
		
		ЗначениеXDTO = МояФабрикаXDTO.Создать(ТипПеречисленияXDTO,
			ЗначениеПеречисленияXDTO(ПравилоКонвертации.КонвертацииЗначенийПриОтправке, ЗначениеПеречисления)
		);
		
	КонецЕсли;
	Возврат ЗначениеXDTO;
КонецФункции
Функция НайтиПравилоКонвертацииДляЗначения(ПравилаКонвертацииПредопределенныхДанных, Знач Тип, Знач ТипXDTO = Неопределено)
	Если ТипXDTO = Неопределено Тогда
		
		НайденныеПравила = ПравилаКонвертацииПредопределенныхДанных.НайтиСтроки(Новый Структура("ТипДанных", Тип));
		
		Если НайденныеПравила.Количество() = 1 Тогда
			
			ПравилоКонвертации = НайденныеПравила[0];
			
			Возврат ПравилоКонвертации;
			
		ИначеЕсли НайденныеПравила.Количество() > 1 Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка правил конвертации предопределенных данных.
				|Задано более одного правила конвертации для типа источника <%1>.'"),
				Строка(Тип)
			);
			
		КонецЕсли;
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка правил конвертации предопределенных данных.
			|Правило конвертации не определено для типа источника <%1>.'"),
			Строка(Тип)
		);
			
	Иначе
		
		НайденныеПравила = ПравилаКонвертацииПредопределенныхДанных.НайтиСтроки(Новый Структура("ТипДанных, ТипXDTO", Тип, ТипXDTO, Ложь));
		
		Если НайденныеПравила.Количество() = 1 Тогда
			
			ПравилоКонвертации = НайденныеПравила[0];
			
			Возврат ПравилоКонвертации;
			
		ИначеЕсли НайденныеПравила.Количество() > 1 Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка правил конвертации предопределенных данных.
				|Задано более одного правила конвертации для типа источника <%1> и типа приемника <%2>.'"),
				Строка(Тип),
				Строка(ТипXDTO)
			);
			
		КонецЕсли;
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка правил конвертации предопределенных данных.
			|Правило конвертации не определено для типа источника <%1> и типа приемника <%2>.'"),
			Строка(Тип),
			Строка(ТипXDTO)
		);
		
	КонецЕсли;
КонецФункции
Функция ЗначениеПеречисленияXDTO(Знач КонвертацииЗначений, Знач Значение)
	ЗначениеXDTO = КонвертацииЗначений.Получить(Значение);
	
	Если ЗначениеXDTO = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено правило конвертации для значения предопределенных данных.
			|Тип значения источника: <%1>
			|Значение источника: <%2>'"),
			ТипЗнч(Значение),
			Строка(Значение)
		);
	КонецЕсли;
	
	Возврат ЗначениеXDTO;
КонецФункции
Функция КонвертироватьСсылкуВXDTO(КомпонентыОбмена, ЗначениеСсылки, ТипСсылкиXDTO)
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
		УИДОбъектаXDTO = ПубличныйИдентификаторПоСсылкеОбъекта(
			КомпонентыОбмена.УзелКорреспондента, ЗначениеСсылки);
		ЗначениеXDTO = МояФабрикаXDTO.Создать(ТипСсылкиXDTO, УИДОбъектаXDTO);
			
		Возврат ЗначениеXDTO;
		
	Иначе
		Возврат СокрЛП(ЗначениеСсылки.УникальныйИдентификатор());
	КонецЕсли;
КонецФункции
Функция ЭтоТаблицаОбъекта(Знач СвойствоXDTO)
	Если ТипЗнч(СвойствоXDTO.Тип) = Тип("ТипОбъектаXDTO")
		И СвойствоXDTO.Тип.Свойства.Количество() = 1 Тогда
		
		Возврат СвойствоXDTO.Тип.Свойства[0].ВерхняяГраница <> 1;
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции
Процедура ВыполнитьВыгрузкуЗарегистрированныхДанных(КомпонентыОбмена, НомерСообщения)
	УзелДляОбмена = КомпонентыОбмена.УзелКорреспондента;
	
	НачальнаяВыгрузкаДанных = ОбменДаннымиСервер.УстановленПризнакНачальнойВыгрузкиДанных(УзелДляОбмена);
	
	// Получаем выборку измененных данных.
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелДляОбмена, НомерСообщения);
	
	КоличествоОбъектовКВыгрузке = 0;
	Пока ВыборкаИзменений.Следующий() Цикл
		КоличествоОбъектовКВыгрузке = КоличествоОбъектовКВыгрузке + 1;
	КонецЦикла;
	КомпонентыОбмена.Вставить("КоличествоОбъектовКВыгрузке", КоличествоОбъектовКВыгрузке);
	ВыборкаИзменений.Сбросить();
	
	УзелДляОбменаОбъект = УзелДляОбмена.ПолучитьОбъект();
	
	//  Алгоритм выгрузки данных в XML-файл:
	// 1. Получаем Данные из ИБ
	// 2. Отправляем информацию об удалении либо выгружаем данные.
	// 3. Конвертируем Данные в Структуру по правилу конвертации.
	// 4. Конвертируем Данные в Структуру в обработчике ПриОтправкеДанных.
	// 5. Конвертируем Структуру в ОбъектXDTO.
	// 6. Записываем ОбъектXDTO в XML-файл.
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		КомпонентыОбмена.СчетчикВыгруженныхОбъектов = КомпонентыОбмена.СчетчикВыгруженныхОбъектов + 1;
		РассчитатьПроцентВыгрузки(КомпонентыОбмена.СчетчикВыгруженныхОбъектов, КомпонентыОбмена.КоличествоОбъектовКВыгрузке);
		
		// 1. Получаем Данные из ИБ
		Данные = ВыборкаИзменений.Получить();
	
		// 2. Отправляем информацию об удалении либо выгружаем данные.
		Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
			Попытка
				ВыгрузитьУдаление(КомпонентыОбмена, Данные.Ссылка);
			Исключение
			КонецПопытки;
		Иначе
			
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
			ОбменДаннымиСобытия.ПриОтправкеДанныхКорреспонденту(Данные, ОтправкаЭлемента, НачальнаяВыгрузкаДанных, УзелДляОбменаОбъект);
			
			Если ОтправкаЭлемента=ОтправкаЭлементаДанных.Удалить И НЕ ВыгружатьОбъектПоНеобходимости(КомпонентыОбмена,Данные) Тогда
				Попытка
					ВыгрузитьУдаление(КомпонентыОбмена, Данные.Ссылка);
				Исключение
				КонецПопытки;
			ИначеЕсли ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
				// Ситуация, когда объект не соответствует условиям фильтра, но его не нужно отправлять как удаление.
				// Возникает в случае первоначальной выгрузки данных.
				Продолжить;
			Иначе
				ВыгрузкаОбъектаВыборки(КомпонентыОбмена, Данные);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
//} КонецОбласти
//{ Область ПоискПравилОбмена
Функция ПОДПоОбъектуМетаданных(КомпонентыОбмена, ОбъектМетаданных)
	ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти(ОбъектМетаданных, "ОбъектВыборкиМетаданные");
	
	Если ПравилоОбработки = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		
		Если ЗапретВыгрузкиВНастройкеОбменаДанными(КомпонентыОбмена, ОбъектМетаданных) Тогда
			Возврат Неопределено;
		КонецЕсли;			
		
		Возврат ПравилоОбработки;
	КонецЕсли;
КонецФункции
Функция ПОДПоИмени(КомпонентыОбмена, Имя)
	ПравилоОбработки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти(Имя, "Имя");
	
	Если ПравилоОбработки = Неопределено Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено ПОД с именем %1'"), Имя);
			
	Иначе
		Возврат ПравилоОбработки;
	КонецЕсли;
КонецФункции
Функция ЗапретВыгрузкиВНастройкеОбменаДанными(КомпонентыОбмена, ОбъектМетаданных)
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.Свойство("ИнформацияОбъектовДляВыгрузки") Тогда
		Возврат Ложь;
	КонецЕсли;
	СоответствиеНастроекВыгрузки = КомпонентыОбмена.ПараметрыКонвертации.ИнформацияОбъектовДляВыгрузки.Получить(ОбъектМетаданных.Имя);
	Если НЕ СоответствиеНастроекВыгрузки=Неопределено Тогда
		Возврат СоответствиеНастроекВыгрузки.ВыгружатьДанные=Ложь;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции
//} КонецОбласти
//{ Область ВедениеПротокола
Функция ПолучитьСтруктуруЗаписиПротокола(КСообщенияОбОшибках = "", Знач СтрокаОшибки = "")
	СтруктураОшибки = Новый Структура();
	СтруктураОшибки.Вставить("ИмяПКО");
	СтруктураОшибки.Вставить("ИмяПОД");
	СтруктураОшибки.Вставить("Нпп");
	СтруктураОшибки.Вставить("ГНпп");
	СтруктураОшибки.Вставить("Источник");
	СтруктураОшибки.Вставить("ТипОбъекта");
	СтруктураОшибки.Вставить("Свойство");
	СтруктураОшибки.Вставить("Значение");
	СтруктураОшибки.Вставить("ТипЗначения");
	СтруктураОшибки.Вставить("ПКО");
	СтруктураОшибки.Вставить("ПКС");
	СтруктураОшибки.Вставить("ПКГС");
	СтруктураОшибки.Вставить("ПВД");
	СтруктураОшибки.Вставить("ПОД");
	СтруктураОшибки.Вставить("Объект");
	СтруктураОшибки.Вставить("СвойствоПриемника");
	СтруктураОшибки.Вставить("КонвертируемоеЗначение");
	СтруктураОшибки.Вставить("Обработчик");
	СтруктураОшибки.Вставить("ОписаниеОшибки");
	СтруктураОшибки.Вставить("ПозицияМодуля");
	СтруктураОшибки.Вставить("Текст");
	СтруктураОшибки.Вставить("КСообщенияОбОшибках");
	СтруктураОшибки.Вставить("УзелПланаОбмена");
	
	СтрокаМодуля              = ОтделитьРазделителем(СтрокаОшибки, "{");
	ОписаниеОшибки            = ОтделитьРазделителем(СтрокаМодуля, "}: ");
	
	Если ОписаниеОшибки <> "" Тогда
		
		СтруктураОшибки.ОписаниеОшибки         = ОписаниеОшибки;
		СтруктураОшибки.ПозицияМодуля          = СтрокаМодуля;
				
	КонецЕсли;
	
	Если СтруктураОшибки.КСообщенияОбОшибках <> "" Тогда
		
		СтруктураОшибки.КСообщенияОбОшибках           = КСообщенияОбОшибках;
		
	КонецЕсли;
	
	Возврат СтруктураОшибки;
КонецФункции
Процедура ЗаписатьИнформациюОбОшибкеВПротокол(КСообщенияОбОшибках, СтрокаОшибки, Объект, КомпонентыОбмена, ТипОбъекта = Неопределено)
	ЗП         = ПолучитьСтруктуруЗаписиПротокола(КСообщенияОбОшибках, СтрокаОшибки);
	ЗП.Объект  = Объект;
	
	Если ТипОбъекта <> Неопределено Тогда
		ЗП.ТипОбъекта     = ТипОбъекта;
	КонецЕсли;
	
	ЗаписатьВПротоколВыполнения(КомпонентыОбмена, КСообщенияОбОшибках, ЗП);
КонецПроцедуры
Функция РезультатВыполненияОбменаОшибка(РезультатВыполненияОбмена)
	Возврат РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка
		Или РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
КонецФункции
Функция РезультатВыполненияОбменаПредупреждение(РезультатВыполненияОбмена)
	Возврат РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями
		Или РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято;
КонецФункции
//} КонецОбласти
//{ Область ПроцедурыИФункцииВерсионированияФорматаОбмена
Функция ВерсииФорматаОбмена(КомпонентыОбмена)
	ВерсииФорматаОбмена = Новый Соответствие;
	
	ПолучитьВерсииФорматаОбмена(ВерсииФорматаОбмена);
	
	Если ВерсииФорматаОбмена.Количество() = 0 Тогда
		ВызватьИсключение 
		НСтр("ru = 'Не заданы версии формата обмена.
		|Процедура: ПолучитьВерсииФорматаОбмена(<ВерсииФорматаОбмена>)'");
	КонецЕсли;
	
	Результат = Новый Соответствие;
	
	Для Каждого Версия Из ВерсииФорматаОбмена Цикл
		
		Результат.Вставить(СокрЛП(Версия.Ключ), Версия.Значение);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
Функция СортироватьВерсииФормата(Знач ВерсииФормата)
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Версия");
	
	Для Каждого Версия Из ВерсииФормата Цикл
		
		Результат.Добавить().Версия = Версия.Ключ;
		
	КонецЦикла;
	
	Результат.Сортировать("Версия Убыв");
	
	Возврат Результат.ВыгрузитьКолонку("Версия");
КонецФункции
Процедура ПроверитьВерсию(Знач Версия)
	Версии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Версия, ".");
	
	Если Версии.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неканоническое представление версии формата обмена: <%1>.'"),
			Версия
		);
	КонецЕсли;
КонецПроцедуры
Функция МинимальнаяВерсияФорматаОбмена(КомпонентыОбмена)
	Результат = Неопределено;
	
	ВерсииФормата = ВерсииФорматаОбмена(КомпонентыОбмена);
	
	Для Каждого ВерсияФормата Из ВерсииФормата Цикл
		
		Если Результат = Неопределено Тогда
			Результат = ВерсияФормата.Ключ;
			Продолжить;
		КонецЕсли;
		Если СравнитьВерсии(СокрЛП(Результат), СокрЛП(ВерсияФормата.Ключ)) > 0 Тогда
			Результат = ВерсияФормата.Ключ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
Функция ВерсииФорматаОбменаМассив(Знач УзелИнформационнойБазы)
	Возврат СортироватьВерсииФормата(ВерсииФорматаОбмена(УзелИнформационнойБазы));
КонецФункции
//} КонецОбласти
//{ Область Прочее
Функция ИмяТипаДанныхПоОбъектуМетаданных(Знач ОбъектМетаданных, Знач ЭтоОбъект, Знач ЭтоКонстанта)
	Если ЭтоКонстанта = Неопределено Тогда
		ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
		ЭтоКонстанта = (ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаКонстанты());
	КонецЕсли;
	
	ЛитералыТипа = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОбъектМетаданных.ПолноеИмя(), ".");
	
	Если ЭтоКонстанта Тогда
		Результат = "[ТипТаблицы]МенеджерЗначения.[ИмяТаблицы]";
	Иначе
		Если ЭтоОбъект Тогда
			Результат = "[ТипТаблицы]Объект.[ИмяТаблицы]";
		ИначеЕсли Найти(ЛитералыТипа[0],"Регистр")=1 Тогда
			Результат = "[ТипТаблицы]Запись.[ИмяТаблицы]";
		Иначе	
			Результат = "[ТипТаблицы]Ссылка.[ИмяТаблицы]";
		КонецЕсли;
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, "[ТипТаблицы]", ЛитералыТипа[0]);
	Результат = СтрЗаменить(Результат, "[ИмяТаблицы]", ЛитералыТипа[1]);
	Возврат Результат;
КонецФункции
Функция XMLБазоваяСхема()
	Возврат "http://www.1c.ru/SSL/Exchange/Message";
КонецФункции
Функция МенеджерПланаОбмена(Знач УзелИнформационнойБазы)
	Возврат ПланыОбмена[УзелИнформационнойБазы.Метаданные().Имя];
КонецФункции
Функция МенеджерПланаОбмена_ФорматОбмена(ВерсияФорматаОбмена="")
	Возврат "http://v8.1c.ru/edi/edi_stnd/EnterpriseData" + ?(ПустаяСтрока(ВерсияФорматаОбмена),"", "/"+СокрЛП(ВерсияФорматаОбмена)) ;
КонецФункции
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0)
	ПраваяЧасть         = "";
	ПозРазделителя      = Найти(Стр, Разделитель);
	ДлинаРазделителя    = СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	 = Сред(Стр, ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр          = СокрЛП(Лев(Стр, ПозРазделителя - ?(Режим=1, -ДлинаРазделителя + 1, 1)));
	КонецЕсли;
	
	Возврат(ПраваяЧасть);
КонецФункции
//} КонецОбласти
//{ Область ПолучениеДанных
//{ Область ОтложенныеОперации
Процедура УдалитьВременныеОбъектыСозданныеПоСсылкам(КомпонентыОбмена)
	
КонецПроцедуры
//} КонецОбласти
//{ Область Прочее
Функция РазложитьФорматОбмена(Знач ФорматОбмена)
	Результат = Новый Структура("БазовыйФормат, Версия");
	ЭлементыФормата = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФорматОбмена, "/");
	
	Если ЭлементыФормата.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неканоническое имя формата обмена <%1>'"),
			ФорматОбмена
		);
	КонецЕсли;
	
	Результат.Версия = ЭлементыФормата[ЭлементыФормата.ВГраница()];
	ПроверитьВерсию(Результат.Версия);
	ЭлементыФормата.Удалить(ЭлементыФормата.ВГраница());
	Результат.БазовыйФормат = СтроковыеФункцииКлС_СтрокаИзМассиваПодстрок(ЭлементыФормата, "/");
	Возврат Результат;
КонецФункции
//} КонецОбласти
//} КонецОбласти
//{ Область ОбработчикиСобытий
//{ Область ОбработчикиСобытийПравилОбработкиДанных
Функция ВыборкаДанных(КомпонентыОбмена, ПравилоОбработки)
	АлгоритмВыборки = ПравилоОбработки.ВыборкаДанных;
	Если ЗначениеЗаполнено(АлгоритмВыборки) Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("КомпонентыОбмена", КомпонентыОбмена);
		
		Попытка
			ВыборкаДанных = ВыполнитьФункциюМодуляМенеджера(ПравилоОбработки.ВыборкаДанных, СтруктураПараметров);
		Исключение
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка выполнения обработчика ПОД ВыборкаДанных.
						|Имя ПОД: %1
						|Описание ошибки: %2'"),
					ПравилоОбработки.Имя,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	" + ПравилоОбработки.ИмяТаблицыДляВыборки;
		
		ВыборкаДанных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат ВыборкаДанных;
КонецФункции
Процедура ПриОбработкеПОД(КомпонентыОбмена, ПравилоОбработки, Знач ОбъектОбработки, ИспользованиеПКО)
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ОбъектОбработки", ОбъектОбработки);
	СтруктураПараметров.Вставить("ИспользованиеПКО", ИспользованиеПКО);
	СтруктураПараметров.Вставить("КомпонентыОбмена", КомпонентыОбмена);
	
	Попытка
		ВыполнитьПроцедуруМодуляМенеджера(ПравилоОбработки.ПриОбработке, СтруктураПараметров);
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка выполнения обработчика ПОД ПриОбработке.
				|Объект: %1
				|Описание ошибки: %2'"),
			Строка(ОбъектОбработки),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	ОбъектОбработки  = СтруктураПараметров.ОбъектОбработки;
	ИспользованиеПКО = СтруктураПараметров.ИспользованиеПКО;
	КомпонентыОбмена = СтруктураПараметров.КомпонентыОбмена;
КонецПроцедуры
//} КонецОбласти
//{ Область ОбработчикиСобытийПравилКонвертации
Процедура ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, Знач ИмяОбработчика, КомпонентыОбмена, СтекВыгрузки)
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДанныеИБ", ДанныеИБ);
	СтруктураПараметров.Вставить("ДанныеXDTO", ДанныеXDTO);
	СтруктураПараметров.Вставить("КомпонентыОбмена", КомпонентыОбмена);
	СтруктураПараметров.Вставить("СтекВыгрузки", СтекВыгрузки);
	
	Попытка
		ВыполнитьПроцедуруМодуляМенеджера(ИмяОбработчика, СтруктураПараметров);
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка выполнения обработчика ПриОтправкеДанных.
			|Объект: %1
			|Описание ошибки: %2'"),
			Строка(ДанныеИБ),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	ДанныеXDTO       = СтруктураПараметров.ДанныеXDTO;
	КомпонентыОбмена = СтруктураПараметров.КомпонентыОбмена;
	СтекВыгрузки     = СтруктураПараметров.СтекВыгрузки;
КонецПроцедуры
Процедура ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена, Знач ИмяОбработчика)
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДанныеXDTO", ДанныеXDTO);
	СтруктураПараметров.Вставить("ПолученныеДанные", ПолученныеДанные);
	СтруктураПараметров.Вставить("КомпонентыОбмена", КомпонентыОбмена);
	
	Попытка
		ВыполнитьПроцедуруМодуляМенеджера(ИмяОбработчика, СтруктураПараметров);
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка выполнения обработчика ПриКонвертацииДанныхXDTO.
			|Тип источника: %1
			|Описание ошибки: %2'"),
			Строка(ДанныеXDTO),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	ДанныеXDTO               = СтруктураПараметров.ДанныеXDTO;
	ПолученныеДанные         = СтруктураПараметров.ПолученныеДанные;
	КомпонентыОбмена         = СтруктураПараметров.КомпонентыОбмена;
КонецПроцедуры
Процедура ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена, ИмяОбработчика, КонвертацияСвойств)
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДанныеИБ", ДанныеИБ);
	СтруктураПараметров.Вставить("ПолученныеДанные", ПолученныеДанные);
	СтруктураПараметров.Вставить("КомпонентыОбмена", КомпонентыОбмена);
	СтруктураПараметров.Вставить("КонвертацияСвойств", КонвертацияСвойств);
	
	Попытка
		ВыполнитьПроцедуруМодуляМенеджера(ИмяОбработчика, СтруктураПараметров);
	Исключение
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка выполнения обработчика ПередЗаписьюПолученныхДанных.
			|Объект: %1
			|Описание ошибки: %2'"),
			Строка(ДанныеИБ),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
	КонецПопытки;
	
	ДанныеИБ                 = СтруктураПараметров.ДанныеИБ;
	ПолученныеДанные         = СтруктураПараметров.ПолученныеДанные;
	КомпонентыОбмена         = СтруктураПараметров.КомпонентыОбмена;
	КонвертацияСвойств       = СтруктураПараметров.КонвертацияСвойств;
КонецПроцедуры
//} КонецОбласти
//} КонецОбласти
//} КонецОбласти
//} КонецОбласти
//{ Область ДопСлужебныеФункции
//{ Область ДопСлужебныеФункции
Функция РаботаСКурсамиВалютКлиентСервер_ПересчитатьПоКурсу(Сумма, ПараметрыТекущегоКурса, ПараметрыНовогоКурса)
	Если ПараметрыТекущегоКурса.Валюта = ПараметрыНовогоКурса.Валюта
		Или (ПараметрыТекущегоКурса.Курс = ПараметрыНовогоКурса.Курс 
			И ПараметрыТекущегоКурса.Кратность = ПараметрыНовогоКурса.Кратность) Тогда
		
		Возврат Сумма;
	КонецЕсли;
	
	Если ПараметрыТекущегоКурса.Курс = 0
		Или ПараметрыТекущегоКурса.Кратность = 0
		Или ПараметрыНовогоКурса.Курс = 0
		Или ПараметрыНовогоКурса.Кратность = 0 Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Возврат Окр((Сумма * ПараметрыТекущегоКурса.Курс * ПараметрыНовогоКурса.Кратность) / (ПараметрыНовогоКурса.Курс * ПараметрыТекущегоКурса.Кратность), 2);
КонецФункции
Функция ПубличныйИдентификаторПоСсылкеОбъекта(УзелИнформационнойБазы, СсылкаНаОбъект)
	// Преобразует ссылку на объект текущей информационной базы в строковое представление УИД.
	// Если в регистре ПубличныеИдентификаторыСинхронизируемыхОбъектов есть такая ссылка, возвращается УИД из регистра.
	// В противном случае возвращается УИД переданной ссылки.
	// 
	// Параметры:
	//  УзелИнформационнойБазы - Ссылка на узел плана обмена, в который происходит выгрузка данных.
	//  СсылкаНаОбъект - ссылка на объект информационной базы, для которого необходимо получить
	//                   уникальный идентификатор объекта XDTO.
	//
	// Возвращаемое значение:
	//  Строка - Уникальный идентификатор объекта.
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Определение публичной ссылки через ссылку на объект.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника КАК Идентификатор
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|ГДЕ
	|	СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника = &Ссылка";
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат СокрЛП(Выборка.Идентификатор);
	ИначеЕсли Выборка.Количество() > 1 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Для ссылки <%1> и узла <%2> назначено несколько уникальных идентификаторов.'"),
		Строка(СсылкаНаОбъект), Строка(УзелИнформационнойБазы));
	КонецЕсли;
	// Получение УИД текущей ссылки.
	Возврат СокрЛП(СсылкаНаОбъект.УникальныйИдентификатор());
КонецФункции
Функция ПараметрыМакетаВТаблицу(ИмяМакета)
	// в первой строке имена колонок таблицы значений !!!
	// если первая колонка в строке не заполнена, она пропускается !!!
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	СписокКолонок = Новый Структура;
	ТаблДокумент = ПолучитьМакет(ИмяМакета);
	
	Для Сч = 1 по ТаблДокумент.ШиринаТаблицы Цикл
		ИмяКолонки = ТаблДокумент.Область(1,Сч,1,Сч).Текст;
		Если Не ПустаяСтрока(ИмяКолонки) Тогда
			Попытка
				ТаблицаПараметров.Колонки.Добавить(ИмяКолонки);
				СписокКолонок.Вставить(ИмяКолонки,Сч);
			Исключение
			    //ОписаниеОшибки()
			КонецПопытки;
			
		КонецЕсли;	
	КонецЦикла;		
	
	Для Строка = 2 по ТаблДокумент.ВысотаТаблицы Цикл
		СтрЗначение = ТаблДокумент.Область(Строка,1,Строка,1).Текст;
		Если Не ПустаяСтрока(СтрЗначение) Тогда
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			Для каждого Колонка Из СписокКолонок Цикл
				СтрокаТаблицы[Колонка.Ключ] = ТаблДокумент.Область(Строка,Колонка.Значение,Строка,Колонка.Значение).Текст;
			КонецЦикла;
		КонецЕсли;		
	КонецЦикла;	
	
	
	Возврат ТаблицаПараметров;
КонецФункции
Функция ДОДляРегВОбменах_ОбъектЕстьВРегистре(Объект, УзелИнформационнойБазы)
	// ДанныеОбъектовДляРегистрацииВОбменах_ОбъектЕстьВРегистре
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.ОбъектыИнформационныхБаз КАК ДанныеОбъектовДляРегистрацииВОбменах
	|ГДЕ
	|	ДанныеОбъектовДляРегистрацииВОбменах.УзелОбмена = &УзелИнформационнойБазы
	|	И ДанныеОбъектовДляРегистрацииВОбменах.Объект = &Объект";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции
Процедура ДОДляРО_ДобавитьОбъектВФильтрРазрешенныхОбъектов(ЗначениеСсылки, УзелКорреспондента)
	// ДанныеОбъектовДляРегистрацииВОбменах_ДобавитьОбъектВФильтрРазрешенныхОбъектов
	ТекИсточник = Новый Структура;
	ТекИсточник.Вставить("Ссылка",ЗначениеСсылки);
	ТекИсточник.Вставить("ДополнительныеСвойства",Новый Структура("НужноРегистрироватьМестоСоздания",Истина));
	ТекИсточник.Вставить("ОбменДанными",Новый Структура("Загрузка,Отправитель",Истина,УзелКорреспондента));
	
	Отказ = Ложь;
	ПроцедурыОбменаДанными.ПриЗаписиДокументаРегистрацияОбъектаИнформационнойБазыПриЗаписи(ТекИсточник, Отказ);
КонецПроцедуры
Процедура СоздатьМоюФабрикуXDTO(КомпонентыОбмена)
	КомпонентыОбмена.ВерсияФорматаОбмена = ВерсияФорматаОбменаПриВыгрузке(КомпонентыОбмена);
	КомпонентыОбмена.XMLСхема = МенеджерПланаОбмена_ФорматОбмена(КомпонентыОбмена.ВерсияФорматаОбмена);
	
	Схемы = Новый Массив;
	МетаданныеОбработки = ЭтотОбъект.Метаданные();
	Для Каждого ТекМакет Из МетаданныеОбработки.Макеты Цикл
		Если Найти(ТекМакет.Имя,"xsd_")=1
			И ( Найти(ТекМакет.Имя,"ExchangeMessage")>0
			ИЛИ Найти(ТекМакет.Имя,"v8")>0
			ИЛИ (Найти(ТекМакет.Имя,"EnterpriseData")>0 
			И СокрЛП(ТекМакет.Синоним)=КомпонентыОбмена.ВерсияФорматаОбмена ))
			Тогда
			Макет = ПолучитьМакет(ТекМакет.Имя);
			ИмяФайла = КаталогОбмена + СтрЗаменить(ТекМакет.Имя,"xsd_","") + ".xsd";
			Макет.Записать(ИмяФайла);	
			Схемы.Добавить(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	МояФабрикаXDTO = СоздатьФабрикуXDTO(Схемы);
КонецПроцедуры
Процедура ПолучитьВерсииФорматаОбмена(ВерсииФормата)
	МетаданныеОбработки = ЭтотОбъект.Метаданные();
	Для Каждого ТекМакет Из МетаданныеОбработки.Макеты Цикл
		Если Найти(ТекМакет.Имя,"xsd_EnterpriseData")=1 Тогда
			ВерсииФормата.Вставить(ТекМакет.Синоним,ТекМакет.Имя);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
//} КонецОбласти
//{ Область ДлительныеОперации
Процедура ДлительныеОперацииСообщитьПрогресс(Знач Процент = Неопределено, Знач Текст = Неопределено, Знач ДополнительныеПараметры = Неопределено)
	// Регистрирует в сообщениях информацию о ходе выполнения фонового задания.
	//   В дальнейшем эту информацию можно считать с клиента при помощи функции ПрочитатьПрогресс.
	//
	// Параметры:
	//  Процент - Число  - Необязательный. Процент выполнения.
	//  Текст   - Строка - Необязательный. Информация о текущей операции.
	//  ДополнительныеПараметры - Произвольный - Необязательный. Любая дополнительная информация,
	//      которую необходимо передать на клиент. Значение должно быть простым (сериализуемым в XML строку).
	//
	
	ТекстСостояния = "";
	Если Текст <> Неопределено Тогда
		ТекстСостояния = ТекстСостояния + Текст + " ";
	КонецЕсли;
	
	Если Процент <> Неопределено Тогда
		ТекстСостояния = ТекстСостояния + Строка(Процент) + "%";
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Состояние(ТекстСостояния);
	#КонецЕсли
КонецПроцедуры
//} КонецОбласти
//{ Область ОбменДаннымиСервер
Функция ОбменДаннымиС_РезультатПодсчетаДанныхКЗагрузке(Знач ИмяФайлаОбмена, ЭтоОбменXDTO)
	Результат = Новый Структура;
	Результат.Вставить("РазмерФайлаСообщенияОбмена", 0);
	Результат.Вставить("КоличествоОбъектовКЗагрузке", 0);
	
	Если НЕ ЗначениеЗаполнено(ИмяФайлаОбмена) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ФайлСДанными = Новый Файл(ИмяФайлаОбмена);
	//Размер сразу переводим в мегабайты.
	Результат.РазмерФайлаСообщенияОбмена = Окр(ФайлСДанными.Размер() / 1048576, 1);
	
	ФайлОбмена = Новый ЧтениеXML;
	Попытка
		ФайлОбмена.ОткрытьФайл(ИмяФайлаОбмена);
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	//В зависимости от вида обмена используется разный алгоритм анализа файла обмена.
	Если ЭтоОбменXDTO Тогда
		ФайлОбмена.Прочитать(); // Message.
		ФайлОбмена.Прочитать();  // Header начало.
		ФайлОбмена.Пропустить(); // Header конец.
		ФайлОбмена.Прочитать(); //Body начало.
		Пока ФайлОбмена.Прочитать() Цикл
			Если ФайлОбмена.ЛокальноеИмя <> "УдалениеОбъекта" 
				И ФайлОбмена.ЛокальноеИмя <> "Body" Тогда
				Результат.КоличествоОбъектовКЗагрузке = Результат.КоличествоОбъектовКЗагрузке + 1;
			КонецЕсли;
			ФайлОбмена.Пропустить();
		КонецЦикла;
	Иначе
		
		ФайлОбмена.Прочитать(); // Файл обмена.
		ФайлОбмена.Прочитать();  // ПравилаОбмена начало.
		ФайлОбмена.Пропустить(); // ПравилаОбмена конец.
	
		ФайлОбмена.Прочитать();  // Типы данных начало.
		ФайлОбмена.Пропустить(); // ТипыДанных конец.
	
		ФайлОбмена.Прочитать();  // Данные по обмену начало.
		ФайлОбмена.Пропустить(); // Данные по обмену конец.
		Пока ФайлОбмена.Прочитать() Цикл
			Если ФайлОбмена.ЛокальноеИмя = "Объект"
				ИЛИ ФайлОбмена.ЛокальноеИмя = "НаборЗаписейРегистра"
				ИЛИ ФайлОбмена.ЛокальноеИмя = "УдалениеОбъекта"
				ИЛИ ФайлОбмена.ЛокальноеИмя = "ИнформацияОРегистрацииОбъекта" Тогда
				Результат.КоличествоОбъектовКЗагрузке = Результат.КоличествоОбъектовКЗагрузке + 1;
			КонецЕсли;
			ФайлОбмена.Пропустить();
		КонецЦикла;
	КонецЕсли;
	ФайлОбмена.Закрыть();
	
	Возврат Результат;
КонецФункции
Процедура РассчитатьПроцентВыгрузки(КоличествоВыгруженных, КоличествоОбъектовКВыгрузке)
	// Рассчитывает процент выгрузки и записывает в виде сообщения пользователю.
	//
	// Параметры:
	//  КоличествоВыгруженных       - Число - Количество выгруженных на данный момент объектов.
	//  КоличествоОбъектовКВыгрузке - Число - Количество объектов к выгрузке.
	//
	
	// Сообщение о проценте выгрузки выдаем через каждые 10 объектов.
	Если КоличествоВыгруженных = 0 ИЛИ КоличествоВыгруженных / 10 <> Цел(КоличествоВыгруженных / 10) Тогда
		Возврат;
	КонецЕсли;
	Если КоличествоОбъектовКВыгрузке = 0 Тогда
		ПроцентВыполнения = 95;
		Шаблон = НСтр("ru = 'Обработано: %1 объектов.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Формат(КоличествоВыгруженных, "ЧН=0; ЧГ="));
	
	Иначе
		// 5% полосы резервируем под выгрузку по ссылкам, проценты по количеству считаем от 95.
		ПроцентВыполнения = Окр(Мин(КоличествоВыгруженных * 95 / КоличествоОбъектовКВыгрузке, 95));
		Шаблон = НСтр("ru = 'Обработано: %1 из %2 объектов.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			Формат(КоличествоВыгруженных, "ЧН=0; ЧГ="),
			Формат(КоличествоОбъектовКВыгрузке, "ЧН=0; ЧГ="));
	КонецЕсли;
	
	// Регистрация сообщения для чтения из клиентского сеанса.
	ДлительныеОперацииСообщитьПрогресс(ПроцентВыполнения, Текст);
КонецПроцедуры
//} КонецОбласти
//{ Область ОбменДаннымиПовтИсп
Функция ОбменДаннымиПовтИсп_СообщенияОбОшибках()
	// Заполняет перечень кодов возможных ошибок.
	//
	// Возвращаемое значение:
	//  Соответствие. Ключ - код ошибки (число), значение - описание ошибки (строка).
	//
	
	СообщенияОбОшибках = Новый Соответствие;
		
	СообщенияОбОшибках.Вставить(2,  НСтр("ru = 'Ошибка распаковки файла обмена. Файл заблокирован.'"));
	СообщенияОбОшибках.Вставить(3,  НСтр("ru = 'Указанный файл правил обмена не существует.'"));
	СообщенияОбОшибках.Вставить(4,  НСтр("ru = 'Ошибка при создании COM-объекта Msxml2.DOMDocument'"));
	СообщенияОбОшибках.Вставить(5,  НСтр("ru = 'Ошибка открытия файла обмена'"));
	СообщенияОбОшибках.Вставить(6,  НСтр("ru = 'Ошибка при загрузке правил обмена'"));
	СообщенияОбОшибках.Вставить(7,  НСтр("ru = 'Ошибка формата правил обмена'"));
	СообщенияОбОшибках.Вставить(8,  НСтр("ru = 'Не корректно указано имя файла для выгрузки данных'"));
	СообщенияОбОшибках.Вставить(9,  НСтр("ru = 'Ошибка формата файла обмена'"));
	СообщенияОбОшибках.Вставить(10, НСтр("ru = 'Не указано имя файла для выгрузки данных (Имя файла данных)'"));
	СообщенияОбОшибках.Вставить(11, НСтр("ru = 'Ссылка на несуществующий объект метаданных в правилах обмена'"));
	СообщенияОбОшибках.Вставить(12, НСтр("ru = 'Не указано имя файла с правилами обмена (Имя файла правил)'"));
			
	СообщенияОбОшибках.Вставить(13, НСтр("ru = 'Ошибка получения значения свойства объекта (по имени свойства источника)'"));
	СообщенияОбОшибках.Вставить(14, НСтр("ru = 'Ошибка получения значения свойства объекта (по имени свойства приемника)'"));
	
	СообщенияОбОшибках.Вставить(15, НСтр("ru = 'Не указано имя файла для загрузки данных (Имя файла для загрузки)'"));
			
	СообщенияОбОшибках.Вставить(16, НСтр("ru = 'Ошибка получения значения свойства подчиненного объекта (по имени свойства источника)'"));
	СообщенияОбОшибках.Вставить(17, НСтр("ru = 'Ошибка получения значения свойства подчиненного объекта (по имени свойства приемника)'"));
	СообщенияОбОшибках.Вставить(18, НСтр("ru = 'Ошибка при создании обработки с кодом обработчиков'"));
	СообщенияОбОшибках.Вставить(19, НСтр("ru = 'Ошибка в обработчике события ПередЗагрузкойОбъекта'"));
	СообщенияОбОшибках.Вставить(20, НСтр("ru = 'Ошибка в обработчике события ПриЗагрузкеОбъекта'"));
	СообщенияОбОшибках.Вставить(21, НСтр("ru = 'Ошибка в обработчике события ПослеЗагрузкиОбъекта'"));
	СообщенияОбОшибках.Вставить(22, НСтр("ru = 'Ошибка в обработчике события ПередЗагрузкойДанных (конвертация)'"));
	СообщенияОбОшибках.Вставить(23, НСтр("ru = 'Ошибка в обработчике события ПослеЗагрузкиДанных (конвертация)'"));
	СообщенияОбОшибках.Вставить(24, НСтр("ru = 'Ошибка при удалении объекта'"));
	СообщенияОбОшибках.Вставить(25, НСтр("ru = 'Ошибка при записи документа'"));
	СообщенияОбОшибках.Вставить(26, НСтр("ru = 'Ошибка записи объекта'"));
	СообщенияОбОшибках.Вставить(27, НСтр("ru = 'Ошибка в обработчике события ПередОбработкойПравилаОчистки'"));
	СообщенияОбОшибках.Вставить(28, НСтр("ru = 'Ошибка в обработчике события ПослеОбработкиПравилаОчистки'"));
	СообщенияОбОшибках.Вставить(29, НСтр("ru = 'Ошибка в обработчике события ПередУдалениемОбъекта'"));
	
	СообщенияОбОшибках.Вставить(31, НСтр("ru = 'Ошибка в обработчике события ПередОбработкойПравилаВыгрузки'"));
	СообщенияОбОшибках.Вставить(32, НСтр("ru = 'Ошибка в обработчике события ПослеОбработкиПравилаВыгрузки'"));
	СообщенияОбОшибках.Вставить(33, НСтр("ru = 'Ошибка в обработчике события ПередВыгрузкойОбъекта'"));
	СообщенияОбОшибках.Вставить(34, НСтр("ru = 'Ошибка в обработчике события ПослеВыгрузкиОбъекта'"));
			
	СообщенияОбОшибках.Вставить(41, НСтр("ru = 'Ошибка в обработчике события ПередВыгрузкойОбъекта'"));
	СообщенияОбОшибках.Вставить(42, НСтр("ru = 'Ошибка в обработчике события ПриВыгрузкеОбъекта'"));
	СообщенияОбОшибках.Вставить(43, НСтр("ru = 'Ошибка в обработчике события ПослеВыгрузкиОбъекта'"));
			
	СообщенияОбОшибках.Вставить(45, НСтр("ru = 'Не найдено правило конвертации объектов'"));
		
	СообщенияОбОшибках.Вставить(48, НСтр("ru = 'Ошибка в обработчике события ПередОбработкойВыгрузки группы свойств'"));
	СообщенияОбОшибках.Вставить(49, НСтр("ru = 'Ошибка в обработчике события ПослеОбработкиВыгрузки группы свойств'"));
	СообщенияОбОшибках.Вставить(50, НСтр("ru = 'Ошибка в обработчике события ПередВыгрузкой (объекта коллекции)'"));
	СообщенияОбОшибках.Вставить(51, НСтр("ru = 'Ошибка в обработчике события ПриВыгрузке (объекта коллекции)'"));
	СообщенияОбОшибках.Вставить(52, НСтр("ru = 'Ошибка в обработчике события ПослеВыгрузки (объекта коллекции)'"));
	СообщенияОбОшибках.Вставить(53, НСтр("ru = 'Ошибка в глобальном обработчике события ПередЗагрузкойОбъекта (конвертация)'"));
	СообщенияОбОшибках.Вставить(54, НСтр("ru = 'Ошибка в глобальном обработчике события ПослеЗагрузкиОбъекта (конвертация)'"));
	СообщенияОбОшибках.Вставить(55, НСтр("ru = 'Ошибка в обработчике события ПередВыгрузкой (свойства)'"));
	СообщенияОбОшибках.Вставить(56, НСтр("ru = 'Ошибка в обработчике события ПриВыгрузке (свойства)'"));
	СообщенияОбОшибках.Вставить(57, НСтр("ru = 'Ошибка в обработчике события ПослеВыгрузки (свойства)'"));
	
	СообщенияОбОшибках.Вставить(62, НСтр("ru = 'Ошибка в обработчике события ПередВыгрузкойДанных (конвертация)'"));
	СообщенияОбОшибках.Вставить(63, НСтр("ru = 'Ошибка в обработчике события ПослеВыгрузкиДанных (конвертация)'"));
	СообщенияОбОшибках.Вставить(64, НСтр("ru = 'Ошибка в глобальном обработчике события ПередКонвертациейОбъекта (конвертация)'"));
	СообщенияОбОшибках.Вставить(65, НСтр("ru = 'Ошибка в глобальном обработчике события ПередВыгрузкойОбъекта (конвертация)'"));
	СообщенияОбОшибках.Вставить(66, НСтр("ru = 'Ошибка получения коллекции подчиненных объектов из входящих данных'"));
	СообщенияОбОшибках.Вставить(67, НСтр("ru = 'Ошибка получения свойства подчиненного объекта из входящих данных'"));
	СообщенияОбОшибках.Вставить(68, НСтр("ru = 'Ошибка получения свойства объекта из входящих данных'"));
	
	СообщенияОбОшибках.Вставить(69, НСтр("ru = 'Ошибка в глобальном обработчике события ПослеВыгрузкиОбъекта (конвертация)'"));
	
	СообщенияОбОшибках.Вставить(71, НСтр("ru = 'Не найдено соответствие для значения Источника'"));
	
	СообщенияОбОшибках.Вставить(72, НСтр("ru = 'Ошибка при выгрузке данных для узла плана обмена'"));
	
	СообщенияОбОшибках.Вставить(73, НСтр("ru = 'Ошибка в обработчике события ПоследовательностьПолейПоиска'"));
	СообщенияОбОшибках.Вставить(74, НСтр("ru = 'Необходимо перезагрузить правила обмена для выгрузки данных.'"));
	
	СообщенияОбОшибках.Вставить(75, НСтр("ru = 'Ошибка в обработчике события ПослеЗагрузкиПравилОбмена (конвертация)'"));
	СообщенияОбОшибках.Вставить(76, НСтр("ru = 'Ошибка в обработчике события ПередОтправкойИнформацииОбУдалении (конвертация)'"));
	СообщенияОбОшибках.Вставить(77, НСтр("ru = 'Ошибка в обработчике события ПриПолученииИнформацииОбУдалении (конвертация)'"));
	
	СообщенияОбОшибках.Вставить(78, НСтр("ru = 'Ошибка при выполнении алгоритма после загрузки значений параметров'"));
	
	СообщенияОбОшибках.Вставить(79, НСтр("ru = 'Ошибка в обработчике события ПослеВыгрузкиОбъектаВФайл'"));
	
	СообщенияОбОшибках.Вставить(80, НСтр("ru = 'Ошибка установки свойства предопределенного элемента.
		|Нельзя помечать на удаление предопределенный элемент. Пометка на удаление для объекта не установлена.'"));
	//
	СообщенияОбОшибках.Вставить(81, НСтр("ru = 'Возникла коллизия изменений объектов.
		|Объект этой информационной базы был заменен версией объекта из второй информационной базы.'"));
	//
	СообщенияОбОшибках.Вставить(82, НСтр("ru = 'Возникла коллизия изменений объектов.
		|Объект из второй информационной базы не принят. Объект этой информационной базы не изменен.'"));
	//
	СообщенияОбОшибках.Вставить(83, НСтр("ru = 'Ошибка обращения к табличной части объекта. Табличная часть объекта не может быть изменена.'"));
	СообщенияОбОшибках.Вставить(84, НСтр("ru = 'Коллизия дат запрета изменения.'"));
	
	СообщенияОбОшибках.Вставить(174, НСтр("ru = 'Сообщение обмена было принято ранее'"));
	СообщенияОбОшибках.Вставить(175, НСтр("ru = 'Ошибка в обработчике события ПередПолучениемИзмененныхОбъектов (конвертация)'"));
	СообщенияОбОшибках.Вставить(176, НСтр("ru = 'Ошибка в обработчике события ПослеПолученияИнформацииОбУзлахОбмена (конвертация)'"));
		
	СообщенияОбОшибках.Вставить(177, НСтр("ru = 'Имя плана обмена из сообщения обмена не соответствует ожидаемому.'"));
	СообщенияОбОшибках.Вставить(178, НСтр("ru = 'Получатель из сообщения обмена не соответствует ожидаемому.'"));
	
	СообщенияОбОшибках.Вставить(1000, НСтр("ru = 'Ошибка при создании временного файла выгрузки данных'"));
	
	Возврат СообщенияОбОшибках;
КонецФункции
//} КонецОбласти
//{ Область ОбщегоНазначения
Функция ПривестиНомерКДлине(Знач Стр, Длина, ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера = Истина, Префикс = "")
	Если ПустаяСтрока(Стр)
		ИЛИ СтрДлина(Стр) = Длина Тогда
		
		Возврат Стр;
		
	КонецЕсли;
	
	Стр             = СокрЛП(Стр);
	ВходящаяДлинаНомера = СтрДлина(Стр);
	
	ЧисловаяЧасть   = "";
	// ПолучитьПрефиксЧислоНомера
	ЧисловаяЧасть = 0;
	// ПолучитьСтроковыйНомерБезПрефиксов
	СтроковыйНомерБезПрефикса = "";
	Сч = СтрДлина(Стр);
	Пока Сч > 0 Цикл
		Символ = Сред(Стр, Сч, 1);
		Если (Символ >= "0" И Символ <= "9") Тогда
			СтроковыйНомерБезПрефикса = Символ + СтроковыйНомерБезПрефикса;
		Иначе
			
			Прервать;
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	//
	ДлинаСтроковойЧасти = СтрДлина(СтроковыйНомерБезПрефикса);
	Если ДлинаСтроковойЧасти > 0 Тогда
		ЧисловаяЧасть = Число(СтроковыйНомерБезПрефикса);
		ПрефиксНомераСтроки = Сред(Стр, 1, ВходящаяДлинаНомера - ДлинаСтроковойЧасти);
	Иначе
		ПрефиксНомераСтроки = Стр;	
	КонецЕсли;
	//
	
	ИтоговыйПрефикс = ?(ПустаяСтрока(Префикс), ПрефиксНомераСтроки, Префикс);
	ДлинаИтоговогоПрефикса = СтрДлина(ИтоговыйПрефикс);
	
	СтрокаЧисловойЧасти = Формат(ЧисловаяЧасть, "ЧГ=0");
	ДлинаЧисловойЧасти = СтрДлина(СтрокаЧисловойЧасти);
	
	Если (Длина >= ВходящаяДлинаНомера И ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера)
		ИЛИ (Длина < ВходящаяДлинаНомера) Тогда
		
		Для ВременнаяПеременная = 1 По Длина - ДлинаИтоговогоПрефикса - ДлинаЧисловойЧасти Цикл
			
			СтрокаЧисловойЧасти = "0" + СтрокаЧисловойЧасти;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// обрезаем лишние символы
	СтрокаЧисловойЧасти = Прав(СтрокаЧисловойЧасти, Длина - ДлинаИтоговогоПрефикса);
	
	Результат = ИтоговыйПрефикс + СтрокаЧисловойЧасти;
	
	Возврат Результат;
КонецФункции
//} КонецОбласти
//} КонецОбласти
//} КонецОбласти

// **** Модуль правил конвертации ****

//{ Конвертация УТ 10.3.60 выгрузка от 18.01.2021 20:26:32


//{ Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	ПередКонвертациейУТ(КомпонентыОбмена);
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	ПослеКонвертацииУТ(КомпонентыОбмена);
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

//} КонецОбласти
//{ Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	
	
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		
		//БОЙКОВ
		ДобавитьПОД_Документ_ВнутреннееПеремещениеНаличныхДенежныхСредств(ПравилаОбработкиДанных);
		//
		
		ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АккрПолуч_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ГТДИмпорт_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказКлиента_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказКлиентаИзСтруктуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказКлиентаСчетПокупателю_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаявкаНаРасходованиеСредств_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнкассоПеред_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнкассоПолуч_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КассоваяСмена_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаДолга_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаПоступления_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаРеализации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиБезналичныхДенежныхСредств_Отправ(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиНаличныхДенежныхСредств_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетовСПокупателямиДолги_Отправ(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Отправ(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетовСПоставщикамиДолги_Отправ(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ_Стр_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомиссионера_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитенту_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДС_Ордер_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДС_Тр_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаМатериаловВПроизводство_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПереоценкаТоваровВРознице_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеДопРасходов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслугВНТТ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПриходныйКассовыйОрдер(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РасходныйКассовыйОрдер(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДС_Ордер_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДС_Тр_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СборкаТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетПокупателю_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетПоставщика_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученный(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЧекККМ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДополнительныеРеквизитыКатегории_Отправ(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЗначенияДополнительныхРеквизитов_Отправ(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Кассы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КассыККМ_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторСтранМира(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтактныеЛица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтактныеЛицаКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СерииНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДвиженияДенежныхСредств(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиРасходов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦенНоменклатуры(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Упаковки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Файлы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

//{ Область Отправка
//{ Область Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_АвансовыйОтчет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АвансовыйОтчет;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_АвансовыйОтчет_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_АвансовыйОтчет_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_АккрПолуч_Отправка
Процедура ДобавитьПОД_Документ_АккрПолуч_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_АккрПолуч_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АккредитивПолученный;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_АккрПолуч_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АккрПолучПрочее_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АккрПолучРасчетыСКонтрагентами_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_АккрПолуч_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_АккрПолучРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_АккрПолучПрочее_Отправка = Ложь;
	
	Если ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_АккрПолучРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ЭтоПБДСПрочее(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_АккрПолучПрочее_Отправка = Истина;
	КонецЕсли;
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ВозвратТоваровОтПокупателя
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровОтПокупателя";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ВозвратТоваровОтПокупателя_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровОтПокупателя_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Значение = Справочники.Склады.ПустаяСсылка();
	Если ЗначениеЗаполнено(ДанныеИБ.СкладОрдер) Тогда
		Если ДанныеИБ.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			ТаблицаТоваров = ДанныеИБ.Товары.Выгрузить();
			ТаблицаТоваров.Свернуть("Склад");
			Если ТаблицаТоваров.Количество() = 1 Тогда
				Значение = ДанныеИБ.СкладОрдер.Склад;
			КонецЕсли;
		Иначе
			Значение = ДанныеИБ.СкладОрдер;
		КонецЕсли;
	КонецЕсли;
	РеквизитыОтбора = Новый Структура("Склад",Значение);
	ДанныеИБ.ДополнительныеСвойства.Вставить("Склад",Значение);
	
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ВозвратТоваровПоставщику
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровПоставщику";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ВозвратТоваровПоставщику_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровПоставщику_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровПоставщикуИзНТТ;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ГТДИмпорт_Отправка
Процедура ДобавитьПОД_Документ_ГТДИмпорт_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ГТДИмпорт_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ГТДИмпорт;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ГТДИмпорт_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ГТДИмпорт_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ГТДИмпорт_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_ГТДИмпорт_Отправка, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ЗаказКлиента_Отправка
Процедура ДобавитьПОД_Документ_ЗаказКлиента_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЗаказКлиента_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПокупателя;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ЗаказКлиента_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказКлиента_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказКлиентаСчетПокупателю_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЗаказКлиента_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	УстановитьИспользованиеПКО(ИспользованиеПКО,Ложь);
	Если КомпонентыОбмена.ПараметрыКонвертации.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю=Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.ЗаказПокупателя Тогда
		ИспользованиеПКО.Документ_ЗаказКлиента_Отправка = Истина;
		ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_ЗаказКлиента_Отправка, КомпонентыОбмена, Новый Структура("Организация,ОтражатьВБухгалтерскомУчете",ДанныеИБ.Организация, Истина));	
	ИначеЕсли КомпонентыОбмена.ПараметрыКонвертации.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю=Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю Тогда	
		ИспользованиеПКО.Документ_ЗаказКлиентаСчетПокупателю_Отправка = Истина;
		ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_ЗаказКлиентаСчетПокупателю_Отправка, КомпонентыОбмена, Новый Структура("Организация,ОтражатьВБухгалтерскомУчете",ДанныеИБ.Организация, Истина));	
	КонецЕсли;
	Склад = Справочники.Склады.ПустаяСсылка();
	Если ЗначениеЗаполнено(ДанныеИБ.СкладГруппа) И ТипЗнч(ДанныеИБ.СкладГруппа)=Тип("СправочникСсылка.Склады") Тогда
			Склад = ДанныеИБ.СкладГруппа;
	КонецЕсли;
	РеквизитыОтбора = Новый Структура("Склад",Склад);
	ДанныеИБ.ДополнительныеСвойства.Вставить("Склад",Склад);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ЗаказКлиентаИзСтруктуры_Отправка
Процедура ДобавитьПОД_Документ_ЗаказКлиентаИзСтруктуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЗаказКлиентаИзСтруктуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ЗаказКлиентаИзСтруктуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказКлиентаИзСтруктуры_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЗаказКлиентаИзСтруктуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_ЗаказКлиентаИзСтруктуры_Отправка, КомпонентыОбмена, Новый Структура("ОтражатьВБухгалтерскомУчете,Организация",Истина,ДанныеИБ.Организация));
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ЗаказКлиентаСчетПокупателю_Отправка
Процедура ДобавитьПОД_Документ_ЗаказКлиентаСчетПокупателю_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЗаказКлиентаСчетПокупателю_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ЗаказКлиентаСчетПокупателю_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказКлиентаСчетПокупателю_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЗаказКлиентаСчетПокупателю_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю=Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
		Возврат;
	КонецЕсли;
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_СчетПокупателю_Отправка, КомпонентыОбмена, Новый Структура("Организация,ОтражатьВБухгалтерскомУчете",ДанныеИБ.Организация, Истина));
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ЗаказПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ЗаказПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЗаказПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаказПоставщику;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказПоставщику_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.ЗаказПоставщику") Тогда
		ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_ЗаказПоставщику_Отправка, КомпонентыОбмена, Новый Структура("ОтражатьВБухгалтерскомУчете",Ложь));
	Иначе
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена, Новый Структура("Организация,ОтражатьВБухгалтерскомУчете",ДанныеИБ.Организация, Истина));
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ЗаявкаНаРасходованиеСредств_Отправка
Процедура ДобавитьПОД_Документ_ЗаявкаНаРасходованиеСредств_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЗаявкаНаРасходованиеСредств_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЗаявкаНаРасходованиеСредств;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ЗаявкаНаРасходованиеСредств_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ЗаявкаНаРасходованиеСредств_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка, КомпонентыОбмена);
	
	УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
	ВидОперации = ДанныеИБ.ВидОперации;
	
	Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику 
		ИЛИ ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю
		ИЛИ ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами 
		Тогда
		
		ИспользованиеПКО.Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка = Истина;
		
		// Документ.ЗаявкаНаРасходДСРасчетыССотрудниками
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику
		//ИЛИ ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками //коммент Вик 2021_02_12
		Тогда
		
		// Документ.ЗаявкаНаРасходДСВыплатаЗарплаты	
	//ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП Тогда //коммент Вик 2021_02_12
		
		// Документ.ЗаявкаНаРасходДСПрочее
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств Тогда
		
		// Документ.ЗаявкаНаПереводДСНаДругойСчет		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
		
		// Документ.ЗаявкаНаПереводДСВБюджет
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога Тогда
		
	КонецЕсли;

КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ИнкассоПеред_Отправка
Процедура ДобавитьПОД_Документ_ИнкассоПеред_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ИнкассоПеред_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ИнкассовоеПоручениеПереданное;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ИнкассоПеред_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнкассоПередПрочее_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнкассПередРасчетыСКонтрагентами_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ИнкассоПеред_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ИнкассПередРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ИнкассоПередПрочее_Отправка = Ложь;
	Если ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ИнкассПередРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ЭтоПБДСПрочее(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ИнкассоПередПрочее_Отправка = Истина;
	КонецЕсли;
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ИнкассоПолуч_Отправка
Процедура ДобавитьПОД_Документ_ИнкассоПолуч_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ИнкассоПолуч_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ИнкассовоеПоручениеПолученное;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ИнкассоПолуч_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнкассоПолучПрочее_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ИнкассоПолуч_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ИнкассоПолучПрочее_Отправка = Ложь;
	
	Если ЭтоСБДСРасчетыСКонтрагентами(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ЭтоСБДСПрочее(ДанныеИБ) Тогда
		ИспользованиеПКО.Документ_ИнкассоПолучПрочее_Отправка = Истина;
	КонецЕсли;
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_КассоваяСмена_Отправка
Процедура ДобавитьПОД_Документ_КассоваяСмена_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_КассоваяСмена_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КассоваяСмена;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_КассоваяСмена_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КассоваяСменаОткрытие_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КассоваяСменаЗакрытие_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_КассоваяСмена_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаСравнить(КомпонентыОбмена, "1.4", "<") Тогда
		ИспользованиеПКО.Очистить();
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.Статус = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		ИспользованиеПКО.Документ_КассоваяСменаЗакрытие_Отправка = Ложь;
	Иначе
		ИспользованиеПКО.Документ_КассоваяСменаОткрытие_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_КорректировкаДолга_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаДолга_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_КорректировкаДолга_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаДолга;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_КорректировкаДолга_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаДолга_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_КорректировкаДолга_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_КорректировкаПоступления_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаПоступления_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_КорректировкаПоступления_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаПоступления;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступления_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Значение = Справочники.Склады.ПустаяСсылка();
	Если ЗначениеЗаполнено(ДанныеИБ.СкладОрдер) Тогда
		Если ДанныеИБ.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру 
			ИЛИ ТипЗнч(ДанныеИБ.СкладОрдер)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ТаблицаТоваров = ДанныеИБ.Товары.Выгрузить();
			ТаблицаТоваров.Свернуть("Склад");
			Если ТаблицаТоваров.Количество() = 1 Тогда
				Значение = ДанныеИБ.СкладОрдер.Склад;
			КонецЕсли;
		Иначе
			Значение = ДанныеИБ.СкладОрдер;
		КонецЕсли;
	КонецЕсли;
	РеквизитыОтбора = Новый Структура("Склад",Значение);
	ДанныеИБ.ДополнительныеСвойства.Вставить("Склад",Значение);
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_КорректировкаПоступления_Отправка, КомпонентыОбмена, РеквизитыОтбора);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_КорректировкаРеализации_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаРеализации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_КорректировкаРеализации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КорректировкаРеализации;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_КорректировкаРеализации_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализации_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_КорректировкаРеализации_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_КорректировкаРеализации_Отправка, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОперацияПоПлатежнойКарте_Отправка
Процедура ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОперацияПоПлатежнойКарте_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнойКарте_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОприходованиеТоваров
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОприходованиеТоваров";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОприходованиеТоваров_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОприходованиеТоваров_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиБезналичныхДенежныхСредств_Отправ
Процедура ДобавитьПОД_Документ_ОстаткиБезналичныхДенежныхСредств_Отправ(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиБезналичныхДенежныхСредств_Отправ";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_Отправ_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиБезналичныхДенежныхСредств_Отправ");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_Отправ_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ТипЗнч(ДанныеИБ)=Тип("Структура") Тогда
		ИспользованиеПКО.Документ_ОстаткиБезналичныхДенежныхСредств_Отправ = Ложь;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиНаличныхДенежныхСредств_Отправка
Процедура ДобавитьПОД_Документ_ОстаткиНаличныхДенежныхСредств_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиНаличныхДенежныхСредств_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиНаличныхДенежныхСредств_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиНаличныхДенежныхСредств_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиНаличныхДенежныхСредств_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ТипЗнч(ДанныеИБ)=Тип("Структура") Тогда
		ИспользованиеПКО.Документ_ОстаткиНаличныхДенежныхСредств_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ
Процедура ДобавитьПОД_Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ");
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиРасчетовСПокупателямиДолги_Отправ
Процедура ДобавитьПОД_Документ_ОстаткиРасчетовСПокупателямиДолги_Отправ(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиРасчетовСПокупателямиДолги_Отправ";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетовСПокупателямиДолги_Отправ");
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиРасчетовСПоставщикамиАвансы_Отправ
Процедура ДобавитьПОД_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Отправ(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиРасчетовСПоставщикамиАвансы_Отправ";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетовСПоставщикамиАвансы_Отправ");
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиРасчетовСПоставщикамиДолги_Отправ
Процедура ДобавитьПОД_Документ_ОстаткиРасчетовСПоставщикамиДолги_Отправ(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиРасчетовСПоставщикамиДолги_Отправ";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетовСПоставщикамиДолги_Отправ");
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиСобственныхТМЦ_Стр_Отправка
Процедура ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ_Стр_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиСобственныхТМЦ_Стр_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиСобственныхТМЦ_Стр_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиСобственныхТМЦ_Стр_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиСобственныхТМЦ_Стр_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ТипЗнч(ДанныеИБ)=Тип("Структура") Тогда

		ИспользованиеПКО.Документ_ОстаткиСобственныхТМЦ_Стр_Отправка = Ложь;

	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ
Процедура ДобавитьПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ТипЗнч(ДанныеИБ)=Тип("Структура") Тогда
		ИспользованиеПКО.Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ = Ложь;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка
Процедура ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ТипЗнч(ДанныеИБ)=Тип("Структура") Тогда
		ИспользованиеПКО.Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОтчетКомиссионера_Отправка
Процедура ДобавитьПОД_Документ_ОтчетКомиссионера_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетКомиссионера_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомиссионераОПродажах;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОтчетКомиссионера_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссионера_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОтчетКомиссионера_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОтчетКомитенту_Отправка
Процедура ДобавитьПОД_Документ_ОтчетКомитенту_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетКомитенту_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетКомитентуОПродажах;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОтчетКомитенту_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитенту_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОтчетКомитенту_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_ОтчетКомитенту_Отправка, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОтчетОРозничныхПродажах
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетОРозничныхПродажах";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОтчетОРозничныхПродажах_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ОтчетОРозничныхПродажах_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_ОтчетОРозничныхПродажах_Отправка, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДС_Ордер_Отправка
Процедура ДобавитьПОД_Документ_ПБДС_Ордер_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДС_Ордер_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПБДС_Ордер_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Ордер_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Ордер_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСКонвертацияВалюты_Ордер_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Ордер_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Ордер_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПБДС_Ордер_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ЗапретИспользованияИспользованияПКО(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	//{ ДополнительныеСвойства
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Шапка.ВалютаДокумента КАК Валюта,
	|	Шапка.СчетОрганизации.ВалютаДенежныхСредств КАК ВалютаБанковскогоСчета,
	|	Шапка.СтатьяДвиженияДенежныхСредств,
	|	Шапка.Дата КАК СБДС_Дата
	|ПОМЕСТИТЬ Шапка
	|ИЗ
	|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПерваяСтрокаРасшифровки.СтатьяДвиженияДенежныхСредств КАК ПерваяСтрРП_СДДС,
	|	ПерваяСтрокаРасшифровки.КурсВзаиморасчетов,
	|	ПерваяСтрокаРасшифровки.КратностьВзаиморасчетов,
	|	ПерваяСтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ПерваяСтрокаРасшифровки.ДоговорКонтрагента
	|ПОМЕСТИТЬ ПерваяСтрокаРасшифровки
	|ИЗ
	|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств.РасшифровкаПлатежа КАК ПерваяСтрокаРасшифровки
	|ГДЕ
	|	ПерваяСтрокаРасшифровки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПерваяСтрокаРасшифровки.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.ВалютаБанковскогоСчета,
	|	ЕСТЬNULL(ПерваяСтрокаРасшифровки.ПерваяСтрРП_СДДС, НЕОПРЕДЕЛЕНО) КАК ПерваяСтрРП_СДДС,
	|	ПерваяСтрокаРасшифровки.ВалютаДоговора,
	|	ПерваяСтрокаРасшифровки.КурсВзаиморасчетов,
	|	ПерваяСтрокаРасшифровки.КратностьВзаиморасчетов,
	|	Шапка.СБДС_Дата,
	|	ПерваяСтрокаРасшифровки.ДоговорКонтрагента
	|ИЗ
	|	Шапка КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПерваяСтрокаРасшифровки КАК ПерваяСтрокаРасшифровки
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка КАК Заказ,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	|ГДЕ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тчПрочиеДоходы.НомерСтроки
	|ИЗ
	|	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств.РасшифровкаПлатежа КАК тчПрочиеДоходы
	|ГДЕ
	|	тчПрочиеДоходы.Ссылка = &Ссылка
	|	И тчПрочиеДоходы.ДокументПланированияПлатежа ССЫЛКА Документ.ПланируемоеПоступлениеДенежныхСредств
	|			И НЕ тчПрочиеДоходы.ДокументПланированияПлатежа = ЗНАЧЕНИЕ(Документ.ПланируемоеПоступлениеДенежныхСредств.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ДополнительныеДанные = Запрос.ВыполнитьПакет();
	
	ДанныеШапки = ДополнительныеДанные[2].Выгрузить()[0];
	ДанныеИБ.ДополнительныеСвойства.Вставить("ДанныеШапки",                   ДанныеШапки);
	ДанныеИБ.ДополнительныеСвойства.Вставить("РасшифровкаПлатежаРасширенная", ДополнительныеДанные[3]);
	
	//}
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам 
		Тогда
		ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Ордер_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		
		ТаблицаПрочиеДоходы = ДополнительныеДанные[4].Выгрузить();
		Если ТаблицаПрочиеДоходы.Количество()=0 Тогда
			ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Ордер_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПБДСПрочиеДоходы_Ордер_Отправка = Истина;
		КонецЕсли;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам Тогда
		ИспользованиеПКО.Документ_ПБДСПоПлатежнымКартам_Ордер_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты 
		Тогда
		ИспользованиеПКО.Документ_ПБДСКонвертацияВалюты_Ордер_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Ордер_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДС_Отправка
Процедура ДобавитьПОД_Документ_ПБДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПБДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПБДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ЗапретИспользованияИспользованияПКО(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	//{ ДополнительныеСвойства
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Шапка.ВалютаДокумента КАК Валюта,
	|	Шапка.СчетОрганизации.ВалютаДенежныхСредств КАК ВалютаБанковскогоСчета,
	|	Шапка.СтатьяДвиженияДенежныхСредств,
	|	Шапка.Дата КАК СБДС_Дата
	|ПОМЕСТИТЬ Шапка
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПерваяСтрокаРасшифровки.СтатьяДвиженияДенежныхСредств КАК ПерваяСтрРП_СДДС,
	|	ПерваяСтрокаРасшифровки.КурсВзаиморасчетов,
	|	ПерваяСтрокаРасшифровки.КратностьВзаиморасчетов,
	|	ПерваяСтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ПерваяСтрокаРасшифровки.ДоговорКонтрагента
	|ПОМЕСТИТЬ ПерваяСтрокаРасшифровки
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПерваяСтрокаРасшифровки
	|ГДЕ
	|	ПерваяСтрокаРасшифровки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПерваяСтрокаРасшифровки.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.ВалютаБанковскогоСчета,
	|	ЕСТЬNULL(ПерваяСтрокаРасшифровки.ПерваяСтрРП_СДДС, НЕОПРЕДЕЛЕНО) КАК ПерваяСтрРП_СДДС,
	|	ПерваяСтрокаРасшифровки.ВалютаДоговора,
	|	ПерваяСтрокаРасшифровки.КурсВзаиморасчетов,
	|	ПерваяСтрокаРасшифровки.КратностьВзаиморасчетов,
	|	Шапка.СБДС_Дата,
	|	ПерваяСтрокаРасшифровки.ДоговорКонтрагента
	|ИЗ
	|	Шапка КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПерваяСтрокаРасшифровки КАК ПерваяСтрокаРасшифровки
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка КАК Заказ,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	|ГДЕ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тчПрочиеДоходы.НомерСтроки
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК тчПрочиеДоходы
	|ГДЕ
	|	тчПрочиеДоходы.Ссылка = &Ссылка
	|	И тчПрочиеДоходы.ДокументПланированияПлатежа ССЫЛКА Документ.ПланируемоеПоступлениеДенежныхСредств
	|			И НЕ тчПрочиеДоходы.ДокументПланированияПлатежа = ЗНАЧЕНИЕ(Документ.ПланируемоеПоступлениеДенежныхСредств.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ДополнительныеДанные = Запрос.ВыполнитьПакет();
	
	ДанныеШапки = ДополнительныеДанные[2].Выгрузить()[0];
	ДанныеИБ.ДополнительныеСвойства.Вставить("ДанныеШапки",                   ДанныеШапки);
	ДанныеИБ.ДополнительныеСвойства.Вставить("РасшифровкаПлатежаРасширенная", ДополнительныеДанные[3]);
	
	//}
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам 
		Тогда
		ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		
		ТаблицаПрочиеДоходы = ДополнительныеДанные[4].Выгрузить();
		Если ТаблицаПрочиеДоходы.Количество()=0 Тогда
			ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПБДСПрочиеДоходы_Отправка = Истина;
		КонецЕсли;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам Тогда
		ИспользованиеПКО.Документ_ПБДСПоПлатежнымКартам_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты 
		Тогда
		ИспользованиеПКО.Документ_ПБДСКонвертацияВалюты_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДС_Тр_Отправка
Процедура ДобавитьПОД_Документ_ПБДС_Тр_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДС_Тр_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеТребованиеВыставленное;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПБДС_Тр_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Тр_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Тр_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСКонвертацияВалюты_Тр_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Тр_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Тр_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПБДС_Тр_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ЗапретИспользованияИспользованияПКО(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	//{ ДополнительныеСвойства
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Шапка.ВалютаДокумента КАК Валюта,
	|	Шапка.СчетОрганизации.ВалютаДенежныхСредств КАК ВалютаБанковскогоСчета,
	|	Шапка.СтатьяДвиженияДенежныхСредств,
	|	Шапка.Дата КАК СБДС_Дата
	|ПОМЕСТИТЬ Шапка
	|ИЗ
	|	Документ.ПлатежноеТребованиеВыставленное КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПерваяСтрокаРасшифровки.СтатьяДвиженияДенежныхСредств КАК ПерваяСтрРП_СДДС,
	|	ПерваяСтрокаРасшифровки.КурсВзаиморасчетов,
	|	ПерваяСтрокаРасшифровки.КратностьВзаиморасчетов,
	|	ПерваяСтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ПерваяСтрокаРасшифровки.ДоговорКонтрагента
	|ПОМЕСТИТЬ ПерваяСтрокаРасшифровки
	|ИЗ
	|	Документ.ПлатежноеТребованиеВыставленное.РасшифровкаПлатежа КАК ПерваяСтрокаРасшифровки
	|ГДЕ
	|	ПерваяСтрокаРасшифровки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПерваяСтрокаРасшифровки.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.ВалютаБанковскогоСчета,
	|	ЕСТЬNULL(ПерваяСтрокаРасшифровки.ПерваяСтрРП_СДДС, НЕОПРЕДЕЛЕНО) КАК ПерваяСтрРП_СДДС,
	|	ПерваяСтрокаРасшифровки.ВалютаДоговора,
	|	ПерваяСтрокаРасшифровки.КурсВзаиморасчетов,
	|	ПерваяСтрокаРасшифровки.КратностьВзаиморасчетов,
	|	Шапка.СБДС_Дата,
	|	ПерваяСтрокаРасшифровки.ДоговорКонтрагента
	|ИЗ
	|	Шапка КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПерваяСтрокаРасшифровки КАК ПерваяСтрокаРасшифровки
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Сделка КАК Заказ,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.ПлатежноеТребованиеВыставленное.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	|ГДЕ
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлатежноеПоручениеВходящееРасшифровкаПлатежа.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тчПрочиеДоходы.НомерСтроки
	|ИЗ
	|	Документ.ПлатежноеТребованиеВыставленное.РасшифровкаПлатежа КАК тчПрочиеДоходы
	|ГДЕ
	|	тчПрочиеДоходы.Ссылка = &Ссылка
	|	И тчПрочиеДоходы.ДокументПланированияПлатежа ССЫЛКА Документ.ПланируемоеПоступлениеДенежныхСредств
	|			И НЕ тчПрочиеДоходы.ДокументПланированияПлатежа = ЗНАЧЕНИЕ(Документ.ПланируемоеПоступлениеДенежныхСредств.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ДополнительныеДанные = Запрос.ВыполнитьПакет();
	
	ДанныеШапки = ДополнительныеДанные[2].Выгрузить()[0];
	ДанныеИБ.ДополнительныеСвойства.Вставить("ДанныеШапки",                   ДанныеШапки);
	ДанныеИБ.ДополнительныеСвойства.Вставить("РасшифровкаПлатежаРасширенная", ДополнительныеДанные[3]);
	
	//}
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам 
		Тогда
		ИспользованиеПКО.Документ_ПБДСРасчетыСКонтрагентами_Тр_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		
		ТаблицаПрочиеДоходы = ДополнительныеДанные[4].Выгрузить();
		Если ТаблицаПрочиеДоходы.Количество()=0 Тогда
			ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Тр_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПБДСПрочиеДоходы_Тр_Отправка = Истина;
		КонецЕсли;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам Тогда
		ИспользованиеПКО.Документ_ПБДСПоПлатежнымКартам_Тр_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты 
		Тогда
		ИспользованиеПКО.Документ_ПБДСКонвертацияВалюты_Тр_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Документ_ПБДСПрочееПоступление_Тр_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПередачаМатериаловВПроизводство_Отправка
Процедура ДобавитьПОД_Документ_ПередачаМатериаловВПроизводство_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПередачаМатериаловВПроизводство_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ТребованиеНакладная;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПередачаМатериаловВПроизводство_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаМатериаловВПроизводство_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПередачаМатериаловВПроизводство_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПеремещениеТоваров
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПеремещениеТоваров";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПеремещениеТоваров_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПеремещениеТоваров_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПереоценкаТоваровВРознице_Отправка
Процедура ДобавитьПОД_Документ_ПереоценкаТоваровВРознице_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПереоценкаТоваровВРознице_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПереоценкаТоваровВРознице;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПереоценкаТоваровВРознице_Отправка");
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПоступлениеДопРасходов_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеДопРасходов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеДопРасходов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПоступлениеДопРасходов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеДопРасходов_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеДопРасходов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ВидОперации=Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		ИспользованиеПКО.Документ_ПоступлениеДопРасходов_Отправка = Ложь;
	КонецЕсли;
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПоступлениеТоваровУслуг
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеТоваровУслуг";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Значение = Справочники.Склады.ПустаяСсылка();
	Если ЗначениеЗаполнено(ДанныеИБ.СкладОрдер) Тогда
		Если ДанныеИБ.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			ТаблицаТоваров = ДанныеИБ.Товары.Выгрузить();
			ТаблицаТоваров.Свернуть("Склад");
			Если ТаблицаТоваров.Количество() = 1 Тогда
				Значение = ДанныеИБ.СкладОрдер.Склад;
			КонецЕсли;
		Иначе
			Значение = ДанныеИБ.СкладОрдер;
		КонецЕсли;
	КонецЕсли;
	РеквизитыОтбора = Новый Структура("Склад",Значение);
	ДанныеИБ.ДополнительныеСвойства.Вставить("Склад",Значение);
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка, КомпонентыОбмена, РеквизитыОтбора);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПоступлениеТоваровУслугВНТТ_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслугВНТТ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеТоваровУслугВНТТ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваровУслугВНТТ;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслугВНТТ_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПриходныйКассовыйОрдер
Процедура ДобавитьПОД_Документ_ПриходныйКассовыйОрдер(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПриходныйКассовыйОрдер";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПриходныйКассовыйОрдер_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПриходныйКассовыйОрдер_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ЗапретИспользованияИспользованияПКО(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	//{ ДополнительныеСвойства
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Шапка.ВалютаДокумента КАК Валюта,
	|	Шапка.СчетОрганизации.ВалютаДенежныхСредств КАК ВалютаБанковскогоСчета,
	|	Шапка.СтатьяДвиженияДенежныхСредств
	|ПОМЕСТИТЬ Шапка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПерваяСтрокаРасшифровки.СтатьяДвиженияДенежныхСредств КАК ПерваяСтрРП_СДДС
	|ПОМЕСТИТЬ ПерваяСтрокаРасшифровки
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПерваяСтрокаРасшифровки
	|ГДЕ
	|	ПерваяСтрокаРасшифровки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПерваяСтрокаРасшифровки.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.ВалютаБанковскогоСчета,
	|	ЕСТЬNULL(ПерваяСтрокаРасшифровки.ПерваяСтрРП_СДДС, НЕОПРЕДЕЛЕНО) КАК ПерваяСтрРП_СДДС
	|ИЗ
	|	Шапка КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПерваяСтрокаРасшифровки КАК ПерваяСтрокаРасшифровки
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Сделка КАК Заказ,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тчПрочиеДоходы.НомерСтроки
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК тчПрочиеДоходы
	|ГДЕ
	|	тчПрочиеДоходы.Ссылка = &Ссылка
	|	И тчПрочиеДоходы.ДокументПланированияПлатежа ССЫЛКА Документ.ПланируемоеПоступлениеДенежныхСредств
	|	И НЕ тчПрочиеДоходы.ДокументПланированияПлатежа = ЗНАЧЕНИЕ(Документ.ПланируемоеПоступлениеДенежныхСредств.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Дата);
	Запрос.УстановитьПараметр("ВалютаРегУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	ДополнительныеДанные = Запрос.ВыполнитьПакет();
	
	ДанныеШапки = ДополнительныеДанные[2].Выгрузить()[0];
	ДанныеИБ.ДополнительныеСвойства.Вставить("ДанныеШапки",                   ДанныеШапки);
	ДанныеИБ.ДополнительныеСвойства.Вставить("РасшифровкаПлатежаРасширенная", ДополнительныеДанные[3]);
	
	//}	
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком 
		Тогда
		ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда	
		ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда	
		ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда	
		
		ТаблицаПрочиеДоходы = ДополнительныеДанные[4].Выгрузить();
		Если ТаблицаПрочиеДоходы.Количество()=0 Тогда
			ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка = Истина;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_РасходныйКассовыйОрдер
Процедура ДобавитьПОД_Документ_РасходныйКассовыйОрдер(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РасходныйКассовыйОрдер";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РасходныйКассовыйОрдер_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РасходныйКассовыйОрдер_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ЗапретИспользованияИспользованияПКО(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ВидРасчетов = "";
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
		ВидРасчетов = "СПоставщиком";
	
	ИначеЕсли  ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
		ВидРасчетов = "СПокупателем";
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
		ВидРасчетов = "КредитыИЗаймы";
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами  Тогда
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
		ВидРасчетов = "Прочее";
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Истина;
		ВидРасчетов = "ВзносНаличными";
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику  Тогда
		ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Истина;
		ВидРасчетов = "Подотчет";
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее  Тогда
		ПрочийРасход = Истина;
		Для Каждого СтрокаТЧ  Из ДанныеИБ.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ДокументПланированияПлатежа) Тогда
				ПрочийРасход = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПрочийРасход Тогда
			ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ВидРасчетов <> "" Тогда
		ДанныеШапки = Новый Структура();
		ДанныеШапки.Вставить("ВидРасчетов", ВидРасчетов);
		ДанныеИБ.ДополнительныеСвойства.Вставить("ДанныеШапки", ДанныеШапки);
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_РеализацияТоваровУслуг
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РеализацияТоваровУслуг";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Отправка, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДС_Ордер_Отправка
Процедура ДобавитьПОД_Документ_СБДС_Ордер_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДС_Ордер_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СБДС_Ордер_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Ордер_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Ордер_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Ордер_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Ордер_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Ордер_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СБДС_Ордер_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	СБДСОтправкаПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена, "ПлатежныйОрдерСписаниеДенежныхСредств", "Ордер");
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДС_Отправка
Процедура ДобавитьПОД_Документ_СБДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СБДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СБДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	СБДСОтправкаПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДС_Тр_Отправка
Процедура ДобавитьПОД_Документ_СБДС_Тр_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДС_Тр_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеТребованиеПолученное;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СБДС_Тр_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Тр_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Тр_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Тр_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Тр_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Тр_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Тр_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СБДС_Тр_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	СБДСОтправкаПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена, "ПлатежноеТребованиеПолученное", "Тр");
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СборкаТоваров
Процедура ДобавитьПОД_Документ_СборкаТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СборкаТоваров";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.КомплектацияНоменклатуры;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СборкаТоваров_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СборкаТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СборкаТоваров_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_СборкаТоваров_Отправка, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СписаниеТоваров
Процедура ДобавитьПОД_Документ_СписаниеТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СписаниеТоваров";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеТоваров;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СписаниеТоваров_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеНедостач_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СписаниеТоваров_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СписаниеТоваров") Тогда
	ИспользованиеПКО.Документ_СписаниеТоваров_Отправка = Истина;
	ИспользованиеПКО.Удалить("Документ_СписаниеНедостач_Отправка");
Иначе
	ИспользованиеПКО.Документ_СписаниеНедостач_Отправка = Истина;
	ИспользованиеПКО.Удалить("Документ_СписаниеТоваров_Отправка");
КонецЕсли;
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СчетПокупателю_Отправка
Процедура ДобавитьПОД_Документ_СчетПокупателю_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетПокупателю_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетНаОплатуПокупателю;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СчетПокупателю_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетПокупателю_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СчетПокупателю_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СчетПокупателю") Тогда
		Если НЕ КомпонентыОбмена.ПараметрыКонвертации.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю=Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.СчетНаОплатуПокупателю Тогда
			ИспользованиеПКО.Документ_СчетПокупателю_Отправка = Ложь;
			Возврат;
		КонецЕсли;
		Если ТипЗнч(ДанныеИБ.Контрагент)=Тип("Строка") Тогда
			ИспользованиеПКО.Документ_СчетПокупателю_Отправка=Ложь;
			Возврат;
		КонецЕсли;
		ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_СчетПокупателю_Отправка, КомпонентыОбмена, Новый Структура("Организация,ОтражатьВБухгалтерскомУчете",ДанныеИБ.Организация, Истина));
	Иначе
		ИспользованиеПКО.Удалить("Документ_СчетПокупателю_Отправка");
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СчетПоставщика_Отправка
Процедура ДобавитьПОД_Документ_СчетПоставщика_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетПоставщика_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетНаОплатуПоставщика;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СчетПоставщика_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетПоставщика_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СчетПоставщика_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Документ.СчетПоставщика") Тогда
		ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО.Документ_СчетПоставщика_Отправка, КомпонентыОбмена);
	Иначе
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СчетФактураВыданный_Отправка
Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетФактураВыданный_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураВыданный;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Ложь;
	
	Для Каждого СтрокаОснование ИЗ ДанныеИБ.ДокументыОснования Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОснование.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		ИмяПКО = ИмяПКОДляДокументаОснованияСФВыданного(СтрокаОснование.ДокументОснование, ДанныеИБ.Организация);
		Если НЕ ПустаяСтрока(ИмяПКО) Тогда
			ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка=Ложь И ДанныеИБ.ДокументыОснования.Количество()=0 И ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ИмяПКО = ИмяПКОДляДокументаОснованияСФВыданного(ДанныеИБ.ДокументОснование, ДанныеИБ.Организация);
		Если НЕ ПустаяСтрока(ИмяПКО) Тогда
			ИспользованиеПКО.Документ_СчетФактураВыданный_Отправка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена, Новый Структура("ОтражатьВБухгалтерскомУчете",Истина));
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СчетФактураПолученный
Процедура ДобавитьПОД_Документ_СчетФактураПолученный(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетФактураПолученный";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетФактураПолученный;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СчетФактураПолученный_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СчетФактураПолученный_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СчетФактураПолученный_Отправка = Ложь;
	
	Для Каждого СтрокаОснование ИЗ ДанныеИБ.ДокументыОснования Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОснование.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПКО = ИмяПКОДляДокументаОснованияСФПолученного(СтрокаОснование.ДокументОснование);
		Если НЕ ПустаяСтрока(ИмяПКО) Тогда
			ИспользованиеПКО.Документ_СчетФактураПолученный_Отправка = Истина;
			ПередОбработкойДанныхДокумента(СтрокаОснование.ДокументОснование, ИспользованиеПКО.Документ_СчетФактураПолученный_Отправка, КомпонентыОбмена);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена, Новый Структура("ОтражатьВБухгалтерскомУчете,Организация",Истина,ДанныеИБ.Организация));
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УстановкаЦенНоменклатурыТовары.ТипЦен КАК ТипЦен,
	|	УстановкаЦенНоменклатурыТовары.Номенклатура,
	|	УстановкаЦенНоменклатурыТовары.Цена,
	|	УстановкаЦенНоменклатурыТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	УстановкаЦенНоменклатурыТовары.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТабТовары
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
	|ГДЕ
	|	УстановкаЦенНоменклатурыТовары.Ссылка = &Ссылка
	|	И УстановкаЦенНоменклатурыТовары.Цена <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТовары.ТипЦен КАК ТипЦен,
	|	ТабТовары.Номенклатура,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.Характеристика,
	|	ТабТовары.ЕдиницаИзмерения
	|ИЗ
	|	ТабТовары КАК ТабТовары
	|ИТОГИ ПО
	|	ТипЦен";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ВыборкаВидЦены = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЧислоТиповЦен = 0;
	Пока ВыборкаВидЦены.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаВидЦены.ТипЦен) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБСтруктура = Новый Структура("Дата, Номер, Ответственный, Ссылка, Комментарий");
		ЗаполнитьЗначенияСвойств(ДанныеИБСтруктура, ДанныеИБ);
		ВыборкаДетали = ВыборкаВидЦены.Выбрать();
		ТаблицаТоваров.Очистить();
		Пока ВыборкаДетали.Следующий() Цикл
			СтрокаТовары = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаДетали);
		КонецЦикла;
		ДанныеИБСтруктура.Вставить("ТипЦен", ВыборкаВидЦены.ТипЦен);
		ДанныеИБСтруктура.Вставить("Товары", ТаблицаТоваров);
		ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_УстановкаЦенНоменклатуры_Отправка", "Имя"));
	КонецЦикла;
	ИспользованиеПКО.Документ_УстановкаЦенНоменклатуры_Отправка = Ложь;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ЧекККМ_Отправка
Процедура ДобавитьПОД_Документ_ЧекККМ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЧекККМ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ЧекККМ;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЧекККМ_Отправка");
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Банки
Процедура ДобавитьПОД_Справочник_Банки(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Банки";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Банки;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Банки_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Банки = НЕ ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_БанковскиеСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчета;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета");
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ВидыДокументовФизическихЛиц_Отправка
Процедура ДобавитьПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ВидыДокументовФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДокументыУдостоверяющиеЛичность;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыДокументовФизическихЛиц_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ВидыДокументовФизическихЛиц") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ВидыНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ВидыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВидыНоменклатуры_Отправка");
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов");
КонецПроцедуры

Процедура ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Очистить();
	Иначе
		Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ИспользоватьОтборПоОрганизациям") И КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям Тогда
			Если КомпонентыОбмена.ПараметрыКонвертации.Организации.НайтиПоЗначению(ДанныеИБ.Организация)=Неопределено Тогда
				УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ДокументыФизическихЛиц_Отправка
Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ПаспортныеДанныеФизЛиц;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ДокументыФизическихЛиц") Тогда
		Если НЕ ( 
			ТипЗнч(ДанныеИБ)=Тип("РегистрСведенийНаборЗаписей.ПаспортныеДанныеФизЛиц") 
			И НЕ ДанныеИБ.Отбор.Найти("ФизЛицо")=Неопределено
			И ТипЗнч(ДанныеИБ.Отбор.ФизЛицо.Значение)=Тип("СправочникСсылка.ФизическиеЛица")
			И НЕ ПустаяСтрока(ДанныеИБ.Отбор.ФизЛицо.Значение.Наименование)
			) Тогда
			УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
		КонецЕсли;
		
	Иначе
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ДополнительныеРеквизиты_Отправка
Процедура ДобавитьПОД_Справочник_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДополнительныеРеквизиты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДополнительныеРеквизиты_Отправка");
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ДополнительныеРеквизитыКатегории_Отправ
Процедура ДобавитьПОД_Справочник_ДополнительныеРеквизитыКатегории_Отправ(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДополнительныеРеквизитыКатегории_Отправ";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КатегорииОбъектов;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДополнительныеРеквизитыКатегории_Отправ");
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ЗначенияДополнительныхРеквизитов_Отправ
Процедура ДобавитьПОД_Справочник_ЗначенияДополнительныхРеквизитов_Отправ(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ЗначенияДополнительныхРеквизитов_Отправ";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияДополнительныхРеквизитов_Отправ");
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Кассы_Отправка
Процедура ДобавитьПОД_Справочник_Кассы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Кассы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Кассы;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Кассы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Кассы_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Кассы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.Кассы") Тогда
		ИспользованиеПКО.Справочник_Кассы_Отправка = НЕ ДанныеИБ.ЭтоГруппа;
	Иначе
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_КассыККМ_Отправка
Процедура ДобавитьПОД_Справочник_КассыККМ_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КассыККМ_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КассыККМ;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_КассыККМ_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КассыККМ_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_КассыККМ_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.КассыККМ") Тогда
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_КлассификаторЕдиницИзмерения
Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КлассификаторЕдиницИзмерения";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КлассификаторЕдиницИзмерения");
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_КлассификаторСтранМира
Процедура ДобавитьПОД_Справочник_КлассификаторСтранМира(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КлассификаторСтранМира";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторСтранМира;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_КонтактныеЛица_Отправка
Процедура ДобавитьПОД_Справочник_КонтактныеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КонтактныеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КонтактныеЛица;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтактныеЛица_Отправка");
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_КонтактныеЛицаКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_КонтактныеЛицаКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КонтактныеЛицаКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КонтактныеЛицаКонтрагентов;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_КонтактныеЛицаКонтрагентов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтактныеЛицаКонтрагентов_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_КонтактныеЛицаКонтрагентов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_КонтактныеЛицаКонтрагентов_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_КонтрагентыГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураГруппа    = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_НоменклатурнаяГруппа_Отправка
Процедура ДобавитьПОД_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НоменклатурнаяГруппа_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурнаяГруппа_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурныеГруппыГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ГруппыАналитическогоУчетаНоменклатуры") Тогда
		ИспользованиеПКО.Справочник_НоменклатурнаяГруппа_Отправка = НЕ ДанныеИБ.ЭтоГруппа;
		ИспользованиеПКО.Справочник_НоменклатурныеГруппыГруппа_Отправка = ДанныеИБ.ЭтоГруппа;
	Иначе
		ОчиститьИспользованиеПКО(ИспользованиеПКО);
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Организации
Процедура ДобавитьПОД_Справочник_Организации(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Организации";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Организации_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации");
КонецПроцедуры

Процедура ПОД_Справочник_Организации_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ИспользоватьОтборПоОрганизациям") И КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям Тогда
		Если КомпонентыОбмена.ПараметрыКонвертации.Организации.НайтиПоЗначению(ДанныеИБ.Ссылка)=Неопределено Тогда
			УстановитьИспользованиеПКО(ИспользованиеПКО, Ложь);
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Подразделения_Отправка
Процедура ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Подразделения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Подразделения;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения");
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Пользователи_Отправка
Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Пользователи_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры

Процедура ПОД_Справочник_Пользователи_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	//
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_СерииНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_СерииНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СерииНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СерииНоменклатуры;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СерииНоменклатуры_Отправка");
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Склады_Отправка
Процедура ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Склады_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Склады;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Склады_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Склады_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ДанныеИБ.ЭтоГруппа 
		И КомпонентыОбмена.ПараметрыКонвертации.Свойство("ИспользоватьОтборПоСкладам") 
		И КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоСкладам=Истина Тогда
		ИспользованиеПКО.Справочник_СкладыГруппа = Ложь;
		Если КомпонентыОбмена.ПараметрыКонвертации.Склады.НайтиПоЗначению(ДанныеИБ.Ссылка)=Неопределено Тогда
			ИспользованиеПКО.Справочник_Склады = Ложь;
		КонецЕсли;
	Иначе
		ИспользованиеПКО.Справочник_Склады = НЕ (ДанныеИБ.ЭтоГруппа);
		ИспользованиеПКО.Справочник_СкладыГруппа = (ДанныеИБ.ЭтоГруппа);
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_СтатьиДвиженияДенежныхСредств
Процедура ДобавитьПОД_Справочник_СтатьиДвиженияДенежныхСредств(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДвиженияДенежныхСредств";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_СтатьиДДС_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры

Процедура ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Удалить("Справочник_СтатьиДДС");
		ИспользованиеПКО.Справочник_СтатьиДДС_Группа_Отправка = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.2");
	Иначе
		ИспользованиеПКО.Удалить("Справочник_СтатьиДДС_Группа_Отправка");
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_СтатьиРасходов_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиРасходов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиРасходов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиЗатрат;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_СтатьиРасходов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_СтатьиРасходов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_СтатьиРасходов_Отправка = НЕ (ДанныеИБ.ЭтоГруппа);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ТипыЦенНоменклатуры
Процедура ДобавитьПОД_Справочник_ТипыЦенНоменклатуры(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТипыЦенНоменклатуры";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ТипыЦенНоменклатуры;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦенНоменклатуры");
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Упаковки_Отправка
Процедура ДобавитьПОД_Справочник_Упаковки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Упаковки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Упаковки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Упаковки_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Упаковки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если НЕ ТипЗнч(ДанныеИБ.Владелец)=Тип("СправочникСсылка.Номенклатура") Тогда
		ИспользованиеПКО.Справочник_Упаковки_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Файлы_Отправка
Процедура ДобавитьПОД_Справочник_Файлы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Файлы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ХранилищеДополнительнойИнформации;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Файлы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Файлы_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Файлы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ТипЗнчОбъекта = ТипЗнч(ДанныеИБ.Объект);
	Если ТипЗнчОбъекта=Тип("СправочникСсылка.Номенклатура") 
		ИЛИ ТипЗнчОбъекта=Тип("СправочникСсылка.ДоговорыКонтрагентов") 
		ИЛИ ТипЗнчОбъекта=Тип("СправочникСсылка.Контрагенты") 
		Тогда
	Иначе
		ИспользованиеПКО.Справочник_Файлы_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа = (ДанныеИБ.ЭтоГруппа);
	ИспользованиеПКО.Справочник_ФизическиеЛица = НЕ (ДанныеИБ.ЭтоГруппа);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ХарактеристикиНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ХарактеристикиНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ХарактеристикиНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ХарактеристикиНоменклатуры");
КонецПроцедуры

Процедура ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("НеВыгружатьХарактеристики") И КомпонентыОбмена.ПараметрыКонвертации.НеВыгружатьХарактеристики=Истина Тогда
		ИспользованиеПКО.Справочник_ХарактеристикиНоменклатуры = Ложь;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ШтрихкодыНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.Штрихкоды;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ЭтоРегистр = ТипЗнч(ДанныеИБ)=Тип("РегистрСведенийНаборЗаписей.Штрихкоды");
	Если ЭтоРегистр И ( ПустаяСтрока(ДанныеИБ.Отбор.Штрихкод.Значение) 
		ИЛИ НЕ ТипЗнч(ДанныеИБ.Отбор.Владелец.Значение)=Тип("СправочникСсылка.Номенклатура") ) Тогда
		УстановитьВсеИспользованиеПКО(ИспользованиеПКО, Ложь);
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ЭквайринговыеТерминалы_Отправка
Процедура ДобавитьПОД_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ЭквайринговыеТерминалы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыЭквайринга;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЭквайринговыеТерминалы_Отправка");
КонецПроцедуры
//} КонецОбласти
//} КонецОбласти

//} КонецОбласти
//{ Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	//БОЙКОВ
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ВнутреннееПеремещениеНаличныхДенежныхСредств_Отправка(ПравилаКонвертации);
	КонецЕсли;
	//
	
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АккрПередПрочее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АккрПередРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АккрПолучПрочее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_АккрПолучРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ГТДИмпорт_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказКлиента_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказКлиентаИзСтруктуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказКлиентаСчетПокупателю_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнкассоПередПрочее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнкассоПолучПрочее_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнкассПередРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаЗакрытие_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КассоваяСменаОткрытие_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаДолга_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступления_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиБезналичныхДенежныхСредств_Отправ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиНаличныхДенежныхСредств_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Отправ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Отправ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Отправ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ_Стр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомиссионера_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитенту_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах15_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Ордер_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Тр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Ордер_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Тр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Ордер_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Тр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Ордер_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Тр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Ордер_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Тр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаМатериаловВПроизводство_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПереоценкаТоваровВРознице_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеДопРасходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслугВНТТ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Ордер_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Тр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Ордер_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Тр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Ордер_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Тр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Ордер_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Тр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Ордер_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Тр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Ордер_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Тр_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СборкаТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеНедостач_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетПокупателю_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетПоставщика_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЧекККМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ВидыНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентаБанковскиеСчета_Отпр(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДополнительныеРеквизиты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДополнительныеРеквизитыИзСтруктуры_Отпр(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДополнительныеРеквизитыКатегории_Отправ(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов_Отправ(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Кассы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КассыИзСтруктуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КассыККМ_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КлассификаторЕдиницИзмерения(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтактныеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтактныеЛицаКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатурныеГруппыГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СерииНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьяДоходов_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ТипыЦенНоменклатуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Упаковки_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Файлы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЦеновыеГруппы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаКонвертации);
	КонецЕсли;
КонецПроцедуры

//{ Область Отправка
//{ Область Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_АвансовыйОтчет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДокументов";
	НоваяСтрока.СвойствоФормата = "КоличествоДокументов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоЛистов";
	НоваяСтрока.СвойствоФормата = "КоличествоЛистов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьДокумента";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсДокумента";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеАванса";
	НоваяСтрока.СвойствоФормата = "НазначениеАванса";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.СвойствоФормата = "ПодотчетноеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВыданныеАвансы", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВыданныеАвансы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Документ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаКонтрагентам", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаКонтрагентам;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПрочиеРасходы", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПрочиеРасходы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчетаНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПредъявленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПредъявленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьСклад(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, "СкладОрдер");
	ВыгрузитьНалогообложениеНДСПродавца(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА взДоговоры.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
	|			ТОГДА ""КомиссионныеТовары""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		АвансовыйОтчетОплатаПоставщикам.ДоговорКонтрагента КАК ДоговорКонтрагента
	|	ИЗ
	|		Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчетОплатаПоставщикам
	|	ГДЕ
	|		АвансовыйОтчетОплатаПоставщикам.Ссылка = &Ссылка
	|		И НЕ АвансовыйОтчетОплатаПоставщикам.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК взДоговоры";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ТипЗапасов = Выборка.ТипЗапасов;
	Иначе
		ТипЗапасов = "СобственныеТовары";
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тВыданныеАвансы.ДокументАванса КАК ДокументАванса,
	|	тВыданныеАвансы.Сумма КАК Сумма
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК тВыданныеАвансы
	|ГДЕ
	|	тВыданныеАвансы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тОплатаКонтрагентам.Контрагент КАК Контрагент,
	|	тОплатаКонтрагентам.ДоговорКонтрагента КАК Договор,
	|	тОплатаКонтрагентам.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	тОплатаКонтрагентам.КурсВзаиморасчетов,
	|	тОплатаКонтрагентам.КратностьВзаиморасчетов,
	|	тОплатаКонтрагентам.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	тОплатаКонтрагентам.Содержание,
	|	тОплатаКонтрагентам.Сумма,
	|	тОплатаКонтрагентам.СуммаВзаиморасчетов,
	|	тОплатаКонтрагентам.НомерВходящегоДокумента,
	|	тОплатаКонтрагентам.ДатаВходящегоДокумента,
	|	тОплатаКонтрагентам.ВидДокВходящий КАК НаименованиеВходящегоДокумента,
	|	тОплатаКонтрагентам.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК тОплатаКонтрагентам
	|ГДЕ
	|	тОплатаКонтрагентам.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тТовары.Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	Штрихкоды.Штрихкод,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	тТовары.Количество,
	|	тТовары.Цена,
	|	тТовары.Цена КАК ЦенаЗаУпаковку,
	|	тТовары.Сумма,
	|	тТовары.СтавкаНДС,
	|	тТовары.СуммаНДС,
	|	тТовары.Количество КАК КоличествоУпаковок,
	|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов,
	|	тТовары.Поставщик,
	|	тТовары.ПредъявленСФ,
	|	тТовары.ДатаСФ,
	|	тТовары.НомерСФ,
	|	тТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	тТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	тТовары.НомерВходящегоДокумента,
	|	тТовары.ДатаВходящегоДокумента,
	|	тТовары.ВидДокВходящий КАК НаименованиеВходящегоДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет.Товары КАК тТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО тТовары.Номенклатура = Штрихкоды.Владелец
	|			И тТовары.ХарактеристикаНоменклатуры = Штрихкоды.ХарактеристикаНоменклатуры
	|			И тТовары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
	|			И тТовары.СерияНоменклатуры = Штрихкоды.СерияНоменклатуры
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тПрочиеРасходы.Номенклатура,
	|	тПрочиеРасходы.Содержание,
	|	тПрочиеРасходы.Сумма,
	|	тПрочиеРасходы.СтавкаНДС,
	|	тПрочиеРасходы.СуммаНДС,
	|	тПрочиеРасходы.ПредъявленСФ,
	|	тПрочиеРасходы.Поставщик,
	|	тПрочиеРасходы.ДатаСФ,
	|	тПрочиеРасходы.НомерСФ,
	|	тПрочиеРасходы.Подразделение КАК ПодразделениеЗатрат,
	|	тПрочиеРасходы.СтатьяЗатрат,
	|	тПрочиеРасходы.НомерВходящегоДокумента,
	|	тПрочиеРасходы.ДатаВходящегоДокумента,
	|	тПрочиеРасходы.ВидДокВходящий КАК НаименованиеВходящегоДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет.Прочее КАК тПрочиеРасходы
	|ГДЕ
	|	тПрочиеРасходы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблВыданныеАвансы = Результат[0].Выгрузить();
	ТаблВыданныеАвансы.Колонки.Добавить("Документ");
	
	ТаблОплатаКонтрагентам = Результат[1].Выгрузить();
	ТаблОплатаКонтрагентам.Колонки.Добавить("ДокументРасчетов");
	
	ТаблТовары = Результат[2].Выгрузить();
	ТаблПрочиеРасходы = Результат[3].Выгрузить();
	
	
	//{ ТаблВыданныеАвансы
	СоответствиеЗначений = Новый Соответствие;
	СоответствиеЗначений.Вставить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"), "Документ_РКОРасчетыССотрудниками_Отправка");
	СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"), "Документ_СБДСРасчетыССотрудниками_Ордер_Отправка");
	СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"), "Документ_СБДСРасчетыССотрудниками_Отправка");
	
	Для Каждого СтрокаТЧ Из ТаблВыданныеАвансы Цикл
		ИмяПКО = СоответствиеЗначений.Получить(ТипЗнч(СтрокаТЧ.ДокументАванса));
		Если ЗначениеЗаполнено(ИмяПКО) Тогда
			СтрокаТЧ.Документ = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.ДокументАванса, ИмяПКО);
		КонецЕсли;
	КонецЦикла;
	//}
	
	// ТаблОплатаКонтрагентам
	Для Каждого СтрокаТЧ Из ТаблОплатаКонтрагентам Цикл
		СтрокаТЧ.ДокументРасчетов = ЗначениеВИнструкциюПКО(КомпонентыОбмена, СтрокаТЧ.ДокументРасчетовСКонтрагентом);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ВыданныеАвансы",ТаблВыданныеАвансы);	
	ДанныеXDTO.Вставить("ОплатаКонтрагентам",ТаблОплатаКонтрагентам);	
	ДанныеXDTO.Вставить("Товары",ТаблТовары);	
	ДанныеXDTO.Вставить("ПрочиеРасходы",ТаблПрочиеРасходы);
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_АккрПередПрочее_Отправка
Процедура ДобавитьПКО_Документ_АккрПередПрочее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_АккрПередПрочее_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.АккредитивПереданный;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АккрПередПрочее_Отправка_ПриОтправкеДанных";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_АккрПередПрочее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "Аккредитив");
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	тРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.АккредитивПереданный.РасшифровкаПлатежа КАК тРасшифровкаПлатежа
	|ГДЕ
	|	тРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_АккрПередРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_АккрПередРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_АккрПередРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.АккредитивПереданный;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АккрПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_АккрПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	ЭтоСБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "Аккредитив");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	
	КонтрагентСсылка = ДанныеИБ.Контрагент;
	ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(ДанныеИБ, ДанныеXDTO, КонтрагентСсылка, КомпонентыОбмена);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_АккрПолучПрочее_Отправка
Процедура ДобавитьПКО_Документ_АккрПолучПрочее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_АккрПолучПрочее_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.АккредитивПолученный;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АккрПолучПрочее_Отправка_ПриОтправкеДанных";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_АккрПолучПрочее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "Аккредитив");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	тРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.АккредитивПолученный.РасшифровкаПлатежа КАК тРасшифровкаПлатежа
	|ГДЕ
	|	тРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_АккрПолучРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_АккрПолучРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_АккрПолучРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.АккредитивПолученный;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АккрПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_АккрПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "Аккредитив");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ДатаОплаты)  Тогда
		ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	КонецЕсли;
	
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "АккредитивПолученный", КомпонентыОбмена);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ВозвратТоваровОтПокупателя_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПокупателемВыставляетсяСчетФактураНаВозврат";
	НоваяСтрока.СвойствоФормата = "ПокупателемВыставляетсяСчетФактураНаВозврат";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ЗаказКлиента_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВозвратПодДеятельность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьСклад(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена, "СкладОрдер");
	ВыгрузитьНалогообложениеНДСПродавца(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	
	Если ТипЗнч(ДанныеИБ.Сделка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ДанныеXDTO.Вставить("Заказ", ДанныеИБ.Сделка);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СчетУчетаРасчетовСКонтрагентом", "62.01");
	ДанныеXDTO.Вставить("СчетУчетаРасчетовПоАвансам", "62.02");
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	//Товары
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	CASE WHEN тТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	тТовары.СерияНоменклатуры КАК Серия,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(тТовары.Количество * тТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
	|	тТовары.Сумма КАК Сумма,
	|	тТовары.Цена КАК Цена,
	|	тТовары.Цена КАК ЦенаЗаУпаковку,
	|	тТовары.Количество КАК КоличествоУпаковок,
	|	тТовары.СтавкаНДС КАК СтавкаНДС,
	|	тТовары.СуммаНДС КАК СуммаНДС,
	|	тТовары.Себестоимость КАК Себестоимость,
	|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов,
	|	тТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	тТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	&ВозвратПодДеятельность КАК ВозвратПодДеятельность,
	|	тТовары.ДокументПартии КАК ДокументРеализацииСсылка
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК тТовары
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	тТара.НомерСтроки,
	|	тТара.Номенклатура,
	|	NULL,
	|	NULL,
	|	NULL,
	|	тТара.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору,
	|	тТара.Количество,
	|	тТара.Сумма,
	|	тТара.Цена,
	|	тТара.Цена,
	|	тТара.Количество,
	|	тТара.Номенклатура.СтавкаНДС,
	|	0,
	|	0,
	|	""ВозвратнаяТара"",
	|	NULL,
	|	NULL,
	|	&ВозвратПодДеятельность,
	|	NULL
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.ВозвратнаяТара КАК тТара
	|ГДЕ
	|	тТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тПогашениеЗадолженности.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	тПогашениеЗадолженности.СуммаВзаиморасчетов КАК Сумма
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.ДокументыРасчетовСКонтрагентом КАК тПогашениеЗадолженности
	|ГДЕ
	|	тПогашениеЗадолженности.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровОтПокупателяТовары.ДокументПартии КАК ДокументРеализации
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка";
	
	//БОЙКОВ
	//Если ДанныеИБ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	//	ТипЗапасов = "КомиссионныеТовары";
	//	ДанныеXDTO.Вставить("ВидОперации", "ВозвратОтКомиссионера");
	//Иначе
	//	ТипЗапасов = "СобственныеТовары";
	//	ДанныеXDTO.Вставить("ВидОперации", "ВозвратОтКлиента");
	//КонецЕсли;
	ТипЗапасов = "СобственныеТовары";
	ДанныеXDTO.Вставить("ВидОперации", "ВозвратОтКлиента");
	//
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ВозвратПодДеятельность", "ОпределяетсяРаспределением");
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);
	Результат = Запрос.ВыполнитьПакет();
	
	ТабТовары = Результат[0].Выгрузить();
	ТабТовары.Колонки.Добавить("ДокументРеализации"); // задействовано в полной версии
	Для каждого СтрокаТЧ Из ТабТовары Цикл
		
		ДокументРеализации = СтрокаТЧ.ДокументРеализацииСсылка;
		Если ЗначениеЗаполнено(ДокументРеализации) Тогда
			Если  ТипЗнч(ДокументРеализации)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
			ИначеЕсли ТипЗнч(ДокументРеализации)=Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
				ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Отправка";
			Иначе
				Продолжить;
			КонецЕсли;
			СтрокаТЧ.ДокументРеализации = Новый Структура("Значение, ИмяПКО", ДокументРеализации, ИмяПКО);
		КонецЕсли;
	
	КонецЦикла;
	ВыгрузитьХарактеристикиИзТаблицы(ТабТовары, КомпонентыОбмена);
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	
	ВыгрузитьПогашениеЗадолженности(Результат[1].Выгрузить(), ДанныеXDTO);
	
	//Документ реализации
	ДокументРеализации = Неопределено;
	ДанныеXDTO.Вставить("ДокументРеализации");
	
	Выборка = Результат[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументРеализации = Выборка.ДокументРеализации;
		Если ЗначениеЗаполнено(ДокументРеализации) Тогда
			Если  ТипЗнч(ДокументРеализации)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
			ИначеЕсли ТипЗнч(ДокументРеализации)=Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
				ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Отправка";
			Иначе
				Продолжить;
			КонецЕсли;
			ДанныеXDTO.Вставить("ДокументРеализации", Новый Структура("Значение, ИмяПКО", ДокументРеализации, ИмяПКО));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьСклад(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена);
	ДанныеXDTO.Вставить("Налогообложение", ?(ДанныеИБ.УчитыватьНДС,"ПродажаОблагаетсяНДС","ПродажаНеОблагаетсяНДС"));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Шапка.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
	//|			ТОГДА ""ВозвратКомитенту""
	|			ТОГДА ""ВозвратПоставщику""
	|		ИНАЧЕ ""ВозвратПоставщику""
	|	КОНЕЦ КАК ВидОперации,
	|	Шапка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Шапка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	тТовары.СерияНоменклатуры КАК Серия,
	|	CASE WHEN тТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(тТовары.Количество * тТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
	|	тТовары.Количество КАК КоличествоУпаковок,
	|	тТовары.Сумма КАК Сумма,
	|	тТовары.Цена КАК Цена,
	|	тТовары.СтавкаНДС КАК СтавкаНДС,
	|	тТовары.СуммаНДС КАК СуммаНДС,
	|	тТовары.ДокументПоступления КАК ДокументПоступленияСсылка,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК ТипЗапасов,
	|	тТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	тТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК тТовары
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	тТара.НомерСтроки,
	|	тТара.Номенклатура,
	|	NULL,
	|	NULL,
	|	NULL,
	|	тТара.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору,
	|	тТара.Количество,
	|	тТара.Количество,
	|	тТара.Сумма,
	|	тТара.Цена,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВЫРАЗИТЬ(""ВозвратнаяТара"" КАК СТРОКА(50)),
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.ВозвратнаяТара КАК тТара
	|ГДЕ
	|	тТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	тДокумент.ДокументПоступления КАК ДокументПоступления
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК тДокумент
	|ГДЕ
	|	тДокумент.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тПогашениеЗадолженности.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	тПогашениеЗадолженности.СуммаВзаиморасчетов КАК Сумма
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.ДокументыРасчетовСКонтрагентом КАК тПогашениеЗадолженности
	|ГДЕ
	|	тПогашениеЗадолженности.Ссылка = &Ссылка";
	
	Если ТипЗнч(ДанныеИБ)=Тип("ДокументОбъект.ВозвратТоваровПоставщикуИзНТТ")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ВозвратТоваровПоставщику","Документ.ВозвратТоваровПоставщикуИзНТТ");
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыгрузитьШапку(ДанныеXDTO, РезультатыЗапроса[0].Выгрузить());	
	ТабТовары = РезультатыЗапроса[1].Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары);
	
	ТабТовары.Колонки.Добавить("ДокументПоступления");
	КешСоответствий = Неопределено;
	Для Каждого СтрТовары Из ТабТовары Цикл
		СтрТовары.ДокументПоступления = ПолучитьИмяПКОДляОтправкиПоСсылке(КомпонентыОбмена, СтрТовары.ДокументПоступленияСсылка, "Документ.ВозвратТоваровПоставщику,ДокументПоступления", КешСоответствий);
	КонецЦикла;
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	
	//Документ поступления
	ДокументПоступления = Неопределено;
	ДанныеXDTO.Вставить("ДокументПоступления");
	
	//ДокументПоступления
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументПоступления = Выборка.ДокументПоступления;
		Если ЗначениеЗаполнено(ДокументПоступления) И ТипЗнч(ДокументПоступления)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ДанныеXDTO.Вставить("ДокументПоступления", ДокументПоступления);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВыгрузитьПогашениеЗадолженности(РезультатыЗапроса[3].Выгрузить(), ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровПоставщикуИзНТТ;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ПриОтправкеДанных";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоТаре";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ГТДИмпорт_Отправка
Процедура ДобавитьПКО_Документ_ГТДИмпорт_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ГТДИмпорт_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ГТДИмпорт;
	ПравилоКонвертации.ОбъектФормата = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ГТДИмпорт_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагентаРегл";
	НоваяСтрока.СвойствоФормата = "ДоговорРаегл";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьДокумента";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсДокумента";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТаможенныйСбор";
	НоваяСтрока.СвойствоФормата = "ТаможенныйСбор";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТаможенныйШтраф";
	НоваяСтрока.СвойствоФормата = "ТаможенныйШтраф";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерДекларации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентомВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Разделы", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Разделы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НДСВВалюте";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерРаздела";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПошлинаВВалюте";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТаможеннаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерРаздела";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТаможеннаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ГТДИмпорт_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	тШапка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	 |	тШапка.НомерГТД.Код КАК НомерДекларации
	 |ИЗ
	 |	Документ.ГТДИмпорт КАК тШапка
	 |ГДЕ
	 |	тШапка.Ссылка = &Ссылка
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	 |	тТовары.НомерРаздела,
	 |	тТовары.Номенклатура,
	 |	ВЫРАЗИТЬ(тТовары.ДокументПартии КАК Документ.ПоступлениеТоваровУслуг) КАК ДокументПоступления,
	 |	тТовары.Количество,
	 |	тТовары.ФактурнаяСтоимость КАК ТаможеннаяСтоимость,
	 |	тТовары.СуммаНДС,
	 |	тТовары.СуммаПошлины,
	 |	тТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения
	 |ИЗ
	 |	Документ.ГТДИмпорт.Товары КАК тТовары
	 |ГДЕ
	 |	тТовары.Ссылка = &Ссылка
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	тРазделы.НомерСтроки КАК НомерРаздела,
	 |	тРазделы.СтавкаНДС,
	 |	тРазделы.СтавкаПошлины,
	 |	тРазделы.СуммаНДС,
	 |	тРазделы.СуммаПошлины,
	 |	тРазделы.ТаможеннаяСтоимость,
	 |	тРазделы.НДСВВалюте,
	 |	тРазделы.ПошлинаВВалюте
	 |ИЗ
	 |	Документ.ГТДИмпорт.Разделы КАК тРазделы
	 |ГДЕ
	 |	тРазделы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыгрузитьШапку(ДанныеXDTO, РезультатыЗапроса[0].Выгрузить());
	
	ДанныеXDTO.Вставить("Товары", РезультатыЗапроса[1].Выгрузить());
	ДанныеXDTO.Вставить("Разделы", РезультатыЗапроса[2].Выгрузить());
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ЗаказКлиента_Отправка
Процедура ДобавитьПКО_Документ_ЗаказКлиента_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЗаказКлиента_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦенНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	СкладДляВыгрузки = СкладДляВыгрузки(?(ДанныеИБ.ДополнительныеСвойства.Свойство("Склад"),ДанныеИБ.ДополнительныеСвойства.Склад, ДанныеИБ.СкладГруппа), КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиница) И ТипЗнч(ДанныеИБ.СтруктурнаяЕдиница)=Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ДанныеXDTO.Вставить("БанковскийСчетОрганизации", ДанныеИБ.СтруктурнаяЕдиница);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	//Товары Услуги
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	тТовары.СерияНоменклатуры КАК Серия,
	|	CASE WHEN тТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	ВЫРАЗИТЬ(тТовары.Количество * тТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
	|	тТовары.Количество КАК КоличествоУпаковок,
	|	тТовары.Сумма КАК Сумма,
	|	тТовары.Цена КАК Цена,
	|	тТовары.СтавкаНДС КАК СтавкаНДС,
	|	тТовары.СуммаНДС КАК СуммаНДС,
	|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК тТовары
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тУслуги.НомерСтроки КАК НомерСтрокиДокумента,
	|	тУслуги.Номенклатура КАК Номенклатура,
	|	тУслуги.Количество КАК Количество,
	|	тУслуги.Сумма КАК Сумма,
	|	тУслуги.Цена КАК Цена,
	|	тУслуги.СтавкаНДС КАК СтавкаНДС,
	|	тУслуги.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.ЗаказПокупателя.Услуги КАК тУслуги
	|ГДЕ
	|	тУслуги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	//БОЙКОВ
	//Если ДанныеИБ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	//	ТипЗапасов = "КомиссионныеТовары";
	//Иначе
	//	ТипЗапасов = "СобственныеТовары";
	//КонецЕсли;
	ТипЗапасов = "СобственныеТовары";
	//
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);	
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТабТовары = РезультатыЗапроса[0].Выгрузить();
	ТабУслуги = РезультатыЗапроса[1].Выгрузить();
	
	ОтборНоменклатурыВТаблице(КомпонентыОбмена, ТабТовары);
	ОтборНоменклатурыВТаблице(КомпонентыОбмена, ТабУслуги);
	
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
	
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ЗаказКлиентаИзСтруктуры_Отправка
Процедура ДобавитьПКО_Документ_ЗаказКлиентаИзСтруктуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЗаказКлиентаИзСтруктуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказКлиентаИзСтруктуры_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Валюта";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НаименованиеВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦенНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ЗаказКлиентаИзСтруктуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки(ДанныеИБ.Склад,КомпонентыОбмена.ПараметрыКонвертации));
	
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	ДанныеXDTO.Вставить("Услуги", ДанныеИБ.Услуги);
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ЗаказКлиентаСчетПокупателю_Отправка
Процедура ДобавитьПКО_Документ_ЗаказКлиентаСчетПокупателю_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЗаказКлиентаСчетПокупателю_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ЗаказПокупателя;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетПокупателю";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказКлиентаСчетПокупателю_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦенНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ЗаказКлиентаСчетПокупателю_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьСклад(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	CASE WHEN тТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	ВЫРАЗИТЬ(тТовары.Количество * тТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
	|	тТовары.Количество КАК КоличествоУпаковок,
	|	тТовары.Сумма КАК Сумма,
	|	тТовары.Цена КАК Цена,
	|	тТовары.СтавкаНДС КАК СтавкаНДС,
	|	тТовары.СуммаНДС КАК СуммаНДС,
	|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК тТовары
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тУслуги.НомерСтроки КАК НомерСтрокиДокумента,
	|	тУслуги.Номенклатура КАК Номенклатура,
	|	тУслуги.Количество КАК Количество,
	|	тУслуги.Сумма КАК Сумма,
	|	тУслуги.Цена КАК Цена,
	|	тУслуги.СтавкаНДС КАК СтавкаНДС,
	|	тУслуги.СуммаНДС КАК СуммаНДС,
	|	тУслуги.Содержание КАК Содержание
	|ИЗ
	|	Документ.ЗаказПокупателя.Услуги КАК тУслуги
	|ГДЕ
	|	тУслуги.Ссылка = &Ссылка";	
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	//БОЙКОВ
	//Если ДанныеИБ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	//	ТипЗапасов = "КомиссионныеТовары";
	//Иначе
	//	ТипЗапасов = "СобственныеТовары";
	//КонецЕсли;
	ТипЗапасов = "СобственныеТовары";
	//
	Запрос.УстановитьПараметр("ТипЗапасов",ТипЗапасов);
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);		
	Результат = Запрос.ВыполнитьПакет();
	
	
	ДанныеXDTO.Вставить("Товары", Результат[0].Выгрузить());
	ДанныеXDTO.Вставить("Услуги", Результат[1].Выгрузить());
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
	
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ЗаказПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ЗаказПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЗаказПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ЗаказПоставщику;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	ВыгрузитьСклад(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена);
	Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиница) И ТипЗнч(ДанныеИБ.СтруктурнаяЕдиница)=Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ДанныеXDTO.Вставить("БанковскийСчетОрганизации", ДанныеИБ.СтруктурнаяЕдиница);
	КонецЕсли;
	
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	//Товары Услуги
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	зТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	зТовары.Номенклатура КАК Номенклатура,
	|	зТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВЫБОР
	|		КОГДА зТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору ЕСТЬ NULL
	|				ИЛИ зТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = &ПустаяЕдиница
	|			ТОГДА КлассификаторЕдиницИзмерения.Ссылка
	|		ИНАЧЕ зТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	зТовары.Количество * зТовары.Коэффициент КАК Количество,
	|	зТовары.Количество КАК КоличествоУпаковок,
	|	зТовары.Сумма КАК Сумма,
	|	зТовары.Цена КАК Цена,
	|	зТовары.СтавкаНДС КАК СтавкаНДС,
	|	зТовары.СуммаНДС КАК СуммаНДС,
	|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК зТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|		ПО зТовары.ЕдиницаИзмерения.Наименование = КлассификаторЕдиницИзмерения.Наименование
	|ГДЕ
	|	зТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	зУслуги.НомерСтроки КАК НомерСтрокиДокумента,
	|	зУслуги.Номенклатура КАК Номенклатура,
	|	зУслуги.Количество КАК Количество,
	|	зУслуги.Сумма КАК Сумма,
	|	зУслуги.Цена КАК Цена,
	|	зУслуги.СтавкаНДС КАК СтавкаНДС,
	|	зУслуги.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.ЗаказПоставщику.Услуги КАК зУслуги
	|ГДЕ
	|	зУслуги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка());
	
	//БОЙКОВ
	//Если ДанныеИБ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	//	ТипЗапасов = "КомиссионныеТовары";
	//Иначе
	//	ТипЗапасов = "СобственныеТовары";
	//КонецЕсли;
	ТипЗапасов = "СобственныеТовары";
	//
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТабТовары = РезультатыЗапроса[0].Выгрузить();
	ТабУслуги = РезультатыЗапроса[1].Выгрузить();
	
	ОтборНоменклатурыВТаблице(КомпонентыОбмена, ТабТовары);
	ОтборНоменклатурыВТаблице(КомпонентыОбмена, ТабУслуги);
	
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка
Процедура ДобавитьПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ЗаявкаНаРасходованиеСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗаявкаНаРасходДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЗаявкиНаРасходование_ВидыРасчетовСКонтрагентами";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРасхода";
	НоваяСтрока.СвойствоФормата = "КрайнийСрокПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРасхода";
	НоваяСтрока.СвойствоФормата = "УтвержденнаяДатаПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Автор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Состояние";
	НоваяСтрока.СвойствоФормата = "Статус";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СостоянияОбъектов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ЖелательнаяФормаОплатыБезналичные";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ЖелательнаяФормаОплатыНаличные";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//РасшифровкаПлатежа
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(тШапка.БанковскийСчетКасса КАК Справочник.БанковскиеСчета) КАК БанковскийСчет,
		|	ВЫБОР
		|		КОГДА тШапка.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Наличные)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЖелательнаяФормаОплатыНаличные,
		|	ВЫБОР
		|		КОГДА тШапка.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Безналичные)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЖелательнаяФормаОплатыБезналичные
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств КАК тШапка
		|ГДЕ
		|	тШапка.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тРасшифровкаПлатежа.Сделка КАК ЗаказСсылка,
		|	тРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	тРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	тРасшифровкаПлатежа.СуммаВзаиморасчетов,
		|	тРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
		|	тРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	тРасшифровкаПлатежа.КурсВзаиморасчетов,
		|	тРасшифровкаПлатежа.КратностьВзаиморасчетов,
		|	тРасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
		|	тРасшифровкаПлатежа.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСсылка
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа КАК тРасшифровкаПлатежа
		|ГДЕ
		|	тРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыгрузитьШапку(ДанныеXDTO, РезультатыЗапроса[0].Выгрузить());
	
	РасшифровкаПлатежа = РезультатыЗапроса[1].Выгрузить();
	РасшифровкаПлатежа.Колонки.Добавить("Заказ");
	РасшифровкаПлатежа.Колонки.Добавить("ДокументРасчетов");
	Для Каждого СтрокаТЧ Из РасшифровкаПлатежа Цикл
		СтрокаТЧ.Заказ = ЗначениеВИнструкциюПКО(КомпонентыОбмена, СтрокаТЧ.ЗаказСсылка);
		СтрокаТЧ.ДокументРасчетов = ЗначениеВИнструкциюПКО(КомпонентыОбмена, СтрокаТЧ.ДокументРасчетовСсылка);
	КонецЦикла;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ИнкассоПередПрочее_Отправка
Процедура ДобавитьПКО_Документ_ИнкассоПередПрочее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ИнкассоПередПрочее_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ИнкассовоеПоручениеПереданное;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнкассоПередПрочее_Отправка_ПриОтправкеДанных";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ИнкассоПередПрочее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ИнкассовоеПоручение");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	тРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.ИнкассовоеПоручениеПереданное.РасшифровкаПлатежа КАК тРасшифровкаПлатежа
	|ГДЕ
	|	тРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ИнкассоПолучПрочее_Отправка
Процедура ДобавитьПКО_Документ_ИнкассоПолучПрочее_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ИнкассоПолучПрочее_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ИнкассовоеПоручениеПолученное;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнкассоПолучПрочее_Отправка_ПриОтправкеДанных";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ИнкассоПолучПрочее_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ИнкассовоеПоручение");
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	тРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС
	|ИЗ
	|	Документ.ИнкассовоеПоручениеПолученное.РасшифровкаПлатежа КАК тРасшифровкаПлатежа
	|ГДЕ
	|	тРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ИнкассПередРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ИнкассПередРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ИнкассПередРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ИнкассовоеПоручениеПереданное;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнкассПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Договоры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ИнкассПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ИнкассовоеПоручение");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ДатаОплаты)  Тогда
		ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	КонецЕсли;
	
	ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, "ИнкассовоеПоручениеПереданное", КомпонентыОбмена);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ИнкассовоеПоручениеПолученное;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОплаты";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "";
	ЭтоСБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ИнкассовоеПоручение");
	ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO);
	
	КонтрагентСсылка = ДанныеИБ.Контрагент;
	ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(ДанныеИБ, ДанныеXDTO, КонтрагентСсылка, КомпонентыОбмена);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_КассоваяСменаЗакрытие_Отправка
Процедура ДобавитьПКО_Документ_КассоваяСменаЗакрытие_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_КассоваяСменаЗакрытие_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КассоваяСмена;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗакрытиеКассовойСмены";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КассоваяСменаЗакрытие_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КассаККМ";
	НоваяСтрока.СвойствоФормата = "КассаККМ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КассыККМ_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерКассовойСмены";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОкончаниеКассовойСмены";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Кассир";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";

КонецПроцедуры

Процедура ПКО_Документ_КассоваяСменаЗакрытие_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_КассоваяСменаОткрытие_Отправка
Процедура ДобавитьПКО_Документ_КассоваяСменаОткрытие_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_КассоваяСменаОткрытие_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КассоваяСмена;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОткрытиеКассовойСмены";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КассаККМ";
	НоваяСтрока.СвойствоФормата = "КассаККМ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КассыККМ_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСменыККТ";
	НоваяСтрока.СвойствоФормата = "НомерКассовойСмены";

КонецПроцедуры
//} КонецОбласти
//{ Область Документ_КорректировкаДолга_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаДолга_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_КорректировкаДолга_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаДолга_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийКорректировкаДолга_Отправ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтрагентДебитор";
	НоваяСтрока.СвойствоФормата = "КонтрагентДебитор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтрагентКредитор";
	НоваяСтрока.СвойствоФормата = "КонтрагентКредитор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьДокумента";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсДокумента";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДоходов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДебиторскойЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаКредиторскойЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетДт";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетКт";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДебиторскаяЗадолженность", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДебиторскаяЗадолженность;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыДоговораВидыРасчетов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КорСчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КредиторскаяЗадолженность", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КредиторскаяЗадолженность;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыДоговораВидыРасчетов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КорСчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаДолга_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тДебиторскаяЗадолженность.СуммаРегл КАК Сумма,
	|	тДебиторскаяЗадолженность.Сумма КАК СуммаВзаиморасчетов,
	|	тДебиторскаяЗадолженность.ДоговорКонтрагента КАК Договор,
	|	тДебиторскаяЗадолженность.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	тДебиторскаяЗадолженность.КурсВзаиморасчетов,
	|	тДебиторскаяЗадолженность.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	тДебиторскаяЗадолженность.КратностьВзаиморасчетов,
	|	тДебиторскаяЗадолженность.ДоговорКонтрагента.ВидДоговора КАК ВидРасчетов,
	|	тДебиторскаяЗадолженность.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|ИЗ
	|	Документ.КорректировкаДолга.СуммыДолга КАК тДебиторскаяЗадолженность
	|ГДЕ
	|	тДебиторскаяЗадолженность.Ссылка = &Ссылка
	|	И тДебиторскаяЗадолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Дебиторская)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тКредиторскаяЗадолженность.СуммаРегл КАК Сумма,
	|	тКредиторскаяЗадолженность.Сумма КАК СуммаВзаиморасчетов,
	|	тКредиторскаяЗадолженность.ДоговорКонтрагента КАК Договор,
	|	тКредиторскаяЗадолженность.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	тКредиторскаяЗадолженность.КурсВзаиморасчетов,
	|	тКредиторскаяЗадолженность.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	тКредиторскаяЗадолженность.КратностьВзаиморасчетов,
	|	тКредиторскаяЗадолженность.ДоговорКонтрагента.ВидДоговора КАК ВидРасчетов,
	|	тКредиторскаяЗадолженность.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|ИЗ
	|	Документ.КорректировкаДолга.СуммыДолга КАК тКредиторскаяЗадолженность
	|ГДЕ
	|	тКредиторскаяЗадолженность.Ссылка = &Ссылка
	|	И тКредиторскаяЗадолженность.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Кредиторская)";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблДебиторскаяЗадолженность = Результат[0].Выгрузить();
	ТаблКредиторскаяЗадолженность = Результат[1].Выгрузить();
	
	Если ТаблДебиторскаяЗадолженность.Количество()>0 Тогда
		ТаблДебиторскаяЗадолженность.Колонки.Добавить("ДокументРасчетов");
		КешСоответствий = Неопределено;
		Для Каждого СтрокаТЧ Из ТаблДебиторскаяЗадолженность Цикл
			СтрокаТЧ.ДокументРасчетов = ПолучитьИмяПКОДляОтправкиПоСсылке(КомпонентыОбмена, СтрокаТЧ.ДокументРасчетовСКонтрагентом, "Документ.КорректировкаДолга,ДокументРасчетов", КешСоответствий);
		КонецЦикла;
		ДанныеXDTO.Вставить("ДебиторскаяЗадолженность", ТаблДебиторскаяЗадолженность);
		ДанныеXDTO.Вставить("СуммаДебиторскойЗадолженности", Окр(ТаблДебиторскаяЗадолженность.Итог("Сумма"),2));
	КонецЕсли;
	
	Если ТаблКредиторскаяЗадолженность.Количество()>0 Тогда
		ТаблКредиторскаяЗадолженность.Колонки.Добавить("ДокументРасчетов");
		КешСоответствий = Неопределено;
		Для Каждого СтрокаТЧ Из ТаблКредиторскаяЗадолженность Цикл
			СтрокаТЧ.ДокументРасчетов = ПолучитьИмяПКОДляОтправкиПоСсылке(КомпонентыОбмена, СтрокаТЧ.ДокументРасчетовСКонтрагентом, "Документ.КорректировкаДолга,ДокументРасчетов", КешСоответствий);
		КонецЦикла;
		ДанныеXDTO.Вставить("КредиторскаяЗадолженность", ТаблКредиторскаяЗадолженность);
		ДанныеXDTO.Вставить("СуммаКредиторскойЗадолженности", Окр(ТаблКредиторскаяЗадолженность.Итог("Сумма"),2));
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_КорректировкаПоступления_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаПоступления_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_КорректировкаПоступления_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КорректировкаПоступления;
	ПравилоКонвертации.ОбъектФормата = "Документ.КорректировкаПоступленияТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийИсправленияПоступленияРеализации_Отпр";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВосстановитьНДС";
	НоваяСтрока.СвойствоФормата = "ВосстановитьНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КорректироватьБУиНУ";
	НоваяСтрока.СвойствоФормата = "ОтражатьВУчете";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "AdditionalInfo";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ИсправляемыйДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕстьВДокументеПоступленияРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗакупкаПодДеятельность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТДДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхожденияДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчетаНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурнаяГруппа_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕстьВДокументеПоступленияРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СодержаниеДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	СкладДляВыгрузки = СкладДляВыгрузки(?(ДанныеИБ.ДополнительныеСвойства.Свойство("Склад"),ДанныеИБ.ДополнительныеСвойства.Склад, ДанныеИБ.СкладОрдер), КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьНалогообложениеНДСПродавца(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, "Налогообложение");
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	CASE WHEN тТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	тТовары.СерияНоменклатуры КАК Серия,
	|	ВЫРАЗИТЬ(тТовары.Количество * 1 КАК ЧИСЛО(15, 3)) КАК Количество,
	|	тТовары.КоличествоДоИзменения,
	|	тТовары.КоличествоДоКорректировки,
	|	тТовары.Сумма,
	|	тТовары.СуммаДоИзменения,
	|	тТовары.СуммаДоКорректировки,
	|	тТовары.Цена,
	|	тТовары.ЦенаДоИзменения,
	|	тТовары.ЦенаДоКорректировки,
	|	тТовары.СтавкаНДС,
	|	тТовары.СтавкаНДСДоИзменения КАК СтавкаНДСДоИзменения,
	|	тТовары.СуммаНДС,
	|	тТовары.СуммаНДСДоКорректировки,
	|	тТовары.СуммаНДСДоИзменения,
	|	тТовары.ЕстьВДокументеПоступления КАК ЕстьВДокументеПоступленияРеализации,
	|	тТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	тТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.КорректировкаПоступления.Товары КАК тТовары
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тУслуги.НомерСтроки КАК НомерСтрокиДокумента,
	|	тУслуги.Номенклатура,
	|	тУслуги.Количество,
	|	тУслуги.КоличествоДоКорректировки,
	|	тУслуги.КоличествоДоИзменения,
	|	тУслуги.Сумма,
	|	тУслуги.СуммаДоИзменения,
	|	тУслуги.СуммаДоКорректировки,
	|	тУслуги.Цена,
	|	тУслуги.ЦенаДоИзменения,
	|	тУслуги.ЦенаДоКорректировки,
	|	тУслуги.СтавкаНДС,
	|	тУслуги.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	тУслуги.СуммаНДС,
	|	тУслуги.СуммаНДСДоИзменения,
	|	тУслуги.СуммаНДСДоКорректировки,
	|	тУслуги.Содержание,
	|	тУслуги.СодержаниеДоИзменения,
	|	тУслуги.ЕстьВДокументеПоступления КАК ЕстьВДокументеПоступленияРеализации,
	|	тУслуги.Подразделение КАК ПодразделениеЗатрат,
	|	тУслуги.СтатьяЗатрат
	|ИЗ
	|	Документ.КорректировкаПоступления.Услуги КАК тУслуги
	|ГДЕ
	|	тУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокПоступления.ДокументПоступления КАК Ссылка,
	|	ДокПоступления.Номер,
	|	ДокПоступления.Дата,
	|	ДокПоступления.Организация
	|ИЗ
	|	Документ.КорректировкаПоступления КАК ДокПоступления
	|ГДЕ
	|	ДокПоступления.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокПоступленияИспр.ИсправляемыйДокументПоступления КАК Ссылка,
	|	ДокПоступленияИспр.Номер,
	|	ДокПоступленияИспр.Дата,
	|	ДокПоступленияИспр.Организация
	|ИЗ
	|	Документ.КорректировкаПоступления КАК ДокПоступленияИспр
	|ГДЕ
	|	ДокПоступленияИспр.Ссылка = &Ссылка";
	
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТабТовары = РезультатыЗапроса[0].Выгрузить();
	ОтборНоменклатурыВТаблице(КомпонентыОбмена, ТабТовары);
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	
	ТабУслуги = РезультатыЗапроса[1].Выгрузить();
	ОтборНоменклатурыВТаблице(КомпонентыОбмена, ТабУслуги);
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
	
	КорректируемыеДокументы = Новый Структура;
	КорректируемыеДокументы.Вставить("ДокументПоступления",2);
	КорректируемыеДокументы.Вставить("ИсправляемыйДокументПоступления",3);
	
	Для Каждого ТекДок Из КорректируемыеДокументы Цикл
		
		ВыборкаДанных = РезультатыЗапроса[ТекДок.Значение].Выбрать();
		Если ВыборкаДанных.Следующий() Тогда
			ДокументСсылка = ДанныеИБ[ТекДок.Ключ];
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				ТипСсылки = ТипЗнч(ДокументСсылка);
				ИмяПКО = "";
				Если ТипСсылки = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
				ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					ИмяПКО = "Документ_СчетФактураПолученный_Отправка";
				ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
					ИмяПКО = "Документ_КорректировкаПоступления_Отправка";
				ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
					ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
				ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
					ИмяПКО = "Документ_ПоступлениеДопРасходов_Отправка";
				ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
					ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
					
					//ДокументСсылка.ПоступлениеТоваровУслугВНТТ, 
					//ДокументСсылка.ДокументРасчетовСКонтрагентом, 
					//ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС, 
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ИмяПКО) Тогда
					ДанныеXDTO.Вставить(ТекДок.Ключ, Новый Структура("Значение, ИмяПКО", ДокументСсылка, ИмяПКО));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_КорректировкаРеализации_Отправка
Процедура ДобавитьПКО_Документ_КорректировкаРеализации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КорректировкаРеализации;
	ПравилоКонвертации.ОбъектФормата = "Документ.КорректировкаРеализацииТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийИсправленияПоступленияРеализации_Отпр";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КорректироватьБУиНУ";
	НоваяСтрока.СвойствоФормата = "ОтражатьВУчете";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ИсправляемыйДокументРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕстьВДокументеПоступленияРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТДДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхожденияДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДСПоРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДоговорСПринципалом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕстьВДокументеПоступленияРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Принципал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СодержаниеДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипУслуги";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	CASE WHEN тТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	тТовары.СерияНоменклатуры КАК Серия,
	|	ВЫРАЗИТЬ(тТовары.Количество * 1 КАК ЧИСЛО(15, 3)) КАК Количество,
	|	тТовары.КоличествоДоИзменения,
	|	тТовары.КоличествоДоКорректировки,
	|	тТовары.Сумма,
	|	тТовары.СуммаДоИзменения,
	|	тТовары.СуммаДоКорректировки,
	|	тТовары.Цена,
	|	тТовары.ЦенаДоИзменения,
	|	тТовары.ЦенаДоКорректировки,
	|	тТовары.СтавкаНДС,
	|	тТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	тТовары.СуммаНДС,
	|	тТовары.СуммаНДСДоКорректировки,
	|	тТовары.СуммаНДСДоИзменения,
	|	тТовары.ЕстьВДокументеРеализации КАК ЕстьВДокументеПоступленияРеализации,
	|	тТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	тТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТДДоИзменения,
	|	тТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	тТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК тТовары
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тУслуги.НомерСтроки КАК НомерСтрокиДокумента,
	|	тУслуги.Номенклатура,
	|	тУслуги.Количество,
	|	тУслуги.КоличествоДоКорректировки,
	|	тУслуги.КоличествоДоИзменения,
	|	тУслуги.Сумма,
	|	тУслуги.СуммаДоИзменения,
	|	тУслуги.СуммаДоКорректировки,
	|	тУслуги.Цена,
	|	тУслуги.ЦенаДоИзменения,
	|	тУслуги.ЦенаДоКорректировки,
	|	тУслуги.СтавкаНДС,
	|	тУслуги.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	тУслуги.СуммаНДС,
	|	тУслуги.СуммаНДСДоИзменения,
	|	тУслуги.СуммаНДСДоКорректировки,
	|	тУслуги.Содержание,
	|	тУслуги.СодержаниеДоИзменения,
	|	тУслуги.ЕстьВДокументеРеализации КАК ЕстьВДокументеПоступленияРеализации
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК тУслуги
	|ГДЕ
	|	тУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаРеализации.ДокументРеализации КАК Ссылка,
	|	КорректировкаРеализации.Номер,
	|	КорректировкаРеализации.Дата,
	|	КорректировкаРеализации.Организация
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаРеализации.ИсправляемыйДокументРеализации КАК Ссылка,
	|	КорректировкаРеализации.Номер,
	|	КорректировкаРеализации.Дата,
	|	КорректировкаРеализации.Организация
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &Ссылка";
	
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТабТовары = РезультатыЗапроса[0].Выгрузить();
	ОтборНоменклатурыВТаблице(КомпонентыОбмена, ТабТовары);
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	
	ТабУслуги = РезультатыЗапроса[1].Выгрузить();
	ОтборНоменклатурыВТаблице(КомпонентыОбмена, ТабУслуги);
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
	
	КорректируемыеДокументы = Новый Структура;
	КорректируемыеДокументы.Вставить("ДокументРеализации",2);
	КорректируемыеДокументы.Вставить("ИсправляемыйДокументРеализации",3);
	
	Для Каждого ТекДок Из КорректируемыеДокументы Цикл
		
		ВыборкаДанных = РезультатыЗапроса[ТекДок.Значение].Выбрать();
		Если ВыборкаДанных.Следующий() Тогда
			Если ЗначениеЗаполнено(ДанныеИБ[ТекДок.Ключ]) Тогда
				СтруктураКлючевыеСвойства = Новый Структура("Дата, Номер, Ссылка, Организация");
				ТипСсылки = ТипЗнч(ДанныеИБ[ТекДок.Ключ]);
				ИмяПКО = "";
				Если ТипСсылки = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
				ИначеЕсли ТипСсылки = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
					ИмяПКО = "Документ_СчетФактураВыданный_Отправка";
				ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
				ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
					ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
				ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
					ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
					
					//ДокументСсылка.ДокументРасчетовСКонтрагентом, 
					//ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ, 
					//ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС, 
					//ДокументСсылка.ОтчетКомитентуОПродажах, 
				КонецЕсли;
				
				Если ИмяПКО <> "" Тогда
					ЗаполнитьЗначенияСвойств(СтруктураКлючевыеСвойства, ВыборкаДанных);
					ДанныеXDTO.Вставить(ТекДок.Ключ, Новый Структура("Значение, ИмяПКО", СтруктураКлючевыеСвойства, ИмяПКО));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОперацияПоПлатежнойКарте_Отправка
Процедура ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОперацияПоПлатежнойКарте_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийПоПлатежнойКарте";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерЧекаККМ";
	НоваяСтрока.СвойствоФормата = "НомерЧекаККМ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Эквайрер";
	НоваяСтрока.СвойствоФормата = "Эквайрер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерКарты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ЭквайринговыйТерминал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЭквайринговыеТерминалы_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество()>1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Шапка.ДоговорЭквайринга.Код КАК НомерКарты,
	|	Шапка.ДоговорЭквайринга.Наименование,
	|	Шапка.ДоговорЭквайринга.Эквайрер,
	|	Шапка.ДоговорЭквайринга.Эквайрер.Наименование,
	|	Шапка.ДоговорЭквайринга.ДоговорВзаиморасчетов,
	|	Шапка.ВидОплаты.Наименование,
	|	Шапка.ДоговорЭквайринга КАК ЭквайринговыйТерминал
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.Сделка ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА РасшифровкаПлатежа.Сделка
	|		КОГДА РасшифровкаПлатежа.Сделка ССЫЛКА Документ.ЗаказПоставщику
	|			ТОГДА РасшифровкаПлатежа.Сделка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗаказСсылка,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	РасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежа.СуммаНДС,
	|	РасшифровкаПлатежа.СтавкаНДС,
	|	РасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	|	РасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежа.КурсВзаиморасчетов,
	|	РасшифровкаПлатежа.КратностьВзаиморасчетов,
	|	РасшифровкаПлатежа.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	РасшифровкаПлатежа.ДокументРасчетовСКонтрагентом
	|ИЗ
	|	Документ.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеШапка = РезультатыЗапроса[0].Выбрать();
	ДанныеШапка.Следующий();
	
	ДанныеXDTO.Вставить("НомерКарты",  ДанныеШапка.НомерКарты);
	Если ЗначениеЗаполнено(ДанныеШапка.ЭквайринговыйТерминал) Тогда
		ДанныеXDTO.Вставить("ЭквайринговыйТерминал",  ДанныеШапка.ЭквайринговыйТерминал);
	КонецЕсли;
	
	РасшифровкаПлатежа = РезультатыЗапроса[1].Выгрузить();
	РасшифровкаПлатежа.Колонки.Добавить("Заказ");
	РасшифровкаПлатежа.Колонки.Добавить("ДокументРасчетов");
	Для Каждого СтрокаТЧ Из РасшифровкаПлатежа Цикл
		СтрокаТЧ.Заказ = ЗначениеВИнструкциюПКО(КомпонентыОбмена, СтрокаТЧ.ЗаказСсылка);
		СтрокаТЧ.ДокументРасчетов = ЗначениеВИнструкциюПКО(КомпонентыОбмена, СтрокаТЧ.ДокументРасчетовСКонтрагентом);
	КонецЦикла;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДоговорЭквайринга) Тогда
		ДоговорЭквайринга = Новый Структура;
		ДоговорЭквайринга.Вставить("Ссылка", Строка(ДанныеИБ.ДоговорЭквайринга.УникальныйИдентификатор()));
		ДоговорЭквайринга.Вставить("Наименование", ДанныеШапка.ДоговорЭквайрингаНаименование);
		ДоговорЭквайринга.Вставить("ДоговорВзаиморасчетов", Строка(ДанныеШапка.ДоговорЭквайрингаДоговорВзаиморасчетов.УникальныйИдентификатор()));
		AdditionalInfoВставить(ДанныеXDTO, "ДоговорЭквайринга", ДоговорЭквайринга);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеИБ.ДоговорВзаиморасчетовЭквайрера) Тогда
		AdditionalInfoВставить(ДанныеXDTO, "ДоговорВзаиморасчетовЭквайрера", Строка(ДанныеИБ.ДоговорВзаиморасчетовЭквайрера.УникальныйИдентификатор()));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеИБ.ВидОплаты) Тогда
		AdditionalInfoВставить(ДанныеXDTO, "ВидОплаты", Строка(ДанныеИБ.ВидОплаты.УникальныйИдентификатор()));
	КонецЕсли;
	AdditionalInfoВставить(ДанныеXDTO, "ВидОплатыНаименование", ДанныеШапка.ВидОплатыНаименование);
	AdditionalInfoВставить(ДанныеXDTO, "ПроцентТорговойУступки", ДанныеИБ.ПроцентТорговойУступки);
	AdditionalInfoВставить(ДанныеXDTO, "СуммаТорговойУступки", ДанныеИБ.СуммаТорговойУступки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦенНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьяДоходов_ИзСтруктуры";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	СтруктураДанныеСтатьяДоходов = Новый Структура;
	//Если НЕ ЗначениеЗаполнено(ДанныеИБ.ИнвентаризацияТоваровНаСкладе) Тогда
	//	СтруктураДанныеСтатьяДоходов.Вставить("Наименование", "Оприходование излишков");
	//	СтруктураДанныеСтатьяДоходов.Вставить("КодВПрограмме", "ОприходованиеИзлишков");
	//Иначе
	//	СтруктураДанныеСтатьяДоходов.Вставить("Наименование", "Прочие внереализационные доходы и расходы");
		СтруктураДанныеСтатьяДоходов.Вставить("Наименование", "Прочие внереализационные доходы (расходы)");
		СтруктураДанныеСтатьяДоходов.Вставить("КодВПрограмме", "ПрочиеВнереализационныеДоходыРасходы");
	//КонецЕсли;
	
	Инструкция = Новый Структура(
		"Значение, ИмяПКО",
		СтруктураДанныеСтатьяДоходов,
		"Справочник_СтатьяДоходов_ИзСтруктуры");
	
	ДанныеXDTO.Вставить("СтатьяДоходов", Инструкция);
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	тТовары.Количество КАК Количество,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	тТовары.СерияНоменклатуры КАК Серия,
	|	ВЫБОР
	|		КОГДА &ПересчитатьЦенуРегл
	|			ТОГДА ВЫБОР
	|					КОГДА тТовары.Количество = 0
	|						ТОГДА 0
	|					ИНАЧЕ ВЫРАЗИТЬ(тТовары.СуммаРегл / тТовары.Количество / тТовары.Коэффициент КАК ЧИСЛО(15, 2))
	|				КОНЕЦ
	|		ИНАЧЕ тТовары.Цена
	|	КОНЕЦ КАК Цена,
	|	тТовары.СуммаРегл КАК Сумма,
	|	тТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	тТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов
	|ИЗ
	|	Документ.ОприходованиеТоваров.Товары КАК тТовары
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДанныеИБ.Ссылка.Дата);
	
	ВалютаДокумента = ДанныеИБ.ТипЦен.ВалютаЦены;
	Запрос.УстановитьПараметр("ПересчитатьЦенуРегл", НЕ Константы.ВалютаРегламентированногоУчета.Получить()=ВалютаДокумента);
	
	//
	//ТипЗапасов = "КомиссионныеТовары";
	ТипЗапасов = "СобственныеТовары";
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиБезналичныхДенежныхСредств_Отправ
Процедура ДобавитьПКО_Документ_ОстаткиБезналичныхДенежныхСредств_Отправ(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиБезналичныхДенежныхСредств_Отправ";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиБезналичныхДенежныхСредств";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_Отправ_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДенежныеСредства", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДенежныеСредства;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидБанковскогоСчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ИдентификаторСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_Отправ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ДенежныеСредства", ДанныеИБ.ДенежныеСредства);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьСвязанныеСсылки Тогда
		ПОД_БанковскийСчет = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_БанковскиеСчета_Отправка", "Имя");
		Для Каждого СтрокаТЧ Из ДанныеИБ.ДенежныеСредства Цикл
			ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтрокаТЧ.БанковскийСчет, ПОД_БанковскийСчет);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиНаличныхДенежныхСредств_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиНаличныхДенежныхСредств_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиНаличныхДенежныхСредств_Отправка";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиНаличныхДенежныхСредств";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДенежныеСредства", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДенежныеСредства;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ИдентификаторСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиНаличныхДенежныхСредств_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Для каждого СтрокаТЧ Из ДанныеИБ.ДенежныеСредства Цикл
		Если ТипЗнч(СтрокаТЧ.Касса)=Тип("Структура") 
			И НЕ СтрокаТЧ.Касса.Свойство("ИмяПКО") Тогда
			СтрокаТЧ.Касса = Новый Структура("Значение,ИмяПКО",СтрокаТЧ.Касса,"Справочник_КассыИзСтруктуры_Отправка");
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ДенежныеСредства", ДанныеИБ.ДенежныеСредства);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ
Процедура ДобавитьПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиРасчетовСПокупателямиАвансы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьСвязанныеСсылки Тогда
		ПОД_Организация = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Организации", "Имя");
		ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.Организация, ПОД_Организация);
		ПОД_Контрагент = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Контрагенты", "Имя");
		ПОД_Договор = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ДоговорыКонтрагентов", "Имя");
		Для Каждого СтрокаТЧ Из ДанныеИБ.Расчеты Цикл
			ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтрокаТЧ.Контрагент, ПОД_Контрагент);
			Если ЗначениеЗаполнено(СтрокаТЧ.Договор) Тогда
				ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтрокаТЧ.Договор, ПОД_Договор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиРасчетовСПокупателямиДолги_Отправ
Процедура ДобавитьПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Отправ(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиРасчетовСПокупателямиДолги_Отправ";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиРасчетовСПокупателямиДолги";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Отправ_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Отправ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиРасчетовСПоставщикамиАвансы_Отправ
Процедура ДобавитьПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Отправ(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиРасчетовСПоставщикамиАвансы_Отправ";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиРасчетовСПоставщикамиАвансы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Отправ_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Отправ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиРасчетовСПоставщикамиДолги_Отправ
Процедура ДобавитьПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Отправ(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиРасчетовСПоставщикамиДолги_Отправ";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиРасчетовСПоставщикамиДолги";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Отправ_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "AdditionalInfo";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Отправ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиСобственныхТМЦ_Стр_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ_Стр_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиСобственныхТМЦ_Стр_Отправка";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиСобственныхТМЦ_Стр_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ТМЦ", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ТМЦ;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ИдентификаторСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Качество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетФактура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураПолученный_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиСобственныхТМЦ_Стр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТМЦ", ДанныеИБ.ТМЦ);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьСвязанныеСсылки Тогда
		ПОД_Номенклатура = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Номенклатура_Отправка", "Имя");
		ПОД_Характеристика = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ХарактеристикиНоменклатуры", "Имя");
		ПОД_Упаковка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Упаковки_Отправка", "Имя");
		Для Каждого СтрокаТЧ Из ДанныеИБ.ТМЦ Цикл
			ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтрокаТЧ.Номенклатура, ПОД_Номенклатура);
			Если ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда
				ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтрокаТЧ.Характеристика, ПОД_Характеристика);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
				ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтрокаТЧ.Упаковка, ПОД_Упаковка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ
Процедура ДобавитьПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ИдентификаторСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ТМЦ);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьСвязанныеСсылки Тогда
		ПОД_Номенклатура = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Номенклатура_Отправка", "Имя");
		ПОД_Характеристика = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ХарактеристикиНоменклатуры", "Имя");
		ПОД_Упаковка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Упаковки_Отправка", "Имя");
		Для Каждого СтрокаТЧ Из ДанныеИБ.ТМЦ Цикл
			ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтрокаТЧ.Номенклатура, ПОД_Номенклатура);
			Если ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда
				ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтрокаТЧ.Характеристика, ПОД_Характеристика);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
				ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтрокаТЧ.Упаковка, ПОД_Упаковка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка
Процедура ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Договор";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ИдентификаторСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.ТМЦ);
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьСвязанныеСсылки Тогда
		ПОД_Номенклатура = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Номенклатура_Отправка", "Имя");
		ПОД_Характеристика = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ХарактеристикиНоменклатуры", "Имя");
		ПОД_Упаковка = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Упаковки_Отправка", "Имя");
		Для Каждого СтрокаТЧ Из ДанныеИБ.ТМЦ Цикл
			ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтрокаТЧ.Номенклатура, ПОД_Номенклатура);
			Если ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда
				ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтрокаТЧ.Характеристика, ПОД_Характеристика);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
				ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтрокаТЧ.Упаковка, ПОД_Упаковка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОтчетКомиссионера_Отправка
Процедура ДобавитьПКО_Документ_ОтчетКомиссионера_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетКомиссионераОПродажах;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетКомиссионера";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПроцентКомиссионногоВознаграждения";
	НоваяСтрока.СвойствоФормата = "ПроцентКомиссионногоВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДСВознаграждения";
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВознаграждения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяЗатрат";
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВознаграждения";
	НоваяСтрока.СвойствоФормата = "СуммаВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УдержатьКомиссионноеВознаграждение";
	НоваяСтрока.СвойствоФормата = "УдержатьКомиссионноеВознаграждение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовЗаПосредническиеУслуги";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Покупатели", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Покупатели;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВыставленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КлючСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Покупатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетФактура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураВыданный_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КлючСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПередачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДСПоРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаПередачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Контрагент") И ВерсияФорматаСравнить(КомпонентыОбмена, "1.6", "=") Тогда
		ДанныеXDTO.Вставить("Контрагент", ДанныеXDTO.КлючевыеСвойства.Контрагент);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Шапка.Организация.ОсновнойБанковскийСчет КАК БанковскийСчетОрганизации,
	|	Шапка.Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств КАК БанковскийСчетОрганизацииВалюта,
	|	Шапка.Контрагент.ОсновнойБанковскийСчет КАК БанковскийСчетКонтрагента,
	|	Шапка.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств КАК БанковскийСчетКонтрагентаВалюта
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	тТовары.СерияНоменклатуры КАК Серия,
	|	CASE WHEN тТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(тТовары.Количество * тТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
	|	тТовары.Сумма КАК Сумма,
	|	тТовары.Цена КАК Цена,
	|	тТовары.Цена КАК ЦенаЗаУпаковку,
	|	тТовары.Количество КАК КоличествоУпаковок,
	|	тТовары.СтавкаНДС КАК СтавкаНДС,
	|	тТовары.СуммаНДС КАК СуммаНДС,
	|	&ТипЗапасов КАК ТипЗапасов,
	|	тТовары.ЦенаПередачи КАК ЦенаПередачи,
	|	тТовары.СуммаПередачи КАК СуммаПередачи,
	|	тТовары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	тТовары.СуммаНДСВознаграждения КАК СуммаНДСВознаграждения,
	|	тТовары.КлючСтроки + 1 КАК КлючСтроки,
	|	тТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	тТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	тТовары.Ссылка,
	|	тТовары.Ссылка.Организация КАК Организация,
	|	тТовары.Ссылка.Контрагент КАК Покупатель,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Покупатель_Исходный,
	|	НАЧАЛОПЕРИОДА(тТовары.Ссылка.Дата, ДЕНЬ) КАК ДатаСФ,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСФ_Исходная,
	|	тТовары.Ссылка.ДатаВходящегоДокумента КАК НомерСФ,
	|	тТовары.СчетУчетаБУ.Код КАК СчетУчета,
	|	тТовары.СчетДоходовБУ.Код КАК СчетДоходов,
	|	тТовары.СчетРасходовБУ.Код КАК СчетРасходов
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Товары КАК тТовары
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка
	|	И тТовары.Количество > 0
	|	И НЕ тТовары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тПокупатели.КлючСтроки + 1 КАК КлючСтроки,
	|	тПокупатели.Покупатель,
	|	тПокупатели.ВыставленСФ,
	|	тПокупатели.СчетФактура
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК тПокупатели
	|ГДЕ
	|	тПокупатели.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тПогашениеЗадолженности.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	тПогашениеЗадолженности.СуммаВзаиморасчетов КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.ДокументыРасчетовСКонтрагентом КАК тПогашениеЗадолженности
	|ГДЕ
	|	тПогашениеЗадолженности.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Если ДанныеИБ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ТипЗапасов = "КомиссионныеТовары";
	Иначе
		ТипЗапасов = "СобственныеТовары";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);
	
	Результат = Запрос.ВыполнитьПакет();
	
	//{ Шапка 
	ВыборкаШапка = Результат[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	Если ЗначениеЗаполнено(ВыборкаШапка.БанковскийСчетОрганизации) И ДанныеИБ.ВалютаДокумента=ВыборкаШапка.БанковскийСчетОрганизацииВалюта Тогда
		ДанныеXDTO.Вставить("БанковскийСчетОрганизации", ВыборкаШапка.БанковскийСчетОрганизации);
	КонецЕсли;	
	Если ЗначениеЗаполнено(ВыборкаШапка.БанковскийСчетКонтрагента) И ДанныеИБ.ВалютаДокумента=ВыборкаШапка.БанковскийСчетКонтрагентаВалюта Тогда
		ДанныеXDTO.Вставить("БанковскийСчетКонтрагента", ВыборкаШапка.БанковскийСчетКонтрагента);
	КонецЕсли;	
	//}
	
	ДанныеXDTO.Вставить("Товары", Результат[1].Выгрузить());
	ДанныеXDTO.Вставить("Покупатели", Результат[2].Выгрузить());
	
	ВыгрузитьПогашениеЗадолженности(Результат[3].Выгрузить(), ДанныеXDTO);
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОтчетКомитенту_Отправка
Процедура ДобавитьПКО_Документ_ОтчетКомитенту_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетКомитентуОПродажах;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПроцентКомиссионногоВознаграждения";
	НоваяСтрока.СвойствоФормата = "ПроцентКомиссионногоВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособРасчетаКомиссионногоВознаграждения";
	НоваяСтрока.СвойствоФормата = "СпособРасчетаКомиссионногоВознаграждения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СпособыРасчетаКомВознагр";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДСВознаграждения";
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВознаграждения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВознаграждения";
	НоваяСтрока.СвойствоФормата = "СуммаВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УдержатьКомиссионноеВознаграждение";
	НоваяСтрока.СвойствоФормата = "УдержатьКомиссионноеВознаграждение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДСПоРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Покупатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДСВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетФактураВыданныйПокупателю";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураВыданный_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тШапка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	тШапка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК тШапка
	|ГДЕ
	|	тШапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	тТовары.СерияНоменклатуры КАК Серия,
	|	CASE WHEN тТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(тТовары.Количество * тТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
	|	тТовары.Сумма КАК Сумма,
	|	тТовары.Цена КАК Цена,
	|	тТовары.Количество КАК КоличествоУпаковок,
	|	тТовары.ЦенаПоступления КАК ЦенаПоступления,
	|	тТовары.СуммаПоступления КАК СуммаПоступления,
	|	тТовары.СуммаВознаграждения КАК СуммаВознаграждения,
	|	тТовары.СуммаНДСВознаграждения КАК СуммаНДСВознаграждения,
	|	тТовары.ДатаРеализации КАК ДатаРеализации,
	|	тТовары.Покупатель КАК Покупатель
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.Товары КАК тТовары
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	тПогашениеЗадолженности.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	тПогашениеЗадолженности.СуммаВзаиморасчетов КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах.ДокументыРасчетовСКонтрагентом КАК тПогашениеЗадолженности
	|ГДЕ
	|	тПогашениеЗадолженности.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблШапка = РезультатыЗапроса[0].Выгрузить();
	ВыгрузитьШапку(ДанныеXDTO, ТаблШапка);
	
	ДанныеXDTO.Вставить("Товары", РезультатыЗапроса[1].Выгрузить());
	
	ВыгрузитьПогашениеЗадолженности(РезультатыЗапроса[2].Выгрузить(), ДанныеXDTO);
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОтчетОРозничныхПродажах_Отправка
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КассаККМ";
	НоваяСтрока.СвойствоФормата = "КассаККМ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КассыККМ_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦенНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "УчетВыручкиВОперационнойКассе";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаБанковскимиКредитами", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаБанковскимиКредитами;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаОплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаПлатежнымиКартами", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаПлатежнымиКартами;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКарты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерКарты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаОплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Эквайрер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЭквайринговыйТерминал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЭквайринговыеТерминалы_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаСертификатами", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаСертификатами;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "МагнитныйКод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СерийныйНомер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ТоварыПродажа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ТоварыПродажа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПроцентСкидки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаСкидки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаСУчетомСкидки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДСПоРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДоговорСПринципалом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Принципал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьСклад(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена);
	ДанныеXDTO.Вставить("Налогообложение", ?(ДанныеИБ.УчитыватьНДС,"ПродажаОблагаетсяНДС","ПродажаНеОблагаетсяНДС"));
	ДанныеXDTO.Вставить("УчетВыручкиВОперационнойКассе", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тШапка.ТипЦен.ВалютаЦены КАК ВалютаТипаЦен,
	|	тШапка.ДоговорВзаиморасчетовЭквайрера.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	тШапка.Склад.ТипЦенРозничнойТорговли.ВалютаЦены КАК ВалютаСклада
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК тШапка
	|ГДЕ
	|	тШапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыУслуги.НомерСтроки КАК НомерСтрокиДокумента,
	|	втТоварыУслуги.Номенклатура КАК Номенклатура,
	|	втТоварыУслуги.ХарактеристикаНоменклатуры КАК Характеристика,
	|	втТоварыУслуги.СерияНоменклатуры КАК СерияНоменклатуры,
	|	втТоварыУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втТоварыУслуги.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаПоКлассификатору,
	|	ВЫРАЗИТЬ(втТоварыУслуги.Количество * втТоварыУслуги.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
	|	втТоварыУслуги.Количество КАК КоличествоУпаковок,
	|	втТоварыУслуги.Сумма КАК Сумма,
	|	втТоварыУслуги.Цена КАК Цена,
	|	втТоварыУслуги.СтавкаНДС КАК СтавкаНДС,
	|	втТоварыУслуги.СуммаНДС КАК СуммаНДС,
	|	втТоварыУслуги.Номенклатура.НаименованиеПолное КАК Содержание,
	|	втТоварыУслуги.ПроцентСкидкиНаценки + втТоварыУслуги.ПроцентАвтоматическихСкидок КАК ПроцентСкидки,
	|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов,
	|	втТоварыУслуги.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	втТоварыУслуги.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	втТоварыУслуги.Номенклатура.Услуга КАК Услуга
	|ПОМЕСТИТЬ втТоварыУслуги
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК втТоварыУслуги
	|ГДЕ
	|	втТоварыУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тТоварыПродажа.НомерСтрокиДокумента,
	|	тТоварыПродажа.Номенклатура,
	|	тТоварыПродажа.Характеристика,
	|	тТоварыПродажа.СерияНоменклатуры КАК Серия,
	|	CASE WHEN тТоварыПродажа.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТоварыПродажа.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТоварыПродажа.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	тТоварыПродажа.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	тТоварыПродажа.Количество,
	|	тТоварыПродажа.КоличествоУпаковок,
	|	тТоварыПродажа.Сумма,
	|	тТоварыПродажа.Цена,
	|	тТоварыПродажа.СтавкаНДС,
	|	тТоварыПродажа.СуммаНДС,
	|	тТоварыПродажа.ПроцентСкидки,
	|	тТоварыПродажа.ТипЗапасов,
	|	тТоварыПродажа.НомерГТД,
	|	тТоварыПродажа.СтранаПроисхождения
	|ИЗ
	|	втТоварыУслуги КАК тТоварыПродажа
	|ГДЕ
	|	НЕ тТоварыПродажа.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тУслуги.НомерСтрокиДокумента,
	|	тУслуги.Номенклатура,
	|	тУслуги.Количество,
	|	тУслуги.Сумма,
	|	тУслуги.Цена,
	|	тУслуги.СтавкаНДС,
	|	тУслуги.СуммаНДС,
	|	тУслуги.Содержание
	|ИЗ
	|	втТоварыУслуги КАК тУслуги
	|ГДЕ
	|	тУслуги.Услуга
	|	И НЕ тУслуги.Количество = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тчОплатаБанковскимиКредитами.Сумма КАК СуммаОплаты,
	|	тчОплатаБанковскимиКредитами.БанкКредитор.ОсновнойБанковскийСчет.Банк КАК Банк
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаБанковскимиКредитами КАК тчОплатаБанковскимиКредитами
	|ГДЕ
	|	тчОплатаБанковскимиКредитами.Ссылка = &Ссылка
	|	И НЕ тчОплатаБанковскимиКредитами.Сумма = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	взОплатаПлатежнымиКартами.СуммаОплаты,
	|	ПРЕДСТАВЛЕНИЕ(взОплатаПлатежнымиКартами.ВидОплаты.ТипОплаты) КАК ВидКарты,
	|	взОплатаПлатежнымиКартами.ВидОплаты.Наименование КАК НомерКарты,
	|	взОплатаПлатежнымиКартами.Ссылка.Эквайрер КАК Эквайрер,
	|	взОплатаПлатежнымиКартами.Ссылка.ДоговорЭквайринга КАК ЭквайринговыйТерминал
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(тчОплатаПлатежнымиКартами.Сумма) КАК СуммаОплаты,
	|		тчОплатаПлатежнымиКартами.ВидОплаты КАК ВидОплаты,
	|		тчОплатаПлатежнымиКартами.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК тчОплатаПлатежнымиКартами
	|	ГДЕ
	|		тчОплатаПлатежнымиКартами.Ссылка = &Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		тчОплатаПлатежнымиКартами.ВидОплаты,
	|		тчОплатаПлатежнымиКартами.Ссылка) КАК взОплатаПлатежнымиКартами
	|ГДЕ
	|	НЕ взОплатаПлатежнымиКартами.СуммаОплаты = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тчОплатаСертификатами.ДисконтнаяКарта.Код КАК СерийныйНомер,
	|	ВЫБОР
	|		КОГДА тчОплатаСертификатами.ДисконтнаяКарта.ВидКарты = ЗНАЧЕНИЕ(Перечисление.ВидыИнформационныхКарт.Штриховая)
	|			ТОГДА тчОплатаСертификатами.ДисконтнаяКарта.КодКарты
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА тчОплатаСертификатами.ДисконтнаяКарта.ВидКарты = ЗНАЧЕНИЕ(Перечисление.ВидыИнформационныхКарт.Магнитная)
	|			ТОГДА тчОплатаСертификатами.ДисконтнаяКарта.КодКарты
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК МагнитныйКод,
	|	тчОплатаСертификатами.Сумма КАК Сумма
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ПродажиПоДисконтнымКартам КАК тчОплатаСертификатами
	|ГДЕ
	|	тчОплатаСертификатами.Ссылка = &Ссылка
	|	И НЕ тчОплатаСертификатами.Сумма = 0";	
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Если ДанныеИБ.ДоговорВзаиморасчетовЭквайрера.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ТипЗапасов = "КомиссионныеТовары";
	Иначе
		ТипЗапасов = "СобственныеТовары";
	КонецЕсли;
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеШапки = РезультатыЗапроса[0].Выгрузить()[0];
	Если ЗначениеЗаполнено(ДанныеШапки.ВалютаТипаЦен) Тогда
		ВалютаДокумента = ДанныеШапки.ВалютаТипаЦен;
	
	ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.ВалютаДоговора) Тогда
		ВалютаДокумента = ДанныеШапки.ВалютаДоговора;
	
	ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.ВалютаСклада) Тогда
		ВалютаДокумента = ДанныеШапки.ВалютаСклада;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	ДанныеXDTO.Вставить("Валюта", ВалютаДокумента);
	
	ДанныеXDTO.Вставить("ТоварыПродажа",              РезультатыЗапроса[2].Выгрузить());
	ДанныеXDTO.Вставить("Услуги",                     РезультатыЗапроса[3].Выгрузить());
	ДанныеXDTO.Вставить("ОплатаБанковскимиКредитами", РезультатыЗапроса[4].Выгрузить());
	ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами",    РезультатыЗапроса[5].Выгрузить());
	//ДанныеXDTO.Вставить("ОплатаСертификатами",        РезультатыЗапроса[6].Выгрузить());
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ОтчетОРозничныхПродажах15_Отправка
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах15_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетОРозничныхПродажах15_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОРозничныхПродажах15_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦенНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаБанковскимиКредитами", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаБанковскимиКредитами;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаОплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаПлатежнымиКартами", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаПлатежнымиКартами;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКарты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДоговорЭквайринга";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерКарты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаОплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Эквайрер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаСертификатами", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаСертификатами;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "МагнитныйКод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СерийныйНомер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах15_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.ТипЦен.ВалютаЦены КАК ВалютаТипаЦен,
	|	ОтчетОРозничныхПродажах.ДоговорВзаиморасчетовЭквайрера.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ОтчетОРозничныхПродажах.Склад.ТипЦенРозничнойТорговли.ВалютаЦены КАК ВалютаСклада
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тчТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тчТовары.Количество КАК Количество,
	|	тчТовары.Номенклатура КАК Номенклатура,
	|	тчТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	тчТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	тчТовары.СтавкаНДС КАК СтавкаНДС,
	|	тчТовары.Сумма КАК Сумма,
	|	тчТовары.СуммаНДС КАК СуммаНДС,
	|	тчТовары.Цена КАК Цена,
	|	тчТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	тчТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК тчТовары
	|ГДЕ
	|	тчТовары.Ссылка = &Ссылка
	|	И НЕ тчТовары.Сумма = 0
	|	И НЕ тчТовары.Цена = 0
	|	И НЕ тчТовары.Количество = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(взОплатаПлатежнымиКартами.ВидОплаты.ТипОплаты) КАК ВидКарты,
	|	взОплатаПлатежнымиКартами.Ссылка.ДоговорЭквайринга.ДоговорВзаиморасчетов КАК ДоговорЭквайринга,
	|	взОплатаПлатежнымиКартами.Ссылка.Эквайрер КАК Эквайрер,
	|	взОплатаПлатежнымиКартами.ВидОплаты.Наименование КАК НомерКарты,
	|	взОплатаПлатежнымиКартами.СуммаОплаты КАК СуммаОплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		тчОплатаПлатежнымиКартами.ВидОплаты КАК ВидОплаты,
	|		СУММА(тчОплатаПлатежнымиКартами.Сумма) КАК СуммаОплаты,
	|		тчОплатаПлатежнымиКартами.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК тчОплатаПлатежнымиКартами
	|	ГДЕ
	|		тчОплатаПлатежнымиКартами.Ссылка = &Ссылка
	|		И НЕ тчОплатаПлатежнымиКартами.Сумма = 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		тчОплатаПлатежнымиКартами.ВидОплаты,
	|		тчОплатаПлатежнымиКартами.Ссылка) КАК взОплатаПлатежнымиКартами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тчОплатаБанковскимиКредитами.Сумма КАК СуммаОплаты,
	|	тчОплатаБанковскимиКредитами.БанкКредитор.ОсновнойБанковскийСчет.Банк КАК Банк
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаБанковскимиКредитами КАК тчОплатаБанковскимиКредитами
	|ГДЕ
	|	тчОплатаБанковскимиКредитами.Ссылка = &Ссылка
	|	И НЕ тчОплатаБанковскимиКредитами.Сумма = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тчОплатаСертификатами.Сумма КАК Сумма,
	|	тчОплатаСертификатами.ДисконтнаяКарта.Код КАК СерийныйНомер,
	|	ВЫБОР
	|		КОГДА тчОплатаСертификатами.ДисконтнаяКарта.ВидКарты = ЗНАЧЕНИЕ(Перечисление.ВидыИнформационныхКарт.Штриховая)
	|			ТОГДА тчОплатаСертификатами.ДисконтнаяКарта.КодКарты
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА тчОплатаСертификатами.ДисконтнаяКарта.ВидКарты = ЗНАЧЕНИЕ(Перечисление.ВидыИнформационныхКарт.Магнитная)
	|			ТОГДА тчОплатаСертификатами.ДисконтнаяКарта.КодКарты
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК МагнитныйКод
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ПродажиПоДисконтнымКартам КАК тчОплатаСертификатами
	|ГДЕ
	|	тчОплатаСертификатами.Ссылка = &Ссылка
	|	И НЕ тчОплатаСертификатами.Сумма = 0";	
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Если ДанныеИБ.ДоговорВзаиморасчетовЭквайрера.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ТипЗапасов = "КомиссионныеТовары";
	Иначе
		ТипЗапасов = "СобственныеТовары";
	КонецЕсли;
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеШапки = РезультатыЗапроса[0].Выгрузить()[0];
	Если ЗначениеЗаполнено(ДанныеШапки.ВалютаТипаЦен) Тогда
		ВалютаДокумента = ДанныеШапки.ВалютаТипаЦен;
	
	ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.ВалютаДоговора) Тогда
		ВалютаДокумента = ДанныеШапки.ВалютаДоговора;
	
	ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.ВалютаСклада) Тогда
		ВалютаДокумента = ДанныеШапки.ВалютаСклада;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	ДанныеXDTO.Вставить("Валюта", ВалютаДокумента);
	
	ДанныеXDTO.Вставить("Товары",                     РезультатыЗапроса[1].Выгрузить());
	ДанныеXDTO.Вставить("ОплатаПлатежнымиКартами",    РезультатыЗапроса[2].Выгрузить());
	ДанныеXDTO.Вставить("ОплатаБанковскимиКредитами", РезультатыЗапроса[3].Выгрузить());
	ДанныеXDTO.Вставить("ОплатаСертификатами",        РезультатыЗапроса[4].Выгрузить());
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	ВыгрузитьРеквизитыОбъектаВAdditionalInfo(ДанныеИБ, ДанныеXDTO, , "КассаККМ");
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДСКонвертацияВалюты_Ордер_Отправка
Процедура ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Ордер_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСКонвертацияВалюты_Ордер_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСКонвертацияВалюты_Ордер_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсЦБНаДатуКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Ордер_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
	ВыгрузитьОбщиеДанныеБанковскихДокументов(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДСКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсЦБНаДатуКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		//Символ "-" проставляем искуственно если из БП загружен документ с пустым номером
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	АлгоритмКонвертации = "";
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	АлгоритмКонвертации = ?(ДанныеИБ.ВидОперации =  Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты,
		"ПоступленияОтПродажиИностраннойВалюты",
		"ПриобретениеИностраннойВалюты");
	// Расшифровка платежа
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВал");
	ТабРП.Колонки.Добавить("ВалютаКонвертации");
	ТабРП.Колонки.Добавить("КурсКонвертации");
	ТабРП.Колонки.Добавить("КратностьКонвертации");
	ТабРП.Колонки.Добавить("КурсЦБНаДатуКонвертации");
	ТабРП.Колонки.Добавить("Договор");
	СтрокаРП = ТабРП.Добавить();
	СтрокаРП.СтатьяДДС = ДанныеШапки.ПерваяСтрРП_СДДС;
	СтрокаРП.ВалютаКонвертации = ДанныеШапки.ВалютаДоговора;
	СтрокаРП.КурсКонвертации = ДанныеШапки.КурсВзаиморасчетов;
	//Сумма
	// КурсЦБНаДатуКонвертации
	//СуммаВал
	ПараметрыВалютыРег  = Новый Структура("Курс, Кратность, Валюта", 1, 1, ВалютаРегламентированногоУчета);
	Если АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты" Тогда
		СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		ПараметрыКурсаЦБНаДатуОперацииСВалютой = МодульВалютногоУчета.ПолучитьКурсВалюты(ДанныеШапки.ВалютаДоговора, ДанныеШапки.СБДС_Дата);
		ПараметрыВалютыКонв = Новый Структура("Курс, Кратность, Валюта",
			ДанныеШапки.КурсВзаиморасчетов, ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность, ДанныеШапки.ВалютаДоговора);
		СтрокаРП.СуммаВал = РаботаСКурсамиВалютКлиентСервер_ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыРег, ПараметрыВалютыКонв);
	Иначе
		СтрокаРП.СуммаВал = ДанныеИБ.СуммаДокумента;
		ПараметрыКурсаЦБНаДатуОперацииСВалютой = МодульВалютногоУчета.ПолучитьКурсВалюты(ДанныеИБ.ВалютаДокумента, ДанныеШапки.СБДС_Дата);
		ПараметрыВалютыКонв = Новый Структура("Курс, Кратность, Валюта",
			?(ДанныеИБ.КурсДокумента=Неопределено,1,ДанныеИБ.КурсДокумента), ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность, ДанныеИБ.ВалютаДокумента);
		СтрокаРП.Сумма = РаботаСКурсамиВалютКлиентСервер_ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыКонв, ПараметрыВалютыРег);
	КонецЕсли;
	СтрокаРП.КратностьКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность;
	СтрокаРП.КурсЦБНаДатуКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
	СтрокаРП.Договор = ДанныеШапки.ДоговорКонтрагента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
	ВыгрузитьОбщиеДанныеБанковскихДокументов(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДСКонвертацияВалюты_Тр_Отправка
Процедура ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Тр_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСКонвертацияВалюты_Тр_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеТребованиеВыставленное;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСКонвертацияВалюты_Тр_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсЦБНаДатуКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Тр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДСПоПлатежнымКартам_Ордер_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Ордер_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПоПлатежнымКартам_Ордер_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПоПлатежнымКартам_Ордер_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаУслуг";
	НоваяСтрока.СвойствоФормата = "СуммаУслуг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Ордер_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДСПоПлатежнымКартам_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПоПлатежнымКартам_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;	
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		//Символ "-" проставляем искуственно если из БП загружен документ с пустым номером
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	РП_ИБ = ДанныеИБ.ДополнительныеСвойства.РасшифровкаПлатежаРасширенная.Выгрузить()[0];
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("Договор");
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВзаиморасчетов");
	ТабРП.Колонки.Добавить("СуммаНДС");
	ТабРП.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРП.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРП.Колонки.Добавить("СтавкаНДС");
	
	// Однострочная расшифровка платежа
	СтрокаРП = ТабРП.Добавить();
	СтрокаРП.СтатьяДДС					= РП_ИБ.СтатьяДДС;
	СтрокаРП.Сумма						= РП_ИБ.Сумма;
	СтрокаРП.КурсВзаиморасчетов			= РП_ИБ.КурсВзаиморасчетов;
	СтрокаРП.КратностьВзаиморасчетов	= РП_ИБ.КратностьВзаиморасчетов;
	СтрокаРП.Договор					= РП_ИБ.Договор;
	СтрокаРП.СтавкаНДС					= РП_ИБ.СтавкаНДС;
	СтрокаРП.СуммаНДС					= РП_ИБ.СуммаНДС;
	СтрокаРП.СуммаВзаиморасчетов		= РП_ИБ.СуммаВзаиморасчетов;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
	ВыгрузитьОбщиеДанныеБанковскихДокументов(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДСПоПлатежнымКартам_Тр_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Тр_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПоПлатежнымКартам_Тр_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеТребованиеВыставленное;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПоПлатежнымКартам_Тр_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОтсылкиДокументов";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Тр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДСПрочееПоступление_Ордер_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Ордер_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПрочееПоступление_Ордер_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочееПоступление_Ордер_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Ордер_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДСПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		// Символ "-" проставляем искуственно если из БП загружен документ с пустым номером.
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	
	// Расшифровка платежа
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого СтрокаТЧ ИЗ ДанныеИБ.РасшифровкаПлатежа Цикл
			СтрокаРП = ТабРП.Добавить();
			СтрокаРП.Сумма = СтрокаТЧ.СуммаПлатежа;
			СтрокаРП.СтатьяДДС = СтрокаТЧ.СтатьяДвиженияДенежныхСредств;
		КонецЦикла;
	Иначе
		СтрокаРП = ТабРП.Добавить();
		СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		СтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
	ВыгрузитьОбщиеДанныеБанковскихДокументов(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДСПрочееПоступление_Тр_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Тр_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПрочееПоступление_Тр_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеТребованиеВыставленное;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочееПоступление_Тр_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОтсылкиДокументов";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Тр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДСПрочиеДоходы_Ордер_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Ордер_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПрочиеДоходы_Ордер_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Ордер_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьяДоходов_ИзСтруктуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Ордер_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДСПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьяДоходов_ИзСтруктуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Если СокрЛП(ДанныеИБ.НомерВходящегоДокумента) = "-" Тогда
		//Символ "-" проставляем искуственно если из БП загружен документ с пустым номером
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	// Расшифровка платежа
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СтатьяДоходов");
	Для Каждого СтрокаРП_ИБ Из ДанныеИБ.РасшифровкаПлатежа Цикл
		СтрокаРП = ТабРП.Добавить();
		СтрокаРП.Сумма = СтрокаРП_ИБ.СуммаПлатежа;
		СтрокаРП.СтатьяДДС = СтрокаРП_ИБ.СтатьяДвиженияДенежныхСредств;
		
		СтруктураДанныеСтатьяДоходов = Новый Структура;
		СтруктураДанныеСтатьяДоходов.Вставить("Наименование", "Прочие внереализационные доходы (расходы)");
		СтруктураДанныеСтатьяДоходов.Вставить("КодВПрограмме", "ПрочиеВнереализационныеДоходыРасходы");
		
		Инструкция = Новый Структура(
		"Значение, ИмяПКО",
		СтруктураДанныеСтатьяДоходов,
		"Справочник_СтатьяДоходов_ИзСтруктуры");
		
		СтрокаРП.СтатьяДоходов = Инструкция;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
	ВыгрузитьОбщиеДанныеБанковскихДокументов(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДСПрочиеДоходы_Тр_Отправка
Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Тр_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПрочиеДоходы_Тр_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеТребованиеВыставленное;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Тр_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОтсылкиДокументов";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьяДоходов_ИзСтруктуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Тр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДСРасчетыСКонтрагентами_Ордер_Отправка
Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Ордер_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Ордер_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерПоступлениеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Ордер_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Ордер_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеВходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;	
	Если ДанныеXDTO.Свойство("НомерВходящегоДокумента") И СокрЛП(ДанныеXDTO.НомерВходящегоДокумента) = "-" Тогда
		//Символ "-" проставляем искуственно если из БП загружен документ с пустым номером
		ДанныеXDTO.НомерВходящегоДокумента = "";
	КонецЕсли;
	
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	РасшифровкаПлатежаРасширенная = ДанныеИБ.ДополнительныеСвойства.РасшифровкаПлатежаРасширенная;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	АлгоритмКонвертации = АлгоритмВыгрузкиРасчетыСКонтрагентамиОтправка(ДанныеИБ);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентомПоступление(АлгоритмКонвертации));
	ВыгрузитьОбщиеДанныеБанковскихДокументов(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьРасшифровкуКонтрагенты_ПоступлениеДС(ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПБДСРасчетыСКонтрагентами_Тр_Отправка
Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Тр_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Тр_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеТребованиеВыставленное;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Тр_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОтсылкиДокументов";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Тр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПередачаМатериаловВПроизводство_Отправка
Процедура ДобавитьПКО_Документ_ПередачаМатериаловВПроизводство_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПередачаМатериаловВПроизводство_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ТребованиеНакладная;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПередачаМатериаловВПроизводство_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчетаНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурнаяГруппа_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказчик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеСпособаОтраженияРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПередачаМатериаловВПроизводство_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьСклад(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	CASE WHEN тТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	тТовары.СерияНоменклатуры КАК Серия,
	|	ВЫРАЗИТЬ(тТовары.Количество * 1 КАК ЧИСЛО(15, 3)) КАК Количество,
	|	тТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	тТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов
	|ИЗ
	|	Документ.ТребованиеНакладная.Материалы КАК тТовары
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТипЗапасов = "СобственныеТовары";
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);
	
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладОтправитель";
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладПолучатель";
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ВидПеремещения = ПолучитьВидПеремещения(ДанныеИБ);
	
	Если ВидПеремещения="Розничный" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПартииТоваровНаСкладах.Номенклатура,
		|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
		|	ПартииТоваровНаСкладах.СерияНоменклатуры,
		|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость,
		|	СУММА(ПартииТоваровНаСкладах.Количество) КАК Количество
		|ПОМЕСТИТЬ втСтоимость
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		|ГДЕ
		|	ПартииТоваровНаСкладах.Регистратор = &Ссылка
		|	И ПартииТоваровНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииТоваровНаСкладах.Номенклатура,
		|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
		|	ПартииТоваровНаСкладах.СерияНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	ПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
		|	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ПеремещениеТоваровТовары.СерияНоменклатуры КАК Серия,
		|	CASE WHEN ПеремещениеТоваровТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ ПеремещениеТоваровТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ ПеремещениеТоваровТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
		|	ПеремещениеТоваровТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
		|	ПеремещениеТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
		|	ПеремещениеТоваровТовары.Количество КАК Количество,
		|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втСтоимость.Количество, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(втСтоимость.Стоимость, 0) / втСтоимость.Количество КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК ЦенаВРознице,
		|	втСтоимость.Стоимость КАК СуммаВРознице,
		|	ЕСТЬNULL(взНДС.СтавкаНДС, ПеремещениеТоваровТовары.Номенклатура.СтавкаНДС) КАК СтавкаНДСВРознице
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСтоимость КАК втСтоимость
		|		ПО ПеремещениеТоваровТовары.Номенклатура = втСтоимость.Номенклатура
		|			И ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры = втСтоимость.ХарактеристикаНоменклатуры
		|			И ПеремещениеТоваровТовары.СерияНоменклатуры = втСтоимость.СерияНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НДСПартииТоваров.Номенклатура КАК Номенклатура,
		|			НДСПартииТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			НДСПартииТоваров.СерияНоменклатуры КАК СерияНоменклатуры,
		|			НДСПартииТоваров.СтавкаНДС КАК СтавкаНДС
		|		ИЗ
		|			РегистрНакопления.НДСПартииТоваров КАК НДСПартииТоваров
		|		ГДЕ
		|			НДСПартииТоваров.Регистратор = &Ссылка
		|			И НДСПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК взНДС
		|		ПО ПеремещениеТоваровТовары.Номенклатура = взНДС.Номенклатура
		|			И ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры = взНДС.ХарактеристикаНоменклатуры
		|			И ПеремещениеТоваровТовары.СерияНоменклатуры = взНДС.СерияНоменклатуры
		|ГДЕ
		|	ПеремещениеТоваровТовары.Ссылка = &Ссылка";
		
	ИначеЕсли ВидПеремещения="НТТ" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	ПеремещениеТоваровТовары.Номенклатура,
		|	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ПеремещениеТоваровТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
		|	ПеремещениеТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
		|	ПеремещениеТоваровТовары.Количество,
		|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов,
		|	ЕСТЬNULL(взНДС.СтавкаНДС, ПеремещениеТоваровТовары.Номенклатура.СтавкаНДС) КАК СтавкаНДСВРознице,
		|	ПеремещениеТоваровТовары.Цена КАК ЦенаВРознице,
		|	ВЫРАЗИТЬ(ПеремещениеТоваровТовары.Цена * ПеремещениеТоваровТовары.Количество КАК ЧИСЛО(15, 2)) КАК СуммаВРознице
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НДСПартииТоваров.Номенклатура КАК Номенклатура,
		|			НДСПартииТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			НДСПартииТоваров.СерияНоменклатуры КАК СерияНоменклатуры,
		|			НДСПартииТоваров.СтавкаНДС КАК СтавкаНДС
		|		ИЗ
		|			РегистрНакопления.НДСПартииТоваров КАК НДСПартииТоваров
		|		ГДЕ
		|			НДСПартииТоваров.Регистратор = &Ссылка
		|			И НДСПартииТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК взНДС
		|		ПО ПеремещениеТоваровТовары.Номенклатура = взНДС.Номенклатура
		|			И ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры = взНДС.ХарактеристикаНоменклатуры
		|			И ПеремещениеТоваровТовары.СерияНоменклатуры = взНДС.СерияНоменклатуры
		|ГДЕ
		|	ПеремещениеТоваровТовары.Ссылка = &Ссылка";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПеремещениеТоваровТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	ПеремещениеТоваровТовары.Номенклатура,
		|	ПеремещениеТоваровТовары.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ПеремещениеТоваровТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
		|	ПеремещениеТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
		|	ПеремещениеТоваровТовары.Количество,
		|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|ГДЕ
		|	ПеремещениеТоваровТовары.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	//ТипЗапасов = "КомиссионныеТовары";
	ТипЗапасов = "СобственныеТовары";
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
	
	//Вик 2021_03_17
	СтруктураОрдеров	=	ПолучитьДанныеПоОрдерам(ДанныеXDTO.КлючевыеСвойства.Ссылка);
	
	AdditionalInfoВставить(ДанныеXDTO, "НомерОрдераП", СтруктураОрдеров.НомерОрдераП);
	AdditionalInfoВставить(ДанныеXDTO, "ДатаОрдераП", СтруктураОрдеров.ДатаОрдераП);
	AdditionalInfoВставить(ДанныеXDTO, "НомерОрдераР", СтруктураОрдеров.НомерОрдераР);
	AdditionalInfoВставить(ДанныеXDTO, "ДатаОрдераР", СтруктураОрдеров.ДатаОрдераР);	
	//КонецВик
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПереоценкаТоваровВРознице_Отправка
Процедура ДобавитьПКО_Документ_ПереоценкаТоваровВРознице_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПереоценкаТоваровВРознице_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПереоценкаТоваровВРознице;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПереоценкаТоваровВРознице";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПереоценкаТоваровВРознице_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументУстановкаЦен";
	НоваяСтрока.СвойствоФормата = "ДокументУстановкиЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_УстановкаЦенНоменклатуры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПереоценки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРозницеСтарая";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПереоценкаТоваровВРознице_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьСклад(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	тТовары.СерияНоменклатуры КАК Серия,
	|	тТовары.Номенклатура.ЕдиницаХраненияОстатков КАК Упаковка,
	|	тТовары.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА тТовары.Количество = 0
	|				ТОГДА 1
	|			ИНАЧЕ тТовары.Количество
	|		КОНЕЦ * 1 КАК ЧИСЛО(15, 3)) КАК Количество,
	|	тТовары.Количество КАК КоличествоУпаковок,
	|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов,
	|	тТовары.ЦенаВРознице КАК ЦенаВРознице,
	|	тТовары.ЦенаВРозницеСтарая КАК ЦенаВРозницеСтарая,
	|	ВЫРАЗИТЬ((тТовары.ЦенаВРознице - тТовары.ЦенаВРозницеСтарая) * ВЫБОР
	|			КОГДА тТовары.Количество = 0
	|				ТОГДА 1
	|			ИНАЧЕ тТовары.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаПереоценки,
	|	тТовары.Номенклатура.СтавкаНДС КАК СтавкаНДСВРознице
	|ИЗ
	|	Документ.ПереоценкаТоваровВРознице.Товары КАК тТовары
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка";	
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ТипЗапасов = "СобственныеТовары";
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеXDTO.Вставить("Товары", РезультатыЗапроса[0].Выгрузить());
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПКОПолучениеНаличныхВБанке_Отправка
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПолучениеНаличныхВБанке_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ВидОперации", "ПолучениеНаличных");
	ПриОтправкеДанных_ПКОРКО(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПКОПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	
	Для Каждого Строка ИЗ ДанныеИБ.РасшифровкаПлатежа Цикл
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.СтатьяДДС         = Строка.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма             = Строка.СуммаПлатежа;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
	ПриОтправкеДанных_ПКОРКО(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПКОПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьяДоходов_ИзСтруктуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СтатьяДоходов");
	
	Для Каждого Строка ИЗ ДанныеИБ.РасшифровкаПлатежа Цикл
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.СтатьяДДС     = Строка.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма         = Строка.Сумма;
		НоваяСтрока.СтатьяДоходов = Строка.СтатьяДоходов;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
	ПриОтправкеДанных_ПКОРКО(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентСсылка = ДанныеИБ.Контрагент;
	ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.Контрагент);
	
	АлгоритмКонвертации = АлгоритмВыгрузкиРасчетыСКонтрагентамиОтправка(ДанныеИБ);
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентомПоступление(АлгоритмКонвертации));
	ВыгрузитьРасшифровкуКонтрагенты_ПоступлениеДС(ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации);
	ПриОтправкеДанных_ПКОРКО(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого Строка ИЗ ДанныеИБ.РасшифровкаПлатежа Цикл
			НоваяСтрока = ТабРасшифровка.Добавить();
			НоваяСтрока.СтатьяДДС = Строка.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Сумма = Строка.СуммаПлатежа;
		КонецЦикла;
	Иначе
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
	ПриОтправкеДанных_ПКОРКО(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПКОРозничнаяВыручка_Отправка
Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРозничнаяВыручка_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВыручкаСНТТ";
	НоваяСтрока.СвойствоФормата = "ВыручкаНТТ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Касса";
	НоваяСтрока.СвойствоФормата = "Касса";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Кассы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ККМ";
	НоваяСтрока.СвойствоФормата = "КассаККМ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КассыККМ_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерЧекаККМ";
	НоваяСтрока.СвойствоФормата = "НомерЧекаККМ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "AdditionalInfo";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";

КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", ?(ТипЗнч(ДанныеИБ.Контрагент)=Тип("СправочникСсылка.Склады"),ДанныеИБ.Контрагент,Неопределено));
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ККМ) И ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		Попытка
		    ДанныеXDTO.Вставить("КассаККМ", ДанныеИБ.ДокументОснование.КассаККМ);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ПриОтправкеДанных_ПКОРКО(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПоступлениеДопРасходов_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеДопРасходов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеДопРасходов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаДопРасходов", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаДопРасходов;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтоимостьТоваров";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЭтоДопРасходы";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА тРасшифровкаДопРасходов.Сумма = 0
	|			ТОГДА -1
	|		ИНАЧЕ тРасшифровкаДопРасходов.Сумма
	|	КОНЕЦ КАК Сумма,
	|	тРасшифровкаДопРасходов.СуммаНДС КАК СуммаНДС,
	|	тРасшифровкаДопРасходов.ДокументПартии КАК ДокументПоступления,
	|	тРасшифровкаДопРасходов.Номенклатура КАК Номенклатура,
	|	тРасшифровкаДопРасходов.Количество КАК Количество,
	|	тРасшифровкаДопРасходов.СуммаТовара КАК СтоимостьТоваров
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК тРасшифровкаДопРасходов
	|ГДЕ
	|	тРасшифровкаДопРасходов.Ссылка = &Ссылка";	
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаДопРасходов", Запрос.Выполнить().Выгрузить());
	
	ТабУслуги = Новый ТаблицаЗначений;
	ТабУслуги.Колонки.Добавить("ЭтоДопРасходы");
	ТабУслуги.Колонки.Добавить("Сумма");
	ТабУслуги.Колонки.Добавить("СуммаНДС");
	ТабУслуги.Колонки.Добавить("СтавкаНДС");
	ТабУслуги.Колонки.Добавить("Содержание");
	ТабУслуги.Колонки.Добавить("Количество");
	ТабУслуги.Колонки.Добавить("Цена");
	
	НоваяСтрока = ТабУслуги.Добавить();
	НоваяСтрока.ЭтоДопРасходы	= Истина;
	НоваяСтрока.Сумма			= ?(ДанныеИБ.Сумма=0,-1,ДанныеИБ.Сумма);
	НоваяСтрока.СуммаНДС		= ДанныеИБ.СуммаНДС;
	НоваяСтрока.СтавкаНДС		= ДанныеИБ.СтавкаНДС;
	НоваяСтрока.Содержание		= ДанныеИБ.Содержание;
	НоваяСтрока.Количество		= 1;
	НоваяСтрока.Цена    		= 0.01;
	
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ЗаказПоставщику_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗакупкаПодДеятельность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчетаНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурнаяГруппа_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//ПТУ
	
	// Склад
	СкладДляВыгрузки = СкладДляВыгрузки(?(ДанныеИБ.ДополнительныеСвойства.Свойство("Склад"),ДанныеИБ.ДополнительныеСвойства.Склад, ДанныеИБ.СкладОрдер), КомпонентыОбмена.ПараметрыКонвертации, Новый Структура("Товары",ДанныеИБ.Товары));
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьНалогообложениеНДСПродавца(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, "Налогообложение");
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	Если ЗначениеЗаполнено(ДанныеИБ.Сделка) И ТипЗнч(ДанныеИБ.Сделка)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ДанныеXDTO.Вставить("Заказ", ДанныеИБ.Сделка);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	CASE WHEN тТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	тТовары.СерияНоменклатуры КАК Серия,
	|	ВЫРАЗИТЬ(тТовары.Количество * тТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
	|	тТовары.Сумма КАК Сумма,
	|	тТовары.Цена КАК Цена,
	|	тТовары.Цена КАК ЦенаЗаУпаковку,
	|	тТовары.Количество КАК КоличествоУпаковок,
	|	тТовары.СтавкаНДС КАК СтавкаНДС,
	|	тТовары.СуммаНДС КАК СуммаНДС,
	|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов,
	|	тТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	тТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК тТовары
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	тТара.НомерСтроки,
	|	тТара.Номенклатура,
	|	NULL,
	|	тТара.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору,
	|	NULL,
	|	NULL,
	|	тТара.Количество,
	|	тТара.Сумма,
	|	тТара.Цена,
	|	тТара.Цена,
	|	тТара.Количество,
	|	тТара.Номенклатура.СтавкаНДС,
	|	0,
	|	""ВозвратнаяТара"",
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК тТара
	|ГДЕ
	|	тТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тУслуги.НомерСтроки КАК НомерСтрокиДокумента,
	|	тУслуги.Содержание КАК Содержание,
	|	тУслуги.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА тУслуги.Цена = 0
	|			ТОГДА -1
	|		ИНАЧЕ тУслуги.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА тУслуги.Сумма = 0
	|			ТОГДА -1
	|		ИНАЧЕ тУслуги.Сумма
	|	КОНЕЦ КАК Сумма,
	|	тУслуги.СтавкаНДС КАК СтавкаНДС,
	|	тУслуги.СуммаНДС КАК СуммаНДС,
	|	тУслуги.Номенклатура КАК Номенклатура,
	|	тУслуги.Подразделение КАК ПодразделениеЗатрат,
	|	тУслуги.СтатьяЗатрат КАК СтатьяЗатрат
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Услуги КАК тУслуги
	|ГДЕ
	|	тУслуги.Ссылка = &Ссылка";	
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	
	//БОЙКОВ
	//Если ДанныеИБ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	//	ТипЗапасов = "КомиссионныеТовары";
	//	ДанныеXDTO.Вставить("ВидОперации", "ПриемНаКомиссию");
	//Иначе
	//	ТипЗапасов = "СобственныеТовары";
	//КонецЕсли;
	ТипЗапасов = "СобственныеТовары";
	//
	
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТабТовары = РезультатыЗапроса[0].Выгрузить();
	//БОЙКОВ
	//Для Каждого стр из ТабТовары Цикл
	//	Если Строка(стр.ЕдиницаИзмерения) = Строка(Стр.Упаковка) Тогда
	//		Стр.Упаковка = неопределено;			
	//	КонецЕсли;
	//КонецЦикла;
	//
	ТабУслуги = РезультатыЗапроса[1].Выгрузить();
	
	ВыгрузитьХарактеристикиИзТаблицы(ТабТовары, КомпонентыОбмена);
	
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ПоступлениеТоваровУслугВНТТ_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслугВНТТ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеТоваровУслугВНТТ_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеТоваровУслугВНТТ;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ПриОтправкеДанных";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчетаНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурнаяГруппа_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЭтоДопРасходы";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьСклад(ДанныеИБ,ДанныеXDTO,КомпонентыОбмена);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Шапка.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
	//|			ТОГДА ""ПриемНаКомиссию""
	|			ТОГДА ""ПокупкаУПоставщика""
	|		КОГДА Шапка.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
	//|			ТОГДА ""ПриемНаКомиссию""
	|			ТОГДА ""ПокупкаУПоставщика""
	|		ИНАЧЕ ""ПокупкаУПоставщика""
	|	КОНЕЦ КАК ВидОперации,
	|	Шапка.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Шапка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНТТ КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	тТовары.СерияНоменклатуры КАК Серия,
	|	CASE WHEN тТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(тТовары.Количество * тТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
	|	тТовары.Сумма КАК Сумма,
	|	тТовары.Цена КАК Цена,
	|	тТовары.Цена КАК ЦенаЗаУпаковку,
	|	тТовары.Количество КАК КоличествоУпаковок,
	|	тТовары.СтавкаНДС КАК СтавкаНДС,
	|	тТовары.СуммаНДС КАК СуммаНДС,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК ТипЗапасов,
	|	тТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	тТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНТТ.Товары КАК тТовары
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	тТара.НомерСтроки,
	|	тТара.Номенклатура,
	|	NULL,
	|	NULL,
	|	тТара.Номенклатура.ЕдиницаХраненияОстатков,
	|	тТара.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору,
	|	тТара.Количество,
	|	тТара.Сумма,
	|	тТара.Цена,
	|	тТара.Цена,
	|	тТара.Количество,
	|	тТара.Номенклатура.СтавкаНДС,
	|	0,
	|	ВЫРАЗИТЬ(""ВозвратнаяТара"" КАК СТРОКА(50)),
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНТТ.ВозвратнаяТара КАК тТара
	|ГДЕ
	|	тТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тУслуги.НомерСтроки КАК НомерСтрокиДокумента,
	|	тУслуги.Содержание КАК Содержание,
	|	тУслуги.Количество КАК Количество,
	|	тУслуги.Цена КАК Цена,
	|	тУслуги.Сумма КАК Сумма,
	|	тУслуги.СтавкаНДС КАК СтавкаНДС,
	|	тУслуги.СуммаНДС КАК СуммаНДС,
	|	тУслуги.Номенклатура КАК Номенклатура,
	|	тУслуги.Подразделение КАК ПодразделениеЗатрат,
	|	тУслуги.СтатьяЗатрат КАК СтатьяЗатрат
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНТТ.Услуги КАК тУслуги
	|ГДЕ
	|	тУслуги.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента";	
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыгрузитьШапку(ДанныеXDTO, РезультатыЗапроса[0].Выгрузить());	
	ТабТовары = РезультатыЗапроса[1].Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары);
	
	ТабУслуги = РезультатыЗапроса[2].Выгрузить();
	
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьВыдана";
	НоваяСтрока.СвойствоФормата = "ДоверенностьКомуВыдана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьДата";
	НоваяСтрока.СвойствоФормата = "ДоверенностьДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьНомер";
	НоваяСтрока.СвойствоФормата = "ДоверенностьНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьЧерезКого";
	НоваяСтрока.СвойствоФормата = "ДоверенностьКомуВыдана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтпускПроизвел";
	НоваяСтрока.СвойствоФормата = "ОтпускПроизвел";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ГлавныйБухгалтер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ЗаказКлиента_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Руководитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПогашениеЗадолженности", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПогашениеЗадолженности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("СоставНабора", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.СоставНабора;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ИдентификаторСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Комплект";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ИдентификаторСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Комплект";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДоговорСПринципалом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ИдентификаторСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Принципал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипУслуги";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	//РТУ
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	ВыгрузитьСклад(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	
	Руководители = ПолучитьОтветственныеЛицаОрганизации(ДанныеИБ.Организация, ДанныеИБ.Дата, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", Руководители.ГлавныйБухгалтер);
	ДанныеXDTO.Вставить("Руководитель", Руководители.Руководитель);
	
	Если ЗначениеЗаполнено(ДанныеИБ.Сделка) И ТипЗнч(ДанныеИБ.Сделка)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ДанныеXDTO.Вставить("Заказ", ДанныеИБ.Сделка);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Шапка.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
	//|			ТОГДА ""ПередачаНаКомиссию""
	|			ТОГДА ""РеализацияКлиенту""
	|		ИНАЧЕ ""РеализацияКлиенту""
	|	КОНЕЦ КАК ВидОперации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	CASE WHEN тТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	тТовары.СерияНоменклатуры КАК Серия,
	|	ВЫРАЗИТЬ(тТовары.Количество * тТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
	|	тТовары.Сумма КАК Сумма,
	|	тТовары.Цена КАК Цена,
	|	тТовары.Цена КАК ЦенаЗаУпаковку,
	|	тТовары.Количество КАК КоличествоУпаковок,
	|	тТовары.СтавкаНДС КАК СтавкаНДС,
	|	тТовары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.НаКомиссию)
	//|			ТОГДА ВЫРАЗИТЬ(""КомиссионныеТовары"" КАК СТРОКА(18))
	|			ТОГДА ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|		ИНАЧЕ ВЫРАЗИТЬ(""СобственныеТовары"" КАК СТРОКА(18))
	|	КОНЕЦ КАК ТипЗапасов,
	|	тТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	тТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	тТовары.Номенклатура.Комплект КАК Комплект,
	|	тТовары.КлючСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК тТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО тТовары.Ссылка = ПартииТоваровНаСкладах.Регистратор
	|			И тТовары.НомерСтроки = ПартииТоваровНаСкладах.НомерСтроки
	|			И тТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	тТара.НомерСтроки,
	|	тТара.Номенклатура,
	|	NULL,
	|	NULL,
	|	тТара.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору,
	|	NULL,
	|	тТара.Количество,
	|	тТара.Сумма,
	|	тТара.Цена,
	|	тТара.Цена,
	|	тТара.Количество,
	|	тТара.Номенклатура.СтавкаНДС,
	|	0,
	|	""ВозвратнаяТара"",
	|	NULL,
	|	NULL,
	|	ЛОЖЬ,
	|	NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК тТара
	|ГДЕ
	|	тТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тУслуги.НомерСтроки КАК НомерСтрокиДокумента,
	|	тУслуги.Номенклатура КАК Номенклатура,
	|	тУслуги.Количество КАК Количество,
	|	тУслуги.Сумма КАК Сумма,
	|	тУслуги.Цена КАК Цена,
	|	тУслуги.СтавкаНДС КАК СтавкаНДС,
	|	тУслуги.СуммаНДС КАК СуммаНДС,
	|	тУслуги.Содержание КАК Содержание
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК тУслуги
	|ГДЕ
	|	тУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тСоставНабора.НомерСтроки КАК НомерСтрокиДокумента,
	|	тСоставНабора.Номенклатура КАК Номенклатура,
	|	тСоставНабора.ХарактеристикаНоменклатуры КАК Характеристика,
	|	CASE WHEN тСоставНабора.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тСоставНабора.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тСоставНабора.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	тСоставНабора.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	тСоставНабора.СерияНоменклатуры КАК Серия,
	|	тСоставНабора.Количество КАК Количество,
	|	ВЫРАЗИТЬ(тСоставНабора.Цена * тСоставНабора.Количество КАК ЧИСЛО(15, 3)) КАК Сумма,
	|	тСоставНабора.Цена КАК Цена,
	|	тСоставНабора.Цена КАК ЦенаЗаУпаковку,
	|	тСоставНабора.Количество КАК КоличествоУпаковок,
	|	тСоставНабора.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	тСоставНабора.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	тСоставНабора.Номенклатура.Комплект КАК Комплект,
	|	тСоставНабора.КлючСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.СоставНабора КАК тСоставНабора
	|ГДЕ
	|	тСоставНабора.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	тПогашениеЗадолженности.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	тПогашениеЗадолженности.СуммаВзаиморасчетов КАК Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ДокументыРасчетовСКонтрагентом КАК тПогашениеЗадолженности
	|ГДЕ
	|	тПогашениеЗадолженности.Ссылка = &Ссылка";
	
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыгрузитьШапку(ДанныеXDTO, РезультатыЗапроса[0].Выгрузить());
	
	ТабТовары = РезультатыЗапроса[1].Выгрузить();
	ТабУслуги = РезультатыЗапроса[2].Выгрузить();
	
	ВыгрузитьХарактеристикиИзТаблицы(ТабТовары, КомпонентыОбмена);
	
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	ДанныеXDTO.Вставить("Услуги", ТабУслуги);
	
	ТабСоставНабора = РезультатыЗапроса[3].Выгрузить();
	ТабСоставНабора.Колонки.Добавить("ТипЗапасов");
	ТабСоставНабора.Колонки.Добавить("СтавкаНДС");
	ТабСоставНабора.Колонки.Добавить("СуммаНДС");
	
	Для каждого СтрокаТЧ Из ТабТовары Цикл
		Если СтрокаТЧ.Комплект Тогда
			СтрокиСоставНабора = ТабСоставНабора.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки));
			СуммаНабора = 0;
			Для каждого СтрокаСоставНабора Из СтрокиСоставНабора Цикл
				Коэффициент = (100 * СтрокаСоставНабора.Сумма / СтрокаТЧ.Сумма) / 100;
				СтрокаСоставНабора.ТипЗапасов = СтрокаТЧ.ТипЗапасов;
				СтрокаСоставНабора.СтавкаНДС = СтрокаТЧ.СтавкаНДС;
				СтрокаСоставНабора.СуммаНДС = Окр(СтрокаТЧ.СуммаНДС * Коэффициент,2);
				СуммаНабора = СуммаНабора + СтрокаСоставНабора.Сумма;
			КонецЦикла;	
			Если НЕ СтрокаТЧ.Сумма=СуммаНабора И СтрокиСоставНабора.Количество()>0 Тогда
				СтрокиСоставНабора[0].Сумма = Окр(СтрокиСоставНабора[0].Сумма + СтрокаТЧ.Сумма-СуммаНабора,2);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("СоставНабора", ТабСоставНабора);
	
	ВыгрузитьПогашениеЗадолженности(РезультатыЗапроса[4].Выгрузить(), ДанныеXDTO);
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_РКОНаБанковскийСчет_Отправка
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОНаБанковскийСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ККМ";
	НоваяСтрока.СвойствоФормата = "КассаККМ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КассыККМ_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "AdditionalInfo";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";

КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "ВзносНаличными");
	
	ПриОтправкеДанных_ПКОРКО(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
	ВыгрузитьДокументВAdditionalInfo(ДанныеXDTO, "ОбъявлениеНаВзносНаличными", ДанныеИБ.ОбъявлениеНаВзносНаличными);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_РКОПрочаяВыдача_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОПрочаяВыдача_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентСсылка = ДанныеИБ.Контрагент;
	ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(ДанныеИБ, ДанныеXDTO, КонтрагентСсылка, КомпонентыОбмена);
	ПриОтправкеДанных_ПКОРКО(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_РКОПрочийРасход_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОПрочийРасход_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ККМ";
	НоваяСтрока.СвойствоФормата = "КассаККМ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КассыККМ_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "AdditionalInfo";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_ИзСтруктуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_РКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ККМ";
	НоваяСтрока.СвойствоФормата = "КассаККМ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КассыККМ_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "AdditionalInfo";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ДанныеXDTO.Вставить("ВидРасчетов", ДанныеШапки.ВидРасчетов);
	
	КонтрагентСсылка = ДанныеИБ.Контрагент;
	ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(ДанныеИБ, ДанныеXDTO, КонтрагентСсылка, КомпонентыОбмена);
	ПриОтправкеДанных_ПКОРКО(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_РКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ККМ";
	НоваяСтрока.СвойствоФормата = "КассаККМ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КассыККМ_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "AdditionalInfo";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ДанныеXDTO.Вставить("ВидРасчетов", ДанныеШапки.ВидРасчетов);
	
	КонтрагентСсылка = ДанныеИБ.Контрагент;
	ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(ДанныеИБ, ДанныеXDTO, КонтрагентСсылка, КомпонентыОбмена);
	ПриОтправкеДанных_ПКОРКО(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСПереводНаДругойСчет_Ордер_Отправка
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Ордер_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПереводНаДругойСчет_Ордер_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Ордер_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";

КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Ордер_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСПереводНаДругойСчет_Отправка
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеXDTO.Вставить("Код", ПолучитьИдентификаторПлатежа(ДанныеИБ));
	ВыгрузитьОбщиеДанныеБанковскихДокументов(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСПереводНаДругойСчет_Тр_Отправка
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Тр_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПереводНаДругойСчет_Тр_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеТребованиеПолученное;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Тр_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";

КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Тр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСПлатежиВБюджет_Ордер_Отправка
Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Ордер_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПлатежиВБюджет_Ордер_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Ордер_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательДаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательКБК";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательНомера";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательОснования";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательПериода";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательТипа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатусСоставителя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипПлатежногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Ордер_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
	
	ДанныеXDTO.Вставить("ТипПлатежногоДокумента", "ПлатежныйОрдер");
	
	ПлатежиВБюджетСтр = "СтатусСоставителя,ПоказательКБК,ОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа";
	ДанныеПБ = Новый Структура(ПлатежиВБюджетСтр);
	ДанныеПБПоУмолчанию = Новый Структура(ПлатежиВБюджетСтр, "01","00000000000000000000","00000000000","00","0000000000","000000000000000","0","00");
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) Тогда
		ДокументОбъект = ДанныеИБ.ДокументОснование.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДанныеПБ,ДокументОбъект);
	КонецЕсли;
	
	ЗаполнятьОбязательно = Истина; // ВерсияФорматаСравнить(КомпонентыОбмена, "1.3", "<");
	Для Каждого ТекЗначение Из ДанныеПБ Цикл
		ЗначениеРеквизита = ТекЗначение.Значение;
		ИмяРеквизита = ТекЗначение.Ключ;
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ДанныеXDTO.Вставить(ИмяРеквизита, ЗначениеРеквизита);
		ИначеЕсли ЗаполнятьОбязательно Тогда
			Если ДанныеXDTO.Свойство(ИмяРеквизита) И ЗначениеЗаполнено(ДанныеXDTO[ИмяРеквизита]) Тогда
			Иначе
				ДанныеXDTO.Вставить(ИмяРеквизита, ДанныеПБПоУмолчанию[ИмяРеквизита]);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСПлатежиВБюджет_Отправка
Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПлатежиВБюджет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодОКАТО";
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоказательНомера";
	НоваяСтрока.СвойствоФормата = "ПоказательНомера";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоказательОснования";
	НоваяСтрока.СвойствоФормата = "ПоказательОснования";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоказательПериода";
	НоваяСтрока.СвойствоФормата = "ПоказательПериода";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоказательТипа";
	НоваяСтрока.СвойствоФормата = "ПоказательТипа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатусСоставителя";
	НоваяСтрока.СвойствоФормата = "СтатусСоставителя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательДаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательКБК";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	Если ТипЗнч(ДанныеИБ)=Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
		ПоказательДаты = ДанныеИБ.ПоказательДаты;
		Если ЗначениеЗаполнено(ПоказательДаты) И ПоказательДаты <> "0" Тогда
			ПоказательДаты = Формат(СтроковыеФункцииКлиентСервер_СтрокаВДату(ПоказательДаты), "ДЛФ=Д");
		КонецЕсли;
		ДанныеXDTO.Вставить("ПоказательДаты", ПоказательДаты);
		ПоказательКБК = ДанныеИБ.КодБК;
		Если ПоказательКБК="0" Тогда
			ПоказательКБК="00000000000000000000";
		ИначеЕсли НЕ СтрДлина(ПоказательКБК)=20 Тогда
			ПоказательКБК="";
		КонецЕсли;
		ДанныеXDTO.Вставить("ПоказательКБК", ПоказательКБК);
		ДанныеXDTO.Вставить("Код", ПолучитьИдентификаторПлатежа(ДанныеИБ));
	КонецЕсли;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого Строка ИЗ ДанныеИБ.РасшифровкаПлатежа Цикл
			НоваяСтрока = ТабРасшифровка.Добавить();
			НоваяСтрока.СтатьяДДС = Строка.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Сумма = Строка.СуммаПлатежа;
		КонецЦикла;
	Иначе
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	КонецЕсли;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
	ВыгрузитьОбщиеДанныеБанковскихДокументов(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСПлатежиВБюджет_Тр_Отправка
Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Тр_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПлатежиВБюджет_Тр_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеТребованиеПолученное;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Тр_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательДаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательКБК";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Тр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСПрочееСписание_Ордер_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Ордер_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочееСписание_Ордер_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочееСписание_Ордер_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Ордер_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСПрочееСписание_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочееСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ДанныеXDTO.Вставить("ВидОперации", ДанныеШапки.ВидОперацииПрочее);
	ДанныеXDTO.Вставить("Код", ПолучитьИдентификаторПлатежа(ДанныеИБ));
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого Строка ИЗ ДанныеИБ.РасшифровкаПлатежа Цикл
			НоваяСтрока = ТабРасшифровка.Добавить();
			НоваяСтрока.СтатьяДДС = Строка.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Сумма = Строка.СуммаПлатежа;
		КонецЦикла;
	Иначе
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
	ВыгрузитьОбщиеДанныеБанковскихДокументов(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСПрочееСписание_Тр_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Тр_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочееСписание_Тр_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеТребованиеПолученное;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочееСписание_Тр_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Тр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСПрочиеРасходы_Ордер_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Ордер_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочиеРасходы_Ордер_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочиеРасходы_Ордер_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_ИзСтруктуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Ордер_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСПрочиеРасходы_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочиеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_ИзСтруктуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеXDTO.Вставить("Код", ПолучитьИдентификаторПлатежа(ДанныеИБ));
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("СтатьяРасходов");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	
	СтруктураДанныеСтатья = Новый Структура;
	СтруктураДанныеСтатья.Вставить("Наименование", "Прочие внереализационные доходы (расходы)");
	СтруктураДанныеСтатья.Вставить("КодВПрограмме", "ПрочиеВнереализационныеДоходыРасходы");
	
	СтатьяРасходовИнструкция = Новый Структура(
	"Значение, ИмяПКО",
	СтруктураДанныеСтатья,
	"Справочник_СтатьиРасходов_ИзСтруктуры");
	
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого Строка ИЗ ДанныеИБ.РасшифровкаПлатежа Цикл
			СтрокаРП = ТабРасшифровка.Добавить();
			СтрокаРП.СтатьяДДС = Строка.СтатьяДвиженияДенежныхСредств;
			СтрокаРП.Сумма = Строка.СуммаПлатежа;
			СтрокаРП.СтатьяРасходов = СтатьяРасходовИнструкция;
		КонецЦикла;
	Иначе
		СтрокаРП = ТабРасшифровка.Добавить();
		СтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		СтрокаРП.СтатьяРасходов = СтатьяРасходовИнструкция;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
	ВыгрузитьОбщиеДанныеБанковскихДокументов(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСПрочиеРасходы_Тр_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Тр_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочиеРасходы_Тр_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеТребованиеПолученное;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочиеРасходы_Тр_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_ИзСтруктуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Тр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСРасчетыСКонтрагентами_Ордер_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Ордер_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Ордер_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Ордер_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Ордер_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//Вик 2021_03_29
	//В случае если не заполнен бс контрагента - проставляем бс организации
	Попытка
		Если ДанныеXDTO.БанковскийСчет = Неопределено тогда
			Если Найти(НРег(ДанныеИБ.НазначениеПлатежа),"заработная плата по реестру") тогда
				ДанныеXDTO.БанковскийСчет = ДанныеXDTO.БанковскийСчетОрганизации;	
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	//КонецВик
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ДанныеXDTO.Вставить("ВидРасчетов", ДанныеШапки.ВидРасчетов);
	КонтрагентСсылка = ДанныеИБ.Контрагент;
	
	ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(ДанныеИБ, ДанныеXDTO, КонтрагентСсылка, КомпонентыОбмена);
	ВыгрузитьОбщиеДанныеБанковскихДокументов(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСРасчетыСКонтрагентами_Тр_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Тр_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Тр_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеТребованиеПолученное;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Тр_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Тр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСРасчетыССотрудниками_Ордер_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Ордер_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Ордер_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежныйОрдерСписаниеДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Ордер_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Ордер_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеПоручениеИсходящее;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO);
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	ДанныеXDTO.Вставить("ВидРасчетов", ДанныеШапки.ВидРасчетов);
	ДанныеXDTO.Вставить("Код", ПолучитьИдентификаторПлатежа(ДанныеИБ));
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого Строка Из ДанныеИБ.РасшифровкаПлатежа Цикл
			НоваяСтрока = ТабРасшифровка.Добавить();
			НоваяСтрока.СтатьяДДС = Строка.СтатьяДвиженияДенежныхСредств;
			НоваяСтрока.Сумма = Строка.СуммаПлатежа;
		КонецЦикла;
	Иначе
		НоваяСтрока = ТабРасшифровка.Добавить();
		НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	КонецЕсли;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
	ВыгрузитьОбщиеДанныеБанковскихДокументов(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СБДСРасчетыССотрудниками_Тр_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Тр_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Тр_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПлатежноеТребованиеПолученное;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Тр_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежа";
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОчередностьПлатежа";
	НоваяСтрока.СвойствоФормата = "Очередность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Тр_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СборкаТоваров_Отправка
Процедура ДобавитьПКО_Документ_СборкаТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СборкаТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КомплектацияНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СборкаТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийСборкаТоваров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СерияНоменклатуры";
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ХарактеристикаНоменклатуры";
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетСписанияНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДоляСтоимости";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СборкаТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ДанныеXDTO.Вставить("Количество", ДанныеИБ.Количество * ДанныеИБ.Коэффициент);
	ДанныеXDTO.Вставить("КоличествоУпаковок", ДанныеXDTO.Количество);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	вШапка.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.КомплектацияНоменклатуры КАК вШапка
	|ГДЕ
	|	вШапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	CASE WHEN тТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	тТовары.СерияНоменклатуры КАК Серия,
	|	ВЫРАЗИТЬ(тТовары.Коэффициент * тТовары.Количество * 1 КАК ЧИСЛО(15, 3)) КАК Количество,
	|	тТовары.ДоляСтоимости КАК ДоляСтоимости,
	|	тТовары.Количество КАК КоличествоУпаковок,
	|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов,
	|	тТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	тТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.КомплектацияНоменклатуры.Комплектующие КАК тТовары
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	//ТипЗапасов = "КомиссионныеТовары";
	ТипЗапасов = "СобственныеТовары";
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	ДанныеXDTO.Вставить("ТипЗапасов", ТипЗапасов);
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = Результат[0].Выбрать();
	ВыборкаШапка.Следующий();
	ДанныеXDTO.Вставить("ЕдиницаИзмерения", ВыборкаШапка.ЕдиницаИзмерения);
	
	ДанныеXDTO.Вставить("Товары", Результат[1].Выгрузить());
	ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СписаниеНедостач_Отправка
Процедура ДобавитьПКО_Документ_СписаниеНедостач_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СписаниеНедостач_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.СписаниеНедостач";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	CASE WHEN тТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
	|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	тТовары.СерияНоменклатуры КАК Серия,
	|	ВЫРАЗИТЬ(тТовары.Количество * тТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
	|	тТовары.Сумма КАК Сумма,
	|	тТовары.Цена КАК Цена,
	|	тТовары.Цена КАК ЦенаЗаУпаковку,
	|	тТовары.Количество КАК КоличествоУпаковок,
	|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов,
	|	тТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	тТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК тТовары
	|ГДЕ
	|	тТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	тТара.НомерСтроки,
	|	тТара.Номенклатура,
	|	NULL,
	|	NULL,
	|	тТара.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору,
	|	NULL,
	|	тТара.Количество,
	|	0,
	|	0,
	|	0,
	|	тТара.Количество,
	|	""ВозвратнаяТара"",
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.СписаниеТоваров.ВозвратнаяТара КАК тТара
	|ГДЕ
	|	тТара.Ссылка = &Ссылка";
	
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	//ТипЗапасов = "КомиссионныеТовары";
	ТипЗапасов = "СобственныеТовары";
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);
	ДанныеXDTO.Вставить("Товары", Запрос.Выполнить().Выгрузить());
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СписаниеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.СписаниеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеТоваровТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	СписаниеТоваровТовары.Номенклатура КАК Номенклатура,
	|	СписаниеТоваровТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	СписаниеТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	СписаниеТоваровТовары.Количество КАК Количество,
	|	СписаниеТоваровТовары.СерияНоменклатуры.НомерГТД.Код КАК НомерГТД,
	|	СписаниеТоваровТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СписаниеТоваровТовары.Сумма КАК Сумма,
	|	СписаниеТоваровТовары.Цена КАК Цена,
	|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов
	|ИЗ
	|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
	|ГДЕ
	|	СписаниеТоваровТовары.Ссылка = &Ссылка";
	
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	//ТипЗапасов = "КомиссионныеТовары";
	ТипЗапасов = "СобственныеТовары";
	Запрос.УстановитьПараметр("ТипЗапасов", ТипЗапасов);
	
	ТабТовары = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СчетПокупателю_Отправка
Процедура ДобавитьПКО_Документ_СчетПокупателю_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетПокупателю_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетНаОплатуПокупателю;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетПокупателю";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетПокупателю_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦенНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СчетПокупателю_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	//{ ДокументОснование
	
	Если ЗначениеЗаполнено(ДанныеИБ.ЗаказПокупателя) Тогда
		//ДанныеXDTO.Вставить("AdditionalInfo",Строка(ДанныеИБ.ЗаказПокупателя.УникальныйИдентификатор()));
		ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ЗаказПокупателя.ПолучитьОбъект(), КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ЗаказКлиентаСчетПокупателю_Отправка", "Имя"));
	ИначеЕсли Ложь Тогда // включить при необходимости
		ДанныеЗаказаКлиента = Новый Структура("Дата,Номер,Организация,Ответственный,Подразделение,Контрагент,КурсВзаиморасчетов,КратностьВзаиморасчетов,ТипЦен,СуммаВключаетНДС");
		ЗаполнитьЗначенияСвойств(ДанныеЗаказаКлиента,ДанныеИБ);
		ДанныеЗаказаКлиента.Вставить("ПометкаУдаления",Ложь);
		ДанныеЗаказаКлиента.Вставить("Валюта",ДанныеИБ.ВалютаДокумента);
		ДанныеЗаказаКлиента.Вставить("Сумма",ДанныеИБ.СуммаДокумента);
		ДанныеЗаказаКлиента.Вставить("Склад",ДанныеXDTO.Склад);
		ДанныеЗаказаКлиента.Вставить("Договор",ДанныеИБ.ДоговорКонтрагента);
		ДанныеЗаказаКлиента.Вставить("ВалютаВзаиморасчетов",ДанныеИБ.ВалютаДокумента);
		ДанныеЗаказаКлиента.Вставить("АдресДоставки",ДанныеИБ.ДополнениеКАдресуДоставки);
		ДанныеЗаказаКлиента.Вставить("СчетУчетаРасчетовСКонтрагентом", "62.01");
		ДанныеЗаказаКлиента.Вставить("СчетУчетаРасчетовПоАвансам", "62.02");
		ДанныеЗаказаКлиента.Вставить("НомерВходящегоДокумента", ДанныеИБ.Номер);
		ДанныеЗаказаКлиента.Вставить("ДатаВходящегоДокумента", ДанныеИБ.Дата);
		ДанныеЗаказаКлиента.Вставить("НаименованиеВходящегоДокумента", "СчетПокупателю");
		
		Если ЗначениеЗаполнено(ДанныеИБ.СтруктурнаяЕдиница) И ТипЗнч(ДанныеИБ.СтруктурнаяЕдиница)=Тип("СправочникСсылка.БанковскиеСчета") Тогда
			БанковскийСчетОрганизации = ДанныеИБ.СтруктурнаяЕдиница;
		Иначе
			БанковскийСчетОрганизации = Неопределено;
		КонецЕсли;
		ДанныеЗаказаКлиента.Вставить("БанковскийСчетОрганизации", БанковскийСчетОрганизации);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	тТовары.НомерСтроки КАК НомерСтрокиДокумента,
		|	тТовары.Номенклатура КАК Номенклатура,
		|	тТовары.ХарактеристикаНоменклатуры КАК Характеристика,
		|	тТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
		|	CASE WHEN тТовары.ЕдиницаИзмерения.Коэффициент = 0 ИЛИ тТовары.ЕдиницаИзмерения.Коэффициент = 1 ТОГДА ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) ИНАЧЕ тТовары.ЕдиницаИзмерения КОНЕЦ КАК Упаковка,
		|	ВЫРАЗИТЬ(тТовары.Количество * тТовары.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
		|	тТовары.Количество КАК КоличествоУпаковок,
		|	тТовары.Сумма КАК Сумма,
		|	тТовары.Цена КАК Цена,
		|	тТовары.СтавкаНДС КАК СтавкаНДС,
		|	тТовары.СуммаНДС КАК СуммаНДС,
		|	ВЫРАЗИТЬ(&ТипЗапасов КАК СТРОКА(18)) КАК ТипЗапасов
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Товары КАК тТовары
		|ГДЕ
		|	тТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тУслуги.НомерСтроки КАК НомерСтрокиДокумента,
		|	тУслуги.Номенклатура КАК Номенклатура,
		|	тУслуги.Количество КАК Количество,
		|	тУслуги.Сумма КАК Сумма,
		|	тУслуги.Цена КАК Цена,
		|	тУслуги.СтавкаНДС КАК СтавкаНДС,
		|	тУслуги.СуммаНДС КАК СуммаНДС,
		|	тУслуги.Содержание КАК Содержание
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю.Услуги КАК тУслуги
		|ГДЕ
		|	тУслуги.Ссылка = &Ссылка";	
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		//БОЙКОВ
		//Если ДанныеИБ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		//	ТипЗапасов = "КомиссионныеТовары";
		//Иначе
		//	ТипЗапасов = "СобственныеТовары";
		//КонецЕсли;
		ТипЗапасов = "СобственныеТовары";
		//
		Запрос.УстановитьПараметр("ТипЗапасов",ТипЗапасов);
		ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, Запрос.Текст);		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТабТовары = РезультатыЗапроса[0].Выгрузить();
		ТабУслуги = РезультатыЗапроса[1].Выгрузить();
		
		ДанныеЗаказаКлиента.Вставить("Товары", ТабТовары);
		ДанныеЗаказаКлиента.Вставить("Услуги", ТабУслуги);
		ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеЗаказаКлиента);
		
		ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеЗаказаКлиента, КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ЗаказКлиентаИзСтруктуры_Отправка", "Имя"));
		
	КонецЕсли;
	//}
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СчетПоставщика_Отправка
Процедура ДобавитьПКО_Документ_СчетПоставщика_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетПоставщика_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетНаОплатуПоставщика;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетПоставщика";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетПоставщика_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СчетПоставщика_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	Если ТипЗнч(ДанныеИБ.СтруктурнаяЕдиница)=Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ДанныеXDTO.Вставить("БанковскийСчетКонтрагента", ДанныеИБ.СтруктурнаяЕдиница);
	КонецЕсли;
	
	//{ ДокументОснование
	
	Если ЗначениеЗаполнено(ДанныеИБ.ДокументОснование) И ТипЗнч(ДанныеИБ.ДокументОснование)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБ.ДокументОснование.ПолучитьОбъект(), КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ЗаказПоставщику_Отправка", "Имя"));
	КонецЕсли;
	//}
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СчетФактураВыданный_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетФактураВыданный_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетФактураВыданный;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчетаФактуры";
	НоваяСтрока.СвойствоФормата = "ВидСчетаФактуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидСчетаФактурыВыставленного";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выставлен";
	НоваяСтрока.СвойствоФормата = "Выставлен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыставления";
	НоваяСтрока.СвойствоФормата = "ДатаВыставления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправляемогоКорректировочногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсправляемогоКорректировочногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПлатежноРасчетногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаПлатежноРасчетногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсправляемыйСчетФактура";
	НоваяСтрока.СвойствоФормата = "ИсправляемыйСчетФактура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураВыданный_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправления";
	НоваяСтрока.СвойствоФормата = "НомерИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправляемогоКорректировочногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсправляемогоКорректировочногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерПлатежноРасчетногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерПлатежноРасчетногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ГлавныйБухгалтер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Руководитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособВыставления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодВидаОперации";
	НоваяСтрока.СвойствоФормата = "КодВидаОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДокументыОснования", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДокументыОснования;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПлатежноРасчетныеДокументы", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПлатежноРасчетныеДокументы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//СФВ
	
	Руководители = ПолучитьОтветственныеЛицаОрганизации(ДанныеИБ.Организация, ДанныеИБ.Дата, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("ГлавныйБухгалтер", Руководители.ГлавныйБухгалтер);
	ДанныеXDTO.Вставить("Руководитель", Руководители.Руководитель);
	ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	
	Если ПустаяСтрока(ДанныеИБ.КодВидаОперации) Тогда
		
		ВидСчетаФактуры = ДанныеИБ.ВидСчетаФактуры;
		Если ВидСчетаФактуры=Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			КодВидаОперации = "01";
			
		ИначеЕсли ВидСчетаФактуры=Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			КодВидаОперации = "02";
			
		ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда	
			КодВидаОперации = "05";				
			
		Иначе
			КодВидаОперации = "01";
		КонецЕсли;
		
		ДанныеXDTO.Вставить("КодВидаОперации", КодВидаОперации);	
	КонецЕсли;
	
	//{ Документы-основания - заполненность проверяется при выполнении ПОД
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.ДокументОснование КАК ДокументОснованиеСсылка,
	|	Док.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	Док.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	Док.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	Док.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданныйДатаНомерДокументовОплаты.ДатаПлатежноРасчетногоДокумента КАК ДатаДокумента,
	|	СчетФактураВыданныйДатаНомерДокументовОплаты.НомерПлатежноРасчетногоДокумента КАК НомерДокумента
	|ИЗ
	|	Документ.СчетФактураВыданный.ДатаНомерДокументовОплаты КАК СчетФактураВыданныйДатаНомерДокументовОплаты
	|ГДЕ
	|	СчетФактураВыданныйДатаНомерДокументовОплаты.Ссылка = &Ссылка
	|	И НЕ СчетФактураВыданныйДатаНомерДокументовОплаты.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
	|	И НЕ СчетФактураВыданныйДатаНомерДокументовОплаты.ДатаПлатежноРасчетногоДокумента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Результат = Запрос.ВыполнитьПакет();
	
	ДокументыОснования = Результат[0].Выгрузить();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	ПлатРасчДокументы = Результат[1].Выгрузить();
	
	Для Каждого СтрокаОснование Из ДокументыОснования Цикл
		
		ИмяПКО = ИмяПКОДляДокументаОснованияСФВыданного(СтрокаОснование.ДокументОснованиеСсылка, ДанныеИБ.Организация);
		СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",СтрокаОснование.ДокументОснованиеСсылка,ИмяПКО);
		ВыгрузкаОбъектаВыборки(КомпонентыОбмена,СтрокаОснование.ДокументОснованиеСсылка.ПолучитьОбъект());
		
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	
	Если ПлатРасчДокументы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПлатежноРасчетныеДокументы", ПлатРасчДокументы);
	КонецЕсли;	
	
	//}
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_СчетФактураПолученный_Отправка
Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетФактураПолученный_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчетаФактуры";
	НоваяСтрока.СвойствоФормата = "ВидСчетаФактуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидСчетаФактурыПолученного";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаПолучения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправления";
	НоваяСтрока.СвойствоФормата = "ДатаИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Исправление";
	НоваяСтрока.СвойствоФормата = "Исправление";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсправляемыйСчетФактура";
	НоваяСтрока.СвойствоФормата = "ИсправляемыйСчетФактура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураПолученный_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправления";
	НоваяСтрока.СвойствоФормата = "НомерИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСДокумента";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КодВидаОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособВыставления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Авансы", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Авансы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДокументыОснования", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДокументыОснования;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	//СФП
	
	Если ДанныеИБ.КодСпособаПолучения=2 Тогда
		ДанныеXDTO.Вставить("СпособВыставления", "ВЭлектронномВиде");
	Иначе
		ДанныеXDTO.Вставить("СпособВыставления", "НаБумажномНосителе");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.ВидСчетаФактуры) Тогда
		ДанныеXDTO.Вставить("ВидСчетаФактуры", "НаПоступление");
	КонецЕсли;
	
	КодВидаОперации = ДанныеИБ.КодВидаОперации;
	Если ПустаяСтрока(КодВидаОперации) Тогда
		
		ВидСчетаФактуры = ДанныеИБ.ВидСчетаФактуры;
		Если ВидСчетаФактуры=Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда
			КодВидаОперации = "01";
			
		ИначеЕсли ВидСчетаФактуры=Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			КодВидаОперации = "02";
			
		Иначе
			КодВидаОперации = "01";
		КонецЕсли;
		
	КонецЕсли;
	ДанныеXDTO.Вставить("КодВидаОперации", КодВидаОперации);	
	
	//{ Документы-основания - заполненность проверяется при выполнении ПОД
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Док.ДокументОснование КАК ДокументОснованиеСсылка
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокА.Сумма КАК Сумма,
	|	ДокА.СуммаНДС КАК СуммаНДС,
	|	ДокА.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.СчетФактураПолученный.Авансы КАК ДокА
	|ГДЕ
	|	ДокА.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Результат = Запрос.ВыполнитьПакет();
	
	ДокументыОснования = Результат[0].Выгрузить();
	ДокументыОснования.Колонки.Добавить("ДокументОснование");
	ТаблАвансы = Результат[1].Выгрузить();
	
	Для Каждого СтрокаОснование Из ДокументыОснования Цикл
		
		ИмяПКО = ИмяПКОДляДокументаОснованияСФПолученного(СтрокаОснование.ДокументОснованиеСсылка);
		СтрокаОснование.ДокументОснование = Новый Структура("Значение, ИмяПКО",СтрокаОснование.ДокументОснованиеСсылка,ИмяПКО);
		ВыгрузкаОбъектаВыборки(КомпонентыОбмена,СтрокаОснование.ДокументОснованиеСсылка.ПолучитьОбъект());
		
	КонецЦикла;
	
	ДанныеXDTO.Вставить("ДокументыОснования", ДокументыОснования);
	
	Если ТаблАвансы.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Авансы", ТаблАвансы);
	КонецЕсли;	
	
	//}
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦенНоменклатуры";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Документ_ЧекККМ_Отправка
Процедура ДобавитьПКО_Документ_ЧекККМ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЧекККМ_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ЧекККМ;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЧекККМ";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЧекККМ_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КассаККМ";
	НоваяСтрока.СвойствоФормата = "КассаККМ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КассыККМ_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "НомерВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Кассир";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерКассовойСмены";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерЧекаФР";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ТоварыПродажа", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ТоварыПродажа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СерииНоменклатуры_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаЗаУпаковку";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ЧекККМ_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ТекстЗапросаШапки = 
	"ВЫБРАТЬ
	|	ЖурналФискальныхОпераций.ФискальнаяОперацияНомерЧекаККМ КАК НомерЧекаФР,
	|	ЖурналФискальныхОпераций.ФискальнаяОперацияНомерСменыККМ КАК НомерКассовойСмены,
	|	Шапка.НомерЧекаККМ,
	|	Шапка.НомерСменыККМ,
	|	Шапка.Номер
	|ИЗ
	|	Документ.ЧекККМ КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналФискальныхОпераций КАК ЖурналФискальныхОпераций
	|		ПО Шапка.Ссылка = ЖурналФискальныхОпераций.ДокументОснование
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка";
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		
		Запрос = Новый  Запрос;
		Запрос.Текст = ТекстЗапросаШапки;
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ДанныеШапки = Запрос.Выполнить().Выгрузить()[0];
		
		Если ЗначениеЗаполнено(ДанныеШапки.НомерКассовойСмены) Тогда
			НомерКассовойСмены = ДанныеШапки.НомерКассовойСмены;
		ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.НомерСменыККМ) Тогда
			НомерКассовойСмены = ДанныеШапки.НомерКассовойСмены;
		Иначе
			НомерКассовойСмены = ДанныеШапки.Номер;
		КонецЕсли;
		ДанныеXDTO.Вставить("НомерКассовойСмены", НомерКассовойСмены);
		
		Если ЗначениеЗаполнено(ДанныеШапки.НомерЧекаФР) Тогда
			ДанныеXDTO.Вставить("НомерЧекаФР", ДанныеШапки.НомерЧекаФР);
		ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.НомерСменыККМ) Тогда
			ДанныеXDTO.Вставить("НомерЧекаФР", ДанныеШапки.НомерСменыККМ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый  Запрос;
	Запрос.Текст = ТекстЗапросаШапки + 
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + 
	"ВЫБРАТЬ
	|	ШапкаВалюта.ТипЦен.ВалютаЦены КАК ВалютаЦен,
	|	ШапкаВалюта.Склад.ТипЦенРозничнойТорговли.ВалютаЦены КАК ВалютаСклада
	|ИЗ
	|	Документ.ЧекККМ КАК ШапкаВалюта
	|ГДЕ
	|	ШапкаВалюта.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыУслуги.НомерСтроки КАК НомерСтрокиДокумента,
	|	ТоварыУслуги.Номенклатура КАК Номенклатура,
	|	ТоварыУслуги.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТоварыУслуги.Штрихкод КАК Штрихкод,
	|	ТоварыУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыУслуги.Количество * ТоварыУслуги.Коэффициент КАК Количество,
	|	ТоварыУслуги.Сумма КАК Сумма,
	|	ТоварыУслуги.Цена КАК Цена,
	|	ТоварыУслуги.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТоварыУслуги.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) КАК ЭтоУслуга
	|ПОМЕСТИТЬ втТоварыУслуги
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ТоварыУслуги
	|ГДЕ
	|	ТоварыУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	тТовары.Номенклатура КАК Номенклатура,
	|	тТовары.Характеристика,
	|	тТовары.Штрихкод,
	|	тТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	тТовары.Количество КАК Количество,
	|	тТовары.Сумма КАК Сумма,
	|	тТовары.Цена КАК Цена,
	|	тТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	втТоварыУслуги КАК тТовары
	|ГДЕ
	|	НЕ тТовары.ЭтоУслуга = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тУслуги.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	тУслуги.Номенклатура КАК Номенклатура,
	|	тУслуги.Характеристика,
	|	тУслуги.Количество КАК Количество,
	|	тУслуги.Сумма КАК Сумма,
	|	тУслуги.Цена КАК Цена
	|ИЗ
	|	втТоварыУслуги КАК тУслуги
	|ГДЕ
	|	тУслуги.ЭтоУслуга = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеШапки = РезультатыЗапроса[0].Выгрузить()[0];
	Если ЗначениеЗаполнено(ДанныеШапки.НомерКассовойСмены) Тогда
		НомерКассовойСмены = ДанныеШапки.НомерКассовойСмены;
	ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.НомерСменыККМ) Тогда
		НомерКассовойСмены = ДанныеШапки.НомерКассовойСмены;
	Иначе
		НомерКассовойСмены = ДанныеШапки.Номер;
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("НомерКассовойСмены", НомерКассовойСмены);
	
	Если ЗначениеЗаполнено(ДанныеШапки.НомерЧекаФР) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НомерЧекаФР", ДанныеШапки.НомерЧекаФР);
	ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.НомерСменыККМ) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НомерЧекаФР", ДанныеШапки.НомерСменыККМ);
	КонецЕсли;
	
	ДанныеВалюта = РезультатыЗапроса[1].Выгрузить()[0];
	Если ЗначениеЗаполнено(ДанныеВалюта.ВалютаЦен) Тогда
		Валюта = ДанныеВалюта.ВалютаЦен;
	ИначеЕсли ЗначениеЗаполнено(ДанныеВалюта.ВалютаСклада) Тогда
		Валюта = ДанныеВалюта.ВалютаСклада;
	Иначе
		Валюта = Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	ДанныеXDTO.Вставить("Валюта", Валюта);
	
	
	ТаблТовары = РезультатыЗапроса[3].Выгрузить();
	Если ТаблТовары.Количество()>0  Тогда
		ДанныеXDTO.Вставить("ТоварыПродажа", ТаблТовары);
	КонецЕсли;
	
	ТаблУслуги = РезультатыЗапроса[4].Выгрузить();
	Если ТаблУслуги.Количество()>0  Тогда
		ДанныеXDTO.Вставить("Услуги", ТаблУслуги);
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Банки
Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Банки;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Банки";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Адрес";
	НоваяСтрока.СвойствоФормата = "Адрес";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Город";
	НоваяСтрока.СвойствоФормата = "Город";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "БИК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоррСчет";
	НоваяСтрока.СвойствоФормата = "КоррСчет";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Телефоны";
	НоваяСтрока.СвойствоФормата = "Телефоны";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_БанковскиеСчета
Процедура ДобавитьПКО_Справочник_БанковскиеСчета(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанковскиеСчета";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчета_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанкДляРасчетов";
	НоваяСтрока.СвойствоФормата = "БанкДляРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "ВалютаДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчета";
	НоваяСтрока.СвойствоФормата = "ВидСчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Владелец
	
	Инструкция = Новый Структура("Значение, ИмяПКО");
	Инструкция.Значение = ДанныеИБ.Владелец;
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция.ИмяПКО = "Справочник_Контрагенты";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Инструкция.ИмяПКО = "Справочник_Организации";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Инструкция.ИмяПКО = "Справочник_ФизическиеЛица";
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("Владелец", Инструкция);
		Возврат;
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Инструкция);
	
	
	ВидСчетаСтр = СокрЛП(НРег(ДанныеИБ.ВидСчета));
	Если Найти(ВидСчетаСтр,"расчетный")=1 Тогда
		ВидСчетаСпр = "Расчетный";
		
	ИначеЕсли Найти(ВидСчетаСтр,"депозитный")=1 Тогда
		ВидСчетаСпр = "Депозитный";
		
	ИначеЕсли Найти(ВидСчетаСтр,"ссудный")=1 Тогда
		ВидСчетаСпр = "Ссудный";
		
	ИначеЕсли Найти(ВидСчетаСтр,"иной")=1 Тогда
		ВидСчетаСпр = "Иной";
	Иначе
		ВидСчетаСпр = "Расчетный";	   
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидСчета", ВидСчетаСпр);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Валюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПараметрыПрописиНаРусском";
	НоваяСтрока.СвойствоФормата = "ПараметрыПрописиНаРусском";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ВидыАлкогольнойПродукции_Отправка
Процедура ДобавитьПКО_Справочник_ВидыАлкогольнойПродукции_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ВидыАлкогольнойПродукции_Отправка";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "КлючевыеСвойстваВидыАлкогольнойПродукции";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидЛицензии";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ВидыДокументовФизическихЛиц_Отправка
Процедура ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ВидыДокументовФизическихЛиц_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДокументыУдостоверяющиеЛичность;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПФР";
	НоваяСтрока.СвойствоФормата = "КодПФР";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ВидыНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ВидыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ВидыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ВидыНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипНоменклатуры";
	НоваяСтрока.СвойствоФормата = "ТипНоменклатуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ТипыНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "AdditionalInfo";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИБ.Родитель) Тогда
		AdditionalInfoВставить(ДанныеXDTO, "Родитель", Строка(ДанныеИБ.Родитель.УникальныйИдентификатор()));
		AdditionalInfoВставить(ДанныеXDTO, "РодительНаименование", Строка(ДанныеИБ.Родитель));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА Номенклатура.ВестиУчетПоХарактеристикам = ИСТИНА
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВестиУчетПоХарактеристикам,
		|	СУММА(ВЫБОР
		|			КОГДА Номенклатура.ВестиУчетПоХарактеристикам = ИСТИНА
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК НеВестиУчетПоХарактеристикам
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		AdditionalInfoВставить(ДанныеXDTO, "ИспользованиеХарактеристик", ?(ЗначениеЗаполнено(Выборка.ВестиУчетПоХарактеристикам) И Выборка.ВестиУчетПоХарактеристикам>0,"ИндивидуальныеДляНоменклатуры","НеИспользовать"));
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ДоговорыКонтрагентаБанковскиеСчета_Отпр
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентаБанковскиеСчета_Отпр(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентаБанковскиеСчета_Отпр";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентаБанковскиеСчета_Отпр_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентаБанковскиеСчета_Отпр_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	НомерСчета = ПривестиНомерКДлине(?(ПустаяСтрока(ДанныеИБ.Номер),"0",ДанныеИБ.Номер), 20);
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("НомерСчета", НомерСчета);
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Наименование", "Банковский счет эквайринга " + СокрЛП(ДанныеИБ) + " и " + СокрЛП(ДанныеИБ.Владелец));
	ДанныеXDTO.КлючевыеСвойства.Вставить("НомерСчета", НомерСчета);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ДоговорыКонтрагентов
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидДоговораКонтрагента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СрокДействия";
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчетАгентскогоНДС";
	НоваяСтрока.СвойствоФормата = "УчетАгентскогоНДС";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ДокументыФизическихЛиц_Отправка
Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.РегистрыСведений.ПаспортныеДанныеФизЛиц;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидДокументаОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыДокументовФизическихЛиц_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПериодОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицоОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Записи", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Записи;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыДокументовФизическихЛиц_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыдачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КемВыдан";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КодПодразделения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Период";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";

КонецПроцедуры

Процедура ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ПериодОтбор",         ДанныеИБ.Отбор.Период.Значение);
	ДанныеXDTO.Вставить("ФизическоеЛицоОтбор", ДанныеИБ.Отбор.Физлицо.Значение);
	
	ТаблицаЗаписи = ДанныеИБ.Выгрузить();
	Если ТаблицаЗаписи.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидДокументаОтбор", ТаблицаЗаписи[0].ДокументВид);
	
	Колонки = ТаблицаЗаписи.Колонки;
	Колонки.ФизЛицо.Имя = "ФизическоеЛицо";
	
	Если НЕ Колонки.Найти("ДокументВид")=Неопределено  Тогда
		Колонки.ДокументВид.Имя = "ВидДокумента";
	КонецЕсли; 
	Если НЕ Колонки.Найти("ДокументСерия")=Неопределено  Тогда
		Колонки.ДокументСерия.Имя = "Серия";
	КонецЕсли; 
	Если НЕ Колонки.Найти("ДокументНомер")=Неопределено  Тогда
		Колонки.ДокументНомер.Имя = "Номер";
	КонецЕсли; 
	Если НЕ Колонки.Найти("ДокументДатаВыдачи")=Неопределено  Тогда
		Колонки.ДокументДатаВыдачи.Имя = "ДатаВыдачи";
	КонецЕсли; 
	Если НЕ Колонки.Найти("ДокументКемВыдан")=Неопределено  Тогда
		Колонки.ДокументКемВыдан.Имя = "КемВыдан";
	КонецЕсли; 
	Если НЕ Колонки.Найти("ДокументКодПодразделения")=Неопределено  Тогда
		Колонки.ДокументКодПодразделения.Имя = "КодПодразделения";
	КонецЕсли; 
	
	ДанныеXDTO.Вставить("Записи", ТаблицаЗаписи);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ДополнительныеРеквизиты_Отправка
Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДополнительныеРеквизиты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.ПланыВидовХарактеристик.СвойстваОбъектов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДополнительныеРеквизиты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "AdditionalInfo";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ЭтоДополнительноеСведение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_ДополнительныеРеквизиты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.НазначениеСвойства=ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры 
		ИЛИ (КомпонентыОбмена.ПараметрыКонвертации.Свойство("ВыгружатьСвойстваКакРеквизиты")
		И КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьСвойстваКакРеквизиты=Истина) Тогда
		ЭтоДополнительноеСведение = Ложь;
	Иначе
		ЭтоДополнительноеСведение = Истина;
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("ЭтоДополнительноеСведение",ЭтоДополнительноеСведение);
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТипыЗначений = ДанныеИБ.ТипЗначения.Типы();
	ИменаТипов = "";
	Для каждого ТекТип Из ТипыЗначений Цикл
		Если ТекТип=Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
			ИменаТипов = ИменаТипов + ";" + "ЗначенияДополнительныхРеквизитов";
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
			ИменаТипов = ИменаТипов + ";" + Метаданные.НайтиПоТипу(ТекТип).Имя;
			
		ИначеЕсли ТекТип=Тип("Число") Тогда
			КЧ = ДанныеИБ.ТипЗначения.КвалификаторыЧисла;
			ИменаТипов = ИменаТипов + ";Число," 
			+ ?(КЧ.ДопустимыйЗнак=ДопустимыйЗнак.Неотрицательный,"+","-") 
			+ "," + Формат(КЧ.Разрядность,"ЧГ=0") 
			+ "," + Формат(КЧ.РазрядностьДробнойЧасти,"ЧГ=0");
			
		ИначеЕсли ТекТип=Тип("Строка") Тогда
			КЧ = ДанныеИБ.ТипЗначения.КвалификаторыСтроки;
			ИменаТипов = ИменаТипов + ";Строка," 
			+ Формат(КЧ.Длина,"ЧГ=0") 
			+ "," + XMLСтрока(КЧ.ДопустимаяДлина);
			
		ИначеЕсли ТекТип=Тип("Дата") Тогда
			ИменаТипов = ИменаТипов + ";Дата," + XMLСтрока(ДанныеИБ.ТипЗначения.КвалификаторыДаты.ЧастиДаты);
		Иначе
			ИменаТипов = ИменаТипов + ";";  
		КонецЕсли;
	КонецЦикла;
	ИменаТипов = "###"+СокрЛП(ИменаТипов);
	ИменаТипов = СтрЗаменить(ИменаТипов,"###;","");
	AdditionalInfoВставить(ДанныеXDTO,"ТипЗначения", ИменаТипов);
	
	ДобавитьНаборСвойств(ДанныеXDTO, ДанныеИБ.НазначениеСвойства);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ДополнительныеРеквизитыИзСтруктуры_Отпр
Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизитыИзСтруктуры_Отпр(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДополнительныеРеквизитыИзСтруктуры_Отпр";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ДополнительныеРеквизитыКатегории_Отправ
Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизитыКатегории_Отправ(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДополнительныеРеквизитыКатегории_Отправ";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КатегорииОбъектов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДополнительныеРеквизитыКатегории_Отправ_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ЭтоДополнительноеСведение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_ДополнительныеРеквизитыКатегории_Отправ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ЭтоДополнительноеСведение",Истина);
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНаборСвойств(ДанныеXDTO, ДанныеИБ.НазначениеКатегории);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ЗначенияДополнительныхРеквизитов_Отправ
Процедура ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов_Отправ(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов_Отправ";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Кассы_Отправка
Процедура ДобавитьПКО_Справочник_Кассы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Кассы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Кассы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Кассы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_КассыИзСтруктуры_Отправка
Процедура ДобавитьПКО_Справочник_КассыИзСтруктуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КассыИзСтруктуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Кассы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_КассыККМ_Отправка
Процедура ДобавитьПКО_Справочник_КассыККМ_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КассыККМ_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КассыККМ;
	ПравилоКонвертации.ОбъектФормата = "Справочник.КассыККМ";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СерийныйНомер";
	НоваяСтрока.СвойствоФормата = "РегистрационныйНомер";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_КлассификаторЕдиницИзмерения
Процедура ДобавитьПКО_Справочник_КлассификаторЕдиницИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КлассификаторЕдиницИзмерения";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КлассификаторЕдиницИзмерения_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_КлассификаторЕдиницИзмерения_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ПустаяСтрока(ДанныеИБ.Код) Тогда
		Наименование = нрег(СокрЛП(ДанныеИБ.Наименование));
		Код = "0";
		Если Наименование="шт" Тогда
			Код = "796";
		ИначеЕсли Наименование="кг" Тогда
			Код = "166";
		ИначеЕсли Наименование="м" Тогда
			Код = "006";
		КонецЕсли;
		ДанныеXDTO.Вставить("Код","796");
	КонецЕсли;
	//Если СтекВыгрузки.Количество() > 1 Тогда
	//	Если  нрег(СокрЛП(ДанныеИБ.Наименование)) = "шт" ИЛИ нрег(СокрЛП(ДанныеИБ.Наименование)) = "шт." Тогда
	//		ДанныеXDTO = неопределено;//= Новый Структура("КлючевыеСвойства", Новый Структура());
	//	Конецесли;
	//Конецесли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_КонтактныеЛица_Отправка
Процедура ДобавитьПКО_Справочник_КонтактныеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КонтактныеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КонтактныеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КонтактныеЛица_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Имя";
	НоваяСтрока.СвойствоФормата = "Имя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "ФИО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Отчество";
	НоваяСтрока.СвойствоФормата = "Отчество";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пол";
	НоваяСтрока.СвойствоФормата = "Пол";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ПолФизлиц";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Фамилия";
	НоваяСтрока.СвойствоФормата = "Фамилия";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_КонтактныеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("AdditionalInfo", "КонтактныеЛица");
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ.Ссылка, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_КонтактныеЛицаКонтрагентов_Отправка
Процедура ДобавитьПКО_Справочник_КонтактныеЛицаКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КонтактныеЛицаКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КонтактныеЛицаКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_КонтактныеЛицаКонтрагентов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "ФИО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Пол";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_КонтактныеЛицаКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактныеЛица.ДатаРождения КАК ДатаРождения,
	|	КонтактныеЛица.Пол КАК Пол,
	|	КонтактныеЛица.Фамилия,
	|	КонтактныеЛица.Имя,
	|	КонтактныеЛица.Отчество
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Ссылка = &КонтактноеЛицо";
	
	Запрос.УстановитьПараметр("КонтактноеЛицо", ДанныеИБ.КонтактноеЛицо);
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеКЛ = РезультатЗапроса.Выбрать();
	ДанныеКЛ.Следующий();
	
	ДанныеXDTO.Вставить("ДатаРождения", ДанныеКЛ.ДатаРождения);
	ДанныеXDTO.Вставить("Пол", Строка(ДанныеКЛ.Пол));
	ДанныеXDTO.Вставить("AdditionalInfo", "КонтактныеЛицаКонтрагентов");
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ.Ссылка, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Контрагенты
Процедура ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Контрагенты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнойКонтрагент";
	НоваяСтрока.СвойствоФормата = "ГоловнойКонтрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументУдостоверяющийЛичность";
	НоваяСтрока.СвойствоФормата = "ДокументУдЛичность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительноеОписание";
	НоваяСтрока.СвойствоФормата = "ДополнительнаяИнформация";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбособленноеПодразделение";
	НоваяСтрока.СвойствоФормата = "ОбособленноеПодразделение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ЮрФизЛицо";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ЮрФизЛицо) Тогда
		ЮрФизЛицо = ДанныеИБ.ЮрФизЛицо;
	Иначе
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("ЮридическоеФизическоеЛицо", ЮрФизЛицо);
		Возврат;
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("ЮридическоеФизическоеЛицо", ЮрФизЛицо);
	
	AdditionalInfoВставить(ДанныеXDTO, "Партнер", Новый Структура("Клиент,Поставщик",ДанныеИБ.Покупатель,ДанныеИБ.Поставщик),Истина);
	AdditionalInfoВставить(ДанныеXDTO, "Комментарий", ДанныеИБ.Комментарий);
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ.Ссылка, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_КонтрагентыГруппа
Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Номенклатура";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АлкогольнаяПродукция";
	НоваяСтрока.СвойствоФормата = "АлкогольнаяПродукция";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидАлкогольнойПродукцииЕГАИС";
	НоваяСтрока.СвойствоФормата = "ВидАлкогольнойПродукции";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыАлкогольнойПродукции_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИмпортнаяАлкогольнаяПродукция";
	НоваяСтрока.СвойствоФормата = "ИмпортнаяАлкогольнаяПродукция";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Описание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбъемДАЛ";
	НоваяСтрока.СвойствоФормата = "ОбъемДАЛ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПроизводительИмпортерАлкогольнойПродукции";
	НоваяСтрока.СвойствоФормата = "ПроизводительИмпортер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыНоменклатуры_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ГруппаАналитическогоУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурнаяГруппа_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦеноваяГруппа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЦеновыеГруппы_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БазоваяЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";

КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
		
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.БазоваяЕдиницаИзмерения) Тогда
		
		ЕдиницаПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");	
		Если ЕдиницаПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
			ЕдиницаПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт",Истина);
		КонецЕсли;
		
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", ЕдиницаПоУмолчанию);
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДанныеИБ.НоменклатурнаяГруппа) И СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ГруппыАналитическогоУчетаНоменклатуры") Тогда
		ДанныеXDTO.Вставить("ГруппаАналитическогоУчета", ДанныеИБ.НоменклатурнаяГруппа);
	КонецЕсли;
	Если СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ВидыНоменклатуры") Тогда
		ДанныеXDTO.Вставить("ВидНоменклатуры", ДанныеИБ.ВидНоменклатуры);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеИБ.ЦеноваяГруппа) И СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ЦеновыеГруппы") Тогда
		ДанныеXDTO.Вставить("ЦеноваяГруппа", ДанныеИБ.ЦеноваяГруппа);
	КонецЕсли;
	
	ТипНоменклатуры = Неопределено;
	Если ДанныеИБ.Услуга=Истина Тогда
		ТипНоменклатуры = "Услуга";
	Иначе
		Если ЗначениеЗаполнено(ДанныеИБ.ВидНоменклатуры) Тогда
			ТипНоменклатурыИБ = ДанныеИБ.ВидНоменклатуры.ТипНоменклатуры;
			Если ЗначениеЗаполнено(ТипНоменклатурыИБ) Тогда
				
				Если ТипНоменклатурыИБ=Перечисления.ТипыНоменклатуры.Товар Тогда
					ТипНоменклатуры = "Товар";
				ИначеЕсли ТипНоменклатурыИБ=Перечисления.ТипыНоменклатуры.Услуга Тогда
					ТипНоменклатуры = "Услуга";
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипНоменклатуры) Тогда
		ДанныеXDTO.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	Иначе
		ДанныеXDTO.Вставить("ТипНоменклатуры", "Товар");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", ПолучитьВидАП(ДанныеИБ.ВидАлкогольнойПродукцииЕГАИС));
	
	ВыгрузитьРеквизитыОбъектаВAdditionalInfo(ДанныеИБ, ДанныеXDTO, Метаданные.Справочники.Номенклатура, "ОсновноеИзображение,ВестиУчетПоХарактеристикам", "ФайлКартинки");
	//ВыгрузитьФайлыОбъекта(КомпонентыОбмена, ДанныеИБ.Ссылка);
	
	AdditionalInfoВставить(ДанныеXDTO, "Крепость",ДанныеИБ.Крепость, Ложь);
	AdditionalInfoВставить(ДанныеXDTO, "ВестиУчетПоГТД", Истина, ЗначениеЗаполнено(ДанныеИБ.НомерГТД));
	
	_использованиеХарактеристик = "НеИспользовать";
	_родитель = ДанныеИБ.Ссылка.Родитель;
	Пока ЗначениеЗаполнено(_родитель) Цикл
		//Если СокрЛП(_родитель)="Сигареты Россия (основное)" Тогда
		Если СокрЛП(_родитель)="Сигареты" Тогда
			_использованиеХарактеристик = "ИндивидуальныеДляНоменклатуры";
			break;
		КонецЕсли;
			
		_родитель = _родитель.Родитель;
	Конеццикла;
	
	AdditionalInfoВставить(ДанныеXDTO, "ИспользованиеХарактеристик", _использованиеХарактеристик);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_НоменклатураГруппа
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_НоменклатурнаяГруппа_Отправка
Процедура ДобавитьПКО_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатурнаяГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_НоменклатурнаяГруппа_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппыГруппа_Отправка";

КонецПроцедуры

Процедура ПКО_Справочник_НоменклатурнаяГруппа_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьРеквизитыОбъектаВAdditionalInfo(ДанныеИБ, ДанныеXDTO); //ED все реквизиты
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_НоменклатурныеГруппыГруппа_Отправка
Процедура ДобавитьПКО_Справочник_НоменклатурныеГруппыГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатурныеГруппыГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ГруппыАналитическогоУчетаНоменклатурыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатурныеГруппыГруппа_Отправка";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Организации
Процедура ДобавитьПКО_Справочник_Организации(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Организации";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКАТО";
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "НаименованиеСокращенное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПлательщикаПриПеречисленииНалогов";
	НоваяСтрока.СвойствоФормата = "НаименованиеПлательщикаПриПеречисленииНалогов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОГРН";
	НоваяСтрока.СвойствоФормата = "ОГРН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнойБанковскийСчет";
	НоваяСтрока.СвойствоФормата = "ОсновнойБанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоДатаВыдачи";
	НоваяСтрока.СвойствоФормата = "СвидетельствоДатаВыдачи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоСерияНомер";
	НоваяСтрока.СвойствоФормата = "СвидетельствоСерияНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ссылка";
	НоваяСтрока.СвойствоФормата = "ГоловнаяОрганизация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮрФизЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ЮрФизЛицо";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Подразделения
Процедура ДобавитьПКО_Справочник_Подразделения(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Подразделения";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Подразделения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Подразделения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Подразделения_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "ВышестоящееПодразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";

КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Пользователи
Процедура ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Пользователи";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Пользователи";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Пользователи_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";

КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеXDTO.Свойство("Наименование") И НЕ ЗначениеЗаполнено(ДанныеXDTO.Наименование) Тогда
		ДанныеXDTO = неопределено;
	КонецЕсли;
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_СерииНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_СерииНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СерииНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СерииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СерииНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СерииНоменклатуры_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СрокГодности";
	НоваяСтрока.СвойствоФормата = "ГоденДо";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СерийныйНомер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_СерииНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СерийныйНомер = ДанныеИБ.СерийныйНомер;
	Если ПустаяСтрока(СерийныйНомер) Тогда
		СерийныйНомер = ДанныеИБ.НомерГТД.Код;
		Если ПустаяСтрока(СерийныйНомер) Тогда
			СерийныйНомер = ДанныеИБ.Наименование;
			Если ПустаяСтрока(СерийныйНомер) Тогда
				СерийныйНомер = "-";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("СерийныйНомер",СерийныйНомер);
	ВыгрузитьРеквизитыОбъектаВAdditionalInfo(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Склады
Процедура ДобавитьПКО_Справочник_Склады(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Склады";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСклада";
	НоваяСтрока.СвойствоФормата = "ТипСклада";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыСкладов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦенРозничнойТорговли";
	НоваяСтрока.СвойствоФормата = "ТипЦенРозничнойТорговли";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦенНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "МОЛ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СкладГруппа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";

КонецПроцедуры

Процедура ПКО_Справочник_Склады_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7") Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("СкладГруппа", ДанныеИБ.Родитель);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.7") Тогда
		ДанныеXDTO.Вставить("Группа", ДанныеИБ.Родитель);
	КонецЕсли;
	
	
	ВыбМОЛ = РегистрыСведений.ОтветственныеЛица.ПолучитьПоследнее(, Новый Структура("СтруктурнаяЕдиница", ДанныеИБ.Ссылка)).ФизическоеЛицо;
	ДанныеXDTO.Вставить("МОЛ", ВыбМОЛ);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_СкладыГруппа
Процедура ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СкладыГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СкладыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_СтатьиДДС
Процедура ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиДДС";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиДДС";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";

КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_СтатьиРасходов_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_СтатьиРасходов_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиРасходов_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиРасходов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_СтатьиРасходов_Отправка
Процедура ДобавитьПКО_Справочник_СтатьиРасходов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиРасходов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтатьиЗатрат;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиРасходов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_СтатьяДоходов_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_СтатьяДоходов_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьяДоходов_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиДоходов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_СтраныМира
Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КлассификаторСтранМира;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтраныМира";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодАльфа2";
	НоваяСтрока.СвойствоФормата = "КодАльфа2";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ТипыЦенНоменклатуры
Процедура ДобавитьПКО_Справочник_ТипыЦенНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ТипыЦенНоменклатуры";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ТипыЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаЦены";
	НоваяСтрока.СвойствоФормата = "ВалютаЦены";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОкруглятьВБольшуюСторону";
	НоваяСтрока.СвойствоФормата = "ОкруглятьВБольшуюСторону";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПроцентСкидкиНаценки";
	НоваяСтрока.СвойствоФормата = "ТочностьОкругления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "ЦенаВключаетНДС";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Упаковки_Отправка
Процедура ДобавитьПКО_Справочник_Упаковки_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Упаковки_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Упаковки";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Упаковки_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаПоКлассификатору";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КлассификаторЕдиницИзмерения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.СвойствоФормата = "Коэффициент";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "AdditionalInfo";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Высота";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Глубина";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Объем";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Ширина";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_Упаковки_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЗначениеПоУмолчанию = 0.001;
	ДанныеXDTO.Вставить("Высота",ЗначениеПоУмолчанию);
	ДанныеXDTO.Вставить("Глубина",ЗначениеПоУмолчанию);
	ДанныеXDTO.Вставить("Ширина",ЗначениеПоУмолчанию);
	ДанныеXDTO.Вставить("Объем",?(ЗначениеЗаполнено(ДанныеИБ.Объем),ДанныеИБ.Объем,ЗначениеПоУмолчанию));
	
	Если ВерсияФорматаСравнить(КомпонентыОбмена, "1.5", "<=") И ЗначениеЗаполнено(ДанныеИБ.Владелец) Тогда
		AdditionalInfoВставить(ДанныеXDTO, "Владелец", Строка(ДанныеИБ.Владелец.УникальныйИдентификатор()));
		AdditionalInfoВставить(ДанныеXDTO, "Вид", Метаданные.НайтиПоТипу(ТипЗнч(ДанныеИБ.Владелец)).Имя);
	КонецЕсли;
	AdditionalInfoВставить(ДанныеXDTO, "Вес", ДанныеИБ.Вес);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_Файлы_Отправка
Процедура ДобавитьПКО_Справочник_Файлы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Файлы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ХранилищеДополнительнойИнформации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Файлы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Файлы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВладелецФайла";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Описание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Расширение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ХранимыйФайл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Имя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_Файлы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ТипЗнч(ДанныеИБ.Объект)=Тип("СправочникСсылка.Номенклатура") Тогда
		ВладелецФайла = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Объект, "Справочник_Номенклатура_Отправка");
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Если ПустаяСтрока(ДанныеИБ.Наименование) Тогда
			ДанныеXDTO.Вставить("Имя", "-");
		КонецЕсли;
		ДанныеXDTO.Вставить("ВладелецФайла", ВладелецФайла);
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеИБ.Наименование) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("Имя", "-");
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ВладелецФайла", ВладелецФайла);
	
	ДанныеХранилище = ДанныеИБ.Хранилище.Получить();
	ТипЗнчХранилище = ТипЗнч(ДанныеХранилище);
	Если ТипЗнчХранилище=Тип("Картинка") Тогда
		ХранимыйФайл = Base64Строка(ДанныеХранилище.ПолучитьДвоичныеДанные());
	ИначеЕсли ТипЗнчХранилище=Тип("ДвоичныеДанные") Тогда
	    ХранимыйФайл = Base64Строка(ДанныеХранилище);
	Иначе 
		ХранимыйФайл = Base64Строка(ДанныеХранилище);
	КонецЕсли;
	ДанныеXDTO.Вставить("ХранимыйФайл", ХранимыйФайл);
	
	РасширениеИмениФайла = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(ДанныеИБ.ИмяФайла);
	Если ПустаяСтрока(РасширениеИмениФайла) Тогда
		Если ДанныеИБ.ВидДанных=Перечисления.ВидыДополнительнойИнформацииОбъектов.Изображение Тогда
			РасширениеИмениФайла = "jpg";
		Иначе
			РасширениеИмениФайла = "tmp";
		КонецЕсли;
	КонецЕсли;
	ДанныеXDTO.Вставить("Расширение", РасширениеИмениФайла);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ТекстФайла) Тогда
		Описание = ДанныеИБ.ТекстФайла.Получить();
		Если НЕ ПустаяСтрока(Описание) Тогда
			ДанныеXDTO.Вставить("Описание", Описание);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ФизическиеЛица
Процедура ДобавитьПКО_Справочник_ФизическиеЛица(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛица";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "ФИО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаРегистрации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Имя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Отчество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Фамилия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Гражданство", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Гражданство;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НачалоПериода";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Страна";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДанныеФИО", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДанныеФИО;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Имя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НачалоПериода";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Отчество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Фамилия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тДанныеФИО.Период КАК НачалоПериода,
	|	тДанныеФИО.Фамилия,
	|	тДанныеФИО.Имя,
	|	тДанныеФИО.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ) КАК тДанныеФИО
	|ГДЕ
	|	тДанныеФИО.ФизЛицо = &ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода УБЫВ";
	
	Запрос.УстановитьПараметр("ФизЛицо", ДанныеИБ.Ссылка);
	Результат = Запрос.ВыполнитьПакет();
	ТаблДанныеФИО = Результат[0].Выгрузить();
	
	Если ТаблДанныеФИО.Количество()>0 Тогда
		СтрокаШапка = ТаблДанныеФИО[0];
		ДанныеXDTO.Вставить("Фамилия", СтрокаШапка.Фамилия);
		ДанныеXDTO.Вставить("Имя", СтрокаШапка.Имя);
		ДанныеXDTO.Вставить("Отчество", СтрокаШапка.Отчество);
		ДанныеXDTO.Вставить("ДанныеФИО", ТаблДанныеФИО);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ДатаРегистрации", ?(ЗначениеЗаполнено(ДанныеИБ.ДатаРождения),ДанныеИБ.ДатаРождения, Дата(1980,1,1)));
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ.Ссылка, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ФизическиеЛицаГруппа
Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛицаГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ХарактеристикиНоменклатуры
Процедура ДобавитьПКО_Справочник_ХарактеристикиНоменклатуры(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ХарактеристикиНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ХарактеристикиНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "AdditionalInfo";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты_Отправка";

КонецПроцедуры

Процедура ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Владелец характеристики
	Если ВерсияФорматаСравнить(КомпонентыОбмена, "1.5", "<=") Тогда	
		ДанныеXDTO.Вставить("AdditionalInfo",Строка(ДанныеИБ.Владелец.УникальныйИдентификатор()));
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ЦеновыеГруппы_Отправка
Процедура ДобавитьПКО_Справочник_ЦеновыеГруппы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЦеновыеГруппы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ЦеновыеГруппы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЦеновыеГруппы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Ссылка";

КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ШтрихкодыНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.РегистрыСведений.Штрихкоды;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НоменклатураОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "УпаковкаОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ХарактеристикаОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ШтрихкодОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Записи", ИнициализироватьТаблСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Записи;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Упаковка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Упаковки_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ХарактеристикиНоменклатуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.7") Тогда
		ДанныеXDTO.Вставить("Штрихкод", ДанныеИБ.Отбор.Штрихкод.Значение);
	Иначе
		ДанныеXDTO.Вставить("ШтрихкодОтбор", ДанныеИБ.Отбор.Штрихкод.Значение);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("НоменклатураОтбор", ДанныеИБ.Отбор.Владелец.Значение);
	
	ХарактеристикаОтбор = ДанныеИБ.Отбор.ХарактеристикаНоменклатуры.Значение;
	Если ЗначениеЗаполнено(ХарактеристикаОтбор) Тогда
		ДанныеXDTO.Вставить("ХарактеристикаОтбор", ХарактеристикаОтбор);
	КонецЕсли;
	
	УпаковкаОтбор = ДанныеИБ.Отбор.ЕдиницаИзмерения.Значение;
	Если ЗначениеЗаполнено(УпаковкаОтбор) Тогда
		ДанныеXDTO.Вставить("УпаковкаОтбор", УпаковкаОтбор);
	КонецЕсли;
	
	ТаблЗаписи = Новый ТаблицаЗначений;
	ТаблЗаписи.Колонки.Добавить("Штрихкод");
	ТаблЗаписи.Колонки.Добавить("Номенклатура");
	ТаблЗаписи.Колонки.Добавить("Характеристика");
	ТаблЗаписи.Колонки.Добавить("Упаковка");
	
	Для Каждого Запись Из ДанныеИБ Цикл
		НоваяСтрока = ТаблЗаписи.Добавить();
		НоваяСтрока.Штрихкод		= Запись.Штрихкод;
		НоваяСтрока.Номенклатура	= Запись.Владелец;
		НоваяСтрока.Характеристика	= Запись.ХарактеристикаНоменклатуры;
		НоваяСтрока.Упаковка		= Запись.ЕдиницаИзмерения;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Записи", ТаблЗаписи);
КонецПроцедуры
//} КонецОбласти
//{ Область Справочник_ЭквайринговыеТерминалы_Отправка
Процедура ДобавитьПКО_Справочник_ЭквайринговыеТерминалы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЭквайринговыеТерминалы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыЭквайринга;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЭквайринговыеТерминалы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентаБанковскиеСчета_Отпр";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Эквайрер";
	НоваяСтрока.СвойствоФормата = "Эквайер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Номер = ПривестиНомерКДлине(ДанныеИБ.Код, 12);
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("Номер", Номер);
		Возврат;
	КонецЕсли;
	
	// Выгружаем банковский счет
	ЗначениеСсылки = ДанныеИБ.ДоговорВзаиморасчетов;
	ВыгружаемыйОбъект = ЗначениеСсылки.ПолучитьОбъект();
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", Номер);
	
	//Если КомпонентыОбмена.ВыгруженныеОбъекты.Найти(ЗначениеСсылки)=Неопределено Тогда
	//	ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_ДоговорыКонтрагентаБанковскиеСчета_Отпр", "ИмяПКО");
	//	ДанныеXDTO = ДанныеXDTOИзДанныхИБ(КомпонентыОбмена, ВыгружаемыйОбъект, ПравилоКонвертации, Неопределено);
	//	ОбъектXDTO = ОбъектXDTOИзДанныхXDTO(КомпонентыОбмена, ДанныеXDTO, ПравилоКонвертации.ТипXDTO);
	//	ЗаписьXML = КомпонентыОбмена.ФайлОбмена;
	//	ОбъектXDTO.Проверить();
	//	МояФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	//	КомпонентыОбмена.ВыгруженныеОбъекты.Добавить(ВыгружаемыйОбъект);
	//КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//} КонецОбласти

//} КонецОбласти
//{ Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// ВидыОперацийИсправленияПоступленияРеализации_Отпр.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОперацийИсправленияПоступленияРеализации_Отпр";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийИсправленияПоступленияРеализации;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийИсправленияПоступленияРеализации";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, "ИсправлениеОшибки");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение, "СогласованноеИзменение");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ЗаявкиНаРасходование_ВидыРасчетовСКонтрагентами.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ЗаявкиНаРасходование_ВидыРасчетовСКонтрагентами";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийЗаявкиНаРасходование;
		ПравилоКонвертации.ТипXDTO = "ВидыРасчетовСКонтрагентами";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю, "СПокупателем");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику, "СПоставщиком");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами, "Прочее");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами, "КредитыИЗаймы");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидДоговораКонтрагента.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидДоговораКонтрагента";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоговоровКонтрагентов;
		ПравилоКонвертации.ТипXDTO = "ВидыДоговоров";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.Прочее, "Прочее");
		//ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, "СКомиссионером");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, "СПокупателем");
		//ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, "СКомитентом");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, "СПоставщиком");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, "СПокупателем");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "СПоставщиком");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидСчетаФактурыВыставленного.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидСчетаФактурыВыставленного";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидСчетаФактурыВыставленного;
		ПравилоКонвертации.ТипXDTO = "ВидыСчетаФактуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный, "Корректировочный");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаАванс, "НаАванс");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента, "НаАвансКомитента");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию, "НаРеализацию");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидСчетаФактурыПолученного.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидСчетаФактурыПолученного";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидСчетаФактурыПолученного;
		ПравилоКонвертации.ТипXDTO = "ВидыСчетаФактуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.Корректировочный, "Корректировочный");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.НаАванс, "НаАванс");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.НаПоступление, "НаПоступление");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыДоговораВидыРасчетов_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыДоговораВидыРасчетов_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоговоровКонтрагентов;
		ПравилоКонвертации.ТипXDTO = "ВидыРасчетовСКонтрагентами";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.Прочее, "Прочее");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, "СПокупателем");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, "СПоставщиком");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, "СПокупателем");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "СПоставщиком");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыОперацийКорректировкаДолга_Отправ.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОперацийКорректировкаДолга_Отправ";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийКорректировкаДолга;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийКорректировкаДолга";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности, "ПереносЗадолженности");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета, "ПроведениеВзаимозачета");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности, "СписаниеЗадолженности");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыОперацийПоПлатежнойКарте.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОперацийПоПлатежнойКарте";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийПоПлатежнойКарте";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю, "ВозвратОплатыКлиентуНаПлатежнуюКарту");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя, "ОплатаОтКлиентаПлатежнойКартой");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыОперацийСборкаТоваров.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОперацийСборкаТоваров";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийКомплектацияНоменклатуры;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийСборкаТоваров";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация, "Сборка");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация, "Разборка");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыПоступленияТоваров.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыПоступленияТоваров";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыПоступленияТоваров;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийПоступленияТоваров";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыПоступленияТоваров.НаСклад, "ПокупкаУПоставщика");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыПоступленияТоваров.ПоОрдеру, "ПокупкаУПоставщика");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ВидыСкладов.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыСкладов";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыСкладов;
		ПравилоКонвертации.ТипXDTO = "ТипыСкладов";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыСкладов.НТТ, "НеавтоматизированнаяТорговаяТочка");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыСкладов.Оптовый, "Оптовый");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыСкладов.Розничный, "Розничный");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ПолФизлиц.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ПолФизлиц";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическихЛиц;
		ПравилоКонвертации.ТипXDTO = "Пол";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическихЛиц.Женский, "Женский");
		ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическихЛиц.Мужской, "Мужской");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_СостоянияОбъектов.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_СостоянияОбъектов";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СостоянияОбъектов;
		ПравилоКонвертации.ТипXDTO = "СтатусыЗаявокНаРасходДС";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.СостоянияОбъектов.Отклонен, "Отклонена");
		ЗначенияДляОтправки.Вставить(Перечисления.СостоянияОбъектов.Отложен, "НеСогласована");
		ЗначенияДляОтправки.Вставить(Перечисления.СостоянияОбъектов.Подготовлен, "Согласована");
		ЗначенияДляОтправки.Вставить(Перечисления.СостоянияОбъектов.Утвержден, "КОплате");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_СпособыРасчетаКомВознагр.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_СпособыРасчетаКомВознагр";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыРасчетаКомиссионногоВознаграждения;
		ПравилоКонвертации.ТипXDTO = "СпособыРасчетаКомиссионногоВознаграждения";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается, "НеРассчитывается");
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли, "ПроцентОтРазницыСуммПродажиИПоступления");
		ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи, "ПроцентОтСуммыПродажи");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_СтавкиНДС.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_СтавкиНДС";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
		ПравилоКонвертации.ТипXDTO = "СтавкиНДС";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС10");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС10_110");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18, "НДС18");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18_118, "НДС18_118");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20, "НДС2");
		ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20_120, "НДС2_102");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ТипыНоменклатуры.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ТипыНоменклатуры";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
		ПравилоКонвертации.ТипXDTO = "ТипыНоменклатуры";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Комплект, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Набор, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Товар, "Товар");
		ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Услуга, "Услуга");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ЮрФизЛицо.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ЮрФизЛицо";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮрФизЛицо;
		ПравилоКонвертации.ТипXDTO = "ЮридическоеФизическоеЛицо";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ФизЛицо, "ФизическоеЛицо");
		ЗначенияДляОтправки.Вставить(Перечисления.ЮрФизЛицо.ЮрЛицо, "ЮридическоеЛицо");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
КонецПроцедуры

//} КонецОбласти
//{ Область Алгоритмы


Функция ПолучитьОтветственныеЛицаОрганизации(Организация,ДатаСреза,ПараметрыКонвертации)
	Результат = Новый Структура("Руководитель, ГлавныйБухгалтер, Кассир");
	
	Если НЕ ПараметрыКонвертации.Свойство("ТаблицаГлавныйБухгалтер") Тогда
		
		ТаблицаГлавныйБухгалтер = Новый ТаблицаЗначений;
		ТаблицаГлавныйБухгалтер.Колонки.Добавить("Организация");
		ТаблицаГлавныйБухгалтер.Колонки.Добавить("ДатаСреза");
		ТаблицаГлавныйБухгалтер.Колонки.Добавить("Руководитель");
		ТаблицаГлавныйБухгалтер.Колонки.Добавить("ГлавныйБухгалтер");
		ТаблицаГлавныйБухгалтер.Колонки.Добавить("Кассир");
		
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаГлавныйБухгалтер.НайтиСтроки(Новый Структура("Организация,ДатаСреза",Организация,ДатаСреза));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(Результат,НайденнаяСтрока);
		Возврат Результат;
	КонецЦикла;
		
	
	 Если ЗначениеЗаполнено(Организация) Тогда
	
	  	ЗапросПоЛицам = Новый Запрос();
		ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
		ЗапросПоЛицам.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацииСрезПоследних.ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацииСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизации.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацииСрезПоследних";
				
		Выборка = ЗапросПоЛицам.Выполнить().Выбрать();
				
		Пока Выборка.Следующий() Цикл
	
	  		Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.Руководитель Тогда
				Результат.Руководитель            = Выборка.ФизическоеЛицо;
	
	  		ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.ГлавныйБухгалтер Тогда
				Результат.ГлавныйБухгалтер        = Выборка.ФизическоеЛицо;
	
	  		ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизации.Кассир Тогда
				Результат.Кассир                  = Выборка.ФизическоеЛицо;
	
	  		КонецЕсли;
	
		КонецЦикла;
		
		НоваяСтрока = ТаблицаГлавныйБухгалтер.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ДатаСреза = ДатаСреза;
		
	КонецЕсли;
	
	Возврат Результат;
	
	
	Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
КонецФункции
Функция СкладДляВыгрузки(СкладИсходный, ПараметрыКонвертации, СтруктураТЧ=Неопределено)
	Если НЕ ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = ЛОЖЬ 
		И ТипЗнч(СкладИсходный)=Тип("СправочникСсылка.Склады") Тогда
		
		Если ЗначениеЗаполнено(СкладИсходный) Тогда
			Возврат СкладИсходный;
		КонецЕсли;
		
	ИначеЕсли НЕ СтруктураТЧ=Неопределено Тогда
		Для Каждого ТекТЧ Из СтруктураТЧ Цикл
			МассивСкладов = ТекТЧ.Значение.ВыгрузитьКолонку("Склад");
			ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСкладов);
			Если МассивСкладов.Количество()=1 Тогда
				Возврат МассивСкладов[0];
			Иначе
				Склад = Неопределено;
				КоличествоУникальныхСкладов = 0;
				Для Каждого ТекСклад Из МассивСкладов Цикл
					Если ЗначениеЗаполнено(ТекСклад) Тогда
						КоличествоУникальныхСкладов = КоличествоУникальныхСкладов + 1;
						Склад = ТекСклад;
					КонецЕсли;
				КонецЦикла;
				Если КоличествоУникальныхСкладов=1 Тогда
					Возврат Склад;
				Иначе
					//ВызватьИсключение НСтр("ru = 'Несколько складов в документе, ошибка выгрузки'");	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// отправляем пустой склад
	Возврат Справочники.Склады.ПустаяСсылка();
КонецФункции
Функция ИмяПКОДляДокументаОснованияСФВыданного(ДокументОснование, Организация = Неопределено)
	ИмяПКО = "";
	
	ТипСсылки = ТипЗнч(ДокументОснование);
	
	Если ТипСсылки = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Ордер_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИмяПКО = "Документ_КорректировкаРеализации_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		ИмяПКО = "Документ_КорректировкаДолга_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
	        ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
	КонецЕсли;
	
	Возврат ИмяПКО;
КонецФункции
Функция ПолучитьВидАП(ВидАлкогольнойПродукции)
	Если ЗначениеЗаполнено(ВидАлкогольнойПродукции) Тогда
		СтруктураВидАП = Новый Структура("Код, Наименование, ВидЛицензии");
		ЗаполнитьЗначенияСвойств(СтруктураВидАП, ВидАлкогольнойПродукции);
		ВидАлкогольнойПродукции_ВидЛицензии = ВидАлкогольнойПродукции.ВидЛицензии;
		Если ЗначениеЗаполнено(ВидАлкогольнойПродукции_ВидЛицензии) Тогда
			ВидЛицензии = "";
			Если ВидАлкогольнойПродукции_ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво Тогда
				ВидЛицензии = "Пиво";
			ИначеЕсли ВидАлкогольнойПродукции_ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция Тогда
				ВидЛицензии = "АлкогольнаяПродукция";
			ИначеЕсли ВидАлкогольнойПродукции_ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция Тогда
				ВидЛицензии = "СпиртосодержащаяПищеваяПродукция";
			ИначеЕсли ВидАлкогольнойПродукции_ВидЛицензии = Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция Тогда
				ВидЛицензии = "СпиртосодержащаяНеПищеваяПродукция";
			КонецЕсли;
			СтруктураВидАП.Вставить("ВидЛицензии", ВидЛицензии);
		КонецЕсли;
		Возврат СтруктураВидАП;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции
Функция АлгоритмВыгрузкиРасчетыСКонтрагентамиОтправка(ДанныеИБ)
	АлгоритмКонвертации = "";
	ВидОперации = ДанныеИБ.ВидОперации;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя 
		ИЛИ  ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя 
		Тогда 
		АлгоритмКонвертации = "ОплатаОтПокупателя";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком 
		Тогда
		АлгоритмКонвертации = "ВозвратОтПоставщика";
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам 
		Тогда
		АлгоритмКонвертации = "ПрочееПоступление_РасчетыПоКредитамИЗаймам";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами 
		Тогда
		АлгоритмКонвертации = "ПрочееПоступление_ПрочиеРасчетыСКонтрагентами";
		
	Иначе
		АлгоритмКонвертации = "ПрочееПоступление_ПрочиеРасчетыСКонтрагентами";
		
	КонецЕсли;
	
	Возврат АлгоритмКонвертации;
КонецФункции
Функция ВидРасчетовСКонтрагентомПоступление(АлгоритмКонвертации)
	Если АлгоритмКонвертации = "ОплатаОтПокупателя"
		Или АлгоритмКонвертации = "ОплатаОтПокупателяИнтеркампани" Тогда
		Возврат "СПокупателем";
	ИначеЕсли АлгоритмКонвертации = "ВозвратОтПоставщика"
		Или АлгоритмКонвертации = "ВозвратОтПоставщикаИнтеркампани" Тогда
		Возврат "СПоставщиком";
	ИначеЕсли АлгоритмКонвертации = "ПрочееПоступление_ПрочиеРасчетыСКонтрагентами"
		Или АлгоритмКонвертации = "КонвертацияВалюты_ПрочиеРасчетыСКонтрагентами"
		Или АлгоритмКонвертации = "Депозиты_ПрочиеРасчетыСКонтрагентами" Тогда
		Возврат "Прочее";
	ИначеЕсли АлгоритмКонвертации = "ПрочееПоступление_РасчетыПоКредитамИЗаймам" Тогда
		Возврат "КредитыИЗаймы";
	ИначеЕсли АлгоритмКонвертации = "Кредиты_РасчетыПоКредитамИЗаймам" Тогда
		Возврат "КредитыИЗаймы";
	Иначе
		Возврат "Прочее";
	КонецЕсли;
КонецФункции
Процедура ВыгрузитьРасшифровкуКонтрагенты_ПоступлениеДС(ДанныеИБ, ДанныеXDTO, АлгоритмКонвертации)
	ДанныеШапки = ДанныеИБ.ДополнительныеСвойства.ДанныеШапки;
	
	РасшифровкаПлатежаРасширенная = ДанныеИБ.ДополнительныеСвойства.РасшифровкаПлатежаРасширенная;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("Договор");
	ТабРП.Колонки.Добавить("Заказ");
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВзаиморасчетов");
	ТабРП.Колонки.Добавить("СуммаНДС");
	ТабРП.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРП.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРП.Колонки.Добавить("СтавкаНДС");
	ТабРП.Колонки.Добавить("ВидРасчетовРасширенный");
	ТабРП.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	
	РП_ИБ = РасшифровкаПлатежаРасширенная.Выгрузить();
	
	Если Найти(АлгоритмКонвертации, "ОплатаОтПокупателя") > 0
		Или Найти(АлгоритмКонвертации, "ВозвратОтПоставщика") > 0
		Или Найти(АлгоритмКонвертации, "ПрочиеРасчетыСКонтрагентами") > 0
		Или Найти(АлгоритмКонвертации, "ПрочееПоступление_РасчетыПоКредитамИЗаймам") > 0
		Тогда
		// Многострочная расшифровка платежа.
	
		Для Каждого СтрокаРП_ИБ ИЗ РП_ИБ Цикл
			СтрокаРП = ТабРП.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРП, СтрокаРП_ИБ);
			
			// ВидРасчетовРасширенный и СчетУчетаРасчетовСКонтрагентом
			СчетУчетаРасчетовСКонтрагентом = "";
			ВидРасчетовРасширенный = "";
			
			//Если СтрокаРП_ИБ.СтатьяДДС=Справочники.СтатьиДвиженияДенежныхСредств.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
			//	ВидРасчетовРасширенный = "";
			//КонецЕсли;
			
			СтрокаРП.ВидРасчетовРасширенный = ВидРасчетовРасширенный;
			СтрокаРП.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
				
			//Заказ
			Если ЗначениеЗаполнено(СтрокаРП_ИБ.Заказ) Тогда
				ТипСсылки = ТипЗнч(СтрокаРП_ИБ.Заказ);
				ИмяПКО = "";
	
				Если ТипСсылки = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
				ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
				ИначеЕсли  ТипСсылки = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					ИмяПКО = "Документ_ЗаказКлиента_Отправка";
				ИначеЕсли  ТипСсылки = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					ИмяПКО = "Документ_ЗаказПоставщику_Отправка";
				КонецЕсли;
				Если ИмяПКО <> "" Тогда
					СтрокаРП.Заказ = Новый Структура("Значение, ИмяПКО", СтрокаРП_ИБ.Заказ, ИмяПКО);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
Процедура ПодготовитьДанныеКонтактнаяИнформация(СсылкаКИ, ДанныеXDTO)
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКИСсылка");
	
	СоответствиеВидаКИ = Новый Соответствие;
	СоответствиеВидаКИ.Вставить("EmailОрганизации",                                       "АдресЭлектроннойПочты");
	СоответствиеВидаКИ.Вставить("EmailФизЛица",                                           "ПользовательскаяКИАдресЭлектроннойПочты");
	СоответствиеВидаКИ.Вставить("ИнформАдресФизЛица",                                     "ПользовательскаяКИАдрес");
	СоответствиеВидаКИ.Вставить("АдресДоставкиКонтрагента",                               "ПользовательскаяКИАдрес");
	СоответствиеВидаКИ.Вставить("ЮрАдресФизЛица",                                         "ЮридическийАдрес");
	СоответствиеВидаКИ.Вставить("ФактАдресФизЛица",                                       "ФактическийАдрес");
	СоответствиеВидаКИ.Вставить("ИнострАдресФизЛица",                                     "ПользовательскаяКИАдрес");
	СоответствиеВидаКИ.Вставить("АдресЭлектроннойПочтыКонтактногоЛицаКонтрагента",        "АдресЭлектроннойПочты");
	СоответствиеВидаКИ.Вставить("АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами",   "АдресЭлектроннойПочты");
	СоответствиеВидаКИ.Вставить("КонтактнТелефонКандидата",                               "Телефон");
	СоответствиеВидаКИ.Вставить("МобильныйТелефонКонтактногоЛицаКонтрагента",             "Телефон");
	СоответствиеВидаКИ.Вставить("АдресОрганизацииПочтовый",                               "ПочтовыйАдрес");
	СоответствиеВидаКИ.Вставить("РабочийТелефонКонтактногоЛицаКонтрагента",               "ТелефонРабочий");
	СоответствиеВидаКИ.Вставить("СлужебныйАдресЭлектроннойПочтыПользователя",             "АдресЭлектроннойПочты");
	СоответствиеВидаКИ.Вставить("ТелефонКонтрагента",                                     "Телефон");
	СоответствиеВидаКИ.Вставить("ТелефонОрганизации",                                     "Телефон");
	СоответствиеВидаКИ.Вставить("ТелефонПоЮрАдресуОрганизации",                           "Телефон");
	СоответствиеВидаКИ.Вставить("ТелефонФизЛица",                                         "ТелефонДомашний");
	СоответствиеВидаКИ.Вставить("ТелефонСлужебный",                                       "ТелефонРабочий");
	СоответствиеВидаКИ.Вставить("АдресИнострОрганизацииУчред",                            "ПользовательскаяКИАдрес");
	СоответствиеВидаКИ.Вставить("ФаксКонтрагента",                                        "ПользовательскаяКИФакс");
	СоответствиеВидаКИ.Вставить("ФаксОрганизации",                                        "ПользовательскаяКИФакс");
	СоответствиеВидаКИ.Вставить("ФактАдресКонтрагента",                                   "ФактическийАдрес");
	СоответствиеВидаКИ.Вставить("ФактАдресОрганизации",                                   "ФактическийАдрес");
	СоответствиеВидаКИ.Вставить("ЮрАдресКонтрагента",                                     "ЮридическийАдрес");
	СоответствиеВидаКИ.Вставить("ЮрАдресОрганизации",                                     "ЮридическийАдрес");
	
	СоответствиеТипаКИ = Новый Соответствие;
	СоответствиеТипаКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес,                  "ПользовательскаяКИАдрес");
	СоответствиеТипаКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон,                "ПользовательскаяКИТелефон");
	СоответствиеТипаКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,  "ПользовательскаяКИАдресЭлектроннойПочты");
	СоответствиеТипаКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница,            "ПользовательскаяКИВебСтраница");
	СоответствиеТипаКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.Другое,                 "ПользовательскаяКИДругое");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	КонтактнаяИнформация.Поле1 КАК Поле1,
	|	КонтактнаяИнформация.Поле2 КАК Поле2,
	|	КонтактнаяИнформация.Поле3 КАК Поле3,
	|	КонтактнаяИнформация.Поле4 КАК Поле4,
	|	КонтактнаяИнформация.Поле5 КАК Поле5,
	|	КонтактнаяИнформация.Поле6 КАК Поле6,
	|	КонтактнаяИнформация.Поле7 КАК Поле7,
	|	КонтактнаяИнформация.Поле8 КАК Поле8,
	|	КонтактнаяИнформация.Поле9 КАК Поле9,
	|	КонтактнаяИнформация.Поле10 КАК Поле10,
	|	КонтактнаяИнформация.ТипДома КАК ТипДома,
	|	КонтактнаяИнформация.ТипКорпуса КАК ТипКорпуса,
	|	КонтактнаяИнформация.ТипКвартиры КАК ТипКвартиры,
	|	КонтактнаяИнформация.Вид.Наименование КАК ВидНаименование,
	|	КонтактнаяИнформация.Вид.Предопределенный КАК ВидПредопределенный
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &СсылкаКИ
	|	И НЕ КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.КонтактнТелефонКандидата))";
	
	Запрос.УстановитьПараметр("СсылкаКИ", СсылкаКИ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ВидыКИ = Новый Массив;
	Пока Выборка.Следующий() Цикл
		//ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ВидКИ = Неопределено;
		Если Выборка.ВидПредопределенный=Истина Тогда
			ВидКИ = СоответствиеВидаКИ.Получить(Справочники.ВидыКонтактнойИнформации.ПолучитьИмяПредопределенного(Выборка.Вид));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидКИ) Тогда
			ВидКИ = СоответствиеТипаКИ.Получить(Выборка.Тип);
		КонецЕсли;
		НаименованиеКонтактнойИнформации = Выборка.ВидНаименование;
		Если ВидыКИ.Найти(ВидКИ)=Неопределено Тогда
			ВидыКИ.Добавить(ВидКИ);
		Иначе
			Продолжить; // т.к. при загрузке возникает ошибка
		КонецЕсли;
	
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			Если ЗначениеЗаполнено(Выборка.ТипДома) Тогда
				ТипДома = НРег(Выборка.ТипДома.Метаданные().ЗначенияПеречисления[Перечисления.ТипыДомов.Индекс(Выборка.ТипДома)].Имя);
			Иначе
				ТипДома = Выборка.ТипДома;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ТипКорпуса) Тогда
				ТипКорпуса = НРег(Выборка.ТипКорпуса.Метаданные().ЗначенияПеречисления[Перечисления.ТипыКорпусов.Индекс(Выборка.ТипКорпуса)].Имя);
			Иначе
				ТипКорпуса = Выборка.ТипКорпуса;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ТипКвартиры) Тогда
				ТипКвартиры = ?(Выборка.ТипКвартиры = Перечисления.ТипыКвартир.Квартира,
				"кв.", НРег(Выборка.ТипКвартиры.Метаданные().ЗначенияПеречисления[Перечисления.ТипыКвартир.Индекс(Выборка.ТипКвартиры)].Имя));
			Иначе
				ТипКвартиры = Выборка.ТипКвартиры;
			КонецЕсли;				
			
			ЗначенияПолей = ?(ЗначениеЗаполнено(Выборка.Поле1), "Индекс=" + Выборка.Поле1 + Символы.ПС, "")
			+ ?(ЗначениеЗаполнено(Выборка.Поле2), "Регион="			+ Выборка.Поле2 + Символы.ПС, "")
			+ ?(ЗначениеЗаполнено(Выборка.Поле3), "Район="			+ Выборка.Поле3 + Символы.ПС, "")
			+ ?(ЗначениеЗаполнено(Выборка.Поле4), "Город="			+ Выборка.Поле4 + Символы.ПС, "") 
			+ ?(ЗначениеЗаполнено(Выборка.Поле5), "НаселенныйПункт="	+ Выборка.Поле5 + Символы.ПС, "")
			+ ?(ЗначениеЗаполнено(Выборка.Поле6), "Улица="			+ Выборка.Поле6 + Символы.ПС, "")
			+ ?(ЗначениеЗаполнено(Выборка.Поле7), "Дом="				+ Выборка.Поле7 + Символы.ПС, "")
			+ ?(ЗначениеЗаполнено(Выборка.Поле8), "Корпус="			+ Выборка.Поле8 + Символы.ПС, "")
			+ ?(ЗначениеЗаполнено(Выборка.Поле9), "Квартира="		+ Выборка.Поле9 + Символы.ПС, "")
			+ ?(ЗначениеЗаполнено(ТипДома),		 "ТипДома="			+ ТипДома		+ Символы.ПС, "")
			+ ?(ЗначениеЗаполнено(ТипКорпуса),	 "ТипКорпуса="		+ ТипКорпуса	+ Символы.ПС, "")
			+ ?(ЗначениеЗаполнено(ТипКвартиры),	 "ТипКвартиры="		+ ТипКвартиры, "");
			
		ИначеЕсли Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			
			Если ПустаяСтрока(Выборка.Поле1)  
				И ПустаяСтрока(Выборка.Поле2)
				И ПустаяСтрока(Выборка.Поле3)
				И ПустаяСтрока(Выборка.Поле4) Тогда
				ЗначенияПолей = Выборка.Представление;
			Иначе
				ЗначенияПолей = ?(ЗначениеЗаполнено(Выборка.Поле1), "КодСтраны="     + Выборка.Поле1 + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(Выборка.Поле2), "КодГорода="     + Выборка.Поле2 + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(Выборка.Поле3), "НомерТелефона=" + Выборка.Поле3 + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(Выборка.Поле4), "Добавочный="    + Выборка.Поле4 + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(Выборка.Представление), "Представление="    + Выборка.Представление, "");
			КонецЕсли;
			
			НомерТелефонаБезКодов = Выборка.Поле3;
			НомерТелефона         = Выборка.Поле1 + Выборка.Поле2 + Выборка.Поле3;
			
		ИначеЕсли Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			ЗначенияПолей = Выборка.Представление;
			//?(ЗначениеЗаполнено(Выборка.Представление), "ЭлектроннаяПочта=" + Выборка.Представление + Символы.ПС
			//+ "Представление=" + Выборка.Представление, "");
		Иначе
			ЗначенияПолей="";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидКИ) И ЗначениеЗаполнено(ЗначенияПолей) Тогда
			НоваяСтрока = ТабКонтактнаяИнформация.Добавить();
			НоваяСтрока.ВидКонтактнойИнформации = ВидКИ;
			НоваяСтрока.ЗначенияПолей = ЗначенияПолей;
			НоваяСтрока.НаименованиеКонтактнойИнформации = НаименованиеКонтактнойИнформации;
			Если ТипЗнч(Выборка.Вид)=Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				НоваяСтрока.ВидКИСсылка = Выборка.Вид;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Функция ЗначениеРеквизитаОтбора(ДанныеИБ, МетаданныеОбъекта, ИмяРеквизита, РеквизитыОтбора=Неопределено, ЗначениеПоУмолчанию = Неопределено)
	ЗначениеРеквизитаОтбора = ЗначениеПоУмолчанию;
	Если НЕ РеквизитыОтбора=Неопределено И РеквизитыОтбора.Свойство(ИмяРеквизита,ЗначениеРеквизитаОтбора) Тогда
		Возврат ЗначениеРеквизитаОтбора;
	КонецЕсли;
	
	Если МетаданныеОбъекта=Неопределено Тогда
		МетаданныеОбъекта = ДанныеИБ.Метаданные();
	КонецЕсли;
	Если  НЕ МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита)=Неопределено Тогда
		Возврат ДанныеИБ[ИмяРеквизита];
	КонецЕсли;
	Возврат ЗначениеПоУмолчанию;
КонецФункции
Процедура ОтборНоменклатурыВТаблице(КомпонентыОбмена, ТаблицаДокумента)
	
КонецПроцедуры
Процедура ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, ЕстьДопРеквизиты = Ложь)
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство");
	ТаблицаДопРеквизитов.Колонки.Добавить("ЗначениеСвойства");
	
	Если ЕстьДопРеквизиты Тогда
		//ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБ.ДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Свойство КАК Свойство,
		|	ЗначенияСвойствОбъектов.Значение КАК Значение,
		|	ЛОЖЬ КАК ЭтоКатегория
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КатегорииОбъектов.Категория,
		|	ИСТИНА,
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|ГДЕ
		|	КатегорииОбъектов.Объект = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	КешСоответствий = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Свойство) ИЛИ НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ТипЗначенияСвойства = ТипЗнч(Выборка.Значение);
		ИмяПКО = "";
		ИмяПКОГруппа = "";
		Если Выборка.ЭтоКатегория Тогда
			НовСтрока = ТаблицаДопРеквизитов.Добавить();
			НовСтрока.Свойство = Новый Структура("Значение, ИмяПКО", Выборка.Свойство, "Справочник_ДополнительныеРеквизитыКатегории_Отправ");
			НовСтрока.ЗначениеСвойства = Истина;
			Продолжить;
		ИначеЕсли ТипЗначенияСвойства = Тип("Число") 
			ИЛИ ТипЗначенияСвойства = Тип("Строка")
			ИЛИ ТипЗначенияСвойства = Тип("Булево")
			ИЛИ ТипЗначенияСвойства = Тип("Дата") Тогда
			НовСтрока = ТаблицаДопРеквизитов.Добавить();
			НовСтрока.Свойство = Выборка.Свойство;
			НовСтрока.ЗначениеСвойства = Выборка.Значение;
			Продолжить;
		КонецЕсли;
		//ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.Значение, ИмяПКО, ИмяПКОГруппа);
		ЗначениеСвойства = ПолучитьИмяПКОДляОтправкиПоСсылке(КомпонентыОбмена, Выборка.Значение, "ДополнительныеРеквизиты,ЗначениеСвойства", КешСоответствий);
		Если ЗначениеСвойства=Неопределено Тогда
			Продолжить;
		КонецЕсли; 	
		НовСтрока = ТаблицаДопРеквизитов.Добавить();
		НовСтрока.Свойство = Выборка.Свойство;
		НовСтрока.ЗначениеСвойства = ЗначениеСвойства;
	КонецЦикла;	
	
	Если ТаблицаДопРеквизитов.КОличество() > 0 Тогда
		ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопРеквизитов);
	КонецЕсли;
КонецПроцедуры
Функция ПолучитьИдентификаторПлатежа(ДанныеИБ)
	Попытка
		Возврат ДанныеИБ.ИдентификаторПлатежа;
	Исключение
	КонецПопытки;
	Возврат "";
КонецФункции
Процедура ПередКонвертациейУТ(КомпонентыОбмена)
	УстановитьПКОПередКонвертацией(КомпонентыОбмена);
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	
	Если КомпонентыОбмена.НаправлениеОбмена="Отправка" Тогда
		
		ПараметрыКонвертации.Вставить("ВыгружатьСерииНоменклатуры", Ложь);
		
		ПараметрыКонвертации.Вставить("ИспользоватьОтборПоНоменклатуре", Ложь);
		ПараметрыКонвертации.Вставить("ВыгружатьСерииНоменклатуры", Ложь);
		ПараметрыКонвертации.Вставить("ВыгружатьУпаковкиНоменклатуры", Ложь);
		ПараметрыКонвертации.Вставить("НеВыгружатьХарактеристики", Ложь);
		ПараметрыКонвертации.Вставить("ВыгружатьСвойстваКакРеквизиты", Ложь);
		
		ЗаполнитьЗначенияСвойств(КомпонентыОбмена.ПараметрыКонвертации, КомпонентыОбмена.СвойстваУзлаПланаОбмена.СохраненныеНастройкиУзлаОбмена);
		
		ПараметрыКонвертации.Вставить("ИспользоватьОтборПоОрганизациям", ПараметрыКонвертации.Свойство("Организации") И ПараметрыКонвертации.Организации.Количество()>0);
		ПараметрыКонвертации.Вставить("ИспользоватьОтборПоСкладам", ПараметрыКонвертации.Свойство("Склады") И ПараметрыКонвертации.Склады.Количество()>0);
		
		ЕстьСерииВФормате = СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.СерииНоменклатуры");
		Если НЕ ЕстьСерииВФормате  Тогда
			ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_СерииНоменклатуры15_Отправка", "ИмяПКО");
			Если НЕ ПравилоКонвертации=Неопределено Тогда
				ПравилоКонвертации.ИмяПКО =  "Справочник_СерииНоменклатуры_Отправка";
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКонвертации.ВыгружатьУпаковкиНоменклатуры Тогда
			ПараметрыКонвертации.ВыгружатьСерииНоменклатуры = ЕстьСерииВФормате И ПараметрыКонвертации.ВыгружатьСерииНоменклатуры;
		КонецЕсли;
		
		ПараметрыКонвертации.Вставить("ИспользоватьХарактеристикиНоменклатуры", Константы.ИспользоватьХарактеристикиНоменклатуры.Получить());
		ПараметрыКонвертации.Вставить("ВыгружатьХарактеристикиНоменклатуры", ПараметрыКонвертации.ИспользоватьХарактеристикиНоменклатуры);
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена И ПараметрыКонвертации.ИспользоватьХарактеристикиНоменклатуры Тогда
			СоставОбмена = КомпонентыОбмена.УзелКорреспондента.ПолучитьОбъект().Метаданные().Состав;
			МетаданныеХарактеристик = Метаданные.Справочники.ХарактеристикиНоменклатуры;
			Если НЕ СоставОбмена.Найти(МетаданныеХарактеристик)=Неопределено Тогда
				ПараметрыКонвертации.ВыгружатьХарактеристикиНоменклатуры = Ложь; // Выгрузятся самостоятельно
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли КомпонентыОбмена.НаправлениеОбмена="Получение" Тогда
	
		ПараметрыКонвертации.Вставить("ПроводитьДокументы", Истина);
		ПараметрыКонвертации.Вставить("КомментарийДокумента", "");
		ПараметрыКонвертации.Вставить("НеЗагружатьСделкуПоРТУ", Ложь);
		
		ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
		ПараметрыКонвертации.Вставить("ОтражатьДокументыВУправленческомУчете", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОтражатьДокументыВУправленческомУчете"));
		ПараметрыКонвертации.Вставить("ОтражатьДокументыВБухгалтерскомУчете",  УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОтражатьДокументыВБухгалтерскомУчете"));
		ПараметрыКонвертации.Вставить("ОтражатьДокументыВНалоговомУчете",      УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОтражатьДокументыВНалоговомУчете"));
		
		ЗаполнитьЗначенияСвойств(КомпонентыОбмена.ПараметрыКонвертации, КомпонентыОбмена.СвойстваУзлаПланаОбмена.СохраненныеНастройкиУзлаОбмена);
	
		
	КонецЕсли;
КонецПроцедуры
Процедура ПослеКонвертацииУТ(КомпонентыОбмена)
	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда 
		Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ОстаткиДляВыгрузки") Тогда
			ВыгрузитьОстаткиУТ(КомпонентыОбмена);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Функция ИмяПКОДляДокументаОснованияСФПолученного(ДокументОснование)
	ТипСсылки = ТипЗнч(ДокументОснование);
	ИмяПКО = "";
	
	Если ТипСсылки = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ИмяПКО = "Документ_ПоступлениеДопРасходов_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ИмяПКО = "Документ_КорректировкаПоступления_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаДолга") Тогда
		ИмяПКО = "Документ_КорректировкаДолга_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
		
	КонецЕсли;
	Возврат ИмяПКО;
КонецФункции
Процедура УстановитьВсеИспользованиеПКО(ИспользованиеПКО, ИспользоватьВсе)
	Для Каждого ТекПКО Из ИспользованиеПКО Цикл
		ИспользованиеПКО[ТекПКО.Ключ] = ИспользоватьВсе;
	КонецЦикла;
КонецПроцедуры
Процедура ВыгрузитьПогашениеЗадолженности(ТаблПогашениеЗадолженности, ДанныеXDTO)
	// ПогашениеЗадолженности
	ТаблПогашениеЗадолженности.Колонки.Добавить("ДокументРасчетов");
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТЧ Из ТаблПогашениеЗадолженности Цикл
		ИмяПКО = ИмяПКОДляПогашениеЗадолженности(СтрокаТЧ.ДокументРасчетовСКонтрагентом, "РеализацияТоваровУслуг");
		Если ПустаяСтрока(ИмяПКО) Тогда
			СтрокиКУдалению.Добавить(СтрокаТЧ);
		Иначе
			СтрокаТЧ.ДокументРасчетов =  Новый Структура("Значение, ИмяПКО", СтрокаТЧ.ДокументРасчетовСКонтрагентом, ИмяПКО)
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТЧ Из СтрокиКУдалению Цикл
		ТаблПогашениеЗадолженности.Удалить(СтрокаТЧ);
	КонецЦикла;
	Если ТаблПогашениеЗадолженности.Количество()>0 Тогда
		ДанныеXDTO.Вставить("ПогашениеЗадолженности", ТаблПогашениеЗадолженности);
	КонецЕсли;
КонецПроцедуры
Процедура ОчиститьИспользованиеПКО(ИспользованиеПКО)
	Для Каждого Правило Из ИспользованиеПКО Цикл
		ИспользованиеПКО.Удалить(Правило.Ключ);
	КонецЦикла;
КонецПроцедуры
Процедура УстановитьИспользованиеПКО(ИспользованиеПКО, Режим)
	Для Каждого Правило Из ИспользованиеПКО Цикл
		ИспользованиеПКО[Правило.Ключ] = Режим;
	КонецЦикла;
КонецПроцедуры
Функция ПолучитьЗначениеПараметраКонвертации(КомпонентыОбмена, ИмяСвойства, ЗначениеСравнения=Неопределено)
	Если ЗначениеСравнения=Неопределено Тогда
			Если КомпонентыОбмена.ПараметрыКонвертации.Свойство(ИмяСвойства) Тогда
				Возврат КомпонентыОбмена.ПараметрыКонвертации[ИмяСвойства];
			Иначе
				Возврат Неопределено;
			КонецЕсли	
		Иначе
			Возврат КомпонентыОбмена.ПараметрыКонвертации.Свойство(ИмяСвойства) И КомпонентыОбмена.ПараметрыКонвертации[ИмяСвойства]=ЗначениеСравнения;
	КонецЕсли;
КонецФункции
Функция ПолучитьРеквизитыОбъектаДляВыгрузки(ДанныеИБ, МетаданныеОбъекта, ИменаРеквизитов=Неопределено, ИменаРеквизитовФормата=Неопределено)
	Если МетаданныеОбъекта=Неопределено Тогда
		МетаданныеОбъекта =  ДанныеИБ.Метаданные();
	КонецЕсли;
	
	ДопДанные = Новый Структура;
	СписокВыгружаемыхРеквизитов = Новый СписокЗначений;
	ВыгружатьВсеРеквизиты = ИменаРеквизитов=Неопределено;
	ЕстьИменаРеквизитовФормата = НЕ ИменаРеквизитовФормата=Неопределено;
	
	//Если НЕ ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) И ДанныеИБ.Предопределенный Тогда
	//	ДопДанные.Вставить("ИмяПредопределенныхДанных", ДанныеИБ.ИмяПредопределенныхДанных);
	//КонецЕсли;
	
	Если ВыгружатьВсеРеквизиты Тогда
		ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаданныеОбъекта);
		Если ИмяБазовогоТипа="Справочники" Тогда 
			Если ЗначениеЗаполнено(ДанныеИБ.Владелец) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДанныеИБ.Владелец)) Тогда
				СписокВыгружаемыхРеквизитов.Добавить(ДанныеИБ.Владелец,"Владелец");
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеИБ.Родитель) Тогда
				СписокВыгружаемыхРеквизитов.Добавить(ДанныеИБ.Родитель,"Родитель");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЕстьИменаРеквизитовФормата Тогда
			ВыгружаемыеРеквизиты = Новый Структура;
			ВыгружаемыеРеквизитыМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов,",");
			ВыгружаемыеРеквизитыФорматаМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитовФормата,",");
			КоличествоРеквизитовФормата = ВыгружаемыеРеквизитыФорматаМассив.Количество();
			НомерРеквизита = 0;
			Для каждого ТекРеквизит  Из ВыгружаемыеРеквизитыМассив Цикл
				Если НомерРеквизита>=КоличествоРеквизитовФормата Тогда
					ВыгружаемыеРеквизиты.Вставить(ТекРеквизит);
				Иначе
					ВыгружаемыеРеквизиты.Вставить(ТекРеквизит,ВыгружаемыеРеквизитыФорматаМассив[НомерРеквизита]);
				КонецЕсли;
				
				НомерРеквизита = НомерРеквизита + 1;
			КонецЦикла;
		Иначе
			ВыгружаемыеРеквизиты = Новый Структура(ИменаРеквизитов);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыгружатьВсеРеквизиты Тогда
		Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			Имя = Реквизит.Имя;
			Если Найти(Имя,"Удалить")=1 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеРеквизита = ДанныеИБ[Имя];
			Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			Если ЕстьИменаРеквизитовФормата Тогда
				ИмяФормата = ВыгружаемыеРеквизиты[Имя];
				Если НЕ ЗначениеЗаполнено(ИмяФормата) Тогда
					ИмяФормата = Имя;
				КонецЕсли;
			Иначе
				ИмяФормата = Имя;
			КонецЕсли;				
			СписокВыгружаемыхРеквизитов.Добавить(ЗначениеРеквизита,ИмяФормата);
		КонецЦикла;
	Иначе 
		Для Каждого Реквизит Из ВыгружаемыеРеквизиты Цикл
			Имя = Реквизит.Ключ;
			Если ЕстьИменаРеквизитовФормата Тогда
				ИмяФормата = ВыгружаемыеРеквизиты[Имя];
				Если НЕ ЗначениеЗаполнено(ИмяФормата) Тогда
					ИмяФормата = Имя;
				КонецЕсли;
			Иначе
				ИмяФормата = Имя;
			КонецЕсли;				
			Попытка
				
				ЗначениеРеквизита = ДанныеИБ[Имя];
				Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					Продолжить;
				КонецЕсли;
				СписокВыгружаемыхРеквизитов.Добавить(ЗначениеРеквизита,ИмяФормата);
				
				
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Реквизит Из СписокВыгружаемыхРеквизитов Цикл
		ЗначениеРеквизита = Реквизит.Значение;
		ИмяФормата = Реквизит.Представление;
		
		ТипЗнчИмя = ТипЗнч(ЗначениеРеквизита);
		ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипЗнчИмя);
		ЭтоПеречисление = ЭтоСсылка И ОбщегоНазначения.ЭтоПеречисление(ЗначениеРеквизита.Метаданные());
		
		Если ЭтоСсылка И НЕ ЭтоПеречисление Тогда
			ДопДанные.Вставить(ИмяФормата,Строка(ЗначениеРеквизита.УникальныйИдентификатор()));
		КонецЕсли;
		
		Если ЭтоПеречисление Тогда
			ДопДанные.Вставить(ИмяФормата,XMLСтрока(ЗначениеРеквизита));
		КонецЕсли;
		
		Если НЕ ЭтоСсылка И НЕ ЭтоПеречисление Тогда
			ДопДанные.Вставить(ИмяФормата,ЗначениеРеквизита);
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ДопДанные;
КонецФункции
Процедура ВыгрузитьФайлыОбъекта(КомпонентыОбмена, СсылкаНаОбъект)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	Если НЕ ПараметрыКонвертации.Свойство("ВыгружатьФайлы") Тогда
		ПараметрыКонвертации.Вставить("ВыгружатьФайлы", Истина);
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
			СоставОбмена = КомпонентыОбмена.УзелКорреспондента.ПолучитьОбъект().Метаданные().Состав;
			МетаданныеФайлы = Метаданные.Справочники.ХранилищеДополнительнойИнформации;
			Если НЕ СоставОбмена.Найти(МетаданныеФайлы)=Неопределено Тогда
				ПараметрыКонвертации.ВыгружатьФайлы = Ложь; // Выгрузятся самостоятельно
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыКонвертации.ВыгружатьФайлы=Истина Тогда
		
		ПОДфайлы = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_Файлы_Отправка", "Имя");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХранилищеДополнительнойИнформации.Ссылка
		|ИЗ
		|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыгрузкаОбъектаВыборки(КомпонентыОбмена, Выборка.Ссылка, ПОДфайлы);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьРеквизитыОбъектаВAdditionalInfo(ДанныеИБ, ДанныеXDTO, МетаданныеОбъекта=Неопределено, ИменаРеквизитов=Неопределено, ИменаРеквизитовФормата=Неопределено)
	Если МетаданныеОбъекта=Неопределено Тогда
		МетаданныеОбъекта = ДанныеИБ.Метаданные();
	КонецЕсли;
	ДопДанные = ПолучитьРеквизитыОбъектаДляВыгрузки(ДанныеИБ, МетаданныеОбъекта, ИменаРеквизитов, ИменаРеквизитовФормата);
	Для Каждого ТекРеквизит Из ДопДанные Цикл
		Если ДанныеXDTO.Свойство(ТекРеквизит.Ключ) 
			ИЛИ (ТекРеквизит.Ключ="Родитель" И ДанныеXDTO.Свойство("Группа"))
			Тогда
			ДопДанные.Удалить(ТекРеквизит.Ключ);
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("AdditionalInfo", ДопДанные);
КонецПроцедуры
Процедура УстановитьПКОПередКонвертацией(КомпонентыОбмена)
	Если КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
	
		Если НЕ СвойствоФорматаОбмена(КомпонентыОбмена, "Справочник.ВидыНоменклатуры") Тогда
			//ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти("Справочник_ВидыНоменклатуры13_Отправка", "ИмяПКО");
			//Если НЕ ПравилоКонвертации=Неопределено Тогда
			//	ПравилоКонвертации.ИмяПКО =  "Справочник_ВидыНоменклатуры_Отправка";
			//КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	УстановитьСтавкуНДСПередКонвертацией(КомпонентыОбмена);
КонецПроцедуры
Процедура УстановитьСтавкуНДСПередКонвертацией(КомпонентыОбмена)
	ЗначенияПеречисления = Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления;
	ЕстьНДС20 = НЕ ЗначенияПеречисления.Найти("НДС20")=Неопределено;
	ЕстьНДС20_120 = НЕ ЗначенияПеречисления.Найти("НДС20_120")=Неопределено;
	НаправлениеОбменаОтправка = КомпонентыОбмена.НаправлениеОбмена = "Отправка";
	
	Если ЕстьНДС20 ИЛИ ЕстьНДС20_120  Тогда
		
		ПравилаКонвертации = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.НайтиСтроки(Новый Структура("ТипДанных", Тип("ПеречислениеСсылка.СтавкиНДС")));
		Для каждого СтрокаПК  Из ПравилаКонвертации Цикл
			
			СоответствияЗначений = ?(НаправлениеОбменаОтправка, СтрокаПК.КонвертацииЗначенийПриОтправке, СтрокаПК.КонвертацииЗначенийПриПолучении);
			Если СоответствияЗначений=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НаправлениеОбменаОтправка Тогда
				Если ЕстьНДС20 Тогда
					СоответствияЗначений.Вставить(Перечисления.СтавкиНДС.НДС20,"НДС20");
				КонецЕсли;
				Если ЕстьНДС20_120 Тогда
					СоответствияЗначений.Вставить(Перечисления.СтавкиНДС.НДС20_120,"НДС20_120");
				КонецЕсли;
			Иначе
				Если ЕстьНДС20 Тогда
					СоответствияЗначений.Вставить("НДС20",Перечисления.СтавкиНДС.НДС20);
				КонецЕсли;
				Если ЕстьНДС20_120 Тогда
					СоответствияЗначений.Вставить("НДС20_120",Перечисления.СтавкиНДС.НДС20_120);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ВыполнитьПроцедуруМодуляМенеджера_Перед(ИмяПроцедуры, Параметры)
	
КонецПроцедуры
//{ Область Версии формата обмена
Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаВерсии, "."); //СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Функция СвойствоФорматаОбмена(КомпонентыОбмена, ИмяСвойства)
	Результат = Ложь;
	
	ПространствоИмен = КомпонентыОбмена.XMLСхема;
	
	Если НЕ МояФабрикаXDTO.Тип(Новый ТипДанныхXML(ИмяСвойства, ПространствоИмен))=Неопределено Тогда
		Результат = Истина;
	Иначе
		Попытка
			МассивСтрок = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяСвойства);
		Исключение
			МассивСтрок = Новый Массив;
		КонецПопытки;
		
		Если МассивСтрок.Количество() > 1 Тогда
			ИмяОбъекта = МассивСтрок[0] + "." + МассивСтрок[1];
			ТипФабрики = МояФабрикаXDTO.Тип(Новый ТипДанныхXML(ИмяОбъекта, ПространствоИмен));
			Если ТипФабрики <> Неопределено Тогда
				Для Сч = 2 По МассивСтрок.Количество() - 1 Цикл
					ИмяТекОбъекта = МассивСтрок[Сч];
					Если ТипЗнч(ТипФабрики) = Тип("СвойствоXDTO") Тогда
						ТипФабрики = ТипФабрики.Тип.Свойства.Получить(ИмяТекОбъекта);
					Иначе
						ТипФабрики = ТипФабрики.Свойства.Получить(ИмяТекОбъекта);
					КонецЕсли;
					Если ТипФабрики = Неопределено Тогда
						Возврат Ложь;
					КонецЕсли
				КонецЦикла;
				Результат = НЕ ТипФабрики = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Функция ВерсияФорматаСравнить(КомпонентыОбмена, СтрокаВерсии, Условие="=")
	ТекущаяВерсияФормата = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена);
	СравниваемаяВерсияФормата = ВерсияФорматаЧислом(СтрокаВерсии);
	Если Условие="=" Тогда
		Возврат ТекущаяВерсияФормата=СравниваемаяВерсияФормата;
	ИначеЕсли Условие=">" Тогда
		Возврат ТекущаяВерсияФормата>СравниваемаяВерсияФормата;
	ИначеЕсли Условие=">=" Тогда
		Возврат ТекущаяВерсияФормата>=СравниваемаяВерсияФормата;
	ИначеЕсли Условие="<" Тогда
		Возврат ТекущаяВерсияФормата<СравниваемаяВерсияФормата;
	ИначеЕсли Условие=">=" Тогда
		Возврат ТекущаяВерсияФормата>=СравниваемаяВерсияФормата;
	Иначе
		Возврат ТекущаяВерсияФормата=СравниваемаяВерсияФормата;
	КонецЕсли;
КонецФункции
//} КонецОбласти
//{ Область Нормативно-справочная информация
Функция ПолучитьИмяПредопределенногоНабораСвойств(НазначениеСвойстваКатегории)
	// Соответствие из ERP, КА 2, УТ 11.
	
	СоответствиеЗначений = Новый Соответствие;
	СоответствиеЗначений.Вставить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура,                 "Справочник_Номенклатура_Общие");
	СоответствиеЗначений.Вставить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры,   "Справочник_ХарактеристикиНоменклатуры_Общие");
	СоответствиеЗначений.Вставить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов,         "Справочник_ДоговорыКонтрагентов");
	СоответствиеЗначений.Вставить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_КонтактныеЛицаКонтрагентов,   "Справочник_КонтактныеЛицаПартнеров");
	СоответствиеЗначений.Вставить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты,                  "Справочник_Контрагенты");
	СоответствиеЗначений.Вставить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации,                  "Справочник_Организации");
	СоответствиеЗначений.Вставить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Склады,                       "Справочник_Склады");
	СоответствиеЗначений.Вставить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица,               "Справочник_ФизическиеЛица");
	СоответствиеЗначений.Вставить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документ_ЗаказПокупателя,                "Документ_ЗаказКлиента");
	СоответствиеЗначений.Вставить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_НоменклатурныеГруппы,         "Справочник_ГруппыФинансовогоУчетаНоменклатуры");
	//СоответствиеЗначений.Вставить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_КонтактныеЛица,
	//СоответствиеЗначений.Вставить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ЛичныеКонтакты,
	
	Возврат СоответствиеЗначений.Получить(НазначениеСвойстваКатегории);
КонецФункции
Процедура ДобавитьНаборСвойств(ДанныеXDTO, НазначениеСвойстваКатегории)
	ДанныеXDTO.Вставить("НаборСвойств", НазначениеСвойстваКатегории);
	AdditionalInfoВставить(ДанныеXDTO,"НаборСвойств",  Строка(НазначениеСвойстваКатегории.УникальныйИдентификатор()));
	AdditionalInfoВставить(ДанныеXDTO,"НаборСвойств_ИмяПредопределенныхДанных", ПолучитьИмяПредопределенногоНабораСвойств(НазначениеСвойстваКатегории), Ложь);
КонецПроцедуры
Процедура ВыгрузитьВсеДанныеСправочника(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки, ВидОбъекта=Неопределено, ИмяРеквизитаНаименования="Наименование")
	МетаданныеОбъекта = ДанныеИБ.Метаданные();
	ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаданныеОбъекта);
	Если ИмяБазовогоТипа="Справочники" Тогда
		ИмяБазовогоТипа = "Справочник";
	ИначеЕсли ИмяБазовогоТипа="ПланыВидовРасчета" Тогда
		ИмяБазовогоТипа = "ПланВидовРасчета";
	ИначеЕсли ИмяБазовогоТипа="ПланыВидовХарактеристик" Тогда
		ИмяБазовогоТипа = "ПланВидовХарактеристик";
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Наименование", ИмяБазовогоТипа + "." + ?(ВидОбъекта=Неопределено,МетаданныеОбъекта.Имя,ВидОбъекта));
	
	Если СтекВыгрузки.Количество()>1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьРеквизитыОбъектаВAdditionalInfo(ДанныеИБ, ДанныеXDTO, МетаданныеОбъекта); //ED все реквизиты
	
	AdditionalInfoВставить(ДанныеXDTO, ИмяРеквизитаНаименования,ДанныеИБ[ИмяРеквизитаНаименования]);
	
	// Выгрузка табличных частей
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство");
	ТаблицаДопРеквизитов.Колонки.Добавить("ЗначениеСвойства");
	
	ИндексТабл = 0;
	Для каждого ТекТЧ Из ДанныеИБ.Метаданные().ТабличныеЧасти Цикл
		
		Если ДанныеИБ[ТекТЧ.Имя].Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТЗ = ДанныеИБ[ТекТЧ.Имя].Выгрузить();
		
		ИндексТабл = ИндексТабл + 1;
		НоваяСтрока = ТаблицаДопРеквизитов.Добавить();
		НоваяСтрока.Свойство = Новый Структура("Наименование", "ТЧ."+ТекТЧ.Имя);
		НоваяСтрока.ЗначениеСвойства = ТЗ.Количество();
		КолонкиТабл = ТЗ.Колонки;
		
		ЭтоПерваяСтрока = Истина;
		Для Каждого СтрокаТЧ Из ТЗ Цикл
			Если ЭтоПерваяСтрока Тогда
				ЭтоПерваяСтрока = Ложь;
			Иначе
				НоваяСтрока = ТаблицаДопРеквизитов.Добавить();
				НоваяСтрока.Свойство = Новый Структура("Наименование", "ТЧ."+ТекТЧ.Имя);
				НоваяСтрока.ЗначениеСвойства = "-";
			КонецЕсли;
			Для Каждого СтрокаЭлемент Из КолонкиТабл Цикл
				Имя = СтрокаЭлемент.Имя;
				
				ЗначениеРеквизита = СтрокаТЧ[Имя];
				Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда 
					Продолжить;
				КонецЕсли;
				ТипЗначения = ТипЗнч(ЗначениеРеквизита);
				
				НоваяСтрока = ТаблицаДопРеквизитов.Добавить();
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
					ТипЗначенияСтрока = СтрЗаменить(Метаданные.НайтиПоТипу(ТипЗначения).ПолноеИмя(), ".", "Ссылка.");
					Если ТипЗначенияСтрока="ПланСчетовСсылка.Хозрасчетный" Тогда
						НоваяСтрока.Значение = ПолучитьБухСчет(ЗначениеРеквизита, КомпонентыОбмена);
					ИначеЕсли ТипЗначенияСтрока="ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные" Тогда
						НоваяСтрока.Значение = ПолучитьВидСубконто(ЗначениеРеквизита, КомпонентыОбмена);
					ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(ЗначениеРеквизита.Метаданные()) Тогда
						НоваяСтрока.ЗначениеСвойства = XMLСтрока(ЗначениеРеквизита);
					Иначе
						НоваяСтрока.ЗначениеСвойства = Строка(ЗначениеРеквизита.УникальныйИдентификатор());
					КонецЕсли;	
				ИначеЕсли ТипЗначения=Тип("УникальныйИдентификатор") Тогда
					НоваяСтрока.ЗначениеСвойства = Строка(ЗначениеРеквизита);
					ТипЗначенияСтрока = "УникальныйИдентификатор";
				ИначеЕсли ТипЗначения=Тип("Число") ИЛИ ТипЗначения=Тип("Строка") ИЛИ ТипЗначения=Тип("Булево") ИЛИ ТипЗначения=Тип("Дата") Тогда
					НоваяСтрока.ЗначениеСвойства = ЗначениеРеквизита;
					ТипЗначенияСтрока = Строка(ТипЗначения);
				Иначе // ошибка
					НоваяСтрока.ЗначениеСвойства = ЗначениеРеквизита;
					ТипЗначенияСтрока = Строка(ТипЗначения);
				КонецЕсли;
				
				НоваяСтрока.Свойство = Новый Структура("Наименование", Имя+";"+ТипЗначенияСтрока);
				
			КонецЦикла;	
		КонецЦикла;
		
	КонецЦикла;	
	
	Если ТаблицаДопРеквизитов.Количество()>0 Тогда
		ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопРеквизитов);
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Типовые, анализ
//{ Область Типовые для проверки
Процедура ПроверитьОбрезатьНазначениеПлатежа(ДанныеИБ, ДанныеXDTO)
	Если СтрДлина(ДанныеИБ.НазначениеПлатежа) > 250 Тогда
		ДанныеXDTO.Вставить("НазначениеПлатежа", Лев(ДанныеИБ.НазначениеПлатежа, 250));
	КонецЕсли;
КонецПроцедуры
Процедура РеализацияТоваровУслугВыгрузитьТабличныеЧасти(ДанныеИБ, ДанныеXDTO)
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабТовары.Количество * ТабТовары.Коэффициент КАК Количество,
	|	ТабТовары.Коэффициент КАК Коэффициент,
	|	ТабТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабТовары.Количество КАК КоличествоУпаковок,
	|	ТабТовары.Цена КАК Цена,
	|	ТабТовары.Сумма КАК Сумма,
	|	ТабТовары.СуммаНДС КАК СуммаНДС,
	|	ТабТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ("""" КАК Строка(30)) КАК ТипЗапасов
	|ИЗ Документ.РеализацияТоваровУслуг.Товары КАК ТабТовары
	|ГДЕ ТабТовары.Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ТабТара.Номенклатура КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ТабТара.Количество КАК Количество,
	|	1 КАК Коэффициент,
	|	ТабТара.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ТабТара.Количество КАК КоличествоУпаковок,
	|	0 КАК Цена,
	|	0 КАК Сумма,
	|	0 КАК СуммаНДС,
	|	null КАК СтавкаНДС, 
	|	""ВозвратнаяТара"" КАК ТипЗапасов
	|ИЗ Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК ТабТара
	|ГДЕ ТабТара.Ссылка = &Ссылка
	|";
	ЗапросТовары.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = ЗапросТовары.Выполнить().Выгрузить();
	ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары);
	ДанныеXDTO.Вставить("Товары", ТабТовары);
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.Текст = "ВЫБРАТЬ
	|	ТЧ.Номенклатура КАК Номенклатура,
	|	ТЧ.Содержание КАК Содержание,
	|	ТЧ.Количество КАК Количество,
	|	ТЧ.Цена КАК Цена,
	|	ТЧ.Сумма КАК Сумма,
	|	ТЧ.СуммаНДС КАК СуммаНДС,
	|	ТЧ.СтавкаНДС КАК СтавкаНДС
	|ИЗ Документ.РеализацияТоваровУслуг.Услуги КАК ТЧ
	|ГДЕ ТЧ.Ссылка = &Ссылка";
	ЗапросУслуги.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("Услуги", ЗапросУслуги.Выполнить().Выгрузить());
КонецПроцедуры
Функция ОпределитьИмяПКОПоСсылкеНаДокумент(ДокументСсылка)
	ИмяПКО = "";
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат ИмяПКО;
	КонецЕсли;
	ТипДокумента = ТипЗнч(ДокументСсылка);
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		ИмяПКО = "Документ_ПоступлениеТоваровУслугВНТТ_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ИмяПКО = "Документ_АвансовыйОтчет_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		ИмяПКО = "Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка";  
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ИмяПКО = "Документ_ПоступлениеДопРасходов_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ИмяПКО = "Документ_КорректировкаПоступления_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") Тогда
		ИмяПКО = "Документ_ГТДИмпорт_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		ИмяПКО = "Документ_РеализацияОтгруженныхТоваров_Отправка"; 
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ИмяПКО = "Документ_СчетФактураВыданный_Отправка"; 
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
	    ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
	    ИмяПКО = "Документ_ОперацияПоПлатежнойКарте_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АккредитивПереданный") Тогда
		ИмяПКО = "Документ_АккрПередРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АккредитивПолученный") Тогда
		ИмяПКО = "Документ_АккрПолучРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное") Тогда
		ИмяПКО = "Документ_ИнкассПередРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное") Тогда
		ИмяПКО = "Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда
		ИмяПКО = "Документ_ПлатПорВхРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		ИмяПКО = "Документ_ПлатПорИсхРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		ИмяПКО = "Документ_ПлОрдерСписРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
		ИмяПКО = "Документ_ПлОрПостРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное") Тогда
		ИмяПКО = "Документ_ПлТребВыстРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное") Тогда
		ИмяПКО = "Документ_ПлТребПолучРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеТоваров") Тогда
		ИмяПКО = "Документ_СписаниеТоваров_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		ИмяПКО = "Документ_ТребованиеНакладная_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
		ИмяПКО = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КомплектацияНоменклатуры") Тогда
		ИмяПКО = "Документ_КомплектацияНоменклатуры_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") Тогда
		ИмяПКО = "Документ_ОприходованиеТоваров_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ИмяПКО = "Документ_ПеремещениеТоваров_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		ИмяПКО = "Документ_ОтчетДавальцу_Отправка"; 
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПолучениеУслугПоПереработке") Тогда
		ИмяПКО = "Документ_ОтчетПереработчика_Отправка"; 
	
	КонецЕсли;
	Возврат ИмяПКО;
КонецФункции
Процедура ПодготовитьДанныеРасчетыСКонтрагентами(ДанныеИБ, ДанныеXDTO, ИмяДокумента, КомпонентыОбмена=Неопределено)
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РП.Сделка КАК ЗаказСсылка,
	|	РП.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	РП.СуммаПлатежа КАК Сумма,
	|	РП.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РП.СуммаНДС КАК СуммаНДС,
	|	РП.СтавкаНДС КАК СтавкаНДС,
	|	РП.ДоговорКонтрагента КАК Договор,
	|	РП.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РП.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	РП.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	РП.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	РП.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСсылка
	|ИЗ
	|	Документ.ПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК РП
	|ГДЕ
	|	РП.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса,"ПлатежноеПоручениеВходящее", ИмяДокумента);
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	ТаблРП = Запрос.Выполнить().Выгрузить();
	
	Если НЕ КомпонентыОбмена=Неопределено Тогда 
		КешСоответствий = Неопределено;
		ТаблРП.Колонки.Добавить("Заказ");
		ТаблРП.Колонки.Добавить("ДокументРасчетов");
		Для Каждого СтрокаРП ИЗ ТаблРП Цикл
			СтрокаРП.Заказ = ПолучитьИмяПКОДляОтправкиПоСсылке(КомпонентыОбмена, СтрокаРП.ЗаказСсылка, "Документ.ПБДСРасчетыСКонтрагентами,Заказ", КешСоответствий);
			СтрокаРП.ДокументРасчетов = ПолучитьИмяПКОДляОтправкиПоСсылке(КомпонентыОбмена, СтрокаРП.ДокументРасчетовСсылка, "Документ.ПБДСРасчетыСКонтрагентами,ДокументРасчетов", КешСоответствий);
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТаблРП);
КонецПроцедуры
//} КонецОбласти
//{ Область Типовые
Функция ЭтоСБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов = "")
	ВидОперации = ДанныеИБ.ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		ВидРасчетов = "КредитыИЗаймы";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами  Тогда
		ВидРасчетов = "Прочее";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции
Функция ЭтоСБДСПрочее(ДанныеИБ)
	ВидОперации = ДанныеИБ.ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств
		Или ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
Функция ЭтоПБДСРасчетыСКонтрагентами(ДанныеИБ, ВидРасчетов = "")
	ВидОперации = ДанныеИБ.ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам Тогда
		ВидРасчетов = "КредитыИЗаймы";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами  Тогда
		ВидРасчетов = "Прочее";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции
Функция ЭтоПБДСПрочее(ДанныеИБ)
	ВидОперации = ДанныеИБ.ВидОперации;
	СтатьяЗатрат = ДанныеИБ.СтатьяЗатрат;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств
		И НЕ ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
Процедура ОпределитьТипыЗапасовПриОтправке(ДанныеИБ, ТабТовары, ВидДвижения = "")
	Если ТабТовары.Колонки.Найти("ТипЗапасов") = Неопределено Тогда
		ТабТовары.Колонки.Добавить("ТипЗапасов");
	КонецЕсли;
	ЕстьСумма = (ТабТовары.Колонки.Найти("Сумма") <> Неопределено);
	ЕстьСуммаНДС = (ТабТовары.Колонки.Найти("СуммаНДС") <> Неопределено);
	ЕстьСуммаВРознице = (ТабТовары.Колонки.Найти("СуммаВРознице") <> Неопределено);
	// Вычисление типов запасов по данным регистров партий.
	Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабПартии.Номенклатура КАК Номенклатура,
		|	ТабПартии.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ТабПартии.СтатусПартии КАК СтатусПартии,
		|	ТабПартии.Количество КАК Количество
		|ИЗ
		|	РегистрНакопления.ПартииТоваровНаСкладах КАК ТабПартии
		|ГДЕ
		|	ТабПартии.Регистратор = &Регистратор
		|	И (&ЛюбойВидДвижения
		|			ИЛИ ТабПартии.ВидДвижения = &ВидДвиженияРегистра)
		|	И ТабПартии.СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.НаКомиссию)";
	Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
	Если ВидДвижения = "" Тогда
		Запрос.УстановитьПараметр("ЛюбойВидДвижения", Истина);
		// не принципиально что.
		Запрос.УстановитьПараметр("ВидДвиженияРегистра", ВидДвиженияНакопления.Приход);
	Иначе
		Запрос.УстановитьПараметр("ЛюбойВидДвижения", Ложь);
		Запрос.УстановитьПараметр("ВидДвиженияРегистра", ?(ВидДвижения = "+", ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход));
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию Тогда
			ТипЗапасов = "КомиссионныеТовары";
		Иначе
			ТипЗапасов = "ДавальческиеСырьеИМатериалы";
		КонецЕсли;
		КоличествоКРаспределению = Выборка.Количество;
		Для Каждого СтрТовары Из ТабТовары Цикл
			Если КоличествоКРаспределению = 0 Тогда
				Прервать;
			КонецЕсли;
			Если СтрТовары.Номенклатура <> Выборка.Номенклатура
				Или СтрТовары.Характеристика <> Выборка.Характеристика
				Или ЗначениеЗаполнено(СтрТовары.ТипЗапасов) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрТовары.Количество <= КоличествоКРаспределению Тогда
				СтрТовары.ТипЗапасов = ТипЗапасов;
				КоличествоКРаспределению = КоличествоКРаспределению - СтрТовары.Количество; 
			Иначе
				// строка делится на две, вторая с пустым типом запасов.
				СтрТовары.ТипЗапасов = ТипЗапасов;
				КоэффициентПересчетаСумм = КоличествоКРаспределению / СтрТовары.Количество;
				СтрТовары.Количество = КоличествоКРаспределению;
				СтрТовары.КоличествоУпаковок = ?(СтрТовары.Коэффициент = 0, СтрТовары.Количество, Окр(СтрТовары.Количество / СтрТовары.Коэффициент,3)); 
				ДубльТовары = ТабТовары.Добавить();
				ДубльТовары.ЗаполнитьЗначенияСвойств(СтрТовары);
				ДубльТовары.Количество = СтрТовары.Количество - КоличествоКРаспределению;
				ДубльТовары.КоличествоУпаковок = ?(ДубльТовары.Коэффициент = 0, ДубльТовары.Количество, Окр(ДубльТовары.Количество / ДубльТовары.Коэффициент,3));
				ДубльТовары.ТипЗапасов = "";
				КоличествоКРаспределению = 0;
				Если ЕстьСумма Тогда
					СуммаПересчет = Окр(СтрТовары.Сумма * КоэффициентПересчетаСумм, 2);
					СуммаОстаток = СтрТовары.Сумма - СуммаПересчет;
					СтрТовары.Сумма = СуммаПересчет;
					ДубльТовары.Сумма = СуммаОстаток;
				КонецЕсли;
				Если ЕстьСуммаНДС Тогда
					СуммаНДСПересчет = Окр(СтрТовары.СуммаНДС * КоэффициентПересчетаСумм, 2);
					СуммаНДСОстаток = СтрТовары.СуммаНДС - СуммаНДСПересчет;
					СтрТовары.СуммаНДС = СуммаНДСПересчет;
					ДубльТовары.СуммаНДС = СуммаНДСОстаток;
				КонецЕсли;
				Если ЕстьСуммаВРознице Тогда
					СуммаВРозницеПересчет = Окр(СтрТовары.СуммаВРознице * КоэффициентПересчетаСумм, 2);
					СуммаВРозницеОстаток = СтрТовары.СуммаВРознице - СуммаВРозницеПересчет;
					СтрТовары.СуммаВРознице = СуммаВРозницеПересчет;
					ДубльТовары.СуммаВРознице = СуммаВРозницеОстаток;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;                                                                                                                       
	// Для незаполненных типов запасов применяются собственные товары.
	//БОЙКОВ
	//Для Каждого СтрТовары Из ТабТовары Цикл
	//	Если НЕ ЗначениеЗаполнено(СтрТовары.ТипЗапасов) Тогда
	//		СтрТовары.ТипЗапасов = "СобственныеТовары";
	//	КонецЕсли;
	//КонецЦикла;
	Для Каждого СтрТовары Из ТабТовары Цикл
		СтрТовары.ТипЗапасов = "СобственныеТовары";
	КонецЦикла;
	//
КонецПроцедуры
//} КонецОбласти
//} КонецОбласти
//{ Область Ввод остатков
//{ Область ЗапросыОстатков
Функция ПолучитьТекстЗапроса_СобственныеТоварыНаСкладах()
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НДСПартииТоваровОстатки.Номенклатура КАК Номенклатура,
	|	НДСПартииТоваровОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	НДСПартииТоваровОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	НДСПартииТоваровОстатки.Склад КАК Склад,
	|	НДСПартииТоваровОстатки.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(НДСПартииТоваровОстатки.СтоимостьОстаток) КАК СтоимостьОстаток,
	|	СУММА(НДСПартииТоваровОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(НДСПартииТоваровОстатки.НДСОстаток) КАК НДСОстаток,
	|	НДСПартииТоваровОстатки.Организация КАК Организация,
	|	НДСПартииТоваровОстатки.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ НДСПоПартиям
	|ИЗ
	|	РегистрНакопления.НДСПартииТоваров.Остатки(&ДатаОстатков, ) КАК НДСПартииТоваровОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПартииТоваровОстатки.СтавкаНДС,
	|	НДСПартииТоваровОстатки.Организация,
	|	НДСПартииТоваровОстатки.ХарактеристикаНоменклатуры,
	|	НДСПартииТоваровОстатки.СчетФактура,
	|	НДСПартииТоваровОстатки.Номенклатура,
	|	НДСПартииТоваровОстатки.Склад,
	|	НДСПартииТоваровОстатки.СерияНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	СчетФактура,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ОстаткиТоваров.ДокументОприходования.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ОстаткиТоваров.Склад КАК Склад,
	|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваров.ДокументОприходования КАК ДокументОприходования,
	|	ОстаткиТоваров.Номенклатура.ВестиУчетПоСериям КАК ВестиУчетПоСериям,
	|	ОстаткиТоваров.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ОстаткиТоваров.Качество КАК Качество,
	|	ОстаткиТоваров.СерияНоменклатуры КАК Серия,
	|	ОстаткиТоваров.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ОстаткиТоваров.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ОстаткиТоваров.СерияНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
	|	СУММА(ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) * ЕСТЬNULL(ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)) КАК Количество,
	|	СУММА(ЕСТЬNULL(ОстаткиТоваров.СтоимостьОстаток, 0)) КАК СуммаИтогоУпр
	|ПОМЕСТИТЬ ОстаткиТоваровПоПартиям
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|			&ДатаОстатков,
	|			СтатусПартии <> ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.НаКомиссию)
	|				И СтатусПартии <> ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВозвратнаяТара)
	|				И Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ОстаткиТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.Номенклатура,
	|	ОстаткиТоваров.Склад,
	|	ОстаткиТоваров.ХарактеристикаНоменклатуры,
	|	ОстаткиТоваров.Качество,
	|	ЕСТЬNULL(ОстаткиТоваров.ДокументОприходования.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|	ОстаткиТоваров.СерияНоменклатуры,
	|	ОстаткиТоваров.СерияНоменклатуры.НомерГТД,
	|	ОстаткиТоваров.СерияНоменклатуры.СтранаПроисхождения,
	|	ОстаткиТоваров.СерияНоменклатуры.ПометкаУдаления,
	|	ОстаткиТоваров.Номенклатура.ВестиУчетПоСериям,
	|	ОстаткиТоваров.ДокументОприходования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиТоваровПоПартиям.Организация КАК Организация,
	|	ОстаткиТоваровПоПартиям.Склад КАК Склад,
	|	ОстаткиТоваровПоПартиям.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровПоПартиям.ДокументОприходования КАК ДокументОприходования,
	|	ОстаткиТоваровПоПартиям.ВестиУчетПоСериям КАК ВестиУчетПоСериям,
	|	ОстаткиТоваровПоПартиям.Характеристика КАК Характеристика,
	|	ОстаткиТоваровПоПартиям.Качество КАК Качество,
	|	ОстаткиТоваровПоПартиям.Серия КАК Серия,
	|	ОстаткиТоваровПоПартиям.НомерГТД КАК НомерГТД,
	|	ОстаткиТоваровПоПартиям.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ОстаткиТоваровПоПартиям.ПометкаУдаления КАК ПометкаУдаления,
	|	ОстаткиТоваровПоПартиям.Количество,
	|	ОстаткиТоваровПоПартиям.СуммаИтогоУпр,
	|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчетСрезПоследних.СложныйУчетНДС, ЛОЖЬ) КАК СложныйУчетНДС,
	|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПартионныйУчетНДСвРазрезеСерийИХарактеристик, ЛОЖЬ) КАК УчетНДСВРазрезеСерийИХарактеристик,
	|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПартионныйУчетНДСвРазрезеСкладов, ЛОЖЬ) КАК УчетНДСВРазрезеСкладов
	|ПОМЕСТИТЬ ОстаткиПоПартиямСУчетнойПолитикой
	|ИЗ
	|	ОстаткиТоваровПоПартиям КАК ОстаткиТоваровПоПартиям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ДатаОстатков, ) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	|		ПО ОстаткиТоваровПоПартиям.Организация = УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Организация,
	|	ДокументОприходования,
	|	УчетНДСВРазрезеСерийИХарактеристик,
	|	УчетНДСВРазрезеСкладов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоПартиямСУчетнойПолитикой.СложныйУчетНДС КАК СложныйУчетНДС,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Организация КАК Организация,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Склад КАК Склад,
	|	ОстаткиПоПартиямСУчетнойПолитикой.ДокументОприходования КАК ДокументОприходования,
	|	ОстаткиПоПартиямСУчетнойПолитикой.ДокументОприходования.Дата КАК ДатаДокументаОприходования,
	|	ОстаткиПоПартиямСУчетнойПолитикой.ДокументОприходования.Номер КАК НомерДокументаОприходования,
	|	МАКСИМУМ(ЕСТЬNULL(ОстаткиПоПартиямСУчетнойПолитикой.ДокументОприходования.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))) КАК Партнер,
	|	МАКСИМУМ(ЕСТЬNULL(ОстаткиПоПартиямСУчетнойПолитикой.ДокументОприходования.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))) КАК Договор,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Номенклатура КАК Номенклатура,
	|	ОстаткиПоПартиямСУчетнойПолитикой.ВестиУчетПоСериям,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Характеристика,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Качество,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Серия,
	|	СУММА(ОстаткиПоПартиямСУчетнойПолитикой.Количество) КАК Количество,
	|	СУММА(ОстаткиПоПартиямСУчетнойПолитикой.СуммаИтогоУпр) КАК Сумма,
	|	ЕСТЬNULL(НДСПоПартиям.СтавкаНДС, ОстаткиПоПартиямСУчетнойПолитикой.Номенклатура.СтавкаНДС) КАК СтавкаНДС,
	|	СУММА(ЕСТЬNULL(НДСПоПартиям.НДСОстаток, 0)) КАК НДСРегл,
	|	СУММА(ЕСТЬNULL(НДСПоПартиям.НДСОстаток, 0) * ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) > 0
	|					И ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) > 0
	|				ТОГДА КурсыВалютСрезПоследних.Кратность / КурсыВалютСрезПоследних.Курс
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДС,
	|	СУММА(ОстаткиПоПартиямСУчетнойПолитикой.СуммаИтогоУпр * ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) > 0
	|					И ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) > 0
	|				ТОГДА КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСНДСРегл,
	|	ОстаткиПоПартиямСУчетнойПолитикой.НомерГТД,
	|	ОстаткиПоПартиямСУчетнойПолитикой.СтранаПроисхождения,
	|	КурсыВалютСрезПоследних.Курс,
	|	ОстаткиПоПартиямСУчетнойПолитикой.ПометкаУдаления
	|ИЗ
	|	ОстаткиПоПартиямСУчетнойПолитикой КАК ОстаткиПоПартиямСУчетнойПолитикой
	|		ЛЕВОЕ СОЕДИНЕНИЕ НДСПоПартиям КАК НДСПоПартиям
	|		ПО ОстаткиПоПартиямСУчетнойПолитикой.Номенклатура = НДСПоПартиям.Номенклатура
	|			И ОстаткиПоПартиямСУчетнойПолитикой.Организация = НДСПоПартиям.Организация
	|			И ОстаткиПоПартиямСУчетнойПолитикой.ДокументОприходования = НДСПоПартиям.СчетФактура
	|			И (НЕ ОстаткиПоПартиямСУчетнойПолитикой.УчетНДСВРазрезеСерийИХарактеристик
	|				ИЛИ ОстаткиПоПартиямСУчетнойПолитикой.Серия = НДСПоПартиям.СерияНоменклатуры)
	|			И (НЕ ОстаткиПоПартиямСУчетнойПолитикой.УчетНДСВРазрезеСкладов
	|				ИЛИ ОстаткиПоПартиямСУчетнойПолитикой.Склад = НДСПоПартиям.Склад)
	|			И (НЕ ОстаткиПоПартиямСУчетнойПолитикой.УчетНДСВРазрезеСерийИХарактеристик
	|				ИЛИ ОстаткиПоПартиямСУчетнойПолитикой.Характеристика = НДСПоПартиям.ХарактеристикаНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков, Валюта = &ВалютаУпрУчета) КАК КурсыВалютСрезПоследних
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПоПартиям.СтавкаНДС,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Организация,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Склад,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Номенклатура,
	|	ОстаткиПоПартиямСУчетнойПолитикой.ДокументОприходования,
	|	ОстаткиПоПартиямСУчетнойПолитикой.ВестиУчетПоСериям,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Характеристика,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Качество,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Серия,
	|	ОстаткиПоПартиямСУчетнойПолитикой.НомерГТД,
	|	ОстаткиПоПартиямСУчетнойПолитикой.СтранаПроисхождения,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Количество,
	|	ОстаткиПоПартиямСУчетнойПолитикой.СуммаИтогоУпр,
	|	ОстаткиПоПартиямСУчетнойПолитикой.СложныйУчетНДС,
	|	КурсыВалютСрезПоследних.Курс,
	|	ОстаткиПоПартиямСУчетнойПолитикой.ПометкаУдаления,
	|	ЕСТЬNULL(НДСПоПартиям.СтавкаНДС, ОстаткиПоПартиямСУчетнойПолитикой.Номенклатура.СтавкаНДС),
	|	ОстаткиПоПартиямСУчетнойПолитикой.ДокументОприходования.Дата,
	|	ОстаткиПоПартиямСУчетнойПолитикой.ДокументОприходования.Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Склад,
	|	СложныйУчетНДС,
	|	Номенклатура,
	|	ДокументОприходования
	|ИТОГИ ПО
	|	Организация,
	|	Склад,
	|	СложныйУчетНДС,
	|	ДокументОприходования";
	
	Возврат ТекстЗапроса;
КонецФункции
Функция ПолучитьТекстЗапроса_СобствТоварыПартииБезСкладов()
	// СобственныеТоварыПартииБезСкладов
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НДСПартииТоваровОстатки.Номенклатура КАК Номенклатура,
	|	НДСПартииТоваровОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	НДСПартииТоваровОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|	НДСПартииТоваровОстатки.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(НДСПартииТоваровОстатки.СтоимостьОстаток) КАК СтоимостьОстаток,
	|	СУММА(НДСПартииТоваровОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(НДСПартииТоваровОстатки.НДСОстаток) КАК НДСОстаток,
	|	НДСПартииТоваровОстатки.Организация КАК Организация,
	|	НДСПартииТоваровОстатки.СчетФактура КАК СчетФактура
	|ПОМЕСТИТЬ НДСПоПартиям
	|ИЗ
	|	РегистрНакопления.НДСПартииТоваров.Остатки(&ДатаОстатков, ) КАК НДСПартииТоваровОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПартииТоваровОстатки.СтавкаНДС,
	|	НДСПартииТоваровОстатки.Организация,
	|	НДСПартииТоваровОстатки.ХарактеристикаНоменклатуры,
	|	НДСПартииТоваровОстатки.СчетФактура,
	|	НДСПартииТоваровОстатки.Номенклатура,
	|	НДСПартииТоваровОстатки.СерияНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	СчетФактура,
	|	ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ОстаткиТоваров.ДокументОприходования.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваров.ДокументОприходования КАК ДокументОприходования,
	|	ОстаткиТоваров.Номенклатура.ВестиУчетПоСериям КАК ВестиУчетПоСериям,
	|	ОстаткиТоваров.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ОстаткиТоваров.Качество КАК Качество,
	|	ОстаткиТоваров.СерияНоменклатуры КАК Серия,
	|	ОстаткиТоваров.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ОстаткиТоваров.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ОстаткиТоваров.СерияНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
	|	СУММА(ЕСТЬNULL(ОстаткиТоваров.КоличествоОстаток, 0) * ЕСТЬNULL(ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)) КАК Количество,
	|	СУММА(ЕСТЬNULL(ОстаткиТоваров.СтоимостьОстаток, 0)) КАК СуммаИтогоУпр
	|ПОМЕСТИТЬ ОстаткиТоваровПоПартиям
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|			&ДатаОстатков,
	|			СтатусПартии <> ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.НаКомиссию)
	|				И СтатусПартии <> ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.ВозвратнаяТара)
	|				И Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ОстаткиТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.Номенклатура,
	|	ОстаткиТоваров.ХарактеристикаНоменклатуры,
	|	ОстаткиТоваров.Качество,
	|	ЕСТЬNULL(ОстаткиТоваров.ДокументОприходования.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|	ОстаткиТоваров.СерияНоменклатуры,
	|	ОстаткиТоваров.СерияНоменклатуры.НомерГТД,
	|	ОстаткиТоваров.СерияНоменклатуры.СтранаПроисхождения,
	|	ОстаткиТоваров.СерияНоменклатуры.ПометкаУдаления,
	|	ОстаткиТоваров.Номенклатура.ВестиУчетПоСериям,
	|	ОстаткиТоваров.ДокументОприходования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиТоваровПоПартиям.Организация КАК Организация,
	|	ОстаткиТоваровПоПартиям.Номенклатура КАК Номенклатура,
	|	ОстаткиТоваровПоПартиям.ДокументОприходования КАК ДокументОприходования,
	|	ОстаткиТоваровПоПартиям.ВестиУчетПоСериям КАК ВестиУчетПоСериям,
	|	ОстаткиТоваровПоПартиям.Характеристика КАК Характеристика,
	|	ОстаткиТоваровПоПартиям.Качество КАК Качество,
	|	ОстаткиТоваровПоПартиям.Серия КАК Серия,
	|	ОстаткиТоваровПоПартиям.НомерГТД КАК НомерГТД,
	|	ОстаткиТоваровПоПартиям.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ОстаткиТоваровПоПартиям.ПометкаУдаления КАК ПометкаУдаления,
	|	ОстаткиТоваровПоПартиям.Количество,
	|	ОстаткиТоваровПоПартиям.СуммаИтогоУпр,
	|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчетСрезПоследних.СложныйУчетНДС, ЛОЖЬ) КАК СложныйУчетНДС,
	|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчетСрезПоследних.ПартионныйУчетНДСвРазрезеСерийИХарактеристик, ЛОЖЬ) КАК УчетНДСВРазрезеСерийИХарактеристик
	|ПОМЕСТИТЬ ОстаткиПоПартиямСУчетнойПолитикой
	|ИЗ
	|	ОстаткиТоваровПоПартиям КАК ОстаткиТоваровПоПартиям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ДатаОстатков, ) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	|		ПО ОстаткиТоваровПоПартиям.Организация = УчетнаяПолитикаНалоговыйУчетСрезПоследних.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Организация,
	|	ДокументОприходования,
	|	УчетНДСВРазрезеСерийИХарактеристик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоПартиямСУчетнойПолитикой.Организация КАК Организация,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Номенклатура КАК Номенклатура,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Характеристика,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Качество,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Серия,
	|	СУММА(ОстаткиПоПартиямСУчетнойПолитикой.Количество) КАК Количество,
	|	СУММА(ОстаткиПоПартиямСУчетнойПолитикой.СуммаИтогоУпр) КАК Сумма,
	|	МАКСИМУМ(ЕСТЬNULL(НДСПоПартиям.СтавкаНДС, ОстаткиПоПартиямСУчетнойПолитикой.Номенклатура.СтавкаНДС)) КАК СтавкаНДС,
	|	СУММА(ЕСТЬNULL(НДСПоПартиям.НДСОстаток, 0)) КАК НДСРегл,
	|	СУММА(ЕСТЬNULL(НДСПоПартиям.НДСОстаток, 0) * ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) > 0
	|					И ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) > 0
	|				ТОГДА КурсыВалютСрезПоследних.Кратность / КурсыВалютСрезПоследних.Курс
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНДС,
	|	СУММА(ОстаткиПоПартиямСУчетнойПолитикой.СуммаИтогоУпр * ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) > 0
	|					И ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) > 0
	|				ТОГДА КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСНДСРегл,
	|	МАКСИМУМ(ОстаткиПоПартиямСУчетнойПолитикой.НомерГТД) КАК НомерГТД,
	|	МАКСИМУМ(ОстаткиПоПартиямСУчетнойПолитикой.СтранаПроисхождения) КАК СтранаПроисхождения
	|ИЗ
	|	ОстаткиПоПартиямСУчетнойПолитикой КАК ОстаткиПоПартиямСУчетнойПолитикой
	|		ЛЕВОЕ СОЕДИНЕНИЕ НДСПоПартиям КАК НДСПоПартиям
	|		ПО ОстаткиПоПартиямСУчетнойПолитикой.Номенклатура = НДСПоПартиям.Номенклатура
	|			И ОстаткиПоПартиямСУчетнойПолитикой.Организация = НДСПоПартиям.Организация
	|			И ОстаткиПоПартиямСУчетнойПолитикой.ДокументОприходования = НДСПоПартиям.СчетФактура
	|			И (НЕ ОстаткиПоПартиямСУчетнойПолитикой.УчетНДСВРазрезеСерийИХарактеристик
	|				ИЛИ ОстаткиПоПартиямСУчетнойПолитикой.Серия = НДСПоПартиям.СерияНоменклатуры)
	|			И (НЕ ОстаткиПоПартиямСУчетнойПолитикой.УчетНДСВРазрезеСерийИХарактеристик
	|				ИЛИ ОстаткиПоПартиямСУчетнойПолитикой.Характеристика = НДСПоПартиям.ХарактеристикаНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков, Валюта = &ВалютаУпрУчета) КАК КурсыВалютСрезПоследних
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоПартиямСУчетнойПолитикой.Организация,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Номенклатура,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Характеристика,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Качество,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Серия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Характеристика,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Серия,
	|	ОстаткиПоПартиямСУчетнойПолитикой.Качество
	|ИТОГИ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладах.Регистратор.Организация КАК Организация,
	|	ТоварыНаСкладах.Склад КАК Склад,
	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладах.Номенклатура.ВестиУчетПоСериям КАК ВестиУчетПоСериям,
	|	ТоварыНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ТоварыНаСкладах.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТоварыНаСкладах.СерияНоменклатуры КАК Серия,
	|	ТоварыНаСкладах.Качество КАК Качество,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ТоварыНаСкладах.Количество * ЕСТЬNULL(ТоварыНаСкладах.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)
	|			ИНАЧЕ -ТоварыНаСкладах.Количество * ЕСТЬNULL(ТоварыНаСкладах.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладах.Регистратор.Организация,
	|	ТоварыНаСкладах.Склад,
	|	ТоварыНаСкладах.Качество,
	|	ТоварыНаСкладах.ХарактеристикаНоменклатуры,
	|	ТоварыНаСкладах.Номенклатура,
	|	ТоварыНаСкладах.Номенклатура.ВестиУчетПоСериям,
	|	ТоварыНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	ТоварыНаСкладах.СерияНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ТоварыНаСкладах.Количество * ЕСТЬNULL(ТоварыНаСкладах.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)
	|			ИНАЧЕ -ТоварыНаСкладах.Количество * ЕСТЬNULL(ТоварыНаСкладах.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)
	|		КОНЕЦ) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыВРознице.Регистратор.Организация,
	|	ТоварыВРознице.Склад,
	|	ТоварыВРознице.Номенклатура,
	|	ТоварыВРознице.Номенклатура.ВестиУчетПоСериям,
	|	ТоварыВРознице.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	ТоварыВРознице.ХарактеристикаНоменклатуры,
	|	ТоварыВРознице.СерияНоменклатуры,
	|	ТоварыВРознице.Качество,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыВРознице.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ТоварыВРознице.Количество * ЕСТЬNULL(ТоварыВРознице.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)
	|			ИНАЧЕ -ТоварыВРознице.Количество * ЕСТЬNULL(ТоварыВРознице.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)
	|		КОНЕЦ)
	|ИЗ
	|	РегистрНакопления.ТоварыВРознице КАК ТоварыВРознице
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВРознице.Склад,
	|	ТоварыВРознице.Номенклатура,
	|	ТоварыВРознице.ХарактеристикаНоменклатуры,
	|	ТоварыВРознице.СерияНоменклатуры,
	|	ТоварыВРознице.Качество,
	|	ТоварыВРознице.Регистратор.Организация,
	|	ТоварыВРознице.Номенклатура.ВестиУчетПоСериям,
	|	ТоварыВРознице.Номенклатура.ВестиПартионныйУчетПоСериям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыВНТТ.Регистратор.Организация,
	|	ТоварыВНТТ.Склад,
	|	ТоварыВНТТ.Номенклатура,
	|	ТоварыВНТТ.Номенклатура.ВестиУчетПоСериям,
	|	ТоварыВНТТ.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	ТоварыВНТТ.ХарактеристикаНоменклатуры,
	|	ТоварыВНТТ.СерияНоменклатуры,
	|	ЗНАЧЕНИЕ(Справочник.Качество.Новый),
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыВНТТ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ТоварыВНТТ.Количество * ЕСТЬNULL(ТоварыВНТТ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)
	|			ИНАЧЕ -ТоварыВНТТ.Количество * ЕСТЬNULL(ТоварыВНТТ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1)
	|		КОНЕЦ)
	|ИЗ
	|	РегистрНакопления.ТоварыВНТТ КАК ТоварыВНТТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВНТТ.Склад,
	|	ТоварыВНТТ.Номенклатура,
	|	ТоварыВНТТ.ХарактеристикаНоменклатуры,
	|	ТоварыВНТТ.СерияНоменклатуры,
	|	ТоварыВНТТ.Регистратор.Организация,
	|	ТоварыВНТТ.Номенклатура.ВестиУчетПоСериям,
	|	ТоварыВНТТ.Номенклатура.ВестиПартионныйУчетПоСериям
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Склад,
	|	Номенклатура,
	|	Качество";
	
	Возврат ТекстЗапроса;
КонецФункции
//} КонецОбласти
//{ Область Ввод остатков
Процедура ВыгрузитьОстаткиУТ(КомпонентыОбмена)
	ОстаткиДляВыгрузки = КомпонентыОбмена.ПараметрыКонвертации.ОстаткиДляВыгрузки;
	КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков = КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков);
	
	Для Каждого ТекВид Из ОстаткиДляВыгрузки Цикл
		Выполнить (ТекВид.Значение+"(КомпонентыОбмена,"""+ТекВид.Представление+""");");	
	КонецЦикла;
КонецПроцедуры
Функция ПолучитьТаблицуПравилВыгрузкиОстатков()
	ТаблицаПравилВыгрузки = Новый ТаблицаЗначений;
	ТаблицаПравилВыгрузки.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ТаблицаПравилВыгрузки.Колонки.Добавить("Имя");
	ТаблицаПравилВыгрузки.Колонки.Добавить("Родитель");
	ТаблицаПравилВыгрузки.Колонки.Добавить("Наименование");
	ТаблицаПравилВыгрузки.Колонки.Добавить("Порядок");
	ТаблицаПравилВыгрузки.Колонки.Добавить("Отметка");
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Имя = "НачальныеОстатки";
	НоваяСтрока.Наименование = "Начальные остатки";
	
	//{ Остатки товаров
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "НачальныеОстатки";
	НоваяСтрока.Имя = "ВводОстатковТоваров";
	НоваяСтрока.Наименование = "Остатки товаров";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "ВводОстатковТоваров";
	НоваяСтрока.Имя = "ВводОстатковСобственныеТоварыНаСкладах";
	НоваяСтрока.Наименование = "Собственные товары на складах";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "ВводОстатковТоваров";
	НоваяСтрока.Имя = "ВводОстатковТоварыПринятыеНаКомиссию";
	НоваяСтрока.Наименование = "Товары, принятые на комиссию";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "ВводОстатковТоваров";
	НоваяСтрока.Имя = "ВводОстатковТоварыПереданныеНаКомиссию";
	НоваяСтрока.Наименование = "Товары, переданные на комиссию";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Ложь;
	НоваяСтрока.Родитель = "ВводОстатковТоваров";
	НоваяСтрока.Имя = "ВводОстатковТоварыНаСкладах";
	НоваяСтрока.Наименование = "Товары на складах (альтернативный вариант, не рекомендуется)";
	
	//}
	
	//{ Взаиморасчеты с контрагентами
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "НачальныеОстатки";
	НоваяСтрока.Имя = "РасчетыСКонтрагентами";
	НоваяСтрока.Наименование = "Взаиморасчеты с контрагентами";
	
	//{ Взаиморасчеты с клиентами
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСКонтрагентами";
	НоваяСтрока.Имя = "РасчетыСКлиентами";
	НоваяСтрока.Наименование = "Взаиморасчеты с клиентами";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСКлиентами";
	НоваяСтрока.Имя = "ВводОстатковДолгиКлиентовПоДоговорам";
	НоваяСтрока.Наименование = "Долги клиентов по договорам";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСКлиентами";
	НоваяСтрока.Имя = "ВводОстатковДолгиКлиентовПоЗаказам";
	НоваяСтрока.Наименование = "Долги клиентов по заказам";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСКлиентами";
	НоваяСтрока.Имя = "ВводОстатковДолгиКлиентовПоРеализациям";
	НоваяСтрока.Наименование = "Долги клиентов по реализациям";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСКлиентами";
	НоваяСтрока.Имя = "ВводОстатковДолгиКомиссионеровПоДоговорам";
	НоваяСтрока.Наименование = "Долги комиссионеров за проданные товары по договорам";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСКлиентами";
	НоваяСтрока.Имя = "ВводОстатковДолгиКомиссионеровЗаПроданныеТовары";
	НоваяСтрока.Наименование = "Долги комиссионеров за проданные товары по расчетным документам";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСКлиентами";
	НоваяСтрока.Имя = "ВводОстатковАвансыПоДоговорамПолученныеОтКлиентов";
	НоваяСтрока.Наименование = "Авансы по договорам, полученные от клиентов";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСКлиентами";
	НоваяСтрока.Имя = "ВводОстатковАвансыПоЗаказамПолученныеОтКлиентов";
	НоваяСтрока.Наименование = "Авансы по заказам, полученные от клиентов";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСКлиентами";
	НоваяСтрока.Имя = "ВводОстатковПрочиеАвансыПолученныеОтКлиентов";
	НоваяСтрока.Наименование = "Прочие авансы, полученные от клиентов";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСКлиентами";
	НоваяСтрока.Имя = "ВводОстатковПрочаяДебиторскаяЗадолженность";
	НоваяСтрока.Наименование = "Прочая дебиторская задолженность";
	
	//} 
	
	//{ Взаиморасчеты с поставщиками
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСКонтрагентами";
	НоваяСтрока.Имя = "РасчетыСПоставщиками";
	НоваяСтрока.Наименование = "Взаиморасчеты с поставщиками";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСПоставщиками";
	НоваяСтрока.Имя = "ВводОстатковДолгиПоставщикамПоДоговорам";
	НоваяСтрока.Наименование = "Наши долги поставщикам по договорам";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСПоставщиками";
	НоваяСтрока.Имя = "ВводОстатковДолгиПоставщикамПоЗаказам";
	НоваяСтрока.Наименование = "Наши долги поставщикам по заказам";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСПоставщиками";
	НоваяСтрока.Имя = "ВводОстатковДолгиПоставщикамПоПоступлениям";
	НоваяСтрока.Наименование = "Наши долги поставщикам по поступлениям";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСПоставщиками";
	НоваяСтрока.Имя = "ВводОстатковДолгиКомитентамПоДоговорам";
	НоваяСтрока.Наименование = "Наши долги комитентам за проданные товары по договорам";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСПоставщиками";
	НоваяСтрока.Имя = "ВводОстатковДолгиКомитентамЗаПроданныеТовары";
	НоваяСтрока.Наименование = "Наши долги комитентам за проданные товары по расчетным документам";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСПоставщиками";
	НоваяСтрока.Имя = "ВводОстатковАвансыПоДоговорамУплаченныеПоставщикам";
	НоваяСтрока.Наименование = "Авансы по договорам, уплаченные поставщикам";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСПоставщиками";
	НоваяСтрока.Имя = "ВводОстатковАвансыПоЗаказамУплаченныеПоставщикам";
	НоваяСтрока.Наименование = "Авансы по заказам, уплаченные поставщикам";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСПоставщиками";
	НоваяСтрока.Имя = "ВводОстатковПрочиеАвансыУплаченныеПоставщикам";
	НоваяСтрока.Наименование = "Прочие авансы, уплаченные поставщикам";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "РасчетыСПоставщиками";
	НоваяСтрока.Имя = "ВводОстатковПрочаяКредиторскаяЗадолженность";
	НоваяСтрока.Наименование = "Прочая кредиторская задолженность";
	
	//} 
	
	//}
	
	//{ Денежные средства
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "НачальныеОстатки";
	НоваяСтрока.Имя = "ДенежныеСредства";
	НоваяСтрока.Наименование = "Денежные средства";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "ДенежныеСредства";
	НоваяСтрока.Имя = "ВводОстатковДенежныеСредстваНаБанковскихСчетах";
	НоваяСтрока.Наименование = "Денежные cредства на банковских счетах";
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Отметка = Истина;
	НоваяСтрока.Родитель = "ДенежныеСредства";
	НоваяСтрока.Имя = "ВводОстатковДенежныеСредстваВКассах";
	НоваяСтрока.Наименование = "Денежные средства наличные";
	
	//}
	
	
	Возврат ТаблицаПравилВыгрузки;
КонецФункции
//} КонецОбласти
//{ Область АлгоритмыОстатков
//{ Область АлгоритмыОстатков
Процедура ВыгрузкаДокументаОстатков(КомпонентыОбмена, ДанныеИБСтруктура, ПОДдокумента, СтрокаВыборки, ТаблицаДанныхПоНоменклатуре)
	ВыгружатьДокументыПоступлений = ?(КомпонентыОбмена.ПараметрыКонвертации.Свойство("ОстаткиВыгружатьДокументыПоступлений"),КомпонентыОбмена.ПараметрыКонвертации.ОстаткиВыгружатьДокументыПоступлений=Истина, Ложь);
	ТМЦ = ПолучитьТаблицуОстатковТМЦшаблон();
	Для Каждого СтрокаТ Из СтрокаВыборки.Товары Цикл
		
		НоваяСтрокаТовары = ТМЦ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТ);
		СтрокаН = ТаблицаДанныхПоНоменклатуре.Найти(НоваяСтрокаТовары.Номенклатура, "Номенклатура");
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаН);
		Если ВыгружатьДокументыПоступлений Тогда
			НоваяСтрокаТовары.ДокументПоступления = СтрокаТ.ДокументОприходования;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТ.НомерГТД) Тогда
			Если ТипЗнч(СтрокаТ.НомерГТД)=Тип("Структура") И СтрокаТ.НомерГТД.Свойство("Код") Тогда
				НоваяСтрокаТовары.НомерГТД = СокрЛП(СтрокаТ.НомерГТД.Код.Код);
				Если НЕ ЗначениеЗаполнено(НоваяСтрокаТовары.СтранаПроисхождения) Тогда
					НоваяСтрокаТовары.СтранаПроисхождения = СтрокаТ.НомерГТД.СтранаПроисхождения;
				КонецЕсли;
			Иначе
				НоваяСтрокаТовары.НомерГТД = СокрЛП(СтрокаТ.НомерГТД.Код);
				Если НЕ ЗначениеЗаполнено(НоваяСтрокаТовары.СтранаПроисхождения) Тогда
					НоваяСтрокаТовары.СтранаПроисхождения = СтрокаТ.НомерГТД.СтранаПроисхожденияТовара;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТМЦ.Количество()>0 Тогда
		ДанныеИБСтруктура.Вставить("ТМЦ", ТМЦ);
		ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПОДдокумента);
	КонецЕсли;
КонецПроцедуры
Функция ПолучитьКурсыВалютНаДату(ДатаКурса)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК ВалютаВзаиморасчетов,
	|	КурсыВалютСрезПоследних.Курс КАК КурсВзаиморасчетов,
	|	КурсыВалютСрезПоследних.Кратность КАК КратностьВзаиморасчетов
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, ) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаКурса", ДатаКурса);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции
Функция КлючевыеПоляДокументаВводаОстатковЗаполнены(КомпонентыОбмена, ДанныеИБСтруктура)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ПоляДляПроверки = Новый Массив;
	ПоляДляПроверки.Добавить("Организация");
	ПоляДляПроверки.Добавить("Контрагент");
	ПоляДляПроверки.Добавить("Склад");
	
	Для Каждого ИмяПоля Из ПоляДляПроверки Цикл
		
		Если ДанныеИБСтруктура.Свойство(ИмяПоля) И НЕ ЗначениеЗаполнено(ДанныеИБСтруктура[ИмяПоля]) Тогда
			
			ИмяПоляЗначениеПоУмолчанию = "ЗначениеПоУмолчанию_"+ИмяПоля;
			ПараметрыКонвертации.Свойство(ИмяПоляЗначениеПоУмолчанию,ДанныеИБСтруктура[ИмяПоля]);
			Если НЕ ЗначениеЗаполнено(ДанныеИБСтруктура[ИмяПоля]) Тогда
				Если ИмяПоля="Организация" Тогда
					Если ПараметрыКонвертации.Свойство("ИспользоватьОтборПоОрганизациям") И ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям И ПараметрыКонвертации.Организации.Количество() > 0 Тогда
						Организация = ПараметрыКонвертации.Организации[0].Значение;
					Иначе
						Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
					КонецЕсли;
					ДанныеИБСтруктура[ИмяПоля] = Организация;
				КонецЕсли;
	
				Если ИмяПоля="Склад" Тогда
					Если ПараметрыКонвертации.Свойство("ИспользоватьОтборПоСкладам") И ПараметрыКонвертации.ИспользоватьОтборПоСкладам И ПараметрыКонвертации.Склады.Количество() > 0 Тогда
						Склад = ПараметрыКонвертации.Склады[0].Значение;
					Иначе
						Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
					КонецЕсли;
					ДанныеИБСтруктура[ИмяПоля] = Склад;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеИБСтруктура[ИмяПоля]) Тогда
				Если НЕ ПараметрыКонвертации.Свойство(ИмяПоляЗначениеПоУмолчанию) Тогда
					ПараметрыКонвертации.Вставить(ИмяПоляЗначениеПоУмолчанию,ДанныеИБСтруктура[ИмяПоля]); 
				КонецЕсли;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции
//} КонецОбласти
//{ Область ВводОстатковТоваров
Процедура ВводОстатковТоварыНаСкладахУУБУ(КомпонентыОбмена, Комментарий="")
	ВводОстатковТоварыНаСкладах(КомпонентыОбмена, Комментарий);
КонецПроцедуры
Процедура ВводОстатковТоварыНаСкладах(КомпонентыОбмена, Комментарий="")
	// Альтернативный вариант, произвольный алгоритм на случай если другие варианты получения остатков не дают результата
	
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ПОДдокумента = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ОстаткиСобственныхТМЦ_Стр_Отправка", "Имя");
	
	ТМЦш = ПолучитьТаблицуОстатковТМЦшаблон();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТоварыНаСкладахОстатки.Склад КАК Склад,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, ) КАК ТоварыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстатки.Склад КАК Склад,
	|	втОстатки.Номенклатура,
	|	втОстатки.Характеристика,
	|	втОстатки.Номенклатура.ЕдиницаХраненияОстатков КАК Упаковка,
	|	&ВидЗапасов,
	|	втОстатки.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
	|	втОстатки.Количество,
	|	втОстатки.Количество КАК КоличествоУпаковок,
	|	втОстатки.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	&Сумма КАК СуммаБезНДС,
	|	&Сумма КАК СуммаНДС
	|ИЗ
	|	втОстатки КАК втОстатки
	|ИТОГИ ПО
	|	Склад";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ПараметрыКонвертации.ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидЗапасов", "СобственныеТовары");
	Запрос.УстановитьПараметр("Сумма", -1);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСклад = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСклад.Следующий() Цикл
		
		ДанныеИБСтруктура = Новый Структура;
		ДанныеИБСтруктура.Вставить("Дата", ПараметрыКонвертации.ДатаОстатков);
		ДанныеИБСтруктура.Вставить("Организация");
		ДанныеИБСтруктура.Вставить("Склад", ВыборкаСклад.Склад);
		ДанныеИБСтруктура.Вставить("Комментарий", "");
		Если НЕ КлючевыеПоляДокументаВводаОстатковЗаполнены(КомпонентыОбмена, ДанныеИБСтруктура) Тогда
			Продолжить;
		КонецЕсли;
		ТМЦ = ТМЦш.Скопировать();
		ВыборкаДетальныеЗаписи = ВыборкаСклад.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрокаТовары = ТМЦ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, ВыборкаДетальныеЗаписи);			
		КонецЦикла;
		
		Если ТМЦ.Количество()>0 Тогда
			ДанныеИБСтруктура.Вставить("ТМЦ", ТМЦ);
			ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПОДдокумента);
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры
Функция ПолучитьТаблицуОстатковТМЦшаблон()
	ТМЦш = Новый ТаблицаЗначений;
	ТМЦш.Колонки.Добавить("Номенклатура");
	ТМЦш.Колонки.Добавить("Характеристика");
	ТМЦш.Колонки.Добавить("Серия");
	ТМЦш.Колонки.Добавить("Упаковка");
	ТМЦш.Колонки.Добавить("Штрихкод");
	ТМЦш.Колонки.Добавить("СчетУчета");
	ТМЦш.Колонки.Добавить("ВидЗапасов");
	ТМЦш.Колонки.Добавить("ЕдиницаИзмерения");
	ТМЦш.Колонки.Добавить("Качество");
	ТМЦш.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТМЦш.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТМЦш.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТМЦш.Колонки.Добавить("СуммаНУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТМЦш.Колонки.Добавить("СтавкаНДС");
	ТМЦш.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТМЦш.Колонки.Добавить("НомерГТД");
	ТМЦш.Колонки.Добавить("СтранаПроисхождения");
	ТМЦш.Колонки.Добавить("НДСРегл");
	ТМЦш.Колонки.Добавить("СчетФактура");
	ТМЦш.Колонки.Добавить("ДокументПоступления");
	ТМЦш.Колонки.Добавить("Комментарий");
	
	Возврат ТМЦш;
КонецФункции
Функция ВыборкаОстатков_СобственныеТовары(КомпонентыОбмена)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	Параметры = Новый Структура;
	Параметры.Вставить("Организации", ?(ПараметрыКонвертации.Свойство("ИспользоватьОтборПоОрганизациям") И ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям, КомпонентыОбмена.ПараметрыКонвертации.Организации.ВыгрузитьЗначения(), Новый Массив ));
	Параметры.Вставить("ДатаОстатков", ПараметрыКонвертации.ДатаОстатков);
	Параметры.Вставить("РежимВыгрузкиСерий", 1); // 0 Не переносить информацию о сериях, 1 Переносить информацию об остатках серий, 2 Детализировать себестоимость по сериям
	
	
	Если ПараметрыКонвертации.Свойство("ПараметрыОстатков") Тогда
		ЗаполнитьЗначенияСвойств(Параметры,ПараметрыКонвертации.ПараметрыОстатков);
	КонецЕсли;
	ПараметрыКонвертации.Вставить("ПараметрыОстатков", Параметры);
	
	//{КД2 
	ЗапросУчетнаяПолитка = Новый Запрос;
	ЗапросУчетнаяПолитка.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаСрезПоследних.ВестиПартионныйУчетПоСкладам
		|ИЗ
		|	РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитикаСрезПоследних";
		
	Выборка = ЗапросУчетнаяПолитка.Выполнить().Выбрать();
	
	Запрос = Новый Запрос;
	ВедетсяПартионныйУчетПоСкладам = Выборка.Следующий() И Выборка.ВестиПартионныйУчетПоСкладам;
	Если ВедетсяПартионныйУчетПоСкладам Тогда
		Запрос.Текст = ПолучитьТекстЗапроса_СобственныеТоварыНаСкладах();
	Иначе
		Запрос.Текст = ПолучитьТекстЗапроса_СобствТоварыПартииБезСкладов();
	КонецЕсли;	
	
	Если Параметры.Организации.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО (ИСТИНА)", 
									"ПО (ИСТИНА)
							        |ГДЕ
									|	ОстаткиПоПартиямСУчетнойПолитикой.Организация В (&МассивОрганизаций)");
		Запрос.УстановитьПараметр("МассивОрганизаций", Параметры.Организации);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Остатки(&ДатаОстатков, )", "Остатки(&ДатаОстатков, Организация В (&МассивОрганизаций))");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТипыНоменклатуры.Товар)) КАК ОстаткиТоваров", "ТипыНоменклатуры.Товар) И ДокументОприходования.Организация В (&МассивОрганизаций) ) КАК ОстаткиТоваров");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТоварыНаСкладах КАК ТоварыНаСкладах", "ТоварыНаСкладах КАК ТоварыНаСкладах ГДЕ ТоварыНаСкладах.Регистратор.Организация В (&МассивОрганизаций) ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТоварыВРознице КАК ТоварыВРознице", "ТоварыВРознице КАК ТоварыВРознице ГДЕ ТоварыВРознице.Регистратор.Организация В (&МассивОрганизаций) ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТоварыВНТТ КАК ТоварыВНТТ", "ТоварыВНТТ КАК ТоварыВНТТ ГДЕ ТоварыВНТТ.Регистратор.Организация В (&МассивОрганизаций) ");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("Валюта");
	ВыборкаДанных.Колонки.Добавить("Склад");
	ВыборкаДанных.Колонки.Добавить("Партнер");
	ВыборкаДанных.Колонки.Добавить("Контрагент");
	ВыборкаДанных.Колонки.Добавить("Договор");
	ВыборкаДанных.Колонки.Добавить("ПредъявленСчетФактура");
	ВыборкаДанных.Колонки.Добавить("НомерСчетаФактуры");
	ВыборкаДанных.Колонки.Добавить("ДатаСчетаФактуры");
	ВыборкаДанных.Колонки.Добавить("Товары");
	ВыборкаДанных.Колонки.Добавить("Серии");
	ВыборкаДанных.Колонки.Добавить("Комментарий");
	
	НоваяСтрока = Неопределено;
	
	Если ВедетсяПартионныйУчетПоСкладам Тогда
		РезультатыЗапроса = Запрос.Выполнить();
		ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоОрганизациям.Следующий() Цикл
			
			ВыборкаПоСкладам = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСкладам.Следующий() Цикл
				
				ВыборкаПоСложномуУчету = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоСложномуУчету.Следующий() Цикл
					
					ВыборкаПоДокументамПоступления = ВыборкаПоСложномуУчету.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаПоДокументамПоступления.Следующий() Цикл
						
						НоваяСтрока = ВыборкаДанных.Добавить();
						НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
						НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация;
						НоваяСтрока.Склад       = ВыборкаПоСкладам.Склад;
						НоваяСтрока.Комментарий = НСтр("ru = 'УТ10.3 -> ED: Собственные товары на складах'");
						НоваяСтрока.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
						
						ПредъявленСФ = Неопределено; 
						ДополнениеККоментарию = "";
						ПредъявленСФ = УчетНДС.НайтиПодчиненныйДокумент(ВыборкаПоДокументамПоступления.ДокументОприходования, "СчетФактураПолученный");
						
						НоваяСтрока.ПредъявленСчетФактура = Ложь;
						Если ЗначениеЗаполнено(ВыборкаПоДокументамПоступления.ДокументОприходования) Тогда
							ДополнениеККоментарию = НСтр("ru = '. Остатки по документу номер: %1 от: %2'");
							ДополнениеККоментарию = СтрЗаменить(ДополнениеККоментарию, "%2", ВыборкаПоДокументамПоступления.ДатаДокументаОприходования);
							ДополнениеККоментарию = СтрЗаменить(ДополнениеККоментарию, "%1", ВыборкаПоДокументамПоступления.НомерДокументаОприходования);
						КонецЕсли;
						
						Контрагент = ВыборкаПоДокументамПоступления.Партнер;
						Договор    = ВыборкаПоДокументамПоступления.Договор;
						
						Если ЗначениеЗаполнено(ПредъявленСФ) Тогда
							
							ДанныеСФ = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПредъявленСФ,
								"Контрагент, ДоговорКонтрагента, НомерВходящегоДокумента, ДатаВходящегоДокумента");
							
							НоваяСтрока.ПредъявленСчетФактура = Истина;
							НоваяСтрока.НомерСчетаФактуры = ДанныеСФ.НомерВходящегоДокумента;
							НоваяСтрока.ДатаСчетаФактуры  = ДанныеСФ.ДатаВходящегоДокумента;
							
							Если Не ЗначениеЗаполнено(Контрагент) Тогда
								Контрагент = ДанныеСФ.Контрагент;
								Договор    = ДанныеСФ.ДоговорКонтрагента;
							КонецЕсли;
							
						КонецЕсли;
						
						НоваяСтрока.Партнер    = Контрагент;
						НоваяСтрока.Контрагент = Контрагент;
						НоваяСтрока.Договор    = Договор;
						
						НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + ДополнениеККоментарию;
	
						НоваяСтрока.Товары = Новый ТаблицаЗначений;
						НоваяСтрока.Товары.Колонки.Добавить("Номенклатура");
						НоваяСтрока.Товары.Колонки.Добавить("Характеристика");
						НоваяСтрока.Товары.Колонки.Добавить("Качество");
						НоваяСтрока.Товары.Колонки.Добавить("Количество");
						НоваяСтрока.Товары.Колонки.Добавить("КоличествоУпаковок");
						НоваяСтрока.Товары.Колонки.Добавить("Цена");
						НоваяСтрока.Товары.Колонки.Добавить("Сумма");
						НоваяСтрока.Товары.Колонки.Добавить("СуммаРегл");
						НоваяСтрока.Товары.Колонки.Добавить("СтавкаНДС");
						НоваяСтрока.Товары.Колонки.Добавить("СуммаБезНДС");
						НоваяСтрока.Товары.Колонки.Добавить("СуммаНДС");
						НоваяСтрока.Товары.Колонки.Добавить("НДСРегл");
						НоваяСтрока.Товары.Колонки.Добавить("НомерГТД");
						НоваяСтрока.Товары.Колонки.Добавить("Серия");
						
						НоваяСтрока.Серии = Новый ТаблицаЗначений;
						НоваяСтрока.Серии.Колонки.Добавить("Номенклатура");
						НоваяСтрока.Серии.Колонки.Добавить("Характеристика");
						НоваяСтрока.Серии.Колонки.Добавить("Качество");
						НоваяСтрока.Серии.Колонки.Добавить("Серия");
						НоваяСтрока.Серии.Колонки.Добавить("Количество");
						НоваяСтрока.Серии.Колонки.Добавить("КоличествоУпаковок");
				
						ВыборкаДетальныеЗаписи = ВыборкаПоДокументамПоступления.Выбрать();
						Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
							СтрокаСообщения = "";
							Если ВыборкаДетальныеЗаписи.Количество < 0 Тогда
								СтрокаСообщения = НСтр("ru = 'Обнаружен отрицательный остаток на складе ""%1"" по товару ""%2"" при выгрузке по правилу: ""%3""'");
							ИначеЕсли ВыборкаДетальныеЗаписи.Сумма <= 0 Или ВыборкаДетальныеЗаписи.Количество = 0 Тогда
								СтрокаСообщения = НСтр("ru = 'Обнаружен некорректный суммовой остаток на складе ""%1"" по товару ""%2"" при выгрузке по правилу: ""%3""'");
							ИначеЕсли ВыборкаДетальныеЗаписи.СуммаСНДСРегл <= ВыборкаДетальныеЗаписи.НДСРегл Или ВыборкаДетальныеЗаписи.НДСРегл < 0 Тогда
								СтрокаСообщения = НСтр("ru = 'Обнаружен некорректный суммовой остаток по данным регл. учета на складе ""%1"" по товару ""%2"" при выгрузке по правилу: ""%3""'");
							КонецЕсли;
							
							Если ЗначениеЗаполнено(СтрокаСообщения) Тогда
								СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1", ВыборкаПоСкладам.Склад);
								СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2", ВыборкаДетальныеЗаписи.Номенклатура);
								СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3", НСтр("ru = 'Собственные товары на складах'"));
								
								Если Не ЗначениеЗаполнено(ВыборкаПоСкладам.Склад) Тогда
									СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "на складе """" ", "");
								КонецЕсли;
								
								ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщения,,Ложь);
								Продолжить;
							КонецЕсли;
					
							НоваяСтрокаТовары = НоваяСтрока.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, ВыборкаДетальныеЗаписи);
							НоваяСтрокаТовары.Цена = ВыборкаДетальныеЗаписи.Сумма / ВыборкаДетальныеЗаписи.Количество;
							НоваяСтрокаТовары.КоличествоУпаковок = ВыборкаДетальныеЗаписи.Количество;
					
							Если НоваяСтрокаТовары.НДСРегл = 0 Тогда
								СтавкаНДСЧислом = УчетНДС.ПолучитьСтавкуНДС(ВыборкаДетальныеЗаписи.СтавкаНДС) / 100;
								НоваяСтрокаТовары.СуммаНДС    = НоваяСтрокаТовары.Сумма / (СтавкаНДСЧислом + 1) * СтавкаНДСЧислом;
								НоваяСтрокаТовары.НДСРегл     = ВыборкаДетальныеЗаписи.СуммаСНДСРегл / (СтавкаНДСЧислом + 1) * СтавкаНДСЧислом;
								НоваяСтрокаТовары.СуммаБезНДС = НоваяСтрокаТовары.Сумма - НоваяСтрокаТовары.СуммаНДС;
	 
							КонецЕсли;
					
							НоваяСтрокаТовары.СуммаРегл = ВыборкаДетальныеЗаписи.СуммаСНДСРегл - НоваяСтрокаТовары.НДСРегл;
					
							Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерГТД) Тогда
								НоваяСтрокаТовары.НомерГТД = Новый Структура;
								НоваяСтрокаТовары.НомерГТД.Вставить("Владелец", ВыборкаДетальныеЗаписи.Номенклатура);
								НоваяСтрокаТовары.НомерГТД.Вставить("СтранаПроисхождения", ВыборкаДетальныеЗаписи.СтранаПроисхождения);
								НоваяСтрокаТовары.НомерГТД.Вставить("ПометкаУдаления", ВыборкаДетальныеЗаписи.ПометкаУдаления);
								НоваяСтрокаТовары.НомерГТД.Вставить("Код", ВыборкаДетальныеЗаписи.НомерГТД);
							КонецЕсли;
					
							// Запоминаем серии номенклатуры, если для нее ведется учет серий
							Если ВыборкаДетальныеЗаписи.ВестиУчетПоСериям Тогда
								Если Параметры.РежимВыгрузкиСерий = 1 Тогда
									НоваяСтрокаСерии = НоваяСтрока.Серии.Добавить();
									НоваяСтрокаСерии.КоличествоУпаковок = ВыборкаДетальныеЗаписи.Количество;
									ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, ВыборкаДетальныеЗаписи);
								ИначеЕсли Параметры.РежимВыгрузкиСерий = 2 Тогда
									НоваяСтрокаТовары.Серия = ВыборкаДетальныеЗаписи.Серия;
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
				
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если НоваяСтрока <> Неопределено И НоваяСтрока.Товары.Количество() = 0 Тогда
			ВыборкаДанных.Удалить(НоваяСтрока);
		КонецЕсли;	
		
	Иначе // если не ведется партионный учет по складам
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		ТаблицаПартииТоваров    = РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выгрузить();
		ТаблицаТоваровПоСкладам = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
		
		Если Не Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() Тогда
			ТаблицаТоваровПоСкладам.Свернуть("Организация, Склад, Номенклатура, Характеристика, Серия, Качество, ВестиУчетПоСериям, ВестиПартионныйУчетПоСериям", "Количество");
			ТаблицаПартииТоваров.Свернуть("Организация, Номенклатура, Характеристика, Качество, Серия, СтавкаНДС, НомерГТД, СтранаПроисхождения", 
											"Количество, Сумма, НДСРегл, СуммаНДС, СуммаСНДСРегл");
		КонецЕсли;
		
		ТекущийСклад          = Неопределено;
		ТекущаяОрганизация    = Неопределено;
		
		НоваяСтрока = Неопределено;
		
		Для Каждого Строка Из ТаблицаТоваровПоСкладам Цикл
			Если Строка.Организация <> ТекущаяОрганизация Или ТекущийСклад <> Строка.Склад Тогда
				
				НоваяСтрока = ВыборкаДанных.Добавить();
				ТекущаяОрганизация    = Строка.Организация;
				ТекущийСклад          = Строка.Склад;
							
				НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
				НоваяСтрока.Организация = ТекущаяОрганизация;
				НоваяСтрока.Склад       = Строка.Склад;
				НоваяСтрока.Комментарий = НСтр("ru = 'УТ10.3 -> ED: Собственные товары на складах'");
				НоваяСтрока.Валюта      = Константы.ВалютаУправленческогоУчета.Получить();
				
				НоваяСтрока.Товары = Новый ТаблицаЗначений;
				НоваяСтрока.Товары.Колонки.Добавить("Номенклатура");
				НоваяСтрока.Товары.Колонки.Добавить("Характеристика");
				НоваяСтрока.Товары.Колонки.Добавить("Качество");
				НоваяСтрока.Товары.Колонки.Добавить("Количество");
				НоваяСтрока.Товары.Колонки.Добавить("КоличествоУпаковок");
				НоваяСтрока.Товары.Колонки.Добавить("Цена");
				НоваяСтрока.Товары.Колонки.Добавить("Сумма");
				НоваяСтрока.Товары.Колонки.Добавить("СуммаРегл");
				НоваяСтрока.Товары.Колонки.Добавить("СтавкаНДС");
				НоваяСтрока.Товары.Колонки.Добавить("СуммаБезНДС");
				НоваяСтрока.Товары.Колонки.Добавить("СуммаНДС");
				НоваяСтрока.Товары.Колонки.Добавить("НДСРегл");
				НоваяСтрока.Товары.Колонки.Добавить("НомерГТД");
				НоваяСтрока.Товары.Колонки.Добавить("Серия");
				НоваяСтрока.Товары.Колонки.Добавить("ВестиУчетПоСериям");
				НоваяСтрока.Товары.Колонки.Добавить("ВестиПартионныйУчетПоСериям");
				
				НоваяСтрока.Серии = Новый ТаблицаЗначений;
				НоваяСтрока.Серии.Колонки.Добавить("Номенклатура");
				НоваяСтрока.Серии.Колонки.Добавить("Характеристика");
				НоваяСтрока.Серии.Колонки.Добавить("Качество");
				НоваяСтрока.Серии.Колонки.Добавить("Серия");
				НоваяСтрока.Серии.Колонки.Добавить("Количество");
				НоваяСтрока.Серии.Колонки.Добавить("КоличествоУпаковок");
				
			КонецЕсли;
			
			СтрокаСообщения = "";
			Если Строка.Количество < 0 Тогда
				СтрокаСообщения = НСтр("ru = 'Обнаружен отрицательный остаток на складе ""%1"" по товару ""%2"" при выгрузке по правилу: ""%3""'");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаСообщения) Тогда
				СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1", Строка.Склад);
				СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2", Строка.Номенклатура);
				СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3", НСтр("ru = 'Собственные товары на складах'"));
				Если Не ЗначениеЗаполнено(Строка.Склад) Тогда
					СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "на складе """" ", "");
				КонецЕсли;
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщения,,Ложь);
				Продолжить;
			КонецЕсли;
	
			НоваяСтрокаТовары = НоваяСтрока.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, Строка);
			НоваяСтрокаТовары.КоличествоУпаковок = Строка.Количество;
			НоваяСтрокаТовары.Цена        = 0;
			НоваяСтрокаТовары.Сумма       = 0;
			НоваяСтрокаТовары.СуммаРегл   = 0;
			НоваяСтрокаТовары.СуммаБезНДС = 0;
			НоваяСтрокаТовары.СуммаНДС    = 0;
			НоваяСтрокаТовары.НДСРегл     = 0;
			
			// Запоминаем серии номенклатуры, если для нее ведется учет серий
			Если Строка.ВестиУчетПоСериям Тогда
				Если Параметры.РежимВыгрузкиСерий = 1 Тогда
					НоваяСтрокаСерии = НоваяСтрока.Серии.Добавить();
					НоваяСтрокаСерии.КоличествоУпаковок = Строка.Количество;
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, Строка);
				ИначеЕсли Параметры.РежимВыгрузкиСерий = 2 Тогда
					НоваяСтрокаТовары.Серия = Строка.Серия;
				КонецЕсли;
			КонецЕсли;
												
		КонецЦикла;
		
		// Выборка разбита по складам и организациям. И количественные данные также заполнены.
		Для Каждого Строка Из ВыборкаДанных Цикл
			Для Каждого СтрокаТоваров Из Строка.Товары Цикл
				
				Если СтрокаТоваров.ВестиПартионныйУчетПоСериям Тогда
					СтруктураПоиска = Новый Структура("Организация, Номенклатура, Характеристика, Серия, Качество", 
														Строка.Организация, СтрокаТоваров.Номенклатура, СтрокаТоваров.Характеристика, СтрокаТоваров.Серия, СтрокаТоваров.Качество);
														
				Иначе										
					СтруктураПоиска = Новый Структура("Организация, Номенклатура, Характеристика, Качество", 
														Строка.Организация, СтрокаТоваров.Номенклатура, СтрокаТоваров.Характеристика, СтрокаТоваров.Качество);
														
				КонецЕсли;
				
				НайденныеСтроки = ТаблицаПартииТоваров.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
						
					СтрокаПартий = НайденныеСтроки[0];
					
					Если СтрокаПартий.Количество = 0 Тогда
						Цена = СтрокаПартий.Сумма;
						ЦенаСНДСРегл = СтрокаПартий.СуммаСНДСРегл;
						ЦенаНДС = СтрокаПартий.СуммаНДС;
						ЦенаНДСРегл = СтрокаПартий.НДСРегл;
					Иначе
						Цена = СтрокаПартий.Сумма / СтрокаПартий.Количество;
						ЦенаСНДСРегл = СтрокаПартий.СуммаСНДСРегл / СтрокаПартий.Количество;
						ЦенаНДС = СтрокаПартий.СуммаНДС / СтрокаПартий.Количество;
						ЦенаНДСРегл = СтрокаПартий.НДСРегл / СтрокаПартий.Количество;
					КонецЕсли;
					
					Если ЦенаСНДСРегл <= ЦенаНДСРегл Тогда
						ЦенаСНДСРегл = Окр(ЦенаНДСРегл * 1.18 / 0.18, 2);
					КонецЕсли;
					Если Цена <= ЦенаНДС Тогда
						Цена = Окр(ЦенаНДС / 0.18, 2);
					КонецЕсли;
					
					СтрокаТоваров.Цена        = Окр(Цена, 2);
					СтрокаТоваров.Сумма       = Окр(Цена * СтрокаТоваров.Количество, 2);
					СтрокаТоваров.СуммаРегл   = Окр((ЦенаСНДСРегл - ЦенаНДСРегл) * СтрокаТоваров.Количество, 2);
					СтрокаТоваров.СтавкаНДС   = СтрокаПартий.СтавкаНДС;
					СтрокаТоваров.СуммаБезНДС = Окр((Цена - ЦенаНДС) * СтрокаТоваров.Количество, 2);
					СтрокаТоваров.СуммаНДС    = Окр(ЦенаНДС * СтрокаТоваров.Количество, 2);
					СтрокаТоваров.НДСРегл     = Окр(ЦенаНДСРегл * СтрокаТоваров.Количество, 2);
					
					Если ЗначениеЗаполнено(СтрокаТоваров.Серия) Тогда
						СтрокаТоваров.НомерГТД = ОбщегоНазначения.ПолучитьЗначениеРеквизита(СтрокаТоваров.Серия, "НомерГТД");
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СтрокаТоваров.СтавкаНДС) Тогда
						СтрокаТоваров.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
					КонецЕсли;
					
				Иначе // это возвратная тара, она переносится в отдельном правиле, не здесь
					СтрокаТоваров.Количество = 0;
				КонецЕсли;
				
			КонецЦикла;
				
		КонецЦикла;
		
	КонецЕсли;
	
	Индекс = ВыборкаДанных.Количество()-1;
	Пока Индекс >= 0 Цикл
		Строка = ВыборкаДанных.Получить(Индекс);
		Если Строка.Товары.Количество() = 0 Тогда
			ВыборкаДанных.Удалить(Строка);
		Иначе
			ИндексТоваров = Строка.Товары.Количество()-1;
			Пока ИндексТоваров >= 0 Цикл
				СтрокаТоваров = Строка.Товары.Получить(ИндексТоваров);
				Если Окр(СтрокаТоваров.Сумма, 2) = 0 Или СтрокаТоваров.Количество = 0 Тогда
					Строка.Товары.Удалить(СтрокаТоваров);
				КонецЕсли;
				
				ИндексТоваров = ИндексТоваров - 1;
			КонецЦикла;
			Если Строка.Товары.Количество() = 0 Тогда
				ВыборкаДанных.Удалить(Строка);
			КонецЕсли;	
		КонецЕсли;
		
		Индекс = Индекс - 1;
	КонецЦикла;
	//}
	
	Возврат ВыборкаДанных;
КонецФункции
Процедура ВводОстатковТоварыПринятыеНаКомиссию(КомпонентыОбмена, Комментарий="")
	ВыборкаДанных = ВыборкаОстатков_ТоварыПринятыеНаКомиссию(КомпонентыОбмена);
	
	Если НЕ ЗначениеЗаполнено(ВыборкаДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ПОДдокумента = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка", "Имя");
	
	Для Каждого СтрокаВыборки Из ВыборкаДанных Цикл
		
		ДанныеИБСтруктура = Новый Структура;
		ДанныеИБСтруктура.Вставить("Дата", ПараметрыКонвертации.ДатаОстатков);
		ДанныеИБСтруктура.Вставить("Организация", СтрокаВыборки.Организация);
		ДанныеИБСтруктура.Вставить("Склад", СтрокаВыборки.Склад);
		ДанныеИБСтруктура.Вставить("Контрагент", СтрокаВыборки.Контрагент);
		ДанныеИБСтруктура.Вставить("Договор", СтрокаВыборки.Договор);
		
		Если НЕ ЗначениеЗаполнено(ДанныеИБСтруктура.Организация) ИЛИ НЕ ЗначениеЗаполнено(ДанныеИБСтруктура.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		//{ ТаблицаДанныхПоНоменклатуре
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.ЕдиницаХраненияОстатков КАК Упаковка,
		|	Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
		|	&ВидЗапасов КАК ВидЗапасов
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)";
		
		МассивНоменклатуры = СтрокаВыборки.Товары.ВыгрузитьКолонку("Номенклатура");
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
		
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.УстановитьПараметр("ВидЗапасов", "СобственныеТовары");
		
		ТаблицаДанныхПоНоменклатуре = Запрос.Выполнить().Выгрузить();
		ТаблицаДанныхПоНоменклатуре.Индексы.Добавить("Номенклатура");
		//}		
		
		ВыгрузкаДокументаОстатков(КомпонентыОбмена, ДанныеИБСтруктура, ПОДдокумента, СтрокаВыборки, ТаблицаДанныхПоНоменклатуре);
	
	КонецЦикла;
КонецПроцедуры
Процедура ВводОстатковТоварыПереданныеНаКомиссию(КомпонентыОбмена, Комментарий="")
	ВыборкаДанных = ВыборкаОстатков_ТоварыПереданныеНаКомиссию(КомпонентыОбмена);
	
	Если НЕ ЗначениеЗаполнено(ВыборкаДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ПОДдокумента = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ", "Имя");
	
	Для Каждого СтрокаВыборки Из ВыборкаДанных Цикл
		
		ДанныеИБСтруктура = Новый Структура;
		ДанныеИБСтруктура.Вставить("Дата", ПараметрыКонвертации.ДатаОстатков);
		ДанныеИБСтруктура.Вставить("Организация", СтрокаВыборки.Организация);
		ДанныеИБСтруктура.Вставить("Контрагент", СтрокаВыборки.Партнер);
		
		Если НЕ ЗначениеЗаполнено(ДанныеИБСтруктура.Организация) ИЛИ НЕ ЗначениеЗаполнено(ДанныеИБСтруктура.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		//{ ТаблицаДанныхПоНоменклатуре
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.ЕдиницаХраненияОстатков КАК Упаковка,
		|	Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
		|	&ВидЗапасов КАК ВидЗапасов
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)";
		
		МассивНоменклатуры = СтрокаВыборки.Товары.ВыгрузитьКолонку("Номенклатура");
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
		
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.УстановитьПараметр("ВидЗапасов", "СобственныеТовары");
		
		ТаблицаДанныхПоНоменклатуре = Запрос.Выполнить().Выгрузить();
		ТаблицаДанныхПоНоменклатуре.Индексы.Добавить("Номенклатура");
		//}		
		
		ВыгрузкаДокументаОстатков(КомпонентыОбмена, ДанныеИБСтруктура, ПОДдокумента, СтрокаВыборки, ТаблицаДанныхПоНоменклатуре);
	
	КонецЦикла;
КонецПроцедуры
Функция ВыборкаОстатков_ТоварыПринятыеНаКомиссию(КомпонентыОбмена)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	Параметры = Новый Структура;
	Параметры.Вставить("Организации", ?(ПараметрыКонвертации.Свойство("ИспользоватьОтборПоОрганизациям") И ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям, КомпонентыОбмена.ПараметрыКонвертации.Организации.ВыгрузитьЗначения(), Новый Массив ));
	Параметры.Вставить("ДатаОстатков", ПараметрыКонвертации.ДатаОстатков);
	Параметры.Вставить("РежимВыгрузкиСерий", 1); // 0 Не переносить информацию о сериях, 1 Переносить информацию об остатках серий, 2 Детализировать себестоимость по сериям
	
	Если ПараметрыКонвертации.Свойство("ПараметрыОстатков") Тогда
		ЗаполнитьЗначенияСвойств(Параметры,ПараметрыКонвертации.ПараметрыОстатков);
	КонецЕсли;
	ПараметрыКонвертации.Вставить("ПараметрыОстатков", Параметры);
	
	//{КД2 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.ДокументОприходования.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.ДокументОприходования.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.ДокументОприходования.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.ДокументОприходования.ДоговорКонтрагента.ВалютаВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаВзаиморасчетов,
	|	ПартииТоваровНаСкладахОстатки.Склад КАК Склад,
	|	ПартииТоваровНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ПартииТоваровНаСкладахОстатки.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ПартииТоваровНаСкладахОстатки.Номенклатура.ВестиУчетПоСериям КАК ВестиУчетПоСериям,
	|	ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ПартииТоваровНаСкладахОстатки.СерияНоменклатуры КАК Серия,
	|	ПартииТоваровНаСкладахОстатки.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ПартииТоваровНаСкладахОстатки.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ПартииТоваровНаСкладахОстатки.СерияНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
	|	ПартииТоваровНаСкладахОстатки.Качество КАК Качество,
	|	ПартииТоваровНаСкладахОстатки.ДокументОприходования,
	|	СУММА(ВЫБОР
	|			КОГДА ПартииТоваровНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент > 0
	|				ТОГДА ПартииТоваровНаСкладахОстатки.КоличествоОстаток * ПартииТоваровНаСкладахОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|			ИНАЧЕ ПартииТоваровНаСкладахОстатки.КоличествоОстаток
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|			&ДатаОстатков,
	|			СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.НаКомиссию)
	|				И Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ПартииТоваровНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладахОстатки.Номенклатура,
	|	ПартииТоваровНаСкладахОстатки.Склад,
	|	ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.ДокументОприходования.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
	|	ПартииТоваровНаСкладахОстатки.СерияНоменклатуры.НомерГТД,
	|	ПартииТоваровНаСкладахОстатки.СерияНоменклатуры.СтранаПроисхождения,
	|	ПартииТоваровНаСкладахОстатки.СерияНоменклатуры.ПометкаУдаления,
	|	ПартииТоваровНаСкладахОстатки.ДокументОприходования,
	|	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.ДокументОприходования.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)),
	|	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.ДокументОприходования.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)),
	|	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.ДокументОприходования.ДоговорКонтрагента.ВалютаВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)),
	|	ПартииТоваровНаСкладахОстатки.Качество,
	|	ПартииТоваровНаСкладахОстатки.СерияНоменклатуры,
	|	ПартииТоваровНаСкладахОстатки.Номенклатура.ВестиУчетПоСериям
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартииТоваровНаСкладахОстатки.Склад.Наименование,
	|	ПартииТоваровНаСкладахОстатки.Номенклатура.Наименование,
	|	ПартииТоваровНаСкладахОстатки.ХарактеристикаНоменклатуры.Наименование
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Организация,
	|	Склад,
	|	ПартииТоваровНаСкладахОстатки.ДокументОприходования.Контрагент,
	|	ПартииТоваровНаСкладахОстатки.ДокументОприходования.ДоговорКонтрагента";
	
	Если Параметры.Организации.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КАК ПартииТоваровНаСкладахОстатки",
		"КАК ПартииТоваровНаСкладахОстатки
		| ГДЕ
		|	ЕСТЬNULL(ПартииТоваровНаСкладахОстатки.ДокументОприходования.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) В (&МассивОрганизаций) ");
		Запрос.УстановитьПараметр("МассивОрганизаций", Параметры.Организации);	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("Склад");
	ВыборкаДанных.Колонки.Добавить("Партнер");
	ВыборкаДанных.Колонки.Добавить("Контрагент");
	ВыборкаДанных.Колонки.Добавить("СоглашениеСКомитентом");
	ВыборкаДанных.Колонки.Добавить("Договор");
	ВыборкаДанных.Колонки.Добавить("Валюта");
	ВыборкаДанных.Колонки.Добавить("Товары");
	ВыборкаДанных.Колонки.Добавить("Серии");
	ВыборкаДанных.Колонки.Добавить("Комментарий");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		ВыборкаПоСкладам = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоСкладам.Следующий() Цикл
			
			ВыборкаПоКонтрагентам = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоКонтрагентам.Следующий() Цикл
				
				ВыборкаПоДоговорамКонтрагента = ВыборкаПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоДоговорамКонтрагента.Следующий() Цикл
					
					НоваяСтрока = ВыборкаДанных.Добавить();
					НоваяСтрока.Дата                  = КонецДня(Параметры.ДатаОстатков); 
					НоваяСтрока.Организация           = ВыборкаПоОрганизациям.Организация; 
					НоваяСтрока.Склад                 = ВыборкаПоСкладам.Склад; 
					НоваяСтрока.Партнер               = ВыборкаПоКонтрагентам.Контрагент; 
					НоваяСтрока.Контрагент            = ВыборкаПоКонтрагентам.Контрагент; 
					НоваяСтрока.СоглашениеСКомитентом = ВыборкаПоДоговорамКонтрагента.ДоговорКонтрагента; 
					НоваяСтрока.Договор               = ВыборкаПоДоговорамКонтрагента.ДоговорКонтрагента; 
					НоваяСтрока.Валюта                = ВыборкаПоДоговорамКонтрагента.ВалютаВзаиморасчетов; 
					
					НоваяСтрока.Товары = Новый ТаблицаЗначений;
					НоваяСтрока.Товары.Колонки.Добавить("Номенклатура");
					НоваяСтрока.Товары.Колонки.Добавить("Характеристика");
					НоваяСтрока.Товары.Колонки.Добавить("Качество");
					НоваяСтрока.Товары.Колонки.Добавить("Количество");
					НоваяСтрока.Товары.Колонки.Добавить("КоличествоУпаковок");
					НоваяСтрока.Товары.Колонки.Добавить("СтавкаНДС");
					НоваяСтрока.Товары.Колонки.Добавить("НомерГТД");
					НоваяСтрока.Товары.Колонки.Добавить("Серия");
					НоваяСтрока.Товары.Колонки.Добавить("ДокументОприходования"); //ED
					
					НоваяСтрока.Серии = Новый ТаблицаЗначений;
					НоваяСтрока.Серии.Колонки.Добавить("Номенклатура");
					НоваяСтрока.Серии.Колонки.Добавить("Характеристика");
					НоваяСтрока.Серии.Колонки.Добавить("Качество");
					НоваяСтрока.Серии.Колонки.Добавить("Серия");
					НоваяСтрока.Серии.Колонки.Добавить("Количество");
					НоваяСтрока.Серии.Колонки.Добавить("КоличествоУпаковок");
					
					ВыборкаДетальныеЗаписи = ВыборкаПоДоговорамКонтрагента.Выбрать(); 
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
						Если ВыборкаДетальныеЗаписи.Количество < 0 Тогда
							СтрокаСообщения = НСтр("ru = 'Обнаружен отрицательный остаток на складе ""%1"" по товару ""%2"" при выгрузке по правилу: ""%3""'");
							СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1", ВыборкаПоСкладам.Склад);
							СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2", ВыборкаДетальныеЗаписи.Номенклатура);
							СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3", НСтр("ru = 'Товары, принятые на комиссию'"));
							
							Если Не ЗначениеЗаполнено(ВыборкаПоСкладам.Склад) Тогда
								СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "на складе """" ", "");
							КонецЕсли;
							
							ЗаписатьВПротоколВыполнения(СтрокаСообщения,,Ложь);
							Продолжить;
						КонецЕсли;
						
						НоваяСтрокаТовары = НоваяСтрока.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, ВыборкаДетальныеЗаписи);
						Если ВыборкаДетальныеЗаписи.Количество <> 0 Тогда 
							НоваяСтрокаТовары.КоличествоУпаковок = ВыборкаДетальныеЗаписи.Количество;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерГТД) Тогда
							НоваяСтрокаТовары.НомерГТД = Новый Структура;
							НоваяСтрокаТовары.НомерГТД.Вставить("Владелец", ВыборкаДетальныеЗаписи.Номенклатура);
							НоваяСтрокаТовары.НомерГТД.Вставить("СтранаПроисхождения", ВыборкаДетальныеЗаписи.СтранаПроисхождения);
							НоваяСтрокаТовары.НомерГТД.Вставить("ПометкаУдаления", ВыборкаДетальныеЗаписи.ПометкаУдаления);
							НоваяСтрокаТовары.НомерГТД.Вставить("Код", ВыборкаДетальныеЗаписи.НомерГТД);
						КонецЕсли;
						
						// Запоминаем серии номенклатуры, если для нее ведется учет серий
						Если ВыборкаДетальныеЗаписи.ВестиУчетПоСериям Тогда
							Если Параметры.РежимВыгрузкиСерий = 1 Тогда
								НоваяСтрокаСерии = НоваяСтрока.Серии.Добавить();
								НоваяСтрокаСерии.КоличествоУпаковок = ВыборкаДетальныеЗаписи.Количество;
								ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, ВыборкаДетальныеЗаписи);
							ИначеЕсли Параметры.РежимВыгрузкиСерий = 2 Тогда
								НоваяСтрокаТовары.Серия = ВыборкаДетальныеЗаписи.Серия;
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
					
					Если НоваяСтрока.Товары.Количество() = 0 Тогда
						ВыборкаДанных.Удалить(НоваяСтрока);
					Иначе
						Если Параметры.РежимВыгрузкиСерий = 1 Тогда
							НоваяСтрока.Серии.Свернуть("Номенклатура,Характеристика,Качество,Серия", "Количество,КоличествоУпаковок");
						Иначе
							НоваяСтрока.Серии.Очистить();
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	//}
	
	Возврат ВыборкаДанных;
КонецФункции
Функция ВыборкаОстатков_ТоварыПереданныеНаКомиссию(КомпонентыОбмена)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	Параметры = Новый Структура;
	Параметры.Вставить("Организации", ?(ПараметрыКонвертации.Свойство("ИспользоватьОтборПоОрганизациям") И ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям, КомпонентыОбмена.ПараметрыКонвертации.Организации.ВыгрузитьЗначения(), Новый Массив ));
	Параметры.Вставить("ДатаОстатков", ПараметрыКонвертации.ДатаОстатков);
	Параметры.Вставить("РежимВыгрузкиСерий", 1); // 0 Не переносить информацию о сериях, 1 Переносить информацию об остатках серий, 2 Детализировать себестоимость по сериям
	
	Если ПараметрыКонвертации.Свойство("ПараметрыОстатков") Тогда
		ЗаполнитьЗначенияСвойств(Параметры,ПараметрыКонвертации.ПараметрыОстатков);
	КонецЕсли;
	ПараметрыКонвертации.Вставить("ПараметрыОстатков", Параметры);
	
	//{КД2 
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ПартииТоваровПереданныеОстатки.ДокументПередачи.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
		|	ЕСТЬNULL(ПартииТоваровПереданныеОстатки.ДоговорКонтрагента.Владелец, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
		|	ЕСТЬNULL(ПартииТоваровПереданныеОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаВзаиморасчетов,
		|	ПартииТоваровПереданныеОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ПартииТоваровПереданныеОстатки.Номенклатура КАК Номенклатура,
		|	ПартииТоваровПереданныеОстатки.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	ПартииТоваровПереданныеОстатки.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ЕСТЬNULL(ТоварыПереданныеОстатки.КоличествоОстаток, 0) * ЕСТЬNULL(ПартииТоваровПереданныеОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент, 1) КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПартииТоваровПереданныеОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ПартииТоваровПереданныеОстатки.СтоимостьОстаток, 0)
		|			* ЕСТЬNULL(ТоварыПереданныеОстатки.КоличествоОстаток, 0)
		|			/ ПартииТоваровПереданныеОстатки.КоличествоОстаток
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПартииТоваровПереданныеОстатки.КоличествоОстаток, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ПартииТоваровПереданныеОстатки.СтоимостьОстаток, 0)
		|			* ЕСТЬNULL(ТоварыПереданныеОстатки.КоличествоОстаток, 0)
		|			/ ПартииТоваровПереданныеОстатки.КоличествоОстаток
		|	КОНЕЦ * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) > 0
		|			И ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) > 0
		|			ТОГДА КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаСНДСРегл,
		|	ЕСТЬNULL(ТоварыПереданныеОстатки.СерияНоменклатуры.НомерГТД, ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)) КАК НомерГТД,
		|	ЕСТЬNULL(ТоварыПереданныеОстатки.СерияНоменклатуры.СтранаПроисхождения, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) КАК СтранаПроисхождения,
		|	ЕСТЬNULL(ТоварыПереданныеОстатки.СерияНоменклатуры.ПометкаУдаления, ЛОЖЬ) КАК ПометкаУдаления
		|ИЗ
		|	РегистрНакопления.ПартииТоваровПереданные.Остатки(&ДатаОстатков, СтатусПередачи = ЗНАЧЕНИЕ(Перечисление.СтатусыПолученияПередачиТоваров.НаКомиссию)) КАК ПартииТоваровПереданныеОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданные.Остатки КАК ТоварыПереданныеОстатки
		|		ПО ПартииТоваровПереданныеОстатки.Номенклатура = ТоварыПереданныеОстатки.Номенклатура
		|			И ПартииТоваровПереданныеОстатки.ХарактеристикаНоменклатуры = ТоварыПереданныеОстатки.ХарактеристикаНоменклатуры
		|			И ПартииТоваровПереданныеОстатки.ДоговорКонтрагента = ТоварыПереданныеОстатки.ДоговорКонтрагента
		|			И ПартииТоваровПереданныеОстатки.ДокументПередачи.Организация = ТоварыПереданныеОстатки.Организация
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков, Валюта = &ВалютаУпрУчета) КАК КурсыВалютСрезПоследних
		|	ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартииТоваровПереданныеОстатки.Номенклатура.Наименование,
		|	ПартииТоваровПереданныеОстатки.ХарактеристикаНоменклатуры.Наименование
		|ИТОГИ ПО
		|	Организация,
		|	Контрагент,
		|	ДоговорКонтрагента");
		
	Если Параметры.Организации.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО (ИСТИНА)",
			"ПО (ИСТИНА)
			| ГДЕ
			|	ЕСТЬNULL(ПартииТоваровПереданныеОстатки.ДокументПередачи.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) В (&МассивОрганизаций) ");
		Запрос.УстановитьПараметр("МассивОрганизаций", Параметры.Организации);	
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("Партнер");
	ВыборкаДанных.Колонки.Добавить("СоглашениеСКомиссионером");
	ВыборкаДанных.Колонки.Добавить("Валюта");
	ВыборкаДанных.Колонки.Добавить("Товары");
	ВыборкаДанных.Колонки.Добавить("Комментарий");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		ВыборкаПоКонтрагентам = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКонтрагентам.Следующий() Цикл
			
			ВыборкаПоДоговорамКонтрагента = ВыборкаПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоДоговорамКонтрагента.Следующий() Цикл
				
				НоваяСтрока = ВыборкаДанных.Добавить();
				НоваяСтрока.Дата                     = КонецДня(Параметры.ДатаОстатков); 
				НоваяСтрока.Организация              = ВыборкаПоОрганизациям.Организация; 
				НоваяСтрока.Партнер                  = ВыборкаПоКонтрагентам.Контрагент; 
				НоваяСтрока.СоглашениеСКомиссионером = ВыборкаПоДоговорамКонтрагента.ДоговорКонтрагента; 
				НоваяСтрока.Валюта                   = ВыборкаПоДоговорамКонтрагента.ВалютаВзаиморасчетов; 
				
				НоваяСтрока.Товары = Новый ТаблицаЗначений;
				НоваяСтрока.Товары.Колонки.Добавить("Номенклатура");
				НоваяСтрока.Товары.Колонки.Добавить("Характеристика");
				НоваяСтрока.Товары.Колонки.Добавить("Количество");
				НоваяСтрока.Товары.Колонки.Добавить("КоличествоУпаковок");
				НоваяСтрока.Товары.Колонки.Добавить("СтавкаНДС");
				НоваяСтрока.Товары.Колонки.Добавить("Сумма");
				НоваяСтрока.Товары.Колонки.Добавить("СуммаБезНДС");
				НоваяСтрока.Товары.Колонки.Добавить("СуммаНДС");
				НоваяСтрока.Товары.Колонки.Добавить("СуммаРегл");
				НоваяСтрока.Товары.Колонки.Добавить("НДСРегл");
				НоваяСтрока.Товары.Колонки.Добавить("Цена");
				НоваяСтрока.Товары.Колонки.Добавить("НомерГТД");
				НоваяСтрока.Товары.Колонки.Добавить("ДокументОприходования"); //ED
				
				ВыборкаДетальныеЗаписи = ВыборкаПоДоговорамКонтрагента.Выбрать(); 
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					СтрокаСообщения = "";
					Если ВыборкаДетальныеЗаписи.Количество < 0 Тогда
						СтрокаСообщения = НСтр("ru = 'Обнаружен отрицательный остаток по товару ""%2"" при выгрузке по правилу: ""%3""'");
					ИначеЕсли ВыборкаДетальныеЗаписи.Сумма <= 0 ИЛИ ВыборкаДетальныеЗаписи.Количество = 0 Тогда
						СтрокаСообщения = НСтр("ru = 'Обнаружен некорректный суммовой остаток по товару ""%2"" при выгрузке по правилу: ""%3""'");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаСообщения) Тогда
						СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2", ВыборкаДетальныеЗаписи.Номенклатура);
						СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3", НСтр("ru = 'Товары, переданные на комиссию'"));
						
						ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщения,,Ложь);
						Продолжить;
					КонецЕсли;
					
					НоваяСтрокаТовары = НоваяСтрока.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, ВыборкаДетальныеЗаписи);
					НоваяСтрокаТовары.Цена = ВыборкаДетальныеЗаписи.Сумма / ВыборкаДетальныеЗаписи.Количество;
					НоваяСтрокаТовары.КоличествоУпаковок = ВыборкаДетальныеЗаписи.Количество;
					
					СтавкаНДСЧислом = УчетНДС.ПолучитьСтавкуНДС(ВыборкаДетальныеЗаписи.СтавкаНДС) / 100;
					
					НоваяСтрокаТовары.СуммаНДС    = НоваяСтрокаТовары.Сумма / (СтавкаНДСЧислом + 1) * СтавкаНДСЧислом;
					НоваяСтрокаТовары.НДСРегл     = ВыборкаДетальныеЗаписи.СуммаСНДСРегл / (СтавкаНДСЧислом + 1) * СтавкаНДСЧислом;
					НоваяСтрокаТовары.СуммаБезНДС = НоваяСтрокаТовары.Сумма - НоваяСтрокаТовары.СуммаНДС;
					НоваяСтрокаТовары.СуммаРегл   = ВыборкаДетальныеЗаписи.СуммаСНДСРегл - НоваяСтрокаТовары.НДСРегл;
					
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерГТД) Тогда
						НоваяСтрокаТовары.НомерГТД = Новый Структура;
						НоваяСтрокаТовары.НомерГТД.Вставить("Владелец", ВыборкаДетальныеЗаписи.Номенклатура);
						НоваяСтрокаТовары.НомерГТД.Вставить("СтранаПроисхождения", ВыборкаДетальныеЗаписи.СтранаПроисхождения);
						НоваяСтрокаТовары.НомерГТД.Вставить("ПометкаУдаления", ВыборкаДетальныеЗаписи.ПометкаУдаления);
						НоваяСтрокаТовары.НомерГТД.Вставить("Код", ВыборкаДетальныеЗаписи.НомерГТД);
					КонецЕсли;
					
				КонецЦикла;
				
				Если НоваяСтрока.Товары.Количество() = 0 Тогда
					ВыборкаДанных.Удалить(НоваяСтрока);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	//}
	
	Возврат ВыборкаДанных;
КонецФункции
Процедура ВводОстатковСобственныеТоварыНаСкладах(КомпонентыОбмена, Комментарий="")
	ВыборкаДанных = ВыборкаОстатков_СобственныеТовары(КомпонентыОбмена);
	
	Если НЕ ЗначениеЗаполнено(ВыборкаДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ПОДдокумента = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ОстаткиСобственныхТМЦ_Стр_Отправка", "Имя");
	
	ТМЦш = ПолучитьТаблицуОстатковТМЦшаблон();
	
	Для Каждого СтрокаВыборки Из ВыборкаДанных Цикл
		
		ДанныеИБСтруктура = Новый Структура;
		ДанныеИБСтруктура.Вставить("Дата", ПараметрыКонвертации.ДатаОстатков);
		ДанныеИБСтруктура.Вставить("Организация", СтрокаВыборки.Организация);
		ДанныеИБСтруктура.Вставить("Склад", СтрокаВыборки.Склад);
		
		Если НЕ ЗначениеЗаполнено(ДанныеИБСтруктура.Организация) ИЛИ НЕ ЗначениеЗаполнено(ДанныеИБСтруктура.Склад) Тогда
			Продолжить;
		КонецЕсли;
		
		//{ ТаблицаДанныхПоНоменклатуре
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.ЕдиницаХраненияОстатков КАК Упаковка,
		|	Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору КАК ЕдиницаИзмерения,
		|	&ВидЗапасов КАК ВидЗапасов
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)";
		
		МассивНоменклатуры = СтрокаВыборки.Товары.ВыгрузитьКолонку("Номенклатура");
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
		
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.УстановитьПараметр("ВидЗапасов", "СобственныеТовары");
		
		ТаблицаДанныхПоНоменклатуре = Запрос.Выполнить().Выгрузить();
		ТаблицаДанныхПоНоменклатуре.Индексы.Добавить("Номенклатура");
		//}		
		
		ТМЦ = ТМЦш.Скопировать();	
		Для Каждого СтрокаТ Из СтрокаВыборки.Товары Цикл
			
			НоваяСтрокаТовары = ТМЦ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТ);
			СтрокаН = ТаблицаДанныхПоНоменклатуре.Найти(НоваяСтрокаТовары.Номенклатура, "Номенклатура");
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаН);
			Если НЕ ЗначениеЗаполнено(НоваяСтрокаТовары.СуммаБезНДС) Тогда
				НоваяСтрокаТовары.СуммаБезНДС = СтрокаТ.СуммаРегл;
			КонецЕсли;
			//НоваяСтрокаТовары.ДокументПоступления = СтрокаТ.ДокументОприходования;
			Если ЗначениеЗаполнено(СтрокаТ.НомерГТД) Тогда
				НоваяСтрокаТовары.НомерГТД = СокрЛП(СтрокаТ.НомерГТД.Код);
				НоваяСтрокаТовары.СтранаПроисхождения = СтрокаТ.НомерГТД.СтранаПроисхождения;
			КонецЕсли;
		КонецЦикла;
		
		Если ТМЦ.Количество()>0 Тогда
			ДанныеИБСтруктура.Вставить("ТМЦ", ТМЦ);
			ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПОДдокумента);
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры
//} КонецОбласти
//{ Область ДенежныеСредства
Функция ВыборкаОстатков_ДенежныеСредстваНаБанковскихСчетах(КомпонентыОбмена)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	Параметры = Новый Структура;
	Параметры.Вставить("Организации", ?(ПараметрыКонвертации.Свойство("ИспользоватьОтборПоОрганизациям") И ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям, КомпонентыОбмена.ПараметрыКонвертации.Организации.ВыгрузитьЗначения(), Новый Массив ));
	Параметры.Вставить("ДатаОстатков", ПараметрыКонвертации.ДатаОстатков);
	
	//{КД2
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ОстаткиВКассах.Организация                                                         КАК Организация,
	|	ОстаткиВКассах.БанковскийСчетКасса                                                 КАК БанковскийСчет,
	|	ОстаткиВКассах.СуммаОстаток                                                        КАК Сумма,
	|	ОстаткиВКассах.СуммаОстаток * ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
	|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
	|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                                              КАК СуммаРегл
	|	
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(
	|		&ДатаОстатков,
	|		ВидДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Безналичные)) КАК ОстаткиВКассах
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
	|		ПО ОстаткиВКассах.БанковскийСчетКасса.ВалютаДенежныхСредств = КурсыВалют.Валюта
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиВКассах.БанковскийСчетКасса
	|ИТОГИ ПО
	|	Организация
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	Если Параметры.Организации.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВидДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Безналичные)", 
		"ВидДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Безналичные) И Организация В (&МассивОрганизаций)");
		Запрос.УстановитьПараметр("МассивОрганизаций", Параметры.Организации);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("БанковскиеСчета");
	ВыборкаДанных.Колонки.Добавить("Комментарий");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.БанковскиеСчета = Новый ТаблицаЗначений;
		НоваяСтрока.БанковскиеСчета.Колонки.Добавить("БанковскийСчет");
		НоваяСтрока.БанковскиеСчета.Колонки.Добавить("Сумма");
		НоваяСтрока.БанковскиеСчета.Колонки.Добавить("СуммаРегл");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ВыборкаДетальныеЗаписи.Сумма < 0 Тогда
				СтрокаСообщения = НСтр("ru = 'Обнаружены отрицательные остатки на банковском счете ""%1"" при выгрузке по правилу: ""%2""'");
				СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1", ВыборкаДетальныеЗаписи.БанковскийСчет);
				СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2", НСтр("ru = 'Денежные cредства на банковских счетах'"));
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщения,,Ложь);
				Продолжить;
			КонецЕсли;
			
			ВалютаДенежныхСредств = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыборкаДетальныеЗаписи.БанковскийСчет, "ВалютаДенежныхСредств");
			
			НоваяСтрокаБанковскиеСчета = НоваяСтрока.БанковскиеСчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаБанковскиеСчета, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
		Если НоваяСтрока.БанковскиеСчета.Количество() = 0 Тогда
			ВыборкаДанных.Удалить(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	//}
	Возврат ВыборкаДанных;
КонецФункции
Функция ВыборкаОстатков_ДенежныеСредстваВКассах(КомпонентыОбмена)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	Параметры = Новый Структура;
	Параметры.Вставить("Организации", ?(ПараметрыКонвертации.Свойство("ИспользоватьОтборПоОрганизациям") И ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям, КомпонентыОбмена.ПараметрыКонвертации.Организации.ВыгрузитьЗначения(), Новый Массив ));
	Параметры.Вставить("ДатаОстатков", ПараметрыКонвертации.ДатаОстатков);
	
	//{КД2
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ОстаткиВКассах.Организация                                                         КАК Организация,
	|	ОстаткиВКассах.БанковскийСчетКасса                                                 КАК Касса,
	|	ОстаткиВКассах.СуммаОстаток                                                        КАК Сумма,
	|	ОстаткиВКассах.СуммаОстаток * ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
	|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
	|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                                              КАК СуммаРегл
	|	
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(
	|		&ДатаОстатков,
	|		ВидДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Наличные)) КАК ОстаткиВКассах
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
	|		ПО ОстаткиВКассах.БанковскийСчетКасса.ВалютаДенежныхСредств = КурсыВалют.Валюта
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиВКассах.БанковскийСчетКасса
	|ИТОГИ ПО
	|	Организация
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	Если Параметры.Организации.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВидДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Наличные)", 
		"ВидДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ВидыДенежныхСредств.Наличные) И Организация В (&МассивОрганизаций)");
		Запрос.УстановитьПараметр("МассивОрганизаций", Параметры.Организации);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("Кассы");
	ВыборкаДанных.Колонки.Добавить("Комментарий");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.Кассы = Новый ТаблицаЗначений;
		НоваяСтрока.Кассы.Колонки.Добавить("Касса");
		НоваяСтрока.Кассы.Колонки.Добавить("Сумма");
		НоваяСтрока.Кассы.Колонки.Добавить("СуммаРегл");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ВыборкаДетальныеЗаписи.Сумма < 0 Тогда
				СтрокаСообщения = НСтр("ru = 'Обнаружены отрицательные остатки по кассе ""%1"" при выгрузке по правилу: ""%2""'");
				СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1", ВыборкаДетальныеЗаписи.Касса);
				СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2", НСтр("ru = 'Денежные средства в кассах'"));
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщения,,Ложь);
				Продолжить;
			КонецЕсли;
			
			ВалютаДенежныхСредств = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыборкаДетальныеЗаписи.Касса, "ВалютаДенежныхСредств");		
			
			НоваяСтрокаКассы = НоваяСтрока.Кассы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКассы, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
		Если НоваяСтрока.Кассы.Количество() = 0 Тогда
			ВыборкаДанных.Удалить(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	//}
	
	Возврат ВыборкаДанных;
КонецФункции
Процедура ВводОстатковДенежныеСредстваВКассах(КомпонентыОбмена, Комментарий="")
	ВыборкаДанных = ВыборкаОстатков_ДенежныеСредстваВКассах(КомпонентыОбмена);
	
	ПОДдокумента = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ОстаткиНаличныхДенежныхСредств_Отправка", "Имя");
	
	ТаблДСш = Новый ТаблицаЗначений;
	ТаблДСш.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблДСш.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблДСш.Колонки.Добавить("Валюта");
	ТаблДСш.Колонки.Добавить("Касса");
	
	Для Каждого СтрокаВыборки Из ВыборкаДанных Цикл
		
		ДанныеИБСтруктура = Новый Структура;
		ДанныеИБСтруктура.Вставить("Дата", СтрокаВыборки.Дата);
		ДанныеИБСтруктура.Вставить("Организация", СтрокаВыборки.Организация);
		ДанныеИБСтруктура.Вставить("Комментарий", "");
		
		Если НЕ ЗначениеЗаполнено(ДанныеИБСтруктура.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблДС = ТаблДСш.Скопировать();	
		Для Каждого СтрокаДС Из СтрокаВыборки.Кассы Цикл
			
			НоваяСтрока = ТаблДС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДС);
			
			НоваяСтрока.Валюта = СтрокаДС.Касса.ВалютаДенежныхСредств;
			
		КонецЦикла;
		
		Если ТаблДС.Количество()>0 Тогда
			ДанныеИБСтруктура.Вставить("ДенежныеСредства", ТаблДС);
			ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПОДдокумента);
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры
Процедура ВводОстатковДенежныеСредстваНаБанковскихСчетах(КомпонентыОбмена, Комментарий="")
	ВыборкаДанных = ВыборкаОстатков_ДенежныеСредстваНаБанковскихСчетах(КомпонентыОбмена);
	
	ПОДдокумента = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ОстаткиБезналичныхДенежныхСредств_Отправ", "Имя");
	
	ТаблДСш = Новый ТаблицаЗначений;
	ТаблДСш.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблДСш.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблДСш.Колонки.Добавить("Валюта");
	ТаблДСш.Колонки.Добавить("БанковскийСчет");
	ТаблДСш.Колонки.Добавить("ВидБанковскогоСчета");
	
	Для Каждого СтрокаВыборки Из ВыборкаДанных Цикл
		
		ДанныеИБСтруктура = Новый Структура;
		ДанныеИБСтруктура.Вставить("Дата", СтрокаВыборки.Дата);
		ДанныеИБСтруктура.Вставить("Организация", СтрокаВыборки.Организация);
		ДанныеИБСтруктура.Вставить("Комментарий", "");
		
		Если НЕ ЗначениеЗаполнено(ДанныеИБСтруктура.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблДС = ТаблДСш.Скопировать();	
		Для Каждого СтрокаДС Из СтрокаВыборки.БанковскиеСчета Цикл
			
			НоваяСтрока = ТаблДС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДС);
			
			НоваяСтрока.Валюта = НоваяСтрока.БанковскийСчет.ВалютаДенежныхСредств;
			
			ТекВидСчета = НРег(СтрокаДС.БанковскийСчет.ВидСчета);
			ВидБС = Неопределено;
			Если Найти(ТекВидСчета,"расчетный")>0 Тогда
				ВидБС = "Расчетный";
				
			ИначеЕсли Найти(ТекВидСчета,"аккредитив")>0 Тогда
				ВидБС = "Аккредитивы";
				
			ИначеЕсли Найти(ТекВидСчета,"депозитный")>0 Тогда
				ВидБС = "Депозитный";
				
			ИначеЕсли Найти(ТекВидСчета,"иной")>0 Тогда
				ВидБС = "Иной";
				
			ИначеЕсли Найти(ТекВидСчета,"чековыекнижки")>0 Тогда
				ВидБС = "ЧековыеКнижки";
				
			ИначеЕсли Найти(ТекВидСчета,"ссудный")>0 Тогда
				ВидБС = "Ссудный";
				
			Иначе
				ВидБС = "Расчетный";
				
			КонецЕсли;
			НоваяСтрока.ВидБанковскогоСчета = ВидБС;
			
		КонецЦикла;
		
		Если ТаблДС.Количество()>0 Тогда
			ДанныеИБСтруктура.Вставить("ДенежныеСредства", ТаблДС);
			ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПОДдокумента);
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры
//} КонецОбласти
//{ Область РасчетыСКонтрагентами
//{ Область РасчетыСКонтрагентами
Функция ПолучитьТаблицуОстатковРасчетыШаблон()
	ТаблРасчетыШ = Новый ТаблицаЗначений;
	ТаблРасчетыШ.Колонки.Добавить("Контрагент");
	ТаблРасчетыШ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблРасчетыШ.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблРасчетыШ.Колонки.Добавить("Договор");
	ТаблРасчетыШ.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТаблРасчетыШ.Колонки.Добавить("КурсВзаиморасчетов");
	ТаблРасчетыШ.Колонки.Добавить("КратностьВзаиморасчетов");
	ТаблРасчетыШ.Колонки.Добавить("РасчетыВУсловныхЕдиницах");
	ТаблРасчетыШ.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ТаблРасчетыШ.Колонки.Добавить("СчетУчетаРасчетовПоАвансам");
	ТаблРасчетыШ.Колонки.Добавить("ДокументРасчетов");
	ТаблРасчетыШ.Колонки.Добавить("Комментарий");
	
	Возврат ТаблРасчетыШ;
КонецФункции
Функция ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	Параметры = Новый Структура;
	Параметры.Вставить("Организации", ?(ПараметрыКонвертации.Свойство("ИспользоватьОтборПоОрганизациям") И ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям, КомпонентыОбмена.ПараметрыКонвертации.Организации.ВыгрузитьЗначения(), Новый Массив ));
	Параметры.Вставить("ДатаОстатков", ПараметрыКонвертации.ДатаОстатков);
	Параметры.Вставить("РежимВыгрузкиСерий", 1); // 0 Не переносить информацию о сериях, 1 Переносить информацию об остатках серий, 2 Детализировать себестоимость по сериям
	
	
	Если ПараметрыКонвертации.Свойство("ПараметрыОстатков") Тогда
		ЗаполнитьЗначенияСвойств(Параметры,ПараметрыКонвертации.ПараметрыОстатков);
	КонецЕсли;
	ПараметрыКонвертации.Вставить("ПараметрыОстатков", Параметры);
	
	Возврат Параметры;
КонецФункции
Процедура ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, Вид, Комментарий="")
	Если НЕ ЗначениеЗаполнено(ВыборкаДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	ПОДдокумента = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_ОстаткиРасчетовС"+Вид+"_Отправ", "Имя");
	
	ТаблРасчетыШ = ПолучитьТаблицуОстатковРасчетыШаблон();
	КурсыВалют = ПолучитьКурсыВалютНаДату(ПараметрыКонвертации.ДатаОстатков);
	
	Для Каждого СтрокаВыборки Из ВыборкаДанных Цикл
		
		ДанныеИБСтруктура = Новый Структура;
		ДанныеИБСтруктура.Вставить("Дата", ПараметрыКонвертации.ДатаОстатков);
		ДанныеИБСтруктура.Вставить("Организация", СтрокаВыборки.Организация);
		ДанныеИБСтруктура.Вставить("Комментарий", Комментарий);
		AdditionalInfoВставить(ДанныеИБСтруктура,"Комментарий", Комментарий);
		
		Если НЕ КлючевыеПоляДокументаВводаОстатковЗаполнены(КомпонентыОбмена, ДанныеИБСтруктура) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблРасчеты = ТаблРасчетыШ.Скопировать();
		ЕстьКолонкаРасчетныйДокумент = НЕ СтрокаВыборки.РасчетыСПартнерами.Колонки.Найти("РасчетныйДокумент")=Неопределено;
		Для Каждого СтрокаТ Из СтрокаВыборки.РасчетыСПартнерами Цикл			
			
			НоваяСтрока = ТаблРасчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТ);
			
			Если ЕстьКолонкаРасчетныйДокумент И НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) И ТипЗнч(СтрокаТ.РасчетныйДокумент)=Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				НоваяСтрока.Договор = СтрокаТ.РасчетныйДокумент;
			КонецЕсли;
			КурсВалюты = КурсыВалют.Найти(СтрокаТ.ВалютаВзаиморасчетов,"ВалютаВзаиморасчетов");
			Если НЕ КурсВалюты=Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, КурсВалюты,,"ВалютаВзаиморасчетов");
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблРасчеты.Количество()>0 Тогда
			ДанныеИБСтруктура.Вставить("Расчеты", ТаблРасчеты);
			ВыгрузкаОбъектаВыборки(КомпонентыОбмена, ДанныеИБСтруктура, ПОДдокумента);
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры
//} КонецОбласти
//{ Область РасчетыСКлиентами
Процедура ВводОстатковДолгиКлиентовПоДоговорам(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	&ДатаОстатков КАК ДатаПлатежа,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Организация КАК Организация,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент КАК Партнер,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК РасчетныйДокумент,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер = """"
		|			ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Код
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер
		|	КОНЕЦ КАК НомерРасчетногоДокумента,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаОстатков
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата
		|	КОНЕЦ КАК ДатаРасчетногоДокумента,
		|	NULL КАК ДокументРасчетовСКонтрагентом
		|ПОМЕСТИТЬ ОстаткиВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|				И (ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВцелом)
		|					ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
		|						И (НЕ ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом)
		|					ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
		|						И (НЕ Сделка ССЫЛКА Документ.ЗаказПокупателя))) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	&ДатаОстатков,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Организация,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Сделка,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Номер = """"
		|			ТОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Код
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Номер
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Дата = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаОстатков
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Дата
		|	КОНЕЦ,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|				И УпрУчет
		|				И ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
		|				И (НЕ ДокументРасчетовСКонтрагентом ССЫЛКА Документ.РеализацияТоваровУслуг)) КАК ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиВзаиморасчетов.ДатаПлатежа,
		|	ОстаткиВзаиморасчетов.Организация                    КАК Организация,
		|	ОстаткиВзаиморасчетов.Контрагент                     КАК Контрагент,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	СУММА(ОстаткиВзаиморасчетов.Сумма)                   КАК Сумма,
		|	
		|	СУММА(ОстаткиВзаиморасчетов.Сумма * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ)                                               КАК СуммаРегл,
		|	
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов,
		|	ОстаткиВзаиморасчетов.РасчетныйДокумент,
		|	ОстаткиВзаиморасчетов.НомерРасчетногоДокумента,
		|	ОстаткиВзаиморасчетов.ДатаРасчетногоДокумента
		|ИЗ
		|	ОстаткиВзаиморасчетов КАК ОстаткиВзаиморасчетов
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
		|		ПО ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|	
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиВзаиморасчетов.ДатаПлатежа,
		|	ОстаткиВзаиморасчетов.Организация,
		|	ОстаткиВзаиморасчетов.Контрагент,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов,
		|	ОстаткиВзаиморасчетов.РасчетныйДокумент,
		|	ОстаткиВзаиморасчетов.НомерРасчетногоДокумента,
		|	ОстаткиВзаиморасчетов.ДатаРасчетногоДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("НомерРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("РасчетныйДокумент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаПлатежа");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПокупателямиДолги", Комментарий);
КонецПроцедуры
Процедура ВводОстатковДолгиКлиентовПоЗаказам(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.Организация                                              КАК Организация,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя)            КАК Сделка,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).ДатаОплаты КАК ДатаПлатежа,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).Дата       КАК ДатаРасчетногоДокумента,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).Номер      КАК НомерРасчетногоДокумента,
		|	
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                              КАК Партнер,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                              КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток              КАК Сумма,
		|	
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                                      КАК СуммаРегл,
		|	
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|				И ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
		|				И Сделка ССЫЛКА Документ.ЗаказПокупателя) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
		|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|	
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("НомерРасчетногоДокумента");
	
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаПлатежа");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПокупателямиДолги", Комментарий);
КонецПроцедуры
Процедура ВводОстатковДолгиКлиентовПоРеализациям(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	&ДатаОстатков КАК ДатаПлатежа,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Организация КАК Организация,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК Документ.РеализацияТоваровУслуг).Дата КАК ДатаРасчетногоДокумента,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК Документ.РеализацияТоваровУслуг).Номер КАК НомерРасчетногоДокумента,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент                              КАК Партнер,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент                              КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток              КАК Сумма,
		|	
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                                                          КАК СуммаРегл,
		|	
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|				И УпрУчет
		|				И ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
		|				И ДокументРасчетовСКонтрагентом ССЫЛКА Документ.РеализацияТоваровУслуг) КАК ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
		|		ПО ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|	
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("НомерРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаПлатежа");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПокупателямиДолги", Комментарий);
КонецПроцедуры
Процедура ВводОстатковДолгиКомиссионеровПоДоговорам(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	&ДатаОстатков КАК ДатаПлатежа,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Организация КАК Организация,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент КАК Партнер,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК РасчетныйДокумент,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер = """"
		|			ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Код
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер
		|	КОНЕЦ КАК НомерРасчетногоДокумента,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаОстатков
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата
		|	КОНЕЦ КАК ДатаРасчетногоДокумента,
		|	NULL КАК ДокументРасчетовСКонтрагентом
		|ПОМЕСТИТЬ ОстаткиВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
		|				И (НЕ ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом)) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	&ДатаОстатков,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Организация,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Сделка,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Номер = """"
		|			ТОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Код
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Номер
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Дата = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаОстатков
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Дата
		|	КОНЕЦ,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
		|				И УпрУчет
		|				И ((НЕ ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ОтчетКомиссионераОПродажах)
		|					ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом))) КАК ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиВзаиморасчетов.ДатаПлатежа,
		|	ОстаткиВзаиморасчетов.Организация                    КАК Организация,
		|	ОстаткиВзаиморасчетов.Контрагент                     КАК Контрагент,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	СУММА(ОстаткиВзаиморасчетов.Сумма)                   КАК Сумма,
		|	
		|	СУММА(ОстаткиВзаиморасчетов.Сумма * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ)                                               КАК СуммаРегл,
		|	
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов,
		|	ОстаткиВзаиморасчетов.РасчетныйДокумент,
		|	ОстаткиВзаиморасчетов.НомерРасчетногоДокумента,
		|	ОстаткиВзаиморасчетов.ДатаРасчетногоДокумента
		|ИЗ
		|	ОстаткиВзаиморасчетов КАК ОстаткиВзаиморасчетов
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
		|		ПО ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|	
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиВзаиморасчетов.ДатаПлатежа,
		|	ОстаткиВзаиморасчетов.Организация,
		|	ОстаткиВзаиморасчетов.Контрагент,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов,
		|	ОстаткиВзаиморасчетов.РасчетныйДокумент,
		|	ОстаткиВзаиморасчетов.НомерРасчетногоДокумента,
		|	ОстаткиВзаиморасчетов.ДатаРасчетногоДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("НомерРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("РасчетныйДокумент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаПлатежа");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
		НоваяСтрока.РасчетыСПартнерами.Свернуть("
			|Партнер,
			|Контрагент,
			|ДатаРасчетногоДокумента,
			|НомерРасчетногоДокумента,
			|РасчетныйДокумент,
			|ВалютаВзаиморасчетов,
			|ДатаПлатежа", "Сумма,СуммаРегл");
		
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПокупателямиДолги", Комментарий);
КонецПроцедуры
Процедура ВводОстатковДолгиКомиссионеровЗаПроданныеТовары(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	&ДатаОстатков КАК ДатаПлатежа,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Организация КАК Организация,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК Документ.ОтчетКомиссионераОПродажах).Дата КАК ДатаРасчетногоДокумента,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК Документ.ОтчетКомиссионераОПродажах).Номер КАК НомерРасчетногоДокумента,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент                              КАК Партнер,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент                              КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток              КАК Сумма,
		|	
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                                                          КАК СуммаРегл,
		|	
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
		|				И УпрУчет
		|				И ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ОтчетКомиссионераОПродажах
		|				И ДоговорКонтрагента.ВедениеВзаиморасчетов <> ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом)) КАК ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
		|		ПО ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|	
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("НомерРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаПлатежа");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПокупателямиДолги", Комментарий);
КонецПроцедуры
Процедура ВводОстатковАвансыПоДоговорамПолученныеОтКлиентов(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка                              КАК Сделка,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Организация                         КАК Организация,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                          КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                          КАК Партнер,
		|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток         КАК Сумма,
		|	
		|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                                  КАК СуммаРегл,
		|	
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК РасчетныйДокумент,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер = """"
		|			ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Код
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер
		|	КОНЕЦ КАК НомерРасчетногоДокумента,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаОстатков
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата
		|	КОНЕЦ КАК ДатаРасчетногоДокумента
		|	
		|ПОМЕСТИТЬ ОстаткиВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|				И (ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом)
		|					ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
		|					ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
		|						И (НЕ Сделка ССЫЛКА Документ.ЗаказПокупателя))) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков, ) КАК КурсыВалют
		|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|	
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиВзаиморасчетов.Организация КАК Организация,
		|	ОстаткиВзаиморасчетов.Контрагент КАК Контрагент,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	СУММА(ОстаткиВзаиморасчетов.Сумма) КАК Сумма,
		|	СУММА(ОстаткиВзаиморасчетов.СуммаРегл) КАК СуммаРегл,
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов,
		|	ОстаткиВзаиморасчетов.РасчетныйДокумент,
		|	ОстаткиВзаиморасчетов.НомерРасчетногоДокумента,
		|	ОстаткиВзаиморасчетов.ДатаРасчетногоДокумента
		|ИЗ
		|	ОстаткиВзаиморасчетов КАК ОстаткиВзаиморасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиВзаиморасчетов.Организация,
		|	ОстаткиВзаиморасчетов.Контрагент,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов,
		|	ОстаткиВзаиморасчетов.РасчетныйДокумент,
		|	ОстаткиВзаиморасчетов.НомерРасчетногоДокумента,
		|	ОстаткиВзаиморасчетов.ДатаРасчетногоДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("НомерРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("РасчетныйДокумент");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПокупателямиАвансы", Комментарий);
КонецПроцедуры
Процедура ВводОстатковАвансыПоЗаказамПолученныеОтКлиентов(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.Организация КАК Организация,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя) КАК РасчетныйДокумент,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).Дата КАК ДатаРасчетногоДокумента,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПокупателя).Номер КАК НомерРасчетногоДокумента,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                              КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                              КАК Партнер,
		|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток             КАК Сумма,
		|	
		|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                                      КАК СуммаРегл,
		|	
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|	
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
		|				И ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
		|				И Сделка ССЫЛКА Документ.ЗаказПокупателя) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
		|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|	
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("НомерРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("РасчетныйДокумент");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПокупателямиАвансы", Комментарий);
КонецПроцедуры
Процедура ВводОстатковПрочиеАвансыПолученныеОтКлиентов(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	&ДатаОстатков КАК ДатаПлатежа,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Организация                            КАК Организация,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка                                 КАК Сделка,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                             КАК Партнер,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                             КАК Контрагент,
		|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток            КАК Сумма,
		|	
		|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                                      КАК СуммаРегл,
		|	
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|	
		|ПОМЕСТИТЬ ОстаткиВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаОстатков, ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
		|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|	
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиВзаиморасчетов.ДатаПлатежа,
		|	ОстаткиВзаиморасчетов.Организация КАК Организация,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	ОстаткиВзаиморасчетов.Контрагент КАК Контрагент,
		|	СУММА(ОстаткиВзаиморасчетов.Сумма) КАК Сумма,
		|	СУММА(ОстаткиВзаиморасчетов.СуммаРегл) КАК СуммаРегл,
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов
		|ИЗ
		|	ОстаткиВзаиморасчетов КАК ОстаткиВзаиморасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиВзаиморасчетов.ДатаПлатежа,
		|	ОстаткиВзаиморасчетов.Организация,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	ОстаткиВзаиморасчетов.Контрагент,
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПокупателямиАвансы", Комментарий);
КонецПроцедуры
Процедура ВводОстатковПрочаяДебиторскаяЗадолженность(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&ДатаОстатков КАК ДатаПлатежа,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Организация КАК Организация,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма,
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
	|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
	|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК Договор,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка
	|ПОМЕСТИТЬ ОстаткиВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаОстатков, ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков, ) КАК КурсыВалют
	|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиВзаиморасчетов.ДатаПлатежа,
	|	ОстаткиВзаиморасчетов.Организация КАК Организация,
	|	ОстаткиВзаиморасчетов.Контрагент КАК Контрагент,
	|	СУММА(ОстаткиВзаиморасчетов.Сумма) КАК Сумма,
	|	СУММА(ОстаткиВзаиморасчетов.СуммаРегл) КАК СуммаРегл,
	|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов,
	|	ОстаткиВзаиморасчетов.Договор
	|ИЗ
	|	ОстаткиВзаиморасчетов КАК ОстаткиВзаиморасчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиВзаиморасчетов.ДатаПлатежа,
	|	ОстаткиВзаиморасчетов.Организация,
	|	ОстаткиВзаиморасчетов.Контрагент,
	|	ОстаткиВзаиморасчетов.Договор,
	|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент
	|ИТОГИ ПО
	|	Организация
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Договор");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаПлатежа");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПокупателямиДолги", Комментарий);
КонецПроцедуры
//} КонецОбласти
//{ Область РасчетыСПоставщиками
Процедура ВводОстатковДолгиПоставщикамПоДоговорам(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	&ДатаОстатков КАК ДатаПлатежа,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Организация КАК Организация,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент КАК Партнер,
		|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК РасчетныйДокумент,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер = """"
		|			ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Код
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер
		|	КОНЕЦ КАК НомерРасчетногоДокумента,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаОстатков
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата
		|	КОНЕЦ КАК ДатаРасчетногоДокумента,
		|	NULL КАК ДокументРасчетовСКонтрагентом
		|ПОМЕСТИТЬ ОстаткиВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		|				И (ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВцелом)
		|					ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
		|						И (НЕ Сделка ССЫЛКА Документ.ЗаказПоставщику)
		|					ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
		|						И (НЕ ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом))) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	&ДатаОстатков,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Организация,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Сделка,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент,
		|	-ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Номер = """"
		|			ТОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Код
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Номер
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Дата = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаОстатков
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Дата
		|	КОНЕЦ,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		|				И УпрУчет
		|				И ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
		|				И (НЕ(ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|						ИЛИ ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ПоступлениеТоваровУслугВНТТ))) КАК ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиВзаиморасчетов.ДатаПлатежа,
		|	ОстаткиВзаиморасчетов.Организация                    КАК Организация,
		|	ОстаткиВзаиморасчетов.Контрагент                     КАК Контрагент,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	СУММА(ОстаткиВзаиморасчетов.Сумма)                   КАК Сумма,
		|	
		|	СУММА(ОстаткиВзаиморасчетов.Сумма * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ)                                               КАК СуммаРегл,
		|	
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов,
		|	ОстаткиВзаиморасчетов.РасчетныйДокумент,
		|	ОстаткиВзаиморасчетов.НомерРасчетногоДокумента,
		|	ОстаткиВзаиморасчетов.ДатаРасчетногоДокумента
		|ИЗ
		|	ОстаткиВзаиморасчетов КАК ОстаткиВзаиморасчетов
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
		|		ПО ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиВзаиморасчетов.ДатаПлатежа,
		|	ОстаткиВзаиморасчетов.Организация,
		|	ОстаткиВзаиморасчетов.Контрагент,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов,
		|	ОстаткиВзаиморасчетов.РасчетныйДокумент,
		|	ОстаткиВзаиморасчетов.НомерРасчетногоДокумента,
		|	ОстаткиВзаиморасчетов.ДатаРасчетногоДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("НомерРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("РасчетныйДокумент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаПлатежа");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПоставщикамиДолги", Комментарий);
КонецПроцедуры
Процедура ВводОстатковДолгиПоставщикамПоЗаказам(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.Организация КАК Организация,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПоставщику).ДатаОплаты КАК ДатаПлатежа,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПоставщику).Дата КАК ДатаРасчетногоДокумента,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПоставщику).Номер КАК НомерРасчетногоДокумента,
	
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                              КАК Партнер,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                              КАК Контрагент,
		|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток             КАК Сумма,
		|	
		|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                                      КАК СуммаРегл,
		|	
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		|				И ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
		|				И Сделка ССЫЛКА Документ.ЗаказПоставщику) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
		|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|	
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("НомерРасчетногоДокумента");
	
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаПлатежа");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПоставщикамиДолги", Комментарий);
КонецПроцедуры
Процедура ВводОстатковДолгиПоставщикамПоПоступлениям(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	&ДатаОстатков КАК ДатаПлатежа,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Организация КАК Организация,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК Документ.ПоступлениеТоваровУслуг).Дата
		|		КОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ПоступлениеТоваровУслугВНТТ
		|			ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК Документ.ПоступлениеТоваровУслугВНТТ).Дата
		|	КОНЕЦ КАК ДатаРасчетногоДокумента,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|			ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК Документ.ПоступлениеТоваровУслуг).Номер
		|		КОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ПоступлениеТоваровУслугВНТТ
		|			ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК Документ.ПоступлениеТоваровУслугВНТТ).Номер
		|	КОНЕЦ КАК НомерРасчетногоДокумента,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент                              КАК Партнер,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент                              КАК Контрагент,
		|	-ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток             КАК Сумма,
		|	
		|	-ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                                                          КАК СуммаРегл,
		|	
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		|				И УпрУчет
		|				И ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
		|				И (ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ПоступлениеТоваровУслуг
		|					ИЛИ ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ПоступлениеТоваровУслугВНТТ)) КАК ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
		|		ПО ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|	
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("НомерРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаПлатежа");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПоставщикамиДолги", Комментарий);
КонецПроцедуры
Процедура ВводОстатковДолгиКомитентамПоДоговорам(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	&ДатаОстатков КАК ДатаПлатежа,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Организация КАК Организация,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент КАК Партнер,
		|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК РасчетныйДокумент,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер = """"
		|			ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Код
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер
		|	КОНЕЦ КАК НомерРасчетногоДокумента,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаОстатков
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата
		|	КОНЕЦ КАК ДатаРасчетногоДокумента,
		|	NULL КАК ДокументРасчетовСКонтрагентом
		|ПОМЕСТИТЬ ОстаткиВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|				И (НЕ ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом)) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	&ДатаОстатков,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Организация,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Сделка,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент,
		|	-ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Номер = """"
		|			ТОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Код
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Номер
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Дата = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаОстатков
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.Дата
		|	КОНЕЦ,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|				И УпрУчет
		|				И ((НЕ ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ОтчетКомитентуОПродажах)
		|					ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом))) КАК ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиВзаиморасчетов.ДатаПлатежа,
		|	ОстаткиВзаиморасчетов.Организация                    КАК Организация,
		|	ОстаткиВзаиморасчетов.Сделка,
		|	ОстаткиВзаиморасчетов.Контрагент                     КАК Контрагент,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	СУММА(ОстаткиВзаиморасчетов.Сумма)                   КАК Сумма,
		|	
		|	СУММА(ОстаткиВзаиморасчетов.Сумма * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ)                                               КАК СуммаРегл,
		|	
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов,
		|	ОстаткиВзаиморасчетов.РасчетныйДокумент,
		|	ОстаткиВзаиморасчетов.НомерРасчетногоДокумента,
		|	ОстаткиВзаиморасчетов.ДатаРасчетногоДокумента
		|ИЗ
		|	ОстаткиВзаиморасчетов КАК ОстаткиВзаиморасчетов
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
		|		ПО ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|	
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиВзаиморасчетов.ДатаПлатежа,
		|	ОстаткиВзаиморасчетов.Организация,
		|	ОстаткиВзаиморасчетов.Сделка,
		|	ОстаткиВзаиморасчетов.Контрагент,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов,
		|	ОстаткиВзаиморасчетов.РасчетныйДокумент,
		|	ОстаткиВзаиморасчетов.НомерРасчетногоДокумента,
		|	ОстаткиВзаиморасчетов.ДатаРасчетногоДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	Сообщить(КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("НомерРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("РасчетныйДокумент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаПлатежа");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПоставщикамиДолги", Комментарий);
КонецПроцедуры
Процедура ВводОстатковДолгиКомитентамЗаПроданныеТовары(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	&ДатаОстатков КАК ДатаПлатежа,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Организация КАК Организация,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК Документ.ОтчетКомитентуОПродажах).Дата КАК ДатаРасчетногоДокумента,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДокументРасчетовСКонтрагентом КАК Документ.ОтчетКомитентуОПродажах).Номер КАК НомерРасчетногоДокумента,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент                              КАК Партнер,
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.Контрагент                              КАК Контрагент,
		|	-ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток             КАК Сумма,
		|	
		|	-ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                                                          КАК СуммаРегл,
		|	
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|				И УпрУчет
		|				И ДокументРасчетовСКонтрагентом ССЫЛКА Документ.ОтчетКомитентуОПродажах
		|				И ДоговорКонтрагента.ВедениеВзаиморасчетов <> ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом)) КАК ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
		|		ПО ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|	
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиПоДокументамРасчетовОстатки.СуммаВзаиморасчетовОстаток < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("НомерРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаПлатежа");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПоставщикамиДолги", Комментарий);
КонецПроцедуры
Процедура ВводОстатковАвансыПоДоговорамУплаченныеПоставщикам(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка                                  КАК Сделка,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Организация                             КАК Организация,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                              КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                              КАК Партнер,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток              КАК Сумма,
		|	
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                                      КАК СуммаРегл,
		|	
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента                      КАК РасчетныйДокумент,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер = """"
		|			ТОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Код
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Номер
		|	КОНЕЦ КАК НомерРасчетногоДокумента,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаОстатков
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.Дата
		|	КОНЕЦ КАК ДатаРасчетногоДокумента
		|	
		|ПОМЕСТИТЬ ОстаткиВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		|				И (ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом)
		|					ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
		|					ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
		|						И (НЕ Сделка ССЫЛКА Документ.ЗаказПоставщику))) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
		|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|	
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиВзаиморасчетов.Организация КАК Организация,
		|	ОстаткиВзаиморасчетов.Контрагент КАК Контрагент,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	СУММА(ОстаткиВзаиморасчетов.Сумма) КАК Сумма,
		|	СУММА(ОстаткиВзаиморасчетов.СуммаРегл) КАК СуммаРегл,
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов,
		|	ОстаткиВзаиморасчетов.РасчетныйДокумент,
		|	ОстаткиВзаиморасчетов.НомерРасчетногоДокумента,
		|	ОстаткиВзаиморасчетов.ДатаРасчетногоДокумента
		|ИЗ
		|	ОстаткиВзаиморасчетов КАК ОстаткиВзаиморасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиВзаиморасчетов.Организация,
		|	ОстаткиВзаиморасчетов.Контрагент,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов,
		|	ОстаткиВзаиморасчетов.РасчетныйДокумент,
		|	ОстаткиВзаиморасчетов.НомерРасчетногоДокумента,
		|	ОстаткиВзаиморасчетов.ДатаРасчетногоДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("НомерРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("РасчетныйДокумент");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
		НоваяСтрока.РасчетыСПартнерами.Свернуть("
			|Партнер,
			|Контрагент,
			|ВалютаВзаиморасчетов,
			|ДатаРасчетногоДокумента,
			|НомерРасчетногоДокумента,
			|РасчетныйДокумент", "Сумма,СуммаРегл");
		
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПоставщикамиАвансы", Комментарий);
КонецПроцедуры
Процедура ВводОстатковАвансыПоЗаказамУплаченныеПоставщикам(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстатки.Организация КАК Организация,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПоставщику) КАК РасчетныйДокумент,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПоставщику).Дата КАК ДатаРасчетногоДокумента,
		|	ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Документ.ЗаказПоставщику).Номер КАК НомерРасчетногоДокумента,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                              КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                              КАК Партнер,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток              КАК Сумма,
		|	
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                                      КАК СуммаРегл,
		|	
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|			&ДатаОстатков,
		|			ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		|				И ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам)
		|				И Сделка ССЫЛКА Документ.ЗаказПоставщику) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
		|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|	
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("НомерРасчетногоДокумента");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("РасчетныйДокумент");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПоставщикамиАвансы", Комментарий);
КонецПроцедуры
Процедура ВводОстатковПрочиеАвансыУплаченныеПоставщикам(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	&ДатаОстатков                                                              КАК ДатаПлатежа,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Организация                             КАК Организация,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка                                  КАК Сделка,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                              КАК Партнер,
		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент                              КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток              КАК Сумма,
		|	
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                                      КАК СуммаРегл,
		|	
		|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|	
		|ПОМЕСТИТЬ ОстаткиВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		|		&ДатаОстатков,
		|		ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)) КАК ВзаиморасчетыСКонтрагентамиОстатки
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков) КАК КурсыВалют
		|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
		|	
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиВзаиморасчетов.ДатаПлатежа,
		|	ОстаткиВзаиморасчетов.Организация КАК Организация,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	ОстаткиВзаиморасчетов.Контрагент КАК Контрагент,
		|	СУММА(ОстаткиВзаиморасчетов.Сумма) КАК Сумма,
		|	СУММА(ОстаткиВзаиморасчетов.СуммаРегл) КАК СуммаРегл,
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов
		|ИЗ
		|	ОстаткиВзаиморасчетов КАК ОстаткиВзаиморасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиВзаиморасчетов.ДатаПлатежа,
		|	ОстаткиВзаиморасчетов.Организация,
		|	ОстаткиВзаиморасчетов.Партнер,
		|	ОстаткиВзаиморасчетов.Контрагент,
		|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент
		|ИТОГИ ПО
		|	Организация
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Партнер");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
		НоваяСтрока.РасчетыСПартнерами.Свернуть("Партнер, Контрагент, ВалютаВзаиморасчетов", "Сумма,СуммаРегл");
		
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПоставщикамиАвансы", Комментарий);
КонецПроцедуры
Процедура ВводОстатковПрочаяКредиторскаяЗадолженность(КомпонентыОбмена, Комментарий="")
	Параметры = ПолучитьПараметрыВводаОстРасчетыСКонтрагентами(КомпонентыОбмена);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&ДатаОстатков КАК ДатаПлатежа,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Организация КАК Организация,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
	|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
	|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма,
	|	-ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
	|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
	|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК Договор,
	|	ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ПОМЕСТИТЬ ОстаткиВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаОстатков, ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков, ) КАК КурсыВалют
	|		ПО ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиВзаиморасчетов.ДатаПлатежа,
	|	ОстаткиВзаиморасчетов.Организация КАК Организация,
	|	ОстаткиВзаиморасчетов.Контрагент КАК Контрагент,
	|	СУММА(ОстаткиВзаиморасчетов.Сумма) КАК Сумма,
	|	СУММА(ОстаткиВзаиморасчетов.СуммаРегл) КАК СуммаРегл,
	|	ОстаткиВзаиморасчетов.Договор,
	|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов
	|ИЗ
	|	ОстаткиВзаиморасчетов КАК ОстаткиВзаиморасчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиВзаиморасчетов.ДатаПлатежа,
	|	ОстаткиВзаиморасчетов.Организация,
	|	ОстаткиВзаиморасчетов.Контрагент,
	|	ОстаткиВзаиморасчетов.ВалютаВзаиморасчетов,
	|	ОстаткиВзаиморасчетов.Договор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент
	|ИТОГИ ПО
	|	Организация
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(Параметры.ДатаОстатков));
	
	ВыборкаДанных = Новый ТаблицаЗначений;
	ВыборкаДанных.Колонки.Добавить("Дата");
	ВыборкаДанных.Колонки.Добавить("Организация");
	ВыборкаДанных.Колонки.Добавить("РасчетыСПартнерами");
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаПоОрганизациям = РезультатыЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		НоваяСтрока = ВыборкаДанных.Добавить();
		НоваяСтрока.Дата        = КонецДня(Параметры.ДатаОстатков); 
		НоваяСтрока.Организация = ВыборкаПоОрганизациям.Организация; 
		
		НоваяСтрока.РасчетыСПартнерами = Новый ТаблицаЗначений;
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Контрагент");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Договор");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("Сумма");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("СуммаРегл");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ВалютаВзаиморасчетов");
		НоваяСтрока.РасчетыСПартнерами.Колонки.Добавить("ДатаПлатежа");
		
		ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать(); 
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаРасчетыСПартнерами = НоваяСтрока.РасчетыСПартнерами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасчетыСПартнерами, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыгрузитьДокументВводаОстРасчетыСКонтрагентами(КомпонентыОбмена, ВыборкаДанных, "ПоставщикамиДолги", Комментарий);
КонецПроцедуры
//} КонецОбласти
//} КонецОбласти
//} КонецОбласти
//} КонецОбласти
//{ Область Документы
//{ Область Складские операции
Функция ПолучитьВидПеремещения(ДанныеИБ)
	РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.СкладПолучатель,"ВидСклада,ТипЦенРозничнойТорговли");
	
	Если РеквизитыСклада.ВидСклада=Перечисления.ВидыСкладов.Розничный И ЗначениеЗаполнено(РеквизитыСклада.ТипЦенРозничнойТорговли) Тогда
		Возврат "Розничный";
	ИначеЕсли РеквизитыСклада.ВидСклада=Перечисления.ВидыСкладов.НТТ Тогда
		Возврат "НТТ";
	КонецЕсли;
	Возврат "";
КонецФункции
//} КонецОбласти
//{ Область Документы
Процедура ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКОдокумента, КомпонентыОбмена, РеквизитыОтбора=Неопределено)
	Если ТипЗнч(ИспользованиеПКОдокумента)=Тип("Структура") Тогда
		ИспользованиеВсехПКОдокументов = Истина;
		Для каждого ПКОдокумента Из ИспользованиеПКОдокумента  Цикл
			ИспользованиеВсехПКОдокументов = ПКОдокумента.Значение;
			ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеВсехПКОдокументов, КомпонентыОбмена, РеквизитыОтбора);
			Прервать;
		КонецЦикла;
		Если НЕ ИспользованиеВсехПКОдокументов  Тогда
			УстановитьИспользованиеПКО(ИспользованиеПКОдокумента,Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НЕ ИспользованиеПКОдокумента Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Неопределено;
	
	//Если КомпонентыОбмена.ПараметрыКонвертации.ПередаватьТолькоДокументыОтраженныеВБухгалтерскомУчете
	//	И НЕ ЗначениеРеквизитаОтбора(ДанныеИБ, МетаданныеДокумента, "ОтражатьВБухгалтерскомУчете", РеквизитыОтбора, Ложь)=Истина Тогда
	//	ИспользованиеПКОдокумента = Ложь;
	//	Возврат;
	//КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ИспользоватьОтборПоОрганизациям") И КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям Тогда
		Организация = ЗначениеРеквизитаОтбора(ДанныеИБ, МетаданныеДокумента, "Организация", РеквизитыОтбора, Неопределено);
		Если КомпонентыОбмена.ПараметрыКонвертации.Организации.НайтиПоЗначению(Организация)=Неопределено Тогда
			ИспользованиеПКОдокумента = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ИспользоватьОтборПоСкладам") И КомпонентыОбмена.ПараметрыКонвертации.ИспользоватьОтборПоСкладам Тогда
		
		Склад = ЗначениеРеквизитаОтбора(ДанныеИБ, МетаданныеДокумента, "Склад", РеквизитыОтбора, Неопределено);
		Если Склад=Неопределено	Тогда
			Склад = ЗначениеРеквизитаОтбора(ДанныеИБ, МетаданныеДокумента, "СкладОрдер", РеквизитыОтбора, Неопределено);
		КонецЕсли;
		
		УзелСписокСкладов = КомпонентыОбмена.ПараметрыКонвертации.Склады;
		Если ТипЗнч(Склад)=Тип("Массив") Тогда
			НайденСклад = Ложь;
			Для Каждого ТекСклад  Из Склад Цикл
				Если НЕ УзелСписокСкладов.НайтиПоЗначению(ТекСклад)=Неопределено Тогда
					НайденСклад = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ НайденСклад Тогда
				ИспользованиеПКОдокумента = Ложь;
				Возврат;
			КонецЕсли;
		Иначе
			Если УзелСписокСкладов.НайтиПоЗначению(Склад)=Неопределено Тогда
				ИспользованиеПКОдокумента = Ложь;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОбработатьОграничениеПередачиПустыхСумм(КомпонентыОбмена, ДанныеXDTO, ОбработатьСуммуВШапке = Ложь)
	// Обход ограничения формата
	
	ЦенаТ = Ложь;
	СуммаТ = Ложь;
	КоличествоТ = Ложь;
	Если ДанныеXDTO.Свойство("Товары") Тогда
		ЕстьЦенаТ		= НЕ ДанныеXDTO.Товары.Колонки.Найти("Цена")=Неопределено;
		ЕстьСуммаТ		= НЕ ДанныеXDTO.Товары.Колонки.Найти("Сумма")=Неопределено;
		ЕстьКоличествоТ	= НЕ ДанныеXDTO.Товары.Колонки.Найти("Количество")=Неопределено;
	Иначе
		ЕстьЦенаТ = Ложь;
		ЕстьСуммаТ = Ложь;
		ЕстьКоличествоТ = Ложь;
	КонецЕсли;
	
	ЦенаУ = Ложь;
	СуммаУ = Ложь;
	КоличествоУ = Ложь;
	Если ДанныеXDTO.Свойство("Услуги") Тогда
		ЕстьЦенаУ		= НЕ ДанныеXDTO.Услуги.Колонки.Найти("Цена")=Неопределено;
		ЕстьСуммаУ		= НЕ ДанныеXDTO.Услуги.Колонки.Найти("Сумма")=Неопределено;
		ЕстьКоличествоУ	= НЕ ДанныеXDTO.Услуги.Колонки.Найти("Количество")=Неопределено;
	Иначе
		ЕстьЦенаУ = Ложь;
		ЕстьСуммаУ = Ложь;
		ЕстьКоличествоУ = Ложь;
	КонецЕсли;
	
	//{ КорректировкаКолонок 
	
	Если ЦенаТ ИЛИ СуммаТ ИЛИ КоличествоТ Тогда
		Если ЦенаТ Тогда
			ДанныеXDTO.Товары.Колонки.Цена.Имя = "ЦенаДок";
			ДанныеXDTO.Товары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			Для Каждого СтрокаТовары Из ДанныеXDTO.Товары Цикл
				Если СтрокаТовары.ЦенаДок=0 Тогда
					СтрокаТовары.Цена = -1;
				Иначе
					СтрокаТовары.Цена = СтрокаТовары.ЦенаДок;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СуммаТ Тогда
			ДанныеXDTO.Товары.Колонки.Сумма.Имя = "СуммаДок";
			ДанныеXDTO.Товары.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			Для Каждого СтрокаТовары Из ДанныеXDTO.Товары Цикл
				Если СтрокаТовары.СуммаДок=0 Тогда
					СтрокаТовары.Сумма = -1;
				Иначе
					СтрокаТовары.Сумма = СтрокаТовары.СуммаДок;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если КоличествоТ Тогда
			ДанныеXDTO.Товары.Колонки.Количество.Имя = "КоличествоДок";
			ДанныеXDTO.Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			Для Каждого СтрокаТовары Из ДанныеXDTO.Товары Цикл
				Если СтрокаТовары.КоличествоДок=0 Тогда
					СтрокаТовары.Количество = -1;
				Иначе
					СтрокаТовары.Количество = СтрокаТовары.КоличествоДок;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ЦенаУ ИЛИ СуммаУ ИЛИ КоличествоУ Тогда
		Если ЦенаУ Тогда
			ДанныеXDTO.Услуги.Колонки.Цена.Имя = "ЦенаДок";
			ДанныеXDTO.Услуги.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			Для Каждого СтрокаУслуги Из ДанныеXDTO.Услуги Цикл
				Если СтрокаУслуги.ЦенаДок=0 Тогда
					СтрокаУслуги.Цена = -1;
				Иначе
					СтрокаУслуги.Цена = СтрокаУслуги.ЦенаДок;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СуммаУ Тогда
			ДанныеXDTO.Услуги.Колонки.Сумма.Имя = "СуммаДок";
			ДанныеXDTO.Услуги.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
			Для Каждого СтрокаУслуги Из ДанныеXDTO.Услуги Цикл
				Если СтрокаУслуги.СуммаДок=0 Тогда
					СтрокаУслуги.Сумма = -1;
				Иначе
					СтрокаУслуги.Сумма = СтрокаУслуги.СуммаДок;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если КоличествоУ Тогда
			ДанныеXDTO.Услуги.Колонки.Количество.Имя = "КоличествоДок";
			ДанныеXDTO.Услуги.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
			Для Каждого СтрокаУслуги Из ДанныеXDTO.Услуги Цикл
				Если СтрокаУслуги.КоличествоДок=0 Тогда
					СтрокаУслуги.Количество = -1;
				Иначе
					СтрокаУслуги.Количество = СтрокаУслуги.КоличествоДок;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	//}
КонецПроцедуры
Функция ПолучитьВидСубконто(ЗначениеВидСубконто, КомпонентыОбмена)
	// для КА 1.1, УПП, БП 2.0
КонецФункции
Функция ПолучитьБухСчет(БухСчет, КомпонентыОбмена)
	// для КА 1.1, УПП, БП 2.0
КонецФункции
Процедура AdditionalInfoВставить(ДанныеXDTO, Имя, ДопЗначение, ВставлятьПустое=Истина)
	Если НЕ (ВставлятьПустое ИЛИ ЗначениеЗаполнено(ДопЗначение)) Тогда
		Возврат;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("AdditionalInfo") И ТипЗнч(ДанныеXDTO.AdditionalInfo)=Тип("Структура") Тогда
		ДопДанные = ДанныеXDTO.AdditionalInfo;
	Иначе
		ДопДанные = Новый Структура;
	КонецЕсли;
	
	Если ВставлятьПустое ИЛИ ЗначениеЗаполнено(ДопЗначение) Тогда
		ДопДанные.Вставить(Имя, ДопЗначение);
		ДанныеXDTO.Вставить("AdditionalInfo", ДопДанные);
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьДокументВAdditionalInfo(ДанныеXDTO, Имя, ДокументСсылка)
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ДокСсылка = Новый Структура;
		ДокСсылка.Вставить("Ссылка",Строка(ДокументСсылка.УникальныйИдентификатор()));
		ДокСсылка.Вставить("Тип", ДокументСсылка.Метаданные().Имя);
		AdditionalInfoВставить(ДанныеXDTO, Имя, ДокСсылка);
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьСклад(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, ИмяРеквизитаСклад="Склад", ВыгружатьПустой=Ложь)
	СкладСсылка = ?(ДанныеИБ.ДополнительныеСвойства.Свойство(ИмяРеквизитаСклад), ДанныеИБ.ДополнительныеСвойства[ИмяРеквизитаСклад], ДанныеИБ[ИмяРеквизитаСклад]);
	СкладДляВыгрузки = СкладДляВыгрузки(СкладСсылка, КомпонентыОбмена.ПараметрыКонвертации);
	Если НЕ ВыгружатьПустой И НЕ ЗначениеЗаполнено(СкладДляВыгрузки)  Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
КонецПроцедуры
Процедура ВыгрузкаУпаковокСерийНоменклатуры(КомпонентыОбмена, ТекстЗапроса)
	ВыгружатьУпаковкиНоменклатуры = Неопределено;
	Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ВыгружатьУпаковкиНоменклатуры",ВыгружатьУпаковкиНоменклатуры) И ВыгружатьУпаковкиНоменклатуры=Истина Тогда
		
		ТекстЗапросаКоличество = "тТовары.Количество * ВЫБОР
		|		КОГДА ЕСТЬNULL(тТовары.ЕдиницаИзмерения.Коэффициент, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ тТовары.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК";
	
		
		Если Найти(ТекстЗапроса,"тТовары.Количество * 1")>0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"тТовары.Количество * 1 КАК", ТекстЗапросаКоличество);
		КонецЕсли;
		
		Если Найти(ТекстЗапроса,"втТоварыУслуги.Количество * 1")>0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"втТоварыУслуги.Количество * 1 КАК", СтрЗаменить(ТекстЗапросаКоличество,"тТовары.","втТоварыУслуги."));
		КонецЕсли;
	
		Если Найти(ТекстЗапроса,"тПродукция.Количество * 1")>0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"тПродукция.Количество * 1 КАК", СтрЗаменить(ТекстЗапросаКоличество,"тТовары.","тПродукция."));
		КонецЕсли;
	
		Если Найти(ТекстЗапроса,"тМатериалы.Количество * 1")>0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"тМатериалы.Количество * 1 КАК", СтрЗаменить(ТекстЗапросаКоличество,"тТовары.","тМатериалы."));
		КонецЕсли;
	
		Если Найти(ТекстЗапроса,"тОборудование.Количество * 1")>0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"тОборудование.Количество * 1 КАК", СтрЗаменить(ТекстЗапросаКоличество,"тТовары.","тОборудование."));
		КонецЕсли;
		
		Если Найти(ТекстЗапроса,".Количество * 1")>0 Тогда
			ВызватьИсключение "Ошибка в запросе " + ТекстЗапроса;
		КонецЕсли;
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,".ЕдиницаИзмерения КАК Упаковка",".ЕдиницаИзмерения КАК УдалитьУпаковка");
	КонецЕсли;
	
	ВыгружатьСерииНоменклатуры = Неопределено;
	Если НЕ (КомпонентыОбмена.ПараметрыКонвертации.Свойство("ВыгружатьСерииНоменклатуры",ВыгружатьСерииНоменклатуры) И ВыгружатьСерииНоменклатуры=Истина) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,".СерияНоменклатуры КАК Серия,",".СерияНоменклатуры КАК УдалитьСерия,");
	КонецЕсли;
КонецПроцедуры
Функция ЗначениеВИнструкциюПКО(КомпонентыОбмена, Значение, ЭтоПростойТип = Ложь, ПравилоНайдено = Ложь)
	// Параметры:
	// КомпонентыОбмена - структура компонентов обмена в рамках текущего сеанса;
	// Значение - значение, которое необходимо поместить в свойство объекта XDTO;
	// ЭтоПростойТип - исходящий параметр. Указывает, является ли тип переданного значения примитивным (Число, Строка, Булево, Дата);
	// ПравилоНайдено - определяет, было ли найдено правило конвертации. Если правило найдено, но Результат = Неопределено, значит, было найдено более одного ПКО для значения.
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоОтправка		= (КомпонентыОбмена.НаправлениеОбмена = "Отправка");
	ЭтоПолучение	= (КомпонентыОбмена.НаправлениеОбмена = "Получение");
	
	ТипЗначенияСвойства = ТипЗнч(Значение);
	
	Если ЭтоПолучение
		И ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("Ссылка") Тогда
		
		ТипЗначенияСвойства = Значение.Ссылка.ТипЗначенияXDTO;
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("ИмяПКО") Тогда
		
		Возврат Новый Структура("Значение, ИмяПКО", Значение, Значение.ИмяПКО);
	КонецЕсли;
	
	Если ТипЗначенияСвойства = Тип("Число") 
		Или ТипЗначенияСвойства = Тип("Строка")
		Или ТипЗначенияСвойства = Тип("Булево")
		Или ТипЗначенияСвойства = Тип("Дата") Тогда
		
		Результат = Значение;
		ЭтоПростойТип = Истина;
	Иначе
		СтрокиПКО = Новый Массив;
		
		Если ЭтоОтправка Тогда	
			СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипДанных", ТипЗначенияСвойства));
		ИначеЕсли ЭтоПолучение Тогда
			СтрокиПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ТипСсылкиXDTO", ТипЗначенияСвойства));
		КонецЕсли;
	
		// Ищем только однозначное соответствие.
		// Если правил будет найдено больше одного, считаем, что конвертация не выполнена.
		ЭтоГруппа = Неопределено;
				
		Для Каждого СтрокаПКО Из СтрокиПКО Цикл
			Если ЭтоОтправка Тогда
				Если СтрокаПКО.ЭтоСправочник Тогда
					Если ЭтоГруппа = Неопределено
						И СтрокаПКО.ОбъектДанных.Иерархический
						И СтрокаПКО.ОбъектДанных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
						ЭтоГруппа = Значение.ЭтоГруппа;
					Иначе
						ЭтоГруппа = Ложь;
					КонецЕсли;
					
					Если ЭтоГруппа
							И Не СтрокаПКО.ПравилоДляГруппыСправочника
						Или Не ЭтоГруппа
							И СтрокаПКО.ПравилоДляГруппыСправочника Тогда
						
						Продолжить;					
					КонецЕсли;			
				Иначе
					// Прочие варианты проверок						
				КонецЕсли;
			КонецЕсли;
			
			Если ПравилоНайдено Тогда
				Результат = Неопределено;
				Прервать;
			Иначе
				Результат = Новый Структура("Значение, ИмяПКО", Значение, СтрокаПКО.ИмяПКО);
				ПравилоНайдено = Истина;
			КонецЕсли;		
		КонецЦикла;			
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Функция ЗапретИспользованияИспользованияПКО(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	РазрешеноИспользоватьПКО = Истина;
	ПередОбработкойДанныхДокумента(ДанныеИБ, РазрешеноИспользоватьПКО, КомпонентыОбмена);
	УстановитьИспользованиеПКО(ИспользованиеПКО,Ложь);
	Возврат НЕ РазрешеноИспользоватьПКО;
КонецФункции
Процедура ВыгрузитьНалогообложениеНДСПродавца(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, ИмяФормата="НалогообложениеНДСПродавца")
	ИспользуетсяНалогообложениеНДСПродавца = Неопределено;
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.Свойство("ИспользуетсяНалогообложениеНДСПродавца") Тогда
		КомпонентыОбмена.ПараметрыКонвертации.Вставить("ИспользуетсяНалогообложениеНДСПродавца", СвойствоФорматаОбмена(КомпонентыОбмена, "НалогообложениеНДСПродавца"));
	КонецЕсли;	
	ИспользуетсяНалогообложениеНДСПродавца = КомпонентыОбмена.ПараметрыКонвертации.ИспользуетсяНалогообложениеНДСПродавца=Истина;
	Если НЕ ИспользуетсяНалогообложениеНДСПродавца Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоНДС = Новый Структура("ДоговорКонтрагента,УчитыватьНДС");	
	ЗаполнитьЗначенияСвойств(ДанныеПоНДС,ДанныеИБ);
	
	НалогообложениеНДСПродавца = "";
	Если НЕ ДанныеПоНДС.ДоговорКонтрагента=Неопределено И ЗначениеЗаполнено(ДанныеПоНДС.ДоговорКонтрагента) Тогда
		ДанныеДоговора = Новый Структура("УчетАгентскогоНДС,РеализацияТоваровОблагаемыхНДСУПокупателя");
		ЗаполнитьЗначенияСвойств(ДанныеДоговора,ДанныеПоНДС.ДоговорКонтрагента);
		//ДанныеДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ДанныеПоНДС.ДоговорКонтрагента,"УчетАгентскогоНДС,РеализацияТоваровОблагаемыхНДСУПокупателя");
		Если ДанныеДоговора.УчетАгентскогоНДС=Истина Тогда 
			НалогообложениеНДСПродавца = "НалоговыйАгентПоНДС";
		ИначеЕсли ДанныеДоговора.РеализацияТоваровОблагаемыхНДСУПокупателя=Истина Тогда 
			НалогообложениеНДСПродавца = "НДСИсчисляетсяПокупателем";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(НалогообложениеНДСПродавца) И НЕ ДанныеПоНДС.УчитыватьНДС=Неопределено Тогда 
		НалогообложениеНДСПродавца = ?(ДанныеПоНДС.УчитыватьНДС=Истина,"ОблагаетсяНДС","НеОблагаетсяНДС");
	КонецЕсли;
	
	Если ПустаяСтрока(НалогообложениеНДСПродавца)Тогда
		НалогообложениеНДСПродавца = "НеОблагаетсяНДС";
	КонецЕсли;
	
	ДанныеXDTO.Вставить(ИмяФормата, НалогообложениеНДСПродавца);
КонецПроцедуры
Процедура ВыгрузитьНалогообложениеНДС(ДанныеИБНалогообложение, ДанныеXDTO, КомпонентыОбмена, ИмяФормата="Налогообложение")
	Если НЕ ЗначениеЗаполнено(ДанныеИБНалогообложение) Тогда
		Возврат;
	КонецЕсли;	
	ИспользуетсяНалогообложениеНДС = Неопределено;
	Если НЕ КомпонентыОбмена.ПараметрыКонвертации.Свойство("ИспользуетсяНалогообложениеНДС") Тогда
		КомпонентыОбмена.ПараметрыКонвертации.Вставить("ИспользуетсяНалогообложениеНДС", СвойствоФорматаОбмена(КомпонентыОбмена, "НалогообложениеНДС"));
	КонецЕсли;	
	ИспользуетсяНалогообложениеНДС = КомпонентыОбмена.ПараметрыКонвертации.ИспользуетсяНалогообложениеНДС=Истина;
	
	ИмяПКО = ?(ИспользуетсяНалогообложениеНДС, "Перечисление_НалогообложениеНДС_Отправка", "Перечисления_ТипыНалогообложенияНДС");
	Инструкция = Новый Структура("Значение, ИмяПКО", ДанныеИБНалогообложение, ИмяПКО);
	ДанныеXDTO.Вставить(ИмяФормата, Инструкция);
КонецПроцедуры
Процедура ВыгрузитьШапку(ДанныеXDTO, ТаблШапка)
	Если ТаблШапка.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ВыборкаШапка = ТаблШапка[0];
	Для каждого СтрокаТЧ Из ТаблШапка.Колонки Цикл
		ИмяРеквизита = СтрокаТЧ.Имя;
		ЗначениеРеквизита = ВыборкаШапка[ИмяРеквизита];
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ДанныеXDTO.Вставить(ИмяРеквизита, ЗначениеРеквизита); 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ВыгрузитьВсеДанныеДокумента(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки, ИмяДокумента=Неопределено)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Дата", Дата(1980,1,1));
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", ?(ИмяДокумента=Неопределено,"Документ."+ДанныеИБ.Метаданные().Имя,ИмяДокумента));
	ДанныеXDTO.Вставить("ВидОперации",  "ПереносЗадолженности");
	Если НЕ ДанныеXDTO.Свойство("Валюта") Тогда
		ДанныеXDTO.Вставить("Валюта",  Новый Структура("Код,Наименование","0","0"));
	КонецЕсли;
	
	Если СтекВыгрузки.Количество()>1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьРеквизитыОбъектаВAdditionalInfo(ДанныеИБ, ДанныеXDTO); //ED все реквизиты
	
	AdditionalInfoВставить(ДанныеXDTO, "Дата", ДанныеИБ.Дата);
	AdditionalInfoВставить(ДанныеXDTO, "Номер", ДанныеИБ.Номер);
	
	// Выгрузка табличных частей
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство");
	ТаблицаДопРеквизитов.Колонки.Добавить("ЗначениеСвойства");
	
	ИндексТабл = 0;
	Для каждого ТекТЧ Из ДанныеИБ.Метаданные().ТабличныеЧасти Цикл
		
		Если ДанныеИБ[ТекТЧ.Имя].Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТЗ = ДанныеИБ[ТекТЧ.Имя].Выгрузить();
		
		ИндексТабл = ИндексТабл + 1;
		НоваяСтрока = ТаблицаДопРеквизитов.Добавить();
		НоваяСтрока.Свойство = Новый Структура("Наименование", "ТЧ."+ТекТЧ.Имя);
		НоваяСтрока.ЗначениеСвойства = ТЗ.Количество();
		КолонкиТабл = ТЗ.Колонки;
		
		ЭтоПерваяСтрока = Истина;
		Для Каждого СтрокаТЧ Из ТЗ Цикл
			Если ЭтоПерваяСтрока Тогда
				ЭтоПерваяСтрока = Ложь;
			Иначе
				НоваяСтрока = ТаблицаДопРеквизитов.Добавить();
				НоваяСтрока.Свойство = Новый Структура("Наименование", "ТЧ."+ТекТЧ.Имя);
				НоваяСтрока.ЗначениеСвойства = "-";
			КонецЕсли;
			Для Каждого СтрокаЭлемент Из КолонкиТабл Цикл
				Имя = СтрокаЭлемент.Имя;
				
				ЗначениеРеквизита = СтрокаТЧ[Имя];
				Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда 
					Продолжить;
				КонецЕсли;
				ТипЗначения = ТипЗнч(ЗначениеРеквизита);
				
				НоваяСтрока = ТаблицаДопРеквизитов.Добавить();
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
					ТипЗначенияСтрока = СтрЗаменить(Метаданные.НайтиПоТипу(ТипЗначения).ПолноеИмя(), ".", "Ссылка.");
					Если ТипЗначенияСтрока="ПланСчетовСсылка.Хозрасчетный" Тогда
						НоваяСтрока.Значение = ПолучитьБухСчет(ЗначениеРеквизита, КомпонентыОбмена);
					ИначеЕсли ТипЗначенияСтрока="ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные" Тогда
						НоваяСтрока.Значение = ПолучитьВидСубконто(ЗначениеРеквизита, КомпонентыОбмена);
					ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(ЗначениеРеквизита.Метаданные()) Тогда
						НоваяСтрока.ЗначениеСвойства = XMLСтрока(ЗначениеРеквизита);
					Иначе
						НоваяСтрока.ЗначениеСвойства = Строка(ЗначениеРеквизита.УникальныйИдентификатор());
					КонецЕсли;	
				ИначеЕсли ТипЗначения=Тип("УникальныйИдентификатор") Тогда
					НоваяСтрока.ЗначениеСвойства = Строка(ЗначениеРеквизита);
					ТипЗначенияСтрока = "УникальныйИдентификатор";
				ИначеЕсли ТипЗначения=Тип("Число") ИЛИ ТипЗначения=Тип("Строка") ИЛИ ТипЗначения=Тип("Булево") ИЛИ ТипЗначения=Тип("Дата") Тогда
					НоваяСтрока.ЗначениеСвойства = ЗначениеРеквизита;
					ТипЗначенияСтрока = Строка(ТипЗначения);
				Иначе // ошибка
					НоваяСтрока.ЗначениеСвойства = ЗначениеРеквизита;
					ТипЗначенияСтрока = Строка(ТипЗначения);
				КонецЕсли;
				
				НоваяСтрока.Свойство = Новый Структура("Наименование", Имя+";"+ТипЗначенияСтрока);
				
			КонецЦикла;	
		КонецЦикла;
		
	КонецЦикла;	
	
	Если ТаблицаДопРеквизитов.Количество()>0 Тогда
		ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопРеквизитов);
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
//} КонецОбласти
//{ Область Закупки и продажи
Процедура ВыгрузитьХарактеристикиИзТаблицы(ТаблицаТоваров, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ВыгружатьХарактеристикиНоменклатуры Тогда
		ПОД_Характеристики = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Справочник_ХарактеристикиНоменклатуры", "Имя");
		Для Каждого СтрокаТЧ Из ТаблицаТоваров Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда
				ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтрокаТЧ.Характеристика, ПОД_Характеристики);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//{ Область Прочие документы
Функция ИмяПКОДляПогашениеЗадолженности(ДокументРасчетовСКонтрагентом, ВидДокумента="")
	ИмяПКО = "";
	
	ТипСсылки = ТипЗнч(ДокументРасчетовСКонтрагентом);
	
	Если ТипСсылки = Тип("ДокументСсылка.АвансовыйОтчет") Тогда 	ИмяПКО = "Документ_АвансовыйОтчет_Отправка";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.АккредитивПереданный") Тогда 	ИмяПКО = "Документ";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.АккредитивПолученный") Тогда 	ИмяПКО = "Документ";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда 	ИмяПКО = "Документ";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда 	ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда 	ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда 	ИмяПКО = "Документ";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда 	ИмяПКО = "Документ";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ЗаказПокупателя") Тогда 	ИмяПКО = "Документ_ЗаказКлиента_Отправка";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ИнкассовоеПоручениеПереданное	") Тогда 	ИмяПКО = "Документ";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ИнкассовоеПоручениеПолученное") Тогда 	ИмяПКО = "Документ";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаДолга") Тогда 	ИмяПКО = "Документ";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КорректировкаДолгаПоВозвратнойТаре") Тогда 	ИмяПКО = "Документ";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда 	ИмяПКО = "Документ";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС") Тогда 	ИмяПКО = "Документ";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда 	ИмяПКО = "Документ";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда 	ИмяПКО = "Документ";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда 	ИмяПКО = "Документ";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПередачаОС") Тогда 	ИмяПКО = "Документ";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее") Тогда 	ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда 	ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное") Тогда 	ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Тр_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПлатежноеТребованиеПолученное") Тогда 	ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Тр_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда 	ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Ордер_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда 	ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Ордер_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда 	ИмяПКО = "Документ_ПоступлениеДопРасходов_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 	ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
		//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда 	ИмяПКО = "Документ";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда 	ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда 	ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 	ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
	КонецЕсли;
	
	Возврат ИмяПКО;
КонецФункции
Функция ПолучитьИмяПКОДляОтправкиПоСсылке(КомпонентыОбмена, Ссылка, ОбластьИспользования=Неопределено, КешСоответствий=Неопределено)
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТипЗнчСсылка = ТипЗнч(Ссылка);
	ОбластьИспользованияСтр = ?(ЗначениеЗаполнено(ОбластьИспользования),ОбластьИспользования,"ЛюбаяОбластьИспользования");
	ОбластьИспользованияСтр = СтрЗаменить(ОбластьИспользованияСтр,".","");
	ОбластьИспользованияСтр = СтрЗаменить(ОбластьИспользованияСтр,",","");
	Если ЗначениеЗаполнено(КешСоответствий) 
		И ТипЗнч(КешСоответствий)=Тип("Структура") 
		И КешСоответствий.Свойство(ОбластьИспользованияСтр) Тогда
		СоответствиеЗначений = КешСоответствий[ОбластьИспользованияСтр];
	Иначе
		
		СоответствиеЗначений = Новый Соответствие;
		Если ТипЗнч(КешСоответствий)=Тип("Структура") Тогда
			КешСоответствий.Вставить(ОбластьИспользованияСтр, СоответствиеЗначений);
		Иначе
			КешСоответствий = Новый Структура(ОбластьИспользованияСтр, СоответствиеЗначений);
		КонецЕсли;
		
		ОбластиИспользования = Новый Массив;
		ОбластиИспользования.Добавить("Документ.АвансовыйОтчет,ОплатаКонтрагентам.ДокументРасчетов"); //0
		ОбластиИспользования.Добавить("Документ.АвансовыйОтчет,ВыданныеАвансы.Документ"); //1
		ОбластиИспользования.Добавить("ДополнительныеРеквизиты,ЗначениеСвойства"); //2
		ОбластиИспользования.Добавить("Документ.СБДСРасчетыСКонтрагентами,Заказ"); //3
		ОбластиИспользования.Добавить("Документ.СБДСРасчетыСКонтрагентами,ДокументРасчетов"); //4
		ОбластиИспользования.Добавить("Документ.ПБДСРасчетыСКонтрагентами,Заказ"); //5
		ОбластиИспользования.Добавить("Документ.ПБДСРасчетыСКонтрагентами,ДокументРасчетов"); //6
		
		ЛюбаяОбластьИспользования = ОбластьИспользования=Неопределено ИЛИ ОбластиИспользования.Найти(ОбластьИспользования)=Неопределено;
		
		//{ Однозначное соответствие
		МетаданныеДокументы = Метаданные.Документы;
		МетаданныеСправочники = Метаданные.Справочники;
		Для каждого СтрокаПКО Из КомпонентыОбмена.ПравилаКонвертацииОбъектов Цикл
			Если КомпонентыОбмена.ПравилаКонвертацииОбъектов.НайтиСтроки(Новый Структура("ОбъектДанных",СтрокаПКО.ОбъектДанных)).Количество()=1 Тогда
				Если МетаданныеДокументы.Содержит(СтрокаПКО.ОбъектДанных) Тогда
					СоответствиеЗначений.Вставить(Тип("ДокументСсылка."+СтрокаПКО.ОбъектДанных.Имя), СтрокаПКО.ИмяПКО);
				ИначеЕсли МетаданныеСправочники.Содержит(СтрокаПКО.ОбъектДанных) Тогда
					СоответствиеЗначений.Вставить(Тип("СправочникСсылка."+СтрокаПКО.ОбъектДанных.Имя), СтрокаПКО.ИмяПКО);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		//}
		
		Если ЛюбаяОбластьИспользования ИЛИ ОбластьИспользования=ОбластиИспользования[0] Тогда
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"),               "Документ_ПБДСРасчетыСКонтрагентами_Отправка");
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"),              "Документ_СБДСРасчетыСКонтрагентами_Отправка");	
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ПлатежноеТребованиеВыставленное"),          "Документ_ПБДСРасчетыСКонтрагентами_Тр_Отправка");	
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ПлатежноеТребованиеПолученное"),            "Документ_СБДСРасчетыСКонтрагентами_Тр_Отправка");	
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств"), "Документ_ПБДСРасчетыСКонтрагентами_Ордер_Отправка");	
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"),    "Документ_СБДСРасчетыСКонтрагентами_Ордер_Отправка");
			
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"),                   "Документ_ПКОРасчетыСКонтрагентами_Отправка");	
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"),                   "Документ_РКОРасчетыСКонтрагентами_Отправка");	
		КонецЕсли;	
		
		Если ОбластьИспользования=ОбластиИспользования[1] Тогда
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"),                   "Документ_РКОРасчетыССотрудниками_Отправка");
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"),    "Документ_СБДСРасчетыССотрудниками_Ордер_Отправка");
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"),              "Документ_СБДСРасчетыССотрудниками_Отправка");
		КонецЕсли;
		
		Если ЛюбаяОбластьИспользования ИЛИ ОбластьИспользования=ОбластиИспользования[2] Тогда
			СоответствиеЗначений.Вставить(Тип("СправочникСсылка.Номенклатура"),                   "Справочник_Номенклатура_Отправка");
			СоответствиеЗначений.Вставить(Тип("СправочникСсылка.Контрагенты"),                    "Справочник_Контрагенты");
			СоответствиеЗначений.Вставить(Тип("СправочникСсылка.Склады"),                         "Справочник_Склады");
			СоответствиеЗначений.Вставить(Тип("СправочникСсылка.ФизическиеЛица"),                 "Справочник_ФизическиеЛица");
			СоответствиеЗначений.Вставить(Тип("СправочникСсылка.Валюты"),                         "Справочник_Валюты");
			СоответствиеЗначений.Вставить(Тип("СправочникСсылка.Организации"),                    "Справочник_Организации");
			СоответствиеЗначений.Вставить(Тип("СправочникСсылка.Подразделения"),                  "Справочник_Подразделения");
			СоответствиеЗначений.Вставить(Тип("СправочникСсылка.Пользователи"),                   "Справочник_Пользователи");
			СоответствиеЗначений.Вставить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"),   "Справочник_КлассификаторЕдиницИзмерения");
			СоответствиеЗначений.Вставить(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"),        "Справочник_ЗначенияДополнительныхРеквизитов_Отправ");
			СоответствиеЗначений.Вставить(Тип("СправочникСсылка.КлассификаторСтранМира"),         "Справочник_СтраныМира");
		КонецЕсли;
		
		Если ОбластьИспользования=ОбластиИспользования[3] 
			ИЛИ ОбластьИспользования=ОбластиИспользования[5] Тогда
			СоответствиеЗначений.Очистить();
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ЗаказПокупателя"),          "Документ_ЗаказКлиента_Отправка");	
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ЗаказПоставщику"),          "Документ_ЗаказПоставщику_Отправка");	
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.СчетНаОплатуПокупателю"),   "Документ_СчетЗаказКлиента_Отправка");	
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.СчетНаОплатуПоставщика"),   "Документ_СчетЗаказПоставщику_Отправка");	
		КонецЕсли;
		
		Если ОбластьИспользования=ОбластиИспользования[4] 
			ИЛИ ОбластьИспользования=ОбластиИспользования[6] Тогда
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ПлатежноеПоручениеВходящее"),   "Документ_ПБДСРасчетыСКонтрагентами_Отправка");
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"),  "Документ_СБДСРасчетыСКонтрагентами_Отправка");	
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"),       "Документ_ПКОРасчетыСКонтрагентами_Отправка");	
			СоответствиеЗначений.Вставить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"),       "Документ_РКОРасчетыСКонтрагентами_Отправка");	
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяПКО = СоответствиеЗначений.Получить(ТипЗнчСсылка);
	Если ЗначениеЗаполнено(ИмяПКО) Тогда
		ПравилоКонвертации = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти(ИмяПКО, "ИмяПКО");
		Если НЕ ПравилоКонвертации=Неопределено Тогда
			Возврат Новый Структура("Значение, ИмяПКО", Ссылка, ИмяПКО);
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции
//} КонецОбласти
//{ Область Казначейство
//{ Область Казначейство
Процедура ВыгрузитьРасшифровкуКонтрагенты_СписаниеДС(ДанныеИБ, ДанныеXDTO, КонтрагентСсылка, КомпонентыОбмена)
	Запрос = Новый Запрос;
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	РасшифровкаПлатежаСписанияДС.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	РасшифровкаПлатежаСписанияДС.СуммаПлатежа КАК Сумма,
		|	РасшифровкаПлатежаСписанияДС.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	РасшифровкаПлатежаСписанияДС.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	РасшифровкаПлатежаСписанияДС.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	РасшифровкаПлатежаСписанияДС.Сделка КАК Заказ,
		|	РасшифровкаПлатежаСписанияДС.ДоговорКонтрагента КАК Договор,
		|	РасшифровкаПлатежаСписанияДС.СтавкаНДС КАК СтавкаНДС,
		|	РасшифровкаПлатежаСписанияДС.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК РасшифровкаПлатежаСписанияДС
		|ГДЕ
		|	РасшифровкаПлатежаСписанияДС.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасшифровкаПлатежаСписанияДС.НомерСтроки";
		
	ТипЗнчДокумента = ТипЗнч(ДанныеИБ);
	Если ТипЗнчДокумента=Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.ПлатежноеПоручениеИсходящее","Документ.РасходныйКассовыйОрдер");
		
	ИначеЕсли ТипЗнчДокумента=Тип("ДокументОбъект.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.ПлатежноеПоручениеИсходящее","Документ.ПлатежныйОрдерСписаниеДенежныхСредств");
		
	ИначеЕсли ТипЗнчДокумента=Тип("ДокументОбъект.ПлатежноеТребованиеПолученное") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.ПлатежноеПоручениеИсходящее","Документ.ПлатежноеТребованиеПолученное");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РП_ИБ = Запрос.Выполнить().Выгрузить();
	
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("Договор");
	ТабРП.Колонки.Добавить("Заказ");
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВзаиморасчетов");
	ТабРП.Колонки.Добавить("СуммаНДС");
	ТабРП.Колонки.Добавить("КурсВзаиморасчетов");
	ТабРП.Колонки.Добавить("КратностьВзаиморасчетов");
	ТабРП.Колонки.Добавить("СтавкаНДС");
	ТабРП.Колонки.Добавить("ВидРасчетовРасширенный");
	ТабРП.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	Для Каждого СтрокаРП_ИБ Из РП_ИБ Цикл
		СтрокаРП = ТабРП.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРП, СтрокаРП_ИБ);
	
		Если Не ЗначениеЗаполнено(СтрокаРП.СтатьяДДС) Тогда
			СтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		// Договор
		ДоговорСсылка = СтрокаРП_ИБ.Договор;
		
		Если Не ЗначениеЗаполнено(ДоговорСсылка)
			И ЗначениеЗаполнено(СтрокаРП_ИБ.Заказ) Тогда
			Попытка
				ДоговорСсылка = ОбщегоНазначения.ПолучитьРеквизитОбъекта(СтрокаРП_ИБ.Заказ, "ДоговорКонтрагента");
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорСсылка) Тогда
			СтрокаРП.Договор = ДоговорСсылка
		Иначе
			ТекРасчетыУЕ = Неопределено;
			ТекВидДоговора = "";
			Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
				
			Если ДанныеXDTO.ВидРасчетов = "Прочее" Тогда
				ТекВидДоговора = "Прочее";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекВидДоговора) Тогда
				ТекВидДоговора = "СПоставщиком";
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекРасчетыУЕ) Тогда
				Если ТекВидДоговора = "СКомитентом"
					Или ТекВидДоговора = "СКомиссионером" Тогда
					ТекРасчетыУЕ = Ложь;
				Иначе
					ТекРасчетыУЕ = ДанныеИБ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить()
						И ДанныеИБ.Валюта <> СтрокаРП_ИБ.ВалютаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураДоговор = Новый Структура;
			СтруктураДоговор.Вставить("ВидДоговора", ТекВидДоговора);
			СтруктураДоговор.Вставить("Организация", ДанныеИБ.Организация);
			СтруктураДоговор.Вставить("Контрагент", КонтрагентСсылка);
			СтруктураДоговор.Вставить("РасчетыВУсловныхЕдиницах", ТекРасчетыУЕ);
			
			ВалютаВзаиморасчетов = СтрокаРП_ИБ.ВалютаВзаиморасчетов;
			Если Не ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
				ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
			КонецЕсли;
			СтруктураДоговор.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
			
			СтрокаРП.Договор = Новый Структура("Значение, ИмяПКО", СтруктураДоговор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
	
		КонецЕсли;
		КонецЕсли;
		
		//Заказ
		Если ЗначениеЗаполнено(СтрокаРП_ИБ.Заказ) Тогда
			ИмяПКО = "";
			ТипСсылки = ТипЗнч(СтрокаРП_ИБ.Заказ);
			Если ТипСсылки = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
				ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
			//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			//	ИмяПКО = "Документ_ОтчетКомиссионера_Отправка";
			//ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			//	ИмяПКО = "Документ_ОтчетКомитенту_Отправка";
			ИначеЕсли ТипСсылки = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
			//ИначеЕсли  ТипСсылки = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			//	ИмяПКО = "Документ_ЗаказКлиента_Отправка";
			КонецЕсли;
		
			Если ЗначениеЗаполнено(ИмяПКО) Тогда
				СтрокаРП.Заказ = Новый Структура("Значение, ИмяПКО", СтрокаРП_ИБ.Заказ, ИмяПКО);
			КонецЕсли;
		КонецЕсли;
		
		// ВидРасчетовРасширенный и СчетУчетаРасчетовСКонтрагентом
		СчетУчетаРасчетовСКонтрагентом = "";
		ВидРасчетовРасширенный = "";
		СтрокаРП.ВидРасчетовРасширенный = ВидРасчетовРасширенный;
		СтрокаРП.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
		
	КонецЦикла;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
Процедура ЗаполнитьДанныеВходящегоДокументаСБДС(ДанныеИБ, ДанныеXDTO)
	//Дата и номер входящего документа
	ТипЗнчДокумента = ТипЗнч(ДанныеИБ);
	Если ТипЗнчДокумента=Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
		ДанныеXDTO.Вставить("ДатаВходящегоДокумента", ДанныеИБ.Дата);
		ДанныеXDTO.Вставить("НомерВходящегоДокумента", ОбщегоНазначения.ПолучитьНомерНаПечать(ДанныеИБ));
	КонецЕсли;
КонецПроцедуры
Процедура ПриОтправкеДанных_ПКОРКО(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена)
	AdditionalInfoВставить(ДанныеXDTO, "Оплачено", ДанныеИБ.Оплачено);
	ВыгрузитьКассу(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДокументВAdditionalInfo(ДанныеXDTO, "РасчетныйДокумент", ДанныеИБ.РасчетныйДокумент);
	Если ДанныеИБ.РасшифровкаПлатежа.Количество()>0 Тогда
		ВыгрузитьДокументВAdditionalInfo(ДанныеXDTO, "ДокументПланированияПлатежа", ДанныеИБ.РасшифровкаПлатежа[0].ДокументПланированияПлатежа);
	КонецЕсли;	
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
Функция ВыгрузитьОбщиеДанныеБанковскихДокументов(ДанныеИБ, ДанныеXDTO)
	МетаданныеДокумента = ДанныеИБ.Метаданные();
	Если НЕ МетаданныеДокумента.Реквизиты.Найти("НазначениеПлатежа")=Неопределено Тогда
		ДанныеXDTO.Вставить("НазначениеПлатежа", Лев(ДанныеИБ.НазначениеПлатежа,250));
	КонецЕсли;
КонецФункции
//} КонецОбласти
//{ Область Списание безналичных денежных средств
Процедура СБДСОтправкаПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена, ВидДокумента="ПлатежноеПоручениеИсходящее", Префикс="")
	ИспользуемыеПКО = Новый Структура("РасчетыСКонтрагентами,ПрочееСписание,ПрочиеРасходы,ПереводНаДругойСчет,ПлатежиВБюджет,РасчетыССотрудниками");
	
	Для Каждого ТекИсПКО Из ИспользованиеПКО Цикл
		ИспользованиеПКО[ТекИсПКО.Ключ] = Ложь;
	КонецЦикла;
	Для Каждого ТекИсПКО Из ИспользуемыеПКО Цикл
		ИспользуемыеПКО[ТекИсПКО.Ключ] = Ложь;
	КонецЦикла;
	
	//{ ДополнительныеСвойства
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Шапка.ВалютаДокумента КАК Валюта,
	|	Шапка.СчетОрганизации.ВалютаДенежныхСредств КАК ВалютаБанковскогоСчета,
	|	Шапка.СтатьяДвиженияДенежныхСредств,
	|	Шапка.Дата КАК СБДС_Дата
	|ПОМЕСТИТЬ Шапка
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПерваяСтрокаРасшифровки.СтатьяДвиженияДенежныхСредств КАК ПерваяСтрРП_СДДС,
	|	ПерваяСтрокаРасшифровки.КурсВзаиморасчетов,
	|	ПерваяСтрокаРасшифровки.КратностьВзаиморасчетов,
	|	ПерваяСтрокаРасшифровки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаДоговора,
	|	ПерваяСтрокаРасшифровки.ДоговорКонтрагента
	|ПОМЕСТИТЬ ПерваяСтрокаРасшифровки
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ПерваяСтрокаРасшифровки
	|ГДЕ
	|	ПерваяСтрокаРасшифровки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПерваяСтрокаРасшифровки.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.ВалютаБанковскогоСчета,
	|	ЕСТЬNULL(ПерваяСтрокаРасшифровки.ПерваяСтрРП_СДДС, НЕОПРЕДЕЛЕНО) КАК ПерваяСтрРП_СДДС,
	|	ПерваяСтрокаРасшифровки.ВалютаДоговора,
	|	ПерваяСтрокаРасшифровки.КурсВзаиморасчетов,
	|	ПерваяСтрокаРасшифровки.КратностьВзаиморасчетов,
	|	Шапка.СБДС_Дата,
	|	ПерваяСтрокаРасшифровки.ДоговорКонтрагента
	|ИЗ
	|	Шапка КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПерваяСтрокаРасшифровки КАК ПерваяСтрокаРасшифровки
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тчПрочиеРасходы.НомерСтроки
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК тчПрочиеРасходы
	|ГДЕ
	|	тчПрочиеРасходы.Ссылка = &Ссылка
	|	И тчПрочиеРасходы.ДокументПланированияПлатежа ССЫЛКА Документ.ЗаявкаНаРасходованиеСредств
	|	И НЕ тчПрочиеРасходы.ДокументПланированияПлатежа = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеСредств.ПустаяСсылка)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Документ.ПлатежноеПоручениеИсходящее","Документ."+ВидДокумента);
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	ДополнительныеДанные = Запрос.ВыполнитьПакет();
	
	ДанныеШапки = Новый Структура();
	ДанныеШапкиДополнительные = ДополнительныеДанные[2].Выгрузить()[0];
	ДанныеИБ.ДополнительныеСвойства.Вставить("ДанныеШапкиДополнительные", ДанныеШапкиДополнительные);
	
	//}
	
	ВидРасчетов = "";
	
	Если    ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю
		Тогда
	
		ИспользуемыеПКО.РасчетыСКонтрагентами = Истина;
		ВидРасчетов = "СПоставщиком";
	
	ИначеЕсли  ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю 
	       ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
	
		ИспользуемыеПКО.РасчетыСКонтрагентами = Истина;
		ВидРасчетов = "СПокупателем";
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами 
	      ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
	
		ИспользуемыеПКО.РасчетыСКонтрагентами = Истина;
		ВидРасчетов = "КредитыИЗаймы";
	
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств
	      ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		
		ТаблицаПрочиеРасходы = ДополнительныеДанные[3].Выгрузить();
		Если ТаблицаПрочиеРасходы.Количество()=0 Тогда
			ИспользуемыеПКО.ПрочееСписание = Истина;
			ДанныеШапки.Вставить("ВидОперацииПрочее", "ПрочееСписание");
		Иначе
			ИспользуемыеПКО.ПрочиеРасходы = Истина;
		КонецЕсли;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
	      ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
	
		ИспользуемыеПКО.ПереводНаДругойСчет = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
	      ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога Тогда
	
		ИспользуемыеПКО.ПлатежиВБюджет = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику
	      ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику Тогда
	
		ИспользуемыеПКО.РасчетыССотрудниками = Истина;
		ВидРасчетов = "Подотчет";
	
	КонецЕсли;
	
	ДанныеШапки.Вставить("ВидРасчетов", ВидРасчетов);
	ДанныеИБ.ДополнительныеСвойства.Вставить("ДанныеШапки", ДанныеШапки);
	
	Для Каждого ТекИсПКО Из ИспользуемыеПКО Цикл
		ИмяИсПКО = "Документ_СБДС"+ТекИсПКО.Ключ+?(ПустаяСтрока(Префикс),"" ,"_"+Префикс)+"_Отправка";
		Если ИспользованиеПКО.Свойство(ИмяИсПКО) Тогда
			ИспользованиеПКО[ИмяИсПКО] = ТекИсПКО.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
//} КонецОбласти
//{ Область Выплата наличных денежных средств (РКО)
Процедура ВыгрузитьКассу(ДанныеИБ, ДанныеXDTO)
	Если ЗначениеЗаполнено(ДанныеИБ.Касса) Тогда
		Касса = Новый Структура;
		Касса.Вставить("Ссылка",Строка(ДанныеИБ.Касса.УникальныйИдентификатор()));
		Касса.Вставить("Наименование",ДанныеИБ.Касса.Наименование);
		AdditionalInfoВставить(ДанныеXDTO, "Касса", Касса);
	КонецЕсли;
КонецПроцедуры
//} КонецОбласти
//} КонецОбласти
//} КонецОбласти

//} КонецОбласти
//{ Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
КонецПроцедуры

//} КонецОбласти
//{ Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	ВыполнитьПроцедуруМодуляМенеджера_Перед(ИмяПроцедуры, Параметры); //ED
	Если ИмяПроцедуры = "ПОД_Документ_АвансовыйОтчет_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_АвансовыйОтчет_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_АккрПолуч_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_АккрПолуч_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровОтПокупателя_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровОтПокупателя_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровПоставщику_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровПоставщику_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ГТДИмпорт_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ГТДИмпорт_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказКлиента_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказКлиента_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказКлиентаИзСтруктуры_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказКлиентаИзСтруктуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказКлиентаСчетПокупателю_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказКлиентаСчетПокупателю_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаказПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ЗаявкаНаРасходованиеСредств_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ЗаявкаНаРасходованиеСредств_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ИнкассоПеред_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ИнкассоПеред_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ИнкассоПолуч_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ИнкассоПолуч_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КассоваяСмена_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_КассоваяСмена_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КорректировкаДолга_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_КорректировкаДолга_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_КорректировкаПоступления_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_КорректировкаРеализации_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_КорректировкаРеализации_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОприходованиеТоваров_ПриОбработке" Тогда 
		ПОД_Документ_ОприходованиеТоваров_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_Отправ_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_Отправ_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиНаличныхДенежныхСредств_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиНаличныхДенежныхСредств_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиСобственныхТМЦ_Стр_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиСобственныхТМЦ_Стр_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетКомиссионера_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетКомиссионера_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетКомитенту_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетКомитенту_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетОРозничныхПродажах_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетОРозничныхПродажах_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДС_Ордер_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПБДС_Ордер_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПБДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПБДС_Тр_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПБДС_Тр_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПередачаМатериаловВПроизводство_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПередачаМатериаловВПроизводство_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПеремещениеТоваров_ПриОбработке" Тогда 
		ПОД_Документ_ПеремещениеТоваров_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеДопРасходов_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеДопРасходов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПриходныйКассовыйОрдер_ПриОбработке" Тогда 
		ПОД_Документ_ПриходныйКассовыйОрдер_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РасходныйКассовыйОрдер_ПриОбработке" Тогда 
		ПОД_Документ_РасходныйКассовыйОрдер_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДС_Ордер_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СБДС_Ордер_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СБДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СБДС_Тр_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СБДС_Тр_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СборкаТоваров_ПриОбработке" Тогда 
		ПОД_Документ_СборкаТоваров_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СписаниеТоваров_ПриОбработке" Тогда 
		ПОД_Документ_СписаниеТоваров_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетПокупателю_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетПокупателю_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетПоставщика_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетПоставщика_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураВыданный_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураПолученный_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураПолученный_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ВидыДокументовФизическихЛиц_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Кассы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Кассы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КассыККМ_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_КассыККМ_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_КонтактныеЛицаКонтрагентов_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_КонтактныеЛицаКонтрагентов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Организации_ПриОбработке" Тогда 
		ПОД_Справочник_Организации_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Пользователи_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Пользователи_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Склады_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Склады_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтатьиРасходов_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтатьиРасходов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Упаковки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Упаковки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Файлы_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Файлы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ХарактеристикиНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АккрПередПрочее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АккрПередПрочее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АккрПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АккрПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АккрПолучПрочее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АккрПолучПрочее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АккрПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АккрПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщикуИзНТТ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ГТДИмпорт_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ГТДИмпорт_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиентаИзСтруктуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказКлиентаИзСтруктуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиентаСчетПокупателю_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказКлиентаСчетПокупателю_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаявкаНаРасходДСРасчетыСКонт_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнкассоПередПрочее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнкассоПередПрочее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнкассоПолучПрочее_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнкассоПолучПрочее_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнкассПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнкассПередРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнкассПолучРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КассоваяСменаЗакрытие_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КассоваяСменаЗакрытие_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаДолга_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаПоступления_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_КорректировкаРеализации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_Отправ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_Отправ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиНаличныхДенежныхСредств_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетовСПокупателямиАвансы_Отправ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Отправ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетовСПокупателямиДолги_Отправ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Отправ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетовСПоставщикамиАвансы_Отправ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Отправ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетовСПоставщикамиДолги_Отправ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиСобственныхТМЦ_Стр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиСобственныхТМЦ_Стр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_Отправ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомиссионера_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетКомитенту_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах15_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах15_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Ордер_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Ордер_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Тр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Тр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Ордер_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Ордер_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Тр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Тр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Ордер_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Ордер_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Тр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Тр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Ордер_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Ордер_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Тр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Тр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Ордер_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Ордер_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Тр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Тр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаМатериаловВПроизводство_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПередачаМатериаловВПроизводство_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПереоценкаТоваровВРознице_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПереоценкаТоваровВРознице_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеДопРасходов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслугВНТТ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Ордер_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Ордер_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Тр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Тр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Ордер_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Ордер_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Тр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Тр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Ордер_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Ордер_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Тр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Тр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Ордер_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Ордер_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Тр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Тр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Ордер_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Ордер_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Тр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Тр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Ордер_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Ордер_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Тр_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Тр_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СборкаТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеНедостач_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетПокупателю_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетПокупателю_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетПоставщика_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетПоставщика_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЧекККМ_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЧекККМ_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВидыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентаБанковскиеСчета_Отпр_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентаБанковскиеСчета_Отпр_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДополнительныеРеквизиты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДополнительныеРеквизиты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДополнительныеРеквизитыКатегории_Отправ_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДополнительныеРеквизитыКатегории_Отправ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КлассификаторЕдиницИзмерения_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КлассификаторЕдиницИзмерения_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтактныеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КонтактныеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтактныеЛицаКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КонтактныеЛицаКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатурнаяГруппа_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_НоменклатурнаяГруппа_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Подразделения_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Пользователи_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СерииНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СерииНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиДДС_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Упаковки_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Упаковки_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Файлы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Файлы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ХарактеристикиНоменклатуры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЭквайринговыеТерминалы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	КонецЕсли;
КонецПроцедуры

//} КонецОбласти


//} Конвертация

//БОЙКОВ

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

Процедура ДобавитьПОД_Документ_ВнутреннееПеремещениеНаличныхДенежныхСредств(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВнутреннееПеремещениеНаличныхДенежныхСредств";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВнутреннееПеремещениеНаличныхДенежныхСредств;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ВнутреннееПеремещениеНаличныхДенежныхСредств_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПоступлениеИзДругойКассы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыдачаВДругуюКассу_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВнутреннееПеремещениеНаличныхДенежныхСредств_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПередОбработкойДанныхДокумента(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена);
КонецПроцедуры

Процедура ДобавитьПКО_Документ_ВнутреннееПеремещениеНаличныхДенежныхСредств_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПоступлениеИзДругойКассы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВнутреннееПеремещениеНаличныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПоступлениеИзДругойКассы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПоступлениеИзДругойКассы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	//НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"Дата",		"Дата");
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"Номер",		"Номер");
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"Комментарий",		"Комментарий");
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"СуммаДокумента",		"Сумма");
	
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"ВалютаДокумента",	"Валюта",	,"Справочник_Валюты");
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"ОрганизацияОтправитель",	"Организация",	,"Справочник_Организации");
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"Касса",	"КассаОтправитель",		,"Справочник_Кассы_Отправка");
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"КассаПолучатель",	"КассаПолучатель",		,"Справочник_Кассы_Отправка");
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"Ответственный",	"Ответственный",		,"Справочник_Пользователи");
	
	ПравилоКонвертации = ОДXDTOС_ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОВыдачаВДругуюКассу_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВнутреннееПеремещениеНаличныхДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОВыдачаВДругуюКассу";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПоступлениеИзДругойКассы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	//НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"Дата",		"Дата");
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"Номер",		"Номер");
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"Комментарий",		"Комментарий");
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"СуммаДокумента",		"Сумма");
	
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"ВалютаДокумента",	"Валюта",	,"Справочник_Валюты");
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"ОрганизацияОтправитель",	"Организация",	,"Справочник_Организации");
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"Касса",	"КассаОтправитель",		,"Справочник_Кассы_Отправка");
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"КассаПолучатель",	"КассаПолучатель",		,"Справочник_Кассы_Отправка");
	ДобавитьПКС(ПравилоКонвертации.Свойства,	"Ответственный",	"Ответственный",		,"Справочник_Пользователи");

	
КонецПроцедуры

Процедура ПКО_Документ_ВнутреннееПеремещениеНаличныхДенежныхСредств_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество()>1 Тогда
		Возврат;
	КонецЕсли;
	
	//ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
КонецПроцедуры
//

//Вик 2021_03_17
Функция ПолучитьДанныеПоОрдерам(Ссылка)
	СтруктураВозврата	=	Новый Структура;
	
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	ПриходныйОрдерНаТовары.Дата,
	      	 	             |	ПриходныйОрдерНаТовары.Номер
	      	 	             |ИЗ
	      	 	             |	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	      	 	             |ГДЕ
	      	 	             |	ПриходныйОрдерНаТовары.Проведен 
	      	 	             |	И ПриходныйОрдерНаТовары.ДокументПеремещения = &ДокументПеремещения");
	Запрос.УстановитьПараметр("ДокументПеремещения",Ссылка);
	Рез = Запрос.Выполнить().Выгрузить();
	Если рез.Количество() >0 тогда
		СтруктураВозврата.Вставить("НомерОрдераП",рез[0].Номер);
		СтруктураВозврата.Вставить("ДатаОрдераП",рез[0].Дата);
	иначе
		СтруктураВозврата.Вставить("НомерОрдераП","");
		СтруктураВозврата.Вставить("ДатаОрдераП",'00010101'); 	
	КонецЕсли;
	
	Запрос	=	Новый Запрос("ВЫБРАТЬ
	      	 	             |	РасходныйОрдерНаТовары.Дата,
	      	 	             |	РасходныйОрдерНаТовары.Номер
	      	 	             |ИЗ
	      	 	             |	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	      	 	             |ГДЕ
	      	 	             |	РасходныйОрдерНаТовары.Проведен 
							 |	И РасходныйОрдерНаТовары.ДокументПередачи = &ДокументПередачи");
	Запрос.УстановитьПараметр("ДокументПередачи",Ссылка);
	Рез = Запрос.Выполнить().Выгрузить();
	Если рез.Количество() >0 тогда
		СтруктураВозврата.Вставить("НомерОрдераР",рез[0].Номер);
		СтруктураВозврата.Вставить("ДатаОрдераР",рез[0].Дата);
	иначе
		СтруктураВозврата.Вставить("НомерОрдераР","");
		СтруктураВозврата.Вставить("ДатаОрдераР",'00010101'); 	
	КонецЕсли;
	
	Возврат СтруктураВозврата;	
КонецФункции
//Вик